//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

/* Imports */
var Meteor = Package.meteor.Meteor;

(function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/angular_angular/angular.js                                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * @license AngularJS v1.4.8                                                                                           // 2
 * (c) 2010-2015 Google, Inc. http://angularjs.org                                                                     // 3
 * License: MIT                                                                                                        // 4
 */                                                                                                                    // 5
(function(window, document, undefined) {'use strict';                                                                  // 6
                                                                                                                       // 7
/**                                                                                                                    // 8
 * @description                                                                                                        // 9
 *                                                                                                                     // 10
 * This object provides a utility for producing rich Error messages within                                             // 11
 * Angular. It can be called as follows:                                                                               // 12
 *                                                                                                                     // 13
 * var exampleMinErr = minErr('example');                                                                              // 14
 * throw exampleMinErr('one', 'This {0} is {1}', foo, bar);                                                            // 15
 *                                                                                                                     // 16
 * The above creates an instance of minErr in the example namespace. The                                               // 17
 * resulting error will have a namespaced error code of example.one.  The                                              // 18
 * resulting error will replace {0} with the value of foo, and {1} with the                                            // 19
 * value of bar. The object is not restricted in the number of arguments it can                                        // 20
 * take.                                                                                                               // 21
 *                                                                                                                     // 22
 * If fewer arguments are specified than necessary for interpolation, the extra                                        // 23
 * interpolation markers will be preserved in the final string.                                                        // 24
 *                                                                                                                     // 25
 * Since data will be parsed statically during a build step, some restrictions                                         // 26
 * are applied with respect to how minErr instances are created and called.                                            // 27
 * Instances should have names of the form namespaceMinErr for a minErr created                                        // 28
 * using minErr('namespace') . Error codes, namespaces and template strings                                            // 29
 * should all be static strings, not variables or general expressions.                                                 // 30
 *                                                                                                                     // 31
 * @param {string} module The namespace to use for the new minErr instance.                                            // 32
 * @param {function} ErrorConstructor Custom error constructor to be instantiated when returning                       // 33
 *   error from returned function, for cases when a particular type of error is useful.                                // 34
 * @returns {function(code:string, template:string, ...templateArgs): Error} minErr instance                           // 35
 */                                                                                                                    // 36
                                                                                                                       // 37
function minErr(module, ErrorConstructor) {                                                                            // 38
  ErrorConstructor = ErrorConstructor || Error;                                                                        // 39
  return function() {                                                                                                  // 40
    var SKIP_INDEXES = 2;                                                                                              // 41
                                                                                                                       // 42
    var templateArgs = arguments,                                                                                      // 43
      code = templateArgs[0],                                                                                          // 44
      message = '[' + (module ? module + ':' : '') + code + '] ',                                                      // 45
      template = templateArgs[1],                                                                                      // 46
      paramPrefix, i;                                                                                                  // 47
                                                                                                                       // 48
    message += template.replace(/\{\d+\}/g, function(match) {                                                          // 49
      var index = +match.slice(1, -1),                                                                                 // 50
        shiftedIndex = index + SKIP_INDEXES;                                                                           // 51
                                                                                                                       // 52
      if (shiftedIndex < templateArgs.length) {                                                                        // 53
        return toDebugString(templateArgs[shiftedIndex]);                                                              // 54
      }                                                                                                                // 55
                                                                                                                       // 56
      return match;                                                                                                    // 57
    });                                                                                                                // 58
                                                                                                                       // 59
    message += '\nhttp://errors.angularjs.org/1.4.8/' +                                                                // 60
      (module ? module + '/' : '') + code;                                                                             // 61
                                                                                                                       // 62
    for (i = SKIP_INDEXES, paramPrefix = '?'; i < templateArgs.length; i++, paramPrefix = '&') {                       // 63
      message += paramPrefix + 'p' + (i - SKIP_INDEXES) + '=' +                                                        // 64
        encodeURIComponent(toDebugString(templateArgs[i]));                                                            // 65
    }                                                                                                                  // 66
                                                                                                                       // 67
    return new ErrorConstructor(message);                                                                              // 68
  };                                                                                                                   // 69
}                                                                                                                      // 70
                                                                                                                       // 71
/* We need to tell jshint what variables are being exported */                                                         // 72
/* global angular: true,                                                                                               // 73
  msie: true,                                                                                                          // 74
  jqLite: true,                                                                                                        // 75
  jQuery: true,                                                                                                        // 76
  slice: true,                                                                                                         // 77
  splice: true,                                                                                                        // 78
  push: true,                                                                                                          // 79
  toString: true,                                                                                                      // 80
  ngMinErr: true,                                                                                                      // 81
  angularModule: true,                                                                                                 // 82
  uid: true,                                                                                                           // 83
  REGEX_STRING_REGEXP: true,                                                                                           // 84
  VALIDITY_STATE_PROPERTY: true,                                                                                       // 85
                                                                                                                       // 86
  lowercase: true,                                                                                                     // 87
  uppercase: true,                                                                                                     // 88
  manualLowercase: true,                                                                                               // 89
  manualUppercase: true,                                                                                               // 90
  nodeName_: true,                                                                                                     // 91
  isArrayLike: true,                                                                                                   // 92
  forEach: true,                                                                                                       // 93
  forEachSorted: true,                                                                                                 // 94
  reverseParams: true,                                                                                                 // 95
  nextUid: true,                                                                                                       // 96
  setHashKey: true,                                                                                                    // 97
  extend: true,                                                                                                        // 98
  toInt: true,                                                                                                         // 99
  inherit: true,                                                                                                       // 100
  merge: true,                                                                                                         // 101
  noop: true,                                                                                                          // 102
  identity: true,                                                                                                      // 103
  valueFn: true,                                                                                                       // 104
  isUndefined: true,                                                                                                   // 105
  isDefined: true,                                                                                                     // 106
  isObject: true,                                                                                                      // 107
  isBlankObject: true,                                                                                                 // 108
  isString: true,                                                                                                      // 109
  isNumber: true,                                                                                                      // 110
  isDate: true,                                                                                                        // 111
  isArray: true,                                                                                                       // 112
  isFunction: true,                                                                                                    // 113
  isRegExp: true,                                                                                                      // 114
  isWindow: true,                                                                                                      // 115
  isScope: true,                                                                                                       // 116
  isFile: true,                                                                                                        // 117
  isFormData: true,                                                                                                    // 118
  isBlob: true,                                                                                                        // 119
  isBoolean: true,                                                                                                     // 120
  isPromiseLike: true,                                                                                                 // 121
  trim: true,                                                                                                          // 122
  escapeForRegexp: true,                                                                                               // 123
  isElement: true,                                                                                                     // 124
  makeMap: true,                                                                                                       // 125
  includes: true,                                                                                                      // 126
  arrayRemove: true,                                                                                                   // 127
  copy: true,                                                                                                          // 128
  shallowCopy: true,                                                                                                   // 129
  equals: true,                                                                                                        // 130
  csp: true,                                                                                                           // 131
  jq: true,                                                                                                            // 132
  concat: true,                                                                                                        // 133
  sliceArgs: true,                                                                                                     // 134
  bind: true,                                                                                                          // 135
  toJsonReplacer: true,                                                                                                // 136
  toJson: true,                                                                                                        // 137
  fromJson: true,                                                                                                      // 138
  convertTimezoneToLocal: true,                                                                                        // 139
  timezoneToOffset: true,                                                                                              // 140
  startingTag: true,                                                                                                   // 141
  tryDecodeURIComponent: true,                                                                                         // 142
  parseKeyValue: true,                                                                                                 // 143
  toKeyValue: true,                                                                                                    // 144
  encodeUriSegment: true,                                                                                              // 145
  encodeUriQuery: true,                                                                                                // 146
  angularInit: true,                                                                                                   // 147
  bootstrap: true,                                                                                                     // 148
  getTestability: true,                                                                                                // 149
  snake_case: true,                                                                                                    // 150
  bindJQuery: true,                                                                                                    // 151
  assertArg: true,                                                                                                     // 152
  assertArgFn: true,                                                                                                   // 153
  assertNotHasOwnProperty: true,                                                                                       // 154
  getter: true,                                                                                                        // 155
  getBlockNodes: true,                                                                                                 // 156
  hasOwnProperty: true,                                                                                                // 157
  createMap: true,                                                                                                     // 158
                                                                                                                       // 159
  NODE_TYPE_ELEMENT: true,                                                                                             // 160
  NODE_TYPE_ATTRIBUTE: true,                                                                                           // 161
  NODE_TYPE_TEXT: true,                                                                                                // 162
  NODE_TYPE_COMMENT: true,                                                                                             // 163
  NODE_TYPE_DOCUMENT: true,                                                                                            // 164
  NODE_TYPE_DOCUMENT_FRAGMENT: true,                                                                                   // 165
*/                                                                                                                     // 166
                                                                                                                       // 167
////////////////////////////////////                                                                                   // 168
                                                                                                                       // 169
/**                                                                                                                    // 170
 * @ngdoc module                                                                                                       // 171
 * @name ng                                                                                                            // 172
 * @module ng                                                                                                          // 173
 * @description                                                                                                        // 174
 *                                                                                                                     // 175
 * # ng (core module)                                                                                                  // 176
 * The ng module is loaded by default when an AngularJS application is started. The module itself                      // 177
 * contains the essential components for an AngularJS application to function. The table below                         // 178
 * lists a high level breakdown of each of the services/factories, filters, directives and testing                     // 179
 * components available within this core module.                                                                       // 180
 *                                                                                                                     // 181
 * <div doc-module-components="ng"></div>                                                                              // 182
 */                                                                                                                    // 183
                                                                                                                       // 184
var REGEX_STRING_REGEXP = /^\/(.+)\/([a-z]*)$/;                                                                        // 185
                                                                                                                       // 186
// The name of a form control's ValidityState property.                                                                // 187
// This is used so that it's possible for internal tests to create mock ValidityStates.                                // 188
var VALIDITY_STATE_PROPERTY = 'validity';                                                                              // 189
                                                                                                                       // 190
/**                                                                                                                    // 191
 * @ngdoc function                                                                                                     // 192
 * @name angular.lowercase                                                                                             // 193
 * @module ng                                                                                                          // 194
 * @kind function                                                                                                      // 195
 *                                                                                                                     // 196
 * @description Converts the specified string to lowercase.                                                            // 197
 * @param {string} string String to be converted to lowercase.                                                         // 198
 * @returns {string} Lowercased string.                                                                                // 199
 */                                                                                                                    // 200
var lowercase = function(string) {return isString(string) ? string.toLowerCase() : string;};                           // 201
var hasOwnProperty = Object.prototype.hasOwnProperty;                                                                  // 202
                                                                                                                       // 203
/**                                                                                                                    // 204
 * @ngdoc function                                                                                                     // 205
 * @name angular.uppercase                                                                                             // 206
 * @module ng                                                                                                          // 207
 * @kind function                                                                                                      // 208
 *                                                                                                                     // 209
 * @description Converts the specified string to uppercase.                                                            // 210
 * @param {string} string String to be converted to uppercase.                                                         // 211
 * @returns {string} Uppercased string.                                                                                // 212
 */                                                                                                                    // 213
var uppercase = function(string) {return isString(string) ? string.toUpperCase() : string;};                           // 214
                                                                                                                       // 215
                                                                                                                       // 216
var manualLowercase = function(s) {                                                                                    // 217
  /* jshint bitwise: false */                                                                                          // 218
  return isString(s)                                                                                                   // 219
      ? s.replace(/[A-Z]/g, function(ch) {return String.fromCharCode(ch.charCodeAt(0) | 32);})                         // 220
      : s;                                                                                                             // 221
};                                                                                                                     // 222
var manualUppercase = function(s) {                                                                                    // 223
  /* jshint bitwise: false */                                                                                          // 224
  return isString(s)                                                                                                   // 225
      ? s.replace(/[a-z]/g, function(ch) {return String.fromCharCode(ch.charCodeAt(0) & ~32);})                        // 226
      : s;                                                                                                             // 227
};                                                                                                                     // 228
                                                                                                                       // 229
                                                                                                                       // 230
// String#toLowerCase and String#toUpperCase don't produce correct results in browsers with Turkish                    // 231
// locale, for this reason we need to detect this case and redefine lowercase/uppercase methods                        // 232
// with correct but slower alternatives.                                                                               // 233
if ('i' !== 'I'.toLowerCase()) {                                                                                       // 234
  lowercase = manualLowercase;                                                                                         // 235
  uppercase = manualUppercase;                                                                                         // 236
}                                                                                                                      // 237
                                                                                                                       // 238
                                                                                                                       // 239
var                                                                                                                    // 240
    msie,             // holds major version number for IE, or NaN if UA is not IE.                                    // 241
    jqLite,           // delay binding since jQuery could be loaded after us.                                          // 242
    jQuery,           // delay binding                                                                                 // 243
    slice             = [].slice,                                                                                      // 244
    splice            = [].splice,                                                                                     // 245
    push              = [].push,                                                                                       // 246
    toString          = Object.prototype.toString,                                                                     // 247
    getPrototypeOf    = Object.getPrototypeOf,                                                                         // 248
    ngMinErr          = minErr('ng'),                                                                                  // 249
                                                                                                                       // 250
    /** @name angular */                                                                                               // 251
    angular           = window.angular || (window.angular = {}),                                                       // 252
    angularModule,                                                                                                     // 253
    uid               = 0;                                                                                             // 254
                                                                                                                       // 255
/**                                                                                                                    // 256
 * documentMode is an IE-only property                                                                                 // 257
 * http://msdn.microsoft.com/en-us/library/ie/cc196988(v=vs.85).aspx                                                   // 258
 */                                                                                                                    // 259
msie = document.documentMode;                                                                                          // 260
                                                                                                                       // 261
                                                                                                                       // 262
/**                                                                                                                    // 263
 * @private                                                                                                            // 264
 * @param {*} obj                                                                                                      // 265
 * @return {boolean} Returns true if `obj` is an array or array-like object (NodeList, Arguments,                      // 266
 *                   String ...)                                                                                       // 267
 */                                                                                                                    // 268
function isArrayLike(obj) {                                                                                            // 269
                                                                                                                       // 270
  // `null`, `undefined` and `window` are not array-like                                                               // 271
  if (obj == null || isWindow(obj)) return false;                                                                      // 272
                                                                                                                       // 273
  // arrays, strings and jQuery/jqLite objects are array like                                                          // 274
  // * jqLite is either the jQuery or jqLite constructor function                                                      // 275
  // * we have to check the existance of jqLite first as this method is called                                         // 276
  //   via the forEach method when constructing the jqLite object in the first place                                   // 277
  if (isArray(obj) || isString(obj) || (jqLite && obj instanceof jqLite)) return true;                                 // 278
                                                                                                                       // 279
  // Support: iOS 8.2 (not reproducible in simulator)                                                                  // 280
  // "length" in obj used to prevent JIT error (gh-11508)                                                              // 281
  var length = "length" in Object(obj) && obj.length;                                                                  // 282
                                                                                                                       // 283
  // NodeList objects (with `item` method) and                                                                         // 284
  // other objects with suitable length characteristics are array-like                                                 // 285
  return isNumber(length) &&                                                                                           // 286
    (length >= 0 && (length - 1) in obj || typeof obj.item == 'function');                                             // 287
}                                                                                                                      // 288
                                                                                                                       // 289
/**                                                                                                                    // 290
 * @ngdoc function                                                                                                     // 291
 * @name angular.forEach                                                                                               // 292
 * @module ng                                                                                                          // 293
 * @kind function                                                                                                      // 294
 *                                                                                                                     // 295
 * @description                                                                                                        // 296
 * Invokes the `iterator` function once for each item in `obj` collection, which can be either an                      // 297
 * object or an array. The `iterator` function is invoked with `iterator(value, key, obj)`, where `value`              // 298
 * is the value of an object property or an array element, `key` is the object property key or                         // 299
 * array element index and obj is the `obj` itself. Specifying a `context` for the function is optional.               // 300
 *                                                                                                                     // 301
 * It is worth noting that `.forEach` does not iterate over inherited properties because it filters                    // 302
 * using the `hasOwnProperty` method.                                                                                  // 303
 *                                                                                                                     // 304
 * Unlike ES262's                                                                                                      // 305
 * [Array.prototype.forEach](http://www.ecma-international.org/ecma-262/5.1/#sec-15.4.4.18),                           // 306
 * Providing 'undefined' or 'null' values for `obj` will not throw a TypeError, but rather just                        // 307
 * return the value provided.                                                                                          // 308
 *                                                                                                                     // 309
   ```js                                                                                                               // 310
     var values = {name: 'misko', gender: 'male'};                                                                     // 311
     var log = [];                                                                                                     // 312
     angular.forEach(values, function(value, key) {                                                                    // 313
       this.push(key + ': ' + value);                                                                                  // 314
     }, log);                                                                                                          // 315
     expect(log).toEqual(['name: misko', 'gender: male']);                                                             // 316
   ```                                                                                                                 // 317
 *                                                                                                                     // 318
 * @param {Object|Array} obj Object to iterate over.                                                                   // 319
 * @param {Function} iterator Iterator function.                                                                       // 320
 * @param {Object=} context Object to become context (`this`) for the iterator function.                               // 321
 * @returns {Object|Array} Reference to `obj`.                                                                         // 322
 */                                                                                                                    // 323
                                                                                                                       // 324
function forEach(obj, iterator, context) {                                                                             // 325
  var key, length;                                                                                                     // 326
  if (obj) {                                                                                                           // 327
    if (isFunction(obj)) {                                                                                             // 328
      for (key in obj) {                                                                                               // 329
        // Need to check if hasOwnProperty exists,                                                                     // 330
        // as on IE8 the result of querySelectorAll is an object without a hasOwnProperty function                     // 331
        if (key != 'prototype' && key != 'length' && key != 'name' && (!obj.hasOwnProperty || obj.hasOwnProperty(key))) {
          iterator.call(context, obj[key], key, obj);                                                                  // 333
        }                                                                                                              // 334
      }                                                                                                                // 335
    } else if (isArray(obj) || isArrayLike(obj)) {                                                                     // 336
      var isPrimitive = typeof obj !== 'object';                                                                       // 337
      for (key = 0, length = obj.length; key < length; key++) {                                                        // 338
        if (isPrimitive || key in obj) {                                                                               // 339
          iterator.call(context, obj[key], key, obj);                                                                  // 340
        }                                                                                                              // 341
      }                                                                                                                // 342
    } else if (obj.forEach && obj.forEach !== forEach) {                                                               // 343
        obj.forEach(iterator, context, obj);                                                                           // 344
    } else if (isBlankObject(obj)) {                                                                                   // 345
      // createMap() fast path --- Safe to avoid hasOwnProperty check because prototype chain is empty                 // 346
      for (key in obj) {                                                                                               // 347
        iterator.call(context, obj[key], key, obj);                                                                    // 348
      }                                                                                                                // 349
    } else if (typeof obj.hasOwnProperty === 'function') {                                                             // 350
      // Slow path for objects inheriting Object.prototype, hasOwnProperty check needed                                // 351
      for (key in obj) {                                                                                               // 352
        if (obj.hasOwnProperty(key)) {                                                                                 // 353
          iterator.call(context, obj[key], key, obj);                                                                  // 354
        }                                                                                                              // 355
      }                                                                                                                // 356
    } else {                                                                                                           // 357
      // Slow path for objects which do not have a method `hasOwnProperty`                                             // 358
      for (key in obj) {                                                                                               // 359
        if (hasOwnProperty.call(obj, key)) {                                                                           // 360
          iterator.call(context, obj[key], key, obj);                                                                  // 361
        }                                                                                                              // 362
      }                                                                                                                // 363
    }                                                                                                                  // 364
  }                                                                                                                    // 365
  return obj;                                                                                                          // 366
}                                                                                                                      // 367
                                                                                                                       // 368
function forEachSorted(obj, iterator, context) {                                                                       // 369
  var keys = Object.keys(obj).sort();                                                                                  // 370
  for (var i = 0; i < keys.length; i++) {                                                                              // 371
    iterator.call(context, obj[keys[i]], keys[i]);                                                                     // 372
  }                                                                                                                    // 373
  return keys;                                                                                                         // 374
}                                                                                                                      // 375
                                                                                                                       // 376
                                                                                                                       // 377
/**                                                                                                                    // 378
 * when using forEach the params are value, key, but it is often useful to have key, value.                            // 379
 * @param {function(string, *)} iteratorFn                                                                             // 380
 * @returns {function(*, string)}                                                                                      // 381
 */                                                                                                                    // 382
function reverseParams(iteratorFn) {                                                                                   // 383
  return function(value, key) { iteratorFn(key, value); };                                                             // 384
}                                                                                                                      // 385
                                                                                                                       // 386
/**                                                                                                                    // 387
 * A consistent way of creating unique IDs in angular.                                                                 // 388
 *                                                                                                                     // 389
 * Using simple numbers allows us to generate 28.6 million unique ids per second for 10 years before                   // 390
 * we hit number precision issues in JavaScript.                                                                       // 391
 *                                                                                                                     // 392
 * Math.pow(2,53) / 60 / 60 / 24 / 365 / 10 = 28.6M                                                                    // 393
 *                                                                                                                     // 394
 * @returns {number} an unique alpha-numeric string                                                                    // 395
 */                                                                                                                    // 396
function nextUid() {                                                                                                   // 397
  return ++uid;                                                                                                        // 398
}                                                                                                                      // 399
                                                                                                                       // 400
                                                                                                                       // 401
/**                                                                                                                    // 402
 * Set or clear the hashkey for an object.                                                                             // 403
 * @param obj object                                                                                                   // 404
 * @param h the hashkey (!truthy to delete the hashkey)                                                                // 405
 */                                                                                                                    // 406
function setHashKey(obj, h) {                                                                                          // 407
  if (h) {                                                                                                             // 408
    obj.$$hashKey = h;                                                                                                 // 409
  } else {                                                                                                             // 410
    delete obj.$$hashKey;                                                                                              // 411
  }                                                                                                                    // 412
}                                                                                                                      // 413
                                                                                                                       // 414
                                                                                                                       // 415
function baseExtend(dst, objs, deep) {                                                                                 // 416
  var h = dst.$$hashKey;                                                                                               // 417
                                                                                                                       // 418
  for (var i = 0, ii = objs.length; i < ii; ++i) {                                                                     // 419
    var obj = objs[i];                                                                                                 // 420
    if (!isObject(obj) && !isFunction(obj)) continue;                                                                  // 421
    var keys = Object.keys(obj);                                                                                       // 422
    for (var j = 0, jj = keys.length; j < jj; j++) {                                                                   // 423
      var key = keys[j];                                                                                               // 424
      var src = obj[key];                                                                                              // 425
                                                                                                                       // 426
      if (deep && isObject(src)) {                                                                                     // 427
        if (isDate(src)) {                                                                                             // 428
          dst[key] = new Date(src.valueOf());                                                                          // 429
        } else if (isRegExp(src)) {                                                                                    // 430
          dst[key] = new RegExp(src);                                                                                  // 431
        } else if (src.nodeName) {                                                                                     // 432
          dst[key] = src.cloneNode(true);                                                                              // 433
        } else if (isElement(src)) {                                                                                   // 434
          dst[key] = src.clone();                                                                                      // 435
        } else {                                                                                                       // 436
          if (!isObject(dst[key])) dst[key] = isArray(src) ? [] : {};                                                  // 437
          baseExtend(dst[key], [src], true);                                                                           // 438
        }                                                                                                              // 439
      } else {                                                                                                         // 440
        dst[key] = src;                                                                                                // 441
      }                                                                                                                // 442
    }                                                                                                                  // 443
  }                                                                                                                    // 444
                                                                                                                       // 445
  setHashKey(dst, h);                                                                                                  // 446
  return dst;                                                                                                          // 447
}                                                                                                                      // 448
                                                                                                                       // 449
/**                                                                                                                    // 450
 * @ngdoc function                                                                                                     // 451
 * @name angular.extend                                                                                                // 452
 * @module ng                                                                                                          // 453
 * @kind function                                                                                                      // 454
 *                                                                                                                     // 455
 * @description                                                                                                        // 456
 * Extends the destination object `dst` by copying own enumerable properties from the `src` object(s)                  // 457
 * to `dst`. You can specify multiple `src` objects. If you want to preserve original objects, you can do so           // 458
 * by passing an empty object as the target: `var object = angular.extend({}, object1, object2)`.                      // 459
 *                                                                                                                     // 460
 * **Note:** Keep in mind that `angular.extend` does not support recursive merge (deep copy). Use                      // 461
 * {@link angular.merge} for this.                                                                                     // 462
 *                                                                                                                     // 463
 * @param {Object} dst Destination object.                                                                             // 464
 * @param {...Object} src Source object(s).                                                                            // 465
 * @returns {Object} Reference to `dst`.                                                                               // 466
 */                                                                                                                    // 467
function extend(dst) {                                                                                                 // 468
  return baseExtend(dst, slice.call(arguments, 1), false);                                                             // 469
}                                                                                                                      // 470
                                                                                                                       // 471
                                                                                                                       // 472
/**                                                                                                                    // 473
* @ngdoc function                                                                                                      // 474
* @name angular.merge                                                                                                  // 475
* @module ng                                                                                                           // 476
* @kind function                                                                                                       // 477
*                                                                                                                      // 478
* @description                                                                                                         // 479
* Deeply extends the destination object `dst` by copying own enumerable properties from the `src` object(s)            // 480
* to `dst`. You can specify multiple `src` objects. If you want to preserve original objects, you can do so            // 481
* by passing an empty object as the target: `var object = angular.merge({}, object1, object2)`.                        // 482
*                                                                                                                      // 483
* Unlike {@link angular.extend extend()}, `merge()` recursively descends into object properties of source              // 484
* objects, performing a deep copy.                                                                                     // 485
*                                                                                                                      // 486
* @param {Object} dst Destination object.                                                                              // 487
* @param {...Object} src Source object(s).                                                                             // 488
* @returns {Object} Reference to `dst`.                                                                                // 489
*/                                                                                                                     // 490
function merge(dst) {                                                                                                  // 491
  return baseExtend(dst, slice.call(arguments, 1), true);                                                              // 492
}                                                                                                                      // 493
                                                                                                                       // 494
                                                                                                                       // 495
                                                                                                                       // 496
function toInt(str) {                                                                                                  // 497
  return parseInt(str, 10);                                                                                            // 498
}                                                                                                                      // 499
                                                                                                                       // 500
                                                                                                                       // 501
function inherit(parent, extra) {                                                                                      // 502
  return extend(Object.create(parent), extra);                                                                         // 503
}                                                                                                                      // 504
                                                                                                                       // 505
/**                                                                                                                    // 506
 * @ngdoc function                                                                                                     // 507
 * @name angular.noop                                                                                                  // 508
 * @module ng                                                                                                          // 509
 * @kind function                                                                                                      // 510
 *                                                                                                                     // 511
 * @description                                                                                                        // 512
 * A function that performs no operations. This function can be useful when writing code in the                        // 513
 * functional style.                                                                                                   // 514
   ```js                                                                                                               // 515
     function foo(callback) {                                                                                          // 516
       var result = calculateResult();                                                                                 // 517
       (callback || angular.noop)(result);                                                                             // 518
     }                                                                                                                 // 519
   ```                                                                                                                 // 520
 */                                                                                                                    // 521
function noop() {}                                                                                                     // 522
noop.$inject = [];                                                                                                     // 523
                                                                                                                       // 524
                                                                                                                       // 525
/**                                                                                                                    // 526
 * @ngdoc function                                                                                                     // 527
 * @name angular.identity                                                                                              // 528
 * @module ng                                                                                                          // 529
 * @kind function                                                                                                      // 530
 *                                                                                                                     // 531
 * @description                                                                                                        // 532
 * A function that returns its first argument. This function is useful when writing code in the                        // 533
 * functional style.                                                                                                   // 534
 *                                                                                                                     // 535
   ```js                                                                                                               // 536
     function transformer(transformationFn, value) {                                                                   // 537
       return (transformationFn || angular.identity)(value);                                                           // 538
     };                                                                                                                // 539
   ```                                                                                                                 // 540
  * @param {*} value to be returned.                                                                                   // 541
  * @returns {*} the value passed in.                                                                                  // 542
 */                                                                                                                    // 543
function identity($) {return $;}                                                                                       // 544
identity.$inject = [];                                                                                                 // 545
                                                                                                                       // 546
                                                                                                                       // 547
function valueFn(value) {return function() {return value;};}                                                           // 548
                                                                                                                       // 549
function hasCustomToString(obj) {                                                                                      // 550
  return isFunction(obj.toString) && obj.toString !== toString;                                                        // 551
}                                                                                                                      // 552
                                                                                                                       // 553
                                                                                                                       // 554
/**                                                                                                                    // 555
 * @ngdoc function                                                                                                     // 556
 * @name angular.isUndefined                                                                                           // 557
 * @module ng                                                                                                          // 558
 * @kind function                                                                                                      // 559
 *                                                                                                                     // 560
 * @description                                                                                                        // 561
 * Determines if a reference is undefined.                                                                             // 562
 *                                                                                                                     // 563
 * @param {*} value Reference to check.                                                                                // 564
 * @returns {boolean} True if `value` is undefined.                                                                    // 565
 */                                                                                                                    // 566
function isUndefined(value) {return typeof value === 'undefined';}                                                     // 567
                                                                                                                       // 568
                                                                                                                       // 569
/**                                                                                                                    // 570
 * @ngdoc function                                                                                                     // 571
 * @name angular.isDefined                                                                                             // 572
 * @module ng                                                                                                          // 573
 * @kind function                                                                                                      // 574
 *                                                                                                                     // 575
 * @description                                                                                                        // 576
 * Determines if a reference is defined.                                                                               // 577
 *                                                                                                                     // 578
 * @param {*} value Reference to check.                                                                                // 579
 * @returns {boolean} True if `value` is defined.                                                                      // 580
 */                                                                                                                    // 581
function isDefined(value) {return typeof value !== 'undefined';}                                                       // 582
                                                                                                                       // 583
                                                                                                                       // 584
/**                                                                                                                    // 585
 * @ngdoc function                                                                                                     // 586
 * @name angular.isObject                                                                                              // 587
 * @module ng                                                                                                          // 588
 * @kind function                                                                                                      // 589
 *                                                                                                                     // 590
 * @description                                                                                                        // 591
 * Determines if a reference is an `Object`. Unlike `typeof` in JavaScript, `null`s are not                            // 592
 * considered to be objects. Note that JavaScript arrays are objects.                                                  // 593
 *                                                                                                                     // 594
 * @param {*} value Reference to check.                                                                                // 595
 * @returns {boolean} True if `value` is an `Object` but not `null`.                                                   // 596
 */                                                                                                                    // 597
function isObject(value) {                                                                                             // 598
  // http://jsperf.com/isobject4                                                                                       // 599
  return value !== null && typeof value === 'object';                                                                  // 600
}                                                                                                                      // 601
                                                                                                                       // 602
                                                                                                                       // 603
/**                                                                                                                    // 604
 * Determine if a value is an object with a null prototype                                                             // 605
 *                                                                                                                     // 606
 * @returns {boolean} True if `value` is an `Object` with a null prototype                                             // 607
 */                                                                                                                    // 608
function isBlankObject(value) {                                                                                        // 609
  return value !== null && typeof value === 'object' && !getPrototypeOf(value);                                        // 610
}                                                                                                                      // 611
                                                                                                                       // 612
                                                                                                                       // 613
/**                                                                                                                    // 614
 * @ngdoc function                                                                                                     // 615
 * @name angular.isString                                                                                              // 616
 * @module ng                                                                                                          // 617
 * @kind function                                                                                                      // 618
 *                                                                                                                     // 619
 * @description                                                                                                        // 620
 * Determines if a reference is a `String`.                                                                            // 621
 *                                                                                                                     // 622
 * @param {*} value Reference to check.                                                                                // 623
 * @returns {boolean} True if `value` is a `String`.                                                                   // 624
 */                                                                                                                    // 625
function isString(value) {return typeof value === 'string';}                                                           // 626
                                                                                                                       // 627
                                                                                                                       // 628
/**                                                                                                                    // 629
 * @ngdoc function                                                                                                     // 630
 * @name angular.isNumber                                                                                              // 631
 * @module ng                                                                                                          // 632
 * @kind function                                                                                                      // 633
 *                                                                                                                     // 634
 * @description                                                                                                        // 635
 * Determines if a reference is a `Number`.                                                                            // 636
 *                                                                                                                     // 637
 * This includes the "special" numbers `NaN`, `+Infinity` and `-Infinity`.                                             // 638
 *                                                                                                                     // 639
 * If you wish to exclude these then you can use the native                                                            // 640
 * [`isFinite'](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/isFinite)             // 641
 * method.                                                                                                             // 642
 *                                                                                                                     // 643
 * @param {*} value Reference to check.                                                                                // 644
 * @returns {boolean} True if `value` is a `Number`.                                                                   // 645
 */                                                                                                                    // 646
function isNumber(value) {return typeof value === 'number';}                                                           // 647
                                                                                                                       // 648
                                                                                                                       // 649
/**                                                                                                                    // 650
 * @ngdoc function                                                                                                     // 651
 * @name angular.isDate                                                                                                // 652
 * @module ng                                                                                                          // 653
 * @kind function                                                                                                      // 654
 *                                                                                                                     // 655
 * @description                                                                                                        // 656
 * Determines if a value is a date.                                                                                    // 657
 *                                                                                                                     // 658
 * @param {*} value Reference to check.                                                                                // 659
 * @returns {boolean} True if `value` is a `Date`.                                                                     // 660
 */                                                                                                                    // 661
function isDate(value) {                                                                                               // 662
  return toString.call(value) === '[object Date]';                                                                     // 663
}                                                                                                                      // 664
                                                                                                                       // 665
                                                                                                                       // 666
/**                                                                                                                    // 667
 * @ngdoc function                                                                                                     // 668
 * @name angular.isArray                                                                                               // 669
 * @module ng                                                                                                          // 670
 * @kind function                                                                                                      // 671
 *                                                                                                                     // 672
 * @description                                                                                                        // 673
 * Determines if a reference is an `Array`.                                                                            // 674
 *                                                                                                                     // 675
 * @param {*} value Reference to check.                                                                                // 676
 * @returns {boolean} True if `value` is an `Array`.                                                                   // 677
 */                                                                                                                    // 678
var isArray = Array.isArray;                                                                                           // 679
                                                                                                                       // 680
/**                                                                                                                    // 681
 * @ngdoc function                                                                                                     // 682
 * @name angular.isFunction                                                                                            // 683
 * @module ng                                                                                                          // 684
 * @kind function                                                                                                      // 685
 *                                                                                                                     // 686
 * @description                                                                                                        // 687
 * Determines if a reference is a `Function`.                                                                          // 688
 *                                                                                                                     // 689
 * @param {*} value Reference to check.                                                                                // 690
 * @returns {boolean} True if `value` is a `Function`.                                                                 // 691
 */                                                                                                                    // 692
function isFunction(value) {return typeof value === 'function';}                                                       // 693
                                                                                                                       // 694
                                                                                                                       // 695
/**                                                                                                                    // 696
 * Determines if a value is a regular expression object.                                                               // 697
 *                                                                                                                     // 698
 * @private                                                                                                            // 699
 * @param {*} value Reference to check.                                                                                // 700
 * @returns {boolean} True if `value` is a `RegExp`.                                                                   // 701
 */                                                                                                                    // 702
function isRegExp(value) {                                                                                             // 703
  return toString.call(value) === '[object RegExp]';                                                                   // 704
}                                                                                                                      // 705
                                                                                                                       // 706
                                                                                                                       // 707
/**                                                                                                                    // 708
 * Checks if `obj` is a window object.                                                                                 // 709
 *                                                                                                                     // 710
 * @private                                                                                                            // 711
 * @param {*} obj Object to check                                                                                      // 712
 * @returns {boolean} True if `obj` is a window obj.                                                                   // 713
 */                                                                                                                    // 714
function isWindow(obj) {                                                                                               // 715
  return obj && obj.window === obj;                                                                                    // 716
}                                                                                                                      // 717
                                                                                                                       // 718
                                                                                                                       // 719
function isScope(obj) {                                                                                                // 720
  return obj && obj.$evalAsync && obj.$watch;                                                                          // 721
}                                                                                                                      // 722
                                                                                                                       // 723
                                                                                                                       // 724
function isFile(obj) {                                                                                                 // 725
  return toString.call(obj) === '[object File]';                                                                       // 726
}                                                                                                                      // 727
                                                                                                                       // 728
                                                                                                                       // 729
function isFormData(obj) {                                                                                             // 730
  return toString.call(obj) === '[object FormData]';                                                                   // 731
}                                                                                                                      // 732
                                                                                                                       // 733
                                                                                                                       // 734
function isBlob(obj) {                                                                                                 // 735
  return toString.call(obj) === '[object Blob]';                                                                       // 736
}                                                                                                                      // 737
                                                                                                                       // 738
                                                                                                                       // 739
function isBoolean(value) {                                                                                            // 740
  return typeof value === 'boolean';                                                                                   // 741
}                                                                                                                      // 742
                                                                                                                       // 743
                                                                                                                       // 744
function isPromiseLike(obj) {                                                                                          // 745
  return obj && isFunction(obj.then);                                                                                  // 746
}                                                                                                                      // 747
                                                                                                                       // 748
                                                                                                                       // 749
var TYPED_ARRAY_REGEXP = /^\[object (?:Uint8|Uint8Clamped|Uint16|Uint32|Int8|Int16|Int32|Float32|Float64)Array\]$/;    // 750
function isTypedArray(value) {                                                                                         // 751
  return value && isNumber(value.length) && TYPED_ARRAY_REGEXP.test(toString.call(value));                             // 752
}                                                                                                                      // 753
                                                                                                                       // 754
                                                                                                                       // 755
var trim = function(value) {                                                                                           // 756
  return isString(value) ? value.trim() : value;                                                                       // 757
};                                                                                                                     // 758
                                                                                                                       // 759
// Copied from:                                                                                                        // 760
// http://docs.closure-library.googlecode.com/git/local_closure_goog_string_string.js.source.html#line1021             // 761
// Prereq: s is a string.                                                                                              // 762
var escapeForRegexp = function(s) {                                                                                    // 763
  return s.replace(/([-()\[\]{}+?*.$\^|,:#<!\\])/g, '\\$1').                                                           // 764
           replace(/\x08/g, '\\x08');                                                                                  // 765
};                                                                                                                     // 766
                                                                                                                       // 767
                                                                                                                       // 768
/**                                                                                                                    // 769
 * @ngdoc function                                                                                                     // 770
 * @name angular.isElement                                                                                             // 771
 * @module ng                                                                                                          // 772
 * @kind function                                                                                                      // 773
 *                                                                                                                     // 774
 * @description                                                                                                        // 775
 * Determines if a reference is a DOM element (or wrapped jQuery element).                                             // 776
 *                                                                                                                     // 777
 * @param {*} value Reference to check.                                                                                // 778
 * @returns {boolean} True if `value` is a DOM element (or wrapped jQuery element).                                    // 779
 */                                                                                                                    // 780
function isElement(node) {                                                                                             // 781
  return !!(node &&                                                                                                    // 782
    (node.nodeName  // we are a direct element                                                                         // 783
    || (node.prop && node.attr && node.find)));  // we have an on and find method part of jQuery API                   // 784
}                                                                                                                      // 785
                                                                                                                       // 786
/**                                                                                                                    // 787
 * @param str 'key1,key2,...'                                                                                          // 788
 * @returns {object} in the form of {key1:true, key2:true, ...}                                                        // 789
 */                                                                                                                    // 790
function makeMap(str) {                                                                                                // 791
  var obj = {}, items = str.split(","), i;                                                                             // 792
  for (i = 0; i < items.length; i++) {                                                                                 // 793
    obj[items[i]] = true;                                                                                              // 794
  }                                                                                                                    // 795
  return obj;                                                                                                          // 796
}                                                                                                                      // 797
                                                                                                                       // 798
                                                                                                                       // 799
function nodeName_(element) {                                                                                          // 800
  return lowercase(element.nodeName || (element[0] && element[0].nodeName));                                           // 801
}                                                                                                                      // 802
                                                                                                                       // 803
function includes(array, obj) {                                                                                        // 804
  return Array.prototype.indexOf.call(array, obj) != -1;                                                               // 805
}                                                                                                                      // 806
                                                                                                                       // 807
function arrayRemove(array, value) {                                                                                   // 808
  var index = array.indexOf(value);                                                                                    // 809
  if (index >= 0) {                                                                                                    // 810
    array.splice(index, 1);                                                                                            // 811
  }                                                                                                                    // 812
  return index;                                                                                                        // 813
}                                                                                                                      // 814
                                                                                                                       // 815
/**                                                                                                                    // 816
 * @ngdoc function                                                                                                     // 817
 * @name angular.copy                                                                                                  // 818
 * @module ng                                                                                                          // 819
 * @kind function                                                                                                      // 820
 *                                                                                                                     // 821
 * @description                                                                                                        // 822
 * Creates a deep copy of `source`, which should be an object or an array.                                             // 823
 *                                                                                                                     // 824
 * * If no destination is supplied, a copy of the object or array is created.                                          // 825
 * * If a destination is provided, all of its elements (for arrays) or properties (for objects)                        // 826
 *   are deleted and then all elements/properties from the source are copied to it.                                    // 827
 * * If `source` is not an object or array (inc. `null` and `undefined`), `source` is returned.                        // 828
 * * If `source` is identical to 'destination' an exception will be thrown.                                            // 829
 *                                                                                                                     // 830
 * @param {*} source The source that will be used to make a copy.                                                      // 831
 *                   Can be any type, including primitives, `null`, and `undefined`.                                   // 832
 * @param {(Object|Array)=} destination Destination into which the source is copied. If                                // 833
 *     provided, must be of the same type as `source`.                                                                 // 834
 * @returns {*} The copy or updated `destination`, if `destination` was specified.                                     // 835
 *                                                                                                                     // 836
 * @example                                                                                                            // 837
 <example module="copyExample">                                                                                        // 838
 <file name="index.html">                                                                                              // 839
 <div ng-controller="ExampleController">                                                                               // 840
 <form novalidate class="simple-form">                                                                                 // 841
 Name: <input type="text" ng-model="user.name" /><br />                                                                // 842
 E-mail: <input type="email" ng-model="user.email" /><br />                                                            // 843
 Gender: <input type="radio" ng-model="user.gender" value="male" />male                                                // 844
 <input type="radio" ng-model="user.gender" value="female" />female<br />                                              // 845
 <button ng-click="reset()">RESET</button>                                                                             // 846
 <button ng-click="update(user)">SAVE</button>                                                                         // 847
 </form>                                                                                                               // 848
 <pre>form = {{user | json}}</pre>                                                                                     // 849
 <pre>master = {{master | json}}</pre>                                                                                 // 850
 </div>                                                                                                                // 851
                                                                                                                       // 852
 <script>                                                                                                              // 853
  angular.module('copyExample', [])                                                                                    // 854
    .controller('ExampleController', ['$scope', function($scope) {                                                     // 855
      $scope.master= {};                                                                                               // 856
                                                                                                                       // 857
      $scope.update = function(user) {                                                                                 // 858
        // Example with 1 argument                                                                                     // 859
        $scope.master= angular.copy(user);                                                                             // 860
      };                                                                                                               // 861
                                                                                                                       // 862
      $scope.reset = function() {                                                                                      // 863
        // Example with 2 arguments                                                                                    // 864
        angular.copy($scope.master, $scope.user);                                                                      // 865
      };                                                                                                               // 866
                                                                                                                       // 867
      $scope.reset();                                                                                                  // 868
    }]);                                                                                                               // 869
 </script>                                                                                                             // 870
 </file>                                                                                                               // 871
 </example>                                                                                                            // 872
 */                                                                                                                    // 873
function copy(source, destination) {                                                                                   // 874
  var stackSource = [];                                                                                                // 875
  var stackDest = [];                                                                                                  // 876
                                                                                                                       // 877
  if (destination) {                                                                                                   // 878
    if (isTypedArray(destination)) {                                                                                   // 879
      throw ngMinErr('cpta', "Can't copy! TypedArray destination cannot be mutated.");                                 // 880
    }                                                                                                                  // 881
    if (source === destination) {                                                                                      // 882
      throw ngMinErr('cpi', "Can't copy! Source and destination are identical.");                                      // 883
    }                                                                                                                  // 884
                                                                                                                       // 885
    // Empty the destination object                                                                                    // 886
    if (isArray(destination)) {                                                                                        // 887
      destination.length = 0;                                                                                          // 888
    } else {                                                                                                           // 889
      forEach(destination, function(value, key) {                                                                      // 890
        if (key !== '$$hashKey') {                                                                                     // 891
          delete destination[key];                                                                                     // 892
        }                                                                                                              // 893
      });                                                                                                              // 894
    }                                                                                                                  // 895
                                                                                                                       // 896
    stackSource.push(source);                                                                                          // 897
    stackDest.push(destination);                                                                                       // 898
    return copyRecurse(source, destination);                                                                           // 899
  }                                                                                                                    // 900
                                                                                                                       // 901
  return copyElement(source);                                                                                          // 902
                                                                                                                       // 903
  function copyRecurse(source, destination) {                                                                          // 904
    var h = destination.$$hashKey;                                                                                     // 905
    var result, key;                                                                                                   // 906
    if (isArray(source)) {                                                                                             // 907
      for (var i = 0, ii = source.length; i < ii; i++) {                                                               // 908
        destination.push(copyElement(source[i]));                                                                      // 909
      }                                                                                                                // 910
    } else if (isBlankObject(source)) {                                                                                // 911
      // createMap() fast path --- Safe to avoid hasOwnProperty check because prototype chain is empty                 // 912
      for (key in source) {                                                                                            // 913
        destination[key] = copyElement(source[key]);                                                                   // 914
      }                                                                                                                // 915
    } else if (source && typeof source.hasOwnProperty === 'function') {                                                // 916
      // Slow path, which must rely on hasOwnProperty                                                                  // 917
      for (key in source) {                                                                                            // 918
        if (source.hasOwnProperty(key)) {                                                                              // 919
          destination[key] = copyElement(source[key]);                                                                 // 920
        }                                                                                                              // 921
      }                                                                                                                // 922
    } else {                                                                                                           // 923
      // Slowest path --- hasOwnProperty can't be called as a method                                                   // 924
      for (key in source) {                                                                                            // 925
        if (hasOwnProperty.call(source, key)) {                                                                        // 926
          destination[key] = copyElement(source[key]);                                                                 // 927
        }                                                                                                              // 928
      }                                                                                                                // 929
    }                                                                                                                  // 930
    setHashKey(destination, h);                                                                                        // 931
    return destination;                                                                                                // 932
  }                                                                                                                    // 933
                                                                                                                       // 934
  function copyElement(source) {                                                                                       // 935
    // Simple values                                                                                                   // 936
    if (!isObject(source)) {                                                                                           // 937
      return source;                                                                                                   // 938
    }                                                                                                                  // 939
                                                                                                                       // 940
    // Already copied values                                                                                           // 941
    var index = stackSource.indexOf(source);                                                                           // 942
    if (index !== -1) {                                                                                                // 943
      return stackDest[index];                                                                                         // 944
    }                                                                                                                  // 945
                                                                                                                       // 946
    if (isWindow(source) || isScope(source)) {                                                                         // 947
      throw ngMinErr('cpws',                                                                                           // 948
        "Can't copy! Making copies of Window or Scope instances is not supported.");                                   // 949
    }                                                                                                                  // 950
                                                                                                                       // 951
    var needsRecurse = false;                                                                                          // 952
    var destination;                                                                                                   // 953
                                                                                                                       // 954
    if (isArray(source)) {                                                                                             // 955
      destination = [];                                                                                                // 956
      needsRecurse = true;                                                                                             // 957
    } else if (isTypedArray(source)) {                                                                                 // 958
      destination = new source.constructor(source);                                                                    // 959
    } else if (isDate(source)) {                                                                                       // 960
      destination = new Date(source.getTime());                                                                        // 961
    } else if (isRegExp(source)) {                                                                                     // 962
      destination = new RegExp(source.source, source.toString().match(/[^\/]*$/)[0]);                                  // 963
      destination.lastIndex = source.lastIndex;                                                                        // 964
    } else if (isFunction(source.cloneNode)) {                                                                         // 965
        destination = source.cloneNode(true);                                                                          // 966
    } else {                                                                                                           // 967
      destination = Object.create(getPrototypeOf(source));                                                             // 968
      needsRecurse = true;                                                                                             // 969
    }                                                                                                                  // 970
                                                                                                                       // 971
    stackSource.push(source);                                                                                          // 972
    stackDest.push(destination);                                                                                       // 973
                                                                                                                       // 974
    return needsRecurse                                                                                                // 975
      ? copyRecurse(source, destination)                                                                               // 976
      : destination;                                                                                                   // 977
  }                                                                                                                    // 978
}                                                                                                                      // 979
                                                                                                                       // 980
/**                                                                                                                    // 981
 * Creates a shallow copy of an object, an array or a primitive.                                                       // 982
 *                                                                                                                     // 983
 * Assumes that there are no proto properties for objects.                                                             // 984
 */                                                                                                                    // 985
function shallowCopy(src, dst) {                                                                                       // 986
  if (isArray(src)) {                                                                                                  // 987
    dst = dst || [];                                                                                                   // 988
                                                                                                                       // 989
    for (var i = 0, ii = src.length; i < ii; i++) {                                                                    // 990
      dst[i] = src[i];                                                                                                 // 991
    }                                                                                                                  // 992
  } else if (isObject(src)) {                                                                                          // 993
    dst = dst || {};                                                                                                   // 994
                                                                                                                       // 995
    for (var key in src) {                                                                                             // 996
      if (!(key.charAt(0) === '$' && key.charAt(1) === '$')) {                                                         // 997
        dst[key] = src[key];                                                                                           // 998
      }                                                                                                                // 999
    }                                                                                                                  // 1000
  }                                                                                                                    // 1001
                                                                                                                       // 1002
  return dst || src;                                                                                                   // 1003
}                                                                                                                      // 1004
                                                                                                                       // 1005
                                                                                                                       // 1006
/**                                                                                                                    // 1007
 * @ngdoc function                                                                                                     // 1008
 * @name angular.equals                                                                                                // 1009
 * @module ng                                                                                                          // 1010
 * @kind function                                                                                                      // 1011
 *                                                                                                                     // 1012
 * @description                                                                                                        // 1013
 * Determines if two objects or two values are equivalent. Supports value types, regular                               // 1014
 * expressions, arrays and objects.                                                                                    // 1015
 *                                                                                                                     // 1016
 * Two objects or values are considered equivalent if at least one of the following is true:                           // 1017
 *                                                                                                                     // 1018
 * * Both objects or values pass `===` comparison.                                                                     // 1019
 * * Both objects or values are of the same type and all of their properties are equal by                              // 1020
 *   comparing them with `angular.equals`.                                                                             // 1021
 * * Both values are NaN. (In JavaScript, NaN == NaN => false. But we consider two NaN as equal)                       // 1022
 * * Both values represent the same regular expression (In JavaScript,                                                 // 1023
 *   /abc/ == /abc/ => false. But we consider two regular expressions as equal when their textual                      // 1024
 *   representation matches).                                                                                          // 1025
 *                                                                                                                     // 1026
 * During a property comparison, properties of `function` type and properties with names                               // 1027
 * that begin with `$` are ignored.                                                                                    // 1028
 *                                                                                                                     // 1029
 * Scope and DOMWindow objects are being compared only by identify (`===`).                                            // 1030
 *                                                                                                                     // 1031
 * @param {*} o1 Object or value to compare.                                                                           // 1032
 * @param {*} o2 Object or value to compare.                                                                           // 1033
 * @returns {boolean} True if arguments are equal.                                                                     // 1034
 */                                                                                                                    // 1035
function equals(o1, o2) {                                                                                              // 1036
  if (o1 === o2) return true;                                                                                          // 1037
  if (o1 === null || o2 === null) return false;                                                                        // 1038
  if (o1 !== o1 && o2 !== o2) return true; // NaN === NaN                                                              // 1039
  var t1 = typeof o1, t2 = typeof o2, length, key, keySet;                                                             // 1040
  if (t1 == t2) {                                                                                                      // 1041
    if (t1 == 'object') {                                                                                              // 1042
      if (isArray(o1)) {                                                                                               // 1043
        if (!isArray(o2)) return false;                                                                                // 1044
        if ((length = o1.length) == o2.length) {                                                                       // 1045
          for (key = 0; key < length; key++) {                                                                         // 1046
            if (!equals(o1[key], o2[key])) return false;                                                               // 1047
          }                                                                                                            // 1048
          return true;                                                                                                 // 1049
        }                                                                                                              // 1050
      } else if (isDate(o1)) {                                                                                         // 1051
        if (!isDate(o2)) return false;                                                                                 // 1052
        return equals(o1.getTime(), o2.getTime());                                                                     // 1053
      } else if (isRegExp(o1)) {                                                                                       // 1054
        return isRegExp(o2) ? o1.toString() == o2.toString() : false;                                                  // 1055
      } else {                                                                                                         // 1056
        if (isScope(o1) || isScope(o2) || isWindow(o1) || isWindow(o2) ||                                              // 1057
          isArray(o2) || isDate(o2) || isRegExp(o2)) return false;                                                     // 1058
        keySet = createMap();                                                                                          // 1059
        for (key in o1) {                                                                                              // 1060
          if (key.charAt(0) === '$' || isFunction(o1[key])) continue;                                                  // 1061
          if (!equals(o1[key], o2[key])) return false;                                                                 // 1062
          keySet[key] = true;                                                                                          // 1063
        }                                                                                                              // 1064
        for (key in o2) {                                                                                              // 1065
          if (!(key in keySet) &&                                                                                      // 1066
              key.charAt(0) !== '$' &&                                                                                 // 1067
              isDefined(o2[key]) &&                                                                                    // 1068
              !isFunction(o2[key])) return false;                                                                      // 1069
        }                                                                                                              // 1070
        return true;                                                                                                   // 1071
      }                                                                                                                // 1072
    }                                                                                                                  // 1073
  }                                                                                                                    // 1074
  return false;                                                                                                        // 1075
}                                                                                                                      // 1076
                                                                                                                       // 1077
var csp = function() {                                                                                                 // 1078
  if (!isDefined(csp.rules)) {                                                                                         // 1079
                                                                                                                       // 1080
                                                                                                                       // 1081
    var ngCspElement = (document.querySelector('[ng-csp]') ||                                                          // 1082
                    document.querySelector('[data-ng-csp]'));                                                          // 1083
                                                                                                                       // 1084
    if (ngCspElement) {                                                                                                // 1085
      var ngCspAttribute = ngCspElement.getAttribute('ng-csp') ||                                                      // 1086
                    ngCspElement.getAttribute('data-ng-csp');                                                          // 1087
      csp.rules = {                                                                                                    // 1088
        noUnsafeEval: !ngCspAttribute || (ngCspAttribute.indexOf('no-unsafe-eval') !== -1),                            // 1089
        noInlineStyle: !ngCspAttribute || (ngCspAttribute.indexOf('no-inline-style') !== -1)                           // 1090
      };                                                                                                               // 1091
    } else {                                                                                                           // 1092
      csp.rules = {                                                                                                    // 1093
        noUnsafeEval: noUnsafeEval(),                                                                                  // 1094
        noInlineStyle: false                                                                                           // 1095
      };                                                                                                               // 1096
    }                                                                                                                  // 1097
  }                                                                                                                    // 1098
                                                                                                                       // 1099
  return csp.rules;                                                                                                    // 1100
                                                                                                                       // 1101
  function noUnsafeEval() {                                                                                            // 1102
    try {                                                                                                              // 1103
      /* jshint -W031, -W054 */                                                                                        // 1104
      new Function('');                                                                                                // 1105
      /* jshint +W031, +W054 */                                                                                        // 1106
      return false;                                                                                                    // 1107
    } catch (e) {                                                                                                      // 1108
      return true;                                                                                                     // 1109
    }                                                                                                                  // 1110
  }                                                                                                                    // 1111
};                                                                                                                     // 1112
                                                                                                                       // 1113
/**                                                                                                                    // 1114
 * @ngdoc directive                                                                                                    // 1115
 * @module ng                                                                                                          // 1116
 * @name ngJq                                                                                                          // 1117
 *                                                                                                                     // 1118
 * @element ANY                                                                                                        // 1119
 * @param {string=} ngJq the name of the library available under `window`                                              // 1120
 * to be used for angular.element                                                                                      // 1121
 * @description                                                                                                        // 1122
 * Use this directive to force the angular.element library.  This should be                                            // 1123
 * used to force either jqLite by leaving ng-jq blank or setting the name of                                           // 1124
 * the jquery variable under window (eg. jQuery).                                                                      // 1125
 *                                                                                                                     // 1126
 * Since angular looks for this directive when it is loaded (doesn't wait for the                                      // 1127
 * DOMContentLoaded event), it must be placed on an element that comes before the script                               // 1128
 * which loads angular. Also, only the first instance of `ng-jq` will be used and all                                  // 1129
 * others ignored.                                                                                                     // 1130
 *                                                                                                                     // 1131
 * @example                                                                                                            // 1132
 * This example shows how to force jqLite using the `ngJq` directive to the `html` tag.                                // 1133
 ```html                                                                                                               // 1134
 <!doctype html>                                                                                                       // 1135
 <html ng-app ng-jq>                                                                                                   // 1136
 ...                                                                                                                   // 1137
 ...                                                                                                                   // 1138
 </html>                                                                                                               // 1139
 ```                                                                                                                   // 1140
 * @example                                                                                                            // 1141
 * This example shows how to use a jQuery based library of a different name.                                           // 1142
 * The library name must be available at the top most 'window'.                                                        // 1143
 ```html                                                                                                               // 1144
 <!doctype html>                                                                                                       // 1145
 <html ng-app ng-jq="jQueryLib">                                                                                       // 1146
 ...                                                                                                                   // 1147
 ...                                                                                                                   // 1148
 </html>                                                                                                               // 1149
 ```                                                                                                                   // 1150
 */                                                                                                                    // 1151
var jq = function() {                                                                                                  // 1152
  if (isDefined(jq.name_)) return jq.name_;                                                                            // 1153
  var el;                                                                                                              // 1154
  var i, ii = ngAttrPrefixes.length, prefix, name;                                                                     // 1155
  for (i = 0; i < ii; ++i) {                                                                                           // 1156
    prefix = ngAttrPrefixes[i];                                                                                        // 1157
    if (el = document.querySelector('[' + prefix.replace(':', '\\:') + 'jq]')) {                                       // 1158
      name = el.getAttribute(prefix + 'jq');                                                                           // 1159
      break;                                                                                                           // 1160
    }                                                                                                                  // 1161
  }                                                                                                                    // 1162
                                                                                                                       // 1163
  return (jq.name_ = name);                                                                                            // 1164
};                                                                                                                     // 1165
                                                                                                                       // 1166
function concat(array1, array2, index) {                                                                               // 1167
  return array1.concat(slice.call(array2, index));                                                                     // 1168
}                                                                                                                      // 1169
                                                                                                                       // 1170
function sliceArgs(args, startIndex) {                                                                                 // 1171
  return slice.call(args, startIndex || 0);                                                                            // 1172
}                                                                                                                      // 1173
                                                                                                                       // 1174
                                                                                                                       // 1175
/* jshint -W101 */                                                                                                     // 1176
/**                                                                                                                    // 1177
 * @ngdoc function                                                                                                     // 1178
 * @name angular.bind                                                                                                  // 1179
 * @module ng                                                                                                          // 1180
 * @kind function                                                                                                      // 1181
 *                                                                                                                     // 1182
 * @description                                                                                                        // 1183
 * Returns a function which calls function `fn` bound to `self` (`self` becomes the `this` for                         // 1184
 * `fn`). You can supply optional `args` that are prebound to the function. This feature is also                       // 1185
 * known as [partial application](http://en.wikipedia.org/wiki/Partial_application), as                                // 1186
 * distinguished from [function currying](http://en.wikipedia.org/wiki/Currying#Contrast_with_partial_function_application).
 *                                                                                                                     // 1188
 * @param {Object} self Context which `fn` should be evaluated in.                                                     // 1189
 * @param {function()} fn Function to be bound.                                                                        // 1190
 * @param {...*} args Optional arguments to be prebound to the `fn` function call.                                     // 1191
 * @returns {function()} Function that wraps the `fn` with all the specified bindings.                                 // 1192
 */                                                                                                                    // 1193
/* jshint +W101 */                                                                                                     // 1194
function bind(self, fn) {                                                                                              // 1195
  var curryArgs = arguments.length > 2 ? sliceArgs(arguments, 2) : [];                                                 // 1196
  if (isFunction(fn) && !(fn instanceof RegExp)) {                                                                     // 1197
    return curryArgs.length                                                                                            // 1198
      ? function() {                                                                                                   // 1199
          return arguments.length                                                                                      // 1200
            ? fn.apply(self, concat(curryArgs, arguments, 0))                                                          // 1201
            : fn.apply(self, curryArgs);                                                                               // 1202
        }                                                                                                              // 1203
      : function() {                                                                                                   // 1204
          return arguments.length                                                                                      // 1205
            ? fn.apply(self, arguments)                                                                                // 1206
            : fn.call(self);                                                                                           // 1207
        };                                                                                                             // 1208
  } else {                                                                                                             // 1209
    // in IE, native methods are not functions so they cannot be bound (note: they don't need to be)                   // 1210
    return fn;                                                                                                         // 1211
  }                                                                                                                    // 1212
}                                                                                                                      // 1213
                                                                                                                       // 1214
                                                                                                                       // 1215
function toJsonReplacer(key, value) {                                                                                  // 1216
  var val = value;                                                                                                     // 1217
                                                                                                                       // 1218
  if (typeof key === 'string' && key.charAt(0) === '$' && key.charAt(1) === '$') {                                     // 1219
    val = undefined;                                                                                                   // 1220
  } else if (isWindow(value)) {                                                                                        // 1221
    val = '$WINDOW';                                                                                                   // 1222
  } else if (value &&  document === value) {                                                                           // 1223
    val = '$DOCUMENT';                                                                                                 // 1224
  } else if (isScope(value)) {                                                                                         // 1225
    val = '$SCOPE';                                                                                                    // 1226
  }                                                                                                                    // 1227
                                                                                                                       // 1228
  return val;                                                                                                          // 1229
}                                                                                                                      // 1230
                                                                                                                       // 1231
                                                                                                                       // 1232
/**                                                                                                                    // 1233
 * @ngdoc function                                                                                                     // 1234
 * @name angular.toJson                                                                                                // 1235
 * @module ng                                                                                                          // 1236
 * @kind function                                                                                                      // 1237
 *                                                                                                                     // 1238
 * @description                                                                                                        // 1239
 * Serializes input into a JSON-formatted string. Properties with leading $$ characters will be                        // 1240
 * stripped since angular uses this notation internally.                                                               // 1241
 *                                                                                                                     // 1242
 * @param {Object|Array|Date|string|number} obj Input to be serialized into JSON.                                      // 1243
 * @param {boolean|number} [pretty=2] If set to true, the JSON output will contain newlines and whitespace.            // 1244
 *    If set to an integer, the JSON output will contain that many spaces per indentation.                             // 1245
 * @returns {string|undefined} JSON-ified string representing `obj`.                                                   // 1246
 */                                                                                                                    // 1247
function toJson(obj, pretty) {                                                                                         // 1248
  if (typeof obj === 'undefined') return undefined;                                                                    // 1249
  if (!isNumber(pretty)) {                                                                                             // 1250
    pretty = pretty ? 2 : null;                                                                                        // 1251
  }                                                                                                                    // 1252
  return JSON.stringify(obj, toJsonReplacer, pretty);                                                                  // 1253
}                                                                                                                      // 1254
                                                                                                                       // 1255
                                                                                                                       // 1256
/**                                                                                                                    // 1257
 * @ngdoc function                                                                                                     // 1258
 * @name angular.fromJson                                                                                              // 1259
 * @module ng                                                                                                          // 1260
 * @kind function                                                                                                      // 1261
 *                                                                                                                     // 1262
 * @description                                                                                                        // 1263
 * Deserializes a JSON string.                                                                                         // 1264
 *                                                                                                                     // 1265
 * @param {string} json JSON string to deserialize.                                                                    // 1266
 * @returns {Object|Array|string|number} Deserialized JSON string.                                                     // 1267
 */                                                                                                                    // 1268
function fromJson(json) {                                                                                              // 1269
  return isString(json)                                                                                                // 1270
      ? JSON.parse(json)                                                                                               // 1271
      : json;                                                                                                          // 1272
}                                                                                                                      // 1273
                                                                                                                       // 1274
                                                                                                                       // 1275
function timezoneToOffset(timezone, fallback) {                                                                        // 1276
  var requestedTimezoneOffset = Date.parse('Jan 01, 1970 00:00:00 ' + timezone) / 60000;                               // 1277
  return isNaN(requestedTimezoneOffset) ? fallback : requestedTimezoneOffset;                                          // 1278
}                                                                                                                      // 1279
                                                                                                                       // 1280
                                                                                                                       // 1281
function addDateMinutes(date, minutes) {                                                                               // 1282
  date = new Date(date.getTime());                                                                                     // 1283
  date.setMinutes(date.getMinutes() + minutes);                                                                        // 1284
  return date;                                                                                                         // 1285
}                                                                                                                      // 1286
                                                                                                                       // 1287
                                                                                                                       // 1288
function convertTimezoneToLocal(date, timezone, reverse) {                                                             // 1289
  reverse = reverse ? -1 : 1;                                                                                          // 1290
  var timezoneOffset = timezoneToOffset(timezone, date.getTimezoneOffset());                                           // 1291
  return addDateMinutes(date, reverse * (timezoneOffset - date.getTimezoneOffset()));                                  // 1292
}                                                                                                                      // 1293
                                                                                                                       // 1294
                                                                                                                       // 1295
/**                                                                                                                    // 1296
 * @returns {string} Returns the string representation of the element.                                                 // 1297
 */                                                                                                                    // 1298
function startingTag(element) {                                                                                        // 1299
  element = jqLite(element).clone();                                                                                   // 1300
  try {                                                                                                                // 1301
    // turns out IE does not let you set .html() on elements which                                                     // 1302
    // are not allowed to have children. So we just ignore it.                                                         // 1303
    element.empty();                                                                                                   // 1304
  } catch (e) {}                                                                                                       // 1305
  var elemHtml = jqLite('<div>').append(element).html();                                                               // 1306
  try {                                                                                                                // 1307
    return element[0].nodeType === NODE_TYPE_TEXT ? lowercase(elemHtml) :                                              // 1308
        elemHtml.                                                                                                      // 1309
          match(/^(<[^>]+>)/)[1].                                                                                      // 1310
          replace(/^<([\w\-]+)/, function(match, nodeName) { return '<' + lowercase(nodeName); });                     // 1311
  } catch (e) {                                                                                                        // 1312
    return lowercase(elemHtml);                                                                                        // 1313
  }                                                                                                                    // 1314
                                                                                                                       // 1315
}                                                                                                                      // 1316
                                                                                                                       // 1317
                                                                                                                       // 1318
/////////////////////////////////////////////////                                                                      // 1319
                                                                                                                       // 1320
/**                                                                                                                    // 1321
 * Tries to decode the URI component without throwing an exception.                                                    // 1322
 *                                                                                                                     // 1323
 * @private                                                                                                            // 1324
 * @param str value potential URI component to check.                                                                  // 1325
 * @returns {boolean} True if `value` can be decoded                                                                   // 1326
 * with the decodeURIComponent function.                                                                               // 1327
 */                                                                                                                    // 1328
function tryDecodeURIComponent(value) {                                                                                // 1329
  try {                                                                                                                // 1330
    return decodeURIComponent(value);                                                                                  // 1331
  } catch (e) {                                                                                                        // 1332
    // Ignore any invalid uri component                                                                                // 1333
  }                                                                                                                    // 1334
}                                                                                                                      // 1335
                                                                                                                       // 1336
                                                                                                                       // 1337
/**                                                                                                                    // 1338
 * Parses an escaped url query string into key-value pairs.                                                            // 1339
 * @returns {Object.<string,boolean|Array>}                                                                            // 1340
 */                                                                                                                    // 1341
function parseKeyValue(/**string*/keyValue) {                                                                          // 1342
  var obj = {};                                                                                                        // 1343
  forEach((keyValue || "").split('&'), function(keyValue) {                                                            // 1344
    var splitPoint, key, val;                                                                                          // 1345
    if (keyValue) {                                                                                                    // 1346
      key = keyValue = keyValue.replace(/\+/g,'%20');                                                                  // 1347
      splitPoint = keyValue.indexOf('=');                                                                              // 1348
      if (splitPoint !== -1) {                                                                                         // 1349
        key = keyValue.substring(0, splitPoint);                                                                       // 1350
        val = keyValue.substring(splitPoint + 1);                                                                      // 1351
      }                                                                                                                // 1352
      key = tryDecodeURIComponent(key);                                                                                // 1353
      if (isDefined(key)) {                                                                                            // 1354
        val = isDefined(val) ? tryDecodeURIComponent(val) : true;                                                      // 1355
        if (!hasOwnProperty.call(obj, key)) {                                                                          // 1356
          obj[key] = val;                                                                                              // 1357
        } else if (isArray(obj[key])) {                                                                                // 1358
          obj[key].push(val);                                                                                          // 1359
        } else {                                                                                                       // 1360
          obj[key] = [obj[key],val];                                                                                   // 1361
        }                                                                                                              // 1362
      }                                                                                                                // 1363
    }                                                                                                                  // 1364
  });                                                                                                                  // 1365
  return obj;                                                                                                          // 1366
}                                                                                                                      // 1367
                                                                                                                       // 1368
function toKeyValue(obj) {                                                                                             // 1369
  var parts = [];                                                                                                      // 1370
  forEach(obj, function(value, key) {                                                                                  // 1371
    if (isArray(value)) {                                                                                              // 1372
      forEach(value, function(arrayValue) {                                                                            // 1373
        parts.push(encodeUriQuery(key, true) +                                                                         // 1374
                   (arrayValue === true ? '' : '=' + encodeUriQuery(arrayValue, true)));                               // 1375
      });                                                                                                              // 1376
    } else {                                                                                                           // 1377
    parts.push(encodeUriQuery(key, true) +                                                                             // 1378
               (value === true ? '' : '=' + encodeUriQuery(value, true)));                                             // 1379
    }                                                                                                                  // 1380
  });                                                                                                                  // 1381
  return parts.length ? parts.join('&') : '';                                                                          // 1382
}                                                                                                                      // 1383
                                                                                                                       // 1384
                                                                                                                       // 1385
/**                                                                                                                    // 1386
 * We need our custom method because encodeURIComponent is too aggressive and doesn't follow                           // 1387
 * http://www.ietf.org/rfc/rfc3986.txt with regards to the character set (pchar) allowed in path                       // 1388
 * segments:                                                                                                           // 1389
 *    segment       = *pchar                                                                                           // 1390
 *    pchar         = unreserved / pct-encoded / sub-delims / ":" / "@"                                                // 1391
 *    pct-encoded   = "%" HEXDIG HEXDIG                                                                                // 1392
 *    unreserved    = ALPHA / DIGIT / "-" / "." / "_" / "~"                                                            // 1393
 *    sub-delims    = "!" / "$" / "&" / "'" / "(" / ")"                                                                // 1394
 *                     / "*" / "+" / "," / ";" / "="                                                                   // 1395
 */                                                                                                                    // 1396
function encodeUriSegment(val) {                                                                                       // 1397
  return encodeUriQuery(val, true).                                                                                    // 1398
             replace(/%26/gi, '&').                                                                                    // 1399
             replace(/%3D/gi, '=').                                                                                    // 1400
             replace(/%2B/gi, '+');                                                                                    // 1401
}                                                                                                                      // 1402
                                                                                                                       // 1403
                                                                                                                       // 1404
/**                                                                                                                    // 1405
 * This method is intended for encoding *key* or *value* parts of query component. We need a custom                    // 1406
 * method because encodeURIComponent is too aggressive and encodes stuff that doesn't have to be                       // 1407
 * encoded per http://tools.ietf.org/html/rfc3986:                                                                     // 1408
 *    query       = *( pchar / "/" / "?" )                                                                             // 1409
 *    pchar         = unreserved / pct-encoded / sub-delims / ":" / "@"                                                // 1410
 *    unreserved    = ALPHA / DIGIT / "-" / "." / "_" / "~"                                                            // 1411
 *    pct-encoded   = "%" HEXDIG HEXDIG                                                                                // 1412
 *    sub-delims    = "!" / "$" / "&" / "'" / "(" / ")"                                                                // 1413
 *                     / "*" / "+" / "," / ";" / "="                                                                   // 1414
 */                                                                                                                    // 1415
function encodeUriQuery(val, pctEncodeSpaces) {                                                                        // 1416
  return encodeURIComponent(val).                                                                                      // 1417
             replace(/%40/gi, '@').                                                                                    // 1418
             replace(/%3A/gi, ':').                                                                                    // 1419
             replace(/%24/g, '$').                                                                                     // 1420
             replace(/%2C/gi, ',').                                                                                    // 1421
             replace(/%3B/gi, ';').                                                                                    // 1422
             replace(/%20/g, (pctEncodeSpaces ? '%20' : '+'));                                                         // 1423
}                                                                                                                      // 1424
                                                                                                                       // 1425
var ngAttrPrefixes = ['ng-', 'data-ng-', 'ng:', 'x-ng-'];                                                              // 1426
                                                                                                                       // 1427
function getNgAttribute(element, ngAttr) {                                                                             // 1428
  var attr, i, ii = ngAttrPrefixes.length;                                                                             // 1429
  for (i = 0; i < ii; ++i) {                                                                                           // 1430
    attr = ngAttrPrefixes[i] + ngAttr;                                                                                 // 1431
    if (isString(attr = element.getAttribute(attr))) {                                                                 // 1432
      return attr;                                                                                                     // 1433
    }                                                                                                                  // 1434
  }                                                                                                                    // 1435
  return null;                                                                                                         // 1436
}                                                                                                                      // 1437
                                                                                                                       // 1438
/**                                                                                                                    // 1439
 * @ngdoc directive                                                                                                    // 1440
 * @name ngApp                                                                                                         // 1441
 * @module ng                                                                                                          // 1442
 *                                                                                                                     // 1443
 * @element ANY                                                                                                        // 1444
 * @param {angular.Module} ngApp an optional application                                                               // 1445
 *   {@link angular.module module} name to load.                                                                       // 1446
 * @param {boolean=} ngStrictDi if this attribute is present on the app element, the injector will be                  // 1447
 *   created in "strict-di" mode. This means that the application will fail to invoke functions which                  // 1448
 *   do not use explicit function annotation (and are thus unsuitable for minification), as described                  // 1449
 *   in {@link guide/di the Dependency Injection guide}, and useful debugging info will assist in                      // 1450
 *   tracking down the root of these bugs.                                                                             // 1451
 *                                                                                                                     // 1452
 * @description                                                                                                        // 1453
 *                                                                                                                     // 1454
 * Use this directive to **auto-bootstrap** an AngularJS application. The `ngApp` directive                            // 1455
 * designates the **root element** of the application and is typically placed near the root element                    // 1456
 * of the page - e.g. on the `<body>` or `<html>` tags.                                                                // 1457
 *                                                                                                                     // 1458
 * Only one AngularJS application can be auto-bootstrapped per HTML document. The first `ngApp`                        // 1459
 * found in the document will be used to define the root element to auto-bootstrap as an                               // 1460
 * application. To run multiple applications in an HTML document you must manually bootstrap them using                // 1461
 * {@link angular.bootstrap} instead. AngularJS applications cannot be nested within each other.                       // 1462
 *                                                                                                                     // 1463
 * You can specify an **AngularJS module** to be used as the root module for the application.  This                    // 1464
 * module will be loaded into the {@link auto.$injector} when the application is bootstrapped. It                      // 1465
 * should contain the application code needed or have dependencies on other modules that will                          // 1466
 * contain the code. See {@link angular.module} for more information.                                                  // 1467
 *                                                                                                                     // 1468
 * In the example below if the `ngApp` directive were not placed on the `html` element then the                        // 1469
 * document would not be compiled, the `AppController` would not be instantiated and the `{{ a+b }}`                   // 1470
 * would not be resolved to `3`.                                                                                       // 1471
 *                                                                                                                     // 1472
 * `ngApp` is the easiest, and most common way to bootstrap an application.                                            // 1473
 *                                                                                                                     // 1474
 <example module="ngAppDemo">                                                                                          // 1475
   <file name="index.html">                                                                                            // 1476
   <div ng-controller="ngAppDemoController">                                                                           // 1477
     I can add: {{a}} + {{b}} =  {{ a+b }}                                                                             // 1478
   </div>                                                                                                              // 1479
   </file>                                                                                                             // 1480
   <file name="script.js">                                                                                             // 1481
   angular.module('ngAppDemo', []).controller('ngAppDemoController', function($scope) {                                // 1482
     $scope.a = 1;                                                                                                     // 1483
     $scope.b = 2;                                                                                                     // 1484
   });                                                                                                                 // 1485
   </file>                                                                                                             // 1486
 </example>                                                                                                            // 1487
 *                                                                                                                     // 1488
 * Using `ngStrictDi`, you would see something like this:                                                              // 1489
 *                                                                                                                     // 1490
 <example ng-app-included="true">                                                                                      // 1491
   <file name="index.html">                                                                                            // 1492
   <div ng-app="ngAppStrictDemo" ng-strict-di>                                                                         // 1493
       <div ng-controller="GoodController1">                                                                           // 1494
           I can add: {{a}} + {{b}} =  {{ a+b }}                                                                       // 1495
                                                                                                                       // 1496
           <p>This renders because the controller does not fail to                                                     // 1497
              instantiate, by using explicit annotation style (see                                                     // 1498
              script.js for details)                                                                                   // 1499
           </p>                                                                                                        // 1500
       </div>                                                                                                          // 1501
                                                                                                                       // 1502
       <div ng-controller="GoodController2">                                                                           // 1503
           Name: <input ng-model="name"><br />                                                                         // 1504
           Hello, {{name}}!                                                                                            // 1505
                                                                                                                       // 1506
           <p>This renders because the controller does not fail to                                                     // 1507
              instantiate, by using explicit annotation style                                                          // 1508
              (see script.js for details)                                                                              // 1509
           </p>                                                                                                        // 1510
       </div>                                                                                                          // 1511
                                                                                                                       // 1512
       <div ng-controller="BadController">                                                                             // 1513
           I can add: {{a}} + {{b}} =  {{ a+b }}                                                                       // 1514
                                                                                                                       // 1515
           <p>The controller could not be instantiated, due to relying                                                 // 1516
              on automatic function annotations (which are disabled in                                                 // 1517
              strict mode). As such, the content of this section is not                                                // 1518
              interpolated, and there should be an error in your web console.                                          // 1519
           </p>                                                                                                        // 1520
       </div>                                                                                                          // 1521
   </div>                                                                                                              // 1522
   </file>                                                                                                             // 1523
   <file name="script.js">                                                                                             // 1524
   angular.module('ngAppStrictDemo', [])                                                                               // 1525
     // BadController will fail to instantiate, due to relying on automatic function annotation,                       // 1526
     // rather than an explicit annotation                                                                             // 1527
     .controller('BadController', function($scope) {                                                                   // 1528
       $scope.a = 1;                                                                                                   // 1529
       $scope.b = 2;                                                                                                   // 1530
     })                                                                                                                // 1531
     // Unlike BadController, GoodController1 and GoodController2 will not fail to be instantiated,                    // 1532
     // due to using explicit annotations using the array style and $inject property, respectively.                    // 1533
     .controller('GoodController1', ['$scope', function($scope) {                                                      // 1534
       $scope.a = 1;                                                                                                   // 1535
       $scope.b = 2;                                                                                                   // 1536
     }])                                                                                                               // 1537
     .controller('GoodController2', GoodController2);                                                                  // 1538
     function GoodController2($scope) {                                                                                // 1539
       $scope.name = "World";                                                                                          // 1540
     }                                                                                                                 // 1541
     GoodController2.$inject = ['$scope'];                                                                             // 1542
   </file>                                                                                                             // 1543
   <file name="style.css">                                                                                             // 1544
   div[ng-controller] {                                                                                                // 1545
       margin-bottom: 1em;                                                                                             // 1546
       -webkit-border-radius: 4px;                                                                                     // 1547
       border-radius: 4px;                                                                                             // 1548
       border: 1px solid;                                                                                              // 1549
       padding: .5em;                                                                                                  // 1550
   }                                                                                                                   // 1551
   div[ng-controller^=Good] {                                                                                          // 1552
       border-color: #d6e9c6;                                                                                          // 1553
       background-color: #dff0d8;                                                                                      // 1554
       color: #3c763d;                                                                                                 // 1555
   }                                                                                                                   // 1556
   div[ng-controller^=Bad] {                                                                                           // 1557
       border-color: #ebccd1;                                                                                          // 1558
       background-color: #f2dede;                                                                                      // 1559
       color: #a94442;                                                                                                 // 1560
       margin-bottom: 0;                                                                                               // 1561
   }                                                                                                                   // 1562
   </file>                                                                                                             // 1563
 </example>                                                                                                            // 1564
 */                                                                                                                    // 1565
function angularInit(element, bootstrap) {                                                                             // 1566
  var appElement,                                                                                                      // 1567
      module,                                                                                                          // 1568
      config = {};                                                                                                     // 1569
                                                                                                                       // 1570
  // The element `element` has priority over any other element                                                         // 1571
  forEach(ngAttrPrefixes, function(prefix) {                                                                           // 1572
    var name = prefix + 'app';                                                                                         // 1573
                                                                                                                       // 1574
    if (!appElement && element.hasAttribute && element.hasAttribute(name)) {                                           // 1575
      appElement = element;                                                                                            // 1576
      module = element.getAttribute(name);                                                                             // 1577
    }                                                                                                                  // 1578
  });                                                                                                                  // 1579
  forEach(ngAttrPrefixes, function(prefix) {                                                                           // 1580
    var name = prefix + 'app';                                                                                         // 1581
    var candidate;                                                                                                     // 1582
                                                                                                                       // 1583
    if (!appElement && (candidate = element.querySelector('[' + name.replace(':', '\\:') + ']'))) {                    // 1584
      appElement = candidate;                                                                                          // 1585
      module = candidate.getAttribute(name);                                                                           // 1586
    }                                                                                                                  // 1587
  });                                                                                                                  // 1588
  if (appElement) {                                                                                                    // 1589
    config.strictDi = getNgAttribute(appElement, "strict-di") !== null;                                                // 1590
    bootstrap(appElement, module ? [module] : [], config);                                                             // 1591
  }                                                                                                                    // 1592
}                                                                                                                      // 1593
                                                                                                                       // 1594
/**                                                                                                                    // 1595
 * @ngdoc function                                                                                                     // 1596
 * @name angular.bootstrap                                                                                             // 1597
 * @module ng                                                                                                          // 1598
 * @description                                                                                                        // 1599
 * Use this function to manually start up angular application.                                                         // 1600
 *                                                                                                                     // 1601
 * See: {@link guide/bootstrap Bootstrap}                                                                              // 1602
 *                                                                                                                     // 1603
 * Note that Protractor based end-to-end tests cannot use this function to bootstrap manually.                         // 1604
 * They must use {@link ng.directive:ngApp ngApp}.                                                                     // 1605
 *                                                                                                                     // 1606
 * Angular will detect if it has been loaded into the browser more than once and only allow the                        // 1607
 * first loaded script to be bootstrapped and will report a warning to the browser console for                         // 1608
 * each of the subsequent scripts. This prevents strange results in applications, where otherwise                      // 1609
 * multiple instances of Angular try to work on the DOM.                                                               // 1610
 *                                                                                                                     // 1611
 * ```html                                                                                                             // 1612
 * <!doctype html>                                                                                                     // 1613
 * <html>                                                                                                              // 1614
 * <body>                                                                                                              // 1615
 * <div ng-controller="WelcomeController">                                                                             // 1616
 *   {{greeting}}                                                                                                      // 1617
 * </div>                                                                                                              // 1618
 *                                                                                                                     // 1619
 * <script src="angular.js"></script>                                                                                  // 1620
 * <script>                                                                                                            // 1621
 *   var app = angular.module('demo', [])                                                                              // 1622
 *   .controller('WelcomeController', function($scope) {                                                               // 1623
 *       $scope.greeting = 'Welcome!';                                                                                 // 1624
 *   });                                                                                                               // 1625
 *   angular.bootstrap(document, ['demo']);                                                                            // 1626
 * </script>                                                                                                           // 1627
 * </body>                                                                                                             // 1628
 * </html>                                                                                                             // 1629
 * ```                                                                                                                 // 1630
 *                                                                                                                     // 1631
 * @param {DOMElement} element DOM element which is the root of angular application.                                   // 1632
 * @param {Array<String|Function|Array>=} modules an array of modules to load into the application.                    // 1633
 *     Each item in the array should be the name of a predefined module or a (DI annotated)                            // 1634
 *     function that will be invoked by the injector as a `config` block.                                              // 1635
 *     See: {@link angular.module modules}                                                                             // 1636
 * @param {Object=} config an object for defining configuration options for the application. The                       // 1637
 *     following keys are supported:                                                                                   // 1638
 *                                                                                                                     // 1639
 * * `strictDi` - disable automatic function annotation for the application. This is meant to                          // 1640
 *   assist in finding bugs which break minified code. Defaults to `false`.                                            // 1641
 *                                                                                                                     // 1642
 * @returns {auto.$injector} Returns the newly created injector for this app.                                          // 1643
 */                                                                                                                    // 1644
function bootstrap(element, modules, config) {                                                                         // 1645
  if (!isObject(config)) config = {};                                                                                  // 1646
  var defaultConfig = {                                                                                                // 1647
    strictDi: false                                                                                                    // 1648
  };                                                                                                                   // 1649
  config = extend(defaultConfig, config);                                                                              // 1650
  var doBootstrap = function() {                                                                                       // 1651
    element = jqLite(element);                                                                                         // 1652
                                                                                                                       // 1653
    if (element.injector()) {                                                                                          // 1654
      var tag = (element[0] === document) ? 'document' : startingTag(element);                                         // 1655
      //Encode angle brackets to prevent input from being sanitized to empty string #8683                              // 1656
      throw ngMinErr(                                                                                                  // 1657
          'btstrpd',                                                                                                   // 1658
          "App Already Bootstrapped with this Element '{0}'",                                                          // 1659
          tag.replace(/</,'&lt;').replace(/>/,'&gt;'));                                                                // 1660
    }                                                                                                                  // 1661
                                                                                                                       // 1662
    modules = modules || [];                                                                                           // 1663
    modules.unshift(['$provide', function($provide) {                                                                  // 1664
      $provide.value('$rootElement', element);                                                                         // 1665
    }]);                                                                                                               // 1666
                                                                                                                       // 1667
    if (config.debugInfoEnabled) {                                                                                     // 1668
      // Pushing so that this overrides `debugInfoEnabled` setting defined in user's `modules`.                        // 1669
      modules.push(['$compileProvider', function($compileProvider) {                                                   // 1670
        $compileProvider.debugInfoEnabled(true);                                                                       // 1671
      }]);                                                                                                             // 1672
    }                                                                                                                  // 1673
                                                                                                                       // 1674
    modules.unshift('ng');                                                                                             // 1675
    var injector = createInjector(modules, config.strictDi);                                                           // 1676
    injector.invoke(['$rootScope', '$rootElement', '$compile', '$injector',                                            // 1677
       function bootstrapApply(scope, element, compile, injector) {                                                    // 1678
        scope.$apply(function() {                                                                                      // 1679
          element.data('$injector', injector);                                                                         // 1680
          compile(element)(scope);                                                                                     // 1681
        });                                                                                                            // 1682
      }]                                                                                                               // 1683
    );                                                                                                                 // 1684
    return injector;                                                                                                   // 1685
  };                                                                                                                   // 1686
                                                                                                                       // 1687
  var NG_ENABLE_DEBUG_INFO = /^NG_ENABLE_DEBUG_INFO!/;                                                                 // 1688
  var NG_DEFER_BOOTSTRAP = /^NG_DEFER_BOOTSTRAP!/;                                                                     // 1689
                                                                                                                       // 1690
  if (window && NG_ENABLE_DEBUG_INFO.test(window.name)) {                                                              // 1691
    config.debugInfoEnabled = true;                                                                                    // 1692
    window.name = window.name.replace(NG_ENABLE_DEBUG_INFO, '');                                                       // 1693
  }                                                                                                                    // 1694
                                                                                                                       // 1695
  if (window && !NG_DEFER_BOOTSTRAP.test(window.name)) {                                                               // 1696
    return doBootstrap();                                                                                              // 1697
  }                                                                                                                    // 1698
                                                                                                                       // 1699
  window.name = window.name.replace(NG_DEFER_BOOTSTRAP, '');                                                           // 1700
  angular.resumeBootstrap = function(extraModules) {                                                                   // 1701
    forEach(extraModules, function(module) {                                                                           // 1702
      modules.push(module);                                                                                            // 1703
    });                                                                                                                // 1704
    return doBootstrap();                                                                                              // 1705
  };                                                                                                                   // 1706
                                                                                                                       // 1707
  if (isFunction(angular.resumeDeferredBootstrap)) {                                                                   // 1708
    angular.resumeDeferredBootstrap();                                                                                 // 1709
  }                                                                                                                    // 1710
}                                                                                                                      // 1711
                                                                                                                       // 1712
/**                                                                                                                    // 1713
 * @ngdoc function                                                                                                     // 1714
 * @name angular.reloadWithDebugInfo                                                                                   // 1715
 * @module ng                                                                                                          // 1716
 * @description                                                                                                        // 1717
 * Use this function to reload the current application with debug information turned on.                               // 1718
 * This takes precedence over a call to `$compileProvider.debugInfoEnabled(false)`.                                    // 1719
 *                                                                                                                     // 1720
 * See {@link ng.$compileProvider#debugInfoEnabled} for more.                                                          // 1721
 */                                                                                                                    // 1722
function reloadWithDebugInfo() {                                                                                       // 1723
  window.name = 'NG_ENABLE_DEBUG_INFO!' + window.name;                                                                 // 1724
  window.location.reload();                                                                                            // 1725
}                                                                                                                      // 1726
                                                                                                                       // 1727
/**                                                                                                                    // 1728
 * @name angular.getTestability                                                                                        // 1729
 * @module ng                                                                                                          // 1730
 * @description                                                                                                        // 1731
 * Get the testability service for the instance of Angular on the given                                                // 1732
 * element.                                                                                                            // 1733
 * @param {DOMElement} element DOM element which is the root of angular application.                                   // 1734
 */                                                                                                                    // 1735
function getTestability(rootElement) {                                                                                 // 1736
  var injector = angular.element(rootElement).injector();                                                              // 1737
  if (!injector) {                                                                                                     // 1738
    throw ngMinErr('test',                                                                                             // 1739
      'no injector found for element argument to getTestability');                                                     // 1740
  }                                                                                                                    // 1741
  return injector.get('$$testability');                                                                                // 1742
}                                                                                                                      // 1743
                                                                                                                       // 1744
var SNAKE_CASE_REGEXP = /[A-Z]/g;                                                                                      // 1745
function snake_case(name, separator) {                                                                                 // 1746
  separator = separator || '_';                                                                                        // 1747
  return name.replace(SNAKE_CASE_REGEXP, function(letter, pos) {                                                       // 1748
    return (pos ? separator : '') + letter.toLowerCase();                                                              // 1749
  });                                                                                                                  // 1750
}                                                                                                                      // 1751
                                                                                                                       // 1752
var bindJQueryFired = false;                                                                                           // 1753
var skipDestroyOnNextJQueryCleanData;                                                                                  // 1754
function bindJQuery() {                                                                                                // 1755
  var originalCleanData;                                                                                               // 1756
                                                                                                                       // 1757
  if (bindJQueryFired) {                                                                                               // 1758
    return;                                                                                                            // 1759
  }                                                                                                                    // 1760
                                                                                                                       // 1761
  // bind to jQuery if present;                                                                                        // 1762
  var jqName = jq();                                                                                                   // 1763
  jQuery = isUndefined(jqName) ? window.jQuery :   // use jQuery (if present)                                          // 1764
           !jqName             ? undefined     :   // use jqLite                                                       // 1765
                                 window[jqName];   // use jQuery specified by `ngJq`                                   // 1766
                                                                                                                       // 1767
  // Use jQuery if it exists with proper functionality, otherwise default to us.                                       // 1768
  // Angular 1.2+ requires jQuery 1.7+ for on()/off() support.                                                         // 1769
  // Angular 1.3+ technically requires at least jQuery 2.1+ but it may work with older                                 // 1770
  // versions. It will not work for sure with jQuery <1.7, though.                                                     // 1771
  if (jQuery && jQuery.fn.on) {                                                                                        // 1772
    jqLite = jQuery;                                                                                                   // 1773
    extend(jQuery.fn, {                                                                                                // 1774
      scope: JQLitePrototype.scope,                                                                                    // 1775
      isolateScope: JQLitePrototype.isolateScope,                                                                      // 1776
      controller: JQLitePrototype.controller,                                                                          // 1777
      injector: JQLitePrototype.injector,                                                                              // 1778
      inheritedData: JQLitePrototype.inheritedData                                                                     // 1779
    });                                                                                                                // 1780
                                                                                                                       // 1781
    // All nodes removed from the DOM via various jQuery APIs like .remove()                                           // 1782
    // are passed through jQuery.cleanData. Monkey-patch this method to fire                                           // 1783
    // the $destroy event on all removed nodes.                                                                        // 1784
    originalCleanData = jQuery.cleanData;                                                                              // 1785
    jQuery.cleanData = function(elems) {                                                                               // 1786
      var events;                                                                                                      // 1787
      if (!skipDestroyOnNextJQueryCleanData) {                                                                         // 1788
        for (var i = 0, elem; (elem = elems[i]) != null; i++) {                                                        // 1789
          events = jQuery._data(elem, "events");                                                                       // 1790
          if (events && events.$destroy) {                                                                             // 1791
            jQuery(elem).triggerHandler('$destroy');                                                                   // 1792
          }                                                                                                            // 1793
        }                                                                                                              // 1794
      } else {                                                                                                         // 1795
        skipDestroyOnNextJQueryCleanData = false;                                                                      // 1796
      }                                                                                                                // 1797
      originalCleanData(elems);                                                                                        // 1798
    };                                                                                                                 // 1799
  } else {                                                                                                             // 1800
    jqLite = JQLite;                                                                                                   // 1801
  }                                                                                                                    // 1802
                                                                                                                       // 1803
  angular.element = jqLite;                                                                                            // 1804
                                                                                                                       // 1805
  // Prevent double-proxying.                                                                                          // 1806
  bindJQueryFired = true;                                                                                              // 1807
}                                                                                                                      // 1808
                                                                                                                       // 1809
/**                                                                                                                    // 1810
 * throw error if the argument is falsy.                                                                               // 1811
 */                                                                                                                    // 1812
function assertArg(arg, name, reason) {                                                                                // 1813
  if (!arg) {                                                                                                          // 1814
    throw ngMinErr('areq', "Argument '{0}' is {1}", (name || '?'), (reason || "required"));                            // 1815
  }                                                                                                                    // 1816
  return arg;                                                                                                          // 1817
}                                                                                                                      // 1818
                                                                                                                       // 1819
function assertArgFn(arg, name, acceptArrayAnnotation) {                                                               // 1820
  if (acceptArrayAnnotation && isArray(arg)) {                                                                         // 1821
      arg = arg[arg.length - 1];                                                                                       // 1822
  }                                                                                                                    // 1823
                                                                                                                       // 1824
  assertArg(isFunction(arg), name, 'not a function, got ' +                                                            // 1825
      (arg && typeof arg === 'object' ? arg.constructor.name || 'Object' : typeof arg));                               // 1826
  return arg;                                                                                                          // 1827
}                                                                                                                      // 1828
                                                                                                                       // 1829
/**                                                                                                                    // 1830
 * throw error if the name given is hasOwnProperty                                                                     // 1831
 * @param  {String} name    the name to test                                                                           // 1832
 * @param  {String} context the context in which the name is used, such as module or directive                         // 1833
 */                                                                                                                    // 1834
function assertNotHasOwnProperty(name, context) {                                                                      // 1835
  if (name === 'hasOwnProperty') {                                                                                     // 1836
    throw ngMinErr('badname', "hasOwnProperty is not a valid {0} name", context);                                      // 1837
  }                                                                                                                    // 1838
}                                                                                                                      // 1839
                                                                                                                       // 1840
/**                                                                                                                    // 1841
 * Return the value accessible from the object by path. Any undefined traversals are ignored                           // 1842
 * @param {Object} obj starting object                                                                                 // 1843
 * @param {String} path path to traverse                                                                               // 1844
 * @param {boolean} [bindFnToScope=true]                                                                               // 1845
 * @returns {Object} value as accessible by path                                                                       // 1846
 */                                                                                                                    // 1847
//TODO(misko): this function needs to be removed                                                                       // 1848
function getter(obj, path, bindFnToScope) {                                                                            // 1849
  if (!path) return obj;                                                                                               // 1850
  var keys = path.split('.');                                                                                          // 1851
  var key;                                                                                                             // 1852
  var lastInstance = obj;                                                                                              // 1853
  var len = keys.length;                                                                                               // 1854
                                                                                                                       // 1855
  for (var i = 0; i < len; i++) {                                                                                      // 1856
    key = keys[i];                                                                                                     // 1857
    if (obj) {                                                                                                         // 1858
      obj = (lastInstance = obj)[key];                                                                                 // 1859
    }                                                                                                                  // 1860
  }                                                                                                                    // 1861
  if (!bindFnToScope && isFunction(obj)) {                                                                             // 1862
    return bind(lastInstance, obj);                                                                                    // 1863
  }                                                                                                                    // 1864
  return obj;                                                                                                          // 1865
}                                                                                                                      // 1866
                                                                                                                       // 1867
/**                                                                                                                    // 1868
 * Return the DOM siblings between the first and last node in the given array.                                         // 1869
 * @param {Array} array like object                                                                                    // 1870
 * @returns {Array} the inputted object or a jqLite collection containing the nodes                                    // 1871
 */                                                                                                                    // 1872
function getBlockNodes(nodes) {                                                                                        // 1873
  // TODO(perf): update `nodes` instead of creating a new object?                                                      // 1874
  var node = nodes[0];                                                                                                 // 1875
  var endNode = nodes[nodes.length - 1];                                                                               // 1876
  var blockNodes;                                                                                                      // 1877
                                                                                                                       // 1878
  for (var i = 1; node !== endNode && (node = node.nextSibling); i++) {                                                // 1879
    if (blockNodes || nodes[i] !== node) {                                                                             // 1880
      if (!blockNodes) {                                                                                               // 1881
        blockNodes = jqLite(slice.call(nodes, 0, i));                                                                  // 1882
      }                                                                                                                // 1883
      blockNodes.push(node);                                                                                           // 1884
    }                                                                                                                  // 1885
  }                                                                                                                    // 1886
                                                                                                                       // 1887
  return blockNodes || nodes;                                                                                          // 1888
}                                                                                                                      // 1889
                                                                                                                       // 1890
                                                                                                                       // 1891
/**                                                                                                                    // 1892
 * Creates a new object without a prototype. This object is useful for lookup without having to                        // 1893
 * guard against prototypically inherited properties via hasOwnProperty.                                               // 1894
 *                                                                                                                     // 1895
 * Related micro-benchmarks:                                                                                           // 1896
 * - http://jsperf.com/object-create2                                                                                  // 1897
 * - http://jsperf.com/proto-map-lookup/2                                                                              // 1898
 * - http://jsperf.com/for-in-vs-object-keys2                                                                          // 1899
 *                                                                                                                     // 1900
 * @returns {Object}                                                                                                   // 1901
 */                                                                                                                    // 1902
function createMap() {                                                                                                 // 1903
  return Object.create(null);                                                                                          // 1904
}                                                                                                                      // 1905
                                                                                                                       // 1906
var NODE_TYPE_ELEMENT = 1;                                                                                             // 1907
var NODE_TYPE_ATTRIBUTE = 2;                                                                                           // 1908
var NODE_TYPE_TEXT = 3;                                                                                                // 1909
var NODE_TYPE_COMMENT = 8;                                                                                             // 1910
var NODE_TYPE_DOCUMENT = 9;                                                                                            // 1911
var NODE_TYPE_DOCUMENT_FRAGMENT = 11;                                                                                  // 1912
                                                                                                                       // 1913
/**                                                                                                                    // 1914
 * @ngdoc type                                                                                                         // 1915
 * @name angular.Module                                                                                                // 1916
 * @module ng                                                                                                          // 1917
 * @description                                                                                                        // 1918
 *                                                                                                                     // 1919
 * Interface for configuring angular {@link angular.module modules}.                                                   // 1920
 */                                                                                                                    // 1921
                                                                                                                       // 1922
function setupModuleLoader(window) {                                                                                   // 1923
                                                                                                                       // 1924
  var $injectorMinErr = minErr('$injector');                                                                           // 1925
  var ngMinErr = minErr('ng');                                                                                         // 1926
                                                                                                                       // 1927
  function ensure(obj, name, factory) {                                                                                // 1928
    return obj[name] || (obj[name] = factory());                                                                       // 1929
  }                                                                                                                    // 1930
                                                                                                                       // 1931
  var angular = ensure(window, 'angular', Object);                                                                     // 1932
                                                                                                                       // 1933
  // We need to expose `angular.$$minErr` to modules such as `ngResource` that reference it during bootstrap           // 1934
  angular.$$minErr = angular.$$minErr || minErr;                                                                       // 1935
                                                                                                                       // 1936
  return ensure(angular, 'module', function() {                                                                        // 1937
    /** @type {Object.<string, angular.Module>} */                                                                     // 1938
    var modules = {};                                                                                                  // 1939
                                                                                                                       // 1940
    /**                                                                                                                // 1941
     * @ngdoc function                                                                                                 // 1942
     * @name angular.module                                                                                            // 1943
     * @module ng                                                                                                      // 1944
     * @description                                                                                                    // 1945
     *                                                                                                                 // 1946
     * The `angular.module` is a global place for creating, registering and retrieving Angular                         // 1947
     * modules.                                                                                                        // 1948
     * All modules (angular core or 3rd party) that should be available to an application must be                      // 1949
     * registered using this mechanism.                                                                                // 1950
     *                                                                                                                 // 1951
     * Passing one argument retrieves an existing {@link angular.Module},                                              // 1952
     * whereas passing more than one argument creates a new {@link angular.Module}                                     // 1953
     *                                                                                                                 // 1954
     *                                                                                                                 // 1955
     * # Module                                                                                                        // 1956
     *                                                                                                                 // 1957
     * A module is a collection of services, directives, controllers, filters, and configuration information.          // 1958
     * `angular.module` is used to configure the {@link auto.$injector $injector}.                                     // 1959
     *                                                                                                                 // 1960
     * ```js                                                                                                           // 1961
     * // Create a new module                                                                                          // 1962
     * var myModule = angular.module('myModule', []);                                                                  // 1963
     *                                                                                                                 // 1964
     * // register a new service                                                                                       // 1965
     * myModule.value('appName', 'MyCoolApp');                                                                         // 1966
     *                                                                                                                 // 1967
     * // configure existing services inside initialization blocks.                                                    // 1968
     * myModule.config(['$locationProvider', function($locationProvider) {                                             // 1969
     *   // Configure existing providers                                                                               // 1970
     *   $locationProvider.hashPrefix('!');                                                                            // 1971
     * }]);                                                                                                            // 1972
     * ```                                                                                                             // 1973
     *                                                                                                                 // 1974
     * Then you can create an injector and load your modules like this:                                                // 1975
     *                                                                                                                 // 1976
     * ```js                                                                                                           // 1977
     * var injector = angular.injector(['ng', 'myModule'])                                                             // 1978
     * ```                                                                                                             // 1979
     *                                                                                                                 // 1980
     * However it's more likely that you'll just use                                                                   // 1981
     * {@link ng.directive:ngApp ngApp} or                                                                             // 1982
     * {@link angular.bootstrap} to simplify this process for you.                                                     // 1983
     *                                                                                                                 // 1984
     * @param {!string} name The name of the module to create or retrieve.                                             // 1985
     * @param {!Array.<string>=} requires If specified then new module is being created. If                            // 1986
     *        unspecified then the module is being retrieved for further configuration.                                // 1987
     * @param {Function=} configFn Optional configuration function for the module. Same as                             // 1988
     *        {@link angular.Module#config Module#config()}.                                                           // 1989
     * @returns {module} new module with the {@link angular.Module} api.                                               // 1990
     */                                                                                                                // 1991
    return function module(name, requires, configFn) {                                                                 // 1992
      var assertNotHasOwnProperty = function(name, context) {                                                          // 1993
        if (name === 'hasOwnProperty') {                                                                               // 1994
          throw ngMinErr('badname', 'hasOwnProperty is not a valid {0} name', context);                                // 1995
        }                                                                                                              // 1996
      };                                                                                                               // 1997
                                                                                                                       // 1998
      assertNotHasOwnProperty(name, 'module');                                                                         // 1999
      if (requires && modules.hasOwnProperty(name)) {                                                                  // 2000
        modules[name] = null;                                                                                          // 2001
      }                                                                                                                // 2002
      return ensure(modules, name, function() {                                                                        // 2003
        if (!requires) {                                                                                               // 2004
          throw $injectorMinErr('nomod', "Module '{0}' is not available! You either misspelled " +                     // 2005
             "the module name or forgot to load it. If registering a module ensure that you " +                        // 2006
             "specify the dependencies as the second argument.", name);                                                // 2007
        }                                                                                                              // 2008
                                                                                                                       // 2009
        /** @type {!Array.<Array.<*>>} */                                                                              // 2010
        var invokeQueue = [];                                                                                          // 2011
                                                                                                                       // 2012
        /** @type {!Array.<Function>} */                                                                               // 2013
        var configBlocks = [];                                                                                         // 2014
                                                                                                                       // 2015
        /** @type {!Array.<Function>} */                                                                               // 2016
        var runBlocks = [];                                                                                            // 2017
                                                                                                                       // 2018
        var config = invokeLater('$injector', 'invoke', 'push', configBlocks);                                         // 2019
                                                                                                                       // 2020
        /** @type {angular.Module} */                                                                                  // 2021
        var moduleInstance = {                                                                                         // 2022
          // Private state                                                                                             // 2023
          _invokeQueue: invokeQueue,                                                                                   // 2024
          _configBlocks: configBlocks,                                                                                 // 2025
          _runBlocks: runBlocks,                                                                                       // 2026
                                                                                                                       // 2027
          /**                                                                                                          // 2028
           * @ngdoc property                                                                                           // 2029
           * @name angular.Module#requires                                                                             // 2030
           * @module ng                                                                                                // 2031
           *                                                                                                           // 2032
           * @description                                                                                              // 2033
           * Holds the list of modules which the injector will load before the current module is                       // 2034
           * loaded.                                                                                                   // 2035
           */                                                                                                          // 2036
          requires: requires,                                                                                          // 2037
                                                                                                                       // 2038
          /**                                                                                                          // 2039
           * @ngdoc property                                                                                           // 2040
           * @name angular.Module#name                                                                                 // 2041
           * @module ng                                                                                                // 2042
           *                                                                                                           // 2043
           * @description                                                                                              // 2044
           * Name of the module.                                                                                       // 2045
           */                                                                                                          // 2046
          name: name,                                                                                                  // 2047
                                                                                                                       // 2048
                                                                                                                       // 2049
          /**                                                                                                          // 2050
           * @ngdoc method                                                                                             // 2051
           * @name angular.Module#provider                                                                             // 2052
           * @module ng                                                                                                // 2053
           * @param {string} name service name                                                                         // 2054
           * @param {Function} providerType Construction function for creating new instance of the                     // 2055
           *                                service.                                                                   // 2056
           * @description                                                                                              // 2057
           * See {@link auto.$provide#provider $provide.provider()}.                                                   // 2058
           */                                                                                                          // 2059
          provider: invokeLaterAndSetModuleName('$provide', 'provider'),                                               // 2060
                                                                                                                       // 2061
          /**                                                                                                          // 2062
           * @ngdoc method                                                                                             // 2063
           * @name angular.Module#factory                                                                              // 2064
           * @module ng                                                                                                // 2065
           * @param {string} name service name                                                                         // 2066
           * @param {Function} providerFunction Function for creating new instance of the service.                     // 2067
           * @description                                                                                              // 2068
           * See {@link auto.$provide#factory $provide.factory()}.                                                     // 2069
           */                                                                                                          // 2070
          factory: invokeLaterAndSetModuleName('$provide', 'factory'),                                                 // 2071
                                                                                                                       // 2072
          /**                                                                                                          // 2073
           * @ngdoc method                                                                                             // 2074
           * @name angular.Module#service                                                                              // 2075
           * @module ng                                                                                                // 2076
           * @param {string} name service name                                                                         // 2077
           * @param {Function} constructor A constructor function that will be instantiated.                           // 2078
           * @description                                                                                              // 2079
           * See {@link auto.$provide#service $provide.service()}.                                                     // 2080
           */                                                                                                          // 2081
          service: invokeLaterAndSetModuleName('$provide', 'service'),                                                 // 2082
                                                                                                                       // 2083
          /**                                                                                                          // 2084
           * @ngdoc method                                                                                             // 2085
           * @name angular.Module#value                                                                                // 2086
           * @module ng                                                                                                // 2087
           * @param {string} name service name                                                                         // 2088
           * @param {*} object Service instance object.                                                                // 2089
           * @description                                                                                              // 2090
           * See {@link auto.$provide#value $provide.value()}.                                                         // 2091
           */                                                                                                          // 2092
          value: invokeLater('$provide', 'value'),                                                                     // 2093
                                                                                                                       // 2094
          /**                                                                                                          // 2095
           * @ngdoc method                                                                                             // 2096
           * @name angular.Module#constant                                                                             // 2097
           * @module ng                                                                                                // 2098
           * @param {string} name constant name                                                                        // 2099
           * @param {*} object Constant value.                                                                         // 2100
           * @description                                                                                              // 2101
           * Because the constants are fixed, they get applied before other provide methods.                           // 2102
           * See {@link auto.$provide#constant $provide.constant()}.                                                   // 2103
           */                                                                                                          // 2104
          constant: invokeLater('$provide', 'constant', 'unshift'),                                                    // 2105
                                                                                                                       // 2106
           /**                                                                                                         // 2107
           * @ngdoc method                                                                                             // 2108
           * @name angular.Module#decorator                                                                            // 2109
           * @module ng                                                                                                // 2110
           * @param {string} The name of the service to decorate.                                                      // 2111
           * @param {Function} This function will be invoked when the service needs to be                              // 2112
           *                                    instantiated and should return the decorated service instance.         // 2113
           * @description                                                                                              // 2114
           * See {@link auto.$provide#decorator $provide.decorator()}.                                                 // 2115
           */                                                                                                          // 2116
          decorator: invokeLaterAndSetModuleName('$provide', 'decorator'),                                             // 2117
                                                                                                                       // 2118
          /**                                                                                                          // 2119
           * @ngdoc method                                                                                             // 2120
           * @name angular.Module#animation                                                                            // 2121
           * @module ng                                                                                                // 2122
           * @param {string} name animation name                                                                       // 2123
           * @param {Function} animationFactory Factory function for creating new instance of an                       // 2124
           *                                    animation.                                                             // 2125
           * @description                                                                                              // 2126
           *                                                                                                           // 2127
           * **NOTE**: animations take effect only if the **ngAnimate** module is loaded.                              // 2128
           *                                                                                                           // 2129
           *                                                                                                           // 2130
           * Defines an animation hook that can be later used with                                                     // 2131
           * {@link $animate $animate} service and directives that use this service.                                   // 2132
           *                                                                                                           // 2133
           * ```js                                                                                                     // 2134
           * module.animation('.animation-name', function($inject1, $inject2) {                                        // 2135
           *   return {                                                                                                // 2136
           *     eventName : function(element, done) {                                                                 // 2137
           *       //code to run the animation                                                                         // 2138
           *       //once complete, then run done()                                                                    // 2139
           *       return function cancellationFunction(element) {                                                     // 2140
           *         //code to cancel the animation                                                                    // 2141
           *       }                                                                                                   // 2142
           *     }                                                                                                     // 2143
           *   }                                                                                                       // 2144
           * })                                                                                                        // 2145
           * ```                                                                                                       // 2146
           *                                                                                                           // 2147
           * See {@link ng.$animateProvider#register $animateProvider.register()} and                                  // 2148
           * {@link ngAnimate ngAnimate module} for more information.                                                  // 2149
           */                                                                                                          // 2150
          animation: invokeLaterAndSetModuleName('$animateProvider', 'register'),                                      // 2151
                                                                                                                       // 2152
          /**                                                                                                          // 2153
           * @ngdoc method                                                                                             // 2154
           * @name angular.Module#filter                                                                               // 2155
           * @module ng                                                                                                // 2156
           * @param {string} name Filter name - this must be a valid angular expression identifier                     // 2157
           * @param {Function} filterFactory Factory function for creating new instance of filter.                     // 2158
           * @description                                                                                              // 2159
           * See {@link ng.$filterProvider#register $filterProvider.register()}.                                       // 2160
           *                                                                                                           // 2161
           * <div class="alert alert-warning">                                                                         // 2162
           * **Note:** Filter names must be valid angular {@link expression} identifiers, such as `uppercase` or `orderBy`.
           * Names with special characters, such as hyphens and dots, are not allowed. If you wish to namespace        // 2164
           * your filters, then you can use capitalization (`myappSubsectionFilterx`) or underscores                   // 2165
           * (`myapp_subsection_filterx`).                                                                             // 2166
           * </div>                                                                                                    // 2167
           */                                                                                                          // 2168
          filter: invokeLaterAndSetModuleName('$filterProvider', 'register'),                                          // 2169
                                                                                                                       // 2170
          /**                                                                                                          // 2171
           * @ngdoc method                                                                                             // 2172
           * @name angular.Module#controller                                                                           // 2173
           * @module ng                                                                                                // 2174
           * @param {string|Object} name Controller name, or an object map of controllers where the                    // 2175
           *    keys are the names and the values are the constructors.                                                // 2176
           * @param {Function} constructor Controller constructor function.                                            // 2177
           * @description                                                                                              // 2178
           * See {@link ng.$controllerProvider#register $controllerProvider.register()}.                               // 2179
           */                                                                                                          // 2180
          controller: invokeLaterAndSetModuleName('$controllerProvider', 'register'),                                  // 2181
                                                                                                                       // 2182
          /**                                                                                                          // 2183
           * @ngdoc method                                                                                             // 2184
           * @name angular.Module#directive                                                                            // 2185
           * @module ng                                                                                                // 2186
           * @param {string|Object} name Directive name, or an object map of directives where the                      // 2187
           *    keys are the names and the values are the factories.                                                   // 2188
           * @param {Function} directiveFactory Factory function for creating new instance of                          // 2189
           * directives.                                                                                               // 2190
           * @description                                                                                              // 2191
           * See {@link ng.$compileProvider#directive $compileProvider.directive()}.                                   // 2192
           */                                                                                                          // 2193
          directive: invokeLaterAndSetModuleName('$compileProvider', 'directive'),                                     // 2194
                                                                                                                       // 2195
          /**                                                                                                          // 2196
           * @ngdoc method                                                                                             // 2197
           * @name angular.Module#config                                                                               // 2198
           * @module ng                                                                                                // 2199
           * @param {Function} configFn Execute this function on module load. Useful for service                       // 2200
           *    configuration.                                                                                         // 2201
           * @description                                                                                              // 2202
           * Use this method to register work which needs to be performed on module loading.                           // 2203
           * For more about how to configure services, see                                                             // 2204
           * {@link providers#provider-recipe Provider Recipe}.                                                        // 2205
           */                                                                                                          // 2206
          config: config,                                                                                              // 2207
                                                                                                                       // 2208
          /**                                                                                                          // 2209
           * @ngdoc method                                                                                             // 2210
           * @name angular.Module#run                                                                                  // 2211
           * @module ng                                                                                                // 2212
           * @param {Function} initializationFn Execute this function after injector creation.                         // 2213
           *    Useful for application initialization.                                                                 // 2214
           * @description                                                                                              // 2215
           * Use this method to register work which should be performed when the injector is done                      // 2216
           * loading all modules.                                                                                      // 2217
           */                                                                                                          // 2218
          run: function(block) {                                                                                       // 2219
            runBlocks.push(block);                                                                                     // 2220
            return this;                                                                                               // 2221
          }                                                                                                            // 2222
        };                                                                                                             // 2223
                                                                                                                       // 2224
        if (configFn) {                                                                                                // 2225
          config(configFn);                                                                                            // 2226
        }                                                                                                              // 2227
                                                                                                                       // 2228
        return moduleInstance;                                                                                         // 2229
                                                                                                                       // 2230
        /**                                                                                                            // 2231
         * @param {string} provider                                                                                    // 2232
         * @param {string} method                                                                                      // 2233
         * @param {String=} insertMethod                                                                               // 2234
         * @returns {angular.Module}                                                                                   // 2235
         */                                                                                                            // 2236
        function invokeLater(provider, method, insertMethod, queue) {                                                  // 2237
          if (!queue) queue = invokeQueue;                                                                             // 2238
          return function() {                                                                                          // 2239
            queue[insertMethod || 'push']([provider, method, arguments]);                                              // 2240
            return moduleInstance;                                                                                     // 2241
          };                                                                                                           // 2242
        }                                                                                                              // 2243
                                                                                                                       // 2244
        /**                                                                                                            // 2245
         * @param {string} provider                                                                                    // 2246
         * @param {string} method                                                                                      // 2247
         * @returns {angular.Module}                                                                                   // 2248
         */                                                                                                            // 2249
        function invokeLaterAndSetModuleName(provider, method) {                                                       // 2250
          return function(recipeName, factoryFunction) {                                                               // 2251
            if (factoryFunction && isFunction(factoryFunction)) factoryFunction.$$moduleName = name;                   // 2252
            invokeQueue.push([provider, method, arguments]);                                                           // 2253
            return moduleInstance;                                                                                     // 2254
          };                                                                                                           // 2255
        }                                                                                                              // 2256
      });                                                                                                              // 2257
    };                                                                                                                 // 2258
  });                                                                                                                  // 2259
                                                                                                                       // 2260
}                                                                                                                      // 2261
                                                                                                                       // 2262
/* global: toDebugString: true */                                                                                      // 2263
                                                                                                                       // 2264
function serializeObject(obj) {                                                                                        // 2265
  var seen = [];                                                                                                       // 2266
                                                                                                                       // 2267
  return JSON.stringify(obj, function(key, val) {                                                                      // 2268
    val = toJsonReplacer(key, val);                                                                                    // 2269
    if (isObject(val)) {                                                                                               // 2270
                                                                                                                       // 2271
      if (seen.indexOf(val) >= 0) return '...';                                                                        // 2272
                                                                                                                       // 2273
      seen.push(val);                                                                                                  // 2274
    }                                                                                                                  // 2275
    return val;                                                                                                        // 2276
  });                                                                                                                  // 2277
}                                                                                                                      // 2278
                                                                                                                       // 2279
function toDebugString(obj) {                                                                                          // 2280
  if (typeof obj === 'function') {                                                                                     // 2281
    return obj.toString().replace(/ \{[\s\S]*$/, '');                                                                  // 2282
  } else if (isUndefined(obj)) {                                                                                       // 2283
    return 'undefined';                                                                                                // 2284
  } else if (typeof obj !== 'string') {                                                                                // 2285
    return serializeObject(obj);                                                                                       // 2286
  }                                                                                                                    // 2287
  return obj;                                                                                                          // 2288
}                                                                                                                      // 2289
                                                                                                                       // 2290
/* global angularModule: true,                                                                                         // 2291
  version: true,                                                                                                       // 2292
                                                                                                                       // 2293
  $CompileProvider,                                                                                                    // 2294
                                                                                                                       // 2295
  htmlAnchorDirective,                                                                                                 // 2296
  inputDirective,                                                                                                      // 2297
  inputDirective,                                                                                                      // 2298
  formDirective,                                                                                                       // 2299
  scriptDirective,                                                                                                     // 2300
  selectDirective,                                                                                                     // 2301
  styleDirective,                                                                                                      // 2302
  optionDirective,                                                                                                     // 2303
  ngBindDirective,                                                                                                     // 2304
  ngBindHtmlDirective,                                                                                                 // 2305
  ngBindTemplateDirective,                                                                                             // 2306
  ngClassDirective,                                                                                                    // 2307
  ngClassEvenDirective,                                                                                                // 2308
  ngClassOddDirective,                                                                                                 // 2309
  ngCloakDirective,                                                                                                    // 2310
  ngControllerDirective,                                                                                               // 2311
  ngFormDirective,                                                                                                     // 2312
  ngHideDirective,                                                                                                     // 2313
  ngIfDirective,                                                                                                       // 2314
  ngIncludeDirective,                                                                                                  // 2315
  ngIncludeFillContentDirective,                                                                                       // 2316
  ngInitDirective,                                                                                                     // 2317
  ngNonBindableDirective,                                                                                              // 2318
  ngPluralizeDirective,                                                                                                // 2319
  ngRepeatDirective,                                                                                                   // 2320
  ngShowDirective,                                                                                                     // 2321
  ngStyleDirective,                                                                                                    // 2322
  ngSwitchDirective,                                                                                                   // 2323
  ngSwitchWhenDirective,                                                                                               // 2324
  ngSwitchDefaultDirective,                                                                                            // 2325
  ngOptionsDirective,                                                                                                  // 2326
  ngTranscludeDirective,                                                                                               // 2327
  ngModelDirective,                                                                                                    // 2328
  ngListDirective,                                                                                                     // 2329
  ngChangeDirective,                                                                                                   // 2330
  patternDirective,                                                                                                    // 2331
  patternDirective,                                                                                                    // 2332
  requiredDirective,                                                                                                   // 2333
  requiredDirective,                                                                                                   // 2334
  minlengthDirective,                                                                                                  // 2335
  minlengthDirective,                                                                                                  // 2336
  maxlengthDirective,                                                                                                  // 2337
  maxlengthDirective,                                                                                                  // 2338
  ngValueDirective,                                                                                                    // 2339
  ngModelOptionsDirective,                                                                                             // 2340
  ngAttributeAliasDirectives,                                                                                          // 2341
  ngEventDirectives,                                                                                                   // 2342
                                                                                                                       // 2343
  $AnchorScrollProvider,                                                                                               // 2344
  $AnimateProvider,                                                                                                    // 2345
  $CoreAnimateCssProvider,                                                                                             // 2346
  $$CoreAnimateQueueProvider,                                                                                          // 2347
  $$CoreAnimateRunnerProvider,                                                                                         // 2348
  $BrowserProvider,                                                                                                    // 2349
  $CacheFactoryProvider,                                                                                               // 2350
  $ControllerProvider,                                                                                                 // 2351
  $DocumentProvider,                                                                                                   // 2352
  $ExceptionHandlerProvider,                                                                                           // 2353
  $FilterProvider,                                                                                                     // 2354
  $$ForceReflowProvider,                                                                                               // 2355
  $InterpolateProvider,                                                                                                // 2356
  $IntervalProvider,                                                                                                   // 2357
  $$HashMapProvider,                                                                                                   // 2358
  $HttpProvider,                                                                                                       // 2359
  $HttpParamSerializerProvider,                                                                                        // 2360
  $HttpParamSerializerJQLikeProvider,                                                                                  // 2361
  $HttpBackendProvider,                                                                                                // 2362
  $xhrFactoryProvider,                                                                                                 // 2363
  $LocationProvider,                                                                                                   // 2364
  $LogProvider,                                                                                                        // 2365
  $ParseProvider,                                                                                                      // 2366
  $RootScopeProvider,                                                                                                  // 2367
  $QProvider,                                                                                                          // 2368
  $$QProvider,                                                                                                         // 2369
  $$SanitizeUriProvider,                                                                                               // 2370
  $SceProvider,                                                                                                        // 2371
  $SceDelegateProvider,                                                                                                // 2372
  $SnifferProvider,                                                                                                    // 2373
  $TemplateCacheProvider,                                                                                              // 2374
  $TemplateRequestProvider,                                                                                            // 2375
  $$TestabilityProvider,                                                                                               // 2376
  $TimeoutProvider,                                                                                                    // 2377
  $$RAFProvider,                                                                                                       // 2378
  $WindowProvider,                                                                                                     // 2379
  $$jqLiteProvider,                                                                                                    // 2380
  $$CookieReaderProvider                                                                                               // 2381
*/                                                                                                                     // 2382
                                                                                                                       // 2383
                                                                                                                       // 2384
/**                                                                                                                    // 2385
 * @ngdoc object                                                                                                       // 2386
 * @name angular.version                                                                                               // 2387
 * @module ng                                                                                                          // 2388
 * @description                                                                                                        // 2389
 * An object that contains information about the current AngularJS version.                                            // 2390
 *                                                                                                                     // 2391
 * This object has the following properties:                                                                           // 2392
 *                                                                                                                     // 2393
 * - `full` – `{string}` – Full version string, such as "0.9.18".                                                      // 2394
 * - `major` – `{number}` – Major version number, such as "0".                                                         // 2395
 * - `minor` – `{number}` – Minor version number, such as "9".                                                         // 2396
 * - `dot` – `{number}` – Dot version number, such as "18".                                                            // 2397
 * - `codeName` – `{string}` – Code name of the release, such as "jiggling-armfat".                                    // 2398
 */                                                                                                                    // 2399
var version = {                                                                                                        // 2400
  full: '1.4.8',    // all of these placeholder strings will be replaced by grunt's                                    // 2401
  major: 1,    // package task                                                                                         // 2402
  minor: 4,                                                                                                            // 2403
  dot: 8,                                                                                                              // 2404
  codeName: 'ice-manipulation'                                                                                         // 2405
};                                                                                                                     // 2406
                                                                                                                       // 2407
                                                                                                                       // 2408
function publishExternalAPI(angular) {                                                                                 // 2409
  extend(angular, {                                                                                                    // 2410
    'bootstrap': bootstrap,                                                                                            // 2411
    'copy': copy,                                                                                                      // 2412
    'extend': extend,                                                                                                  // 2413
    'merge': merge,                                                                                                    // 2414
    'equals': equals,                                                                                                  // 2415
    'element': jqLite,                                                                                                 // 2416
    'forEach': forEach,                                                                                                // 2417
    'injector': createInjector,                                                                                        // 2418
    'noop': noop,                                                                                                      // 2419
    'bind': bind,                                                                                                      // 2420
    'toJson': toJson,                                                                                                  // 2421
    'fromJson': fromJson,                                                                                              // 2422
    'identity': identity,                                                                                              // 2423
    'isUndefined': isUndefined,                                                                                        // 2424
    'isDefined': isDefined,                                                                                            // 2425
    'isString': isString,                                                                                              // 2426
    'isFunction': isFunction,                                                                                          // 2427
    'isObject': isObject,                                                                                              // 2428
    'isNumber': isNumber,                                                                                              // 2429
    'isElement': isElement,                                                                                            // 2430
    'isArray': isArray,                                                                                                // 2431
    'version': version,                                                                                                // 2432
    'isDate': isDate,                                                                                                  // 2433
    'lowercase': lowercase,                                                                                            // 2434
    'uppercase': uppercase,                                                                                            // 2435
    'callbacks': {counter: 0},                                                                                         // 2436
    'getTestability': getTestability,                                                                                  // 2437
    '$$minErr': minErr,                                                                                                // 2438
    '$$csp': csp,                                                                                                      // 2439
    'reloadWithDebugInfo': reloadWithDebugInfo                                                                         // 2440
  });                                                                                                                  // 2441
                                                                                                                       // 2442
  angularModule = setupModuleLoader(window);                                                                           // 2443
                                                                                                                       // 2444
  angularModule('ng', ['ngLocale'], ['$provide',                                                                       // 2445
    function ngModule($provide) {                                                                                      // 2446
      // $$sanitizeUriProvider needs to be before $compileProvider as it is used by it.                                // 2447
      $provide.provider({                                                                                              // 2448
        $$sanitizeUri: $$SanitizeUriProvider                                                                           // 2449
      });                                                                                                              // 2450
      $provide.provider('$compile', $CompileProvider).                                                                 // 2451
        directive({                                                                                                    // 2452
            a: htmlAnchorDirective,                                                                                    // 2453
            input: inputDirective,                                                                                     // 2454
            textarea: inputDirective,                                                                                  // 2455
            form: formDirective,                                                                                       // 2456
            script: scriptDirective,                                                                                   // 2457
            select: selectDirective,                                                                                   // 2458
            style: styleDirective,                                                                                     // 2459
            option: optionDirective,                                                                                   // 2460
            ngBind: ngBindDirective,                                                                                   // 2461
            ngBindHtml: ngBindHtmlDirective,                                                                           // 2462
            ngBindTemplate: ngBindTemplateDirective,                                                                   // 2463
            ngClass: ngClassDirective,                                                                                 // 2464
            ngClassEven: ngClassEvenDirective,                                                                         // 2465
            ngClassOdd: ngClassOddDirective,                                                                           // 2466
            ngCloak: ngCloakDirective,                                                                                 // 2467
            ngController: ngControllerDirective,                                                                       // 2468
            ngForm: ngFormDirective,                                                                                   // 2469
            ngHide: ngHideDirective,                                                                                   // 2470
            ngIf: ngIfDirective,                                                                                       // 2471
            ngInclude: ngIncludeDirective,                                                                             // 2472
            ngInit: ngInitDirective,                                                                                   // 2473
            ngNonBindable: ngNonBindableDirective,                                                                     // 2474
            ngPluralize: ngPluralizeDirective,                                                                         // 2475
            ngRepeat: ngRepeatDirective,                                                                               // 2476
            ngShow: ngShowDirective,                                                                                   // 2477
            ngStyle: ngStyleDirective,                                                                                 // 2478
            ngSwitch: ngSwitchDirective,                                                                               // 2479
            ngSwitchWhen: ngSwitchWhenDirective,                                                                       // 2480
            ngSwitchDefault: ngSwitchDefaultDirective,                                                                 // 2481
            ngOptions: ngOptionsDirective,                                                                             // 2482
            ngTransclude: ngTranscludeDirective,                                                                       // 2483
            ngModel: ngModelDirective,                                                                                 // 2484
            ngList: ngListDirective,                                                                                   // 2485
            ngChange: ngChangeDirective,                                                                               // 2486
            pattern: patternDirective,                                                                                 // 2487
            ngPattern: patternDirective,                                                                               // 2488
            required: requiredDirective,                                                                               // 2489
            ngRequired: requiredDirective,                                                                             // 2490
            minlength: minlengthDirective,                                                                             // 2491
            ngMinlength: minlengthDirective,                                                                           // 2492
            maxlength: maxlengthDirective,                                                                             // 2493
            ngMaxlength: maxlengthDirective,                                                                           // 2494
            ngValue: ngValueDirective,                                                                                 // 2495
            ngModelOptions: ngModelOptionsDirective                                                                    // 2496
        }).                                                                                                            // 2497
        directive({                                                                                                    // 2498
          ngInclude: ngIncludeFillContentDirective                                                                     // 2499
        }).                                                                                                            // 2500
        directive(ngAttributeAliasDirectives).                                                                         // 2501
        directive(ngEventDirectives);                                                                                  // 2502
      $provide.provider({                                                                                              // 2503
        $anchorScroll: $AnchorScrollProvider,                                                                          // 2504
        $animate: $AnimateProvider,                                                                                    // 2505
        $animateCss: $CoreAnimateCssProvider,                                                                          // 2506
        $$animateQueue: $$CoreAnimateQueueProvider,                                                                    // 2507
        $$AnimateRunner: $$CoreAnimateRunnerProvider,                                                                  // 2508
        $browser: $BrowserProvider,                                                                                    // 2509
        $cacheFactory: $CacheFactoryProvider,                                                                          // 2510
        $controller: $ControllerProvider,                                                                              // 2511
        $document: $DocumentProvider,                                                                                  // 2512
        $exceptionHandler: $ExceptionHandlerProvider,                                                                  // 2513
        $filter: $FilterProvider,                                                                                      // 2514
        $$forceReflow: $$ForceReflowProvider,                                                                          // 2515
        $interpolate: $InterpolateProvider,                                                                            // 2516
        $interval: $IntervalProvider,                                                                                  // 2517
        $http: $HttpProvider,                                                                                          // 2518
        $httpParamSerializer: $HttpParamSerializerProvider,                                                            // 2519
        $httpParamSerializerJQLike: $HttpParamSerializerJQLikeProvider,                                                // 2520
        $httpBackend: $HttpBackendProvider,                                                                            // 2521
        $xhrFactory: $xhrFactoryProvider,                                                                              // 2522
        $location: $LocationProvider,                                                                                  // 2523
        $log: $LogProvider,                                                                                            // 2524
        $parse: $ParseProvider,                                                                                        // 2525
        $rootScope: $RootScopeProvider,                                                                                // 2526
        $q: $QProvider,                                                                                                // 2527
        $$q: $$QProvider,                                                                                              // 2528
        $sce: $SceProvider,                                                                                            // 2529
        $sceDelegate: $SceDelegateProvider,                                                                            // 2530
        $sniffer: $SnifferProvider,                                                                                    // 2531
        $templateCache: $TemplateCacheProvider,                                                                        // 2532
        $templateRequest: $TemplateRequestProvider,                                                                    // 2533
        $$testability: $$TestabilityProvider,                                                                          // 2534
        $timeout: $TimeoutProvider,                                                                                    // 2535
        $window: $WindowProvider,                                                                                      // 2536
        $$rAF: $$RAFProvider,                                                                                          // 2537
        $$jqLite: $$jqLiteProvider,                                                                                    // 2538
        $$HashMap: $$HashMapProvider,                                                                                  // 2539
        $$cookieReader: $$CookieReaderProvider                                                                         // 2540
      });                                                                                                              // 2541
    }                                                                                                                  // 2542
  ]);                                                                                                                  // 2543
}                                                                                                                      // 2544
                                                                                                                       // 2545
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *                                           // 2546
 *     Any commits to this file should be reviewed with security in mind.  *                                           // 2547
 *   Changes to this file can potentially create security vulnerabilities. *                                           // 2548
 *          An approval from 2 Core members with history of modifying      *                                           // 2549
 *                         this file is required.                          *                                           // 2550
 *                                                                         *                                           // 2551
 *  Does the change somehow allow for arbitrary javascript to be executed? *                                           // 2552
 *    Or allows for someone to change the prototype of built-in objects?   *                                           // 2553
 *     Or gives undesired access to variables likes document or window?    *                                           // 2554
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */                                          // 2555
                                                                                                                       // 2556
/* global JQLitePrototype: true,                                                                                       // 2557
  addEventListenerFn: true,                                                                                            // 2558
  removeEventListenerFn: true,                                                                                         // 2559
  BOOLEAN_ATTR: true,                                                                                                  // 2560
  ALIASED_ATTR: true,                                                                                                  // 2561
*/                                                                                                                     // 2562
                                                                                                                       // 2563
//////////////////////////////////                                                                                     // 2564
//JQLite                                                                                                               // 2565
//////////////////////////////////                                                                                     // 2566
                                                                                                                       // 2567
/**                                                                                                                    // 2568
 * @ngdoc function                                                                                                     // 2569
 * @name angular.element                                                                                               // 2570
 * @module ng                                                                                                          // 2571
 * @kind function                                                                                                      // 2572
 *                                                                                                                     // 2573
 * @description                                                                                                        // 2574
 * Wraps a raw DOM element or HTML string as a [jQuery](http://jquery.com) element.                                    // 2575
 *                                                                                                                     // 2576
 * If jQuery is available, `angular.element` is an alias for the                                                       // 2577
 * [jQuery](http://api.jquery.com/jQuery/) function. If jQuery is not available, `angular.element`                     // 2578
 * delegates to Angular's built-in subset of jQuery, called "jQuery lite" or "jqLite."                                 // 2579
 *                                                                                                                     // 2580
 * <div class="alert alert-success">jqLite is a tiny, API-compatible subset of jQuery that allows                      // 2581
 * Angular to manipulate the DOM in a cross-browser compatible way. **jqLite** implements only the most                // 2582
 * commonly needed functionality with the goal of having a very small footprint.</div>                                 // 2583
 *                                                                                                                     // 2584
 * To use `jQuery`, simply ensure it is loaded before the `angular.js` file.                                           // 2585
 *                                                                                                                     // 2586
 * <div class="alert">**Note:** all element references in Angular are always wrapped with jQuery or                    // 2587
 * jqLite; they are never raw DOM references.</div>                                                                    // 2588
 *                                                                                                                     // 2589
 * ## Angular's jqLite                                                                                                 // 2590
 * jqLite provides only the following jQuery methods:                                                                  // 2591
 *                                                                                                                     // 2592
 * - [`addClass()`](http://api.jquery.com/addClass/)                                                                   // 2593
 * - [`after()`](http://api.jquery.com/after/)                                                                         // 2594
 * - [`append()`](http://api.jquery.com/append/)                                                                       // 2595
 * - [`attr()`](http://api.jquery.com/attr/) - Does not support functions as parameters                                // 2596
 * - [`bind()`](http://api.jquery.com/bind/) - Does not support namespaces, selectors or eventData                     // 2597
 * - [`children()`](http://api.jquery.com/children/) - Does not support selectors                                      // 2598
 * - [`clone()`](http://api.jquery.com/clone/)                                                                         // 2599
 * - [`contents()`](http://api.jquery.com/contents/)                                                                   // 2600
 * - [`css()`](http://api.jquery.com/css/) - Only retrieves inline-styles, does not call `getComputedStyle()`. As a setter, does not convert numbers to strings or append 'px'.
 * - [`data()`](http://api.jquery.com/data/)                                                                           // 2602
 * - [`detach()`](http://api.jquery.com/detach/)                                                                       // 2603
 * - [`empty()`](http://api.jquery.com/empty/)                                                                         // 2604
 * - [`eq()`](http://api.jquery.com/eq/)                                                                               // 2605
 * - [`find()`](http://api.jquery.com/find/) - Limited to lookups by tag name                                          // 2606
 * - [`hasClass()`](http://api.jquery.com/hasClass/)                                                                   // 2607
 * - [`html()`](http://api.jquery.com/html/)                                                                           // 2608
 * - [`next()`](http://api.jquery.com/next/) - Does not support selectors                                              // 2609
 * - [`on()`](http://api.jquery.com/on/) - Does not support namespaces, selectors or eventData                         // 2610
 * - [`off()`](http://api.jquery.com/off/) - Does not support namespaces, selectors or event object as parameter       // 2611
 * - [`one()`](http://api.jquery.com/one/) - Does not support namespaces or selectors                                  // 2612
 * - [`parent()`](http://api.jquery.com/parent/) - Does not support selectors                                          // 2613
 * - [`prepend()`](http://api.jquery.com/prepend/)                                                                     // 2614
 * - [`prop()`](http://api.jquery.com/prop/)                                                                           // 2615
 * - [`ready()`](http://api.jquery.com/ready/)                                                                         // 2616
 * - [`remove()`](http://api.jquery.com/remove/)                                                                       // 2617
 * - [`removeAttr()`](http://api.jquery.com/removeAttr/)                                                               // 2618
 * - [`removeClass()`](http://api.jquery.com/removeClass/)                                                             // 2619
 * - [`removeData()`](http://api.jquery.com/removeData/)                                                               // 2620
 * - [`replaceWith()`](http://api.jquery.com/replaceWith/)                                                             // 2621
 * - [`text()`](http://api.jquery.com/text/)                                                                           // 2622
 * - [`toggleClass()`](http://api.jquery.com/toggleClass/)                                                             // 2623
 * - [`triggerHandler()`](http://api.jquery.com/triggerHandler/) - Passes a dummy event object to handlers.            // 2624
 * - [`unbind()`](http://api.jquery.com/unbind/) - Does not support namespaces or event object as parameter            // 2625
 * - [`val()`](http://api.jquery.com/val/)                                                                             // 2626
 * - [`wrap()`](http://api.jquery.com/wrap/)                                                                           // 2627
 *                                                                                                                     // 2628
 * ## jQuery/jqLite Extras                                                                                             // 2629
 * Angular also provides the following additional methods and events to both jQuery and jqLite:                        // 2630
 *                                                                                                                     // 2631
 * ### Events                                                                                                          // 2632
 * - `$destroy` - AngularJS intercepts all jqLite/jQuery's DOM destruction apis and fires this event                   // 2633
 *    on all DOM nodes being removed.  This can be used to clean up any 3rd party bindings to the DOM                  // 2634
 *    element before it is removed.                                                                                    // 2635
 *                                                                                                                     // 2636
 * ### Methods                                                                                                         // 2637
 * - `controller(name)` - retrieves the controller of the current element or its parent. By default                    // 2638
 *   retrieves controller associated with the `ngController` directive. If `name` is provided as                       // 2639
 *   camelCase directive name, then the controller for this directive will be retrieved (e.g.                          // 2640
 *   `'ngModel'`).                                                                                                     // 2641
 * - `injector()` - retrieves the injector of the current element or its parent.                                       // 2642
 * - `scope()` - retrieves the {@link ng.$rootScope.Scope scope} of the current                                        // 2643
 *   element or its parent. Requires {@link guide/production#disabling-debug-data Debug Data} to                       // 2644
 *   be enabled.                                                                                                       // 2645
 * - `isolateScope()` - retrieves an isolate {@link ng.$rootScope.Scope scope} if one is attached directly to the      // 2646
 *   current element. This getter should be used only on elements that contain a directive which starts a new isolate  // 2647
 *   scope. Calling `scope()` on this element always returns the original non-isolate scope.                           // 2648
 *   Requires {@link guide/production#disabling-debug-data Debug Data} to be enabled.                                  // 2649
 * - `inheritedData()` - same as `data()`, but walks up the DOM until a value is found or the top                      // 2650
 *   parent element is reached.                                                                                        // 2651
 *                                                                                                                     // 2652
 * @param {string|DOMElement} element HTML string or DOMElement to be wrapped into jQuery.                             // 2653
 * @returns {Object} jQuery object.                                                                                    // 2654
 */                                                                                                                    // 2655
                                                                                                                       // 2656
JQLite.expando = 'ng339';                                                                                              // 2657
                                                                                                                       // 2658
var jqCache = JQLite.cache = {},                                                                                       // 2659
    jqId = 1,                                                                                                          // 2660
    addEventListenerFn = function(element, type, fn) {                                                                 // 2661
      element.addEventListener(type, fn, false);                                                                       // 2662
    },                                                                                                                 // 2663
    removeEventListenerFn = function(element, type, fn) {                                                              // 2664
      element.removeEventListener(type, fn, false);                                                                    // 2665
    };                                                                                                                 // 2666
                                                                                                                       // 2667
/*                                                                                                                     // 2668
 * !!! This is an undocumented "private" function !!!                                                                  // 2669
 */                                                                                                                    // 2670
JQLite._data = function(node) {                                                                                        // 2671
  //jQuery always returns an object on cache miss                                                                      // 2672
  return this.cache[node[this.expando]] || {};                                                                         // 2673
};                                                                                                                     // 2674
                                                                                                                       // 2675
function jqNextId() { return ++jqId; }                                                                                 // 2676
                                                                                                                       // 2677
                                                                                                                       // 2678
var SPECIAL_CHARS_REGEXP = /([\:\-\_]+(.))/g;                                                                          // 2679
var MOZ_HACK_REGEXP = /^moz([A-Z])/;                                                                                   // 2680
var MOUSE_EVENT_MAP= { mouseleave: "mouseout", mouseenter: "mouseover"};                                               // 2681
var jqLiteMinErr = minErr('jqLite');                                                                                   // 2682
                                                                                                                       // 2683
/**                                                                                                                    // 2684
 * Converts snake_case to camelCase.                                                                                   // 2685
 * Also there is special case for Moz prefix starting with upper case letter.                                          // 2686
 * @param name Name to normalize                                                                                       // 2687
 */                                                                                                                    // 2688
function camelCase(name) {                                                                                             // 2689
  return name.                                                                                                         // 2690
    replace(SPECIAL_CHARS_REGEXP, function(_, separator, letter, offset) {                                             // 2691
      return offset ? letter.toUpperCase() : letter;                                                                   // 2692
    }).                                                                                                                // 2693
    replace(MOZ_HACK_REGEXP, 'Moz$1');                                                                                 // 2694
}                                                                                                                      // 2695
                                                                                                                       // 2696
var SINGLE_TAG_REGEXP = /^<([\w-]+)\s*\/?>(?:<\/\1>|)$/;                                                               // 2697
var HTML_REGEXP = /<|&#?\w+;/;                                                                                         // 2698
var TAG_NAME_REGEXP = /<([\w:-]+)/;                                                                                    // 2699
var XHTML_TAG_REGEXP = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:-]+)[^>]*)\/>/gi;                     // 2700
                                                                                                                       // 2701
var wrapMap = {                                                                                                        // 2702
  'option': [1, '<select multiple="multiple">', '</select>'],                                                          // 2703
                                                                                                                       // 2704
  'thead': [1, '<table>', '</table>'],                                                                                 // 2705
  'col': [2, '<table><colgroup>', '</colgroup></table>'],                                                              // 2706
  'tr': [2, '<table><tbody>', '</tbody></table>'],                                                                     // 2707
  'td': [3, '<table><tbody><tr>', '</tr></tbody></table>'],                                                            // 2708
  '_default': [0, "", ""]                                                                                              // 2709
};                                                                                                                     // 2710
                                                                                                                       // 2711
wrapMap.optgroup = wrapMap.option;                                                                                     // 2712
wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;                                    // 2713
wrapMap.th = wrapMap.td;                                                                                               // 2714
                                                                                                                       // 2715
                                                                                                                       // 2716
function jqLiteIsTextNode(html) {                                                                                      // 2717
  return !HTML_REGEXP.test(html);                                                                                      // 2718
}                                                                                                                      // 2719
                                                                                                                       // 2720
function jqLiteAcceptsData(node) {                                                                                     // 2721
  // The window object can accept data but has no nodeType                                                             // 2722
  // Otherwise we are only interested in elements (1) and documents (9)                                                // 2723
  var nodeType = node.nodeType;                                                                                        // 2724
  return nodeType === NODE_TYPE_ELEMENT || !nodeType || nodeType === NODE_TYPE_DOCUMENT;                               // 2725
}                                                                                                                      // 2726
                                                                                                                       // 2727
function jqLiteHasData(node) {                                                                                         // 2728
  for (var key in jqCache[node.ng339]) {                                                                               // 2729
    return true;                                                                                                       // 2730
  }                                                                                                                    // 2731
  return false;                                                                                                        // 2732
}                                                                                                                      // 2733
                                                                                                                       // 2734
function jqLiteBuildFragment(html, context) {                                                                          // 2735
  var tmp, tag, wrap,                                                                                                  // 2736
      fragment = context.createDocumentFragment(),                                                                     // 2737
      nodes = [], i;                                                                                                   // 2738
                                                                                                                       // 2739
  if (jqLiteIsTextNode(html)) {                                                                                        // 2740
    // Convert non-html into a text node                                                                               // 2741
    nodes.push(context.createTextNode(html));                                                                          // 2742
  } else {                                                                                                             // 2743
    // Convert html into DOM nodes                                                                                     // 2744
    tmp = tmp || fragment.appendChild(context.createElement("div"));                                                   // 2745
    tag = (TAG_NAME_REGEXP.exec(html) || ["", ""])[1].toLowerCase();                                                   // 2746
    wrap = wrapMap[tag] || wrapMap._default;                                                                           // 2747
    tmp.innerHTML = wrap[1] + html.replace(XHTML_TAG_REGEXP, "<$1></$2>") + wrap[2];                                   // 2748
                                                                                                                       // 2749
    // Descend through wrappers to the right content                                                                   // 2750
    i = wrap[0];                                                                                                       // 2751
    while (i--) {                                                                                                      // 2752
      tmp = tmp.lastChild;                                                                                             // 2753
    }                                                                                                                  // 2754
                                                                                                                       // 2755
    nodes = concat(nodes, tmp.childNodes);                                                                             // 2756
                                                                                                                       // 2757
    tmp = fragment.firstChild;                                                                                         // 2758
    tmp.textContent = "";                                                                                              // 2759
  }                                                                                                                    // 2760
                                                                                                                       // 2761
  // Remove wrapper from fragment                                                                                      // 2762
  fragment.textContent = "";                                                                                           // 2763
  fragment.innerHTML = ""; // Clear inner HTML                                                                         // 2764
  forEach(nodes, function(node) {                                                                                      // 2765
    fragment.appendChild(node);                                                                                        // 2766
  });                                                                                                                  // 2767
                                                                                                                       // 2768
  return fragment;                                                                                                     // 2769
}                                                                                                                      // 2770
                                                                                                                       // 2771
function jqLiteParseHTML(html, context) {                                                                              // 2772
  context = context || document;                                                                                       // 2773
  var parsed;                                                                                                          // 2774
                                                                                                                       // 2775
  if ((parsed = SINGLE_TAG_REGEXP.exec(html))) {                                                                       // 2776
    return [context.createElement(parsed[1])];                                                                         // 2777
  }                                                                                                                    // 2778
                                                                                                                       // 2779
  if ((parsed = jqLiteBuildFragment(html, context))) {                                                                 // 2780
    return parsed.childNodes;                                                                                          // 2781
  }                                                                                                                    // 2782
                                                                                                                       // 2783
  return [];                                                                                                           // 2784
}                                                                                                                      // 2785
                                                                                                                       // 2786
                                                                                                                       // 2787
// IE9-11 has no method "contains" in SVG element and in Node.prototype. Bug #10259.                                   // 2788
var jqLiteContains = Node.prototype.contains || function(arg) {                                                        // 2789
  // jshint bitwise: false                                                                                             // 2790
  return !!(this.compareDocumentPosition(arg) & 16);                                                                   // 2791
  // jshint bitwise: true                                                                                              // 2792
};                                                                                                                     // 2793
                                                                                                                       // 2794
/////////////////////////////////////////////                                                                          // 2795
function JQLite(element) {                                                                                             // 2796
  if (element instanceof JQLite) {                                                                                     // 2797
    return element;                                                                                                    // 2798
  }                                                                                                                    // 2799
                                                                                                                       // 2800
  var argIsString;                                                                                                     // 2801
                                                                                                                       // 2802
  if (isString(element)) {                                                                                             // 2803
    element = trim(element);                                                                                           // 2804
    argIsString = true;                                                                                                // 2805
  }                                                                                                                    // 2806
  if (!(this instanceof JQLite)) {                                                                                     // 2807
    if (argIsString && element.charAt(0) != '<') {                                                                     // 2808
      throw jqLiteMinErr('nosel', 'Looking up elements via selectors is not supported by jqLite! See: http://docs.angularjs.org/api/angular.element');
    }                                                                                                                  // 2810
    return new JQLite(element);                                                                                        // 2811
  }                                                                                                                    // 2812
                                                                                                                       // 2813
  if (argIsString) {                                                                                                   // 2814
    jqLiteAddNodes(this, jqLiteParseHTML(element));                                                                    // 2815
  } else {                                                                                                             // 2816
    jqLiteAddNodes(this, element);                                                                                     // 2817
  }                                                                                                                    // 2818
}                                                                                                                      // 2819
                                                                                                                       // 2820
function jqLiteClone(element) {                                                                                        // 2821
  return element.cloneNode(true);                                                                                      // 2822
}                                                                                                                      // 2823
                                                                                                                       // 2824
function jqLiteDealoc(element, onlyDescendants) {                                                                      // 2825
  if (!onlyDescendants) jqLiteRemoveData(element);                                                                     // 2826
                                                                                                                       // 2827
  if (element.querySelectorAll) {                                                                                      // 2828
    var descendants = element.querySelectorAll('*');                                                                   // 2829
    for (var i = 0, l = descendants.length; i < l; i++) {                                                              // 2830
      jqLiteRemoveData(descendants[i]);                                                                                // 2831
    }                                                                                                                  // 2832
  }                                                                                                                    // 2833
}                                                                                                                      // 2834
                                                                                                                       // 2835
function jqLiteOff(element, type, fn, unsupported) {                                                                   // 2836
  if (isDefined(unsupported)) throw jqLiteMinErr('offargs', 'jqLite#off() does not support the `selector` argument');  // 2837
                                                                                                                       // 2838
  var expandoStore = jqLiteExpandoStore(element);                                                                      // 2839
  var events = expandoStore && expandoStore.events;                                                                    // 2840
  var handle = expandoStore && expandoStore.handle;                                                                    // 2841
                                                                                                                       // 2842
  if (!handle) return; //no listeners registered                                                                       // 2843
                                                                                                                       // 2844
  if (!type) {                                                                                                         // 2845
    for (type in events) {                                                                                             // 2846
      if (type !== '$destroy') {                                                                                       // 2847
        removeEventListenerFn(element, type, handle);                                                                  // 2848
      }                                                                                                                // 2849
      delete events[type];                                                                                             // 2850
    }                                                                                                                  // 2851
  } else {                                                                                                             // 2852
                                                                                                                       // 2853
    var removeHandler = function(type) {                                                                               // 2854
      var listenerFns = events[type];                                                                                  // 2855
      if (isDefined(fn)) {                                                                                             // 2856
        arrayRemove(listenerFns || [], fn);                                                                            // 2857
      }                                                                                                                // 2858
      if (!(isDefined(fn) && listenerFns && listenerFns.length > 0)) {                                                 // 2859
        removeEventListenerFn(element, type, handle);                                                                  // 2860
        delete events[type];                                                                                           // 2861
      }                                                                                                                // 2862
    };                                                                                                                 // 2863
                                                                                                                       // 2864
    forEach(type.split(' '), function(type) {                                                                          // 2865
      removeHandler(type);                                                                                             // 2866
      if (MOUSE_EVENT_MAP[type]) {                                                                                     // 2867
        removeHandler(MOUSE_EVENT_MAP[type]);                                                                          // 2868
      }                                                                                                                // 2869
    });                                                                                                                // 2870
  }                                                                                                                    // 2871
}                                                                                                                      // 2872
                                                                                                                       // 2873
function jqLiteRemoveData(element, name) {                                                                             // 2874
  var expandoId = element.ng339;                                                                                       // 2875
  var expandoStore = expandoId && jqCache[expandoId];                                                                  // 2876
                                                                                                                       // 2877
  if (expandoStore) {                                                                                                  // 2878
    if (name) {                                                                                                        // 2879
      delete expandoStore.data[name];                                                                                  // 2880
      return;                                                                                                          // 2881
    }                                                                                                                  // 2882
                                                                                                                       // 2883
    if (expandoStore.handle) {                                                                                         // 2884
      if (expandoStore.events.$destroy) {                                                                              // 2885
        expandoStore.handle({}, '$destroy');                                                                           // 2886
      }                                                                                                                // 2887
      jqLiteOff(element);                                                                                              // 2888
    }                                                                                                                  // 2889
    delete jqCache[expandoId];                                                                                         // 2890
    element.ng339 = undefined; // don't delete DOM expandos. IE and Chrome don't like it                               // 2891
  }                                                                                                                    // 2892
}                                                                                                                      // 2893
                                                                                                                       // 2894
                                                                                                                       // 2895
function jqLiteExpandoStore(element, createIfNecessary) {                                                              // 2896
  var expandoId = element.ng339,                                                                                       // 2897
      expandoStore = expandoId && jqCache[expandoId];                                                                  // 2898
                                                                                                                       // 2899
  if (createIfNecessary && !expandoStore) {                                                                            // 2900
    element.ng339 = expandoId = jqNextId();                                                                            // 2901
    expandoStore = jqCache[expandoId] = {events: {}, data: {}, handle: undefined};                                     // 2902
  }                                                                                                                    // 2903
                                                                                                                       // 2904
  return expandoStore;                                                                                                 // 2905
}                                                                                                                      // 2906
                                                                                                                       // 2907
                                                                                                                       // 2908
function jqLiteData(element, key, value) {                                                                             // 2909
  if (jqLiteAcceptsData(element)) {                                                                                    // 2910
                                                                                                                       // 2911
    var isSimpleSetter = isDefined(value);                                                                             // 2912
    var isSimpleGetter = !isSimpleSetter && key && !isObject(key);                                                     // 2913
    var massGetter = !key;                                                                                             // 2914
    var expandoStore = jqLiteExpandoStore(element, !isSimpleGetter);                                                   // 2915
    var data = expandoStore && expandoStore.data;                                                                      // 2916
                                                                                                                       // 2917
    if (isSimpleSetter) { // data('key', value)                                                                        // 2918
      data[key] = value;                                                                                               // 2919
    } else {                                                                                                           // 2920
      if (massGetter) {  // data()                                                                                     // 2921
        return data;                                                                                                   // 2922
      } else {                                                                                                         // 2923
        if (isSimpleGetter) { // data('key')                                                                           // 2924
          // don't force creation of expandoStore if it doesn't exist yet                                              // 2925
          return data && data[key];                                                                                    // 2926
        } else { // mass-setter: data({key1: val1, key2: val2})                                                        // 2927
          extend(data, key);                                                                                           // 2928
        }                                                                                                              // 2929
      }                                                                                                                // 2930
    }                                                                                                                  // 2931
  }                                                                                                                    // 2932
}                                                                                                                      // 2933
                                                                                                                       // 2934
function jqLiteHasClass(element, selector) {                                                                           // 2935
  if (!element.getAttribute) return false;                                                                             // 2936
  return ((" " + (element.getAttribute('class') || '') + " ").replace(/[\n\t]/g, " ").                                 // 2937
      indexOf(" " + selector + " ") > -1);                                                                             // 2938
}                                                                                                                      // 2939
                                                                                                                       // 2940
function jqLiteRemoveClass(element, cssClasses) {                                                                      // 2941
  if (cssClasses && element.setAttribute) {                                                                            // 2942
    forEach(cssClasses.split(' '), function(cssClass) {                                                                // 2943
      element.setAttribute('class', trim(                                                                              // 2944
          (" " + (element.getAttribute('class') || '') + " ")                                                          // 2945
          .replace(/[\n\t]/g, " ")                                                                                     // 2946
          .replace(" " + trim(cssClass) + " ", " "))                                                                   // 2947
      );                                                                                                               // 2948
    });                                                                                                                // 2949
  }                                                                                                                    // 2950
}                                                                                                                      // 2951
                                                                                                                       // 2952
function jqLiteAddClass(element, cssClasses) {                                                                         // 2953
  if (cssClasses && element.setAttribute) {                                                                            // 2954
    var existingClasses = (' ' + (element.getAttribute('class') || '') + ' ')                                          // 2955
                            .replace(/[\n\t]/g, " ");                                                                  // 2956
                                                                                                                       // 2957
    forEach(cssClasses.split(' '), function(cssClass) {                                                                // 2958
      cssClass = trim(cssClass);                                                                                       // 2959
      if (existingClasses.indexOf(' ' + cssClass + ' ') === -1) {                                                      // 2960
        existingClasses += cssClass + ' ';                                                                             // 2961
      }                                                                                                                // 2962
    });                                                                                                                // 2963
                                                                                                                       // 2964
    element.setAttribute('class', trim(existingClasses));                                                              // 2965
  }                                                                                                                    // 2966
}                                                                                                                      // 2967
                                                                                                                       // 2968
                                                                                                                       // 2969
function jqLiteAddNodes(root, elements) {                                                                              // 2970
  // THIS CODE IS VERY HOT. Don't make changes without benchmarking.                                                   // 2971
                                                                                                                       // 2972
  if (elements) {                                                                                                      // 2973
                                                                                                                       // 2974
    // if a Node (the most common case)                                                                                // 2975
    if (elements.nodeType) {                                                                                           // 2976
      root[root.length++] = elements;                                                                                  // 2977
    } else {                                                                                                           // 2978
      var length = elements.length;                                                                                    // 2979
                                                                                                                       // 2980
      // if an Array or NodeList and not a Window                                                                      // 2981
      if (typeof length === 'number' && elements.window !== elements) {                                                // 2982
        if (length) {                                                                                                  // 2983
          for (var i = 0; i < length; i++) {                                                                           // 2984
            root[root.length++] = elements[i];                                                                         // 2985
          }                                                                                                            // 2986
        }                                                                                                              // 2987
      } else {                                                                                                         // 2988
        root[root.length++] = elements;                                                                                // 2989
      }                                                                                                                // 2990
    }                                                                                                                  // 2991
  }                                                                                                                    // 2992
}                                                                                                                      // 2993
                                                                                                                       // 2994
                                                                                                                       // 2995
function jqLiteController(element, name) {                                                                             // 2996
  return jqLiteInheritedData(element, '$' + (name || 'ngController') + 'Controller');                                  // 2997
}                                                                                                                      // 2998
                                                                                                                       // 2999
function jqLiteInheritedData(element, name, value) {                                                                   // 3000
  // if element is the document object work with the html element instead                                              // 3001
  // this makes $(document).scope() possible                                                                           // 3002
  if (element.nodeType == NODE_TYPE_DOCUMENT) {                                                                        // 3003
    element = element.documentElement;                                                                                 // 3004
  }                                                                                                                    // 3005
  var names = isArray(name) ? name : [name];                                                                           // 3006
                                                                                                                       // 3007
  while (element) {                                                                                                    // 3008
    for (var i = 0, ii = names.length; i < ii; i++) {                                                                  // 3009
      if (isDefined(value = jqLite.data(element, names[i]))) return value;                                             // 3010
    }                                                                                                                  // 3011
                                                                                                                       // 3012
    // If dealing with a document fragment node with a host element, and no parent, use the host                       // 3013
    // element as the parent. This enables directives within a Shadow DOM or polyfilled Shadow DOM                     // 3014
    // to lookup parent controllers.                                                                                   // 3015
    element = element.parentNode || (element.nodeType === NODE_TYPE_DOCUMENT_FRAGMENT && element.host);                // 3016
  }                                                                                                                    // 3017
}                                                                                                                      // 3018
                                                                                                                       // 3019
function jqLiteEmpty(element) {                                                                                        // 3020
  jqLiteDealoc(element, true);                                                                                         // 3021
  while (element.firstChild) {                                                                                         // 3022
    element.removeChild(element.firstChild);                                                                           // 3023
  }                                                                                                                    // 3024
}                                                                                                                      // 3025
                                                                                                                       // 3026
function jqLiteRemove(element, keepData) {                                                                             // 3027
  if (!keepData) jqLiteDealoc(element);                                                                                // 3028
  var parent = element.parentNode;                                                                                     // 3029
  if (parent) parent.removeChild(element);                                                                             // 3030
}                                                                                                                      // 3031
                                                                                                                       // 3032
                                                                                                                       // 3033
function jqLiteDocumentLoaded(action, win) {                                                                           // 3034
  win = win || window;                                                                                                 // 3035
  if (win.document.readyState === 'complete') {                                                                        // 3036
    // Force the action to be run async for consistent behaviour                                                       // 3037
    // from the action's point of view                                                                                 // 3038
    // i.e. it will definitely not be in a $apply                                                                      // 3039
    win.setTimeout(action);                                                                                            // 3040
  } else {                                                                                                             // 3041
    // No need to unbind this handler as load is only ever called once                                                 // 3042
    jqLite(win).on('load', action);                                                                                    // 3043
  }                                                                                                                    // 3044
}                                                                                                                      // 3045
                                                                                                                       // 3046
//////////////////////////////////////////                                                                             // 3047
// Functions which are declared directly.                                                                              // 3048
//////////////////////////////////////////                                                                             // 3049
var JQLitePrototype = JQLite.prototype = {                                                                             // 3050
  ready: function(fn) {                                                                                                // 3051
    var fired = false;                                                                                                 // 3052
                                                                                                                       // 3053
    function trigger() {                                                                                               // 3054
      if (fired) return;                                                                                               // 3055
      fired = true;                                                                                                    // 3056
      fn();                                                                                                            // 3057
    }                                                                                                                  // 3058
                                                                                                                       // 3059
    // check if document is already loaded                                                                             // 3060
    if (document.readyState === 'complete') {                                                                          // 3061
      setTimeout(trigger);                                                                                             // 3062
    } else {                                                                                                           // 3063
      this.on('DOMContentLoaded', trigger); // works for modern browsers and IE9                                       // 3064
      // we can not use jqLite since we are not done loading and jQuery could be loaded later.                         // 3065
      // jshint -W064                                                                                                  // 3066
      JQLite(window).on('load', trigger); // fallback to window.onload for others                                      // 3067
      // jshint +W064                                                                                                  // 3068
    }                                                                                                                  // 3069
  },                                                                                                                   // 3070
  toString: function() {                                                                                               // 3071
    var value = [];                                                                                                    // 3072
    forEach(this, function(e) { value.push('' + e);});                                                                 // 3073
    return '[' + value.join(', ') + ']';                                                                               // 3074
  },                                                                                                                   // 3075
                                                                                                                       // 3076
  eq: function(index) {                                                                                                // 3077
      return (index >= 0) ? jqLite(this[index]) : jqLite(this[this.length + index]);                                   // 3078
  },                                                                                                                   // 3079
                                                                                                                       // 3080
  length: 0,                                                                                                           // 3081
  push: push,                                                                                                          // 3082
  sort: [].sort,                                                                                                       // 3083
  splice: [].splice                                                                                                    // 3084
};                                                                                                                     // 3085
                                                                                                                       // 3086
//////////////////////////////////////////                                                                             // 3087
// Functions iterating getter/setters.                                                                                 // 3088
// these functions return self on setter and                                                                           // 3089
// value on get.                                                                                                       // 3090
//////////////////////////////////////////                                                                             // 3091
var BOOLEAN_ATTR = {};                                                                                                 // 3092
forEach('multiple,selected,checked,disabled,readOnly,required,open'.split(','), function(value) {                      // 3093
  BOOLEAN_ATTR[lowercase(value)] = value;                                                                              // 3094
});                                                                                                                    // 3095
var BOOLEAN_ELEMENTS = {};                                                                                             // 3096
forEach('input,select,option,textarea,button,form,details'.split(','), function(value) {                               // 3097
  BOOLEAN_ELEMENTS[value] = true;                                                                                      // 3098
});                                                                                                                    // 3099
var ALIASED_ATTR = {                                                                                                   // 3100
  'ngMinlength': 'minlength',                                                                                          // 3101
  'ngMaxlength': 'maxlength',                                                                                          // 3102
  'ngMin': 'min',                                                                                                      // 3103
  'ngMax': 'max',                                                                                                      // 3104
  'ngPattern': 'pattern'                                                                                               // 3105
};                                                                                                                     // 3106
                                                                                                                       // 3107
function getBooleanAttrName(element, name) {                                                                           // 3108
  // check dom last since we will most likely fail on name                                                             // 3109
  var booleanAttr = BOOLEAN_ATTR[name.toLowerCase()];                                                                  // 3110
                                                                                                                       // 3111
  // booleanAttr is here twice to minimize DOM access                                                                  // 3112
  return booleanAttr && BOOLEAN_ELEMENTS[nodeName_(element)] && booleanAttr;                                           // 3113
}                                                                                                                      // 3114
                                                                                                                       // 3115
function getAliasedAttrName(name) {                                                                                    // 3116
  return ALIASED_ATTR[name];                                                                                           // 3117
}                                                                                                                      // 3118
                                                                                                                       // 3119
forEach({                                                                                                              // 3120
  data: jqLiteData,                                                                                                    // 3121
  removeData: jqLiteRemoveData,                                                                                        // 3122
  hasData: jqLiteHasData                                                                                               // 3123
}, function(fn, name) {                                                                                                // 3124
  JQLite[name] = fn;                                                                                                   // 3125
});                                                                                                                    // 3126
                                                                                                                       // 3127
forEach({                                                                                                              // 3128
  data: jqLiteData,                                                                                                    // 3129
  inheritedData: jqLiteInheritedData,                                                                                  // 3130
                                                                                                                       // 3131
  scope: function(element) {                                                                                           // 3132
    // Can't use jqLiteData here directly so we stay compatible with jQuery!                                           // 3133
    return jqLite.data(element, '$scope') || jqLiteInheritedData(element.parentNode || element, ['$isolateScope', '$scope']);
  },                                                                                                                   // 3135
                                                                                                                       // 3136
  isolateScope: function(element) {                                                                                    // 3137
    // Can't use jqLiteData here directly so we stay compatible with jQuery!                                           // 3138
    return jqLite.data(element, '$isolateScope') || jqLite.data(element, '$isolateScopeNoTemplate');                   // 3139
  },                                                                                                                   // 3140
                                                                                                                       // 3141
  controller: jqLiteController,                                                                                        // 3142
                                                                                                                       // 3143
  injector: function(element) {                                                                                        // 3144
    return jqLiteInheritedData(element, '$injector');                                                                  // 3145
  },                                                                                                                   // 3146
                                                                                                                       // 3147
  removeAttr: function(element, name) {                                                                                // 3148
    element.removeAttribute(name);                                                                                     // 3149
  },                                                                                                                   // 3150
                                                                                                                       // 3151
  hasClass: jqLiteHasClass,                                                                                            // 3152
                                                                                                                       // 3153
  css: function(element, name, value) {                                                                                // 3154
    name = camelCase(name);                                                                                            // 3155
                                                                                                                       // 3156
    if (isDefined(value)) {                                                                                            // 3157
      element.style[name] = value;                                                                                     // 3158
    } else {                                                                                                           // 3159
      return element.style[name];                                                                                      // 3160
    }                                                                                                                  // 3161
  },                                                                                                                   // 3162
                                                                                                                       // 3163
  attr: function(element, name, value) {                                                                               // 3164
    var nodeType = element.nodeType;                                                                                   // 3165
    if (nodeType === NODE_TYPE_TEXT || nodeType === NODE_TYPE_ATTRIBUTE || nodeType === NODE_TYPE_COMMENT) {           // 3166
      return;                                                                                                          // 3167
    }                                                                                                                  // 3168
    var lowercasedName = lowercase(name);                                                                              // 3169
    if (BOOLEAN_ATTR[lowercasedName]) {                                                                                // 3170
      if (isDefined(value)) {                                                                                          // 3171
        if (!!value) {                                                                                                 // 3172
          element[name] = true;                                                                                        // 3173
          element.setAttribute(name, lowercasedName);                                                                  // 3174
        } else {                                                                                                       // 3175
          element[name] = false;                                                                                       // 3176
          element.removeAttribute(lowercasedName);                                                                     // 3177
        }                                                                                                              // 3178
      } else {                                                                                                         // 3179
        return (element[name] ||                                                                                       // 3180
                 (element.attributes.getNamedItem(name) || noop).specified)                                            // 3181
               ? lowercasedName                                                                                        // 3182
               : undefined;                                                                                            // 3183
      }                                                                                                                // 3184
    } else if (isDefined(value)) {                                                                                     // 3185
      element.setAttribute(name, value);                                                                               // 3186
    } else if (element.getAttribute) {                                                                                 // 3187
      // the extra argument "2" is to get the right thing for a.href in IE, see jQuery code                            // 3188
      // some elements (e.g. Document) don't have get attribute, so return undefined                                   // 3189
      var ret = element.getAttribute(name, 2);                                                                         // 3190
      // normalize non-existing attributes to undefined (as jQuery)                                                    // 3191
      return ret === null ? undefined : ret;                                                                           // 3192
    }                                                                                                                  // 3193
  },                                                                                                                   // 3194
                                                                                                                       // 3195
  prop: function(element, name, value) {                                                                               // 3196
    if (isDefined(value)) {                                                                                            // 3197
      element[name] = value;                                                                                           // 3198
    } else {                                                                                                           // 3199
      return element[name];                                                                                            // 3200
    }                                                                                                                  // 3201
  },                                                                                                                   // 3202
                                                                                                                       // 3203
  text: (function() {                                                                                                  // 3204
    getText.$dv = '';                                                                                                  // 3205
    return getText;                                                                                                    // 3206
                                                                                                                       // 3207
    function getText(element, value) {                                                                                 // 3208
      if (isUndefined(value)) {                                                                                        // 3209
        var nodeType = element.nodeType;                                                                               // 3210
        return (nodeType === NODE_TYPE_ELEMENT || nodeType === NODE_TYPE_TEXT) ? element.textContent : '';             // 3211
      }                                                                                                                // 3212
      element.textContent = value;                                                                                     // 3213
    }                                                                                                                  // 3214
  })(),                                                                                                                // 3215
                                                                                                                       // 3216
  val: function(element, value) {                                                                                      // 3217
    if (isUndefined(value)) {                                                                                          // 3218
      if (element.multiple && nodeName_(element) === 'select') {                                                       // 3219
        var result = [];                                                                                               // 3220
        forEach(element.options, function(option) {                                                                    // 3221
          if (option.selected) {                                                                                       // 3222
            result.push(option.value || option.text);                                                                  // 3223
          }                                                                                                            // 3224
        });                                                                                                            // 3225
        return result.length === 0 ? null : result;                                                                    // 3226
      }                                                                                                                // 3227
      return element.value;                                                                                            // 3228
    }                                                                                                                  // 3229
    element.value = value;                                                                                             // 3230
  },                                                                                                                   // 3231
                                                                                                                       // 3232
  html: function(element, value) {                                                                                     // 3233
    if (isUndefined(value)) {                                                                                          // 3234
      return element.innerHTML;                                                                                        // 3235
    }                                                                                                                  // 3236
    jqLiteDealoc(element, true);                                                                                       // 3237
    element.innerHTML = value;                                                                                         // 3238
  },                                                                                                                   // 3239
                                                                                                                       // 3240
  empty: jqLiteEmpty                                                                                                   // 3241
}, function(fn, name) {                                                                                                // 3242
  /**                                                                                                                  // 3243
   * Properties: writes return selection, reads return first value                                                     // 3244
   */                                                                                                                  // 3245
  JQLite.prototype[name] = function(arg1, arg2) {                                                                      // 3246
    var i, key;                                                                                                        // 3247
    var nodeCount = this.length;                                                                                       // 3248
                                                                                                                       // 3249
    // jqLiteHasClass has only two arguments, but is a getter-only fn, so we need to special-case it                   // 3250
    // in a way that survives minification.                                                                            // 3251
    // jqLiteEmpty takes no arguments but is a setter.                                                                 // 3252
    if (fn !== jqLiteEmpty &&                                                                                          // 3253
        (isUndefined((fn.length == 2 && (fn !== jqLiteHasClass && fn !== jqLiteController)) ? arg1 : arg2))) {         // 3254
      if (isObject(arg1)) {                                                                                            // 3255
                                                                                                                       // 3256
        // we are a write, but the object properties are the key/values                                                // 3257
        for (i = 0; i < nodeCount; i++) {                                                                              // 3258
          if (fn === jqLiteData) {                                                                                     // 3259
            // data() takes the whole object in jQuery                                                                 // 3260
            fn(this[i], arg1);                                                                                         // 3261
          } else {                                                                                                     // 3262
            for (key in arg1) {                                                                                        // 3263
              fn(this[i], key, arg1[key]);                                                                             // 3264
            }                                                                                                          // 3265
          }                                                                                                            // 3266
        }                                                                                                              // 3267
        // return self for chaining                                                                                    // 3268
        return this;                                                                                                   // 3269
      } else {                                                                                                         // 3270
        // we are a read, so read the first child.                                                                     // 3271
        // TODO: do we still need this?                                                                                // 3272
        var value = fn.$dv;                                                                                            // 3273
        // Only if we have $dv do we iterate over all, otherwise it is just the first element.                         // 3274
        var jj = (isUndefined(value)) ? Math.min(nodeCount, 1) : nodeCount;                                            // 3275
        for (var j = 0; j < jj; j++) {                                                                                 // 3276
          var nodeValue = fn(this[j], arg1, arg2);                                                                     // 3277
          value = value ? value + nodeValue : nodeValue;                                                               // 3278
        }                                                                                                              // 3279
        return value;                                                                                                  // 3280
      }                                                                                                                // 3281
    } else {                                                                                                           // 3282
      // we are a write, so apply to all children                                                                      // 3283
      for (i = 0; i < nodeCount; i++) {                                                                                // 3284
        fn(this[i], arg1, arg2);                                                                                       // 3285
      }                                                                                                                // 3286
      // return self for chaining                                                                                      // 3287
      return this;                                                                                                     // 3288
    }                                                                                                                  // 3289
  };                                                                                                                   // 3290
});                                                                                                                    // 3291
                                                                                                                       // 3292
function createEventHandler(element, events) {                                                                         // 3293
  var eventHandler = function(event, type) {                                                                           // 3294
    // jQuery specific api                                                                                             // 3295
    event.isDefaultPrevented = function() {                                                                            // 3296
      return event.defaultPrevented;                                                                                   // 3297
    };                                                                                                                 // 3298
                                                                                                                       // 3299
    var eventFns = events[type || event.type];                                                                         // 3300
    var eventFnsLength = eventFns ? eventFns.length : 0;                                                               // 3301
                                                                                                                       // 3302
    if (!eventFnsLength) return;                                                                                       // 3303
                                                                                                                       // 3304
    if (isUndefined(event.immediatePropagationStopped)) {                                                              // 3305
      var originalStopImmediatePropagation = event.stopImmediatePropagation;                                           // 3306
      event.stopImmediatePropagation = function() {                                                                    // 3307
        event.immediatePropagationStopped = true;                                                                      // 3308
                                                                                                                       // 3309
        if (event.stopPropagation) {                                                                                   // 3310
          event.stopPropagation();                                                                                     // 3311
        }                                                                                                              // 3312
                                                                                                                       // 3313
        if (originalStopImmediatePropagation) {                                                                        // 3314
          originalStopImmediatePropagation.call(event);                                                                // 3315
        }                                                                                                              // 3316
      };                                                                                                               // 3317
    }                                                                                                                  // 3318
                                                                                                                       // 3319
    event.isImmediatePropagationStopped = function() {                                                                 // 3320
      return event.immediatePropagationStopped === true;                                                               // 3321
    };                                                                                                                 // 3322
                                                                                                                       // 3323
    // Some events have special handlers that wrap the real handler                                                    // 3324
    var handlerWrapper = eventFns.specialHandlerWrapper || defaultHandlerWrapper;                                      // 3325
                                                                                                                       // 3326
    // Copy event handlers in case event handlers array is modified during execution.                                  // 3327
    if ((eventFnsLength > 1)) {                                                                                        // 3328
      eventFns = shallowCopy(eventFns);                                                                                // 3329
    }                                                                                                                  // 3330
                                                                                                                       // 3331
    for (var i = 0; i < eventFnsLength; i++) {                                                                         // 3332
      if (!event.isImmediatePropagationStopped()) {                                                                    // 3333
        handlerWrapper(element, event, eventFns[i]);                                                                   // 3334
      }                                                                                                                // 3335
    }                                                                                                                  // 3336
  };                                                                                                                   // 3337
                                                                                                                       // 3338
  // TODO: this is a hack for angularMocks/clearDataCache that makes it possible to deregister all                     // 3339
  //       events on `element`                                                                                         // 3340
  eventHandler.elem = element;                                                                                         // 3341
  return eventHandler;                                                                                                 // 3342
}                                                                                                                      // 3343
                                                                                                                       // 3344
function defaultHandlerWrapper(element, event, handler) {                                                              // 3345
  handler.call(element, event);                                                                                        // 3346
}                                                                                                                      // 3347
                                                                                                                       // 3348
function specialMouseHandlerWrapper(target, event, handler) {                                                          // 3349
  // Refer to jQuery's implementation of mouseenter & mouseleave                                                       // 3350
  // Read about mouseenter and mouseleave:                                                                             // 3351
  // http://www.quirksmode.org/js/events_mouse.html#link8                                                              // 3352
  var related = event.relatedTarget;                                                                                   // 3353
  // For mousenter/leave call the handler if related is outside the target.                                            // 3354
  // NB: No relatedTarget if the mouse left/entered the browser window                                                 // 3355
  if (!related || (related !== target && !jqLiteContains.call(target, related))) {                                     // 3356
    handler.call(target, event);                                                                                       // 3357
  }                                                                                                                    // 3358
}                                                                                                                      // 3359
                                                                                                                       // 3360
//////////////////////////////////////////                                                                             // 3361
// Functions iterating traversal.                                                                                      // 3362
// These functions chain results into a single                                                                         // 3363
// selector.                                                                                                           // 3364
//////////////////////////////////////////                                                                             // 3365
forEach({                                                                                                              // 3366
  removeData: jqLiteRemoveData,                                                                                        // 3367
                                                                                                                       // 3368
  on: function jqLiteOn(element, type, fn, unsupported) {                                                              // 3369
    if (isDefined(unsupported)) throw jqLiteMinErr('onargs', 'jqLite#on() does not support the `selector` or `eventData` parameters');
                                                                                                                       // 3371
    // Do not add event handlers to non-elements because they will not be cleaned up.                                  // 3372
    if (!jqLiteAcceptsData(element)) {                                                                                 // 3373
      return;                                                                                                          // 3374
    }                                                                                                                  // 3375
                                                                                                                       // 3376
    var expandoStore = jqLiteExpandoStore(element, true);                                                              // 3377
    var events = expandoStore.events;                                                                                  // 3378
    var handle = expandoStore.handle;                                                                                  // 3379
                                                                                                                       // 3380
    if (!handle) {                                                                                                     // 3381
      handle = expandoStore.handle = createEventHandler(element, events);                                              // 3382
    }                                                                                                                  // 3383
                                                                                                                       // 3384
    // http://jsperf.com/string-indexof-vs-split                                                                       // 3385
    var types = type.indexOf(' ') >= 0 ? type.split(' ') : [type];                                                     // 3386
    var i = types.length;                                                                                              // 3387
                                                                                                                       // 3388
    var addHandler = function(type, specialHandlerWrapper, noEventListener) {                                          // 3389
      var eventFns = events[type];                                                                                     // 3390
                                                                                                                       // 3391
      if (!eventFns) {                                                                                                 // 3392
        eventFns = events[type] = [];                                                                                  // 3393
        eventFns.specialHandlerWrapper = specialHandlerWrapper;                                                        // 3394
        if (type !== '$destroy' && !noEventListener) {                                                                 // 3395
          addEventListenerFn(element, type, handle);                                                                   // 3396
        }                                                                                                              // 3397
      }                                                                                                                // 3398
                                                                                                                       // 3399
      eventFns.push(fn);                                                                                               // 3400
    };                                                                                                                 // 3401
                                                                                                                       // 3402
    while (i--) {                                                                                                      // 3403
      type = types[i];                                                                                                 // 3404
      if (MOUSE_EVENT_MAP[type]) {                                                                                     // 3405
        addHandler(MOUSE_EVENT_MAP[type], specialMouseHandlerWrapper);                                                 // 3406
        addHandler(type, undefined, true);                                                                             // 3407
      } else {                                                                                                         // 3408
        addHandler(type);                                                                                              // 3409
      }                                                                                                                // 3410
    }                                                                                                                  // 3411
  },                                                                                                                   // 3412
                                                                                                                       // 3413
  off: jqLiteOff,                                                                                                      // 3414
                                                                                                                       // 3415
  one: function(element, type, fn) {                                                                                   // 3416
    element = jqLite(element);                                                                                         // 3417
                                                                                                                       // 3418
    //add the listener twice so that when it is called                                                                 // 3419
    //you can remove the original function and still be                                                                // 3420
    //able to call element.off(ev, fn) normally                                                                        // 3421
    element.on(type, function onFn() {                                                                                 // 3422
      element.off(type, fn);                                                                                           // 3423
      element.off(type, onFn);                                                                                         // 3424
    });                                                                                                                // 3425
    element.on(type, fn);                                                                                              // 3426
  },                                                                                                                   // 3427
                                                                                                                       // 3428
  replaceWith: function(element, replaceNode) {                                                                        // 3429
    var index, parent = element.parentNode;                                                                            // 3430
    jqLiteDealoc(element);                                                                                             // 3431
    forEach(new JQLite(replaceNode), function(node) {                                                                  // 3432
      if (index) {                                                                                                     // 3433
        parent.insertBefore(node, index.nextSibling);                                                                  // 3434
      } else {                                                                                                         // 3435
        parent.replaceChild(node, element);                                                                            // 3436
      }                                                                                                                // 3437
      index = node;                                                                                                    // 3438
    });                                                                                                                // 3439
  },                                                                                                                   // 3440
                                                                                                                       // 3441
  children: function(element) {                                                                                        // 3442
    var children = [];                                                                                                 // 3443
    forEach(element.childNodes, function(element) {                                                                    // 3444
      if (element.nodeType === NODE_TYPE_ELEMENT) {                                                                    // 3445
        children.push(element);                                                                                        // 3446
      }                                                                                                                // 3447
    });                                                                                                                // 3448
    return children;                                                                                                   // 3449
  },                                                                                                                   // 3450
                                                                                                                       // 3451
  contents: function(element) {                                                                                        // 3452
    return element.contentDocument || element.childNodes || [];                                                        // 3453
  },                                                                                                                   // 3454
                                                                                                                       // 3455
  append: function(element, node) {                                                                                    // 3456
    var nodeType = element.nodeType;                                                                                   // 3457
    if (nodeType !== NODE_TYPE_ELEMENT && nodeType !== NODE_TYPE_DOCUMENT_FRAGMENT) return;                            // 3458
                                                                                                                       // 3459
    node = new JQLite(node);                                                                                           // 3460
                                                                                                                       // 3461
    for (var i = 0, ii = node.length; i < ii; i++) {                                                                   // 3462
      var child = node[i];                                                                                             // 3463
      element.appendChild(child);                                                                                      // 3464
    }                                                                                                                  // 3465
  },                                                                                                                   // 3466
                                                                                                                       // 3467
  prepend: function(element, node) {                                                                                   // 3468
    if (element.nodeType === NODE_TYPE_ELEMENT) {                                                                      // 3469
      var index = element.firstChild;                                                                                  // 3470
      forEach(new JQLite(node), function(child) {                                                                      // 3471
        element.insertBefore(child, index);                                                                            // 3472
      });                                                                                                              // 3473
    }                                                                                                                  // 3474
  },                                                                                                                   // 3475
                                                                                                                       // 3476
  wrap: function(element, wrapNode) {                                                                                  // 3477
    wrapNode = jqLite(wrapNode).eq(0).clone()[0];                                                                      // 3478
    var parent = element.parentNode;                                                                                   // 3479
    if (parent) {                                                                                                      // 3480
      parent.replaceChild(wrapNode, element);                                                                          // 3481
    }                                                                                                                  // 3482
    wrapNode.appendChild(element);                                                                                     // 3483
  },                                                                                                                   // 3484
                                                                                                                       // 3485
  remove: jqLiteRemove,                                                                                                // 3486
                                                                                                                       // 3487
  detach: function(element) {                                                                                          // 3488
    jqLiteRemove(element, true);                                                                                       // 3489
  },                                                                                                                   // 3490
                                                                                                                       // 3491
  after: function(element, newElement) {                                                                               // 3492
    var index = element, parent = element.parentNode;                                                                  // 3493
    newElement = new JQLite(newElement);                                                                               // 3494
                                                                                                                       // 3495
    for (var i = 0, ii = newElement.length; i < ii; i++) {                                                             // 3496
      var node = newElement[i];                                                                                        // 3497
      parent.insertBefore(node, index.nextSibling);                                                                    // 3498
      index = node;                                                                                                    // 3499
    }                                                                                                                  // 3500
  },                                                                                                                   // 3501
                                                                                                                       // 3502
  addClass: jqLiteAddClass,                                                                                            // 3503
  removeClass: jqLiteRemoveClass,                                                                                      // 3504
                                                                                                                       // 3505
  toggleClass: function(element, selector, condition) {                                                                // 3506
    if (selector) {                                                                                                    // 3507
      forEach(selector.split(' '), function(className) {                                                               // 3508
        var classCondition = condition;                                                                                // 3509
        if (isUndefined(classCondition)) {                                                                             // 3510
          classCondition = !jqLiteHasClass(element, className);                                                        // 3511
        }                                                                                                              // 3512
        (classCondition ? jqLiteAddClass : jqLiteRemoveClass)(element, className);                                     // 3513
      });                                                                                                              // 3514
    }                                                                                                                  // 3515
  },                                                                                                                   // 3516
                                                                                                                       // 3517
  parent: function(element) {                                                                                          // 3518
    var parent = element.parentNode;                                                                                   // 3519
    return parent && parent.nodeType !== NODE_TYPE_DOCUMENT_FRAGMENT ? parent : null;                                  // 3520
  },                                                                                                                   // 3521
                                                                                                                       // 3522
  next: function(element) {                                                                                            // 3523
    return element.nextElementSibling;                                                                                 // 3524
  },                                                                                                                   // 3525
                                                                                                                       // 3526
  find: function(element, selector) {                                                                                  // 3527
    if (element.getElementsByTagName) {                                                                                // 3528
      return element.getElementsByTagName(selector);                                                                   // 3529
    } else {                                                                                                           // 3530
      return [];                                                                                                       // 3531
    }                                                                                                                  // 3532
  },                                                                                                                   // 3533
                                                                                                                       // 3534
  clone: jqLiteClone,                                                                                                  // 3535
                                                                                                                       // 3536
  triggerHandler: function(element, event, extraParameters) {                                                          // 3537
                                                                                                                       // 3538
    var dummyEvent, eventFnsCopy, handlerArgs;                                                                         // 3539
    var eventName = event.type || event;                                                                               // 3540
    var expandoStore = jqLiteExpandoStore(element);                                                                    // 3541
    var events = expandoStore && expandoStore.events;                                                                  // 3542
    var eventFns = events && events[eventName];                                                                        // 3543
                                                                                                                       // 3544
    if (eventFns) {                                                                                                    // 3545
      // Create a dummy event to pass to the handlers                                                                  // 3546
      dummyEvent = {                                                                                                   // 3547
        preventDefault: function() { this.defaultPrevented = true; },                                                  // 3548
        isDefaultPrevented: function() { return this.defaultPrevented === true; },                                     // 3549
        stopImmediatePropagation: function() { this.immediatePropagationStopped = true; },                             // 3550
        isImmediatePropagationStopped: function() { return this.immediatePropagationStopped === true; },               // 3551
        stopPropagation: noop,                                                                                         // 3552
        type: eventName,                                                                                               // 3553
        target: element                                                                                                // 3554
      };                                                                                                               // 3555
                                                                                                                       // 3556
      // If a custom event was provided then extend our dummy event with it                                            // 3557
      if (event.type) {                                                                                                // 3558
        dummyEvent = extend(dummyEvent, event);                                                                        // 3559
      }                                                                                                                // 3560
                                                                                                                       // 3561
      // Copy event handlers in case event handlers array is modified during execution.                                // 3562
      eventFnsCopy = shallowCopy(eventFns);                                                                            // 3563
      handlerArgs = extraParameters ? [dummyEvent].concat(extraParameters) : [dummyEvent];                             // 3564
                                                                                                                       // 3565
      forEach(eventFnsCopy, function(fn) {                                                                             // 3566
        if (!dummyEvent.isImmediatePropagationStopped()) {                                                             // 3567
          fn.apply(element, handlerArgs);                                                                              // 3568
        }                                                                                                              // 3569
      });                                                                                                              // 3570
    }                                                                                                                  // 3571
  }                                                                                                                    // 3572
}, function(fn, name) {                                                                                                // 3573
  /**                                                                                                                  // 3574
   * chaining functions                                                                                                // 3575
   */                                                                                                                  // 3576
  JQLite.prototype[name] = function(arg1, arg2, arg3) {                                                                // 3577
    var value;                                                                                                         // 3578
                                                                                                                       // 3579
    for (var i = 0, ii = this.length; i < ii; i++) {                                                                   // 3580
      if (isUndefined(value)) {                                                                                        // 3581
        value = fn(this[i], arg1, arg2, arg3);                                                                         // 3582
        if (isDefined(value)) {                                                                                        // 3583
          // any function which returns a value needs to be wrapped                                                    // 3584
          value = jqLite(value);                                                                                       // 3585
        }                                                                                                              // 3586
      } else {                                                                                                         // 3587
        jqLiteAddNodes(value, fn(this[i], arg1, arg2, arg3));                                                          // 3588
      }                                                                                                                // 3589
    }                                                                                                                  // 3590
    return isDefined(value) ? value : this;                                                                            // 3591
  };                                                                                                                   // 3592
                                                                                                                       // 3593
  // bind legacy bind/unbind to on/off                                                                                 // 3594
  JQLite.prototype.bind = JQLite.prototype.on;                                                                         // 3595
  JQLite.prototype.unbind = JQLite.prototype.off;                                                                      // 3596
});                                                                                                                    // 3597
                                                                                                                       // 3598
                                                                                                                       // 3599
// Provider for private $$jqLite service                                                                               // 3600
function $$jqLiteProvider() {                                                                                          // 3601
  this.$get = function $$jqLite() {                                                                                    // 3602
    return extend(JQLite, {                                                                                            // 3603
      hasClass: function(node, classes) {                                                                              // 3604
        if (node.attr) node = node[0];                                                                                 // 3605
        return jqLiteHasClass(node, classes);                                                                          // 3606
      },                                                                                                               // 3607
      addClass: function(node, classes) {                                                                              // 3608
        if (node.attr) node = node[0];                                                                                 // 3609
        return jqLiteAddClass(node, classes);                                                                          // 3610
      },                                                                                                               // 3611
      removeClass: function(node, classes) {                                                                           // 3612
        if (node.attr) node = node[0];                                                                                 // 3613
        return jqLiteRemoveClass(node, classes);                                                                       // 3614
      }                                                                                                                // 3615
    });                                                                                                                // 3616
  };                                                                                                                   // 3617
}                                                                                                                      // 3618
                                                                                                                       // 3619
/**                                                                                                                    // 3620
 * Computes a hash of an 'obj'.                                                                                        // 3621
 * Hash of a:                                                                                                          // 3622
 *  string is string                                                                                                   // 3623
 *  number is number as string                                                                                         // 3624
 *  object is either result of calling $$hashKey function on the object or uniquely generated id,                      // 3625
 *         that is also assigned to the $$hashKey property of the object.                                              // 3626
 *                                                                                                                     // 3627
 * @param obj                                                                                                          // 3628
 * @returns {string} hash string such that the same input will have the same hash string.                              // 3629
 *         The resulting string key is in 'type:hashKey' format.                                                       // 3630
 */                                                                                                                    // 3631
function hashKey(obj, nextUidFn) {                                                                                     // 3632
  var key = obj && obj.$$hashKey;                                                                                      // 3633
                                                                                                                       // 3634
  if (key) {                                                                                                           // 3635
    if (typeof key === 'function') {                                                                                   // 3636
      key = obj.$$hashKey();                                                                                           // 3637
    }                                                                                                                  // 3638
    return key;                                                                                                        // 3639
  }                                                                                                                    // 3640
                                                                                                                       // 3641
  var objType = typeof obj;                                                                                            // 3642
  if (objType == 'function' || (objType == 'object' && obj !== null)) {                                                // 3643
    key = obj.$$hashKey = objType + ':' + (nextUidFn || nextUid)();                                                    // 3644
  } else {                                                                                                             // 3645
    key = objType + ':' + obj;                                                                                         // 3646
  }                                                                                                                    // 3647
                                                                                                                       // 3648
  return key;                                                                                                          // 3649
}                                                                                                                      // 3650
                                                                                                                       // 3651
/**                                                                                                                    // 3652
 * HashMap which can use objects as keys                                                                               // 3653
 */                                                                                                                    // 3654
function HashMap(array, isolatedUid) {                                                                                 // 3655
  if (isolatedUid) {                                                                                                   // 3656
    var uid = 0;                                                                                                       // 3657
    this.nextUid = function() {                                                                                        // 3658
      return ++uid;                                                                                                    // 3659
    };                                                                                                                 // 3660
  }                                                                                                                    // 3661
  forEach(array, this.put, this);                                                                                      // 3662
}                                                                                                                      // 3663
HashMap.prototype = {                                                                                                  // 3664
  /**                                                                                                                  // 3665
   * Store key value pair                                                                                              // 3666
   * @param key key to store can be any type                                                                           // 3667
   * @param value value to store can be any type                                                                       // 3668
   */                                                                                                                  // 3669
  put: function(key, value) {                                                                                          // 3670
    this[hashKey(key, this.nextUid)] = value;                                                                          // 3671
  },                                                                                                                   // 3672
                                                                                                                       // 3673
  /**                                                                                                                  // 3674
   * @param key                                                                                                        // 3675
   * @returns {Object} the value for the key                                                                           // 3676
   */                                                                                                                  // 3677
  get: function(key) {                                                                                                 // 3678
    return this[hashKey(key, this.nextUid)];                                                                           // 3679
  },                                                                                                                   // 3680
                                                                                                                       // 3681
  /**                                                                                                                  // 3682
   * Remove the key/value pair                                                                                         // 3683
   * @param key                                                                                                        // 3684
   */                                                                                                                  // 3685
  remove: function(key) {                                                                                              // 3686
    var value = this[key = hashKey(key, this.nextUid)];                                                                // 3687
    delete this[key];                                                                                                  // 3688
    return value;                                                                                                      // 3689
  }                                                                                                                    // 3690
};                                                                                                                     // 3691
                                                                                                                       // 3692
var $$HashMapProvider = [function() {                                                                                  // 3693
  this.$get = [function() {                                                                                            // 3694
    return HashMap;                                                                                                    // 3695
  }];                                                                                                                  // 3696
}];                                                                                                                    // 3697
                                                                                                                       // 3698
/**                                                                                                                    // 3699
 * @ngdoc function                                                                                                     // 3700
 * @module ng                                                                                                          // 3701
 * @name angular.injector                                                                                              // 3702
 * @kind function                                                                                                      // 3703
 *                                                                                                                     // 3704
 * @description                                                                                                        // 3705
 * Creates an injector object that can be used for retrieving services as well as for                                  // 3706
 * dependency injection (see {@link guide/di dependency injection}).                                                   // 3707
 *                                                                                                                     // 3708
 * @param {Array.<string|Function>} modules A list of module functions or their aliases. See                           // 3709
 *     {@link angular.module}. The `ng` module must be explicitly added.                                               // 3710
 * @param {boolean=} [strictDi=false] Whether the injector should be in strict mode, which                             // 3711
 *     disallows argument name annotation inference.                                                                   // 3712
 * @returns {injector} Injector object. See {@link auto.$injector $injector}.                                          // 3713
 *                                                                                                                     // 3714
 * @example                                                                                                            // 3715
 * Typical usage                                                                                                       // 3716
 * ```js                                                                                                               // 3717
 *   // create an injector                                                                                             // 3718
 *   var $injector = angular.injector(['ng']);                                                                         // 3719
 *                                                                                                                     // 3720
 *   // use the injector to kick off your application                                                                  // 3721
 *   // use the type inference to auto inject arguments, or use implicit injection                                     // 3722
 *   $injector.invoke(function($rootScope, $compile, $document) {                                                      // 3723
 *     $compile($document)($rootScope);                                                                                // 3724
 *     $rootScope.$digest();                                                                                           // 3725
 *   });                                                                                                               // 3726
 * ```                                                                                                                 // 3727
 *                                                                                                                     // 3728
 * Sometimes you want to get access to the injector of a currently running Angular app                                 // 3729
 * from outside Angular. Perhaps, you want to inject and compile some markup after the                                 // 3730
 * application has been bootstrapped. You can do this using the extra `injector()` added                               // 3731
 * to JQuery/jqLite elements. See {@link angular.element}.                                                             // 3732
 *                                                                                                                     // 3733
 * *This is fairly rare but could be the case if a third party library is injecting the                                // 3734
 * markup.*                                                                                                            // 3735
 *                                                                                                                     // 3736
 * In the following example a new block of HTML containing a `ng-controller`                                           // 3737
 * directive is added to the end of the document body by JQuery. We then compile and link                              // 3738
 * it into the current AngularJS scope.                                                                                // 3739
 *                                                                                                                     // 3740
 * ```js                                                                                                               // 3741
 * var $div = $('<div ng-controller="MyCtrl">{{content.label}}</div>');                                                // 3742
 * $(document.body).append($div);                                                                                      // 3743
 *                                                                                                                     // 3744
 * angular.element(document).injector().invoke(function($compile) {                                                    // 3745
 *   var scope = angular.element($div).scope();                                                                        // 3746
 *   $compile($div)(scope);                                                                                            // 3747
 * });                                                                                                                 // 3748
 * ```                                                                                                                 // 3749
 */                                                                                                                    // 3750
                                                                                                                       // 3751
                                                                                                                       // 3752
/**                                                                                                                    // 3753
 * @ngdoc module                                                                                                       // 3754
 * @name auto                                                                                                          // 3755
 * @description                                                                                                        // 3756
 *                                                                                                                     // 3757
 * Implicit module which gets automatically added to each {@link auto.$injector $injector}.                            // 3758
 */                                                                                                                    // 3759
                                                                                                                       // 3760
var FN_ARGS = /^[^\(]*\(\s*([^\)]*)\)/m;                                                                               // 3761
var FN_ARG_SPLIT = /,/;                                                                                                // 3762
var FN_ARG = /^\s*(_?)(\S+?)\1\s*$/;                                                                                   // 3763
var STRIP_COMMENTS = /((\/\/.*$)|(\/\*[\s\S]*?\*\/))/mg;                                                               // 3764
var $injectorMinErr = minErr('$injector');                                                                             // 3765
                                                                                                                       // 3766
function anonFn(fn) {                                                                                                  // 3767
  // For anonymous functions, showing at the very least the function signature can help in                             // 3768
  // debugging.                                                                                                        // 3769
  var fnText = fn.toString().replace(STRIP_COMMENTS, ''),                                                              // 3770
      args = fnText.match(FN_ARGS);                                                                                    // 3771
  if (args) {                                                                                                          // 3772
    return 'function(' + (args[1] || '').replace(/[\s\r\n]+/, ' ') + ')';                                              // 3773
  }                                                                                                                    // 3774
  return 'fn';                                                                                                         // 3775
}                                                                                                                      // 3776
                                                                                                                       // 3777
function annotate(fn, strictDi, name) {                                                                                // 3778
  var $inject,                                                                                                         // 3779
      fnText,                                                                                                          // 3780
      argDecl,                                                                                                         // 3781
      last;                                                                                                            // 3782
                                                                                                                       // 3783
  if (typeof fn === 'function') {                                                                                      // 3784
    if (!($inject = fn.$inject)) {                                                                                     // 3785
      $inject = [];                                                                                                    // 3786
      if (fn.length) {                                                                                                 // 3787
        if (strictDi) {                                                                                                // 3788
          if (!isString(name) || !name) {                                                                              // 3789
            name = fn.name || anonFn(fn);                                                                              // 3790
          }                                                                                                            // 3791
          throw $injectorMinErr('strictdi',                                                                            // 3792
            '{0} is not using explicit annotation and cannot be invoked in strict mode', name);                        // 3793
        }                                                                                                              // 3794
        fnText = fn.toString().replace(STRIP_COMMENTS, '');                                                            // 3795
        argDecl = fnText.match(FN_ARGS);                                                                               // 3796
        forEach(argDecl[1].split(FN_ARG_SPLIT), function(arg) {                                                        // 3797
          arg.replace(FN_ARG, function(all, underscore, name) {                                                        // 3798
            $inject.push(name);                                                                                        // 3799
          });                                                                                                          // 3800
        });                                                                                                            // 3801
      }                                                                                                                // 3802
      fn.$inject = $inject;                                                                                            // 3803
    }                                                                                                                  // 3804
  } else if (isArray(fn)) {                                                                                            // 3805
    last = fn.length - 1;                                                                                              // 3806
    assertArgFn(fn[last], 'fn');                                                                                       // 3807
    $inject = fn.slice(0, last);                                                                                       // 3808
  } else {                                                                                                             // 3809
    assertArgFn(fn, 'fn', true);                                                                                       // 3810
  }                                                                                                                    // 3811
  return $inject;                                                                                                      // 3812
}                                                                                                                      // 3813
                                                                                                                       // 3814
///////////////////////////////////////                                                                                // 3815
                                                                                                                       // 3816
/**                                                                                                                    // 3817
 * @ngdoc service                                                                                                      // 3818
 * @name $injector                                                                                                     // 3819
 *                                                                                                                     // 3820
 * @description                                                                                                        // 3821
 *                                                                                                                     // 3822
 * `$injector` is used to retrieve object instances as defined by                                                      // 3823
 * {@link auto.$provide provider}, instantiate types, invoke methods,                                                  // 3824
 * and load modules.                                                                                                   // 3825
 *                                                                                                                     // 3826
 * The following always holds true:                                                                                    // 3827
 *                                                                                                                     // 3828
 * ```js                                                                                                               // 3829
 *   var $injector = angular.injector();                                                                               // 3830
 *   expect($injector.get('$injector')).toBe($injector);                                                               // 3831
 *   expect($injector.invoke(function($injector) {                                                                     // 3832
 *     return $injector;                                                                                               // 3833
 *   })).toBe($injector);                                                                                              // 3834
 * ```                                                                                                                 // 3835
 *                                                                                                                     // 3836
 * # Injection Function Annotation                                                                                     // 3837
 *                                                                                                                     // 3838
 * JavaScript does not have annotations, and annotations are needed for dependency injection. The                      // 3839
 * following are all valid ways of annotating function with injection arguments and are equivalent.                    // 3840
 *                                                                                                                     // 3841
 * ```js                                                                                                               // 3842
 *   // inferred (only works if code not minified/obfuscated)                                                          // 3843
 *   $injector.invoke(function(serviceA){});                                                                           // 3844
 *                                                                                                                     // 3845
 *   // annotated                                                                                                      // 3846
 *   function explicit(serviceA) {};                                                                                   // 3847
 *   explicit.$inject = ['serviceA'];                                                                                  // 3848
 *   $injector.invoke(explicit);                                                                                       // 3849
 *                                                                                                                     // 3850
 *   // inline                                                                                                         // 3851
 *   $injector.invoke(['serviceA', function(serviceA){}]);                                                             // 3852
 * ```                                                                                                                 // 3853
 *                                                                                                                     // 3854
 * ## Inference                                                                                                        // 3855
 *                                                                                                                     // 3856
 * In JavaScript calling `toString()` on a function returns the function definition. The definition                    // 3857
 * can then be parsed and the function arguments can be extracted. This method of discovering                          // 3858
 * annotations is disallowed when the injector is in strict mode.                                                      // 3859
 * *NOTE:* This does not work with minification, and obfuscation tools since these tools change the                    // 3860
 * argument names.                                                                                                     // 3861
 *                                                                                                                     // 3862
 * ## `$inject` Annotation                                                                                             // 3863
 * By adding an `$inject` property onto a function the injection parameters can be specified.                          // 3864
 *                                                                                                                     // 3865
 * ## Inline                                                                                                           // 3866
 * As an array of injection names, where the last item in the array is the function to call.                           // 3867
 */                                                                                                                    // 3868
                                                                                                                       // 3869
/**                                                                                                                    // 3870
 * @ngdoc method                                                                                                       // 3871
 * @name $injector#get                                                                                                 // 3872
 *                                                                                                                     // 3873
 * @description                                                                                                        // 3874
 * Return an instance of the service.                                                                                  // 3875
 *                                                                                                                     // 3876
 * @param {string} name The name of the instance to retrieve.                                                          // 3877
 * @param {string=} caller An optional string to provide the origin of the function call for error messages.           // 3878
 * @return {*} The instance.                                                                                           // 3879
 */                                                                                                                    // 3880
                                                                                                                       // 3881
/**                                                                                                                    // 3882
 * @ngdoc method                                                                                                       // 3883
 * @name $injector#invoke                                                                                              // 3884
 *                                                                                                                     // 3885
 * @description                                                                                                        // 3886
 * Invoke the method and supply the method arguments from the `$injector`.                                             // 3887
 *                                                                                                                     // 3888
 * @param {Function|Array.<string|Function>} fn The injectable function to invoke. Function parameters are             // 3889
 *   injected according to the {@link guide/di $inject Annotation} rules.                                              // 3890
 * @param {Object=} self The `this` for the invoked method.                                                            // 3891
 * @param {Object=} locals Optional object. If preset then any argument names are read from this                       // 3892
 *                         object first, before the `$injector` is consulted.                                          // 3893
 * @returns {*} the value returned by the invoked `fn` function.                                                       // 3894
 */                                                                                                                    // 3895
                                                                                                                       // 3896
/**                                                                                                                    // 3897
 * @ngdoc method                                                                                                       // 3898
 * @name $injector#has                                                                                                 // 3899
 *                                                                                                                     // 3900
 * @description                                                                                                        // 3901
 * Allows the user to query if the particular service exists.                                                          // 3902
 *                                                                                                                     // 3903
 * @param {string} name Name of the service to query.                                                                  // 3904
 * @returns {boolean} `true` if injector has given service.                                                            // 3905
 */                                                                                                                    // 3906
                                                                                                                       // 3907
/**                                                                                                                    // 3908
 * @ngdoc method                                                                                                       // 3909
 * @name $injector#instantiate                                                                                         // 3910
 * @description                                                                                                        // 3911
 * Create a new instance of JS type. The method takes a constructor function, invokes the new                          // 3912
 * operator, and supplies all of the arguments to the constructor function as specified by the                         // 3913
 * constructor annotation.                                                                                             // 3914
 *                                                                                                                     // 3915
 * @param {Function} Type Annotated constructor function.                                                              // 3916
 * @param {Object=} locals Optional object. If preset then any argument names are read from this                       // 3917
 * object first, before the `$injector` is consulted.                                                                  // 3918
 * @returns {Object} new instance of `Type`.                                                                           // 3919
 */                                                                                                                    // 3920
                                                                                                                       // 3921
/**                                                                                                                    // 3922
 * @ngdoc method                                                                                                       // 3923
 * @name $injector#annotate                                                                                            // 3924
 *                                                                                                                     // 3925
 * @description                                                                                                        // 3926
 * Returns an array of service names which the function is requesting for injection. This API is                       // 3927
 * used by the injector to determine which services need to be injected into the function when the                     // 3928
 * function is invoked. There are three ways in which the function can be annotated with the needed                    // 3929
 * dependencies.                                                                                                       // 3930
 *                                                                                                                     // 3931
 * # Argument names                                                                                                    // 3932
 *                                                                                                                     // 3933
 * The simplest form is to extract the dependencies from the arguments of the function. This is done                   // 3934
 * by converting the function into a string using `toString()` method and extracting the argument                      // 3935
 * names.                                                                                                              // 3936
 * ```js                                                                                                               // 3937
 *   // Given                                                                                                          // 3938
 *   function MyController($scope, $route) {                                                                           // 3939
 *     // ...                                                                                                          // 3940
 *   }                                                                                                                 // 3941
 *                                                                                                                     // 3942
 *   // Then                                                                                                           // 3943
 *   expect(injector.annotate(MyController)).toEqual(['$scope', '$route']);                                            // 3944
 * ```                                                                                                                 // 3945
 *                                                                                                                     // 3946
 * You can disallow this method by using strict injection mode.                                                        // 3947
 *                                                                                                                     // 3948
 * This method does not work with code minification / obfuscation. For this reason the following                       // 3949
 * annotation strategies are supported.                                                                                // 3950
 *                                                                                                                     // 3951
 * # The `$inject` property                                                                                            // 3952
 *                                                                                                                     // 3953
 * If a function has an `$inject` property and its value is an array of strings, then the strings                      // 3954
 * represent names of services to be injected into the function.                                                       // 3955
 * ```js                                                                                                               // 3956
 *   // Given                                                                                                          // 3957
 *   var MyController = function(obfuscatedScope, obfuscatedRoute) {                                                   // 3958
 *     // ...                                                                                                          // 3959
 *   }                                                                                                                 // 3960
 *   // Define function dependencies                                                                                   // 3961
 *   MyController['$inject'] = ['$scope', '$route'];                                                                   // 3962
 *                                                                                                                     // 3963
 *   // Then                                                                                                           // 3964
 *   expect(injector.annotate(MyController)).toEqual(['$scope', '$route']);                                            // 3965
 * ```                                                                                                                 // 3966
 *                                                                                                                     // 3967
 * # The array notation                                                                                                // 3968
 *                                                                                                                     // 3969
 * It is often desirable to inline Injected functions and that's when setting the `$inject` property                   // 3970
 * is very inconvenient. In these situations using the array notation to specify the dependencies in                   // 3971
 * a way that survives minification is a better choice:                                                                // 3972
 *                                                                                                                     // 3973
 * ```js                                                                                                               // 3974
 *   // We wish to write this (not minification / obfuscation safe)                                                    // 3975
 *   injector.invoke(function($compile, $rootScope) {                                                                  // 3976
 *     // ...                                                                                                          // 3977
 *   });                                                                                                               // 3978
 *                                                                                                                     // 3979
 *   // We are forced to write break inlining                                                                          // 3980
 *   var tmpFn = function(obfuscatedCompile, obfuscatedRootScope) {                                                    // 3981
 *     // ...                                                                                                          // 3982
 *   };                                                                                                                // 3983
 *   tmpFn.$inject = ['$compile', '$rootScope'];                                                                       // 3984
 *   injector.invoke(tmpFn);                                                                                           // 3985
 *                                                                                                                     // 3986
 *   // To better support inline function the inline annotation is supported                                           // 3987
 *   injector.invoke(['$compile', '$rootScope', function(obfCompile, obfRootScope) {                                   // 3988
 *     // ...                                                                                                          // 3989
 *   }]);                                                                                                              // 3990
 *                                                                                                                     // 3991
 *   // Therefore                                                                                                      // 3992
 *   expect(injector.annotate(                                                                                         // 3993
 *      ['$compile', '$rootScope', function(obfus_$compile, obfus_$rootScope) {}])                                     // 3994
 *    ).toEqual(['$compile', '$rootScope']);                                                                           // 3995
 * ```                                                                                                                 // 3996
 *                                                                                                                     // 3997
 * @param {Function|Array.<string|Function>} fn Function for which dependent service names need to                     // 3998
 * be retrieved as described above.                                                                                    // 3999
 *                                                                                                                     // 4000
 * @param {boolean=} [strictDi=false] Disallow argument name annotation inference.                                     // 4001
 *                                                                                                                     // 4002
 * @returns {Array.<string>} The names of the services which the function requires.                                    // 4003
 */                                                                                                                    // 4004
                                                                                                                       // 4005
                                                                                                                       // 4006
                                                                                                                       // 4007
                                                                                                                       // 4008
/**                                                                                                                    // 4009
 * @ngdoc service                                                                                                      // 4010
 * @name $provide                                                                                                      // 4011
 *                                                                                                                     // 4012
 * @description                                                                                                        // 4013
 *                                                                                                                     // 4014
 * The {@link auto.$provide $provide} service has a number of methods for registering components                       // 4015
 * with the {@link auto.$injector $injector}. Many of these functions are also exposed on                              // 4016
 * {@link angular.Module}.                                                                                             // 4017
 *                                                                                                                     // 4018
 * An Angular **service** is a singleton object created by a **service factory**.  These **service                     // 4019
 * factories** are functions which, in turn, are created by a **service provider**.                                    // 4020
 * The **service providers** are constructor functions. When instantiated they must contain a                          // 4021
 * property called `$get`, which holds the **service factory** function.                                               // 4022
 *                                                                                                                     // 4023
 * When you request a service, the {@link auto.$injector $injector} is responsible for finding the                     // 4024
 * correct **service provider**, instantiating it and then calling its `$get` **service factory**                      // 4025
 * function to get the instance of the **service**.                                                                    // 4026
 *                                                                                                                     // 4027
 * Often services have no configuration options and there is no need to add methods to the service                     // 4028
 * provider.  The provider will be no more than a constructor function with a `$get` property. For                     // 4029
 * these cases the {@link auto.$provide $provide} service has additional helper methods to register                    // 4030
 * services without specifying a provider.                                                                             // 4031
 *                                                                                                                     // 4032
 * * {@link auto.$provide#provider provider(provider)} - registers a **service provider** with the                     // 4033
 *     {@link auto.$injector $injector}                                                                                // 4034
 * * {@link auto.$provide#constant constant(obj)} - registers a value/object that can be accessed by                   // 4035
 *     providers and services.                                                                                         // 4036
 * * {@link auto.$provide#value value(obj)} - registers a value/object that can only be accessed by                    // 4037
 *     services, not providers.                                                                                        // 4038
 * * {@link auto.$provide#factory factory(fn)} - registers a service **factory function**, `fn`,                       // 4039
 *     that will be wrapped in a **service provider** object, whose `$get` property will contain the                   // 4040
 *     given factory function.                                                                                         // 4041
 * * {@link auto.$provide#service service(class)} - registers a **constructor function**, `class`                      // 4042
 *     that will be wrapped in a **service provider** object, whose `$get` property will instantiate                   // 4043
 *      a new object using the given constructor function.                                                             // 4044
 *                                                                                                                     // 4045
 * See the individual methods for more information and examples.                                                       // 4046
 */                                                                                                                    // 4047
                                                                                                                       // 4048
/**                                                                                                                    // 4049
 * @ngdoc method                                                                                                       // 4050
 * @name $provide#provider                                                                                             // 4051
 * @description                                                                                                        // 4052
 *                                                                                                                     // 4053
 * Register a **provider function** with the {@link auto.$injector $injector}. Provider functions                      // 4054
 * are constructor functions, whose instances are responsible for "providing" a factory for a                          // 4055
 * service.                                                                                                            // 4056
 *                                                                                                                     // 4057
 * Service provider names start with the name of the service they provide followed by `Provider`.                      // 4058
 * For example, the {@link ng.$log $log} service has a provider called                                                 // 4059
 * {@link ng.$logProvider $logProvider}.                                                                               // 4060
 *                                                                                                                     // 4061
 * Service provider objects can have additional methods which allow configuration of the provider                      // 4062
 * and its service. Importantly, you can configure what kind of service is created by the `$get`                       // 4063
 * method, or how that service will act. For example, the {@link ng.$logProvider $logProvider} has a                   // 4064
 * method {@link ng.$logProvider#debugEnabled debugEnabled}                                                            // 4065
 * which lets you specify whether the {@link ng.$log $log} service will log debug messages to the                      // 4066
 * console or not.                                                                                                     // 4067
 *                                                                                                                     // 4068
 * @param {string} name The name of the instance. NOTE: the provider will be available under `name +                   // 4069
                        'Provider'` key.                                                                               // 4070
 * @param {(Object|function())} provider If the provider is:                                                           // 4071
 *                                                                                                                     // 4072
 *   - `Object`: then it should have a `$get` method. The `$get` method will be invoked using                          // 4073
 *     {@link auto.$injector#invoke $injector.invoke()} when an instance needs to be created.                          // 4074
 *   - `Constructor`: a new instance of the provider will be created using                                             // 4075
 *     {@link auto.$injector#instantiate $injector.instantiate()}, then treated as `object`.                           // 4076
 *                                                                                                                     // 4077
 * @returns {Object} registered provider instance                                                                      // 4078
                                                                                                                       // 4079
 * @example                                                                                                            // 4080
 *                                                                                                                     // 4081
 * The following example shows how to create a simple event tracking service and register it using                     // 4082
 * {@link auto.$provide#provider $provide.provider()}.                                                                 // 4083
 *                                                                                                                     // 4084
 * ```js                                                                                                               // 4085
 *  // Define the eventTracker provider                                                                                // 4086
 *  function EventTrackerProvider() {                                                                                  // 4087
 *    var trackingUrl = '/track';                                                                                      // 4088
 *                                                                                                                     // 4089
 *    // A provider method for configuring where the tracked events should been saved                                  // 4090
 *    this.setTrackingUrl = function(url) {                                                                            // 4091
 *      trackingUrl = url;                                                                                             // 4092
 *    };                                                                                                               // 4093
 *                                                                                                                     // 4094
 *    // The service factory function                                                                                  // 4095
 *    this.$get = ['$http', function($http) {                                                                          // 4096
 *      var trackedEvents = {};                                                                                        // 4097
 *      return {                                                                                                       // 4098
 *        // Call this to track an event                                                                               // 4099
 *        event: function(event) {                                                                                     // 4100
 *          var count = trackedEvents[event] || 0;                                                                     // 4101
 *          count += 1;                                                                                                // 4102
 *          trackedEvents[event] = count;                                                                              // 4103
 *          return count;                                                                                              // 4104
 *        },                                                                                                           // 4105
 *        // Call this to save the tracked events to the trackingUrl                                                   // 4106
 *        save: function() {                                                                                           // 4107
 *          $http.post(trackingUrl, trackedEvents);                                                                    // 4108
 *        }                                                                                                            // 4109
 *      };                                                                                                             // 4110
 *    }];                                                                                                              // 4111
 *  }                                                                                                                  // 4112
 *                                                                                                                     // 4113
 *  describe('eventTracker', function() {                                                                              // 4114
 *    var postSpy;                                                                                                     // 4115
 *                                                                                                                     // 4116
 *    beforeEach(module(function($provide) {                                                                           // 4117
 *      // Register the eventTracker provider                                                                          // 4118
 *      $provide.provider('eventTracker', EventTrackerProvider);                                                       // 4119
 *    }));                                                                                                             // 4120
 *                                                                                                                     // 4121
 *    beforeEach(module(function(eventTrackerProvider) {                                                               // 4122
 *      // Configure eventTracker provider                                                                             // 4123
 *      eventTrackerProvider.setTrackingUrl('/custom-track');                                                          // 4124
 *    }));                                                                                                             // 4125
 *                                                                                                                     // 4126
 *    it('tracks events', inject(function(eventTracker) {                                                              // 4127
 *      expect(eventTracker.event('login')).toEqual(1);                                                                // 4128
 *      expect(eventTracker.event('login')).toEqual(2);                                                                // 4129
 *    }));                                                                                                             // 4130
 *                                                                                                                     // 4131
 *    it('saves to the tracking url', inject(function(eventTracker, $http) {                                           // 4132
 *      postSpy = spyOn($http, 'post');                                                                                // 4133
 *      eventTracker.event('login');                                                                                   // 4134
 *      eventTracker.save();                                                                                           // 4135
 *      expect(postSpy).toHaveBeenCalled();                                                                            // 4136
 *      expect(postSpy.mostRecentCall.args[0]).not.toEqual('/track');                                                  // 4137
 *      expect(postSpy.mostRecentCall.args[0]).toEqual('/custom-track');                                               // 4138
 *      expect(postSpy.mostRecentCall.args[1]).toEqual({ 'login': 1 });                                                // 4139
 *    }));                                                                                                             // 4140
 *  });                                                                                                                // 4141
 * ```                                                                                                                 // 4142
 */                                                                                                                    // 4143
                                                                                                                       // 4144
/**                                                                                                                    // 4145
 * @ngdoc method                                                                                                       // 4146
 * @name $provide#factory                                                                                              // 4147
 * @description                                                                                                        // 4148
 *                                                                                                                     // 4149
 * Register a **service factory**, which will be called to return the service instance.                                // 4150
 * This is short for registering a service where its provider consists of only a `$get` property,                      // 4151
 * which is the given service factory function.                                                                        // 4152
 * You should use {@link auto.$provide#factory $provide.factory(getFn)} if you do not need to                          // 4153
 * configure your service in a provider.                                                                               // 4154
 *                                                                                                                     // 4155
 * @param {string} name The name of the instance.                                                                      // 4156
 * @param {Function|Array.<string|Function>} $getFn The injectable $getFn for the instance creation.                   // 4157
 *                      Internally this is a short hand for `$provide.provider(name, {$get: $getFn})`.                 // 4158
 * @returns {Object} registered provider instance                                                                      // 4159
 *                                                                                                                     // 4160
 * @example                                                                                                            // 4161
 * Here is an example of registering a service                                                                         // 4162
 * ```js                                                                                                               // 4163
 *   $provide.factory('ping', ['$http', function($http) {                                                              // 4164
 *     return function ping() {                                                                                        // 4165
 *       return $http.send('/ping');                                                                                   // 4166
 *     };                                                                                                              // 4167
 *   }]);                                                                                                              // 4168
 * ```                                                                                                                 // 4169
 * You would then inject and use this service like this:                                                               // 4170
 * ```js                                                                                                               // 4171
 *   someModule.controller('Ctrl', ['ping', function(ping) {                                                           // 4172
 *     ping();                                                                                                         // 4173
 *   }]);                                                                                                              // 4174
 * ```                                                                                                                 // 4175
 */                                                                                                                    // 4176
                                                                                                                       // 4177
                                                                                                                       // 4178
/**                                                                                                                    // 4179
 * @ngdoc method                                                                                                       // 4180
 * @name $provide#service                                                                                              // 4181
 * @description                                                                                                        // 4182
 *                                                                                                                     // 4183
 * Register a **service constructor**, which will be invoked with `new` to create the service                          // 4184
 * instance.                                                                                                           // 4185
 * This is short for registering a service where its provider's `$get` property is the service                         // 4186
 * constructor function that will be used to instantiate the service instance.                                         // 4187
 *                                                                                                                     // 4188
 * You should use {@link auto.$provide#service $provide.service(class)} if you define your service                     // 4189
 * as a type/class.                                                                                                    // 4190
 *                                                                                                                     // 4191
 * @param {string} name The name of the instance.                                                                      // 4192
 * @param {Function|Array.<string|Function>} constructor An injectable class (constructor function)                    // 4193
 *     that will be instantiated.                                                                                      // 4194
 * @returns {Object} registered provider instance                                                                      // 4195
 *                                                                                                                     // 4196
 * @example                                                                                                            // 4197
 * Here is an example of registering a service using                                                                   // 4198
 * {@link auto.$provide#service $provide.service(class)}.                                                              // 4199
 * ```js                                                                                                               // 4200
 *   var Ping = function($http) {                                                                                      // 4201
 *     this.$http = $http;                                                                                             // 4202
 *   };                                                                                                                // 4203
 *                                                                                                                     // 4204
 *   Ping.$inject = ['$http'];                                                                                         // 4205
 *                                                                                                                     // 4206
 *   Ping.prototype.send = function() {                                                                                // 4207
 *     return this.$http.get('/ping');                                                                                 // 4208
 *   };                                                                                                                // 4209
 *   $provide.service('ping', Ping);                                                                                   // 4210
 * ```                                                                                                                 // 4211
 * You would then inject and use this service like this:                                                               // 4212
 * ```js                                                                                                               // 4213
 *   someModule.controller('Ctrl', ['ping', function(ping) {                                                           // 4214
 *     ping.send();                                                                                                    // 4215
 *   }]);                                                                                                              // 4216
 * ```                                                                                                                 // 4217
 */                                                                                                                    // 4218
                                                                                                                       // 4219
                                                                                                                       // 4220
/**                                                                                                                    // 4221
 * @ngdoc method                                                                                                       // 4222
 * @name $provide#value                                                                                                // 4223
 * @description                                                                                                        // 4224
 *                                                                                                                     // 4225
 * Register a **value service** with the {@link auto.$injector $injector}, such as a string, a                         // 4226
 * number, an array, an object or a function.  This is short for registering a service where its                       // 4227
 * provider's `$get` property is a factory function that takes no arguments and returns the **value                    // 4228
 * service**.                                                                                                          // 4229
 *                                                                                                                     // 4230
 * Value services are similar to constant services, except that they cannot be injected into a                         // 4231
 * module configuration function (see {@link angular.Module#config}) but they can be overridden by                     // 4232
 * an Angular                                                                                                          // 4233
 * {@link auto.$provide#decorator decorator}.                                                                          // 4234
 *                                                                                                                     // 4235
 * @param {string} name The name of the instance.                                                                      // 4236
 * @param {*} value The value.                                                                                         // 4237
 * @returns {Object} registered provider instance                                                                      // 4238
 *                                                                                                                     // 4239
 * @example                                                                                                            // 4240
 * Here are some examples of creating value services.                                                                  // 4241
 * ```js                                                                                                               // 4242
 *   $provide.value('ADMIN_USER', 'admin');                                                                            // 4243
 *                                                                                                                     // 4244
 *   $provide.value('RoleLookup', { admin: 0, writer: 1, reader: 2 });                                                 // 4245
 *                                                                                                                     // 4246
 *   $provide.value('halfOf', function(value) {                                                                        // 4247
 *     return value / 2;                                                                                               // 4248
 *   });                                                                                                               // 4249
 * ```                                                                                                                 // 4250
 */                                                                                                                    // 4251
                                                                                                                       // 4252
                                                                                                                       // 4253
/**                                                                                                                    // 4254
 * @ngdoc method                                                                                                       // 4255
 * @name $provide#constant                                                                                             // 4256
 * @description                                                                                                        // 4257
 *                                                                                                                     // 4258
 * Register a **constant service**, such as a string, a number, an array, an object or a function,                     // 4259
 * with the {@link auto.$injector $injector}. Unlike {@link auto.$provide#value value} it can be                       // 4260
 * injected into a module configuration function (see {@link angular.Module#config}) and it cannot                     // 4261
 * be overridden by an Angular {@link auto.$provide#decorator decorator}.                                              // 4262
 *                                                                                                                     // 4263
 * @param {string} name The name of the constant.                                                                      // 4264
 * @param {*} value The constant value.                                                                                // 4265
 * @returns {Object} registered instance                                                                               // 4266
 *                                                                                                                     // 4267
 * @example                                                                                                            // 4268
 * Here a some examples of creating constants:                                                                         // 4269
 * ```js                                                                                                               // 4270
 *   $provide.constant('SHARD_HEIGHT', 306);                                                                           // 4271
 *                                                                                                                     // 4272
 *   $provide.constant('MY_COLOURS', ['red', 'blue', 'grey']);                                                         // 4273
 *                                                                                                                     // 4274
 *   $provide.constant('double', function(value) {                                                                     // 4275
 *     return value * 2;                                                                                               // 4276
 *   });                                                                                                               // 4277
 * ```                                                                                                                 // 4278
 */                                                                                                                    // 4279
                                                                                                                       // 4280
                                                                                                                       // 4281
/**                                                                                                                    // 4282
 * @ngdoc method                                                                                                       // 4283
 * @name $provide#decorator                                                                                            // 4284
 * @description                                                                                                        // 4285
 *                                                                                                                     // 4286
 * Register a **service decorator** with the {@link auto.$injector $injector}. A service decorator                     // 4287
 * intercepts the creation of a service, allowing it to override or modify the behaviour of the                        // 4288
 * service. The object returned by the decorator may be the original service, or a new service                         // 4289
 * object which replaces or wraps and delegates to the original service.                                               // 4290
 *                                                                                                                     // 4291
 * @param {string} name The name of the service to decorate.                                                           // 4292
 * @param {Function|Array.<string|Function>} decorator This function will be invoked when the service needs to be      // 4293
 *    instantiated and should return the decorated service instance. The function is called using                      // 4294
 *    the {@link auto.$injector#invoke injector.invoke} method and is therefore fully injectable.                      // 4295
 *    Local injection arguments:                                                                                       // 4296
 *                                                                                                                     // 4297
 *    * `$delegate` - The original service instance, which can be monkey patched, configured,                          // 4298
 *      decorated or delegated to.                                                                                     // 4299
 *                                                                                                                     // 4300
 * @example                                                                                                            // 4301
 * Here we decorate the {@link ng.$log $log} service to convert warnings to errors by intercepting                     // 4302
 * calls to {@link ng.$log#error $log.warn()}.                                                                         // 4303
 * ```js                                                                                                               // 4304
 *   $provide.decorator('$log', ['$delegate', function($delegate) {                                                    // 4305
 *     $delegate.warn = $delegate.error;                                                                               // 4306
 *     return $delegate;                                                                                               // 4307
 *   }]);                                                                                                              // 4308
 * ```                                                                                                                 // 4309
 */                                                                                                                    // 4310
                                                                                                                       // 4311
                                                                                                                       // 4312
function createInjector(modulesToLoad, strictDi) {                                                                     // 4313
  strictDi = (strictDi === true);                                                                                      // 4314
  var INSTANTIATING = {},                                                                                              // 4315
      providerSuffix = 'Provider',                                                                                     // 4316
      path = [],                                                                                                       // 4317
      loadedModules = new HashMap([], true),                                                                           // 4318
      providerCache = {                                                                                                // 4319
        $provide: {                                                                                                    // 4320
            provider: supportObject(provider),                                                                         // 4321
            factory: supportObject(factory),                                                                           // 4322
            service: supportObject(service),                                                                           // 4323
            value: supportObject(value),                                                                               // 4324
            constant: supportObject(constant),                                                                         // 4325
            decorator: decorator                                                                                       // 4326
          }                                                                                                            // 4327
      },                                                                                                               // 4328
      providerInjector = (providerCache.$injector =                                                                    // 4329
          createInternalInjector(providerCache, function(serviceName, caller) {                                        // 4330
            if (angular.isString(caller)) {                                                                            // 4331
              path.push(caller);                                                                                       // 4332
            }                                                                                                          // 4333
            throw $injectorMinErr('unpr', "Unknown provider: {0}", path.join(' <- '));                                 // 4334
          })),                                                                                                         // 4335
      instanceCache = {},                                                                                              // 4336
      instanceInjector = (instanceCache.$injector =                                                                    // 4337
          createInternalInjector(instanceCache, function(serviceName, caller) {                                        // 4338
            var provider = providerInjector.get(serviceName + providerSuffix, caller);                                 // 4339
            return instanceInjector.invoke(provider.$get, provider, undefined, serviceName);                           // 4340
          }));                                                                                                         // 4341
                                                                                                                       // 4342
                                                                                                                       // 4343
  forEach(loadModules(modulesToLoad), function(fn) { if (fn) instanceInjector.invoke(fn); });                          // 4344
                                                                                                                       // 4345
  return instanceInjector;                                                                                             // 4346
                                                                                                                       // 4347
  ////////////////////////////////////                                                                                 // 4348
  // $provider                                                                                                         // 4349
  ////////////////////////////////////                                                                                 // 4350
                                                                                                                       // 4351
  function supportObject(delegate) {                                                                                   // 4352
    return function(key, value) {                                                                                      // 4353
      if (isObject(key)) {                                                                                             // 4354
        forEach(key, reverseParams(delegate));                                                                         // 4355
      } else {                                                                                                         // 4356
        return delegate(key, value);                                                                                   // 4357
      }                                                                                                                // 4358
    };                                                                                                                 // 4359
  }                                                                                                                    // 4360
                                                                                                                       // 4361
  function provider(name, provider_) {                                                                                 // 4362
    assertNotHasOwnProperty(name, 'service');                                                                          // 4363
    if (isFunction(provider_) || isArray(provider_)) {                                                                 // 4364
      provider_ = providerInjector.instantiate(provider_);                                                             // 4365
    }                                                                                                                  // 4366
    if (!provider_.$get) {                                                                                             // 4367
      throw $injectorMinErr('pget', "Provider '{0}' must define $get factory method.", name);                          // 4368
    }                                                                                                                  // 4369
    return providerCache[name + providerSuffix] = provider_;                                                           // 4370
  }                                                                                                                    // 4371
                                                                                                                       // 4372
  function enforceReturnValue(name, factory) {                                                                         // 4373
    return function enforcedReturnValue() {                                                                            // 4374
      var result = instanceInjector.invoke(factory, this);                                                             // 4375
      if (isUndefined(result)) {                                                                                       // 4376
        throw $injectorMinErr('undef', "Provider '{0}' must return a value from $get factory method.", name);          // 4377
      }                                                                                                                // 4378
      return result;                                                                                                   // 4379
    };                                                                                                                 // 4380
  }                                                                                                                    // 4381
                                                                                                                       // 4382
  function factory(name, factoryFn, enforce) {                                                                         // 4383
    return provider(name, {                                                                                            // 4384
      $get: enforce !== false ? enforceReturnValue(name, factoryFn) : factoryFn                                        // 4385
    });                                                                                                                // 4386
  }                                                                                                                    // 4387
                                                                                                                       // 4388
  function service(name, constructor) {                                                                                // 4389
    return factory(name, ['$injector', function($injector) {                                                           // 4390
      return $injector.instantiate(constructor);                                                                       // 4391
    }]);                                                                                                               // 4392
  }                                                                                                                    // 4393
                                                                                                                       // 4394
  function value(name, val) { return factory(name, valueFn(val), false); }                                             // 4395
                                                                                                                       // 4396
  function constant(name, value) {                                                                                     // 4397
    assertNotHasOwnProperty(name, 'constant');                                                                         // 4398
    providerCache[name] = value;                                                                                       // 4399
    instanceCache[name] = value;                                                                                       // 4400
  }                                                                                                                    // 4401
                                                                                                                       // 4402
  function decorator(serviceName, decorFn) {                                                                           // 4403
    var origProvider = providerInjector.get(serviceName + providerSuffix),                                             // 4404
        orig$get = origProvider.$get;                                                                                  // 4405
                                                                                                                       // 4406
    origProvider.$get = function() {                                                                                   // 4407
      var origInstance = instanceInjector.invoke(orig$get, origProvider);                                              // 4408
      return instanceInjector.invoke(decorFn, null, {$delegate: origInstance});                                        // 4409
    };                                                                                                                 // 4410
  }                                                                                                                    // 4411
                                                                                                                       // 4412
  ////////////////////////////////////                                                                                 // 4413
  // Module Loading                                                                                                    // 4414
  ////////////////////////////////////                                                                                 // 4415
  function loadModules(modulesToLoad) {                                                                                // 4416
    assertArg(isUndefined(modulesToLoad) || isArray(modulesToLoad), 'modulesToLoad', 'not an array');                  // 4417
    var runBlocks = [], moduleFn;                                                                                      // 4418
    forEach(modulesToLoad, function(module) {                                                                          // 4419
      if (loadedModules.get(module)) return;                                                                           // 4420
      loadedModules.put(module, true);                                                                                 // 4421
                                                                                                                       // 4422
      function runInvokeQueue(queue) {                                                                                 // 4423
        var i, ii;                                                                                                     // 4424
        for (i = 0, ii = queue.length; i < ii; i++) {                                                                  // 4425
          var invokeArgs = queue[i],                                                                                   // 4426
              provider = providerInjector.get(invokeArgs[0]);                                                          // 4427
                                                                                                                       // 4428
          provider[invokeArgs[1]].apply(provider, invokeArgs[2]);                                                      // 4429
        }                                                                                                              // 4430
      }                                                                                                                // 4431
                                                                                                                       // 4432
      try {                                                                                                            // 4433
        if (isString(module)) {                                                                                        // 4434
          moduleFn = angularModule(module);                                                                            // 4435
          runBlocks = runBlocks.concat(loadModules(moduleFn.requires)).concat(moduleFn._runBlocks);                    // 4436
          runInvokeQueue(moduleFn._invokeQueue);                                                                       // 4437
          runInvokeQueue(moduleFn._configBlocks);                                                                      // 4438
        } else if (isFunction(module)) {                                                                               // 4439
            runBlocks.push(providerInjector.invoke(module));                                                           // 4440
        } else if (isArray(module)) {                                                                                  // 4441
            runBlocks.push(providerInjector.invoke(module));                                                           // 4442
        } else {                                                                                                       // 4443
          assertArgFn(module, 'module');                                                                               // 4444
        }                                                                                                              // 4445
      } catch (e) {                                                                                                    // 4446
        if (isArray(module)) {                                                                                         // 4447
          module = module[module.length - 1];                                                                          // 4448
        }                                                                                                              // 4449
        if (e.message && e.stack && e.stack.indexOf(e.message) == -1) {                                                // 4450
          // Safari & FF's stack traces don't contain error.message content                                            // 4451
          // unlike those of Chrome and IE                                                                             // 4452
          // So if stack doesn't contain message, we create a new string that contains both.                           // 4453
          // Since error.stack is read-only in Safari, I'm overriding e and not e.stack here.                          // 4454
          /* jshint -W022 */                                                                                           // 4455
          e = e.message + '\n' + e.stack;                                                                              // 4456
        }                                                                                                              // 4457
        throw $injectorMinErr('modulerr', "Failed to instantiate module {0} due to:\n{1}",                             // 4458
                  module, e.stack || e.message || e);                                                                  // 4459
      }                                                                                                                // 4460
    });                                                                                                                // 4461
    return runBlocks;                                                                                                  // 4462
  }                                                                                                                    // 4463
                                                                                                                       // 4464
  ////////////////////////////////////                                                                                 // 4465
  // internal Injector                                                                                                 // 4466
  ////////////////////////////////////                                                                                 // 4467
                                                                                                                       // 4468
  function createInternalInjector(cache, factory) {                                                                    // 4469
                                                                                                                       // 4470
    function getService(serviceName, caller) {                                                                         // 4471
      if (cache.hasOwnProperty(serviceName)) {                                                                         // 4472
        if (cache[serviceName] === INSTANTIATING) {                                                                    // 4473
          throw $injectorMinErr('cdep', 'Circular dependency found: {0}',                                              // 4474
                    serviceName + ' <- ' + path.join(' <- '));                                                         // 4475
        }                                                                                                              // 4476
        return cache[serviceName];                                                                                     // 4477
      } else {                                                                                                         // 4478
        try {                                                                                                          // 4479
          path.unshift(serviceName);                                                                                   // 4480
          cache[serviceName] = INSTANTIATING;                                                                          // 4481
          return cache[serviceName] = factory(serviceName, caller);                                                    // 4482
        } catch (err) {                                                                                                // 4483
          if (cache[serviceName] === INSTANTIATING) {                                                                  // 4484
            delete cache[serviceName];                                                                                 // 4485
          }                                                                                                            // 4486
          throw err;                                                                                                   // 4487
        } finally {                                                                                                    // 4488
          path.shift();                                                                                                // 4489
        }                                                                                                              // 4490
      }                                                                                                                // 4491
    }                                                                                                                  // 4492
                                                                                                                       // 4493
    function invoke(fn, self, locals, serviceName) {                                                                   // 4494
      if (typeof locals === 'string') {                                                                                // 4495
        serviceName = locals;                                                                                          // 4496
        locals = null;                                                                                                 // 4497
      }                                                                                                                // 4498
                                                                                                                       // 4499
      var args = [],                                                                                                   // 4500
          $inject = createInjector.$$annotate(fn, strictDi, serviceName),                                              // 4501
          length, i,                                                                                                   // 4502
          key;                                                                                                         // 4503
                                                                                                                       // 4504
      for (i = 0, length = $inject.length; i < length; i++) {                                                          // 4505
        key = $inject[i];                                                                                              // 4506
        if (typeof key !== 'string') {                                                                                 // 4507
          throw $injectorMinErr('itkn',                                                                                // 4508
                  'Incorrect injection token! Expected service name as string, got {0}', key);                         // 4509
        }                                                                                                              // 4510
        args.push(                                                                                                     // 4511
          locals && locals.hasOwnProperty(key)                                                                         // 4512
          ? locals[key]                                                                                                // 4513
          : getService(key, serviceName)                                                                               // 4514
        );                                                                                                             // 4515
      }                                                                                                                // 4516
      if (isArray(fn)) {                                                                                               // 4517
        fn = fn[length];                                                                                               // 4518
      }                                                                                                                // 4519
                                                                                                                       // 4520
      // http://jsperf.com/angularjs-invoke-apply-vs-switch                                                            // 4521
      // #5388                                                                                                         // 4522
      return fn.apply(self, args);                                                                                     // 4523
    }                                                                                                                  // 4524
                                                                                                                       // 4525
    function instantiate(Type, locals, serviceName) {                                                                  // 4526
      // Check if Type is annotated and use just the given function at n-1 as parameter                                // 4527
      // e.g. someModule.factory('greeter', ['$window', function(renamed$window) {}]);                                 // 4528
      // Object creation: http://jsperf.com/create-constructor/2                                                       // 4529
      var instance = Object.create((isArray(Type) ? Type[Type.length - 1] : Type).prototype || null);                  // 4530
      var returnedValue = invoke(Type, instance, locals, serviceName);                                                 // 4531
                                                                                                                       // 4532
      return isObject(returnedValue) || isFunction(returnedValue) ? returnedValue : instance;                          // 4533
    }                                                                                                                  // 4534
                                                                                                                       // 4535
    return {                                                                                                           // 4536
      invoke: invoke,                                                                                                  // 4537
      instantiate: instantiate,                                                                                        // 4538
      get: getService,                                                                                                 // 4539
      annotate: createInjector.$$annotate,                                                                             // 4540
      has: function(name) {                                                                                            // 4541
        return providerCache.hasOwnProperty(name + providerSuffix) || cache.hasOwnProperty(name);                      // 4542
      }                                                                                                                // 4543
    };                                                                                                                 // 4544
  }                                                                                                                    // 4545
}                                                                                                                      // 4546
                                                                                                                       // 4547
createInjector.$$annotate = annotate;                                                                                  // 4548
                                                                                                                       // 4549
/**                                                                                                                    // 4550
 * @ngdoc provider                                                                                                     // 4551
 * @name $anchorScrollProvider                                                                                         // 4552
 *                                                                                                                     // 4553
 * @description                                                                                                        // 4554
 * Use `$anchorScrollProvider` to disable automatic scrolling whenever                                                 // 4555
 * {@link ng.$location#hash $location.hash()} changes.                                                                 // 4556
 */                                                                                                                    // 4557
function $AnchorScrollProvider() {                                                                                     // 4558
                                                                                                                       // 4559
  var autoScrollingEnabled = true;                                                                                     // 4560
                                                                                                                       // 4561
  /**                                                                                                                  // 4562
   * @ngdoc method                                                                                                     // 4563
   * @name $anchorScrollProvider#disableAutoScrolling                                                                  // 4564
   *                                                                                                                   // 4565
   * @description                                                                                                      // 4566
   * By default, {@link ng.$anchorScroll $anchorScroll()} will automatically detect changes to                         // 4567
   * {@link ng.$location#hash $location.hash()} and scroll to the element matching the new hash.<br />                 // 4568
   * Use this method to disable automatic scrolling.                                                                   // 4569
   *                                                                                                                   // 4570
   * If automatic scrolling is disabled, one must explicitly call                                                      // 4571
   * {@link ng.$anchorScroll $anchorScroll()} in order to scroll to the element related to the                         // 4572
   * current hash.                                                                                                     // 4573
   */                                                                                                                  // 4574
  this.disableAutoScrolling = function() {                                                                             // 4575
    autoScrollingEnabled = false;                                                                                      // 4576
  };                                                                                                                   // 4577
                                                                                                                       // 4578
  /**                                                                                                                  // 4579
   * @ngdoc service                                                                                                    // 4580
   * @name $anchorScroll                                                                                               // 4581
   * @kind function                                                                                                    // 4582
   * @requires $window                                                                                                 // 4583
   * @requires $location                                                                                               // 4584
   * @requires $rootScope                                                                                              // 4585
   *                                                                                                                   // 4586
   * @description                                                                                                      // 4587
   * When called, it scrolls to the element related to the specified `hash` or (if omitted) to the                     // 4588
   * current value of {@link ng.$location#hash $location.hash()}, according to the rules specified                     // 4589
   * in the                                                                                                            // 4590
   * [HTML5 spec](http://www.w3.org/html/wg/drafts/html/master/browsers.html#the-indicated-part-of-the-document).      // 4591
   *                                                                                                                   // 4592
   * It also watches the {@link ng.$location#hash $location.hash()} and automatically scrolls to                       // 4593
   * match any anchor whenever it changes. This can be disabled by calling                                             // 4594
   * {@link ng.$anchorScrollProvider#disableAutoScrolling $anchorScrollProvider.disableAutoScrolling()}.               // 4595
   *                                                                                                                   // 4596
   * Additionally, you can use its {@link ng.$anchorScroll#yOffset yOffset} property to specify a                      // 4597
   * vertical scroll-offset (either fixed or dynamic).                                                                 // 4598
   *                                                                                                                   // 4599
   * @param {string=} hash The hash specifying the element to scroll to. If omitted, the value of                      // 4600
   *                       {@link ng.$location#hash $location.hash()} will be used.                                    // 4601
   *                                                                                                                   // 4602
   * @property {(number|function|jqLite)} yOffset                                                                      // 4603
   * If set, specifies a vertical scroll-offset. This is often useful when there are fixed                             // 4604
   * positioned elements at the top of the page, such as navbars, headers etc.                                         // 4605
   *                                                                                                                   // 4606
   * `yOffset` can be specified in various ways:                                                                       // 4607
   * - **number**: A fixed number of pixels to be used as offset.<br /><br />                                          // 4608
   * - **function**: A getter function called everytime `$anchorScroll()` is executed. Must return                     // 4609
   *   a number representing the offset (in pixels).<br /><br />                                                       // 4610
   * - **jqLite**: A jqLite/jQuery element to be used for specifying the offset. The distance from                     // 4611
   *   the top of the page to the element's bottom will be used as offset.<br />                                       // 4612
   *   **Note**: The element will be taken into account only as long as its `position` is set to                       // 4613
   *   `fixed`. This option is useful, when dealing with responsive navbars/headers that adjust                        // 4614
   *   their height and/or positioning according to the viewport's size.                                               // 4615
   *                                                                                                                   // 4616
   * <br />                                                                                                            // 4617
   * <div class="alert alert-warning">                                                                                 // 4618
   * In order for `yOffset` to work properly, scrolling should take place on the document's root and                   // 4619
   * not some child element.                                                                                           // 4620
   * </div>                                                                                                            // 4621
   *                                                                                                                   // 4622
   * @example                                                                                                          // 4623
     <example module="anchorScrollExample">                                                                            // 4624
       <file name="index.html">                                                                                        // 4625
         <div id="scrollArea" ng-controller="ScrollController">                                                        // 4626
           <a ng-click="gotoBottom()">Go to bottom</a>                                                                 // 4627
           <a id="bottom"></a> You're at the bottom!                                                                   // 4628
         </div>                                                                                                        // 4629
       </file>                                                                                                         // 4630
       <file name="script.js">                                                                                         // 4631
         angular.module('anchorScrollExample', [])                                                                     // 4632
           .controller('ScrollController', ['$scope', '$location', '$anchorScroll',                                    // 4633
             function ($scope, $location, $anchorScroll) {                                                             // 4634
               $scope.gotoBottom = function() {                                                                        // 4635
                 // set the location.hash to the id of                                                                 // 4636
                 // the element you wish to scroll to.                                                                 // 4637
                 $location.hash('bottom');                                                                             // 4638
                                                                                                                       // 4639
                 // call $anchorScroll()                                                                               // 4640
                 $anchorScroll();                                                                                      // 4641
               };                                                                                                      // 4642
             }]);                                                                                                      // 4643
       </file>                                                                                                         // 4644
       <file name="style.css">                                                                                         // 4645
         #scrollArea {                                                                                                 // 4646
           height: 280px;                                                                                              // 4647
           overflow: auto;                                                                                             // 4648
         }                                                                                                             // 4649
                                                                                                                       // 4650
         #bottom {                                                                                                     // 4651
           display: block;                                                                                             // 4652
           margin-top: 2000px;                                                                                         // 4653
         }                                                                                                             // 4654
       </file>                                                                                                         // 4655
     </example>                                                                                                        // 4656
   *                                                                                                                   // 4657
   * <hr />                                                                                                            // 4658
   * The example below illustrates the use of a vertical scroll-offset (specified as a fixed value).                   // 4659
   * See {@link ng.$anchorScroll#yOffset $anchorScroll.yOffset} for more details.                                      // 4660
   *                                                                                                                   // 4661
   * @example                                                                                                          // 4662
     <example module="anchorScrollOffsetExample">                                                                      // 4663
       <file name="index.html">                                                                                        // 4664
         <div class="fixed-header" ng-controller="headerCtrl">                                                         // 4665
           <a href="" ng-click="gotoAnchor(x)" ng-repeat="x in [1,2,3,4,5]">                                           // 4666
             Go to anchor {{x}}                                                                                        // 4667
           </a>                                                                                                        // 4668
         </div>                                                                                                        // 4669
         <div id="anchor{{x}}" class="anchor" ng-repeat="x in [1,2,3,4,5]">                                            // 4670
           Anchor {{x}} of 5                                                                                           // 4671
         </div>                                                                                                        // 4672
       </file>                                                                                                         // 4673
       <file name="script.js">                                                                                         // 4674
         angular.module('anchorScrollOffsetExample', [])                                                               // 4675
           .run(['$anchorScroll', function($anchorScroll) {                                                            // 4676
             $anchorScroll.yOffset = 50;   // always scroll by 50 extra pixels                                         // 4677
           }])                                                                                                         // 4678
           .controller('headerCtrl', ['$anchorScroll', '$location', '$scope',                                          // 4679
             function ($anchorScroll, $location, $scope) {                                                             // 4680
               $scope.gotoAnchor = function(x) {                                                                       // 4681
                 var newHash = 'anchor' + x;                                                                           // 4682
                 if ($location.hash() !== newHash) {                                                                   // 4683
                   // set the $location.hash to `newHash` and                                                          // 4684
                   // $anchorScroll will automatically scroll to it                                                    // 4685
                   $location.hash('anchor' + x);                                                                       // 4686
                 } else {                                                                                              // 4687
                   // call $anchorScroll() explicitly,                                                                 // 4688
                   // since $location.hash hasn't changed                                                              // 4689
                   $anchorScroll();                                                                                    // 4690
                 }                                                                                                     // 4691
               };                                                                                                      // 4692
             }                                                                                                         // 4693
           ]);                                                                                                         // 4694
       </file>                                                                                                         // 4695
       <file name="style.css">                                                                                         // 4696
         body {                                                                                                        // 4697
           padding-top: 50px;                                                                                          // 4698
         }                                                                                                             // 4699
                                                                                                                       // 4700
         .anchor {                                                                                                     // 4701
           border: 2px dashed DarkOrchid;                                                                              // 4702
           padding: 10px 10px 200px 10px;                                                                              // 4703
         }                                                                                                             // 4704
                                                                                                                       // 4705
         .fixed-header {                                                                                               // 4706
           background-color: rgba(0, 0, 0, 0.2);                                                                       // 4707
           height: 50px;                                                                                               // 4708
           position: fixed;                                                                                            // 4709
           top: 0; left: 0; right: 0;                                                                                  // 4710
         }                                                                                                             // 4711
                                                                                                                       // 4712
         .fixed-header > a {                                                                                           // 4713
           display: inline-block;                                                                                      // 4714
           margin: 5px 15px;                                                                                           // 4715
         }                                                                                                             // 4716
       </file>                                                                                                         // 4717
     </example>                                                                                                        // 4718
   */                                                                                                                  // 4719
  this.$get = ['$window', '$location', '$rootScope', function($window, $location, $rootScope) {                        // 4720
    var document = $window.document;                                                                                   // 4721
                                                                                                                       // 4722
    // Helper function to get first anchor from a NodeList                                                             // 4723
    // (using `Array#some()` instead of `angular#forEach()` since it's more performant                                 // 4724
    //  and working in all supported browsers.)                                                                        // 4725
    function getFirstAnchor(list) {                                                                                    // 4726
      var result = null;                                                                                               // 4727
      Array.prototype.some.call(list, function(element) {                                                              // 4728
        if (nodeName_(element) === 'a') {                                                                              // 4729
          result = element;                                                                                            // 4730
          return true;                                                                                                 // 4731
        }                                                                                                              // 4732
      });                                                                                                              // 4733
      return result;                                                                                                   // 4734
    }                                                                                                                  // 4735
                                                                                                                       // 4736
    function getYOffset() {                                                                                            // 4737
                                                                                                                       // 4738
      var offset = scroll.yOffset;                                                                                     // 4739
                                                                                                                       // 4740
      if (isFunction(offset)) {                                                                                        // 4741
        offset = offset();                                                                                             // 4742
      } else if (isElement(offset)) {                                                                                  // 4743
        var elem = offset[0];                                                                                          // 4744
        var style = $window.getComputedStyle(elem);                                                                    // 4745
        if (style.position !== 'fixed') {                                                                              // 4746
          offset = 0;                                                                                                  // 4747
        } else {                                                                                                       // 4748
          offset = elem.getBoundingClientRect().bottom;                                                                // 4749
        }                                                                                                              // 4750
      } else if (!isNumber(offset)) {                                                                                  // 4751
        offset = 0;                                                                                                    // 4752
      }                                                                                                                // 4753
                                                                                                                       // 4754
      return offset;                                                                                                   // 4755
    }                                                                                                                  // 4756
                                                                                                                       // 4757
    function scrollTo(elem) {                                                                                          // 4758
      if (elem) {                                                                                                      // 4759
        elem.scrollIntoView();                                                                                         // 4760
                                                                                                                       // 4761
        var offset = getYOffset();                                                                                     // 4762
                                                                                                                       // 4763
        if (offset) {                                                                                                  // 4764
          // `offset` is the number of pixels we should scroll UP in order to align `elem` properly.                   // 4765
          // This is true ONLY if the call to `elem.scrollIntoView()` initially aligns `elem` at the                   // 4766
          // top of the viewport.                                                                                      // 4767
          //                                                                                                           // 4768
          // IF the number of pixels from the top of `elem` to the end of the page's content is less                   // 4769
          // than the height of the viewport, then `elem.scrollIntoView()` will align the `elem` some                  // 4770
          // way down the page.                                                                                        // 4771
          //                                                                                                           // 4772
          // This is often the case for elements near the bottom of the page.                                          // 4773
          //                                                                                                           // 4774
          // In such cases we do not need to scroll the whole `offset` up, just the difference between                 // 4775
          // the top of the element and the offset, which is enough to align the top of `elem` at the                  // 4776
          // desired position.                                                                                         // 4777
          var elemTop = elem.getBoundingClientRect().top;                                                              // 4778
          $window.scrollBy(0, elemTop - offset);                                                                       // 4779
        }                                                                                                              // 4780
      } else {                                                                                                         // 4781
        $window.scrollTo(0, 0);                                                                                        // 4782
      }                                                                                                                // 4783
    }                                                                                                                  // 4784
                                                                                                                       // 4785
    function scroll(hash) {                                                                                            // 4786
      hash = isString(hash) ? hash : $location.hash();                                                                 // 4787
      var elm;                                                                                                         // 4788
                                                                                                                       // 4789
      // empty hash, scroll to the top of the page                                                                     // 4790
      if (!hash) scrollTo(null);                                                                                       // 4791
                                                                                                                       // 4792
      // element with given id                                                                                         // 4793
      else if ((elm = document.getElementById(hash))) scrollTo(elm);                                                   // 4794
                                                                                                                       // 4795
      // first anchor with given name :-D                                                                              // 4796
      else if ((elm = getFirstAnchor(document.getElementsByName(hash)))) scrollTo(elm);                                // 4797
                                                                                                                       // 4798
      // no element and hash == 'top', scroll to the top of the page                                                   // 4799
      else if (hash === 'top') scrollTo(null);                                                                         // 4800
    }                                                                                                                  // 4801
                                                                                                                       // 4802
    // does not scroll when user clicks on anchor link that is currently on                                            // 4803
    // (no url change, no $location.hash() change), browser native does scroll                                         // 4804
    if (autoScrollingEnabled) {                                                                                        // 4805
      $rootScope.$watch(function autoScrollWatch() {return $location.hash();},                                         // 4806
        function autoScrollWatchAction(newVal, oldVal) {                                                               // 4807
          // skip the initial scroll if $location.hash is empty                                                        // 4808
          if (newVal === oldVal && newVal === '') return;                                                              // 4809
                                                                                                                       // 4810
          jqLiteDocumentLoaded(function() {                                                                            // 4811
            $rootScope.$evalAsync(scroll);                                                                             // 4812
          });                                                                                                          // 4813
        });                                                                                                            // 4814
    }                                                                                                                  // 4815
                                                                                                                       // 4816
    return scroll;                                                                                                     // 4817
  }];                                                                                                                  // 4818
}                                                                                                                      // 4819
                                                                                                                       // 4820
var $animateMinErr = minErr('$animate');                                                                               // 4821
var ELEMENT_NODE = 1;                                                                                                  // 4822
var NG_ANIMATE_CLASSNAME = 'ng-animate';                                                                               // 4823
                                                                                                                       // 4824
function mergeClasses(a,b) {                                                                                           // 4825
  if (!a && !b) return '';                                                                                             // 4826
  if (!a) return b;                                                                                                    // 4827
  if (!b) return a;                                                                                                    // 4828
  if (isArray(a)) a = a.join(' ');                                                                                     // 4829
  if (isArray(b)) b = b.join(' ');                                                                                     // 4830
  return a + ' ' + b;                                                                                                  // 4831
}                                                                                                                      // 4832
                                                                                                                       // 4833
function extractElementNode(element) {                                                                                 // 4834
  for (var i = 0; i < element.length; i++) {                                                                           // 4835
    var elm = element[i];                                                                                              // 4836
    if (elm.nodeType === ELEMENT_NODE) {                                                                               // 4837
      return elm;                                                                                                      // 4838
    }                                                                                                                  // 4839
  }                                                                                                                    // 4840
}                                                                                                                      // 4841
                                                                                                                       // 4842
function splitClasses(classes) {                                                                                       // 4843
  if (isString(classes)) {                                                                                             // 4844
    classes = classes.split(' ');                                                                                      // 4845
  }                                                                                                                    // 4846
                                                                                                                       // 4847
  // Use createMap() to prevent class assumptions involving property names in                                          // 4848
  // Object.prototype                                                                                                  // 4849
  var obj = createMap();                                                                                               // 4850
  forEach(classes, function(klass) {                                                                                   // 4851
    // sometimes the split leaves empty string values                                                                  // 4852
    // incase extra spaces were applied to the options                                                                 // 4853
    if (klass.length) {                                                                                                // 4854
      obj[klass] = true;                                                                                               // 4855
    }                                                                                                                  // 4856
  });                                                                                                                  // 4857
  return obj;                                                                                                          // 4858
}                                                                                                                      // 4859
                                                                                                                       // 4860
// if any other type of options value besides an Object value is                                                       // 4861
// passed into the $animate.method() animation then this helper code                                                   // 4862
// will be run which will ignore it. While this patch is not the                                                       // 4863
// greatest solution to this, a lot of existing plugins depend on                                                      // 4864
// $animate to either call the callback (< 1.2) or return a promise                                                    // 4865
// that can be changed. This helper function ensures that the options                                                  // 4866
// are wiped clean incase a callback function is provided.                                                             // 4867
function prepareAnimateOptions(options) {                                                                              // 4868
  return isObject(options)                                                                                             // 4869
      ? options                                                                                                        // 4870
      : {};                                                                                                            // 4871
}                                                                                                                      // 4872
                                                                                                                       // 4873
var $$CoreAnimateRunnerProvider = function() {                                                                         // 4874
  this.$get = ['$q', '$$rAF', function($q, $$rAF) {                                                                    // 4875
    function AnimateRunner() {}                                                                                        // 4876
    AnimateRunner.all = noop;                                                                                          // 4877
    AnimateRunner.chain = noop;                                                                                        // 4878
    AnimateRunner.prototype = {                                                                                        // 4879
      end: noop,                                                                                                       // 4880
      cancel: noop,                                                                                                    // 4881
      resume: noop,                                                                                                    // 4882
      pause: noop,                                                                                                     // 4883
      complete: noop,                                                                                                  // 4884
      then: function(pass, fail) {                                                                                     // 4885
        return $q(function(resolve) {                                                                                  // 4886
          $$rAF(function() {                                                                                           // 4887
            resolve();                                                                                                 // 4888
          });                                                                                                          // 4889
        }).then(pass, fail);                                                                                           // 4890
      }                                                                                                                // 4891
    };                                                                                                                 // 4892
    return AnimateRunner;                                                                                              // 4893
  }];                                                                                                                  // 4894
};                                                                                                                     // 4895
                                                                                                                       // 4896
// this is prefixed with Core since it conflicts with                                                                  // 4897
// the animateQueueProvider defined in ngAnimate/animateQueue.js                                                       // 4898
var $$CoreAnimateQueueProvider = function() {                                                                          // 4899
  var postDigestQueue = new HashMap();                                                                                 // 4900
  var postDigestElements = [];                                                                                         // 4901
                                                                                                                       // 4902
  this.$get = ['$$AnimateRunner', '$rootScope',                                                                        // 4903
       function($$AnimateRunner,   $rootScope) {                                                                       // 4904
    return {                                                                                                           // 4905
      enabled: noop,                                                                                                   // 4906
      on: noop,                                                                                                        // 4907
      off: noop,                                                                                                       // 4908
      pin: noop,                                                                                                       // 4909
                                                                                                                       // 4910
      push: function(element, event, options, domOperation) {                                                          // 4911
        domOperation        && domOperation();                                                                         // 4912
                                                                                                                       // 4913
        options = options || {};                                                                                       // 4914
        options.from        && element.css(options.from);                                                              // 4915
        options.to          && element.css(options.to);                                                                // 4916
                                                                                                                       // 4917
        if (options.addClass || options.removeClass) {                                                                 // 4918
          addRemoveClassesPostDigest(element, options.addClass, options.removeClass);                                  // 4919
        }                                                                                                              // 4920
                                                                                                                       // 4921
        return new $$AnimateRunner(); // jshint ignore:line                                                            // 4922
      }                                                                                                                // 4923
    };                                                                                                                 // 4924
                                                                                                                       // 4925
                                                                                                                       // 4926
    function updateData(data, classes, value) {                                                                        // 4927
      var changed = false;                                                                                             // 4928
      if (classes) {                                                                                                   // 4929
        classes = isString(classes) ? classes.split(' ') :                                                             // 4930
                  isArray(classes) ? classes : [];                                                                     // 4931
        forEach(classes, function(className) {                                                                         // 4932
          if (className) {                                                                                             // 4933
            changed = true;                                                                                            // 4934
            data[className] = value;                                                                                   // 4935
          }                                                                                                            // 4936
        });                                                                                                            // 4937
      }                                                                                                                // 4938
      return changed;                                                                                                  // 4939
    }                                                                                                                  // 4940
                                                                                                                       // 4941
    function handleCSSClassChanges() {                                                                                 // 4942
      forEach(postDigestElements, function(element) {                                                                  // 4943
        var data = postDigestQueue.get(element);                                                                       // 4944
        if (data) {                                                                                                    // 4945
          var existing = splitClasses(element.attr('class'));                                                          // 4946
          var toAdd = '';                                                                                              // 4947
          var toRemove = '';                                                                                           // 4948
          forEach(data, function(status, className) {                                                                  // 4949
            var hasClass = !!existing[className];                                                                      // 4950
            if (status !== hasClass) {                                                                                 // 4951
              if (status) {                                                                                            // 4952
                toAdd += (toAdd.length ? ' ' : '') + className;                                                        // 4953
              } else {                                                                                                 // 4954
                toRemove += (toRemove.length ? ' ' : '') + className;                                                  // 4955
              }                                                                                                        // 4956
            }                                                                                                          // 4957
          });                                                                                                          // 4958
                                                                                                                       // 4959
          forEach(element, function(elm) {                                                                             // 4960
            toAdd    && jqLiteAddClass(elm, toAdd);                                                                    // 4961
            toRemove && jqLiteRemoveClass(elm, toRemove);                                                              // 4962
          });                                                                                                          // 4963
          postDigestQueue.remove(element);                                                                             // 4964
        }                                                                                                              // 4965
      });                                                                                                              // 4966
      postDigestElements.length = 0;                                                                                   // 4967
    }                                                                                                                  // 4968
                                                                                                                       // 4969
                                                                                                                       // 4970
    function addRemoveClassesPostDigest(element, add, remove) {                                                        // 4971
      var data = postDigestQueue.get(element) || {};                                                                   // 4972
                                                                                                                       // 4973
      var classesAdded = updateData(data, add, true);                                                                  // 4974
      var classesRemoved = updateData(data, remove, false);                                                            // 4975
                                                                                                                       // 4976
      if (classesAdded || classesRemoved) {                                                                            // 4977
                                                                                                                       // 4978
        postDigestQueue.put(element, data);                                                                            // 4979
        postDigestElements.push(element);                                                                              // 4980
                                                                                                                       // 4981
        if (postDigestElements.length === 1) {                                                                         // 4982
          $rootScope.$$postDigest(handleCSSClassChanges);                                                              // 4983
        }                                                                                                              // 4984
      }                                                                                                                // 4985
    }                                                                                                                  // 4986
  }];                                                                                                                  // 4987
};                                                                                                                     // 4988
                                                                                                                       // 4989
/**                                                                                                                    // 4990
 * @ngdoc provider                                                                                                     // 4991
 * @name $animateProvider                                                                                              // 4992
 *                                                                                                                     // 4993
 * @description                                                                                                        // 4994
 * Default implementation of $animate that doesn't perform any animations, instead just                                // 4995
 * synchronously performs DOM updates and resolves the returned runner promise.                                        // 4996
 *                                                                                                                     // 4997
 * In order to enable animations the `ngAnimate` module has to be loaded.                                              // 4998
 *                                                                                                                     // 4999
 * To see the functional implementation check out `src/ngAnimate/animate.js`.                                          // 5000
 */                                                                                                                    // 5001
var $AnimateProvider = ['$provide', function($provide) {                                                               // 5002
  var provider = this;                                                                                                 // 5003
                                                                                                                       // 5004
  this.$$registeredAnimations = Object.create(null);                                                                   // 5005
                                                                                                                       // 5006
   /**                                                                                                                 // 5007
   * @ngdoc method                                                                                                     // 5008
   * @name $animateProvider#register                                                                                   // 5009
   *                                                                                                                   // 5010
   * @description                                                                                                      // 5011
   * Registers a new injectable animation factory function. The factory function produces the                          // 5012
   * animation object which contains callback functions for each event that is expected to be                          // 5013
   * animated.                                                                                                         // 5014
   *                                                                                                                   // 5015
   *   * `eventFn`: `function(element, ... , doneFunction, options)`                                                   // 5016
   *   The element to animate, the `doneFunction` and the options fed into the animation. Depending                    // 5017
   *   on the type of animation additional arguments will be injected into the animation function. The                 // 5018
   *   list below explains the function signatures for the different animation methods:                                // 5019
   *                                                                                                                   // 5020
   *   - setClass: function(element, addedClasses, removedClasses, doneFunction, options)                              // 5021
   *   - addClass: function(element, addedClasses, doneFunction, options)                                              // 5022
   *   - removeClass: function(element, removedClasses, doneFunction, options)                                         // 5023
   *   - enter, leave, move: function(element, doneFunction, options)                                                  // 5024
   *   - animate: function(element, fromStyles, toStyles, doneFunction, options)                                       // 5025
   *                                                                                                                   // 5026
   *   Make sure to trigger the `doneFunction` once the animation is fully complete.                                   // 5027
   *                                                                                                                   // 5028
   * ```js                                                                                                             // 5029
   *   return {                                                                                                        // 5030
   *     //enter, leave, move signature                                                                                // 5031
   *     eventFn : function(element, done, options) {                                                                  // 5032
   *       //code to run the animation                                                                                 // 5033
   *       //once complete, then run done()                                                                            // 5034
   *       return function endFunction(wasCancelled) {                                                                 // 5035
   *         //code to cancel the animation                                                                            // 5036
   *       }                                                                                                           // 5037
   *     }                                                                                                             // 5038
   *   }                                                                                                               // 5039
   * ```                                                                                                               // 5040
   *                                                                                                                   // 5041
   * @param {string} name The name of the animation (this is what the class-based CSS value will be compared to).      // 5042
   * @param {Function} factory The factory function that will be executed to return the animation                      // 5043
   *                           object.                                                                                 // 5044
   */                                                                                                                  // 5045
  this.register = function(name, factory) {                                                                            // 5046
    if (name && name.charAt(0) !== '.') {                                                                              // 5047
      throw $animateMinErr('notcsel', "Expecting class selector starting with '.' got '{0}'.", name);                  // 5048
    }                                                                                                                  // 5049
                                                                                                                       // 5050
    var key = name + '-animation';                                                                                     // 5051
    provider.$$registeredAnimations[name.substr(1)] = key;                                                             // 5052
    $provide.factory(key, factory);                                                                                    // 5053
  };                                                                                                                   // 5054
                                                                                                                       // 5055
  /**                                                                                                                  // 5056
   * @ngdoc method                                                                                                     // 5057
   * @name $animateProvider#classNameFilter                                                                            // 5058
   *                                                                                                                   // 5059
   * @description                                                                                                      // 5060
   * Sets and/or returns the CSS class regular expression that is checked when performing                              // 5061
   * an animation. Upon bootstrap the classNameFilter value is not set at all and will                                 // 5062
   * therefore enable $animate to attempt to perform an animation on any element that is triggered.                    // 5063
   * When setting the `classNameFilter` value, animations will only be performed on elements                           // 5064
   * that successfully match the filter expression. This in turn can boost performance                                 // 5065
   * for low-powered devices as well as applications containing a lot of structural operations.                        // 5066
   * @param {RegExp=} expression The className expression which will be checked against all animations                 // 5067
   * @return {RegExp} The current CSS className expression value. If null then there is no expression value            // 5068
   */                                                                                                                  // 5069
  this.classNameFilter = function(expression) {                                                                        // 5070
    if (arguments.length === 1) {                                                                                      // 5071
      this.$$classNameFilter = (expression instanceof RegExp) ? expression : null;                                     // 5072
      if (this.$$classNameFilter) {                                                                                    // 5073
        var reservedRegex = new RegExp("(\\s+|\\/)" + NG_ANIMATE_CLASSNAME + "(\\s+|\\/)");                            // 5074
        if (reservedRegex.test(this.$$classNameFilter.toString())) {                                                   // 5075
          throw $animateMinErr('nongcls','$animateProvider.classNameFilter(regex) prohibits accepting a regex value which matches/contains the "{0}" CSS class.', NG_ANIMATE_CLASSNAME);
                                                                                                                       // 5077
        }                                                                                                              // 5078
      }                                                                                                                // 5079
    }                                                                                                                  // 5080
    return this.$$classNameFilter;                                                                                     // 5081
  };                                                                                                                   // 5082
                                                                                                                       // 5083
  this.$get = ['$$animateQueue', function($$animateQueue) {                                                            // 5084
    function domInsert(element, parentElement, afterElement) {                                                         // 5085
      // if for some reason the previous element was removed                                                           // 5086
      // from the dom sometime before this code runs then let's                                                        // 5087
      // just stick to using the parent element as the anchor                                                          // 5088
      if (afterElement) {                                                                                              // 5089
        var afterNode = extractElementNode(afterElement);                                                              // 5090
        if (afterNode && !afterNode.parentNode && !afterNode.previousElementSibling) {                                 // 5091
          afterElement = null;                                                                                         // 5092
        }                                                                                                              // 5093
      }                                                                                                                // 5094
      afterElement ? afterElement.after(element) : parentElement.prepend(element);                                     // 5095
    }                                                                                                                  // 5096
                                                                                                                       // 5097
    /**                                                                                                                // 5098
     * @ngdoc service                                                                                                  // 5099
     * @name $animate                                                                                                  // 5100
     * @description The $animate service exposes a series of DOM utility methods that provide support                  // 5101
     * for animation hooks. The default behavior is the application of DOM operations, however,                        // 5102
     * when an animation is detected (and animations are enabled), $animate will do the heavy lifting                  // 5103
     * to ensure that animation runs with the triggered DOM operation.                                                 // 5104
     *                                                                                                                 // 5105
     * By default $animate doesn't trigger any animations. This is because the `ngAnimate` module isn't                // 5106
     * included and only when it is active then the animation hooks that `$animate` triggers will be                   // 5107
     * functional. Once active then all structural `ng-` directives will trigger animations as they perform            // 5108
     * their DOM-related operations (enter, leave and move). Other directives such as `ngClass`,                       // 5109
     * `ngShow`, `ngHide` and `ngMessages` also provide support for animations.                                        // 5110
     *                                                                                                                 // 5111
     * It is recommended that the`$animate` service is always used when executing DOM-related procedures within directives.
     *                                                                                                                 // 5113
     * To learn more about enabling animation support, click here to visit the                                         // 5114
     * {@link ngAnimate ngAnimate module page}.                                                                        // 5115
     */                                                                                                                // 5116
    return {                                                                                                           // 5117
      // we don't call it directly since non-existant arguments may                                                    // 5118
      // be interpreted as null within the sub enabled function                                                        // 5119
                                                                                                                       // 5120
      /**                                                                                                              // 5121
       *                                                                                                               // 5122
       * @ngdoc method                                                                                                 // 5123
       * @name $animate#on                                                                                             // 5124
       * @kind function                                                                                                // 5125
       * @description Sets up an event listener to fire whenever the animation event (enter, leave, move, etc...)      // 5126
       *    has fired on the given element or among any of its children. Once the listener is fired, the provided callback
       *    is fired with the following params:                                                                        // 5128
       *                                                                                                               // 5129
       * ```js                                                                                                         // 5130
       * $animate.on('enter', container,                                                                               // 5131
       *    function callback(element, phase) {                                                                        // 5132
       *      // cool we detected an enter animation within the container                                              // 5133
       *    }                                                                                                          // 5134
       * );                                                                                                            // 5135
       * ```                                                                                                           // 5136
       *                                                                                                               // 5137
       * @param {string} event the animation event that will be captured (e.g. enter, leave, move, addClass, removeClass, etc...)
       * @param {DOMElement} container the container element that will capture each of the animation events that are fired on itself
       *     as well as among its children                                                                             // 5140
       * @param {Function} callback the callback function that will be fired when the listener is triggered            // 5141
       *                                                                                                               // 5142
       * The arguments present in the callback function are:                                                           // 5143
       * * `element` - The captured DOM element that the animation was fired on.                                       // 5144
       * * `phase` - The phase of the animation. The two possible phases are **start** (when the animation starts) and **close** (when it ends).
       */                                                                                                              // 5146
      on: $$animateQueue.on,                                                                                           // 5147
                                                                                                                       // 5148
      /**                                                                                                              // 5149
       *                                                                                                               // 5150
       * @ngdoc method                                                                                                 // 5151
       * @name $animate#off                                                                                            // 5152
       * @kind function                                                                                                // 5153
       * @description Deregisters an event listener based on the event which has been associated with the provided element. This method
       * can be used in three different ways depending on the arguments:                                               // 5155
       *                                                                                                               // 5156
       * ```js                                                                                                         // 5157
       * // remove all the animation event listeners listening for `enter`                                             // 5158
       * $animate.off('enter');                                                                                        // 5159
       *                                                                                                               // 5160
       * // remove all the animation event listeners listening for `enter` on the given element and its children       // 5161
       * $animate.off('enter', container);                                                                             // 5162
       *                                                                                                               // 5163
       * // remove the event listener function provided by `listenerFn` that is set                                    // 5164
       * // to listen for `enter` on the given `element` as well as its children                                       // 5165
       * $animate.off('enter', container, callback);                                                                   // 5166
       * ```                                                                                                           // 5167
       *                                                                                                               // 5168
       * @param {string} event the animation event (e.g. enter, leave, move, addClass, removeClass, etc...)            // 5169
       * @param {DOMElement=} container the container element the event listener was placed on                         // 5170
       * @param {Function=} callback the callback function that was registered as the listener                         // 5171
       */                                                                                                              // 5172
      off: $$animateQueue.off,                                                                                         // 5173
                                                                                                                       // 5174
      /**                                                                                                              // 5175
       * @ngdoc method                                                                                                 // 5176
       * @name $animate#pin                                                                                            // 5177
       * @kind function                                                                                                // 5178
       * @description Associates the provided element with a host parent element to allow the element to be animated even if it exists
       *    outside of the DOM structure of the Angular application. By doing so, any animation triggered via `$animate` can be issued on the
       *    element despite being outside the realm of the application or within another application. Say for example if the application
       *    was bootstrapped on an element that is somewhere inside of the `<body>` tag, but we wanted to allow for an element to be situated
       *    as a direct child of `document.body`, then this can be achieved by pinning the element via `$animate.pin(element)`. Keep in mind
       *    that calling `$animate.pin(element, parentElement)` will not actually insert into the DOM anywhere; it will just create the association.
       *                                                                                                               // 5185
       *    Note that this feature is only active when the `ngAnimate` module is used.                                 // 5186
       *                                                                                                               // 5187
       * @param {DOMElement} element the external element that will be pinned                                          // 5188
       * @param {DOMElement} parentElement the host parent element that will be associated with the external element   // 5189
       */                                                                                                              // 5190
      pin: $$animateQueue.pin,                                                                                         // 5191
                                                                                                                       // 5192
      /**                                                                                                              // 5193
       *                                                                                                               // 5194
       * @ngdoc method                                                                                                 // 5195
       * @name $animate#enabled                                                                                        // 5196
       * @kind function                                                                                                // 5197
       * @description Used to get and set whether animations are enabled or not on the entire application or on an element and its children. This
       * function can be called in four ways:                                                                          // 5199
       *                                                                                                               // 5200
       * ```js                                                                                                         // 5201
       * // returns true or false                                                                                      // 5202
       * $animate.enabled();                                                                                           // 5203
       *                                                                                                               // 5204
       * // changes the enabled state for all animations                                                               // 5205
       * $animate.enabled(false);                                                                                      // 5206
       * $animate.enabled(true);                                                                                       // 5207
       *                                                                                                               // 5208
       * // returns true or false if animations are enabled for an element                                             // 5209
       * $animate.enabled(element);                                                                                    // 5210
       *                                                                                                               // 5211
       * // changes the enabled state for an element and its children                                                  // 5212
       * $animate.enabled(element, true);                                                                              // 5213
       * $animate.enabled(element, false);                                                                             // 5214
       * ```                                                                                                           // 5215
       *                                                                                                               // 5216
       * @param {DOMElement=} element the element that will be considered for checking/setting the enabled state       // 5217
       * @param {boolean=} enabled whether or not the animations will be enabled for the element                       // 5218
       *                                                                                                               // 5219
       * @return {boolean} whether or not animations are enabled                                                       // 5220
       */                                                                                                              // 5221
      enabled: $$animateQueue.enabled,                                                                                 // 5222
                                                                                                                       // 5223
      /**                                                                                                              // 5224
       * @ngdoc method                                                                                                 // 5225
       * @name $animate#cancel                                                                                         // 5226
       * @kind function                                                                                                // 5227
       * @description Cancels the provided animation.                                                                  // 5228
       *                                                                                                               // 5229
       * @param {Promise} animationPromise The animation promise that is returned when an animation is started.        // 5230
       */                                                                                                              // 5231
      cancel: function(runner) {                                                                                       // 5232
        runner.end && runner.end();                                                                                    // 5233
      },                                                                                                               // 5234
                                                                                                                       // 5235
      /**                                                                                                              // 5236
       *                                                                                                               // 5237
       * @ngdoc method                                                                                                 // 5238
       * @name $animate#enter                                                                                          // 5239
       * @kind function                                                                                                // 5240
       * @description Inserts the element into the DOM either after the `after` element (if provided) or               // 5241
       *   as the first child within the `parent` element and then triggers an animation.                              // 5242
       *   A promise is returned that will be resolved during the next digest once the animation                       // 5243
       *   has completed.                                                                                              // 5244
       *                                                                                                               // 5245
       * @param {DOMElement} element the element which will be inserted into the DOM                                   // 5246
       * @param {DOMElement} parent the parent element which will append the element as                                // 5247
       *   a child (so long as the after element is not present)                                                       // 5248
       * @param {DOMElement=} after the sibling element after which the element will be appended                       // 5249
       * @param {object=} options an optional collection of options/styles that will be applied to the element         // 5250
       *                                                                                                               // 5251
       * @return {Promise} the animation callback promise                                                              // 5252
       */                                                                                                              // 5253
      enter: function(element, parent, after, options) {                                                               // 5254
        parent = parent && jqLite(parent);                                                                             // 5255
        after = after && jqLite(after);                                                                                // 5256
        parent = parent || after.parent();                                                                             // 5257
        domInsert(element, parent, after);                                                                             // 5258
        return $$animateQueue.push(element, 'enter', prepareAnimateOptions(options));                                  // 5259
      },                                                                                                               // 5260
                                                                                                                       // 5261
      /**                                                                                                              // 5262
       *                                                                                                               // 5263
       * @ngdoc method                                                                                                 // 5264
       * @name $animate#move                                                                                           // 5265
       * @kind function                                                                                                // 5266
       * @description Inserts (moves) the element into its new position in the DOM either after                        // 5267
       *   the `after` element (if provided) or as the first child within the `parent` element                         // 5268
       *   and then triggers an animation. A promise is returned that will be resolved                                 // 5269
       *   during the next digest once the animation has completed.                                                    // 5270
       *                                                                                                               // 5271
       * @param {DOMElement} element the element which will be moved into the new DOM position                         // 5272
       * @param {DOMElement} parent the parent element which will append the element as                                // 5273
       *   a child (so long as the after element is not present)                                                       // 5274
       * @param {DOMElement=} after the sibling element after which the element will be appended                       // 5275
       * @param {object=} options an optional collection of options/styles that will be applied to the element         // 5276
       *                                                                                                               // 5277
       * @return {Promise} the animation callback promise                                                              // 5278
       */                                                                                                              // 5279
      move: function(element, parent, after, options) {                                                                // 5280
        parent = parent && jqLite(parent);                                                                             // 5281
        after = after && jqLite(after);                                                                                // 5282
        parent = parent || after.parent();                                                                             // 5283
        domInsert(element, parent, after);                                                                             // 5284
        return $$animateQueue.push(element, 'move', prepareAnimateOptions(options));                                   // 5285
      },                                                                                                               // 5286
                                                                                                                       // 5287
      /**                                                                                                              // 5288
       * @ngdoc method                                                                                                 // 5289
       * @name $animate#leave                                                                                          // 5290
       * @kind function                                                                                                // 5291
       * @description Triggers an animation and then removes the element from the DOM.                                 // 5292
       * When the function is called a promise is returned that will be resolved during the next                       // 5293
       * digest once the animation has completed.                                                                      // 5294
       *                                                                                                               // 5295
       * @param {DOMElement} element the element which will be removed from the DOM                                    // 5296
       * @param {object=} options an optional collection of options/styles that will be applied to the element         // 5297
       *                                                                                                               // 5298
       * @return {Promise} the animation callback promise                                                              // 5299
       */                                                                                                              // 5300
      leave: function(element, options) {                                                                              // 5301
        return $$animateQueue.push(element, 'leave', prepareAnimateOptions(options), function() {                      // 5302
          element.remove();                                                                                            // 5303
        });                                                                                                            // 5304
      },                                                                                                               // 5305
                                                                                                                       // 5306
      /**                                                                                                              // 5307
       * @ngdoc method                                                                                                 // 5308
       * @name $animate#addClass                                                                                       // 5309
       * @kind function                                                                                                // 5310
       *                                                                                                               // 5311
       * @description Triggers an addClass animation surrounding the addition of the provided CSS class(es). Upon      // 5312
       *   execution, the addClass operation will only be handled after the next digest and it will not trigger an     // 5313
       *   animation if element already contains the CSS class or if the class is removed at a later step.             // 5314
       *   Note that class-based animations are treated differently compared to structural animations                  // 5315
       *   (like enter, move and leave) since the CSS classes may be added/removed at different points                 // 5316
       *   depending if CSS or JavaScript animations are used.                                                         // 5317
       *                                                                                                               // 5318
       * @param {DOMElement} element the element which the CSS classes will be applied to                              // 5319
       * @param {string} className the CSS class(es) that will be added (multiple classes are separated via spaces)    // 5320
       * @param {object=} options an optional collection of options/styles that will be applied to the element         // 5321
       *                                                                                                               // 5322
       * @return {Promise} the animation callback promise                                                              // 5323
       */                                                                                                              // 5324
      addClass: function(element, className, options) {                                                                // 5325
        options = prepareAnimateOptions(options);                                                                      // 5326
        options.addClass = mergeClasses(options.addclass, className);                                                  // 5327
        return $$animateQueue.push(element, 'addClass', options);                                                      // 5328
      },                                                                                                               // 5329
                                                                                                                       // 5330
      /**                                                                                                              // 5331
       * @ngdoc method                                                                                                 // 5332
       * @name $animate#removeClass                                                                                    // 5333
       * @kind function                                                                                                // 5334
       *                                                                                                               // 5335
       * @description Triggers a removeClass animation surrounding the removal of the provided CSS class(es). Upon     // 5336
       *   execution, the removeClass operation will only be handled after the next digest and it will not trigger an  // 5337
       *   animation if element does not contain the CSS class or if the class is added at a later step.               // 5338
       *   Note that class-based animations are treated differently compared to structural animations                  // 5339
       *   (like enter, move and leave) since the CSS classes may be added/removed at different points                 // 5340
       *   depending if CSS or JavaScript animations are used.                                                         // 5341
       *                                                                                                               // 5342
       * @param {DOMElement} element the element which the CSS classes will be applied to                              // 5343
       * @param {string} className the CSS class(es) that will be removed (multiple classes are separated via spaces)  // 5344
       * @param {object=} options an optional collection of options/styles that will be applied to the element         // 5345
       *                                                                                                               // 5346
       * @return {Promise} the animation callback promise                                                              // 5347
       */                                                                                                              // 5348
      removeClass: function(element, className, options) {                                                             // 5349
        options = prepareAnimateOptions(options);                                                                      // 5350
        options.removeClass = mergeClasses(options.removeClass, className);                                            // 5351
        return $$animateQueue.push(element, 'removeClass', options);                                                   // 5352
      },                                                                                                               // 5353
                                                                                                                       // 5354
      /**                                                                                                              // 5355
       * @ngdoc method                                                                                                 // 5356
       * @name $animate#setClass                                                                                       // 5357
       * @kind function                                                                                                // 5358
       *                                                                                                               // 5359
       * @description Performs both the addition and removal of a CSS classes on an element and (during the process)   // 5360
       *    triggers an animation surrounding the class addition/removal. Much like `$animate.addClass` and            // 5361
       *    `$animate.removeClass`, `setClass` will only evaluate the classes being added/removed once a digest has    // 5362
       *    passed. Note that class-based animations are treated differently compared to structural animations         // 5363
       *    (like enter, move and leave) since the CSS classes may be added/removed at different points                // 5364
       *    depending if CSS or JavaScript animations are used.                                                        // 5365
       *                                                                                                               // 5366
       * @param {DOMElement} element the element which the CSS classes will be applied to                              // 5367
       * @param {string} add the CSS class(es) that will be added (multiple classes are separated via spaces)          // 5368
       * @param {string} remove the CSS class(es) that will be removed (multiple classes are separated via spaces)     // 5369
       * @param {object=} options an optional collection of options/styles that will be applied to the element         // 5370
       *                                                                                                               // 5371
       * @return {Promise} the animation callback promise                                                              // 5372
       */                                                                                                              // 5373
      setClass: function(element, add, remove, options) {                                                              // 5374
        options = prepareAnimateOptions(options);                                                                      // 5375
        options.addClass = mergeClasses(options.addClass, add);                                                        // 5376
        options.removeClass = mergeClasses(options.removeClass, remove);                                               // 5377
        return $$animateQueue.push(element, 'setClass', options);                                                      // 5378
      },                                                                                                               // 5379
                                                                                                                       // 5380
      /**                                                                                                              // 5381
       * @ngdoc method                                                                                                 // 5382
       * @name $animate#animate                                                                                        // 5383
       * @kind function                                                                                                // 5384
       *                                                                                                               // 5385
       * @description Performs an inline animation on the element which applies the provided to and from CSS styles to the element.
       * If any detected CSS transition, keyframe or JavaScript matches the provided className value then the animation will take
       * on the provided styles. For example, if a transition animation is set for the given className then the provided from and
       * to styles will be applied alongside the given transition. If a JavaScript animation is detected then the provided styles
       * will be given in as function paramters into the `animate` method (or as apart of the `options` parameter).    // 5390
       *                                                                                                               // 5391
       * @param {DOMElement} element the element which the CSS styles will be applied to                               // 5392
       * @param {object} from the from (starting) CSS styles that will be applied to the element and across the animation.
       * @param {object} to the to (destination) CSS styles that will be applied to the element and across the animation.
       * @param {string=} className an optional CSS class that will be applied to the element for the duration of the animation. If
       *    this value is left as empty then a CSS class of `ng-inline-animate` will be applied to the element.        // 5396
       *    (Note that if no animation is detected then this value will not be appplied to the element.)               // 5397
       * @param {object=} options an optional collection of options/styles that will be applied to the element         // 5398
       *                                                                                                               // 5399
       * @return {Promise} the animation callback promise                                                              // 5400
       */                                                                                                              // 5401
      animate: function(element, from, to, className, options) {                                                       // 5402
        options = prepareAnimateOptions(options);                                                                      // 5403
        options.from = options.from ? extend(options.from, from) : from;                                               // 5404
        options.to   = options.to   ? extend(options.to, to)     : to;                                                 // 5405
                                                                                                                       // 5406
        className = className || 'ng-inline-animate';                                                                  // 5407
        options.tempClasses = mergeClasses(options.tempClasses, className);                                            // 5408
        return $$animateQueue.push(element, 'animate', options);                                                       // 5409
      }                                                                                                                // 5410
    };                                                                                                                 // 5411
  }];                                                                                                                  // 5412
}];                                                                                                                    // 5413
                                                                                                                       // 5414
/**                                                                                                                    // 5415
 * @ngdoc service                                                                                                      // 5416
 * @name $animateCss                                                                                                   // 5417
 * @kind object                                                                                                        // 5418
 *                                                                                                                     // 5419
 * @description                                                                                                        // 5420
 * This is the core version of `$animateCss`. By default, only when the `ngAnimate` is included,                       // 5421
 * then the `$animateCss` service will actually perform animations.                                                    // 5422
 *                                                                                                                     // 5423
 * Click here {@link ngAnimate.$animateCss to read the documentation for $animateCss}.                                 // 5424
 */                                                                                                                    // 5425
var $CoreAnimateCssProvider = function() {                                                                             // 5426
  this.$get = ['$$rAF', '$q', function($$rAF, $q) {                                                                    // 5427
                                                                                                                       // 5428
    var RAFPromise = function() {};                                                                                    // 5429
    RAFPromise.prototype = {                                                                                           // 5430
      done: function(cancel) {                                                                                         // 5431
        this.defer && this.defer[cancel === true ? 'reject' : 'resolve']();                                            // 5432
      },                                                                                                               // 5433
      end: function() {                                                                                                // 5434
        this.done();                                                                                                   // 5435
      },                                                                                                               // 5436
      cancel: function() {                                                                                             // 5437
        this.done(true);                                                                                               // 5438
      },                                                                                                               // 5439
      getPromise: function() {                                                                                         // 5440
        if (!this.defer) {                                                                                             // 5441
          this.defer = $q.defer();                                                                                     // 5442
        }                                                                                                              // 5443
        return this.defer.promise;                                                                                     // 5444
      },                                                                                                               // 5445
      then: function(f1,f2) {                                                                                          // 5446
        return this.getPromise().then(f1,f2);                                                                          // 5447
      },                                                                                                               // 5448
      'catch': function(f1) {                                                                                          // 5449
        return this.getPromise()['catch'](f1);                                                                         // 5450
      },                                                                                                               // 5451
      'finally': function(f1) {                                                                                        // 5452
        return this.getPromise()['finally'](f1);                                                                       // 5453
      }                                                                                                                // 5454
    };                                                                                                                 // 5455
                                                                                                                       // 5456
    return function(element, options) {                                                                                // 5457
      // there is no point in applying the styles since                                                                // 5458
      // there is no animation that goes on at all in                                                                  // 5459
      // this version of $animateCss.                                                                                  // 5460
      if (options.cleanupStyles) {                                                                                     // 5461
        options.from = options.to = null;                                                                              // 5462
      }                                                                                                                // 5463
                                                                                                                       // 5464
      if (options.from) {                                                                                              // 5465
        element.css(options.from);                                                                                     // 5466
        options.from = null;                                                                                           // 5467
      }                                                                                                                // 5468
                                                                                                                       // 5469
      var closed, runner = new RAFPromise();                                                                           // 5470
      return {                                                                                                         // 5471
        start: run,                                                                                                    // 5472
        end: run                                                                                                       // 5473
      };                                                                                                               // 5474
                                                                                                                       // 5475
      function run() {                                                                                                 // 5476
        $$rAF(function() {                                                                                             // 5477
          close();                                                                                                     // 5478
          if (!closed) {                                                                                               // 5479
            runner.done();                                                                                             // 5480
          }                                                                                                            // 5481
          closed = true;                                                                                               // 5482
        });                                                                                                            // 5483
        return runner;                                                                                                 // 5484
      }                                                                                                                // 5485
                                                                                                                       // 5486
      function close() {                                                                                               // 5487
        if (options.addClass) {                                                                                        // 5488
          element.addClass(options.addClass);                                                                          // 5489
          options.addClass = null;                                                                                     // 5490
        }                                                                                                              // 5491
        if (options.removeClass) {                                                                                     // 5492
          element.removeClass(options.removeClass);                                                                    // 5493
          options.removeClass = null;                                                                                  // 5494
        }                                                                                                              // 5495
        if (options.to) {                                                                                              // 5496
          element.css(options.to);                                                                                     // 5497
          options.to = null;                                                                                           // 5498
        }                                                                                                              // 5499
      }                                                                                                                // 5500
    };                                                                                                                 // 5501
  }];                                                                                                                  // 5502
};                                                                                                                     // 5503
                                                                                                                       // 5504
/* global stripHash: true */                                                                                           // 5505
                                                                                                                       // 5506
/**                                                                                                                    // 5507
 * ! This is a private undocumented service !                                                                          // 5508
 *                                                                                                                     // 5509
 * @name $browser                                                                                                      // 5510
 * @requires $log                                                                                                      // 5511
 * @description                                                                                                        // 5512
 * This object has two goals:                                                                                          // 5513
 *                                                                                                                     // 5514
 * - hide all the global state in the browser caused by the window object                                              // 5515
 * - abstract away all the browser specific features and inconsistencies                                               // 5516
 *                                                                                                                     // 5517
 * For tests we provide {@link ngMock.$browser mock implementation} of the `$browser`                                  // 5518
 * service, which can be used for convenient testing of the application without the interaction with                   // 5519
 * the real browser apis.                                                                                              // 5520
 */                                                                                                                    // 5521
/**                                                                                                                    // 5522
 * @param {object} window The global window object.                                                                    // 5523
 * @param {object} document jQuery wrapped document.                                                                   // 5524
 * @param {object} $log window.console or an object with the same interface.                                           // 5525
 * @param {object} $sniffer $sniffer service                                                                           // 5526
 */                                                                                                                    // 5527
function Browser(window, document, $log, $sniffer) {                                                                   // 5528
  var self = this,                                                                                                     // 5529
      rawDocument = document[0],                                                                                       // 5530
      location = window.location,                                                                                      // 5531
      history = window.history,                                                                                        // 5532
      setTimeout = window.setTimeout,                                                                                  // 5533
      clearTimeout = window.clearTimeout,                                                                              // 5534
      pendingDeferIds = {};                                                                                            // 5535
                                                                                                                       // 5536
  self.isMock = false;                                                                                                 // 5537
                                                                                                                       // 5538
  var outstandingRequestCount = 0;                                                                                     // 5539
  var outstandingRequestCallbacks = [];                                                                                // 5540
                                                                                                                       // 5541
  // TODO(vojta): remove this temporary api                                                                            // 5542
  self.$$completeOutstandingRequest = completeOutstandingRequest;                                                      // 5543
  self.$$incOutstandingRequestCount = function() { outstandingRequestCount++; };                                       // 5544
                                                                                                                       // 5545
  /**                                                                                                                  // 5546
   * Executes the `fn` function(supports currying) and decrements the `outstandingRequestCallbacks`                    // 5547
   * counter. If the counter reaches 0, all the `outstandingRequestCallbacks` are executed.                            // 5548
   */                                                                                                                  // 5549
  function completeOutstandingRequest(fn) {                                                                            // 5550
    try {                                                                                                              // 5551
      fn.apply(null, sliceArgs(arguments, 1));                                                                         // 5552
    } finally {                                                                                                        // 5553
      outstandingRequestCount--;                                                                                       // 5554
      if (outstandingRequestCount === 0) {                                                                             // 5555
        while (outstandingRequestCallbacks.length) {                                                                   // 5556
          try {                                                                                                        // 5557
            outstandingRequestCallbacks.pop()();                                                                       // 5558
          } catch (e) {                                                                                                // 5559
            $log.error(e);                                                                                             // 5560
          }                                                                                                            // 5561
        }                                                                                                              // 5562
      }                                                                                                                // 5563
    }                                                                                                                  // 5564
  }                                                                                                                    // 5565
                                                                                                                       // 5566
  function getHash(url) {                                                                                              // 5567
    var index = url.indexOf('#');                                                                                      // 5568
    return index === -1 ? '' : url.substr(index);                                                                      // 5569
  }                                                                                                                    // 5570
                                                                                                                       // 5571
  /**                                                                                                                  // 5572
   * @private                                                                                                          // 5573
   * Note: this method is used only by scenario runner                                                                 // 5574
   * TODO(vojta): prefix this method with $$ ?                                                                         // 5575
   * @param {function()} callback Function that will be called when no outstanding request                             // 5576
   */                                                                                                                  // 5577
  self.notifyWhenNoOutstandingRequests = function(callback) {                                                          // 5578
    if (outstandingRequestCount === 0) {                                                                               // 5579
      callback();                                                                                                      // 5580
    } else {                                                                                                           // 5581
      outstandingRequestCallbacks.push(callback);                                                                      // 5582
    }                                                                                                                  // 5583
  };                                                                                                                   // 5584
                                                                                                                       // 5585
  //////////////////////////////////////////////////////////////                                                       // 5586
  // URL API                                                                                                           // 5587
  //////////////////////////////////////////////////////////////                                                       // 5588
                                                                                                                       // 5589
  var cachedState, lastHistoryState,                                                                                   // 5590
      lastBrowserUrl = location.href,                                                                                  // 5591
      baseElement = document.find('base'),                                                                             // 5592
      pendingLocation = null;                                                                                          // 5593
                                                                                                                       // 5594
  cacheState();                                                                                                        // 5595
  lastHistoryState = cachedState;                                                                                      // 5596
                                                                                                                       // 5597
  /**                                                                                                                  // 5598
   * @name $browser#url                                                                                                // 5599
   *                                                                                                                   // 5600
   * @description                                                                                                      // 5601
   * GETTER:                                                                                                           // 5602
   * Without any argument, this method just returns current value of location.href.                                    // 5603
   *                                                                                                                   // 5604
   * SETTER:                                                                                                           // 5605
   * With at least one argument, this method sets url to new value.                                                    // 5606
   * If html5 history api supported, pushState/replaceState is used, otherwise                                         // 5607
   * location.href/location.replace is used.                                                                           // 5608
   * Returns its own instance to allow chaining                                                                        // 5609
   *                                                                                                                   // 5610
   * NOTE: this api is intended for use only by the $location service. Please use the                                  // 5611
   * {@link ng.$location $location service} to change url.                                                             // 5612
   *                                                                                                                   // 5613
   * @param {string} url New url (when used as setter)                                                                 // 5614
   * @param {boolean=} replace Should new url replace current history record?                                          // 5615
   * @param {object=} state object to use with pushState/replaceState                                                  // 5616
   */                                                                                                                  // 5617
  self.url = function(url, replace, state) {                                                                           // 5618
    // In modern browsers `history.state` is `null` by default; treating it separately                                 // 5619
    // from `undefined` would cause `$browser.url('/foo')` to change `history.state`                                   // 5620
    // to undefined via `pushState`. Instead, let's change `undefined` to `null` here.                                 // 5621
    if (isUndefined(state)) {                                                                                          // 5622
      state = null;                                                                                                    // 5623
    }                                                                                                                  // 5624
                                                                                                                       // 5625
    // Android Browser BFCache causes location, history reference to become stale.                                     // 5626
    if (location !== window.location) location = window.location;                                                      // 5627
    if (history !== window.history) history = window.history;                                                          // 5628
                                                                                                                       // 5629
    // setter                                                                                                          // 5630
    if (url) {                                                                                                         // 5631
      var sameState = lastHistoryState === state;                                                                      // 5632
                                                                                                                       // 5633
      // Don't change anything if previous and current URLs and states match. This also prevents                       // 5634
      // IE<10 from getting into redirect loop when in LocationHashbangInHtml5Url mode.                                // 5635
      // See https://github.com/angular/angular.js/commit/ffb2701                                                      // 5636
      if (lastBrowserUrl === url && (!$sniffer.history || sameState)) {                                                // 5637
        return self;                                                                                                   // 5638
      }                                                                                                                // 5639
      var sameBase = lastBrowserUrl && stripHash(lastBrowserUrl) === stripHash(url);                                   // 5640
      lastBrowserUrl = url;                                                                                            // 5641
      lastHistoryState = state;                                                                                        // 5642
      // Don't use history API if only the hash changed                                                                // 5643
      // due to a bug in IE10/IE11 which leads                                                                         // 5644
      // to not firing a `hashchange` nor `popstate` event                                                             // 5645
      // in some cases (see #9143).                                                                                    // 5646
      if ($sniffer.history && (!sameBase || !sameState)) {                                                             // 5647
        history[replace ? 'replaceState' : 'pushState'](state, '', url);                                               // 5648
        cacheState();                                                                                                  // 5649
        // Do the assignment again so that those two variables are referentially identical.                            // 5650
        lastHistoryState = cachedState;                                                                                // 5651
      } else {                                                                                                         // 5652
        if (!sameBase || pendingLocation) {                                                                            // 5653
          pendingLocation = url;                                                                                       // 5654
        }                                                                                                              // 5655
        if (replace) {                                                                                                 // 5656
          location.replace(url);                                                                                       // 5657
        } else if (!sameBase) {                                                                                        // 5658
          location.href = url;                                                                                         // 5659
        } else {                                                                                                       // 5660
          location.hash = getHash(url);                                                                                // 5661
        }                                                                                                              // 5662
        if (location.href !== url) {                                                                                   // 5663
          pendingLocation = url;                                                                                       // 5664
        }                                                                                                              // 5665
      }                                                                                                                // 5666
      return self;                                                                                                     // 5667
    // getter                                                                                                          // 5668
    } else {                                                                                                           // 5669
      // - pendingLocation is needed as browsers don't allow to read out                                               // 5670
      //   the new location.href if a reload happened or if there is a bug like in iOS 9 (see                          // 5671
      //   https://openradar.appspot.com/22186109).                                                                    // 5672
      // - the replacement is a workaround for https://bugzilla.mozilla.org/show_bug.cgi?id=407172                     // 5673
      return pendingLocation || location.href.replace(/%27/g,"'");                                                     // 5674
    }                                                                                                                  // 5675
  };                                                                                                                   // 5676
                                                                                                                       // 5677
  /**                                                                                                                  // 5678
   * @name $browser#state                                                                                              // 5679
   *                                                                                                                   // 5680
   * @description                                                                                                      // 5681
   * This method is a getter.                                                                                          // 5682
   *                                                                                                                   // 5683
   * Return history.state or null if history.state is undefined.                                                       // 5684
   *                                                                                                                   // 5685
   * @returns {object} state                                                                                           // 5686
   */                                                                                                                  // 5687
  self.state = function() {                                                                                            // 5688
    return cachedState;                                                                                                // 5689
  };                                                                                                                   // 5690
                                                                                                                       // 5691
  var urlChangeListeners = [],                                                                                         // 5692
      urlChangeInit = false;                                                                                           // 5693
                                                                                                                       // 5694
  function cacheStateAndFireUrlChange() {                                                                              // 5695
    pendingLocation = null;                                                                                            // 5696
    cacheState();                                                                                                      // 5697
    fireUrlChange();                                                                                                   // 5698
  }                                                                                                                    // 5699
                                                                                                                       // 5700
  function getCurrentState() {                                                                                         // 5701
    try {                                                                                                              // 5702
      return history.state;                                                                                            // 5703
    } catch (e) {                                                                                                      // 5704
      // MSIE can reportedly throw when there is no state (UNCONFIRMED).                                               // 5705
    }                                                                                                                  // 5706
  }                                                                                                                    // 5707
                                                                                                                       // 5708
  // This variable should be used *only* inside the cacheState function.                                               // 5709
  var lastCachedState = null;                                                                                          // 5710
  function cacheState() {                                                                                              // 5711
    // This should be the only place in $browser where `history.state` is read.                                        // 5712
    cachedState = getCurrentState();                                                                                   // 5713
    cachedState = isUndefined(cachedState) ? null : cachedState;                                                       // 5714
                                                                                                                       // 5715
    // Prevent callbacks fo fire twice if both hashchange & popstate were fired.                                       // 5716
    if (equals(cachedState, lastCachedState)) {                                                                        // 5717
      cachedState = lastCachedState;                                                                                   // 5718
    }                                                                                                                  // 5719
    lastCachedState = cachedState;                                                                                     // 5720
  }                                                                                                                    // 5721
                                                                                                                       // 5722
  function fireUrlChange() {                                                                                           // 5723
    if (lastBrowserUrl === self.url() && lastHistoryState === cachedState) {                                           // 5724
      return;                                                                                                          // 5725
    }                                                                                                                  // 5726
                                                                                                                       // 5727
    lastBrowserUrl = self.url();                                                                                       // 5728
    lastHistoryState = cachedState;                                                                                    // 5729
    forEach(urlChangeListeners, function(listener) {                                                                   // 5730
      listener(self.url(), cachedState);                                                                               // 5731
    });                                                                                                                // 5732
  }                                                                                                                    // 5733
                                                                                                                       // 5734
  /**                                                                                                                  // 5735
   * @name $browser#onUrlChange                                                                                        // 5736
   *                                                                                                                   // 5737
   * @description                                                                                                      // 5738
   * Register callback function that will be called, when url changes.                                                 // 5739
   *                                                                                                                   // 5740
   * It's only called when the url is changed from outside of angular:                                                 // 5741
   * - user types different url into address bar                                                                       // 5742
   * - user clicks on history (forward/back) button                                                                    // 5743
   * - user clicks on a link                                                                                           // 5744
   *                                                                                                                   // 5745
   * It's not called when url is changed by $browser.url() method                                                      // 5746
   *                                                                                                                   // 5747
   * The listener gets called with new url as parameter.                                                               // 5748
   *                                                                                                                   // 5749
   * NOTE: this api is intended for use only by the $location service. Please use the                                  // 5750
   * {@link ng.$location $location service} to monitor url changes in angular apps.                                    // 5751
   *                                                                                                                   // 5752
   * @param {function(string)} listener Listener function to be called when url changes.                               // 5753
   * @return {function(string)} Returns the registered listener fn - handy if the fn is anonymous.                     // 5754
   */                                                                                                                  // 5755
  self.onUrlChange = function(callback) {                                                                              // 5756
    // TODO(vojta): refactor to use node's syntax for events                                                           // 5757
    if (!urlChangeInit) {                                                                                              // 5758
      // We listen on both (hashchange/popstate) when available, as some browsers (e.g. Opera)                         // 5759
      // don't fire popstate when user change the address bar and don't fire hashchange when url                       // 5760
      // changed by push/replaceState                                                                                  // 5761
                                                                                                                       // 5762
      // html5 history api - popstate event                                                                            // 5763
      if ($sniffer.history) jqLite(window).on('popstate', cacheStateAndFireUrlChange);                                 // 5764
      // hashchange event                                                                                              // 5765
      jqLite(window).on('hashchange', cacheStateAndFireUrlChange);                                                     // 5766
                                                                                                                       // 5767
      urlChangeInit = true;                                                                                            // 5768
    }                                                                                                                  // 5769
                                                                                                                       // 5770
    urlChangeListeners.push(callback);                                                                                 // 5771
    return callback;                                                                                                   // 5772
  };                                                                                                                   // 5773
                                                                                                                       // 5774
  /**                                                                                                                  // 5775
   * @private                                                                                                          // 5776
   * Remove popstate and hashchange handler from window.                                                               // 5777
   *                                                                                                                   // 5778
   * NOTE: this api is intended for use only by $rootScope.                                                            // 5779
   */                                                                                                                  // 5780
  self.$$applicationDestroyed = function() {                                                                           // 5781
    jqLite(window).off('hashchange popstate', cacheStateAndFireUrlChange);                                             // 5782
  };                                                                                                                   // 5783
                                                                                                                       // 5784
  /**                                                                                                                  // 5785
   * Checks whether the url has changed outside of Angular.                                                            // 5786
   * Needs to be exported to be able to check for changes that have been done in sync,                                 // 5787
   * as hashchange/popstate events fire in async.                                                                      // 5788
   */                                                                                                                  // 5789
  self.$$checkUrlChange = fireUrlChange;                                                                               // 5790
                                                                                                                       // 5791
  //////////////////////////////////////////////////////////////                                                       // 5792
  // Misc API                                                                                                          // 5793
  //////////////////////////////////////////////////////////////                                                       // 5794
                                                                                                                       // 5795
  /**                                                                                                                  // 5796
   * @name $browser#baseHref                                                                                           // 5797
   *                                                                                                                   // 5798
   * @description                                                                                                      // 5799
   * Returns current <base href>                                                                                       // 5800
   * (always relative - without domain)                                                                                // 5801
   *                                                                                                                   // 5802
   * @returns {string} The current base href                                                                           // 5803
   */                                                                                                                  // 5804
  self.baseHref = function() {                                                                                         // 5805
    var href = baseElement.attr('href');                                                                               // 5806
    return href ? href.replace(/^(https?\:)?\/\/[^\/]*/, '') : '';                                                     // 5807
  };                                                                                                                   // 5808
                                                                                                                       // 5809
  /**                                                                                                                  // 5810
   * @name $browser#defer                                                                                              // 5811
   * @param {function()} fn A function, who's execution should be deferred.                                            // 5812
   * @param {number=} [delay=0] of milliseconds to defer the function execution.                                       // 5813
   * @returns {*} DeferId that can be used to cancel the task via `$browser.defer.cancel()`.                           // 5814
   *                                                                                                                   // 5815
   * @description                                                                                                      // 5816
   * Executes a fn asynchronously via `setTimeout(fn, delay)`.                                                         // 5817
   *                                                                                                                   // 5818
   * Unlike when calling `setTimeout` directly, in test this function is mocked and instead of using                   // 5819
   * `setTimeout` in tests, the fns are queued in an array, which can be programmatically flushed                      // 5820
   * via `$browser.defer.flush()`.                                                                                     // 5821
   *                                                                                                                   // 5822
   */                                                                                                                  // 5823
  self.defer = function(fn, delay) {                                                                                   // 5824
    var timeoutId;                                                                                                     // 5825
    outstandingRequestCount++;                                                                                         // 5826
    timeoutId = setTimeout(function() {                                                                                // 5827
      delete pendingDeferIds[timeoutId];                                                                               // 5828
      completeOutstandingRequest(fn);                                                                                  // 5829
    }, delay || 0);                                                                                                    // 5830
    pendingDeferIds[timeoutId] = true;                                                                                 // 5831
    return timeoutId;                                                                                                  // 5832
  };                                                                                                                   // 5833
                                                                                                                       // 5834
                                                                                                                       // 5835
  /**                                                                                                                  // 5836
   * @name $browser#defer.cancel                                                                                       // 5837
   *                                                                                                                   // 5838
   * @description                                                                                                      // 5839
   * Cancels a deferred task identified with `deferId`.                                                                // 5840
   *                                                                                                                   // 5841
   * @param {*} deferId Token returned by the `$browser.defer` function.                                               // 5842
   * @returns {boolean} Returns `true` if the task hasn't executed yet and was successfully                            // 5843
   *                    canceled.                                                                                      // 5844
   */                                                                                                                  // 5845
  self.defer.cancel = function(deferId) {                                                                              // 5846
    if (pendingDeferIds[deferId]) {                                                                                    // 5847
      delete pendingDeferIds[deferId];                                                                                 // 5848
      clearTimeout(deferId);                                                                                           // 5849
      completeOutstandingRequest(noop);                                                                                // 5850
      return true;                                                                                                     // 5851
    }                                                                                                                  // 5852
    return false;                                                                                                      // 5853
  };                                                                                                                   // 5854
                                                                                                                       // 5855
}                                                                                                                      // 5856
                                                                                                                       // 5857
function $BrowserProvider() {                                                                                          // 5858
  this.$get = ['$window', '$log', '$sniffer', '$document',                                                             // 5859
      function($window, $log, $sniffer, $document) {                                                                   // 5860
        return new Browser($window, $document, $log, $sniffer);                                                        // 5861
      }];                                                                                                              // 5862
}                                                                                                                      // 5863
                                                                                                                       // 5864
/**                                                                                                                    // 5865
 * @ngdoc service                                                                                                      // 5866
 * @name $cacheFactory                                                                                                 // 5867
 *                                                                                                                     // 5868
 * @description                                                                                                        // 5869
 * Factory that constructs {@link $cacheFactory.Cache Cache} objects and gives access to                               // 5870
 * them.                                                                                                               // 5871
 *                                                                                                                     // 5872
 * ```js                                                                                                               // 5873
 *                                                                                                                     // 5874
 *  var cache = $cacheFactory('cacheId');                                                                              // 5875
 *  expect($cacheFactory.get('cacheId')).toBe(cache);                                                                  // 5876
 *  expect($cacheFactory.get('noSuchCacheId')).not.toBeDefined();                                                      // 5877
 *                                                                                                                     // 5878
 *  cache.put("key", "value");                                                                                         // 5879
 *  cache.put("another key", "another value");                                                                         // 5880
 *                                                                                                                     // 5881
 *  // We've specified no options on creation                                                                          // 5882
 *  expect(cache.info()).toEqual({id: 'cacheId', size: 2});                                                            // 5883
 *                                                                                                                     // 5884
 * ```                                                                                                                 // 5885
 *                                                                                                                     // 5886
 *                                                                                                                     // 5887
 * @param {string} cacheId Name or id of the newly created cache.                                                      // 5888
 * @param {object=} options Options object that specifies the cache behavior. Properties:                              // 5889
 *                                                                                                                     // 5890
 *   - `{number=}` `capacity` — turns the cache into LRU cache.                                                        // 5891
 *                                                                                                                     // 5892
 * @returns {object} Newly created cache object with the following set of methods:                                     // 5893
 *                                                                                                                     // 5894
 * - `{object}` `info()` — Returns id, size, and options of cache.                                                     // 5895
 * - `{{*}}` `put({string} key, {*} value)` — Puts a new key-value pair into the cache and returns                     // 5896
 *   it.                                                                                                               // 5897
 * - `{{*}}` `get({string} key)` — Returns cached value for `key` or undefined for cache miss.                         // 5898
 * - `{void}` `remove({string} key)` — Removes a key-value pair from the cache.                                        // 5899
 * - `{void}` `removeAll()` — Removes all cached values.                                                               // 5900
 * - `{void}` `destroy()` — Removes references to this cache from $cacheFactory.                                       // 5901
 *                                                                                                                     // 5902
 * @example                                                                                                            // 5903
   <example module="cacheExampleApp">                                                                                  // 5904
     <file name="index.html">                                                                                          // 5905
       <div ng-controller="CacheController">                                                                           // 5906
         <input ng-model="newCacheKey" placeholder="Key">                                                              // 5907
         <input ng-model="newCacheValue" placeholder="Value">                                                          // 5908
         <button ng-click="put(newCacheKey, newCacheValue)">Cache</button>                                             // 5909
                                                                                                                       // 5910
         <p ng-if="keys.length">Cached Values</p>                                                                      // 5911
         <div ng-repeat="key in keys">                                                                                 // 5912
           <span ng-bind="key"></span>                                                                                 // 5913
           <span>: </span>                                                                                             // 5914
           <b ng-bind="cache.get(key)"></b>                                                                            // 5915
         </div>                                                                                                        // 5916
                                                                                                                       // 5917
         <p>Cache Info</p>                                                                                             // 5918
         <div ng-repeat="(key, value) in cache.info()">                                                                // 5919
           <span ng-bind="key"></span>                                                                                 // 5920
           <span>: </span>                                                                                             // 5921
           <b ng-bind="value"></b>                                                                                     // 5922
         </div>                                                                                                        // 5923
       </div>                                                                                                          // 5924
     </file>                                                                                                           // 5925
     <file name="script.js">                                                                                           // 5926
       angular.module('cacheExampleApp', []).                                                                          // 5927
         controller('CacheController', ['$scope', '$cacheFactory', function($scope, $cacheFactory) {                   // 5928
           $scope.keys = [];                                                                                           // 5929
           $scope.cache = $cacheFactory('cacheId');                                                                    // 5930
           $scope.put = function(key, value) {                                                                         // 5931
             if (angular.isUndefined($scope.cache.get(key))) {                                                         // 5932
               $scope.keys.push(key);                                                                                  // 5933
             }                                                                                                         // 5934
             $scope.cache.put(key, angular.isUndefined(value) ? null : value);                                         // 5935
           };                                                                                                          // 5936
         }]);                                                                                                          // 5937
     </file>                                                                                                           // 5938
     <file name="style.css">                                                                                           // 5939
       p {                                                                                                             // 5940
         margin: 10px 0 3px;                                                                                           // 5941
       }                                                                                                               // 5942
     </file>                                                                                                           // 5943
   </example>                                                                                                          // 5944
 */                                                                                                                    // 5945
function $CacheFactoryProvider() {                                                                                     // 5946
                                                                                                                       // 5947
  this.$get = function() {                                                                                             // 5948
    var caches = {};                                                                                                   // 5949
                                                                                                                       // 5950
    function cacheFactory(cacheId, options) {                                                                          // 5951
      if (cacheId in caches) {                                                                                         // 5952
        throw minErr('$cacheFactory')('iid', "CacheId '{0}' is already taken!", cacheId);                              // 5953
      }                                                                                                                // 5954
                                                                                                                       // 5955
      var size = 0,                                                                                                    // 5956
          stats = extend({}, options, {id: cacheId}),                                                                  // 5957
          data = createMap(),                                                                                          // 5958
          capacity = (options && options.capacity) || Number.MAX_VALUE,                                                // 5959
          lruHash = createMap(),                                                                                       // 5960
          freshEnd = null,                                                                                             // 5961
          staleEnd = null;                                                                                             // 5962
                                                                                                                       // 5963
      /**                                                                                                              // 5964
       * @ngdoc type                                                                                                   // 5965
       * @name $cacheFactory.Cache                                                                                     // 5966
       *                                                                                                               // 5967
       * @description                                                                                                  // 5968
       * A cache object used to store and retrieve data, primarily used by                                             // 5969
       * {@link $http $http} and the {@link ng.directive:script script} directive to cache                             // 5970
       * templates and other data.                                                                                     // 5971
       *                                                                                                               // 5972
       * ```js                                                                                                         // 5973
       *  angular.module('superCache')                                                                                 // 5974
       *    .factory('superCache', ['$cacheFactory', function($cacheFactory) {                                         // 5975
       *      return $cacheFactory('super-cache');                                                                     // 5976
       *    }]);                                                                                                       // 5977
       * ```                                                                                                           // 5978
       *                                                                                                               // 5979
       * Example test:                                                                                                 // 5980
       *                                                                                                               // 5981
       * ```js                                                                                                         // 5982
       *  it('should behave like a cache', inject(function(superCache) {                                               // 5983
       *    superCache.put('key', 'value');                                                                            // 5984
       *    superCache.put('another key', 'another value');                                                            // 5985
       *                                                                                                               // 5986
       *    expect(superCache.info()).toEqual({                                                                        // 5987
       *      id: 'super-cache',                                                                                       // 5988
       *      size: 2                                                                                                  // 5989
       *    });                                                                                                        // 5990
       *                                                                                                               // 5991
       *    superCache.remove('another key');                                                                          // 5992
       *    expect(superCache.get('another key')).toBeUndefined();                                                     // 5993
       *                                                                                                               // 5994
       *    superCache.removeAll();                                                                                    // 5995
       *    expect(superCache.info()).toEqual({                                                                        // 5996
       *      id: 'super-cache',                                                                                       // 5997
       *      size: 0                                                                                                  // 5998
       *    });                                                                                                        // 5999
       *  }));                                                                                                         // 6000
       * ```                                                                                                           // 6001
       */                                                                                                              // 6002
      return caches[cacheId] = {                                                                                       // 6003
                                                                                                                       // 6004
        /**                                                                                                            // 6005
         * @ngdoc method                                                                                               // 6006
         * @name $cacheFactory.Cache#put                                                                               // 6007
         * @kind function                                                                                              // 6008
         *                                                                                                             // 6009
         * @description                                                                                                // 6010
         * Inserts a named entry into the {@link $cacheFactory.Cache Cache} object to be                               // 6011
         * retrieved later, and incrementing the size of the cache if the key was not already                          // 6012
         * present in the cache. If behaving like an LRU cache, it will also remove stale                              // 6013
         * entries from the set.                                                                                       // 6014
         *                                                                                                             // 6015
         * It will not insert undefined values into the cache.                                                         // 6016
         *                                                                                                             // 6017
         * @param {string} key the key under which the cached data is stored.                                          // 6018
         * @param {*} value the value to store alongside the key. If it is undefined, the key                          // 6019
         *    will not be stored.                                                                                      // 6020
         * @returns {*} the value stored.                                                                              // 6021
         */                                                                                                            // 6022
        put: function(key, value) {                                                                                    // 6023
          if (isUndefined(value)) return;                                                                              // 6024
          if (capacity < Number.MAX_VALUE) {                                                                           // 6025
            var lruEntry = lruHash[key] || (lruHash[key] = {key: key});                                                // 6026
                                                                                                                       // 6027
            refresh(lruEntry);                                                                                         // 6028
          }                                                                                                            // 6029
                                                                                                                       // 6030
          if (!(key in data)) size++;                                                                                  // 6031
          data[key] = value;                                                                                           // 6032
                                                                                                                       // 6033
          if (size > capacity) {                                                                                       // 6034
            this.remove(staleEnd.key);                                                                                 // 6035
          }                                                                                                            // 6036
                                                                                                                       // 6037
          return value;                                                                                                // 6038
        },                                                                                                             // 6039
                                                                                                                       // 6040
        /**                                                                                                            // 6041
         * @ngdoc method                                                                                               // 6042
         * @name $cacheFactory.Cache#get                                                                               // 6043
         * @kind function                                                                                              // 6044
         *                                                                                                             // 6045
         * @description                                                                                                // 6046
         * Retrieves named data stored in the {@link $cacheFactory.Cache Cache} object.                                // 6047
         *                                                                                                             // 6048
         * @param {string} key the key of the data to be retrieved                                                     // 6049
         * @returns {*} the value stored.                                                                              // 6050
         */                                                                                                            // 6051
        get: function(key) {                                                                                           // 6052
          if (capacity < Number.MAX_VALUE) {                                                                           // 6053
            var lruEntry = lruHash[key];                                                                               // 6054
                                                                                                                       // 6055
            if (!lruEntry) return;                                                                                     // 6056
                                                                                                                       // 6057
            refresh(lruEntry);                                                                                         // 6058
          }                                                                                                            // 6059
                                                                                                                       // 6060
          return data[key];                                                                                            // 6061
        },                                                                                                             // 6062
                                                                                                                       // 6063
                                                                                                                       // 6064
        /**                                                                                                            // 6065
         * @ngdoc method                                                                                               // 6066
         * @name $cacheFactory.Cache#remove                                                                            // 6067
         * @kind function                                                                                              // 6068
         *                                                                                                             // 6069
         * @description                                                                                                // 6070
         * Removes an entry from the {@link $cacheFactory.Cache Cache} object.                                         // 6071
         *                                                                                                             // 6072
         * @param {string} key the key of the entry to be removed                                                      // 6073
         */                                                                                                            // 6074
        remove: function(key) {                                                                                        // 6075
          if (capacity < Number.MAX_VALUE) {                                                                           // 6076
            var lruEntry = lruHash[key];                                                                               // 6077
                                                                                                                       // 6078
            if (!lruEntry) return;                                                                                     // 6079
                                                                                                                       // 6080
            if (lruEntry == freshEnd) freshEnd = lruEntry.p;                                                           // 6081
            if (lruEntry == staleEnd) staleEnd = lruEntry.n;                                                           // 6082
            link(lruEntry.n,lruEntry.p);                                                                               // 6083
                                                                                                                       // 6084
            delete lruHash[key];                                                                                       // 6085
          }                                                                                                            // 6086
                                                                                                                       // 6087
          if (!(key in data)) return;                                                                                  // 6088
                                                                                                                       // 6089
          delete data[key];                                                                                            // 6090
          size--;                                                                                                      // 6091
        },                                                                                                             // 6092
                                                                                                                       // 6093
                                                                                                                       // 6094
        /**                                                                                                            // 6095
         * @ngdoc method                                                                                               // 6096
         * @name $cacheFactory.Cache#removeAll                                                                         // 6097
         * @kind function                                                                                              // 6098
         *                                                                                                             // 6099
         * @description                                                                                                // 6100
         * Clears the cache object of any entries.                                                                     // 6101
         */                                                                                                            // 6102
        removeAll: function() {                                                                                        // 6103
          data = createMap();                                                                                          // 6104
          size = 0;                                                                                                    // 6105
          lruHash = createMap();                                                                                       // 6106
          freshEnd = staleEnd = null;                                                                                  // 6107
        },                                                                                                             // 6108
                                                                                                                       // 6109
                                                                                                                       // 6110
        /**                                                                                                            // 6111
         * @ngdoc method                                                                                               // 6112
         * @name $cacheFactory.Cache#destroy                                                                           // 6113
         * @kind function                                                                                              // 6114
         *                                                                                                             // 6115
         * @description                                                                                                // 6116
         * Destroys the {@link $cacheFactory.Cache Cache} object entirely,                                             // 6117
         * removing it from the {@link $cacheFactory $cacheFactory} set.                                               // 6118
         */                                                                                                            // 6119
        destroy: function() {                                                                                          // 6120
          data = null;                                                                                                 // 6121
          stats = null;                                                                                                // 6122
          lruHash = null;                                                                                              // 6123
          delete caches[cacheId];                                                                                      // 6124
        },                                                                                                             // 6125
                                                                                                                       // 6126
                                                                                                                       // 6127
        /**                                                                                                            // 6128
         * @ngdoc method                                                                                               // 6129
         * @name $cacheFactory.Cache#info                                                                              // 6130
         * @kind function                                                                                              // 6131
         *                                                                                                             // 6132
         * @description                                                                                                // 6133
         * Retrieve information regarding a particular {@link $cacheFactory.Cache Cache}.                              // 6134
         *                                                                                                             // 6135
         * @returns {object} an object with the following properties:                                                  // 6136
         *   <ul>                                                                                                      // 6137
         *     <li>**id**: the id of the cache instance</li>                                                           // 6138
         *     <li>**size**: the number of entries kept in the cache instance</li>                                     // 6139
         *     <li>**...**: any additional properties from the options object when creating the                        // 6140
         *       cache.</li>                                                                                           // 6141
         *   </ul>                                                                                                     // 6142
         */                                                                                                            // 6143
        info: function() {                                                                                             // 6144
          return extend({}, stats, {size: size});                                                                      // 6145
        }                                                                                                              // 6146
      };                                                                                                               // 6147
                                                                                                                       // 6148
                                                                                                                       // 6149
      /**                                                                                                              // 6150
       * makes the `entry` the freshEnd of the LRU linked list                                                         // 6151
       */                                                                                                              // 6152
      function refresh(entry) {                                                                                        // 6153
        if (entry != freshEnd) {                                                                                       // 6154
          if (!staleEnd) {                                                                                             // 6155
            staleEnd = entry;                                                                                          // 6156
          } else if (staleEnd == entry) {                                                                              // 6157
            staleEnd = entry.n;                                                                                        // 6158
          }                                                                                                            // 6159
                                                                                                                       // 6160
          link(entry.n, entry.p);                                                                                      // 6161
          link(entry, freshEnd);                                                                                       // 6162
          freshEnd = entry;                                                                                            // 6163
          freshEnd.n = null;                                                                                           // 6164
        }                                                                                                              // 6165
      }                                                                                                                // 6166
                                                                                                                       // 6167
                                                                                                                       // 6168
      /**                                                                                                              // 6169
       * bidirectionally links two entries of the LRU linked list                                                      // 6170
       */                                                                                                              // 6171
      function link(nextEntry, prevEntry) {                                                                            // 6172
        if (nextEntry != prevEntry) {                                                                                  // 6173
          if (nextEntry) nextEntry.p = prevEntry; //p stands for previous, 'prev' didn't minify                        // 6174
          if (prevEntry) prevEntry.n = nextEntry; //n stands for next, 'next' didn't minify                            // 6175
        }                                                                                                              // 6176
      }                                                                                                                // 6177
    }                                                                                                                  // 6178
                                                                                                                       // 6179
                                                                                                                       // 6180
  /**                                                                                                                  // 6181
   * @ngdoc method                                                                                                     // 6182
   * @name $cacheFactory#info                                                                                          // 6183
   *                                                                                                                   // 6184
   * @description                                                                                                      // 6185
   * Get information about all the caches that have been created                                                       // 6186
   *                                                                                                                   // 6187
   * @returns {Object} - key-value map of `cacheId` to the result of calling `cache#info`                              // 6188
   */                                                                                                                  // 6189
    cacheFactory.info = function() {                                                                                   // 6190
      var info = {};                                                                                                   // 6191
      forEach(caches, function(cache, cacheId) {                                                                       // 6192
        info[cacheId] = cache.info();                                                                                  // 6193
      });                                                                                                              // 6194
      return info;                                                                                                     // 6195
    };                                                                                                                 // 6196
                                                                                                                       // 6197
                                                                                                                       // 6198
  /**                                                                                                                  // 6199
   * @ngdoc method                                                                                                     // 6200
   * @name $cacheFactory#get                                                                                           // 6201
   *                                                                                                                   // 6202
   * @description                                                                                                      // 6203
   * Get access to a cache object by the `cacheId` used when it was created.                                           // 6204
   *                                                                                                                   // 6205
   * @param {string} cacheId Name or id of a cache to access.                                                          // 6206
   * @returns {object} Cache object identified by the cacheId or undefined if no such cache.                           // 6207
   */                                                                                                                  // 6208
    cacheFactory.get = function(cacheId) {                                                                             // 6209
      return caches[cacheId];                                                                                          // 6210
    };                                                                                                                 // 6211
                                                                                                                       // 6212
                                                                                                                       // 6213
    return cacheFactory;                                                                                               // 6214
  };                                                                                                                   // 6215
}                                                                                                                      // 6216
                                                                                                                       // 6217
/**                                                                                                                    // 6218
 * @ngdoc service                                                                                                      // 6219
 * @name $templateCache                                                                                                // 6220
 *                                                                                                                     // 6221
 * @description                                                                                                        // 6222
 * The first time a template is used, it is loaded in the template cache for quick retrieval. You                      // 6223
 * can load templates directly into the cache in a `script` tag, or by consuming the                                   // 6224
 * `$templateCache` service directly.                                                                                  // 6225
 *                                                                                                                     // 6226
 * Adding via the `script` tag:                                                                                        // 6227
 *                                                                                                                     // 6228
 * ```html                                                                                                             // 6229
 *   <script type="text/ng-template" id="templateId.html">                                                             // 6230
 *     <p>This is the content of the template</p>                                                                      // 6231
 *   </script>                                                                                                         // 6232
 * ```                                                                                                                 // 6233
 *                                                                                                                     // 6234
 * **Note:** the `script` tag containing the template does not need to be included in the `head` of                    // 6235
 * the document, but it must be a descendent of the {@link ng.$rootElement $rootElement} (IE,                          // 6236
 * element with ng-app attribute), otherwise the template will be ignored.                                             // 6237
 *                                                                                                                     // 6238
 * Adding via the `$templateCache` service:                                                                            // 6239
 *                                                                                                                     // 6240
 * ```js                                                                                                               // 6241
 * var myApp = angular.module('myApp', []);                                                                            // 6242
 * myApp.run(function($templateCache) {                                                                                // 6243
 *   $templateCache.put('templateId.html', 'This is the content of the template');                                     // 6244
 * });                                                                                                                 // 6245
 * ```                                                                                                                 // 6246
 *                                                                                                                     // 6247
 * To retrieve the template later, simply use it in your HTML:                                                         // 6248
 * ```html                                                                                                             // 6249
 * <div ng-include=" 'templateId.html' "></div>                                                                        // 6250
 * ```                                                                                                                 // 6251
 *                                                                                                                     // 6252
 * or get it via Javascript:                                                                                           // 6253
 * ```js                                                                                                               // 6254
 * $templateCache.get('templateId.html')                                                                               // 6255
 * ```                                                                                                                 // 6256
 *                                                                                                                     // 6257
 * See {@link ng.$cacheFactory $cacheFactory}.                                                                         // 6258
 *                                                                                                                     // 6259
 */                                                                                                                    // 6260
function $TemplateCacheProvider() {                                                                                    // 6261
  this.$get = ['$cacheFactory', function($cacheFactory) {                                                              // 6262
    return $cacheFactory('templates');                                                                                 // 6263
  }];                                                                                                                  // 6264
}                                                                                                                      // 6265
                                                                                                                       // 6266
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *                                           // 6267
 *     Any commits to this file should be reviewed with security in mind.  *                                           // 6268
 *   Changes to this file can potentially create security vulnerabilities. *                                           // 6269
 *          An approval from 2 Core members with history of modifying      *                                           // 6270
 *                         this file is required.                          *                                           // 6271
 *                                                                         *                                           // 6272
 *  Does the change somehow allow for arbitrary javascript to be executed? *                                           // 6273
 *    Or allows for someone to change the prototype of built-in objects?   *                                           // 6274
 *     Or gives undesired access to variables likes document or window?    *                                           // 6275
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */                                          // 6276
                                                                                                                       // 6277
/* ! VARIABLE/FUNCTION NAMING CONVENTIONS THAT APPLY TO THIS FILE!                                                     // 6278
 *                                                                                                                     // 6279
 * DOM-related variables:                                                                                              // 6280
 *                                                                                                                     // 6281
 * - "node" - DOM Node                                                                                                 // 6282
 * - "element" - DOM Element or Node                                                                                   // 6283
 * - "$node" or "$element" - jqLite-wrapped node or element                                                            // 6284
 *                                                                                                                     // 6285
 *                                                                                                                     // 6286
 * Compiler related stuff:                                                                                             // 6287
 *                                                                                                                     // 6288
 * - "linkFn" - linking fn of a single directive                                                                       // 6289
 * - "nodeLinkFn" - function that aggregates all linking fns for a particular node                                     // 6290
 * - "childLinkFn" -  function that aggregates all linking fns for child nodes of a particular node                    // 6291
 * - "compositeLinkFn" - function that aggregates all linking fns for a compilation root (nodeList)                    // 6292
 */                                                                                                                    // 6293
                                                                                                                       // 6294
                                                                                                                       // 6295
/**                                                                                                                    // 6296
 * @ngdoc service                                                                                                      // 6297
 * @name $compile                                                                                                      // 6298
 * @kind function                                                                                                      // 6299
 *                                                                                                                     // 6300
 * @description                                                                                                        // 6301
 * Compiles an HTML string or DOM into a template and produces a template function, which                              // 6302
 * can then be used to link {@link ng.$rootScope.Scope `scope`} and the template together.                             // 6303
 *                                                                                                                     // 6304
 * The compilation is a process of walking the DOM tree and matching DOM elements to                                   // 6305
 * {@link ng.$compileProvider#directive directives}.                                                                   // 6306
 *                                                                                                                     // 6307
 * <div class="alert alert-warning">                                                                                   // 6308
 * **Note:** This document is an in-depth reference of all directive options.                                          // 6309
 * For a gentle introduction to directives with examples of common use cases,                                          // 6310
 * see the {@link guide/directive directive guide}.                                                                    // 6311
 * </div>                                                                                                              // 6312
 *                                                                                                                     // 6313
 * ## Comprehensive Directive API                                                                                      // 6314
 *                                                                                                                     // 6315
 * There are many different options for a directive.                                                                   // 6316
 *                                                                                                                     // 6317
 * The difference resides in the return value of the factory function.                                                 // 6318
 * You can either return a "Directive Definition Object" (see below) that defines the directive properties,            // 6319
 * or just the `postLink` function (all other properties will have the default values).                                // 6320
 *                                                                                                                     // 6321
 * <div class="alert alert-success">                                                                                   // 6322
 * **Best Practice:** It's recommended to use the "directive definition object" form.                                  // 6323
 * </div>                                                                                                              // 6324
 *                                                                                                                     // 6325
 * Here's an example directive declared with a Directive Definition Object:                                            // 6326
 *                                                                                                                     // 6327
 * ```js                                                                                                               // 6328
 *   var myModule = angular.module(...);                                                                               // 6329
 *                                                                                                                     // 6330
 *   myModule.directive('directiveName', function factory(injectables) {                                               // 6331
 *     var directiveDefinitionObject = {                                                                               // 6332
 *       priority: 0,                                                                                                  // 6333
 *       template: '<div></div>', // or // function(tElement, tAttrs) { ... },                                         // 6334
 *       // or                                                                                                         // 6335
 *       // templateUrl: 'directive.html', // or // function(tElement, tAttrs) { ... },                                // 6336
 *       transclude: false,                                                                                            // 6337
 *       restrict: 'A',                                                                                                // 6338
 *       templateNamespace: 'html',                                                                                    // 6339
 *       scope: false,                                                                                                 // 6340
 *       controller: function($scope, $element, $attrs, $transclude, otherInjectables) { ... },                        // 6341
 *       controllerAs: 'stringIdentifier',                                                                             // 6342
 *       bindToController: false,                                                                                      // 6343
 *       require: 'siblingDirectiveName', // or // ['^parentDirectiveName', '?optionalDirectiveName', '?^optionalParent'],
 *       compile: function compile(tElement, tAttrs, transclude) {                                                     // 6345
 *         return {                                                                                                    // 6346
 *           pre: function preLink(scope, iElement, iAttrs, controller) { ... },                                       // 6347
 *           post: function postLink(scope, iElement, iAttrs, controller) { ... }                                      // 6348
 *         }                                                                                                           // 6349
 *         // or                                                                                                       // 6350
 *         // return function postLink( ... ) { ... }                                                                  // 6351
 *       },                                                                                                            // 6352
 *       // or                                                                                                         // 6353
 *       // link: {                                                                                                    // 6354
 *       //  pre: function preLink(scope, iElement, iAttrs, controller) { ... },                                       // 6355
 *       //  post: function postLink(scope, iElement, iAttrs, controller) { ... }                                      // 6356
 *       // }                                                                                                          // 6357
 *       // or                                                                                                         // 6358
 *       // link: function postLink( ... ) { ... }                                                                     // 6359
 *     };                                                                                                              // 6360
 *     return directiveDefinitionObject;                                                                               // 6361
 *   });                                                                                                               // 6362
 * ```                                                                                                                 // 6363
 *                                                                                                                     // 6364
 * <div class="alert alert-warning">                                                                                   // 6365
 * **Note:** Any unspecified options will use the default value. You can see the default values below.                 // 6366
 * </div>                                                                                                              // 6367
 *                                                                                                                     // 6368
 * Therefore the above can be simplified as:                                                                           // 6369
 *                                                                                                                     // 6370
 * ```js                                                                                                               // 6371
 *   var myModule = angular.module(...);                                                                               // 6372
 *                                                                                                                     // 6373
 *   myModule.directive('directiveName', function factory(injectables) {                                               // 6374
 *     var directiveDefinitionObject = {                                                                               // 6375
 *       link: function postLink(scope, iElement, iAttrs) { ... }                                                      // 6376
 *     };                                                                                                              // 6377
 *     return directiveDefinitionObject;                                                                               // 6378
 *     // or                                                                                                           // 6379
 *     // return function postLink(scope, iElement, iAttrs) { ... }                                                    // 6380
 *   });                                                                                                               // 6381
 * ```                                                                                                                 // 6382
 *                                                                                                                     // 6383
 *                                                                                                                     // 6384
 *                                                                                                                     // 6385
 * ### Directive Definition Object                                                                                     // 6386
 *                                                                                                                     // 6387
 * The directive definition object provides instructions to the {@link ng.$compile                                     // 6388
 * compiler}. The attributes are:                                                                                      // 6389
 *                                                                                                                     // 6390
 * #### `multiElement`                                                                                                 // 6391
 * When this property is set to true, the HTML compiler will collect DOM nodes between                                 // 6392
 * nodes with the attributes `directive-name-start` and `directive-name-end`, and group them                           // 6393
 * together as the directive elements. It is recommended that this feature be used on directives                       // 6394
 * which are not strictly behavioural (such as {@link ngClick}), and which                                             // 6395
 * do not manipulate or replace child nodes (such as {@link ngInclude}).                                               // 6396
 *                                                                                                                     // 6397
 * #### `priority`                                                                                                     // 6398
 * When there are multiple directives defined on a single DOM element, sometimes it                                    // 6399
 * is necessary to specify the order in which the directives are applied. The `priority` is used                       // 6400
 * to sort the directives before their `compile` functions get called. Priority is defined as a                        // 6401
 * number. Directives with greater numerical `priority` are compiled first. Pre-link functions                         // 6402
 * are also run in priority order, but post-link functions are run in reverse order. The order                         // 6403
 * of directives with the same priority is undefined. The default priority is `0`.                                     // 6404
 *                                                                                                                     // 6405
 * #### `terminal`                                                                                                     // 6406
 * If set to true then the current `priority` will be the last set of directives                                       // 6407
 * which will execute (any directives at the current priority will still execute                                       // 6408
 * as the order of execution on same `priority` is undefined). Note that expressions                                   // 6409
 * and other directives used in the directive's template will also be excluded from execution.                         // 6410
 *                                                                                                                     // 6411
 * #### `scope`                                                                                                        // 6412
 * The scope property can be `true`, an object or a falsy value:                                                       // 6413
 *                                                                                                                     // 6414
 * * **falsy:** No scope will be created for the directive. The directive will use its parent's scope.                 // 6415
 *                                                                                                                     // 6416
 * * **`true`:** A new child scope that prototypically inherits from its parent will be created for                    // 6417
 * the directive's element. If multiple directives on the same element request a new scope,                            // 6418
 * only one new scope is created. The new scope rule does not apply for the root of the template                       // 6419
 * since the root of the template always gets a new scope.                                                             // 6420
 *                                                                                                                     // 6421
 * * **`{...}` (an object hash):** A new "isolate" scope is created for the directive's element. The                   // 6422
 * 'isolate' scope differs from normal scope in that it does not prototypically inherit from its parent                // 6423
 * scope. This is useful when creating reusable components, which should not accidentally read or modify               // 6424
 * data in the parent scope.                                                                                           // 6425
 *                                                                                                                     // 6426
 * The 'isolate' scope object hash defines a set of local scope properties derived from attributes on the              // 6427
 * directive's element. These local properties are useful for aliasing values for templates. The keys in               // 6428
 * the object hash map to the name of the property on the isolate scope; the values define how the property            // 6429
 * is bound to the parent scope, via matching attributes on the directive's element:                                   // 6430
 *                                                                                                                     // 6431
 * * `@` or `@attr` - bind a local scope property to the value of DOM attribute. The result is                         // 6432
 *   always a string since DOM attributes are strings. If no `attr` name is specified  then the                        // 6433
 *   attribute name is assumed to be the same as the local name.                                                       // 6434
 *   Given `<widget my-attr="hello {{name}}">` and widget definition                                                   // 6435
 *   of `scope: { localName:'@myAttr' }`, then widget scope property `localName` will reflect                          // 6436
 *   the interpolated value of `hello {{name}}`. As the `name` attribute changes so will the                           // 6437
 *   `localName` property on the widget scope. The `name` is read from the parent scope (not                           // 6438
 *   component scope).                                                                                                 // 6439
 *                                                                                                                     // 6440
 * * `=` or `=attr` - set up bi-directional binding between a local scope property and the                             // 6441
 *   parent scope property of name defined via the value of the `attr` attribute. If no `attr`                         // 6442
 *   name is specified then the attribute name is assumed to be the same as the local name.                            // 6443
 *   Given `<widget my-attr="parentModel">` and widget definition of                                                   // 6444
 *   `scope: { localModel:'=myAttr' }`, then widget scope property `localModel` will reflect the                       // 6445
 *   value of `parentModel` on the parent scope. Any changes to `parentModel` will be reflected                        // 6446
 *   in `localModel` and any changes in `localModel` will reflect in `parentModel`. If the parent                      // 6447
 *   scope property doesn't exist, it will throw a NON_ASSIGNABLE_MODEL_EXPRESSION exception. You                      // 6448
 *   can avoid this behavior using `=?` or `=?attr` in order to flag the property as optional. If                      // 6449
 *   you want to shallow watch for changes (i.e. $watchCollection instead of $watch) you can use                       // 6450
 *   `=*` or `=*attr` (`=*?` or `=*?attr` if the property is optional).                                                // 6451
 *                                                                                                                     // 6452
 * * `&` or `&attr` - provides a way to execute an expression in the context of the parent scope.                      // 6453
 *   If no `attr` name is specified then the attribute name is assumed to be the same as the                           // 6454
 *   local name. Given `<widget my-attr="count = count + value">` and widget definition of                             // 6455
 *   `scope: { localFn:'&myAttr' }`, then isolate scope property `localFn` will point to                               // 6456
 *   a function wrapper for the `count = count + value` expression. Often it's desirable to                            // 6457
 *   pass data from the isolated scope via an expression to the parent scope, this can be                              // 6458
 *   done by passing a map of local variable names and values into the expression wrapper fn.                          // 6459
 *   For example, if the expression is `increment(amount)` then we can specify the amount value                        // 6460
 *   by calling the `localFn` as `localFn({amount: 22})`.                                                              // 6461
 *                                                                                                                     // 6462
 * In general it's possible to apply more than one directive to one element, but there might be limitations            // 6463
 * depending on the type of scope required by the directives. The following points will help explain these limitations.
 * For simplicity only two directives are taken into account, but it is also applicable for several directives:        // 6465
 *                                                                                                                     // 6466
 * * **no scope** + **no scope** => Two directives which don't require their own scope will use their parent's scope   // 6467
 * * **child scope** + **no scope** =>  Both directives will share one single child scope                              // 6468
 * * **child scope** + **child scope** =>  Both directives will share one single child scope                           // 6469
 * * **isolated scope** + **no scope** =>  The isolated directive will use it's own created isolated scope. The other directive will use
 * its parent's scope                                                                                                  // 6471
 * * **isolated scope** + **child scope** =>  **Won't work!** Only one scope can be related to one element. Therefore these directives cannot
 * be applied to the same element.                                                                                     // 6473
 * * **isolated scope** + **isolated scope**  =>  **Won't work!** Only one scope can be related to one element. Therefore these directives
 * cannot be applied to the same element.                                                                              // 6475
 *                                                                                                                     // 6476
 *                                                                                                                     // 6477
 * #### `bindToController`                                                                                             // 6478
 * When an isolate scope is used for a component (see above), and `controllerAs` is used, `bindToController: true` will
 * allow a component to have its properties bound to the controller, rather than to scope. When the controller         // 6480
 * is instantiated, the initial values of the isolate scope bindings are already available.                            // 6481
 *                                                                                                                     // 6482
 * #### `controller`                                                                                                   // 6483
 * Controller constructor function. The controller is instantiated before the                                          // 6484
 * pre-linking phase and can be accessed by other directives (see                                                      // 6485
 * `require` attribute). This allows the directives to communicate with each other and augment                         // 6486
 * each other's behavior. The controller is injectable (and supports bracket notation) with the following locals:      // 6487
 *                                                                                                                     // 6488
 * * `$scope` - Current scope associated with the element                                                              // 6489
 * * `$element` - Current element                                                                                      // 6490
 * * `$attrs` - Current attributes object for the element                                                              // 6491
 * * `$transclude` - A transclude linking function pre-bound to the correct transclusion scope:                        // 6492
 *   `function([scope], cloneLinkingFn, futureParentElement)`.                                                         // 6493
 *    * `scope`: optional argument to override the scope.                                                              // 6494
 *    * `cloneLinkingFn`: optional argument to create clones of the original transcluded content.                      // 6495
 *    * `futureParentElement`:                                                                                         // 6496
 *        * defines the parent to which the `cloneLinkingFn` will add the cloned elements.                             // 6497
 *        * default: `$element.parent()` resp. `$element` for `transclude:'element'` resp. `transclude:true`.          // 6498
 *        * only needed for transcludes that are allowed to contain non html elements (e.g. SVG elements)              // 6499
 *          and when the `cloneLinkinFn` is passed,                                                                    // 6500
 *          as those elements need to created and cloned in a special way when they are defined outside their          // 6501
 *          usual containers (e.g. like `<svg>`).                                                                      // 6502
 *        * See also the `directive.templateNamespace` property.                                                       // 6503
 *                                                                                                                     // 6504
 *                                                                                                                     // 6505
 * #### `require`                                                                                                      // 6506
 * Require another directive and inject its controller as the fourth argument to the linking function. The             // 6507
 * `require` takes a string name (or array of strings) of the directive(s) to pass in. If an array is used, the        // 6508
 * injected argument will be an array in corresponding order. If no such directive can be                              // 6509
 * found, or if the directive does not have a controller, then an error is raised (unless no link function             // 6510
 * is specified, in which case error checking is skipped). The name can be prefixed with:                              // 6511
 *                                                                                                                     // 6512
 * * (no prefix) - Locate the required controller on the current element. Throw an error if not found.                 // 6513
 * * `?` - Attempt to locate the required controller or pass `null` to the `link` fn if not found.                     // 6514
 * * `^` - Locate the required controller by searching the element and its parents. Throw an error if not found.       // 6515
 * * `^^` - Locate the required controller by searching the element's parents. Throw an error if not found.            // 6516
 * * `?^` - Attempt to locate the required controller by searching the element and its parents or pass                 // 6517
 *   `null` to the `link` fn if not found.                                                                             // 6518
 * * `?^^` - Attempt to locate the required controller by searching the element's parents, or pass                     // 6519
 *   `null` to the `link` fn if not found.                                                                             // 6520
 *                                                                                                                     // 6521
 *                                                                                                                     // 6522
 * #### `controllerAs`                                                                                                 // 6523
 * Identifier name for a reference to the controller in the directive's scope.                                         // 6524
 * This allows the controller to be referenced from the directive template. This is especially                         // 6525
 * useful when a directive is used as component, i.e. with an `isolate` scope. It's also possible                      // 6526
 * to use it in a directive without an `isolate` / `new` scope, but you need to be aware that the                      // 6527
 * `controllerAs` reference might overwrite a property that already exists on the parent scope.                        // 6528
 *                                                                                                                     // 6529
 *                                                                                                                     // 6530
 * #### `restrict`                                                                                                     // 6531
 * String of subset of `EACM` which restricts the directive to a specific directive                                    // 6532
 * declaration style. If omitted, the defaults (elements and attributes) are used.                                     // 6533
 *                                                                                                                     // 6534
 * * `E` - Element name (default): `<my-directive></my-directive>`                                                     // 6535
 * * `A` - Attribute (default): `<div my-directive="exp"></div>`                                                       // 6536
 * * `C` - Class: `<div class="my-directive: exp;"></div>`                                                             // 6537
 * * `M` - Comment: `<!-- directive: my-directive exp -->`                                                             // 6538
 *                                                                                                                     // 6539
 *                                                                                                                     // 6540
 * #### `templateNamespace`                                                                                            // 6541
 * String representing the document type used by the markup in the template.                                           // 6542
 * AngularJS needs this information as those elements need to be created and cloned                                    // 6543
 * in a special way when they are defined outside their usual containers like `<svg>` and `<math>`.                    // 6544
 *                                                                                                                     // 6545
 * * `html` - All root nodes in the template are HTML. Root nodes may also be                                          // 6546
 *   top-level elements such as `<svg>` or `<math>`.                                                                   // 6547
 * * `svg` - The root nodes in the template are SVG elements (excluding `<math>`).                                     // 6548
 * * `math` - The root nodes in the template are MathML elements (excluding `<svg>`).                                  // 6549
 *                                                                                                                     // 6550
 * If no `templateNamespace` is specified, then the namespace is considered to be `html`.                              // 6551
 *                                                                                                                     // 6552
 * #### `template`                                                                                                     // 6553
 * HTML markup that may:                                                                                               // 6554
 * * Replace the contents of the directive's element (default).                                                        // 6555
 * * Replace the directive's element itself (if `replace` is true - DEPRECATED).                                       // 6556
 * * Wrap the contents of the directive's element (if `transclude` is true).                                           // 6557
 *                                                                                                                     // 6558
 * Value may be:                                                                                                       // 6559
 *                                                                                                                     // 6560
 * * A string. For example `<div red-on-hover>{{delete_str}}</div>`.                                                   // 6561
 * * A function which takes two arguments `tElement` and `tAttrs` (described in the `compile`                          // 6562
 *   function api below) and returns a string value.                                                                   // 6563
 *                                                                                                                     // 6564
 *                                                                                                                     // 6565
 * #### `templateUrl`                                                                                                  // 6566
 * This is similar to `template` but the template is loaded from the specified URL, asynchronously.                    // 6567
 *                                                                                                                     // 6568
 * Because template loading is asynchronous the compiler will suspend compilation of directives on that element        // 6569
 * for later when the template has been resolved.  In the meantime it will continue to compile and link                // 6570
 * sibling and parent elements as though this element had not contained any directives.                                // 6571
 *                                                                                                                     // 6572
 * The compiler does not suspend the entire compilation to wait for templates to be loaded because this                // 6573
 * would result in the whole app "stalling" until all templates are loaded asynchronously - even in the                // 6574
 * case when only one deeply nested directive has `templateUrl`.                                                       // 6575
 *                                                                                                                     // 6576
 * Template loading is asynchronous even if the template has been preloaded into the {@link $templateCache}            // 6577
 *                                                                                                                     // 6578
 * You can specify `templateUrl` as a string representing the URL or as a function which takes two                     // 6579
 * arguments `tElement` and `tAttrs` (described in the `compile` function api below) and returns                       // 6580
 * a string value representing the url.  In either case, the template URL is passed through {@link                     // 6581
 * $sce#getTrustedResourceUrl $sce.getTrustedResourceUrl}.                                                             // 6582
 *                                                                                                                     // 6583
 *                                                                                                                     // 6584
 * #### `replace` ([*DEPRECATED*!], will be removed in next major release - i.e. v2.0)                                 // 6585
 * specify what the template should replace. Defaults to `false`.                                                      // 6586
 *                                                                                                                     // 6587
 * * `true` - the template will replace the directive's element.                                                       // 6588
 * * `false` - the template will replace the contents of the directive's element.                                      // 6589
 *                                                                                                                     // 6590
 * The replacement process migrates all of the attributes / classes from the old element to the new                    // 6591
 * one. See the {@link guide/directive#template-expanding-directive                                                    // 6592
 * Directives Guide} for an example.                                                                                   // 6593
 *                                                                                                                     // 6594
 * There are very few scenarios where element replacement is required for the application function,                    // 6595
 * the main one being reusable custom components that are used within SVG contexts                                     // 6596
 * (because SVG doesn't work with custom elements in the DOM tree).                                                    // 6597
 *                                                                                                                     // 6598
 * #### `transclude`                                                                                                   // 6599
 * Extract the contents of the element where the directive appears and make it available to the directive.             // 6600
 * The contents are compiled and provided to the directive as a **transclusion function**. See the                     // 6601
 * {@link $compile#transclusion Transclusion} section below.                                                           // 6602
 *                                                                                                                     // 6603
 * There are two kinds of transclusion depending upon whether you want to transclude just the contents of the          // 6604
 * directive's element or the entire element:                                                                          // 6605
 *                                                                                                                     // 6606
 * * `true` - transclude the content (i.e. the child nodes) of the directive's element.                                // 6607
 * * `'element'` - transclude the whole of the directive's element including any directives on this                    // 6608
 *   element that defined at a lower priority than this directive. When used, the `template`                           // 6609
 *   property is ignored.                                                                                              // 6610
 *                                                                                                                     // 6611
 *                                                                                                                     // 6612
 * #### `compile`                                                                                                      // 6613
 *                                                                                                                     // 6614
 * ```js                                                                                                               // 6615
 *   function compile(tElement, tAttrs, transclude) { ... }                                                            // 6616
 * ```                                                                                                                 // 6617
 *                                                                                                                     // 6618
 * The compile function deals with transforming the template DOM. Since most directives do not do                      // 6619
 * template transformation, it is not used often. The compile function takes the following arguments:                  // 6620
 *                                                                                                                     // 6621
 *   * `tElement` - template element - The element where the directive has been declared. It is                        // 6622
 *     safe to do template transformation on the element and child elements only.                                      // 6623
 *                                                                                                                     // 6624
 *   * `tAttrs` - template attributes - Normalized list of attributes declared on this element shared                  // 6625
 *     between all directive compile functions.                                                                        // 6626
 *                                                                                                                     // 6627
 *   * `transclude` -  [*DEPRECATED*!] A transclude linking function: `function(scope, cloneLinkingFn)`                // 6628
 *                                                                                                                     // 6629
 * <div class="alert alert-warning">                                                                                   // 6630
 * **Note:** The template instance and the link instance may be different objects if the template has                  // 6631
 * been cloned. For this reason it is **not** safe to do anything other than DOM transformations that                  // 6632
 * apply to all cloned DOM nodes within the compile function. Specifically, DOM listener registration                  // 6633
 * should be done in a linking function rather than in a compile function.                                             // 6634
 * </div>                                                                                                              // 6635
                                                                                                                       // 6636
 * <div class="alert alert-warning">                                                                                   // 6637
 * **Note:** The compile function cannot handle directives that recursively use themselves in their                    // 6638
 * own templates or compile functions. Compiling these directives results in an infinite loop and a                    // 6639
 * stack overflow errors.                                                                                              // 6640
 *                                                                                                                     // 6641
 * This can be avoided by manually using $compile in the postLink function to imperatively compile                     // 6642
 * a directive's template instead of relying on automatic template compilation via `template` or                       // 6643
 * `templateUrl` declaration or manual compilation inside the compile function.                                        // 6644
 * </div>                                                                                                              // 6645
 *                                                                                                                     // 6646
 * <div class="alert alert-danger">                                                                                    // 6647
 * **Note:** The `transclude` function that is passed to the compile function is deprecated, as it                     // 6648
 *   e.g. does not know about the right outer scope. Please use the transclude function that is passed                 // 6649
 *   to the link function instead.                                                                                     // 6650
 * </div>                                                                                                              // 6651
                                                                                                                       // 6652
 * A compile function can have a return value which can be either a function or an object.                             // 6653
 *                                                                                                                     // 6654
 * * returning a (post-link) function - is equivalent to registering the linking function via the                      // 6655
 *   `link` property of the config object when the compile function is empty.                                          // 6656
 *                                                                                                                     // 6657
 * * returning an object with function(s) registered via `pre` and `post` properties - allows you to                   // 6658
 *   control when a linking function should be called during the linking phase. See info about                         // 6659
 *   pre-linking and post-linking functions below.                                                                     // 6660
 *                                                                                                                     // 6661
 *                                                                                                                     // 6662
 * #### `link`                                                                                                         // 6663
 * This property is used only if the `compile` property is not defined.                                                // 6664
 *                                                                                                                     // 6665
 * ```js                                                                                                               // 6666
 *   function link(scope, iElement, iAttrs, controller, transcludeFn) { ... }                                          // 6667
 * ```                                                                                                                 // 6668
 *                                                                                                                     // 6669
 * The link function is responsible for registering DOM listeners as well as updating the DOM. It is                   // 6670
 * executed after the template has been cloned. This is where most of the directive logic will be                      // 6671
 * put.                                                                                                                // 6672
 *                                                                                                                     // 6673
 *   * `scope` - {@link ng.$rootScope.Scope Scope} - The scope to be used by the                                       // 6674
 *     directive for registering {@link ng.$rootScope.Scope#$watch watches}.                                           // 6675
 *                                                                                                                     // 6676
 *   * `iElement` - instance element - The element where the directive is to be used. It is safe to                    // 6677
 *     manipulate the children of the element only in `postLink` function since the children have                      // 6678
 *     already been linked.                                                                                            // 6679
 *                                                                                                                     // 6680
 *   * `iAttrs` - instance attributes - Normalized list of attributes declared on this element shared                  // 6681
 *     between all directive linking functions.                                                                        // 6682
 *                                                                                                                     // 6683
 *   * `controller` - the directive's required controller instance(s) - Instances are shared                           // 6684
 *     among all directives, which allows the directives to use the controllers as a communication                     // 6685
 *     channel. The exact value depends on the directive's `require` property:                                         // 6686
 *       * no controller(s) required: the directive's own controller, or `undefined` if it doesn't have one            // 6687
 *       * `string`: the controller instance                                                                           // 6688
 *       * `array`: array of controller instances                                                                      // 6689
 *                                                                                                                     // 6690
 *     If a required controller cannot be found, and it is optional, the instance is `null`,                           // 6691
 *     otherwise the {@link error:$compile:ctreq Missing Required Controller} error is thrown.                         // 6692
 *                                                                                                                     // 6693
 *     Note that you can also require the directive's own controller - it will be made available like                  // 6694
 *     any other controller.                                                                                           // 6695
 *                                                                                                                     // 6696
 *   * `transcludeFn` - A transclude linking function pre-bound to the correct transclusion scope.                     // 6697
 *     This is the same as the `$transclude`                                                                           // 6698
 *     parameter of directive controllers, see there for details.                                                      // 6699
 *     `function([scope], cloneLinkingFn, futureParentElement)`.                                                       // 6700
 *                                                                                                                     // 6701
 * #### Pre-linking function                                                                                           // 6702
 *                                                                                                                     // 6703
 * Executed before the child elements are linked. Not safe to do DOM transformation since the                          // 6704
 * compiler linking function will fail to locate the correct elements for linking.                                     // 6705
 *                                                                                                                     // 6706
 * #### Post-linking function                                                                                          // 6707
 *                                                                                                                     // 6708
 * Executed after the child elements are linked.                                                                       // 6709
 *                                                                                                                     // 6710
 * Note that child elements that contain `templateUrl` directives will not have been compiled                          // 6711
 * and linked since they are waiting for their template to load asynchronously and their own                           // 6712
 * compilation and linking has been suspended until that occurs.                                                       // 6713
 *                                                                                                                     // 6714
 * It is safe to do DOM transformation in the post-linking function on elements that are not waiting                   // 6715
 * for their async templates to be resolved.                                                                           // 6716
 *                                                                                                                     // 6717
 *                                                                                                                     // 6718
 * ### Transclusion                                                                                                    // 6719
 *                                                                                                                     // 6720
 * Transclusion is the process of extracting a collection of DOM elements from one part of the DOM and                 // 6721
 * copying them to another part of the DOM, while maintaining their connection to the original AngularJS               // 6722
 * scope from where they were taken.                                                                                   // 6723
 *                                                                                                                     // 6724
 * Transclusion is used (often with {@link ngTransclude}) to insert the                                                // 6725
 * original contents of a directive's element into a specified place in the template of the directive.                 // 6726
 * The benefit of transclusion, over simply moving the DOM elements manually, is that the transcluded                  // 6727
 * content has access to the properties on the scope from which it was taken, even if the directive                    // 6728
 * has isolated scope.                                                                                                 // 6729
 * See the {@link guide/directive#creating-a-directive-that-wraps-other-elements Directives Guide}.                    // 6730
 *                                                                                                                     // 6731
 * This makes it possible for the widget to have private state for its template, while the transcluded                 // 6732
 * content has access to its originating scope.                                                                        // 6733
 *                                                                                                                     // 6734
 * <div class="alert alert-warning">                                                                                   // 6735
 * **Note:** When testing an element transclude directive you must not place the directive at the root of the          // 6736
 * DOM fragment that is being compiled. See {@link guide/unit-testing#testing-transclusion-directives                  // 6737
 * Testing Transclusion Directives}.                                                                                   // 6738
 * </div>                                                                                                              // 6739
 *                                                                                                                     // 6740
 * #### Transclusion Functions                                                                                         // 6741
 *                                                                                                                     // 6742
 * When a directive requests transclusion, the compiler extracts its contents and provides a **transclusion            // 6743
 * function** to the directive's `link` function and `controller`. This transclusion function is a special             // 6744
 * **linking function** that will return the compiled contents linked to a new transclusion scope.                     // 6745
 *                                                                                                                     // 6746
 * <div class="alert alert-info">                                                                                      // 6747
 * If you are just using {@link ngTransclude} then you don't need to worry about this function, since                  // 6748
 * ngTransclude will deal with it for us.                                                                              // 6749
 * </div>                                                                                                              // 6750
 *                                                                                                                     // 6751
 * If you want to manually control the insertion and removal of the transcluded content in your directive              // 6752
 * then you must use this transclude function. When you call a transclude function it returns a a jqLite/JQuery        // 6753
 * object that contains the compiled DOM, which is linked to the correct transclusion scope.                           // 6754
 *                                                                                                                     // 6755
 * When you call a transclusion function you can pass in a **clone attach function**. This function accepts            // 6756
 * two parameters, `function(clone, scope) { ... }`, where the `clone` is a fresh compiled copy of your transcluded    // 6757
 * content and the `scope` is the newly created transclusion scope, to which the clone is bound.                       // 6758
 *                                                                                                                     // 6759
 * <div class="alert alert-info">                                                                                      // 6760
 * **Best Practice**: Always provide a `cloneFn` (clone attach function) when you call a translude function            // 6761
 * since you then get a fresh clone of the original DOM and also have access to the new transclusion scope.            // 6762
 * </div>                                                                                                              // 6763
 *                                                                                                                     // 6764
 * It is normal practice to attach your transcluded content (`clone`) to the DOM inside your **clone                   // 6765
 * attach function**:                                                                                                  // 6766
 *                                                                                                                     // 6767
 * ```js                                                                                                               // 6768
 * var transcludedContent, transclusionScope;                                                                          // 6769
 *                                                                                                                     // 6770
 * $transclude(function(clone, scope) {                                                                                // 6771
 *   element.append(clone);                                                                                            // 6772
 *   transcludedContent = clone;                                                                                       // 6773
 *   transclusionScope = scope;                                                                                        // 6774
 * });                                                                                                                 // 6775
 * ```                                                                                                                 // 6776
 *                                                                                                                     // 6777
 * Later, if you want to remove the transcluded content from your DOM then you should also destroy the                 // 6778
 * associated transclusion scope:                                                                                      // 6779
 *                                                                                                                     // 6780
 * ```js                                                                                                               // 6781
 * transcludedContent.remove();                                                                                        // 6782
 * transclusionScope.$destroy();                                                                                       // 6783
 * ```                                                                                                                 // 6784
 *                                                                                                                     // 6785
 * <div class="alert alert-info">                                                                                      // 6786
 * **Best Practice**: if you intend to add and remove transcluded content manually in your directive                   // 6787
 * (by calling the transclude function to get the DOM and calling `element.remove()` to remove it),                    // 6788
 * then you are also responsible for calling `$destroy` on the transclusion scope.                                     // 6789
 * </div>                                                                                                              // 6790
 *                                                                                                                     // 6791
 * The built-in DOM manipulation directives, such as {@link ngIf}, {@link ngSwitch} and {@link ngRepeat}               // 6792
 * automatically destroy their transluded clones as necessary so you do not need to worry about this if                // 6793
 * you are simply using {@link ngTransclude} to inject the transclusion into your directive.                           // 6794
 *                                                                                                                     // 6795
 *                                                                                                                     // 6796
 * #### Transclusion Scopes                                                                                            // 6797
 *                                                                                                                     // 6798
 * When you call a transclude function it returns a DOM fragment that is pre-bound to a **transclusion                 // 6799
 * scope**. This scope is special, in that it is a child of the directive's scope (and so gets destroyed               // 6800
 * when the directive's scope gets destroyed) but it inherits the properties of the scope from which it                // 6801
 * was taken.                                                                                                          // 6802
 *                                                                                                                     // 6803
 * For example consider a directive that uses transclusion and isolated scope. The DOM hierarchy might look            // 6804
 * like this:                                                                                                          // 6805
 *                                                                                                                     // 6806
 * ```html                                                                                                             // 6807
 * <div ng-app>                                                                                                        // 6808
 *   <div isolate>                                                                                                     // 6809
 *     <div transclusion>                                                                                              // 6810
 *     </div>                                                                                                          // 6811
 *   </div>                                                                                                            // 6812
 * </div>                                                                                                              // 6813
 * ```                                                                                                                 // 6814
 *                                                                                                                     // 6815
 * The `$parent` scope hierarchy will look like this:                                                                  // 6816
 *                                                                                                                     // 6817
 * ```                                                                                                                 // 6818
 * - $rootScope                                                                                                        // 6819
 *   - isolate                                                                                                         // 6820
 *     - transclusion                                                                                                  // 6821
 * ```                                                                                                                 // 6822
 *                                                                                                                     // 6823
 * but the scopes will inherit prototypically from different scopes to their `$parent`.                                // 6824
 *                                                                                                                     // 6825
 * ```                                                                                                                 // 6826
 * - $rootScope                                                                                                        // 6827
 *   - transclusion                                                                                                    // 6828
 * - isolate                                                                                                           // 6829
 * ```                                                                                                                 // 6830
 *                                                                                                                     // 6831
 *                                                                                                                     // 6832
 * ### Attributes                                                                                                      // 6833
 *                                                                                                                     // 6834
 * The {@link ng.$compile.directive.Attributes Attributes} object - passed as a parameter in the                       // 6835
 * `link()` or `compile()` functions. It has a variety of uses.                                                        // 6836
 *                                                                                                                     // 6837
 * accessing *Normalized attribute names:*                                                                             // 6838
 * Directives like 'ngBind' can be expressed in many ways: 'ng:bind', `data-ng-bind`, or 'x-ng-bind'.                  // 6839
 * the attributes object allows for normalized access to                                                               // 6840
 *   the attributes.                                                                                                   // 6841
 *                                                                                                                     // 6842
 * * *Directive inter-communication:* All directives share the same instance of the attributes                         // 6843
 *   object which allows the directives to use the attributes object as inter directive                                // 6844
 *   communication.                                                                                                    // 6845
 *                                                                                                                     // 6846
 * * *Supports interpolation:* Interpolation attributes are assigned to the attribute object                           // 6847
 *   allowing other directives to read the interpolated value.                                                         // 6848
 *                                                                                                                     // 6849
 * * *Observing interpolated attributes:* Use `$observe` to observe the value changes of attributes                    // 6850
 *   that contain interpolation (e.g. `src="{{bar}}"`). Not only is this very efficient but it's also                  // 6851
 *   the only way to easily get the actual value because during the linking phase the interpolation                    // 6852
 *   hasn't been evaluated yet and so the value is at this time set to `undefined`.                                    // 6853
 *                                                                                                                     // 6854
 * ```js                                                                                                               // 6855
 * function linkingFn(scope, elm, attrs, ctrl) {                                                                       // 6856
 *   // get the attribute value                                                                                        // 6857
 *   console.log(attrs.ngModel);                                                                                       // 6858
 *                                                                                                                     // 6859
 *   // change the attribute                                                                                           // 6860
 *   attrs.$set('ngModel', 'new value');                                                                               // 6861
 *                                                                                                                     // 6862
 *   // observe changes to interpolated attribute                                                                      // 6863
 *   attrs.$observe('ngModel', function(value) {                                                                       // 6864
 *     console.log('ngModel has changed value to ' + value);                                                           // 6865
 *   });                                                                                                               // 6866
 * }                                                                                                                   // 6867
 * ```                                                                                                                 // 6868
 *                                                                                                                     // 6869
 * ## Example                                                                                                          // 6870
 *                                                                                                                     // 6871
 * <div class="alert alert-warning">                                                                                   // 6872
 * **Note**: Typically directives are registered with `module.directive`. The example below is                         // 6873
 * to illustrate how `$compile` works.                                                                                 // 6874
 * </div>                                                                                                              // 6875
 *                                                                                                                     // 6876
 <example module="compileExample">                                                                                     // 6877
   <file name="index.html">                                                                                            // 6878
    <script>                                                                                                           // 6879
      angular.module('compileExample', [], function($compileProvider) {                                                // 6880
        // configure new 'compile' directive by passing a directive                                                    // 6881
        // factory function. The factory function injects the '$compile'                                               // 6882
        $compileProvider.directive('compile', function($compile) {                                                     // 6883
          // directive factory creates a link function                                                                 // 6884
          return function(scope, element, attrs) {                                                                     // 6885
            scope.$watch(                                                                                              // 6886
              function(scope) {                                                                                        // 6887
                 // watch the 'compile' expression for changes                                                         // 6888
                return scope.$eval(attrs.compile);                                                                     // 6889
              },                                                                                                       // 6890
              function(value) {                                                                                        // 6891
                // when the 'compile' expression changes                                                               // 6892
                // assign it into the current DOM                                                                      // 6893
                element.html(value);                                                                                   // 6894
                                                                                                                       // 6895
                // compile the new DOM and link it to the current                                                      // 6896
                // scope.                                                                                              // 6897
                // NOTE: we only compile .childNodes so that                                                           // 6898
                // we don't get into infinite loop compiling ourselves                                                 // 6899
                $compile(element.contents())(scope);                                                                   // 6900
              }                                                                                                        // 6901
            );                                                                                                         // 6902
          };                                                                                                           // 6903
        });                                                                                                            // 6904
      })                                                                                                               // 6905
      .controller('GreeterController', ['$scope', function($scope) {                                                   // 6906
        $scope.name = 'Angular';                                                                                       // 6907
        $scope.html = 'Hello {{name}}';                                                                                // 6908
      }]);                                                                                                             // 6909
    </script>                                                                                                          // 6910
    <div ng-controller="GreeterController">                                                                            // 6911
      <input ng-model="name"> <br/>                                                                                    // 6912
      <textarea ng-model="html"></textarea> <br/>                                                                      // 6913
      <div compile="html"></div>                                                                                       // 6914
    </div>                                                                                                             // 6915
   </file>                                                                                                             // 6916
   <file name="protractor.js" type="protractor">                                                                       // 6917
     it('should auto compile', function() {                                                                            // 6918
       var textarea = $('textarea');                                                                                   // 6919
       var output = $('div[compile]');                                                                                 // 6920
       // The initial state reads 'Hello Angular'.                                                                     // 6921
       expect(output.getText()).toBe('Hello Angular');                                                                 // 6922
       textarea.clear();                                                                                               // 6923
       textarea.sendKeys('{{name}}!');                                                                                 // 6924
       expect(output.getText()).toBe('Angular!');                                                                      // 6925
     });                                                                                                               // 6926
   </file>                                                                                                             // 6927
 </example>                                                                                                            // 6928
                                                                                                                       // 6929
 *                                                                                                                     // 6930
 *                                                                                                                     // 6931
 * @param {string|DOMElement} element Element or HTML string to compile into a template function.                      // 6932
 * @param {function(angular.Scope, cloneAttachFn=)} transclude function available to directives - DEPRECATED.          // 6933
 *                                                                                                                     // 6934
 * <div class="alert alert-danger">                                                                                    // 6935
 * **Note:** Passing a `transclude` function to the $compile function is deprecated, as it                             // 6936
 *   e.g. will not use the right outer scope. Please pass the transclude function as a                                 // 6937
 *   `parentBoundTranscludeFn` to the link function instead.                                                           // 6938
 * </div>                                                                                                              // 6939
 *                                                                                                                     // 6940
 * @param {number} maxPriority only apply directives lower than given priority (Only effects the                       // 6941
 *                 root element(s), not their children)                                                                // 6942
 * @returns {function(scope, cloneAttachFn=, options=)} a link function which is used to bind template                 // 6943
 * (a DOM element/tree) to a scope. Where:                                                                             // 6944
 *                                                                                                                     // 6945
 *  * `scope` - A {@link ng.$rootScope.Scope Scope} to bind to.                                                        // 6946
 *  * `cloneAttachFn` - If `cloneAttachFn` is provided, then the link function will clone the                          // 6947
 *  `template` and call the `cloneAttachFn` function allowing the caller to attach the                                 // 6948
 *  cloned elements to the DOM document at the appropriate place. The `cloneAttachFn` is                               // 6949
 *  called as: <br/> `cloneAttachFn(clonedElement, scope)` where:                                                      // 6950
 *                                                                                                                     // 6951
 *      * `clonedElement` - is a clone of the original `element` passed into the compiler.                             // 6952
 *      * `scope` - is the current scope with which the linking function is working with.                              // 6953
 *                                                                                                                     // 6954
 *  * `options` - An optional object hash with linking options. If `options` is provided, then the following           // 6955
 *  keys may be used to control linking behavior:                                                                      // 6956
 *                                                                                                                     // 6957
 *      * `parentBoundTranscludeFn` - the transclude function made available to                                        // 6958
 *        directives; if given, it will be passed through to the link functions of                                     // 6959
 *        directives found in `element` during compilation.                                                            // 6960
 *      * `transcludeControllers` - an object hash with keys that map controller names                                 // 6961
 *        to controller instances; if given, it will make the controllers                                              // 6962
 *        available to directives.                                                                                     // 6963
 *      * `futureParentElement` - defines the parent to which the `cloneAttachFn` will add                             // 6964
 *        the cloned elements; only needed for transcludes that are allowed to contain non html                        // 6965
 *        elements (e.g. SVG elements). See also the directive.controller property.                                    // 6966
 *                                                                                                                     // 6967
 * Calling the linking function returns the element of the template. It is either the original                         // 6968
 * element passed in, or the clone of the element if the `cloneAttachFn` is provided.                                  // 6969
 *                                                                                                                     // 6970
 * After linking the view is not updated until after a call to $digest which typically is done by                      // 6971
 * Angular automatically.                                                                                              // 6972
 *                                                                                                                     // 6973
 * If you need access to the bound view, there are two ways to do it:                                                  // 6974
 *                                                                                                                     // 6975
 * - If you are not asking the linking function to clone the template, create the DOM element(s)                       // 6976
 *   before you send them to the compiler and keep this reference around.                                              // 6977
 *   ```js                                                                                                             // 6978
 *     var element = $compile('<p>{{total}}</p>')(scope);                                                              // 6979
 *   ```                                                                                                               // 6980
 *                                                                                                                     // 6981
 * - if on the other hand, you need the element to be cloned, the view reference from the original                     // 6982
 *   example would not point to the clone, but rather to the original template that was cloned. In                     // 6983
 *   this case, you can access the clone via the cloneAttachFn:                                                        // 6984
 *   ```js                                                                                                             // 6985
 *     var templateElement = angular.element('<p>{{total}}</p>'),                                                      // 6986
 *         scope = ....;                                                                                               // 6987
 *                                                                                                                     // 6988
 *     var clonedElement = $compile(templateElement)(scope, function(clonedElement, scope) {                           // 6989
 *       //attach the clone to DOM document at the right place                                                         // 6990
 *     });                                                                                                             // 6991
 *                                                                                                                     // 6992
 *     //now we have reference to the cloned DOM via `clonedElement`                                                   // 6993
 *   ```                                                                                                               // 6994
 *                                                                                                                     // 6995
 *                                                                                                                     // 6996
 * For information on how the compiler works, see the                                                                  // 6997
 * {@link guide/compiler Angular HTML Compiler} section of the Developer Guide.                                        // 6998
 */                                                                                                                    // 6999
                                                                                                                       // 7000
var $compileMinErr = minErr('$compile');                                                                               // 7001
                                                                                                                       // 7002
/**                                                                                                                    // 7003
 * @ngdoc provider                                                                                                     // 7004
 * @name $compileProvider                                                                                              // 7005
 *                                                                                                                     // 7006
 * @description                                                                                                        // 7007
 */                                                                                                                    // 7008
$CompileProvider.$inject = ['$provide', '$$sanitizeUriProvider'];                                                      // 7009
function $CompileProvider($provide, $$sanitizeUriProvider) {                                                           // 7010
  var hasDirectives = {},                                                                                              // 7011
      Suffix = 'Directive',                                                                                            // 7012
      COMMENT_DIRECTIVE_REGEXP = /^\s*directive\:\s*([\w\-]+)\s+(.*)$/,                                                // 7013
      CLASS_DIRECTIVE_REGEXP = /(([\w\-]+)(?:\:([^;]+))?;?)/,                                                          // 7014
      ALL_OR_NOTHING_ATTRS = makeMap('ngSrc,ngSrcset,src,srcset'),                                                     // 7015
      REQUIRE_PREFIX_REGEXP = /^(?:(\^\^?)?(\?)?(\^\^?)?)?/;                                                           // 7016
                                                                                                                       // 7017
  // Ref: http://developers.whatwg.org/webappapis.html#event-handler-idl-attributes                                    // 7018
  // The assumption is that future DOM event attribute names will begin with                                           // 7019
  // 'on' and be composed of only English letters.                                                                     // 7020
  var EVENT_HANDLER_ATTR_REGEXP = /^(on[a-z]+|formaction)$/;                                                           // 7021
                                                                                                                       // 7022
  function parseIsolateBindings(scope, directiveName, isController) {                                                  // 7023
    var LOCAL_REGEXP = /^\s*([@&]|=(\*?))(\??)\s*(\w*)\s*$/;                                                           // 7024
                                                                                                                       // 7025
    var bindings = {};                                                                                                 // 7026
                                                                                                                       // 7027
    forEach(scope, function(definition, scopeName) {                                                                   // 7028
      var match = definition.match(LOCAL_REGEXP);                                                                      // 7029
                                                                                                                       // 7030
      if (!match) {                                                                                                    // 7031
        throw $compileMinErr('iscp',                                                                                   // 7032
            "Invalid {3} for directive '{0}'." +                                                                       // 7033
            " Definition: {... {1}: '{2}' ...}",                                                                       // 7034
            directiveName, scopeName, definition,                                                                      // 7035
            (isController ? "controller bindings definition" :                                                         // 7036
            "isolate scope definition"));                                                                              // 7037
      }                                                                                                                // 7038
                                                                                                                       // 7039
      bindings[scopeName] = {                                                                                          // 7040
        mode: match[1][0],                                                                                             // 7041
        collection: match[2] === '*',                                                                                  // 7042
        optional: match[3] === '?',                                                                                    // 7043
        attrName: match[4] || scopeName                                                                                // 7044
      };                                                                                                               // 7045
    });                                                                                                                // 7046
                                                                                                                       // 7047
    return bindings;                                                                                                   // 7048
  }                                                                                                                    // 7049
                                                                                                                       // 7050
  function parseDirectiveBindings(directive, directiveName) {                                                          // 7051
    var bindings = {                                                                                                   // 7052
      isolateScope: null,                                                                                              // 7053
      bindToController: null                                                                                           // 7054
    };                                                                                                                 // 7055
    if (isObject(directive.scope)) {                                                                                   // 7056
      if (directive.bindToController === true) {                                                                       // 7057
        bindings.bindToController = parseIsolateBindings(directive.scope,                                              // 7058
                                                         directiveName, true);                                         // 7059
        bindings.isolateScope = {};                                                                                    // 7060
      } else {                                                                                                         // 7061
        bindings.isolateScope = parseIsolateBindings(directive.scope,                                                  // 7062
                                                     directiveName, false);                                            // 7063
      }                                                                                                                // 7064
    }                                                                                                                  // 7065
    if (isObject(directive.bindToController)) {                                                                        // 7066
      bindings.bindToController =                                                                                      // 7067
          parseIsolateBindings(directive.bindToController, directiveName, true);                                       // 7068
    }                                                                                                                  // 7069
    if (isObject(bindings.bindToController)) {                                                                         // 7070
      var controller = directive.controller;                                                                           // 7071
      var controllerAs = directive.controllerAs;                                                                       // 7072
      if (!controller) {                                                                                               // 7073
        // There is no controller, there may or may not be a controllerAs property                                     // 7074
        throw $compileMinErr('noctrl',                                                                                 // 7075
              "Cannot bind to controller without directive '{0}'s controller.",                                        // 7076
              directiveName);                                                                                          // 7077
      } else if (!identifierForController(controller, controllerAs)) {                                                 // 7078
        // There is a controller, but no identifier or controllerAs property                                           // 7079
        throw $compileMinErr('noident',                                                                                // 7080
              "Cannot bind to controller without identifier for directive '{0}'.",                                     // 7081
              directiveName);                                                                                          // 7082
      }                                                                                                                // 7083
    }                                                                                                                  // 7084
    return bindings;                                                                                                   // 7085
  }                                                                                                                    // 7086
                                                                                                                       // 7087
  function assertValidDirectiveName(name) {                                                                            // 7088
    var letter = name.charAt(0);                                                                                       // 7089
    if (!letter || letter !== lowercase(letter)) {                                                                     // 7090
      throw $compileMinErr('baddir', "Directive name '{0}' is invalid. The first character must be a lowercase letter", name);
    }                                                                                                                  // 7092
    if (name !== name.trim()) {                                                                                        // 7093
      throw $compileMinErr('baddir',                                                                                   // 7094
            "Directive name '{0}' is invalid. The name should not contain leading or trailing whitespaces",            // 7095
            name);                                                                                                     // 7096
    }                                                                                                                  // 7097
  }                                                                                                                    // 7098
                                                                                                                       // 7099
  /**                                                                                                                  // 7100
   * @ngdoc method                                                                                                     // 7101
   * @name $compileProvider#directive                                                                                  // 7102
   * @kind function                                                                                                    // 7103
   *                                                                                                                   // 7104
   * @description                                                                                                      // 7105
   * Register a new directive with the compiler.                                                                       // 7106
   *                                                                                                                   // 7107
   * @param {string|Object} name Name of the directive in camel-case (i.e. <code>ngBind</code> which                   // 7108
   *    will match as <code>ng-bind</code>), or an object map of directives where the keys are the                     // 7109
   *    names and the values are the factories.                                                                        // 7110
   * @param {Function|Array} directiveFactory An injectable directive factory function. See                            // 7111
   *    {@link guide/directive} for more info.                                                                         // 7112
   * @returns {ng.$compileProvider} Self for chaining.                                                                 // 7113
   */                                                                                                                  // 7114
   this.directive = function registerDirective(name, directiveFactory) {                                               // 7115
    assertNotHasOwnProperty(name, 'directive');                                                                        // 7116
    if (isString(name)) {                                                                                              // 7117
      assertValidDirectiveName(name);                                                                                  // 7118
      assertArg(directiveFactory, 'directiveFactory');                                                                 // 7119
      if (!hasDirectives.hasOwnProperty(name)) {                                                                       // 7120
        hasDirectives[name] = [];                                                                                      // 7121
        $provide.factory(name + Suffix, ['$injector', '$exceptionHandler',                                             // 7122
          function($injector, $exceptionHandler) {                                                                     // 7123
            var directives = [];                                                                                       // 7124
            forEach(hasDirectives[name], function(directiveFactory, index) {                                           // 7125
              try {                                                                                                    // 7126
                var directive = $injector.invoke(directiveFactory);                                                    // 7127
                if (isFunction(directive)) {                                                                           // 7128
                  directive = { compile: valueFn(directive) };                                                         // 7129
                } else if (!directive.compile && directive.link) {                                                     // 7130
                  directive.compile = valueFn(directive.link);                                                         // 7131
                }                                                                                                      // 7132
                directive.priority = directive.priority || 0;                                                          // 7133
                directive.index = index;                                                                               // 7134
                directive.name = directive.name || name;                                                               // 7135
                directive.require = directive.require || (directive.controller && directive.name);                     // 7136
                directive.restrict = directive.restrict || 'EA';                                                       // 7137
                var bindings = directive.$$bindings =                                                                  // 7138
                    parseDirectiveBindings(directive, directive.name);                                                 // 7139
                if (isObject(bindings.isolateScope)) {                                                                 // 7140
                  directive.$$isolateBindings = bindings.isolateScope;                                                 // 7141
                }                                                                                                      // 7142
                directive.$$moduleName = directiveFactory.$$moduleName;                                                // 7143
                directives.push(directive);                                                                            // 7144
              } catch (e) {                                                                                            // 7145
                $exceptionHandler(e);                                                                                  // 7146
              }                                                                                                        // 7147
            });                                                                                                        // 7148
            return directives;                                                                                         // 7149
          }]);                                                                                                         // 7150
      }                                                                                                                // 7151
      hasDirectives[name].push(directiveFactory);                                                                      // 7152
    } else {                                                                                                           // 7153
      forEach(name, reverseParams(registerDirective));                                                                 // 7154
    }                                                                                                                  // 7155
    return this;                                                                                                       // 7156
  };                                                                                                                   // 7157
                                                                                                                       // 7158
                                                                                                                       // 7159
  /**                                                                                                                  // 7160
   * @ngdoc method                                                                                                     // 7161
   * @name $compileProvider#aHrefSanitizationWhitelist                                                                 // 7162
   * @kind function                                                                                                    // 7163
   *                                                                                                                   // 7164
   * @description                                                                                                      // 7165
   * Retrieves or overrides the default regular expression that is used for whitelisting of safe                       // 7166
   * urls during a[href] sanitization.                                                                                 // 7167
   *                                                                                                                   // 7168
   * The sanitization is a security measure aimed at preventing XSS attacks via html links.                            // 7169
   *                                                                                                                   // 7170
   * Any url about to be assigned to a[href] via data-binding is first normalized and turned into                      // 7171
   * an absolute url. Afterwards, the url is matched against the `aHrefSanitizationWhitelist`                          // 7172
   * regular expression. If a match is found, the original url is written into the dom. Otherwise,                     // 7173
   * the absolute url is prefixed with `'unsafe:'` string and only then is it written into the DOM.                    // 7174
   *                                                                                                                   // 7175
   * @param {RegExp=} regexp New regexp to whitelist urls with.                                                        // 7176
   * @returns {RegExp|ng.$compileProvider} Current RegExp if called without value or self for                          // 7177
   *    chaining otherwise.                                                                                            // 7178
   */                                                                                                                  // 7179
  this.aHrefSanitizationWhitelist = function(regexp) {                                                                 // 7180
    if (isDefined(regexp)) {                                                                                           // 7181
      $$sanitizeUriProvider.aHrefSanitizationWhitelist(regexp);                                                        // 7182
      return this;                                                                                                     // 7183
    } else {                                                                                                           // 7184
      return $$sanitizeUriProvider.aHrefSanitizationWhitelist();                                                       // 7185
    }                                                                                                                  // 7186
  };                                                                                                                   // 7187
                                                                                                                       // 7188
                                                                                                                       // 7189
  /**                                                                                                                  // 7190
   * @ngdoc method                                                                                                     // 7191
   * @name $compileProvider#imgSrcSanitizationWhitelist                                                                // 7192
   * @kind function                                                                                                    // 7193
   *                                                                                                                   // 7194
   * @description                                                                                                      // 7195
   * Retrieves or overrides the default regular expression that is used for whitelisting of safe                       // 7196
   * urls during img[src] sanitization.                                                                                // 7197
   *                                                                                                                   // 7198
   * The sanitization is a security measure aimed at prevent XSS attacks via html links.                               // 7199
   *                                                                                                                   // 7200
   * Any url about to be assigned to img[src] via data-binding is first normalized and turned into                     // 7201
   * an absolute url. Afterwards, the url is matched against the `imgSrcSanitizationWhitelist`                         // 7202
   * regular expression. If a match is found, the original url is written into the dom. Otherwise,                     // 7203
   * the absolute url is prefixed with `'unsafe:'` string and only then is it written into the DOM.                    // 7204
   *                                                                                                                   // 7205
   * @param {RegExp=} regexp New regexp to whitelist urls with.                                                        // 7206
   * @returns {RegExp|ng.$compileProvider} Current RegExp if called without value or self for                          // 7207
   *    chaining otherwise.                                                                                            // 7208
   */                                                                                                                  // 7209
  this.imgSrcSanitizationWhitelist = function(regexp) {                                                                // 7210
    if (isDefined(regexp)) {                                                                                           // 7211
      $$sanitizeUriProvider.imgSrcSanitizationWhitelist(regexp);                                                       // 7212
      return this;                                                                                                     // 7213
    } else {                                                                                                           // 7214
      return $$sanitizeUriProvider.imgSrcSanitizationWhitelist();                                                      // 7215
    }                                                                                                                  // 7216
  };                                                                                                                   // 7217
                                                                                                                       // 7218
  /**                                                                                                                  // 7219
   * @ngdoc method                                                                                                     // 7220
   * @name  $compileProvider#debugInfoEnabled                                                                          // 7221
   *                                                                                                                   // 7222
   * @param {boolean=} enabled update the debugInfoEnabled state if provided, otherwise just return the                // 7223
   * current debugInfoEnabled state                                                                                    // 7224
   * @returns {*} current value if used as getter or itself (chaining) if used as setter                               // 7225
   *                                                                                                                   // 7226
   * @kind function                                                                                                    // 7227
   *                                                                                                                   // 7228
   * @description                                                                                                      // 7229
   * Call this method to enable/disable various debug runtime information in the compiler such as adding               // 7230
   * binding information and a reference to the current scope on to DOM elements.                                      // 7231
   * If enabled, the compiler will add the following to DOM elements that have been bound to the scope                 // 7232
   * * `ng-binding` CSS class                                                                                          // 7233
   * * `$binding` data property containing an array of the binding expressions                                         // 7234
   *                                                                                                                   // 7235
   * You may want to disable this in production for a significant performance boost. See                               // 7236
   * {@link guide/production#disabling-debug-data Disabling Debug Data} for more.                                      // 7237
   *                                                                                                                   // 7238
   * The default value is true.                                                                                        // 7239
   */                                                                                                                  // 7240
  var debugInfoEnabled = true;                                                                                         // 7241
  this.debugInfoEnabled = function(enabled) {                                                                          // 7242
    if (isDefined(enabled)) {                                                                                          // 7243
      debugInfoEnabled = enabled;                                                                                      // 7244
      return this;                                                                                                     // 7245
    }                                                                                                                  // 7246
    return debugInfoEnabled;                                                                                           // 7247
  };                                                                                                                   // 7248
                                                                                                                       // 7249
  this.$get = [                                                                                                        // 7250
            '$injector', '$interpolate', '$exceptionHandler', '$templateRequest', '$parse',                            // 7251
            '$controller', '$rootScope', '$document', '$sce', '$animate', '$$sanitizeUri',                             // 7252
    function($injector,   $interpolate,   $exceptionHandler,   $templateRequest,   $parse,                             // 7253
             $controller,   $rootScope,   $document,   $sce,   $animate,   $$sanitizeUri) {                            // 7254
                                                                                                                       // 7255
    var Attributes = function(element, attributesToCopy) {                                                             // 7256
      if (attributesToCopy) {                                                                                          // 7257
        var keys = Object.keys(attributesToCopy);                                                                      // 7258
        var i, l, key;                                                                                                 // 7259
                                                                                                                       // 7260
        for (i = 0, l = keys.length; i < l; i++) {                                                                     // 7261
          key = keys[i];                                                                                               // 7262
          this[key] = attributesToCopy[key];                                                                           // 7263
        }                                                                                                              // 7264
      } else {                                                                                                         // 7265
        this.$attr = {};                                                                                               // 7266
      }                                                                                                                // 7267
                                                                                                                       // 7268
      this.$$element = element;                                                                                        // 7269
    };                                                                                                                 // 7270
                                                                                                                       // 7271
    Attributes.prototype = {                                                                                           // 7272
      /**                                                                                                              // 7273
       * @ngdoc method                                                                                                 // 7274
       * @name $compile.directive.Attributes#$normalize                                                                // 7275
       * @kind function                                                                                                // 7276
       *                                                                                                               // 7277
       * @description                                                                                                  // 7278
       * Converts an attribute name (e.g. dash/colon/underscore-delimited string, optionally prefixed with `x-` or     // 7279
       * `data-`) to its normalized, camelCase form.                                                                   // 7280
       *                                                                                                               // 7281
       * Also there is special case for Moz prefix starting with upper case letter.                                    // 7282
       *                                                                                                               // 7283
       * For further information check out the guide on {@link guide/directive#matching-directives Matching Directives}
       *                                                                                                               // 7285
       * @param {string} name Name to normalize                                                                        // 7286
       */                                                                                                              // 7287
      $normalize: directiveNormalize,                                                                                  // 7288
                                                                                                                       // 7289
                                                                                                                       // 7290
      /**                                                                                                              // 7291
       * @ngdoc method                                                                                                 // 7292
       * @name $compile.directive.Attributes#$addClass                                                                 // 7293
       * @kind function                                                                                                // 7294
       *                                                                                                               // 7295
       * @description                                                                                                  // 7296
       * Adds the CSS class value specified by the classVal parameter to the element. If animations                    // 7297
       * are enabled then an animation will be triggered for the class addition.                                       // 7298
       *                                                                                                               // 7299
       * @param {string} classVal The className value that will be added to the element                                // 7300
       */                                                                                                              // 7301
      $addClass: function(classVal) {                                                                                  // 7302
        if (classVal && classVal.length > 0) {                                                                         // 7303
          $animate.addClass(this.$$element, classVal);                                                                 // 7304
        }                                                                                                              // 7305
      },                                                                                                               // 7306
                                                                                                                       // 7307
      /**                                                                                                              // 7308
       * @ngdoc method                                                                                                 // 7309
       * @name $compile.directive.Attributes#$removeClass                                                              // 7310
       * @kind function                                                                                                // 7311
       *                                                                                                               // 7312
       * @description                                                                                                  // 7313
       * Removes the CSS class value specified by the classVal parameter from the element. If                          // 7314
       * animations are enabled then an animation will be triggered for the class removal.                             // 7315
       *                                                                                                               // 7316
       * @param {string} classVal The className value that will be removed from the element                            // 7317
       */                                                                                                              // 7318
      $removeClass: function(classVal) {                                                                               // 7319
        if (classVal && classVal.length > 0) {                                                                         // 7320
          $animate.removeClass(this.$$element, classVal);                                                              // 7321
        }                                                                                                              // 7322
      },                                                                                                               // 7323
                                                                                                                       // 7324
      /**                                                                                                              // 7325
       * @ngdoc method                                                                                                 // 7326
       * @name $compile.directive.Attributes#$updateClass                                                              // 7327
       * @kind function                                                                                                // 7328
       *                                                                                                               // 7329
       * @description                                                                                                  // 7330
       * Adds and removes the appropriate CSS class values to the element based on the difference                      // 7331
       * between the new and old CSS class values (specified as newClasses and oldClasses).                            // 7332
       *                                                                                                               // 7333
       * @param {string} newClasses The current CSS className value                                                    // 7334
       * @param {string} oldClasses The former CSS className value                                                     // 7335
       */                                                                                                              // 7336
      $updateClass: function(newClasses, oldClasses) {                                                                 // 7337
        var toAdd = tokenDifference(newClasses, oldClasses);                                                           // 7338
        if (toAdd && toAdd.length) {                                                                                   // 7339
          $animate.addClass(this.$$element, toAdd);                                                                    // 7340
        }                                                                                                              // 7341
                                                                                                                       // 7342
        var toRemove = tokenDifference(oldClasses, newClasses);                                                        // 7343
        if (toRemove && toRemove.length) {                                                                             // 7344
          $animate.removeClass(this.$$element, toRemove);                                                              // 7345
        }                                                                                                              // 7346
      },                                                                                                               // 7347
                                                                                                                       // 7348
      /**                                                                                                              // 7349
       * Set a normalized attribute on the element in a way such that all directives                                   // 7350
       * can share the attribute. This function properly handles boolean attributes.                                   // 7351
       * @param {string} key Normalized key. (ie ngAttribute)                                                          // 7352
       * @param {string|boolean} value The value to set. If `null` attribute will be deleted.                          // 7353
       * @param {boolean=} writeAttr If false, does not write the value to DOM element attribute.                      // 7354
       *     Defaults to true.                                                                                         // 7355
       * @param {string=} attrName Optional none normalized name. Defaults to key.                                     // 7356
       */                                                                                                              // 7357
      $set: function(key, value, writeAttr, attrName) {                                                                // 7358
        // TODO: decide whether or not to throw an error if "class"                                                    // 7359
        //is set through this function since it may cause $updateClass to                                              // 7360
        //become unstable.                                                                                             // 7361
                                                                                                                       // 7362
        var node = this.$$element[0],                                                                                  // 7363
            booleanKey = getBooleanAttrName(node, key),                                                                // 7364
            aliasedKey = getAliasedAttrName(key),                                                                      // 7365
            observer = key,                                                                                            // 7366
            nodeName;                                                                                                  // 7367
                                                                                                                       // 7368
        if (booleanKey) {                                                                                              // 7369
          this.$$element.prop(key, value);                                                                             // 7370
          attrName = booleanKey;                                                                                       // 7371
        } else if (aliasedKey) {                                                                                       // 7372
          this[aliasedKey] = value;                                                                                    // 7373
          observer = aliasedKey;                                                                                       // 7374
        }                                                                                                              // 7375
                                                                                                                       // 7376
        this[key] = value;                                                                                             // 7377
                                                                                                                       // 7378
        // translate normalized key to actual key                                                                      // 7379
        if (attrName) {                                                                                                // 7380
          this.$attr[key] = attrName;                                                                                  // 7381
        } else {                                                                                                       // 7382
          attrName = this.$attr[key];                                                                                  // 7383
          if (!attrName) {                                                                                             // 7384
            this.$attr[key] = attrName = snake_case(key, '-');                                                         // 7385
          }                                                                                                            // 7386
        }                                                                                                              // 7387
                                                                                                                       // 7388
        nodeName = nodeName_(this.$$element);                                                                          // 7389
                                                                                                                       // 7390
        if ((nodeName === 'a' && key === 'href') ||                                                                    // 7391
            (nodeName === 'img' && key === 'src')) {                                                                   // 7392
          // sanitize a[href] and img[src] values                                                                      // 7393
          this[key] = value = $$sanitizeUri(value, key === 'src');                                                     // 7394
        } else if (nodeName === 'img' && key === 'srcset') {                                                           // 7395
          // sanitize img[srcset] values                                                                               // 7396
          var result = "";                                                                                             // 7397
                                                                                                                       // 7398
          // first check if there are spaces because it's not the same pattern                                         // 7399
          var trimmedSrcset = trim(value);                                                                             // 7400
          //                (   999x   ,|   999w   ,|   ,|,   )                                                        // 7401
          var srcPattern = /(\s+\d+x\s*,|\s+\d+w\s*,|\s+,|,\s+)/;                                                      // 7402
          var pattern = /\s/.test(trimmedSrcset) ? srcPattern : /(,)/;                                                 // 7403
                                                                                                                       // 7404
          // split srcset into tuple of uri and descriptor except for the last item                                    // 7405
          var rawUris = trimmedSrcset.split(pattern);                                                                  // 7406
                                                                                                                       // 7407
          // for each tuples                                                                                           // 7408
          var nbrUrisWith2parts = Math.floor(rawUris.length / 2);                                                      // 7409
          for (var i = 0; i < nbrUrisWith2parts; i++) {                                                                // 7410
            var innerIdx = i * 2;                                                                                      // 7411
            // sanitize the uri                                                                                        // 7412
            result += $$sanitizeUri(trim(rawUris[innerIdx]), true);                                                    // 7413
            // add the descriptor                                                                                      // 7414
            result += (" " + trim(rawUris[innerIdx + 1]));                                                             // 7415
          }                                                                                                            // 7416
                                                                                                                       // 7417
          // split the last item into uri and descriptor                                                               // 7418
          var lastTuple = trim(rawUris[i * 2]).split(/\s/);                                                            // 7419
                                                                                                                       // 7420
          // sanitize the last uri                                                                                     // 7421
          result += $$sanitizeUri(trim(lastTuple[0]), true);                                                           // 7422
                                                                                                                       // 7423
          // and add the last descriptor if any                                                                        // 7424
          if (lastTuple.length === 2) {                                                                                // 7425
            result += (" " + trim(lastTuple[1]));                                                                      // 7426
          }                                                                                                            // 7427
          this[key] = value = result;                                                                                  // 7428
        }                                                                                                              // 7429
                                                                                                                       // 7430
        if (writeAttr !== false) {                                                                                     // 7431
          if (value === null || isUndefined(value)) {                                                                  // 7432
            this.$$element.removeAttr(attrName);                                                                       // 7433
          } else {                                                                                                     // 7434
            this.$$element.attr(attrName, value);                                                                      // 7435
          }                                                                                                            // 7436
        }                                                                                                              // 7437
                                                                                                                       // 7438
        // fire observers                                                                                              // 7439
        var $$observers = this.$$observers;                                                                            // 7440
        $$observers && forEach($$observers[observer], function(fn) {                                                   // 7441
          try {                                                                                                        // 7442
            fn(value);                                                                                                 // 7443
          } catch (e) {                                                                                                // 7444
            $exceptionHandler(e);                                                                                      // 7445
          }                                                                                                            // 7446
        });                                                                                                            // 7447
      },                                                                                                               // 7448
                                                                                                                       // 7449
                                                                                                                       // 7450
      /**                                                                                                              // 7451
       * @ngdoc method                                                                                                 // 7452
       * @name $compile.directive.Attributes#$observe                                                                  // 7453
       * @kind function                                                                                                // 7454
       *                                                                                                               // 7455
       * @description                                                                                                  // 7456
       * Observes an interpolated attribute.                                                                           // 7457
       *                                                                                                               // 7458
       * The observer function will be invoked once during the next `$digest` following                                // 7459
       * compilation. The observer is then invoked whenever the interpolated value                                     // 7460
       * changes.                                                                                                      // 7461
       *                                                                                                               // 7462
       * @param {string} key Normalized key. (ie ngAttribute) .                                                        // 7463
       * @param {function(interpolatedValue)} fn Function that will be called whenever                                 // 7464
                the interpolated value of the attribute changes.                                                       // 7465
       *        See the {@link guide/directive#text-and-attribute-bindings Directives} guide for more info.            // 7466
       * @returns {function()} Returns a deregistration function for this observer.                                    // 7467
       */                                                                                                              // 7468
      $observe: function(key, fn) {                                                                                    // 7469
        var attrs = this,                                                                                              // 7470
            $$observers = (attrs.$$observers || (attrs.$$observers = createMap())),                                    // 7471
            listeners = ($$observers[key] || ($$observers[key] = []));                                                 // 7472
                                                                                                                       // 7473
        listeners.push(fn);                                                                                            // 7474
        $rootScope.$evalAsync(function() {                                                                             // 7475
          if (!listeners.$$inter && attrs.hasOwnProperty(key) && !isUndefined(attrs[key])) {                           // 7476
            // no one registered attribute interpolation function, so lets call it manually                            // 7477
            fn(attrs[key]);                                                                                            // 7478
          }                                                                                                            // 7479
        });                                                                                                            // 7480
                                                                                                                       // 7481
        return function() {                                                                                            // 7482
          arrayRemove(listeners, fn);                                                                                  // 7483
        };                                                                                                             // 7484
      }                                                                                                                // 7485
    };                                                                                                                 // 7486
                                                                                                                       // 7487
                                                                                                                       // 7488
    function safeAddClass($element, className) {                                                                       // 7489
      try {                                                                                                            // 7490
        $element.addClass(className);                                                                                  // 7491
      } catch (e) {                                                                                                    // 7492
        // ignore, since it means that we are trying to set class on                                                   // 7493
        // SVG element, where class name is read-only.                                                                 // 7494
      }                                                                                                                // 7495
    }                                                                                                                  // 7496
                                                                                                                       // 7497
                                                                                                                       // 7498
    var startSymbol = $interpolate.startSymbol(),                                                                      // 7499
        endSymbol = $interpolate.endSymbol(),                                                                          // 7500
        denormalizeTemplate = (startSymbol == '{{' || endSymbol  == '}}')                                              // 7501
            ? identity                                                                                                 // 7502
            : function denormalizeTemplate(template) {                                                                 // 7503
              return template.replace(/\{\{/g, startSymbol).replace(/}}/g, endSymbol);                                 // 7504
        },                                                                                                             // 7505
        NG_ATTR_BINDING = /^ngAttr[A-Z]/;                                                                              // 7506
    var MULTI_ELEMENT_DIR_RE = /^(.+)Start$/;                                                                          // 7507
                                                                                                                       // 7508
    compile.$$addBindingInfo = debugInfoEnabled ? function $$addBindingInfo($element, binding) {                       // 7509
      var bindings = $element.data('$binding') || [];                                                                  // 7510
                                                                                                                       // 7511
      if (isArray(binding)) {                                                                                          // 7512
        bindings = bindings.concat(binding);                                                                           // 7513
      } else {                                                                                                         // 7514
        bindings.push(binding);                                                                                        // 7515
      }                                                                                                                // 7516
                                                                                                                       // 7517
      $element.data('$binding', bindings);                                                                             // 7518
    } : noop;                                                                                                          // 7519
                                                                                                                       // 7520
    compile.$$addBindingClass = debugInfoEnabled ? function $$addBindingClass($element) {                              // 7521
      safeAddClass($element, 'ng-binding');                                                                            // 7522
    } : noop;                                                                                                          // 7523
                                                                                                                       // 7524
    compile.$$addScopeInfo = debugInfoEnabled ? function $$addScopeInfo($element, scope, isolated, noTemplate) {       // 7525
      var dataName = isolated ? (noTemplate ? '$isolateScopeNoTemplate' : '$isolateScope') : '$scope';                 // 7526
      $element.data(dataName, scope);                                                                                  // 7527
    } : noop;                                                                                                          // 7528
                                                                                                                       // 7529
    compile.$$addScopeClass = debugInfoEnabled ? function $$addScopeClass($element, isolated) {                        // 7530
      safeAddClass($element, isolated ? 'ng-isolate-scope' : 'ng-scope');                                              // 7531
    } : noop;                                                                                                          // 7532
                                                                                                                       // 7533
    return compile;                                                                                                    // 7534
                                                                                                                       // 7535
    //================================                                                                                 // 7536
                                                                                                                       // 7537
    function compile($compileNodes, transcludeFn, maxPriority, ignoreDirective,                                        // 7538
                        previousCompileContext) {                                                                      // 7539
      if (!($compileNodes instanceof jqLite)) {                                                                        // 7540
        // jquery always rewraps, whereas we need to preserve the original selector so that we can                     // 7541
        // modify it.                                                                                                  // 7542
        $compileNodes = jqLite($compileNodes);                                                                         // 7543
      }                                                                                                                // 7544
      // We can not compile top level text elements since text nodes can be merged and we will                         // 7545
      // not be able to attach scope data to them, so we will wrap them in <span>                                      // 7546
      forEach($compileNodes, function(node, index) {                                                                   // 7547
        if (node.nodeType == NODE_TYPE_TEXT && node.nodeValue.match(/\S+/) /* non-empty */ ) {                         // 7548
          $compileNodes[index] = jqLite(node).wrap('<span></span>').parent()[0];                                       // 7549
        }                                                                                                              // 7550
      });                                                                                                              // 7551
      var compositeLinkFn =                                                                                            // 7552
              compileNodes($compileNodes, transcludeFn, $compileNodes,                                                 // 7553
                           maxPriority, ignoreDirective, previousCompileContext);                                      // 7554
      compile.$$addScopeClass($compileNodes);                                                                          // 7555
      var namespace = null;                                                                                            // 7556
      return function publicLinkFn(scope, cloneConnectFn, options) {                                                   // 7557
        assertArg(scope, 'scope');                                                                                     // 7558
                                                                                                                       // 7559
        if (previousCompileContext && previousCompileContext.needsNewScope) {                                          // 7560
          // A parent directive did a replace and a directive on this element asked                                    // 7561
          // for transclusion, which caused us to lose a layer of element on which                                     // 7562
          // we could hold the new transclusion scope, so we will create it manually                                   // 7563
          // here.                                                                                                     // 7564
          scope = scope.$parent.$new();                                                                                // 7565
        }                                                                                                              // 7566
                                                                                                                       // 7567
        options = options || {};                                                                                       // 7568
        var parentBoundTranscludeFn = options.parentBoundTranscludeFn,                                                 // 7569
          transcludeControllers = options.transcludeControllers,                                                       // 7570
          futureParentElement = options.futureParentElement;                                                           // 7571
                                                                                                                       // 7572
        // When `parentBoundTranscludeFn` is passed, it is a                                                           // 7573
        // `controllersBoundTransclude` function (it was previously passed                                             // 7574
        // as `transclude` to directive.link) so we must unwrap it to get                                              // 7575
        // its `boundTranscludeFn`                                                                                     // 7576
        if (parentBoundTranscludeFn && parentBoundTranscludeFn.$$boundTransclude) {                                    // 7577
          parentBoundTranscludeFn = parentBoundTranscludeFn.$$boundTransclude;                                         // 7578
        }                                                                                                              // 7579
                                                                                                                       // 7580
        if (!namespace) {                                                                                              // 7581
          namespace = detectNamespaceForChildElements(futureParentElement);                                            // 7582
        }                                                                                                              // 7583
        var $linkNode;                                                                                                 // 7584
        if (namespace !== 'html') {                                                                                    // 7585
          // When using a directive with replace:true and templateUrl the $compileNodes                                // 7586
          // (or a child element inside of them)                                                                       // 7587
          // might change, so we need to recreate the namespace adapted compileNodes                                   // 7588
          // for call to the link function.                                                                            // 7589
          // Note: This will already clone the nodes...                                                                // 7590
          $linkNode = jqLite(                                                                                          // 7591
            wrapTemplate(namespace, jqLite('<div>').append($compileNodes).html())                                      // 7592
          );                                                                                                           // 7593
        } else if (cloneConnectFn) {                                                                                   // 7594
          // important!!: we must call our jqLite.clone() since the jQuery one is trying to be smart                   // 7595
          // and sometimes changes the structure of the DOM.                                                           // 7596
          $linkNode = JQLitePrototype.clone.call($compileNodes);                                                       // 7597
        } else {                                                                                                       // 7598
          $linkNode = $compileNodes;                                                                                   // 7599
        }                                                                                                              // 7600
                                                                                                                       // 7601
        if (transcludeControllers) {                                                                                   // 7602
          for (var controllerName in transcludeControllers) {                                                          // 7603
            $linkNode.data('$' + controllerName + 'Controller', transcludeControllers[controllerName].instance);       // 7604
          }                                                                                                            // 7605
        }                                                                                                              // 7606
                                                                                                                       // 7607
        compile.$$addScopeInfo($linkNode, scope);                                                                      // 7608
                                                                                                                       // 7609
        if (cloneConnectFn) cloneConnectFn($linkNode, scope);                                                          // 7610
        if (compositeLinkFn) compositeLinkFn(scope, $linkNode, $linkNode, parentBoundTranscludeFn);                    // 7611
        return $linkNode;                                                                                              // 7612
      };                                                                                                               // 7613
    }                                                                                                                  // 7614
                                                                                                                       // 7615
    function detectNamespaceForChildElements(parentElement) {                                                          // 7616
      // TODO: Make this detect MathML as well...                                                                      // 7617
      var node = parentElement && parentElement[0];                                                                    // 7618
      if (!node) {                                                                                                     // 7619
        return 'html';                                                                                                 // 7620
      } else {                                                                                                         // 7621
        return nodeName_(node) !== 'foreignobject' && node.toString().match(/SVG/) ? 'svg' : 'html';                   // 7622
      }                                                                                                                // 7623
    }                                                                                                                  // 7624
                                                                                                                       // 7625
    /**                                                                                                                // 7626
     * Compile function matches each node in nodeList against the directives. Once all directives                      // 7627
     * for a particular node are collected their compile functions are executed. The compile                           // 7628
     * functions return values - the linking functions - are combined into a composite linking                         // 7629
     * function, which is the a linking function for the node.                                                         // 7630
     *                                                                                                                 // 7631
     * @param {NodeList} nodeList an array of nodes or NodeList to compile                                             // 7632
     * @param {function(angular.Scope, cloneAttachFn=)} transcludeFn A linking function, where the                     // 7633
     *        scope argument is auto-generated to the new child of the transcluded parent scope.                       // 7634
     * @param {DOMElement=} $rootElement If the nodeList is the root of the compilation tree then                      // 7635
     *        the rootElement must be set the jqLite collection of the compile root. This is                           // 7636
     *        needed so that the jqLite collection items can be replaced with widgets.                                 // 7637
     * @param {number=} maxPriority Max directive priority.                                                            // 7638
     * @returns {Function} A composite linking function of all of the matched directives or null.                      // 7639
     */                                                                                                                // 7640
    function compileNodes(nodeList, transcludeFn, $rootElement, maxPriority, ignoreDirective,                          // 7641
                            previousCompileContext) {                                                                  // 7642
      var linkFns = [],                                                                                                // 7643
          attrs, directives, nodeLinkFn, childNodes, childLinkFn, linkFnFound, nodeLinkFnFound;                        // 7644
                                                                                                                       // 7645
      for (var i = 0; i < nodeList.length; i++) {                                                                      // 7646
        attrs = new Attributes();                                                                                      // 7647
                                                                                                                       // 7648
        // we must always refer to nodeList[i] since the nodes can be replaced underneath us.                          // 7649
        directives = collectDirectives(nodeList[i], [], attrs, i === 0 ? maxPriority : undefined,                      // 7650
                                        ignoreDirective);                                                              // 7651
                                                                                                                       // 7652
        nodeLinkFn = (directives.length)                                                                               // 7653
            ? applyDirectivesToNode(directives, nodeList[i], attrs, transcludeFn, $rootElement,                        // 7654
                                      null, [], [], previousCompileContext)                                            // 7655
            : null;                                                                                                    // 7656
                                                                                                                       // 7657
        if (nodeLinkFn && nodeLinkFn.scope) {                                                                          // 7658
          compile.$$addScopeClass(attrs.$$element);                                                                    // 7659
        }                                                                                                              // 7660
                                                                                                                       // 7661
        childLinkFn = (nodeLinkFn && nodeLinkFn.terminal ||                                                            // 7662
                      !(childNodes = nodeList[i].childNodes) ||                                                        // 7663
                      !childNodes.length)                                                                              // 7664
            ? null                                                                                                     // 7665
            : compileNodes(childNodes,                                                                                 // 7666
                 nodeLinkFn ? (                                                                                        // 7667
                  (nodeLinkFn.transcludeOnThisElement || !nodeLinkFn.templateOnThisElement)                            // 7668
                     && nodeLinkFn.transclude) : transcludeFn);                                                        // 7669
                                                                                                                       // 7670
        if (nodeLinkFn || childLinkFn) {                                                                               // 7671
          linkFns.push(i, nodeLinkFn, childLinkFn);                                                                    // 7672
          linkFnFound = true;                                                                                          // 7673
          nodeLinkFnFound = nodeLinkFnFound || nodeLinkFn;                                                             // 7674
        }                                                                                                              // 7675
                                                                                                                       // 7676
        //use the previous context only for the first element in the virtual group                                     // 7677
        previousCompileContext = null;                                                                                 // 7678
      }                                                                                                                // 7679
                                                                                                                       // 7680
      // return a linking function if we have found anything, null otherwise                                           // 7681
      return linkFnFound ? compositeLinkFn : null;                                                                     // 7682
                                                                                                                       // 7683
      function compositeLinkFn(scope, nodeList, $rootElement, parentBoundTranscludeFn) {                               // 7684
        var nodeLinkFn, childLinkFn, node, childScope, i, ii, idx, childBoundTranscludeFn;                             // 7685
        var stableNodeList;                                                                                            // 7686
                                                                                                                       // 7687
                                                                                                                       // 7688
        if (nodeLinkFnFound) {                                                                                         // 7689
          // copy nodeList so that if a nodeLinkFn removes or adds an element at this DOM level our                    // 7690
          // offsets don't get screwed up                                                                              // 7691
          var nodeListLength = nodeList.length;                                                                        // 7692
          stableNodeList = new Array(nodeListLength);                                                                  // 7693
                                                                                                                       // 7694
          // create a sparse array by only copying the elements which have a linkFn                                    // 7695
          for (i = 0; i < linkFns.length; i+=3) {                                                                      // 7696
            idx = linkFns[i];                                                                                          // 7697
            stableNodeList[idx] = nodeList[idx];                                                                       // 7698
          }                                                                                                            // 7699
        } else {                                                                                                       // 7700
          stableNodeList = nodeList;                                                                                   // 7701
        }                                                                                                              // 7702
                                                                                                                       // 7703
        for (i = 0, ii = linkFns.length; i < ii;) {                                                                    // 7704
          node = stableNodeList[linkFns[i++]];                                                                         // 7705
          nodeLinkFn = linkFns[i++];                                                                                   // 7706
          childLinkFn = linkFns[i++];                                                                                  // 7707
                                                                                                                       // 7708
          if (nodeLinkFn) {                                                                                            // 7709
            if (nodeLinkFn.scope) {                                                                                    // 7710
              childScope = scope.$new();                                                                               // 7711
              compile.$$addScopeInfo(jqLite(node), childScope);                                                        // 7712
            } else {                                                                                                   // 7713
              childScope = scope;                                                                                      // 7714
            }                                                                                                          // 7715
                                                                                                                       // 7716
            if (nodeLinkFn.transcludeOnThisElement) {                                                                  // 7717
              childBoundTranscludeFn = createBoundTranscludeFn(                                                        // 7718
                  scope, nodeLinkFn.transclude, parentBoundTranscludeFn);                                              // 7719
                                                                                                                       // 7720
            } else if (!nodeLinkFn.templateOnThisElement && parentBoundTranscludeFn) {                                 // 7721
              childBoundTranscludeFn = parentBoundTranscludeFn;                                                        // 7722
                                                                                                                       // 7723
            } else if (!parentBoundTranscludeFn && transcludeFn) {                                                     // 7724
              childBoundTranscludeFn = createBoundTranscludeFn(scope, transcludeFn);                                   // 7725
                                                                                                                       // 7726
            } else {                                                                                                   // 7727
              childBoundTranscludeFn = null;                                                                           // 7728
            }                                                                                                          // 7729
                                                                                                                       // 7730
            nodeLinkFn(childLinkFn, childScope, node, $rootElement, childBoundTranscludeFn);                           // 7731
                                                                                                                       // 7732
          } else if (childLinkFn) {                                                                                    // 7733
            childLinkFn(scope, node.childNodes, undefined, parentBoundTranscludeFn);                                   // 7734
          }                                                                                                            // 7735
        }                                                                                                              // 7736
      }                                                                                                                // 7737
    }                                                                                                                  // 7738
                                                                                                                       // 7739
    function createBoundTranscludeFn(scope, transcludeFn, previousBoundTranscludeFn) {                                 // 7740
                                                                                                                       // 7741
      var boundTranscludeFn = function(transcludedScope, cloneFn, controllers, futureParentElement, containingScope) {
                                                                                                                       // 7743
        if (!transcludedScope) {                                                                                       // 7744
          transcludedScope = scope.$new(false, containingScope);                                                       // 7745
          transcludedScope.$$transcluded = true;                                                                       // 7746
        }                                                                                                              // 7747
                                                                                                                       // 7748
        return transcludeFn(transcludedScope, cloneFn, {                                                               // 7749
          parentBoundTranscludeFn: previousBoundTranscludeFn,                                                          // 7750
          transcludeControllers: controllers,                                                                          // 7751
          futureParentElement: futureParentElement                                                                     // 7752
        });                                                                                                            // 7753
      };                                                                                                               // 7754
                                                                                                                       // 7755
      return boundTranscludeFn;                                                                                        // 7756
    }                                                                                                                  // 7757
                                                                                                                       // 7758
    /**                                                                                                                // 7759
     * Looks for directives on the given node and adds them to the directive collection which is                       // 7760
     * sorted.                                                                                                         // 7761
     *                                                                                                                 // 7762
     * @param node Node to search.                                                                                     // 7763
     * @param directives An array to which the directives are added to. This array is sorted before                    // 7764
     *        the function returns.                                                                                    // 7765
     * @param attrs The shared attrs object which is used to populate the normalized attributes.                       // 7766
     * @param {number=} maxPriority Max directive priority.                                                            // 7767
     */                                                                                                                // 7768
    function collectDirectives(node, directives, attrs, maxPriority, ignoreDirective) {                                // 7769
      var nodeType = node.nodeType,                                                                                    // 7770
          attrsMap = attrs.$attr,                                                                                      // 7771
          match,                                                                                                       // 7772
          className;                                                                                                   // 7773
                                                                                                                       // 7774
      switch (nodeType) {                                                                                              // 7775
        case NODE_TYPE_ELEMENT: /* Element */                                                                          // 7776
          // use the node name: <directive>                                                                            // 7777
          addDirective(directives,                                                                                     // 7778
              directiveNormalize(nodeName_(node)), 'E', maxPriority, ignoreDirective);                                 // 7779
                                                                                                                       // 7780
          // iterate over the attributes                                                                               // 7781
          for (var attr, name, nName, ngAttrName, value, isNgAttr, nAttrs = node.attributes,                           // 7782
                   j = 0, jj = nAttrs && nAttrs.length; j < jj; j++) {                                                 // 7783
            var attrStartName = false;                                                                                 // 7784
            var attrEndName = false;                                                                                   // 7785
                                                                                                                       // 7786
            attr = nAttrs[j];                                                                                          // 7787
            name = attr.name;                                                                                          // 7788
            value = trim(attr.value);                                                                                  // 7789
                                                                                                                       // 7790
            // support ngAttr attribute binding                                                                        // 7791
            ngAttrName = directiveNormalize(name);                                                                     // 7792
            if (isNgAttr = NG_ATTR_BINDING.test(ngAttrName)) {                                                         // 7793
              name = name.replace(PREFIX_REGEXP, '')                                                                   // 7794
                .substr(8).replace(/_(.)/g, function(match, letter) {                                                  // 7795
                  return letter.toUpperCase();                                                                         // 7796
                });                                                                                                    // 7797
            }                                                                                                          // 7798
                                                                                                                       // 7799
            var multiElementMatch = ngAttrName.match(MULTI_ELEMENT_DIR_RE);                                            // 7800
            if (multiElementMatch && directiveIsMultiElement(multiElementMatch[1])) {                                  // 7801
              attrStartName = name;                                                                                    // 7802
              attrEndName = name.substr(0, name.length - 5) + 'end';                                                   // 7803
              name = name.substr(0, name.length - 6);                                                                  // 7804
            }                                                                                                          // 7805
                                                                                                                       // 7806
            nName = directiveNormalize(name.toLowerCase());                                                            // 7807
            attrsMap[nName] = name;                                                                                    // 7808
            if (isNgAttr || !attrs.hasOwnProperty(nName)) {                                                            // 7809
                attrs[nName] = value;                                                                                  // 7810
                if (getBooleanAttrName(node, nName)) {                                                                 // 7811
                  attrs[nName] = true; // presence means true                                                          // 7812
                }                                                                                                      // 7813
            }                                                                                                          // 7814
            addAttrInterpolateDirective(node, directives, value, nName, isNgAttr);                                     // 7815
            addDirective(directives, nName, 'A', maxPriority, ignoreDirective, attrStartName,                          // 7816
                          attrEndName);                                                                                // 7817
          }                                                                                                            // 7818
                                                                                                                       // 7819
          // use class as directive                                                                                    // 7820
          className = node.className;                                                                                  // 7821
          if (isObject(className)) {                                                                                   // 7822
              // Maybe SVGAnimatedString                                                                               // 7823
              className = className.animVal;                                                                           // 7824
          }                                                                                                            // 7825
          if (isString(className) && className !== '') {                                                               // 7826
            while (match = CLASS_DIRECTIVE_REGEXP.exec(className)) {                                                   // 7827
              nName = directiveNormalize(match[2]);                                                                    // 7828
              if (addDirective(directives, nName, 'C', maxPriority, ignoreDirective)) {                                // 7829
                attrs[nName] = trim(match[3]);                                                                         // 7830
              }                                                                                                        // 7831
              className = className.substr(match.index + match[0].length);                                             // 7832
            }                                                                                                          // 7833
          }                                                                                                            // 7834
          break;                                                                                                       // 7835
        case NODE_TYPE_TEXT: /* Text Node */                                                                           // 7836
          if (msie === 11) {                                                                                           // 7837
            // Workaround for #11781                                                                                   // 7838
            while (node.parentNode && node.nextSibling && node.nextSibling.nodeType === NODE_TYPE_TEXT) {              // 7839
              node.nodeValue = node.nodeValue + node.nextSibling.nodeValue;                                            // 7840
              node.parentNode.removeChild(node.nextSibling);                                                           // 7841
            }                                                                                                          // 7842
          }                                                                                                            // 7843
          addTextInterpolateDirective(directives, node.nodeValue);                                                     // 7844
          break;                                                                                                       // 7845
        case NODE_TYPE_COMMENT: /* Comment */                                                                          // 7846
          try {                                                                                                        // 7847
            match = COMMENT_DIRECTIVE_REGEXP.exec(node.nodeValue);                                                     // 7848
            if (match) {                                                                                               // 7849
              nName = directiveNormalize(match[1]);                                                                    // 7850
              if (addDirective(directives, nName, 'M', maxPriority, ignoreDirective)) {                                // 7851
                attrs[nName] = trim(match[2]);                                                                         // 7852
              }                                                                                                        // 7853
            }                                                                                                          // 7854
          } catch (e) {                                                                                                // 7855
            // turns out that under some circumstances IE9 throws errors when one attempts to read                     // 7856
            // comment's node value.                                                                                   // 7857
            // Just ignore it and continue. (Can't seem to reproduce in test case.)                                    // 7858
          }                                                                                                            // 7859
          break;                                                                                                       // 7860
      }                                                                                                                // 7861
                                                                                                                       // 7862
      directives.sort(byPriority);                                                                                     // 7863
      return directives;                                                                                               // 7864
    }                                                                                                                  // 7865
                                                                                                                       // 7866
    /**                                                                                                                // 7867
     * Given a node with an directive-start it collects all of the siblings until it finds                             // 7868
     * directive-end.                                                                                                  // 7869
     * @param node                                                                                                     // 7870
     * @param attrStart                                                                                                // 7871
     * @param attrEnd                                                                                                  // 7872
     * @returns {*}                                                                                                    // 7873
     */                                                                                                                // 7874
    function groupScan(node, attrStart, attrEnd) {                                                                     // 7875
      var nodes = [];                                                                                                  // 7876
      var depth = 0;                                                                                                   // 7877
      if (attrStart && node.hasAttribute && node.hasAttribute(attrStart)) {                                            // 7878
        do {                                                                                                           // 7879
          if (!node) {                                                                                                 // 7880
            throw $compileMinErr('uterdir',                                                                            // 7881
                      "Unterminated attribute, found '{0}' but no matching '{1}' found.",                              // 7882
                      attrStart, attrEnd);                                                                             // 7883
          }                                                                                                            // 7884
          if (node.nodeType == NODE_TYPE_ELEMENT) {                                                                    // 7885
            if (node.hasAttribute(attrStart)) depth++;                                                                 // 7886
            if (node.hasAttribute(attrEnd)) depth--;                                                                   // 7887
          }                                                                                                            // 7888
          nodes.push(node);                                                                                            // 7889
          node = node.nextSibling;                                                                                     // 7890
        } while (depth > 0);                                                                                           // 7891
      } else {                                                                                                         // 7892
        nodes.push(node);                                                                                              // 7893
      }                                                                                                                // 7894
                                                                                                                       // 7895
      return jqLite(nodes);                                                                                            // 7896
    }                                                                                                                  // 7897
                                                                                                                       // 7898
    /**                                                                                                                // 7899
     * Wrapper for linking function which converts normal linking function into a grouped                              // 7900
     * linking function.                                                                                               // 7901
     * @param linkFn                                                                                                   // 7902
     * @param attrStart                                                                                                // 7903
     * @param attrEnd                                                                                                  // 7904
     * @returns {Function}                                                                                             // 7905
     */                                                                                                                // 7906
    function groupElementsLinkFnWrapper(linkFn, attrStart, attrEnd) {                                                  // 7907
      return function(scope, element, attrs, controllers, transcludeFn) {                                              // 7908
        element = groupScan(element[0], attrStart, attrEnd);                                                           // 7909
        return linkFn(scope, element, attrs, controllers, transcludeFn);                                               // 7910
      };                                                                                                               // 7911
    }                                                                                                                  // 7912
                                                                                                                       // 7913
    /**                                                                                                                // 7914
     * Once the directives have been collected, their compile functions are executed. This method                      // 7915
     * is responsible for inlining directive templates as well as terminating the application                          // 7916
     * of the directives if the terminal directive has been reached.                                                   // 7917
     *                                                                                                                 // 7918
     * @param {Array} directives Array of collected directives to execute their compile function.                      // 7919
     *        this needs to be pre-sorted by priority order.                                                           // 7920
     * @param {Node} compileNode The raw DOM node to apply the compile functions to                                    // 7921
     * @param {Object} templateAttrs The shared attribute function                                                     // 7922
     * @param {function(angular.Scope, cloneAttachFn=)} transcludeFn A linking function, where the                     // 7923
     *                                                  scope argument is auto-generated to the new                    // 7924
     *                                                  child of the transcluded parent scope.                         // 7925
     * @param {JQLite} jqCollection If we are working on the root of the compile tree then this                        // 7926
     *                              argument has the root jqLite array so that we can replace nodes                    // 7927
     *                              on it.                                                                             // 7928
     * @param {Object=} originalReplaceDirective An optional directive that will be ignored when                       // 7929
     *                                           compiling the transclusion.                                           // 7930
     * @param {Array.<Function>} preLinkFns                                                                            // 7931
     * @param {Array.<Function>} postLinkFns                                                                           // 7932
     * @param {Object} previousCompileContext Context used for previous compilation of the current                     // 7933
     *                                        node                                                                     // 7934
     * @returns {Function} linkFn                                                                                      // 7935
     */                                                                                                                // 7936
    function applyDirectivesToNode(directives, compileNode, templateAttrs, transcludeFn,                               // 7937
                                   jqCollection, originalReplaceDirective, preLinkFns, postLinkFns,                    // 7938
                                   previousCompileContext) {                                                           // 7939
      previousCompileContext = previousCompileContext || {};                                                           // 7940
                                                                                                                       // 7941
      var terminalPriority = -Number.MAX_VALUE,                                                                        // 7942
          newScopeDirective = previousCompileContext.newScopeDirective,                                                // 7943
          controllerDirectives = previousCompileContext.controllerDirectives,                                          // 7944
          newIsolateScopeDirective = previousCompileContext.newIsolateScopeDirective,                                  // 7945
          templateDirective = previousCompileContext.templateDirective,                                                // 7946
          nonTlbTranscludeDirective = previousCompileContext.nonTlbTranscludeDirective,                                // 7947
          hasTranscludeDirective = false,                                                                              // 7948
          hasTemplate = false,                                                                                         // 7949
          hasElementTranscludeDirective = previousCompileContext.hasElementTranscludeDirective,                        // 7950
          $compileNode = templateAttrs.$$element = jqLite(compileNode),                                                // 7951
          directive,                                                                                                   // 7952
          directiveName,                                                                                               // 7953
          $template,                                                                                                   // 7954
          replaceDirective = originalReplaceDirective,                                                                 // 7955
          childTranscludeFn = transcludeFn,                                                                            // 7956
          linkFn,                                                                                                      // 7957
          directiveValue;                                                                                              // 7958
                                                                                                                       // 7959
      // executes all directives on the current element                                                                // 7960
      for (var i = 0, ii = directives.length; i < ii; i++) {                                                           // 7961
        directive = directives[i];                                                                                     // 7962
        var attrStart = directive.$$start;                                                                             // 7963
        var attrEnd = directive.$$end;                                                                                 // 7964
                                                                                                                       // 7965
        // collect multiblock sections                                                                                 // 7966
        if (attrStart) {                                                                                               // 7967
          $compileNode = groupScan(compileNode, attrStart, attrEnd);                                                   // 7968
        }                                                                                                              // 7969
        $template = undefined;                                                                                         // 7970
                                                                                                                       // 7971
        if (terminalPriority > directive.priority) {                                                                   // 7972
          break; // prevent further processing of directives                                                           // 7973
        }                                                                                                              // 7974
                                                                                                                       // 7975
        if (directiveValue = directive.scope) {                                                                        // 7976
                                                                                                                       // 7977
          // skip the check for directives with async templates, we'll check the derived sync                          // 7978
          // directive when the template arrives                                                                       // 7979
          if (!directive.templateUrl) {                                                                                // 7980
            if (isObject(directiveValue)) {                                                                            // 7981
              // This directive is trying to add an isolated scope.                                                    // 7982
              // Check that there is no scope of any kind already                                                      // 7983
              assertNoDuplicate('new/isolated scope', newIsolateScopeDirective || newScopeDirective,                   // 7984
                                directive, $compileNode);                                                              // 7985
              newIsolateScopeDirective = directive;                                                                    // 7986
            } else {                                                                                                   // 7987
              // This directive is trying to add a child scope.                                                        // 7988
              // Check that there is no isolated scope already                                                         // 7989
              assertNoDuplicate('new/isolated scope', newIsolateScopeDirective, directive,                             // 7990
                                $compileNode);                                                                         // 7991
            }                                                                                                          // 7992
          }                                                                                                            // 7993
                                                                                                                       // 7994
          newScopeDirective = newScopeDirective || directive;                                                          // 7995
        }                                                                                                              // 7996
                                                                                                                       // 7997
        directiveName = directive.name;                                                                                // 7998
                                                                                                                       // 7999
        if (!directive.templateUrl && directive.controller) {                                                          // 8000
          directiveValue = directive.controller;                                                                       // 8001
          controllerDirectives = controllerDirectives || createMap();                                                  // 8002
          assertNoDuplicate("'" + directiveName + "' controller",                                                      // 8003
              controllerDirectives[directiveName], directive, $compileNode);                                           // 8004
          controllerDirectives[directiveName] = directive;                                                             // 8005
        }                                                                                                              // 8006
                                                                                                                       // 8007
        if (directiveValue = directive.transclude) {                                                                   // 8008
          hasTranscludeDirective = true;                                                                               // 8009
                                                                                                                       // 8010
          // Special case ngIf and ngRepeat so that we don't complain about duplicate transclusion.                    // 8011
          // This option should only be used by directives that know how to safely handle element transclusion,        // 8012
          // where the transcluded nodes are added or replaced after linking.                                          // 8013
          if (!directive.$$tlb) {                                                                                      // 8014
            assertNoDuplicate('transclusion', nonTlbTranscludeDirective, directive, $compileNode);                     // 8015
            nonTlbTranscludeDirective = directive;                                                                     // 8016
          }                                                                                                            // 8017
                                                                                                                       // 8018
          if (directiveValue == 'element') {                                                                           // 8019
            hasElementTranscludeDirective = true;                                                                      // 8020
            terminalPriority = directive.priority;                                                                     // 8021
            $template = $compileNode;                                                                                  // 8022
            $compileNode = templateAttrs.$$element =                                                                   // 8023
                jqLite(document.createComment(' ' + directiveName + ': ' +                                             // 8024
                                              templateAttrs[directiveName] + ' '));                                    // 8025
            compileNode = $compileNode[0];                                                                             // 8026
            replaceWith(jqCollection, sliceArgs($template), compileNode);                                              // 8027
                                                                                                                       // 8028
            childTranscludeFn = compile($template, transcludeFn, terminalPriority,                                     // 8029
                                        replaceDirective && replaceDirective.name, {                                   // 8030
                                          // Don't pass in:                                                            // 8031
                                          // - controllerDirectives - otherwise we'll create duplicates controllers    // 8032
                                          // - newIsolateScopeDirective or templateDirective - combining templates with
                                          //   element transclusion doesn't make sense.                                // 8034
                                          //                                                                           // 8035
                                          // We need only nonTlbTranscludeDirective so that we prevent putting transclusion
                                          // on the same element more than once.                                       // 8037
                                          nonTlbTranscludeDirective: nonTlbTranscludeDirective                         // 8038
                                        });                                                                            // 8039
          } else {                                                                                                     // 8040
            $template = jqLite(jqLiteClone(compileNode)).contents();                                                   // 8041
            $compileNode.empty(); // clear contents                                                                    // 8042
            childTranscludeFn = compile($template, transcludeFn, undefined,                                            // 8043
                undefined, { needsNewScope: directive.$$isolateScope || directive.$$newScope});                        // 8044
          }                                                                                                            // 8045
        }                                                                                                              // 8046
                                                                                                                       // 8047
        if (directive.template) {                                                                                      // 8048
          hasTemplate = true;                                                                                          // 8049
          assertNoDuplicate('template', templateDirective, directive, $compileNode);                                   // 8050
          templateDirective = directive;                                                                               // 8051
                                                                                                                       // 8052
          directiveValue = (isFunction(directive.template))                                                            // 8053
              ? directive.template($compileNode, templateAttrs)                                                        // 8054
              : directive.template;                                                                                    // 8055
                                                                                                                       // 8056
          directiveValue = denormalizeTemplate(directiveValue);                                                        // 8057
                                                                                                                       // 8058
          if (directive.replace) {                                                                                     // 8059
            replaceDirective = directive;                                                                              // 8060
            if (jqLiteIsTextNode(directiveValue)) {                                                                    // 8061
              $template = [];                                                                                          // 8062
            } else {                                                                                                   // 8063
              $template = removeComments(wrapTemplate(directive.templateNamespace, trim(directiveValue)));             // 8064
            }                                                                                                          // 8065
            compileNode = $template[0];                                                                                // 8066
                                                                                                                       // 8067
            if ($template.length != 1 || compileNode.nodeType !== NODE_TYPE_ELEMENT) {                                 // 8068
              throw $compileMinErr('tplrt',                                                                            // 8069
                  "Template for directive '{0}' must have exactly one root element. {1}",                              // 8070
                  directiveName, '');                                                                                  // 8071
            }                                                                                                          // 8072
                                                                                                                       // 8073
            replaceWith(jqCollection, $compileNode, compileNode);                                                      // 8074
                                                                                                                       // 8075
            var newTemplateAttrs = {$attr: {}};                                                                        // 8076
                                                                                                                       // 8077
            // combine directives from the original node and from the template:                                        // 8078
            // - take the array of directives for this element                                                         // 8079
            // - split it into two parts, those that already applied (processed) and those that weren't (unprocessed)  // 8080
            // - collect directives from the template and sort them by priority                                        // 8081
            // - combine directives as: processed + template + unprocessed                                             // 8082
            var templateDirectives = collectDirectives(compileNode, [], newTemplateAttrs);                             // 8083
            var unprocessedDirectives = directives.splice(i + 1, directives.length - (i + 1));                         // 8084
                                                                                                                       // 8085
            if (newIsolateScopeDirective || newScopeDirective) {                                                       // 8086
              // The original directive caused the current element to be replaced but this element                     // 8087
              // also needs to have a new scope, so we need to tell the template directives                            // 8088
              // that they would need to get their scope from further up, if they require transclusion                 // 8089
              markDirectiveScope(templateDirectives, newIsolateScopeDirective, newScopeDirective);                     // 8090
            }                                                                                                          // 8091
            directives = directives.concat(templateDirectives).concat(unprocessedDirectives);                          // 8092
            mergeTemplateAttributes(templateAttrs, newTemplateAttrs);                                                  // 8093
                                                                                                                       // 8094
            ii = directives.length;                                                                                    // 8095
          } else {                                                                                                     // 8096
            $compileNode.html(directiveValue);                                                                         // 8097
          }                                                                                                            // 8098
        }                                                                                                              // 8099
                                                                                                                       // 8100
        if (directive.templateUrl) {                                                                                   // 8101
          hasTemplate = true;                                                                                          // 8102
          assertNoDuplicate('template', templateDirective, directive, $compileNode);                                   // 8103
          templateDirective = directive;                                                                               // 8104
                                                                                                                       // 8105
          if (directive.replace) {                                                                                     // 8106
            replaceDirective = directive;                                                                              // 8107
          }                                                                                                            // 8108
                                                                                                                       // 8109
          nodeLinkFn = compileTemplateUrl(directives.splice(i, directives.length - i), $compileNode,                   // 8110
              templateAttrs, jqCollection, hasTranscludeDirective && childTranscludeFn, preLinkFns, postLinkFns, {     // 8111
                controllerDirectives: controllerDirectives,                                                            // 8112
                newScopeDirective: (newScopeDirective !== directive) && newScopeDirective,                             // 8113
                newIsolateScopeDirective: newIsolateScopeDirective,                                                    // 8114
                templateDirective: templateDirective,                                                                  // 8115
                nonTlbTranscludeDirective: nonTlbTranscludeDirective                                                   // 8116
              });                                                                                                      // 8117
          ii = directives.length;                                                                                      // 8118
        } else if (directive.compile) {                                                                                // 8119
          try {                                                                                                        // 8120
            linkFn = directive.compile($compileNode, templateAttrs, childTranscludeFn);                                // 8121
            if (isFunction(linkFn)) {                                                                                  // 8122
              addLinkFns(null, linkFn, attrStart, attrEnd);                                                            // 8123
            } else if (linkFn) {                                                                                       // 8124
              addLinkFns(linkFn.pre, linkFn.post, attrStart, attrEnd);                                                 // 8125
            }                                                                                                          // 8126
          } catch (e) {                                                                                                // 8127
            $exceptionHandler(e, startingTag($compileNode));                                                           // 8128
          }                                                                                                            // 8129
        }                                                                                                              // 8130
                                                                                                                       // 8131
        if (directive.terminal) {                                                                                      // 8132
          nodeLinkFn.terminal = true;                                                                                  // 8133
          terminalPriority = Math.max(terminalPriority, directive.priority);                                           // 8134
        }                                                                                                              // 8135
                                                                                                                       // 8136
      }                                                                                                                // 8137
                                                                                                                       // 8138
      nodeLinkFn.scope = newScopeDirective && newScopeDirective.scope === true;                                        // 8139
      nodeLinkFn.transcludeOnThisElement = hasTranscludeDirective;                                                     // 8140
      nodeLinkFn.templateOnThisElement = hasTemplate;                                                                  // 8141
      nodeLinkFn.transclude = childTranscludeFn;                                                                       // 8142
                                                                                                                       // 8143
      previousCompileContext.hasElementTranscludeDirective = hasElementTranscludeDirective;                            // 8144
                                                                                                                       // 8145
      // might be normal or delayed nodeLinkFn depending on if templateUrl is present                                  // 8146
      return nodeLinkFn;                                                                                               // 8147
                                                                                                                       // 8148
      ////////////////////                                                                                             // 8149
                                                                                                                       // 8150
      function addLinkFns(pre, post, attrStart, attrEnd) {                                                             // 8151
        if (pre) {                                                                                                     // 8152
          if (attrStart) pre = groupElementsLinkFnWrapper(pre, attrStart, attrEnd);                                    // 8153
          pre.require = directive.require;                                                                             // 8154
          pre.directiveName = directiveName;                                                                           // 8155
          if (newIsolateScopeDirective === directive || directive.$$isolateScope) {                                    // 8156
            pre = cloneAndAnnotateFn(pre, {isolateScope: true});                                                       // 8157
          }                                                                                                            // 8158
          preLinkFns.push(pre);                                                                                        // 8159
        }                                                                                                              // 8160
        if (post) {                                                                                                    // 8161
          if (attrStart) post = groupElementsLinkFnWrapper(post, attrStart, attrEnd);                                  // 8162
          post.require = directive.require;                                                                            // 8163
          post.directiveName = directiveName;                                                                          // 8164
          if (newIsolateScopeDirective === directive || directive.$$isolateScope) {                                    // 8165
            post = cloneAndAnnotateFn(post, {isolateScope: true});                                                     // 8166
          }                                                                                                            // 8167
          postLinkFns.push(post);                                                                                      // 8168
        }                                                                                                              // 8169
      }                                                                                                                // 8170
                                                                                                                       // 8171
                                                                                                                       // 8172
      function getControllers(directiveName, require, $element, elementControllers) {                                  // 8173
        var value;                                                                                                     // 8174
                                                                                                                       // 8175
        if (isString(require)) {                                                                                       // 8176
          var match = require.match(REQUIRE_PREFIX_REGEXP);                                                            // 8177
          var name = require.substring(match[0].length);                                                               // 8178
          var inheritType = match[1] || match[3];                                                                      // 8179
          var optional = match[2] === '?';                                                                             // 8180
                                                                                                                       // 8181
          //If only parents then start at the parent element                                                           // 8182
          if (inheritType === '^^') {                                                                                  // 8183
            $element = $element.parent();                                                                              // 8184
          //Otherwise attempt getting the controller from elementControllers in case                                   // 8185
          //the element is transcluded (and has no data) and to avoid .data if possible                                // 8186
          } else {                                                                                                     // 8187
            value = elementControllers && elementControllers[name];                                                    // 8188
            value = value && value.instance;                                                                           // 8189
          }                                                                                                            // 8190
                                                                                                                       // 8191
          if (!value) {                                                                                                // 8192
            var dataName = '$' + name + 'Controller';                                                                  // 8193
            value = inheritType ? $element.inheritedData(dataName) : $element.data(dataName);                          // 8194
          }                                                                                                            // 8195
                                                                                                                       // 8196
          if (!value && !optional) {                                                                                   // 8197
            throw $compileMinErr('ctreq',                                                                              // 8198
                "Controller '{0}', required by directive '{1}', can't be found!",                                      // 8199
                name, directiveName);                                                                                  // 8200
          }                                                                                                            // 8201
        } else if (isArray(require)) {                                                                                 // 8202
          value = [];                                                                                                  // 8203
          for (var i = 0, ii = require.length; i < ii; i++) {                                                          // 8204
            value[i] = getControllers(directiveName, require[i], $element, elementControllers);                        // 8205
          }                                                                                                            // 8206
        }                                                                                                              // 8207
                                                                                                                       // 8208
        return value || null;                                                                                          // 8209
      }                                                                                                                // 8210
                                                                                                                       // 8211
      function setupControllers($element, attrs, transcludeFn, controllerDirectives, isolateScope, scope) {            // 8212
        var elementControllers = createMap();                                                                          // 8213
        for (var controllerKey in controllerDirectives) {                                                              // 8214
          var directive = controllerDirectives[controllerKey];                                                         // 8215
          var locals = {                                                                                               // 8216
            $scope: directive === newIsolateScopeDirective || directive.$$isolateScope ? isolateScope : scope,         // 8217
            $element: $element,                                                                                        // 8218
            $attrs: attrs,                                                                                             // 8219
            $transclude: transcludeFn                                                                                  // 8220
          };                                                                                                           // 8221
                                                                                                                       // 8222
          var controller = directive.controller;                                                                       // 8223
          if (controller == '@') {                                                                                     // 8224
            controller = attrs[directive.name];                                                                        // 8225
          }                                                                                                            // 8226
                                                                                                                       // 8227
          var controllerInstance = $controller(controller, locals, true, directive.controllerAs);                      // 8228
                                                                                                                       // 8229
          // For directives with element transclusion the element is a comment,                                        // 8230
          // but jQuery .data doesn't support attaching data to comment nodes as it's hard to                          // 8231
          // clean up (http://bugs.jquery.com/ticket/8335).                                                            // 8232
          // Instead, we save the controllers for the element in a local hash and attach to .data                      // 8233
          // later, once we have the actual element.                                                                   // 8234
          elementControllers[directive.name] = controllerInstance;                                                     // 8235
          if (!hasElementTranscludeDirective) {                                                                        // 8236
            $element.data('$' + directive.name + 'Controller', controllerInstance.instance);                           // 8237
          }                                                                                                            // 8238
        }                                                                                                              // 8239
        return elementControllers;                                                                                     // 8240
      }                                                                                                                // 8241
                                                                                                                       // 8242
      function nodeLinkFn(childLinkFn, scope, linkNode, $rootElement, boundTranscludeFn) {                             // 8243
        var linkFn, isolateScope, controllerScope, elementControllers, transcludeFn, $element,                         // 8244
            attrs, removeScopeBindingWatches, removeControllerBindingWatches;                                          // 8245
                                                                                                                       // 8246
        if (compileNode === linkNode) {                                                                                // 8247
          attrs = templateAttrs;                                                                                       // 8248
          $element = templateAttrs.$$element;                                                                          // 8249
        } else {                                                                                                       // 8250
          $element = jqLite(linkNode);                                                                                 // 8251
          attrs = new Attributes($element, templateAttrs);                                                             // 8252
        }                                                                                                              // 8253
                                                                                                                       // 8254
        controllerScope = scope;                                                                                       // 8255
        if (newIsolateScopeDirective) {                                                                                // 8256
          isolateScope = scope.$new(true);                                                                             // 8257
        } else if (newScopeDirective) {                                                                                // 8258
          controllerScope = scope.$parent;                                                                             // 8259
        }                                                                                                              // 8260
                                                                                                                       // 8261
        if (boundTranscludeFn) {                                                                                       // 8262
          // track `boundTranscludeFn` so it can be unwrapped if `transcludeFn`                                        // 8263
          // is later passed as `parentBoundTranscludeFn` to `publicLinkFn`                                            // 8264
          transcludeFn = controllersBoundTransclude;                                                                   // 8265
          transcludeFn.$$boundTransclude = boundTranscludeFn;                                                          // 8266
        }                                                                                                              // 8267
                                                                                                                       // 8268
        if (controllerDirectives) {                                                                                    // 8269
          elementControllers = setupControllers($element, attrs, transcludeFn, controllerDirectives, isolateScope, scope);
        }                                                                                                              // 8271
                                                                                                                       // 8272
        if (newIsolateScopeDirective) {                                                                                // 8273
          // Initialize isolate scope bindings for new isolate scope directive.                                        // 8274
          compile.$$addScopeInfo($element, isolateScope, true, !(templateDirective && (templateDirective === newIsolateScopeDirective ||
              templateDirective === newIsolateScopeDirective.$$originalDirective)));                                   // 8276
          compile.$$addScopeClass($element, true);                                                                     // 8277
          isolateScope.$$isolateBindings =                                                                             // 8278
              newIsolateScopeDirective.$$isolateBindings;                                                              // 8279
          removeScopeBindingWatches = initializeDirectiveBindings(scope, attrs, isolateScope,                          // 8280
                                        isolateScope.$$isolateBindings,                                                // 8281
                                        newIsolateScopeDirective);                                                     // 8282
          if (removeScopeBindingWatches) {                                                                             // 8283
            isolateScope.$on('$destroy', removeScopeBindingWatches);                                                   // 8284
          }                                                                                                            // 8285
        }                                                                                                              // 8286
                                                                                                                       // 8287
        // Initialize bindToController bindings                                                                        // 8288
        for (var name in elementControllers) {                                                                         // 8289
          var controllerDirective = controllerDirectives[name];                                                        // 8290
          var controller = elementControllers[name];                                                                   // 8291
          var bindings = controllerDirective.$$bindings.bindToController;                                              // 8292
                                                                                                                       // 8293
          if (controller.identifier && bindings) {                                                                     // 8294
            removeControllerBindingWatches =                                                                           // 8295
              initializeDirectiveBindings(controllerScope, attrs, controller.instance, bindings, controllerDirective);
          }                                                                                                            // 8297
                                                                                                                       // 8298
          var controllerResult = controller();                                                                         // 8299
          if (controllerResult !== controller.instance) {                                                              // 8300
            // If the controller constructor has a return value, overwrite the instance                                // 8301
            // from setupControllers                                                                                   // 8302
            controller.instance = controllerResult;                                                                    // 8303
            $element.data('$' + controllerDirective.name + 'Controller', controllerResult);                            // 8304
            removeControllerBindingWatches && removeControllerBindingWatches();                                        // 8305
            removeControllerBindingWatches =                                                                           // 8306
              initializeDirectiveBindings(controllerScope, attrs, controller.instance, bindings, controllerDirective);
          }                                                                                                            // 8308
        }                                                                                                              // 8309
                                                                                                                       // 8310
        // PRELINKING                                                                                                  // 8311
        for (i = 0, ii = preLinkFns.length; i < ii; i++) {                                                             // 8312
          linkFn = preLinkFns[i];                                                                                      // 8313
          invokeLinkFn(linkFn,                                                                                         // 8314
              linkFn.isolateScope ? isolateScope : scope,                                                              // 8315
              $element,                                                                                                // 8316
              attrs,                                                                                                   // 8317
              linkFn.require && getControllers(linkFn.directiveName, linkFn.require, $element, elementControllers),    // 8318
              transcludeFn                                                                                             // 8319
          );                                                                                                           // 8320
        }                                                                                                              // 8321
                                                                                                                       // 8322
        // RECURSION                                                                                                   // 8323
        // We only pass the isolate scope, if the isolate directive has a template,                                    // 8324
        // otherwise the child elements do not belong to the isolate directive.                                        // 8325
        var scopeToChild = scope;                                                                                      // 8326
        if (newIsolateScopeDirective && (newIsolateScopeDirective.template || newIsolateScopeDirective.templateUrl === null)) {
          scopeToChild = isolateScope;                                                                                 // 8328
        }                                                                                                              // 8329
        childLinkFn && childLinkFn(scopeToChild, linkNode.childNodes, undefined, boundTranscludeFn);                   // 8330
                                                                                                                       // 8331
        // POSTLINKING                                                                                                 // 8332
        for (i = postLinkFns.length - 1; i >= 0; i--) {                                                                // 8333
          linkFn = postLinkFns[i];                                                                                     // 8334
          invokeLinkFn(linkFn,                                                                                         // 8335
              linkFn.isolateScope ? isolateScope : scope,                                                              // 8336
              $element,                                                                                                // 8337
              attrs,                                                                                                   // 8338
              linkFn.require && getControllers(linkFn.directiveName, linkFn.require, $element, elementControllers),    // 8339
              transcludeFn                                                                                             // 8340
          );                                                                                                           // 8341
        }                                                                                                              // 8342
                                                                                                                       // 8343
        // This is the function that is injected as `$transclude`.                                                     // 8344
        // Note: all arguments are optional!                                                                           // 8345
        function controllersBoundTransclude(scope, cloneAttachFn, futureParentElement) {                               // 8346
          var transcludeControllers;                                                                                   // 8347
                                                                                                                       // 8348
          // No scope passed in:                                                                                       // 8349
          if (!isScope(scope)) {                                                                                       // 8350
            futureParentElement = cloneAttachFn;                                                                       // 8351
            cloneAttachFn = scope;                                                                                     // 8352
            scope = undefined;                                                                                         // 8353
          }                                                                                                            // 8354
                                                                                                                       // 8355
          if (hasElementTranscludeDirective) {                                                                         // 8356
            transcludeControllers = elementControllers;                                                                // 8357
          }                                                                                                            // 8358
          if (!futureParentElement) {                                                                                  // 8359
            futureParentElement = hasElementTranscludeDirective ? $element.parent() : $element;                        // 8360
          }                                                                                                            // 8361
          return boundTranscludeFn(scope, cloneAttachFn, transcludeControllers, futureParentElement, scopeToChild);    // 8362
        }                                                                                                              // 8363
      }                                                                                                                // 8364
    }                                                                                                                  // 8365
                                                                                                                       // 8366
    // Depending upon the context in which a directive finds itself it might need to have a new isolated               // 8367
    // or child scope created. For instance:                                                                           // 8368
    // * if the directive has been pulled into a template because another directive with a higher priority             // 8369
    // asked for element transclusion                                                                                  // 8370
    // * if the directive itself asks for transclusion but it is at the root of a template and the original            // 8371
    // element was replaced. See https://github.com/angular/angular.js/issues/12936                                    // 8372
    function markDirectiveScope(directives, isolateScope, newScope) {                                                  // 8373
      for (var j = 0, jj = directives.length; j < jj; j++) {                                                           // 8374
        directives[j] = inherit(directives[j], {$$isolateScope: isolateScope, $$newScope: newScope});                  // 8375
      }                                                                                                                // 8376
    }                                                                                                                  // 8377
                                                                                                                       // 8378
    /**                                                                                                                // 8379
     * looks up the directive and decorates it with exception handling and proper parameters. We                       // 8380
     * call this the boundDirective.                                                                                   // 8381
     *                                                                                                                 // 8382
     * @param {string} name name of the directive to look up.                                                          // 8383
     * @param {string} location The directive must be found in specific format.                                        // 8384
     *   String containing any of theses characters:                                                                   // 8385
     *                                                                                                                 // 8386
     *   * `E`: element name                                                                                           // 8387
     *   * `A': attribute                                                                                              // 8388
     *   * `C`: class                                                                                                  // 8389
     *   * `M`: comment                                                                                                // 8390
     * @returns {boolean} true if directive was added.                                                                 // 8391
     */                                                                                                                // 8392
    function addDirective(tDirectives, name, location, maxPriority, ignoreDirective, startAttrName,                    // 8393
                          endAttrName) {                                                                               // 8394
      if (name === ignoreDirective) return null;                                                                       // 8395
      var match = null;                                                                                                // 8396
      if (hasDirectives.hasOwnProperty(name)) {                                                                        // 8397
        for (var directive, directives = $injector.get(name + Suffix),                                                 // 8398
            i = 0, ii = directives.length; i < ii; i++) {                                                              // 8399
          try {                                                                                                        // 8400
            directive = directives[i];                                                                                 // 8401
            if ((isUndefined(maxPriority) || maxPriority > directive.priority) &&                                      // 8402
                 directive.restrict.indexOf(location) != -1) {                                                         // 8403
              if (startAttrName) {                                                                                     // 8404
                directive = inherit(directive, {$$start: startAttrName, $$end: endAttrName});                          // 8405
              }                                                                                                        // 8406
              tDirectives.push(directive);                                                                             // 8407
              match = directive;                                                                                       // 8408
            }                                                                                                          // 8409
          } catch (e) { $exceptionHandler(e); }                                                                        // 8410
        }                                                                                                              // 8411
      }                                                                                                                // 8412
      return match;                                                                                                    // 8413
    }                                                                                                                  // 8414
                                                                                                                       // 8415
                                                                                                                       // 8416
    /**                                                                                                                // 8417
     * looks up the directive and returns true if it is a multi-element directive,                                     // 8418
     * and therefore requires DOM nodes between -start and -end markers to be grouped                                  // 8419
     * together.                                                                                                       // 8420
     *                                                                                                                 // 8421
     * @param {string} name name of the directive to look up.                                                          // 8422
     * @returns true if directive was registered as multi-element.                                                     // 8423
     */                                                                                                                // 8424
    function directiveIsMultiElement(name) {                                                                           // 8425
      if (hasDirectives.hasOwnProperty(name)) {                                                                        // 8426
        for (var directive, directives = $injector.get(name + Suffix),                                                 // 8427
            i = 0, ii = directives.length; i < ii; i++) {                                                              // 8428
          directive = directives[i];                                                                                   // 8429
          if (directive.multiElement) {                                                                                // 8430
            return true;                                                                                               // 8431
          }                                                                                                            // 8432
        }                                                                                                              // 8433
      }                                                                                                                // 8434
      return false;                                                                                                    // 8435
    }                                                                                                                  // 8436
                                                                                                                       // 8437
    /**                                                                                                                // 8438
     * When the element is replaced with HTML template then the new attributes                                         // 8439
     * on the template need to be merged with the existing attributes in the DOM.                                      // 8440
     * The desired effect is to have both of the attributes present.                                                   // 8441
     *                                                                                                                 // 8442
     * @param {object} dst destination attributes (original DOM)                                                       // 8443
     * @param {object} src source attributes (from the directive template)                                             // 8444
     */                                                                                                                // 8445
    function mergeTemplateAttributes(dst, src) {                                                                       // 8446
      var srcAttr = src.$attr,                                                                                         // 8447
          dstAttr = dst.$attr,                                                                                         // 8448
          $element = dst.$$element;                                                                                    // 8449
                                                                                                                       // 8450
      // reapply the old attributes to the new element                                                                 // 8451
      forEach(dst, function(value, key) {                                                                              // 8452
        if (key.charAt(0) != '$') {                                                                                    // 8453
          if (src[key] && src[key] !== value) {                                                                        // 8454
            value += (key === 'style' ? ';' : ' ') + src[key];                                                         // 8455
          }                                                                                                            // 8456
          dst.$set(key, value, true, srcAttr[key]);                                                                    // 8457
        }                                                                                                              // 8458
      });                                                                                                              // 8459
                                                                                                                       // 8460
      // copy the new attributes on the old attrs object                                                               // 8461
      forEach(src, function(value, key) {                                                                              // 8462
        if (key == 'class') {                                                                                          // 8463
          safeAddClass($element, value);                                                                               // 8464
          dst['class'] = (dst['class'] ? dst['class'] + ' ' : '') + value;                                             // 8465
        } else if (key == 'style') {                                                                                   // 8466
          $element.attr('style', $element.attr('style') + ';' + value);                                                // 8467
          dst['style'] = (dst['style'] ? dst['style'] + ';' : '') + value;                                             // 8468
          // `dst` will never contain hasOwnProperty as DOM parser won't let it.                                       // 8469
          // You will get an "InvalidCharacterError: DOM Exception 5" error if you                                     // 8470
          // have an attribute like "has-own-property" or "data-has-own-property", etc.                                // 8471
        } else if (key.charAt(0) != '$' && !dst.hasOwnProperty(key)) {                                                 // 8472
          dst[key] = value;                                                                                            // 8473
          dstAttr[key] = srcAttr[key];                                                                                 // 8474
        }                                                                                                              // 8475
      });                                                                                                              // 8476
    }                                                                                                                  // 8477
                                                                                                                       // 8478
                                                                                                                       // 8479
    function compileTemplateUrl(directives, $compileNode, tAttrs,                                                      // 8480
        $rootElement, childTranscludeFn, preLinkFns, postLinkFns, previousCompileContext) {                            // 8481
      var linkQueue = [],                                                                                              // 8482
          afterTemplateNodeLinkFn,                                                                                     // 8483
          afterTemplateChildLinkFn,                                                                                    // 8484
          beforeTemplateCompileNode = $compileNode[0],                                                                 // 8485
          origAsyncDirective = directives.shift(),                                                                     // 8486
          derivedSyncDirective = inherit(origAsyncDirective, {                                                         // 8487
            templateUrl: null, transclude: null, replace: null, $$originalDirective: origAsyncDirective                // 8488
          }),                                                                                                          // 8489
          templateUrl = (isFunction(origAsyncDirective.templateUrl))                                                   // 8490
              ? origAsyncDirective.templateUrl($compileNode, tAttrs)                                                   // 8491
              : origAsyncDirective.templateUrl,                                                                        // 8492
          templateNamespace = origAsyncDirective.templateNamespace;                                                    // 8493
                                                                                                                       // 8494
      $compileNode.empty();                                                                                            // 8495
                                                                                                                       // 8496
      $templateRequest(templateUrl)                                                                                    // 8497
        .then(function(content) {                                                                                      // 8498
          var compileNode, tempTemplateAttrs, $template, childBoundTranscludeFn;                                       // 8499
                                                                                                                       // 8500
          content = denormalizeTemplate(content);                                                                      // 8501
                                                                                                                       // 8502
          if (origAsyncDirective.replace) {                                                                            // 8503
            if (jqLiteIsTextNode(content)) {                                                                           // 8504
              $template = [];                                                                                          // 8505
            } else {                                                                                                   // 8506
              $template = removeComments(wrapTemplate(templateNamespace, trim(content)));                              // 8507
            }                                                                                                          // 8508
            compileNode = $template[0];                                                                                // 8509
                                                                                                                       // 8510
            if ($template.length != 1 || compileNode.nodeType !== NODE_TYPE_ELEMENT) {                                 // 8511
              throw $compileMinErr('tplrt',                                                                            // 8512
                  "Template for directive '{0}' must have exactly one root element. {1}",                              // 8513
                  origAsyncDirective.name, templateUrl);                                                               // 8514
            }                                                                                                          // 8515
                                                                                                                       // 8516
            tempTemplateAttrs = {$attr: {}};                                                                           // 8517
            replaceWith($rootElement, $compileNode, compileNode);                                                      // 8518
            var templateDirectives = collectDirectives(compileNode, [], tempTemplateAttrs);                            // 8519
                                                                                                                       // 8520
            if (isObject(origAsyncDirective.scope)) {                                                                  // 8521
              // the original directive that caused the template to be loaded async required                           // 8522
              // an isolate scope                                                                                      // 8523
              markDirectiveScope(templateDirectives, true);                                                            // 8524
            }                                                                                                          // 8525
            directives = templateDirectives.concat(directives);                                                        // 8526
            mergeTemplateAttributes(tAttrs, tempTemplateAttrs);                                                        // 8527
          } else {                                                                                                     // 8528
            compileNode = beforeTemplateCompileNode;                                                                   // 8529
            $compileNode.html(content);                                                                                // 8530
          }                                                                                                            // 8531
                                                                                                                       // 8532
          directives.unshift(derivedSyncDirective);                                                                    // 8533
                                                                                                                       // 8534
          afterTemplateNodeLinkFn = applyDirectivesToNode(directives, compileNode, tAttrs,                             // 8535
              childTranscludeFn, $compileNode, origAsyncDirective, preLinkFns, postLinkFns,                            // 8536
              previousCompileContext);                                                                                 // 8537
          forEach($rootElement, function(node, i) {                                                                    // 8538
            if (node == compileNode) {                                                                                 // 8539
              $rootElement[i] = $compileNode[0];                                                                       // 8540
            }                                                                                                          // 8541
          });                                                                                                          // 8542
          afterTemplateChildLinkFn = compileNodes($compileNode[0].childNodes, childTranscludeFn);                      // 8543
                                                                                                                       // 8544
          while (linkQueue.length) {                                                                                   // 8545
            var scope = linkQueue.shift(),                                                                             // 8546
                beforeTemplateLinkNode = linkQueue.shift(),                                                            // 8547
                linkRootElement = linkQueue.shift(),                                                                   // 8548
                boundTranscludeFn = linkQueue.shift(),                                                                 // 8549
                linkNode = $compileNode[0];                                                                            // 8550
                                                                                                                       // 8551
            if (scope.$$destroyed) continue;                                                                           // 8552
                                                                                                                       // 8553
            if (beforeTemplateLinkNode !== beforeTemplateCompileNode) {                                                // 8554
              var oldClasses = beforeTemplateLinkNode.className;                                                       // 8555
                                                                                                                       // 8556
              if (!(previousCompileContext.hasElementTranscludeDirective &&                                            // 8557
                  origAsyncDirective.replace)) {                                                                       // 8558
                // it was cloned therefore we have to clone as well.                                                   // 8559
                linkNode = jqLiteClone(compileNode);                                                                   // 8560
              }                                                                                                        // 8561
              replaceWith(linkRootElement, jqLite(beforeTemplateLinkNode), linkNode);                                  // 8562
                                                                                                                       // 8563
              // Copy in CSS classes from original node                                                                // 8564
              safeAddClass(jqLite(linkNode), oldClasses);                                                              // 8565
            }                                                                                                          // 8566
            if (afterTemplateNodeLinkFn.transcludeOnThisElement) {                                                     // 8567
              childBoundTranscludeFn = createBoundTranscludeFn(scope, afterTemplateNodeLinkFn.transclude, boundTranscludeFn);
            } else {                                                                                                   // 8569
              childBoundTranscludeFn = boundTranscludeFn;                                                              // 8570
            }                                                                                                          // 8571
            afterTemplateNodeLinkFn(afterTemplateChildLinkFn, scope, linkNode, $rootElement,                           // 8572
              childBoundTranscludeFn);                                                                                 // 8573
          }                                                                                                            // 8574
          linkQueue = null;                                                                                            // 8575
        });                                                                                                            // 8576
                                                                                                                       // 8577
      return function delayedNodeLinkFn(ignoreChildLinkFn, scope, node, rootElement, boundTranscludeFn) {              // 8578
        var childBoundTranscludeFn = boundTranscludeFn;                                                                // 8579
        if (scope.$$destroyed) return;                                                                                 // 8580
        if (linkQueue) {                                                                                               // 8581
          linkQueue.push(scope,                                                                                        // 8582
                         node,                                                                                         // 8583
                         rootElement,                                                                                  // 8584
                         childBoundTranscludeFn);                                                                      // 8585
        } else {                                                                                                       // 8586
          if (afterTemplateNodeLinkFn.transcludeOnThisElement) {                                                       // 8587
            childBoundTranscludeFn = createBoundTranscludeFn(scope, afterTemplateNodeLinkFn.transclude, boundTranscludeFn);
          }                                                                                                            // 8589
          afterTemplateNodeLinkFn(afterTemplateChildLinkFn, scope, node, rootElement, childBoundTranscludeFn);         // 8590
        }                                                                                                              // 8591
      };                                                                                                               // 8592
    }                                                                                                                  // 8593
                                                                                                                       // 8594
                                                                                                                       // 8595
    /**                                                                                                                // 8596
     * Sorting function for bound directives.                                                                          // 8597
     */                                                                                                                // 8598
    function byPriority(a, b) {                                                                                        // 8599
      var diff = b.priority - a.priority;                                                                              // 8600
      if (diff !== 0) return diff;                                                                                     // 8601
      if (a.name !== b.name) return (a.name < b.name) ? -1 : 1;                                                        // 8602
      return a.index - b.index;                                                                                        // 8603
    }                                                                                                                  // 8604
                                                                                                                       // 8605
    function assertNoDuplicate(what, previousDirective, directive, element) {                                          // 8606
                                                                                                                       // 8607
      function wrapModuleNameIfDefined(moduleName) {                                                                   // 8608
        return moduleName ?                                                                                            // 8609
          (' (module: ' + moduleName + ')') :                                                                          // 8610
          '';                                                                                                          // 8611
      }                                                                                                                // 8612
                                                                                                                       // 8613
      if (previousDirective) {                                                                                         // 8614
        throw $compileMinErr('multidir', 'Multiple directives [{0}{1}, {2}{3}] asking for {4} on: {5}',                // 8615
            previousDirective.name, wrapModuleNameIfDefined(previousDirective.$$moduleName),                           // 8616
            directive.name, wrapModuleNameIfDefined(directive.$$moduleName), what, startingTag(element));              // 8617
      }                                                                                                                // 8618
    }                                                                                                                  // 8619
                                                                                                                       // 8620
                                                                                                                       // 8621
    function addTextInterpolateDirective(directives, text) {                                                           // 8622
      var interpolateFn = $interpolate(text, true);                                                                    // 8623
      if (interpolateFn) {                                                                                             // 8624
        directives.push({                                                                                              // 8625
          priority: 0,                                                                                                 // 8626
          compile: function textInterpolateCompileFn(templateNode) {                                                   // 8627
            var templateNodeParent = templateNode.parent(),                                                            // 8628
                hasCompileParent = !!templateNodeParent.length;                                                        // 8629
                                                                                                                       // 8630
            // When transcluding a template that has bindings in the root                                              // 8631
            // we don't have a parent and thus need to add the class during linking fn.                                // 8632
            if (hasCompileParent) compile.$$addBindingClass(templateNodeParent);                                       // 8633
                                                                                                                       // 8634
            return function textInterpolateLinkFn(scope, node) {                                                       // 8635
              var parent = node.parent();                                                                              // 8636
              if (!hasCompileParent) compile.$$addBindingClass(parent);                                                // 8637
              compile.$$addBindingInfo(parent, interpolateFn.expressions);                                             // 8638
              scope.$watch(interpolateFn, function interpolateFnWatchAction(value) {                                   // 8639
                node[0].nodeValue = value;                                                                             // 8640
              });                                                                                                      // 8641
            };                                                                                                         // 8642
          }                                                                                                            // 8643
        });                                                                                                            // 8644
      }                                                                                                                // 8645
    }                                                                                                                  // 8646
                                                                                                                       // 8647
                                                                                                                       // 8648
    function wrapTemplate(type, template) {                                                                            // 8649
      type = lowercase(type || 'html');                                                                                // 8650
      switch (type) {                                                                                                  // 8651
      case 'svg':                                                                                                      // 8652
      case 'math':                                                                                                     // 8653
        var wrapper = document.createElement('div');                                                                   // 8654
        wrapper.innerHTML = '<' + type + '>' + template + '</' + type + '>';                                           // 8655
        return wrapper.childNodes[0].childNodes;                                                                       // 8656
      default:                                                                                                         // 8657
        return template;                                                                                               // 8658
      }                                                                                                                // 8659
    }                                                                                                                  // 8660
                                                                                                                       // 8661
                                                                                                                       // 8662
    function getTrustedContext(node, attrNormalizedName) {                                                             // 8663
      if (attrNormalizedName == "srcdoc") {                                                                            // 8664
        return $sce.HTML;                                                                                              // 8665
      }                                                                                                                // 8666
      var tag = nodeName_(node);                                                                                       // 8667
      // maction[xlink:href] can source SVG.  It's not limited to <maction>.                                           // 8668
      if (attrNormalizedName == "xlinkHref" ||                                                                         // 8669
          (tag == "form" && attrNormalizedName == "action") ||                                                         // 8670
          (tag != "img" && (attrNormalizedName == "src" ||                                                             // 8671
                            attrNormalizedName == "ngSrc"))) {                                                         // 8672
        return $sce.RESOURCE_URL;                                                                                      // 8673
      }                                                                                                                // 8674
    }                                                                                                                  // 8675
                                                                                                                       // 8676
                                                                                                                       // 8677
    function addAttrInterpolateDirective(node, directives, value, name, allOrNothing) {                                // 8678
      var trustedContext = getTrustedContext(node, name);                                                              // 8679
      allOrNothing = ALL_OR_NOTHING_ATTRS[name] || allOrNothing;                                                       // 8680
                                                                                                                       // 8681
      var interpolateFn = $interpolate(value, true, trustedContext, allOrNothing);                                     // 8682
                                                                                                                       // 8683
      // no interpolation found -> ignore                                                                              // 8684
      if (!interpolateFn) return;                                                                                      // 8685
                                                                                                                       // 8686
                                                                                                                       // 8687
      if (name === "multiple" && nodeName_(node) === "select") {                                                       // 8688
        throw $compileMinErr("selmulti",                                                                               // 8689
            "Binding to the 'multiple' attribute is not supported. Element: {0}",                                      // 8690
            startingTag(node));                                                                                        // 8691
      }                                                                                                                // 8692
                                                                                                                       // 8693
      directives.push({                                                                                                // 8694
        priority: 100,                                                                                                 // 8695
        compile: function() {                                                                                          // 8696
            return {                                                                                                   // 8697
              pre: function attrInterpolatePreLinkFn(scope, element, attr) {                                           // 8698
                var $$observers = (attr.$$observers || (attr.$$observers = createMap()));                              // 8699
                                                                                                                       // 8700
                if (EVENT_HANDLER_ATTR_REGEXP.test(name)) {                                                            // 8701
                  throw $compileMinErr('nodomevents',                                                                  // 8702
                      "Interpolations for HTML DOM event attributes are disallowed.  Please use the " +                // 8703
                          "ng- versions (such as ng-click instead of onclick) instead.");                              // 8704
                }                                                                                                      // 8705
                                                                                                                       // 8706
                // If the attribute has changed since last $interpolate()ed                                            // 8707
                var newValue = attr[name];                                                                             // 8708
                if (newValue !== value) {                                                                              // 8709
                  // we need to interpolate again since the attribute value has been updated                           // 8710
                  // (e.g. by another directive's compile function)                                                    // 8711
                  // ensure unset/empty values make interpolateFn falsy                                                // 8712
                  interpolateFn = newValue && $interpolate(newValue, true, trustedContext, allOrNothing);              // 8713
                  value = newValue;                                                                                    // 8714
                }                                                                                                      // 8715
                                                                                                                       // 8716
                // if attribute was updated so that there is no interpolation going on we don't want to                // 8717
                // register any observers                                                                              // 8718
                if (!interpolateFn) return;                                                                            // 8719
                                                                                                                       // 8720
                // initialize attr object so that it's ready in case we need the value for isolate                     // 8721
                // scope initialization, otherwise the value would not be available from isolate                       // 8722
                // directive's linking fn during linking phase                                                         // 8723
                attr[name] = interpolateFn(scope);                                                                     // 8724
                                                                                                                       // 8725
                ($$observers[name] || ($$observers[name] = [])).$$inter = true;                                        // 8726
                (attr.$$observers && attr.$$observers[name].$$scope || scope).                                         // 8727
                  $watch(interpolateFn, function interpolateFnWatchAction(newValue, oldValue) {                        // 8728
                    //special case for class attribute addition + removal                                              // 8729
                    //so that class changes can tap into the animation                                                 // 8730
                    //hooks provided by the $animate service. Be sure to                                               // 8731
                    //skip animations when the first digest occurs (when                                               // 8732
                    //both the new and the old values are the same) since                                              // 8733
                    //the CSS classes are the non-interpolated values                                                  // 8734
                    if (name === 'class' && newValue != oldValue) {                                                    // 8735
                      attr.$updateClass(newValue, oldValue);                                                           // 8736
                    } else {                                                                                           // 8737
                      attr.$set(name, newValue);                                                                       // 8738
                    }                                                                                                  // 8739
                  });                                                                                                  // 8740
              }                                                                                                        // 8741
            };                                                                                                         // 8742
          }                                                                                                            // 8743
      });                                                                                                              // 8744
    }                                                                                                                  // 8745
                                                                                                                       // 8746
                                                                                                                       // 8747
    /**                                                                                                                // 8748
     * This is a special jqLite.replaceWith, which can replace items which                                             // 8749
     * have no parents, provided that the containing jqLite collection is provided.                                    // 8750
     *                                                                                                                 // 8751
     * @param {JqLite=} $rootElement The root of the compile tree. Used so that we can replace nodes                   // 8752
     *                               in the root of the tree.                                                          // 8753
     * @param {JqLite} elementsToRemove The jqLite element which we are going to replace. We keep                      // 8754
     *                                  the shell, but replace its DOM node reference.                                 // 8755
     * @param {Node} newNode The new DOM node.                                                                         // 8756
     */                                                                                                                // 8757
    function replaceWith($rootElement, elementsToRemove, newNode) {                                                    // 8758
      var firstElementToRemove = elementsToRemove[0],                                                                  // 8759
          removeCount = elementsToRemove.length,                                                                       // 8760
          parent = firstElementToRemove.parentNode,                                                                    // 8761
          i, ii;                                                                                                       // 8762
                                                                                                                       // 8763
      if ($rootElement) {                                                                                              // 8764
        for (i = 0, ii = $rootElement.length; i < ii; i++) {                                                           // 8765
          if ($rootElement[i] == firstElementToRemove) {                                                               // 8766
            $rootElement[i++] = newNode;                                                                               // 8767
            for (var j = i, j2 = j + removeCount - 1,                                                                  // 8768
                     jj = $rootElement.length;                                                                         // 8769
                 j < jj; j++, j2++) {                                                                                  // 8770
              if (j2 < jj) {                                                                                           // 8771
                $rootElement[j] = $rootElement[j2];                                                                    // 8772
              } else {                                                                                                 // 8773
                delete $rootElement[j];                                                                                // 8774
              }                                                                                                        // 8775
            }                                                                                                          // 8776
            $rootElement.length -= removeCount - 1;                                                                    // 8777
                                                                                                                       // 8778
            // If the replaced element is also the jQuery .context then replace it                                     // 8779
            // .context is a deprecated jQuery api, so we should set it only when jQuery set it                        // 8780
            // http://api.jquery.com/context/                                                                          // 8781
            if ($rootElement.context === firstElementToRemove) {                                                       // 8782
              $rootElement.context = newNode;                                                                          // 8783
            }                                                                                                          // 8784
            break;                                                                                                     // 8785
          }                                                                                                            // 8786
        }                                                                                                              // 8787
      }                                                                                                                // 8788
                                                                                                                       // 8789
      if (parent) {                                                                                                    // 8790
        parent.replaceChild(newNode, firstElementToRemove);                                                            // 8791
      }                                                                                                                // 8792
                                                                                                                       // 8793
      // TODO(perf): what's this document fragment for? is it needed? can we at least reuse it?                        // 8794
      var fragment = document.createDocumentFragment();                                                                // 8795
      fragment.appendChild(firstElementToRemove);                                                                      // 8796
                                                                                                                       // 8797
      if (jqLite.hasData(firstElementToRemove)) {                                                                      // 8798
        // Copy over user data (that includes Angular's $scope etc.). Don't copy private                               // 8799
        // data here because there's no public interface in jQuery to do that and copying over                         // 8800
        // event listeners (which is the main use of private data) wouldn't work anyway.                               // 8801
        jqLite.data(newNode, jqLite.data(firstElementToRemove));                                                       // 8802
                                                                                                                       // 8803
        // Remove data of the replaced element. We cannot just call .remove()                                          // 8804
        // on the element it since that would deallocate scope that is needed                                          // 8805
        // for the new node. Instead, remove the data "manually".                                                      // 8806
        if (!jQuery) {                                                                                                 // 8807
          delete jqLite.cache[firstElementToRemove[jqLite.expando]];                                                   // 8808
        } else {                                                                                                       // 8809
          // jQuery 2.x doesn't expose the data storage. Use jQuery.cleanData to clean up after                        // 8810
          // the replaced element. The cleanData version monkey-patched by Angular would cause                         // 8811
          // the scope to be trashed and we do need the very same scope to work with the new                           // 8812
          // element. However, we cannot just cache the non-patched version and use it here as                         // 8813
          // that would break if another library patches the method after Angular does (one                            // 8814
          // example is jQuery UI). Instead, set a flag indicating scope destroying should be                          // 8815
          // skipped this one time.                                                                                    // 8816
          skipDestroyOnNextJQueryCleanData = true;                                                                     // 8817
          jQuery.cleanData([firstElementToRemove]);                                                                    // 8818
        }                                                                                                              // 8819
      }                                                                                                                // 8820
                                                                                                                       // 8821
      for (var k = 1, kk = elementsToRemove.length; k < kk; k++) {                                                     // 8822
        var element = elementsToRemove[k];                                                                             // 8823
        jqLite(element).remove(); // must do this way to clean up expando                                              // 8824
        fragment.appendChild(element);                                                                                 // 8825
        delete elementsToRemove[k];                                                                                    // 8826
      }                                                                                                                // 8827
                                                                                                                       // 8828
      elementsToRemove[0] = newNode;                                                                                   // 8829
      elementsToRemove.length = 1;                                                                                     // 8830
    }                                                                                                                  // 8831
                                                                                                                       // 8832
                                                                                                                       // 8833
    function cloneAndAnnotateFn(fn, annotation) {                                                                      // 8834
      return extend(function() { return fn.apply(null, arguments); }, fn, annotation);                                 // 8835
    }                                                                                                                  // 8836
                                                                                                                       // 8837
                                                                                                                       // 8838
    function invokeLinkFn(linkFn, scope, $element, attrs, controllers, transcludeFn) {                                 // 8839
      try {                                                                                                            // 8840
        linkFn(scope, $element, attrs, controllers, transcludeFn);                                                     // 8841
      } catch (e) {                                                                                                    // 8842
        $exceptionHandler(e, startingTag($element));                                                                   // 8843
      }                                                                                                                // 8844
    }                                                                                                                  // 8845
                                                                                                                       // 8846
                                                                                                                       // 8847
    // Set up $watches for isolate scope and controller bindings. This process                                         // 8848
    // only occurs for isolate scopes and new scopes with controllerAs.                                                // 8849
    function initializeDirectiveBindings(scope, attrs, destination, bindings, directive) {                             // 8850
      var removeWatchCollection = [];                                                                                  // 8851
      forEach(bindings, function(definition, scopeName) {                                                              // 8852
        var attrName = definition.attrName,                                                                            // 8853
        optional = definition.optional,                                                                                // 8854
        mode = definition.mode, // @, =, or &                                                                          // 8855
        lastValue,                                                                                                     // 8856
        parentGet, parentSet, compare;                                                                                 // 8857
                                                                                                                       // 8858
        switch (mode) {                                                                                                // 8859
                                                                                                                       // 8860
          case '@':                                                                                                    // 8861
            if (!optional && !hasOwnProperty.call(attrs, attrName)) {                                                  // 8862
              destination[scopeName] = attrs[attrName] = void 0;                                                       // 8863
            }                                                                                                          // 8864
            attrs.$observe(attrName, function(value) {                                                                 // 8865
              if (isString(value)) {                                                                                   // 8866
                destination[scopeName] = value;                                                                        // 8867
              }                                                                                                        // 8868
            });                                                                                                        // 8869
            attrs.$$observers[attrName].$$scope = scope;                                                               // 8870
            if (isString(attrs[attrName])) {                                                                           // 8871
              // If the attribute has been provided then we trigger an interpolation to ensure                         // 8872
              // the value is there for use in the link fn                                                             // 8873
              destination[scopeName] = $interpolate(attrs[attrName])(scope);                                           // 8874
            }                                                                                                          // 8875
            break;                                                                                                     // 8876
                                                                                                                       // 8877
          case '=':                                                                                                    // 8878
            if (!hasOwnProperty.call(attrs, attrName)) {                                                               // 8879
              if (optional) break;                                                                                     // 8880
              attrs[attrName] = void 0;                                                                                // 8881
            }                                                                                                          // 8882
            if (optional && !attrs[attrName]) break;                                                                   // 8883
                                                                                                                       // 8884
            parentGet = $parse(attrs[attrName]);                                                                       // 8885
            if (parentGet.literal) {                                                                                   // 8886
              compare = equals;                                                                                        // 8887
            } else {                                                                                                   // 8888
              compare = function(a, b) { return a === b || (a !== a && b !== b); };                                    // 8889
            }                                                                                                          // 8890
            parentSet = parentGet.assign || function() {                                                               // 8891
              // reset the change, or we will throw this exception on every $digest                                    // 8892
              lastValue = destination[scopeName] = parentGet(scope);                                                   // 8893
              throw $compileMinErr('nonassign',                                                                        // 8894
                  "Expression '{0}' used with directive '{1}' is non-assignable!",                                     // 8895
                  attrs[attrName], directive.name);                                                                    // 8896
            };                                                                                                         // 8897
            lastValue = destination[scopeName] = parentGet(scope);                                                     // 8898
            var parentValueWatch = function parentValueWatch(parentValue) {                                            // 8899
              if (!compare(parentValue, destination[scopeName])) {                                                     // 8900
                // we are out of sync and need to copy                                                                 // 8901
                if (!compare(parentValue, lastValue)) {                                                                // 8902
                  // parent changed and it has precedence                                                              // 8903
                  destination[scopeName] = parentValue;                                                                // 8904
                } else {                                                                                               // 8905
                  // if the parent can be assigned then do so                                                          // 8906
                  parentSet(scope, parentValue = destination[scopeName]);                                              // 8907
                }                                                                                                      // 8908
              }                                                                                                        // 8909
              return lastValue = parentValue;                                                                          // 8910
            };                                                                                                         // 8911
            parentValueWatch.$stateful = true;                                                                         // 8912
            var removeWatch;                                                                                           // 8913
            if (definition.collection) {                                                                               // 8914
              removeWatch = scope.$watchCollection(attrs[attrName], parentValueWatch);                                 // 8915
            } else {                                                                                                   // 8916
              removeWatch = scope.$watch($parse(attrs[attrName], parentValueWatch), null, parentGet.literal);          // 8917
            }                                                                                                          // 8918
            removeWatchCollection.push(removeWatch);                                                                   // 8919
            break;                                                                                                     // 8920
                                                                                                                       // 8921
          case '&':                                                                                                    // 8922
            // Don't assign Object.prototype method to scope                                                           // 8923
            parentGet = attrs.hasOwnProperty(attrName) ? $parse(attrs[attrName]) : noop;                               // 8924
                                                                                                                       // 8925
            // Don't assign noop to destination if expression is not valid                                             // 8926
            if (parentGet === noop && optional) break;                                                                 // 8927
                                                                                                                       // 8928
            destination[scopeName] = function(locals) {                                                                // 8929
              return parentGet(scope, locals);                                                                         // 8930
            };                                                                                                         // 8931
            break;                                                                                                     // 8932
        }                                                                                                              // 8933
      });                                                                                                              // 8934
                                                                                                                       // 8935
      return removeWatchCollection.length && function removeWatches() {                                                // 8936
        for (var i = 0, ii = removeWatchCollection.length; i < ii; ++i) {                                              // 8937
          removeWatchCollection[i]();                                                                                  // 8938
        }                                                                                                              // 8939
      };                                                                                                               // 8940
    }                                                                                                                  // 8941
  }];                                                                                                                  // 8942
}                                                                                                                      // 8943
                                                                                                                       // 8944
var PREFIX_REGEXP = /^((?:x|data)[\:\-_])/i;                                                                           // 8945
/**                                                                                                                    // 8946
 * Converts all accepted directives format into proper directive name.                                                 // 8947
 * @param name Name to normalize                                                                                       // 8948
 */                                                                                                                    // 8949
function directiveNormalize(name) {                                                                                    // 8950
  return camelCase(name.replace(PREFIX_REGEXP, ''));                                                                   // 8951
}                                                                                                                      // 8952
                                                                                                                       // 8953
/**                                                                                                                    // 8954
 * @ngdoc type                                                                                                         // 8955
 * @name $compile.directive.Attributes                                                                                 // 8956
 *                                                                                                                     // 8957
 * @description                                                                                                        // 8958
 * A shared object between directive compile / linking functions which contains normalized DOM                         // 8959
 * element attributes. The values reflect current binding state `{{ }}`. The normalization is                          // 8960
 * needed since all of these are treated as equivalent in Angular:                                                     // 8961
 *                                                                                                                     // 8962
 * ```                                                                                                                 // 8963
 *    <span ng:bind="a" ng-bind="a" data-ng-bind="a" x-ng-bind="a">                                                    // 8964
 * ```                                                                                                                 // 8965
 */                                                                                                                    // 8966
                                                                                                                       // 8967
/**                                                                                                                    // 8968
 * @ngdoc property                                                                                                     // 8969
 * @name $compile.directive.Attributes#$attr                                                                           // 8970
 *                                                                                                                     // 8971
 * @description                                                                                                        // 8972
 * A map of DOM element attribute names to the normalized name. This is                                                // 8973
 * needed to do reverse lookup from normalized name back to actual name.                                               // 8974
 */                                                                                                                    // 8975
                                                                                                                       // 8976
                                                                                                                       // 8977
/**                                                                                                                    // 8978
 * @ngdoc method                                                                                                       // 8979
 * @name $compile.directive.Attributes#$set                                                                            // 8980
 * @kind function                                                                                                      // 8981
 *                                                                                                                     // 8982
 * @description                                                                                                        // 8983
 * Set DOM element attribute value.                                                                                    // 8984
 *                                                                                                                     // 8985
 *                                                                                                                     // 8986
 * @param {string} name Normalized element attribute name of the property to modify. The name is                       // 8987
 *          reverse-translated using the {@link ng.$compile.directive.Attributes#$attr $attr}                          // 8988
 *          property to the original name.                                                                             // 8989
 * @param {string} value Value to set the attribute to. The value can be an interpolated string.                       // 8990
 */                                                                                                                    // 8991
                                                                                                                       // 8992
                                                                                                                       // 8993
                                                                                                                       // 8994
/**                                                                                                                    // 8995
 * Closure compiler type information                                                                                   // 8996
 */                                                                                                                    // 8997
                                                                                                                       // 8998
function nodesetLinkingFn(                                                                                             // 8999
  /* angular.Scope */ scope,                                                                                           // 9000
  /* NodeList */ nodeList,                                                                                             // 9001
  /* Element */ rootElement,                                                                                           // 9002
  /* function(Function) */ boundTranscludeFn                                                                           // 9003
) {}                                                                                                                   // 9004
                                                                                                                       // 9005
function directiveLinkingFn(                                                                                           // 9006
  /* nodesetLinkingFn */ nodesetLinkingFn,                                                                             // 9007
  /* angular.Scope */ scope,                                                                                           // 9008
  /* Node */ node,                                                                                                     // 9009
  /* Element */ rootElement,                                                                                           // 9010
  /* function(Function) */ boundTranscludeFn                                                                           // 9011
) {}                                                                                                                   // 9012
                                                                                                                       // 9013
function tokenDifference(str1, str2) {                                                                                 // 9014
  var values = '',                                                                                                     // 9015
      tokens1 = str1.split(/\s+/),                                                                                     // 9016
      tokens2 = str2.split(/\s+/);                                                                                     // 9017
                                                                                                                       // 9018
  outer:                                                                                                               // 9019
  for (var i = 0; i < tokens1.length; i++) {                                                                           // 9020
    var token = tokens1[i];                                                                                            // 9021
    for (var j = 0; j < tokens2.length; j++) {                                                                         // 9022
      if (token == tokens2[j]) continue outer;                                                                         // 9023
    }                                                                                                                  // 9024
    values += (values.length > 0 ? ' ' : '') + token;                                                                  // 9025
  }                                                                                                                    // 9026
  return values;                                                                                                       // 9027
}                                                                                                                      // 9028
                                                                                                                       // 9029
function removeComments(jqNodes) {                                                                                     // 9030
  jqNodes = jqLite(jqNodes);                                                                                           // 9031
  var i = jqNodes.length;                                                                                              // 9032
                                                                                                                       // 9033
  if (i <= 1) {                                                                                                        // 9034
    return jqNodes;                                                                                                    // 9035
  }                                                                                                                    // 9036
                                                                                                                       // 9037
  while (i--) {                                                                                                        // 9038
    var node = jqNodes[i];                                                                                             // 9039
    if (node.nodeType === NODE_TYPE_COMMENT) {                                                                         // 9040
      splice.call(jqNodes, i, 1);                                                                                      // 9041
    }                                                                                                                  // 9042
  }                                                                                                                    // 9043
  return jqNodes;                                                                                                      // 9044
}                                                                                                                      // 9045
                                                                                                                       // 9046
var $controllerMinErr = minErr('$controller');                                                                         // 9047
                                                                                                                       // 9048
                                                                                                                       // 9049
var CNTRL_REG = /^(\S+)(\s+as\s+(\w+))?$/;                                                                             // 9050
function identifierForController(controller, ident) {                                                                  // 9051
  if (ident && isString(ident)) return ident;                                                                          // 9052
  if (isString(controller)) {                                                                                          // 9053
    var match = CNTRL_REG.exec(controller);                                                                            // 9054
    if (match) return match[3];                                                                                        // 9055
  }                                                                                                                    // 9056
}                                                                                                                      // 9057
                                                                                                                       // 9058
                                                                                                                       // 9059
/**                                                                                                                    // 9060
 * @ngdoc provider                                                                                                     // 9061
 * @name $controllerProvider                                                                                           // 9062
 * @description                                                                                                        // 9063
 * The {@link ng.$controller $controller service} is used by Angular to create new                                     // 9064
 * controllers.                                                                                                        // 9065
 *                                                                                                                     // 9066
 * This provider allows controller registration via the                                                                // 9067
 * {@link ng.$controllerProvider#register register} method.                                                            // 9068
 */                                                                                                                    // 9069
function $ControllerProvider() {                                                                                       // 9070
  var controllers = {},                                                                                                // 9071
      globals = false;                                                                                                 // 9072
                                                                                                                       // 9073
  /**                                                                                                                  // 9074
   * @ngdoc method                                                                                                     // 9075
   * @name $controllerProvider#register                                                                                // 9076
   * @param {string|Object} name Controller name, or an object map of controllers where the keys are                   // 9077
   *    the names and the values are the constructors.                                                                 // 9078
   * @param {Function|Array} constructor Controller constructor fn (optionally decorated with DI                       // 9079
   *    annotations in the array notation).                                                                            // 9080
   */                                                                                                                  // 9081
  this.register = function(name, constructor) {                                                                        // 9082
    assertNotHasOwnProperty(name, 'controller');                                                                       // 9083
    if (isObject(name)) {                                                                                              // 9084
      extend(controllers, name);                                                                                       // 9085
    } else {                                                                                                           // 9086
      controllers[name] = constructor;                                                                                 // 9087
    }                                                                                                                  // 9088
  };                                                                                                                   // 9089
                                                                                                                       // 9090
  /**                                                                                                                  // 9091
   * @ngdoc method                                                                                                     // 9092
   * @name $controllerProvider#allowGlobals                                                                            // 9093
   * @description If called, allows `$controller` to find controller constructors on `window`                          // 9094
   */                                                                                                                  // 9095
  this.allowGlobals = function() {                                                                                     // 9096
    globals = true;                                                                                                    // 9097
  };                                                                                                                   // 9098
                                                                                                                       // 9099
                                                                                                                       // 9100
  this.$get = ['$injector', '$window', function($injector, $window) {                                                  // 9101
                                                                                                                       // 9102
    /**                                                                                                                // 9103
     * @ngdoc service                                                                                                  // 9104
     * @name $controller                                                                                               // 9105
     * @requires $injector                                                                                             // 9106
     *                                                                                                                 // 9107
     * @param {Function|string} constructor If called with a function then it's considered to be the                   // 9108
     *    controller constructor function. Otherwise it's considered to be a string which is used                      // 9109
     *    to retrieve the controller constructor using the following steps:                                            // 9110
     *                                                                                                                 // 9111
     *    * check if a controller with given name is registered via `$controllerProvider`                              // 9112
     *    * check if evaluating the string on the current scope returns a constructor                                  // 9113
     *    * if $controllerProvider#allowGlobals, check `window[constructor]` on the global                             // 9114
     *      `window` object (not recommended)                                                                          // 9115
     *                                                                                                                 // 9116
     *    The string can use the `controller as property` syntax, where the controller instance is published           // 9117
     *    as the specified property on the `scope`; the `scope` must be injected into `locals` param for this          // 9118
     *    to work correctly.                                                                                           // 9119
     *                                                                                                                 // 9120
     * @param {Object} locals Injection locals for Controller.                                                         // 9121
     * @return {Object} Instance of given controller.                                                                  // 9122
     *                                                                                                                 // 9123
     * @description                                                                                                    // 9124
     * `$controller` service is responsible for instantiating controllers.                                             // 9125
     *                                                                                                                 // 9126
     * It's just a simple call to {@link auto.$injector $injector}, but extracted into                                 // 9127
     * a service, so that one can override this service with [BC version](https://gist.github.com/1649788).            // 9128
     */                                                                                                                // 9129
    return function(expression, locals, later, ident) {                                                                // 9130
      // PRIVATE API:                                                                                                  // 9131
      //   param `later` --- indicates that the controller's constructor is invoked at a later time.                   // 9132
      //                     If true, $controller will allocate the object with the correct                            // 9133
      //                     prototype chain, but will not invoke the controller until a returned                      // 9134
      //                     callback is invoked.                                                                      // 9135
      //   param `ident` --- An optional label which overrides the label parsed from the controller                    // 9136
      //                     expression, if any.                                                                       // 9137
      var instance, match, constructor, identifier;                                                                    // 9138
      later = later === true;                                                                                          // 9139
      if (ident && isString(ident)) {                                                                                  // 9140
        identifier = ident;                                                                                            // 9141
      }                                                                                                                // 9142
                                                                                                                       // 9143
      if (isString(expression)) {                                                                                      // 9144
        match = expression.match(CNTRL_REG);                                                                           // 9145
        if (!match) {                                                                                                  // 9146
          throw $controllerMinErr('ctrlfmt',                                                                           // 9147
            "Badly formed controller string '{0}'. " +                                                                 // 9148
            "Must match `__name__ as __id__` or `__name__`.", expression);                                             // 9149
        }                                                                                                              // 9150
        constructor = match[1],                                                                                        // 9151
        identifier = identifier || match[3];                                                                           // 9152
        expression = controllers.hasOwnProperty(constructor)                                                           // 9153
            ? controllers[constructor]                                                                                 // 9154
            : getter(locals.$scope, constructor, true) ||                                                              // 9155
                (globals ? getter($window, constructor, true) : undefined);                                            // 9156
                                                                                                                       // 9157
        assertArgFn(expression, constructor, true);                                                                    // 9158
      }                                                                                                                // 9159
                                                                                                                       // 9160
      if (later) {                                                                                                     // 9161
        // Instantiate controller later:                                                                               // 9162
        // This machinery is used to create an instance of the object before calling the                               // 9163
        // controller's constructor itself.                                                                            // 9164
        //                                                                                                             // 9165
        // This allows properties to be added to the controller before the constructor is                              // 9166
        // invoked. Primarily, this is used for isolate scope bindings in $compile.                                    // 9167
        //                                                                                                             // 9168
        // This feature is not intended for use by applications, and is thus not documented                            // 9169
        // publicly.                                                                                                   // 9170
        // Object creation: http://jsperf.com/create-constructor/2                                                     // 9171
        var controllerPrototype = (isArray(expression) ?                                                               // 9172
          expression[expression.length - 1] : expression).prototype;                                                   // 9173
        instance = Object.create(controllerPrototype || null);                                                         // 9174
                                                                                                                       // 9175
        if (identifier) {                                                                                              // 9176
          addIdentifier(locals, identifier, instance, constructor || expression.name);                                 // 9177
        }                                                                                                              // 9178
                                                                                                                       // 9179
        var instantiate;                                                                                               // 9180
        return instantiate = extend(function() {                                                                       // 9181
          var result = $injector.invoke(expression, instance, locals, constructor);                                    // 9182
          if (result !== instance && (isObject(result) || isFunction(result))) {                                       // 9183
            instance = result;                                                                                         // 9184
            if (identifier) {                                                                                          // 9185
              // If result changed, re-assign controllerAs value to scope.                                             // 9186
              addIdentifier(locals, identifier, instance, constructor || expression.name);                             // 9187
            }                                                                                                          // 9188
          }                                                                                                            // 9189
          return instance;                                                                                             // 9190
        }, {                                                                                                           // 9191
          instance: instance,                                                                                          // 9192
          identifier: identifier                                                                                       // 9193
        });                                                                                                            // 9194
      }                                                                                                                // 9195
                                                                                                                       // 9196
      instance = $injector.instantiate(expression, locals, constructor);                                               // 9197
                                                                                                                       // 9198
      if (identifier) {                                                                                                // 9199
        addIdentifier(locals, identifier, instance, constructor || expression.name);                                   // 9200
      }                                                                                                                // 9201
                                                                                                                       // 9202
      return instance;                                                                                                 // 9203
    };                                                                                                                 // 9204
                                                                                                                       // 9205
    function addIdentifier(locals, identifier, instance, name) {                                                       // 9206
      if (!(locals && isObject(locals.$scope))) {                                                                      // 9207
        throw minErr('$controller')('noscp',                                                                           // 9208
          "Cannot export controller '{0}' as '{1}'! No $scope object provided via `locals`.",                          // 9209
          name, identifier);                                                                                           // 9210
      }                                                                                                                // 9211
                                                                                                                       // 9212
      locals.$scope[identifier] = instance;                                                                            // 9213
    }                                                                                                                  // 9214
  }];                                                                                                                  // 9215
}                                                                                                                      // 9216
                                                                                                                       // 9217
/**                                                                                                                    // 9218
 * @ngdoc service                                                                                                      // 9219
 * @name $document                                                                                                     // 9220
 * @requires $window                                                                                                   // 9221
 *                                                                                                                     // 9222
 * @description                                                                                                        // 9223
 * A {@link angular.element jQuery or jqLite} wrapper for the browser's `window.document` object.                      // 9224
 *                                                                                                                     // 9225
 * @example                                                                                                            // 9226
   <example module="documentExample">                                                                                  // 9227
     <file name="index.html">                                                                                          // 9228
       <div ng-controller="ExampleController">                                                                         // 9229
         <p>$document title: <b ng-bind="title"></b></p>                                                               // 9230
         <p>window.document title: <b ng-bind="windowTitle"></b></p>                                                   // 9231
       </div>                                                                                                          // 9232
     </file>                                                                                                           // 9233
     <file name="script.js">                                                                                           // 9234
       angular.module('documentExample', [])                                                                           // 9235
         .controller('ExampleController', ['$scope', '$document', function($scope, $document) {                        // 9236
           $scope.title = $document[0].title;                                                                          // 9237
           $scope.windowTitle = angular.element(window.document)[0].title;                                             // 9238
         }]);                                                                                                          // 9239
     </file>                                                                                                           // 9240
   </example>                                                                                                          // 9241
 */                                                                                                                    // 9242
function $DocumentProvider() {                                                                                         // 9243
  this.$get = ['$window', function(window) {                                                                           // 9244
    return jqLite(window.document);                                                                                    // 9245
  }];                                                                                                                  // 9246
}                                                                                                                      // 9247
                                                                                                                       // 9248
/**                                                                                                                    // 9249
 * @ngdoc service                                                                                                      // 9250
 * @name $exceptionHandler                                                                                             // 9251
 * @requires ng.$log                                                                                                   // 9252
 *                                                                                                                     // 9253
 * @description                                                                                                        // 9254
 * Any uncaught exception in angular expressions is delegated to this service.                                         // 9255
 * The default implementation simply delegates to `$log.error` which logs it into                                      // 9256
 * the browser console.                                                                                                // 9257
 *                                                                                                                     // 9258
 * In unit tests, if `angular-mocks.js` is loaded, this service is overridden by                                       // 9259
 * {@link ngMock.$exceptionHandler mock $exceptionHandler} which aids in testing.                                      // 9260
 *                                                                                                                     // 9261
 * ## Example:                                                                                                         // 9262
 *                                                                                                                     // 9263
 * ```js                                                                                                               // 9264
 *   angular.module('exceptionOverride', []).factory('$exceptionHandler', function() {                                 // 9265
 *     return function(exception, cause) {                                                                             // 9266
 *       exception.message += ' (caused by "' + cause + '")';                                                          // 9267
 *       throw exception;                                                                                              // 9268
 *     };                                                                                                              // 9269
 *   });                                                                                                               // 9270
 * ```                                                                                                                 // 9271
 *                                                                                                                     // 9272
 * This example will override the normal action of `$exceptionHandler`, to make angular                                // 9273
 * exceptions fail hard when they happen, instead of just logging to the console.                                      // 9274
 *                                                                                                                     // 9275
 * <hr />                                                                                                              // 9276
 * Note, that code executed in event-listeners (even those registered using jqLite's `on`/`bind`                       // 9277
 * methods) does not delegate exceptions to the {@link ng.$exceptionHandler $exceptionHandler}                         // 9278
 * (unless executed during a digest).                                                                                  // 9279
 *                                                                                                                     // 9280
 * If you wish, you can manually delegate exceptions, e.g.                                                             // 9281
 * `try { ... } catch(e) { $exceptionHandler(e); }`                                                                    // 9282
 *                                                                                                                     // 9283
 * @param {Error} exception Exception associated with the error.                                                       // 9284
 * @param {string=} cause optional information about the context in which                                              // 9285
 *       the error was thrown.                                                                                         // 9286
 *                                                                                                                     // 9287
 */                                                                                                                    // 9288
function $ExceptionHandlerProvider() {                                                                                 // 9289
  this.$get = ['$log', function($log) {                                                                                // 9290
    return function(exception, cause) {                                                                                // 9291
      $log.error.apply($log, arguments);                                                                               // 9292
    };                                                                                                                 // 9293
  }];                                                                                                                  // 9294
}                                                                                                                      // 9295
                                                                                                                       // 9296
var $$ForceReflowProvider = function() {                                                                               // 9297
  this.$get = ['$document', function($document) {                                                                      // 9298
    return function(domNode) {                                                                                         // 9299
      //the line below will force the browser to perform a repaint so                                                  // 9300
      //that all the animated elements within the animation frame will                                                 // 9301
      //be properly updated and drawn on screen. This is required to                                                   // 9302
      //ensure that the preparation animation is properly flushed so that                                              // 9303
      //the active state picks up from there. DO NOT REMOVE THIS LINE.                                                 // 9304
      //DO NOT OPTIMIZE THIS LINE. THE MINIFIER WILL REMOVE IT OTHERWISE WHICH                                         // 9305
      //WILL RESULT IN AN UNPREDICTABLE BUG THAT IS VERY HARD TO TRACK DOWN AND                                        // 9306
      //WILL TAKE YEARS AWAY FROM YOUR LIFE.                                                                           // 9307
      if (domNode) {                                                                                                   // 9308
        if (!domNode.nodeType && domNode instanceof jqLite) {                                                          // 9309
          domNode = domNode[0];                                                                                        // 9310
        }                                                                                                              // 9311
      } else {                                                                                                         // 9312
        domNode = $document[0].body;                                                                                   // 9313
      }                                                                                                                // 9314
      return domNode.offsetWidth + 1;                                                                                  // 9315
    };                                                                                                                 // 9316
  }];                                                                                                                  // 9317
};                                                                                                                     // 9318
                                                                                                                       // 9319
var APPLICATION_JSON = 'application/json';                                                                             // 9320
var CONTENT_TYPE_APPLICATION_JSON = {'Content-Type': APPLICATION_JSON + ';charset=utf-8'};                             // 9321
var JSON_START = /^\[|^\{(?!\{)/;                                                                                      // 9322
var JSON_ENDS = {                                                                                                      // 9323
  '[': /]$/,                                                                                                           // 9324
  '{': /}$/                                                                                                            // 9325
};                                                                                                                     // 9326
var JSON_PROTECTION_PREFIX = /^\)\]\}',?\n/;                                                                           // 9327
var $httpMinErr = minErr('$http');                                                                                     // 9328
var $httpMinErrLegacyFn = function(method) {                                                                           // 9329
  return function() {                                                                                                  // 9330
    throw $httpMinErr('legacy', 'The method `{0}` on the promise returned from `$http` has been disabled.', method);   // 9331
  };                                                                                                                   // 9332
};                                                                                                                     // 9333
                                                                                                                       // 9334
function serializeValue(v) {                                                                                           // 9335
  if (isObject(v)) {                                                                                                   // 9336
    return isDate(v) ? v.toISOString() : toJson(v);                                                                    // 9337
  }                                                                                                                    // 9338
  return v;                                                                                                            // 9339
}                                                                                                                      // 9340
                                                                                                                       // 9341
                                                                                                                       // 9342
function $HttpParamSerializerProvider() {                                                                              // 9343
  /**                                                                                                                  // 9344
   * @ngdoc service                                                                                                    // 9345
   * @name $httpParamSerializer                                                                                        // 9346
   * @description                                                                                                      // 9347
   *                                                                                                                   // 9348
   * Default {@link $http `$http`} params serializer that converts objects to strings                                  // 9349
   * according to the following rules:                                                                                 // 9350
   *                                                                                                                   // 9351
   * * `{'foo': 'bar'}` results in `foo=bar`                                                                           // 9352
   * * `{'foo': Date.now()}` results in `foo=2015-04-01T09%3A50%3A49.262Z` (`toISOString()` and encoded representation of a Date object)
   * * `{'foo': ['bar', 'baz']}` results in `foo=bar&foo=baz` (repeated key for each array element)                    // 9354
   * * `{'foo': {'bar':'baz'}}` results in `foo=%7B%22bar%22%3A%22baz%22%7D"` (stringified and encoded representation of an object)
   *                                                                                                                   // 9356
   * Note that serializer will sort the request parameters alphabetically.                                             // 9357
   * */                                                                                                                // 9358
                                                                                                                       // 9359
  this.$get = function() {                                                                                             // 9360
    return function ngParamSerializer(params) {                                                                        // 9361
      if (!params) return '';                                                                                          // 9362
      var parts = [];                                                                                                  // 9363
      forEachSorted(params, function(value, key) {                                                                     // 9364
        if (value === null || isUndefined(value)) return;                                                              // 9365
        if (isArray(value)) {                                                                                          // 9366
          forEach(value, function(v, k) {                                                                              // 9367
            parts.push(encodeUriQuery(key)  + '=' + encodeUriQuery(serializeValue(v)));                                // 9368
          });                                                                                                          // 9369
        } else {                                                                                                       // 9370
          parts.push(encodeUriQuery(key) + '=' + encodeUriQuery(serializeValue(value)));                               // 9371
        }                                                                                                              // 9372
      });                                                                                                              // 9373
                                                                                                                       // 9374
      return parts.join('&');                                                                                          // 9375
    };                                                                                                                 // 9376
  };                                                                                                                   // 9377
}                                                                                                                      // 9378
                                                                                                                       // 9379
function $HttpParamSerializerJQLikeProvider() {                                                                        // 9380
  /**                                                                                                                  // 9381
   * @ngdoc service                                                                                                    // 9382
   * @name $httpParamSerializerJQLike                                                                                  // 9383
   * @description                                                                                                      // 9384
   *                                                                                                                   // 9385
   * Alternative {@link $http `$http`} params serializer that follows                                                  // 9386
   * jQuery's [`param()`](http://api.jquery.com/jquery.param/) method logic.                                           // 9387
   * The serializer will also sort the params alphabetically.                                                          // 9388
   *                                                                                                                   // 9389
   * To use it for serializing `$http` request parameters, set it as the `paramSerializer` property:                   // 9390
   *                                                                                                                   // 9391
   * ```js                                                                                                             // 9392
   * $http({                                                                                                           // 9393
   *   url: myUrl,                                                                                                     // 9394
   *   method: 'GET',                                                                                                  // 9395
   *   params: myParams,                                                                                               // 9396
   *   paramSerializer: '$httpParamSerializerJQLike'                                                                   // 9397
   * });                                                                                                               // 9398
   * ```                                                                                                               // 9399
   *                                                                                                                   // 9400
   * It is also possible to set it as the default `paramSerializer` in the                                             // 9401
   * {@link $httpProvider#defaults `$httpProvider`}.                                                                   // 9402
   *                                                                                                                   // 9403
   * Additionally, you can inject the serializer and use it explicitly, for example to serialize                       // 9404
   * form data for submission:                                                                                         // 9405
   *                                                                                                                   // 9406
   * ```js                                                                                                             // 9407
   * .controller(function($http, $httpParamSerializerJQLike) {                                                         // 9408
   *   //...                                                                                                           // 9409
   *                                                                                                                   // 9410
   *   $http({                                                                                                         // 9411
   *     url: myUrl,                                                                                                   // 9412
   *     method: 'POST',                                                                                               // 9413
   *     data: $httpParamSerializerJQLike(myData),                                                                     // 9414
   *     headers: {                                                                                                    // 9415
   *       'Content-Type': 'application/x-www-form-urlencoded'                                                         // 9416
   *     }                                                                                                             // 9417
   *   });                                                                                                             // 9418
   *                                                                                                                   // 9419
   * });                                                                                                               // 9420
   * ```                                                                                                               // 9421
   *                                                                                                                   // 9422
   * */                                                                                                                // 9423
  this.$get = function() {                                                                                             // 9424
    return function jQueryLikeParamSerializer(params) {                                                                // 9425
      if (!params) return '';                                                                                          // 9426
      var parts = [];                                                                                                  // 9427
      serialize(params, '', true);                                                                                     // 9428
      return parts.join('&');                                                                                          // 9429
                                                                                                                       // 9430
      function serialize(toSerialize, prefix, topLevel) {                                                              // 9431
        if (toSerialize === null || isUndefined(toSerialize)) return;                                                  // 9432
        if (isArray(toSerialize)) {                                                                                    // 9433
          forEach(toSerialize, function(value, index) {                                                                // 9434
            serialize(value, prefix + '[' + (isObject(value) ? index : '') + ']');                                     // 9435
          });                                                                                                          // 9436
        } else if (isObject(toSerialize) && !isDate(toSerialize)) {                                                    // 9437
          forEachSorted(toSerialize, function(value, key) {                                                            // 9438
            serialize(value, prefix +                                                                                  // 9439
                (topLevel ? '' : '[') +                                                                                // 9440
                key +                                                                                                  // 9441
                (topLevel ? '' : ']'));                                                                                // 9442
          });                                                                                                          // 9443
        } else {                                                                                                       // 9444
          parts.push(encodeUriQuery(prefix) + '=' + encodeUriQuery(serializeValue(toSerialize)));                      // 9445
        }                                                                                                              // 9446
      }                                                                                                                // 9447
    };                                                                                                                 // 9448
  };                                                                                                                   // 9449
}                                                                                                                      // 9450
                                                                                                                       // 9451
function defaultHttpResponseTransform(data, headers) {                                                                 // 9452
  if (isString(data)) {                                                                                                // 9453
    // Strip json vulnerability protection prefix and trim whitespace                                                  // 9454
    var tempData = data.replace(JSON_PROTECTION_PREFIX, '').trim();                                                    // 9455
                                                                                                                       // 9456
    if (tempData) {                                                                                                    // 9457
      var contentType = headers('Content-Type');                                                                       // 9458
      if ((contentType && (contentType.indexOf(APPLICATION_JSON) === 0)) || isJsonLike(tempData)) {                    // 9459
        data = fromJson(tempData);                                                                                     // 9460
      }                                                                                                                // 9461
    }                                                                                                                  // 9462
  }                                                                                                                    // 9463
                                                                                                                       // 9464
  return data;                                                                                                         // 9465
}                                                                                                                      // 9466
                                                                                                                       // 9467
function isJsonLike(str) {                                                                                             // 9468
    var jsonStart = str.match(JSON_START);                                                                             // 9469
    return jsonStart && JSON_ENDS[jsonStart[0]].test(str);                                                             // 9470
}                                                                                                                      // 9471
                                                                                                                       // 9472
/**                                                                                                                    // 9473
 * Parse headers into key value object                                                                                 // 9474
 *                                                                                                                     // 9475
 * @param {string} headers Raw headers as a string                                                                     // 9476
 * @returns {Object} Parsed headers as key value object                                                                // 9477
 */                                                                                                                    // 9478
function parseHeaders(headers) {                                                                                       // 9479
  var parsed = createMap(), i;                                                                                         // 9480
                                                                                                                       // 9481
  function fillInParsed(key, val) {                                                                                    // 9482
    if (key) {                                                                                                         // 9483
      parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;                                                      // 9484
    }                                                                                                                  // 9485
  }                                                                                                                    // 9486
                                                                                                                       // 9487
  if (isString(headers)) {                                                                                             // 9488
    forEach(headers.split('\n'), function(line) {                                                                      // 9489
      i = line.indexOf(':');                                                                                           // 9490
      fillInParsed(lowercase(trim(line.substr(0, i))), trim(line.substr(i + 1)));                                      // 9491
    });                                                                                                                // 9492
  } else if (isObject(headers)) {                                                                                      // 9493
    forEach(headers, function(headerVal, headerKey) {                                                                  // 9494
      fillInParsed(lowercase(headerKey), trim(headerVal));                                                             // 9495
    });                                                                                                                // 9496
  }                                                                                                                    // 9497
                                                                                                                       // 9498
  return parsed;                                                                                                       // 9499
}                                                                                                                      // 9500
                                                                                                                       // 9501
                                                                                                                       // 9502
/**                                                                                                                    // 9503
 * Returns a function that provides access to parsed headers.                                                          // 9504
 *                                                                                                                     // 9505
 * Headers are lazy parsed when first requested.                                                                       // 9506
 * @see parseHeaders                                                                                                   // 9507
 *                                                                                                                     // 9508
 * @param {(string|Object)} headers Headers to provide access to.                                                      // 9509
 * @returns {function(string=)} Returns a getter function which if called with:                                        // 9510
 *                                                                                                                     // 9511
 *   - if called with single an argument returns a single header value or null                                         // 9512
 *   - if called with no arguments returns an object containing all headers.                                           // 9513
 */                                                                                                                    // 9514
function headersGetter(headers) {                                                                                      // 9515
  var headersObj;                                                                                                      // 9516
                                                                                                                       // 9517
  return function(name) {                                                                                              // 9518
    if (!headersObj) headersObj =  parseHeaders(headers);                                                              // 9519
                                                                                                                       // 9520
    if (name) {                                                                                                        // 9521
      var value = headersObj[lowercase(name)];                                                                         // 9522
      if (value === void 0) {                                                                                          // 9523
        value = null;                                                                                                  // 9524
      }                                                                                                                // 9525
      return value;                                                                                                    // 9526
    }                                                                                                                  // 9527
                                                                                                                       // 9528
    return headersObj;                                                                                                 // 9529
  };                                                                                                                   // 9530
}                                                                                                                      // 9531
                                                                                                                       // 9532
                                                                                                                       // 9533
/**                                                                                                                    // 9534
 * Chain all given functions                                                                                           // 9535
 *                                                                                                                     // 9536
 * This function is used for both request and response transforming                                                    // 9537
 *                                                                                                                     // 9538
 * @param {*} data Data to transform.                                                                                  // 9539
 * @param {function(string=)} headers HTTP headers getter fn.                                                          // 9540
 * @param {number} status HTTP status code of the response.                                                            // 9541
 * @param {(Function|Array.<Function>)} fns Function or an array of functions.                                         // 9542
 * @returns {*} Transformed data.                                                                                      // 9543
 */                                                                                                                    // 9544
function transformData(data, headers, status, fns) {                                                                   // 9545
  if (isFunction(fns)) {                                                                                               // 9546
    return fns(data, headers, status);                                                                                 // 9547
  }                                                                                                                    // 9548
                                                                                                                       // 9549
  forEach(fns, function(fn) {                                                                                          // 9550
    data = fn(data, headers, status);                                                                                  // 9551
  });                                                                                                                  // 9552
                                                                                                                       // 9553
  return data;                                                                                                         // 9554
}                                                                                                                      // 9555
                                                                                                                       // 9556
                                                                                                                       // 9557
function isSuccess(status) {                                                                                           // 9558
  return 200 <= status && status < 300;                                                                                // 9559
}                                                                                                                      // 9560
                                                                                                                       // 9561
                                                                                                                       // 9562
/**                                                                                                                    // 9563
 * @ngdoc provider                                                                                                     // 9564
 * @name $httpProvider                                                                                                 // 9565
 * @description                                                                                                        // 9566
 * Use `$httpProvider` to change the default behavior of the {@link ng.$http $http} service.                           // 9567
 * */                                                                                                                  // 9568
function $HttpProvider() {                                                                                             // 9569
  /**                                                                                                                  // 9570
   * @ngdoc property                                                                                                   // 9571
   * @name $httpProvider#defaults                                                                                      // 9572
   * @description                                                                                                      // 9573
   *                                                                                                                   // 9574
   * Object containing default values for all {@link ng.$http $http} requests.                                         // 9575
   *                                                                                                                   // 9576
   * - **`defaults.cache`** - {Object} - an object built with {@link ng.$cacheFactory `$cacheFactory`}                 // 9577
   * that will provide the cache for all requests who set their `cache` property to `true`.                            // 9578
   * If you set the `defaults.cache = false` then only requests that specify their own custom                          // 9579
   * cache object will be cached. See {@link $http#caching $http Caching} for more information.                        // 9580
   *                                                                                                                   // 9581
   * - **`defaults.xsrfCookieName`** - {string} - Name of cookie containing the XSRF token.                            // 9582
   * Defaults value is `'XSRF-TOKEN'`.                                                                                 // 9583
   *                                                                                                                   // 9584
   * - **`defaults.xsrfHeaderName`** - {string} - Name of HTTP header to populate with the                             // 9585
   * XSRF token. Defaults value is `'X-XSRF-TOKEN'`.                                                                   // 9586
   *                                                                                                                   // 9587
   * - **`defaults.headers`** - {Object} - Default headers for all $http requests.                                     // 9588
   * Refer to {@link ng.$http#setting-http-headers $http} for documentation on                                         // 9589
   * setting default headers.                                                                                          // 9590
   *     - **`defaults.headers.common`**                                                                               // 9591
   *     - **`defaults.headers.post`**                                                                                 // 9592
   *     - **`defaults.headers.put`**                                                                                  // 9593
   *     - **`defaults.headers.patch`**                                                                                // 9594
   *                                                                                                                   // 9595
   *                                                                                                                   // 9596
   * - **`defaults.paramSerializer`** - `{string|function(Object<string,string>):string}` - A function                 // 9597
   *  used to the prepare string representation of request parameters (specified as an object).                        // 9598
   *  If specified as string, it is interpreted as a function registered with the {@link auto.$injector $injector}.    // 9599
   *  Defaults to {@link ng.$httpParamSerializer $httpParamSerializer}.                                                // 9600
   *                                                                                                                   // 9601
   **/                                                                                                                 // 9602
  var defaults = this.defaults = {                                                                                     // 9603
    // transform incoming response data                                                                                // 9604
    transformResponse: [defaultHttpResponseTransform],                                                                 // 9605
                                                                                                                       // 9606
    // transform outgoing request data                                                                                 // 9607
    transformRequest: [function(d) {                                                                                   // 9608
      return isObject(d) && !isFile(d) && !isBlob(d) && !isFormData(d) ? toJson(d) : d;                                // 9609
    }],                                                                                                                // 9610
                                                                                                                       // 9611
    // default headers                                                                                                 // 9612
    headers: {                                                                                                         // 9613
      common: {                                                                                                        // 9614
        'Accept': 'application/json, text/plain, */*'                                                                  // 9615
      },                                                                                                               // 9616
      post:   shallowCopy(CONTENT_TYPE_APPLICATION_JSON),                                                              // 9617
      put:    shallowCopy(CONTENT_TYPE_APPLICATION_JSON),                                                              // 9618
      patch:  shallowCopy(CONTENT_TYPE_APPLICATION_JSON)                                                               // 9619
    },                                                                                                                 // 9620
                                                                                                                       // 9621
    xsrfCookieName: 'XSRF-TOKEN',                                                                                      // 9622
    xsrfHeaderName: 'X-XSRF-TOKEN',                                                                                    // 9623
                                                                                                                       // 9624
    paramSerializer: '$httpParamSerializer'                                                                            // 9625
  };                                                                                                                   // 9626
                                                                                                                       // 9627
  var useApplyAsync = false;                                                                                           // 9628
  /**                                                                                                                  // 9629
   * @ngdoc method                                                                                                     // 9630
   * @name $httpProvider#useApplyAsync                                                                                 // 9631
   * @description                                                                                                      // 9632
   *                                                                                                                   // 9633
   * Configure $http service to combine processing of multiple http responses received at around                       // 9634
   * the same time via {@link ng.$rootScope.Scope#$applyAsync $rootScope.$applyAsync}. This can result in              // 9635
   * significant performance improvement for bigger applications that make many HTTP requests                          // 9636
   * concurrently (common during application bootstrap).                                                               // 9637
   *                                                                                                                   // 9638
   * Defaults to false. If no value is specified, returns the current configured value.                                // 9639
   *                                                                                                                   // 9640
   * @param {boolean=} value If true, when requests are loaded, they will schedule a deferred                          // 9641
   *    "apply" on the next tick, giving time for subsequent requests in a roughly ~10ms window                        // 9642
   *    to load and share the same digest cycle.                                                                       // 9643
   *                                                                                                                   // 9644
   * @returns {boolean|Object} If a value is specified, returns the $httpProvider for chaining.                        // 9645
   *    otherwise, returns the current configured value.                                                               // 9646
   **/                                                                                                                 // 9647
  this.useApplyAsync = function(value) {                                                                               // 9648
    if (isDefined(value)) {                                                                                            // 9649
      useApplyAsync = !!value;                                                                                         // 9650
      return this;                                                                                                     // 9651
    }                                                                                                                  // 9652
    return useApplyAsync;                                                                                              // 9653
  };                                                                                                                   // 9654
                                                                                                                       // 9655
  var useLegacyPromise = true;                                                                                         // 9656
  /**                                                                                                                  // 9657
   * @ngdoc method                                                                                                     // 9658
   * @name $httpProvider#useLegacyPromiseExtensions                                                                    // 9659
   * @description                                                                                                      // 9660
   *                                                                                                                   // 9661
   * Configure `$http` service to return promises without the shorthand methods `success` and `error`.                 // 9662
   * This should be used to make sure that applications work without these methods.                                    // 9663
   *                                                                                                                   // 9664
   * Defaults to true. If no value is specified, returns the current configured value.                                 // 9665
   *                                                                                                                   // 9666
   * @param {boolean=} value If true, `$http` will return a promise with the deprecated legacy `success` and `error` methods.
   *                                                                                                                   // 9668
   * @returns {boolean|Object} If a value is specified, returns the $httpProvider for chaining.                        // 9669
   *    otherwise, returns the current configured value.                                                               // 9670
   **/                                                                                                                 // 9671
  this.useLegacyPromiseExtensions = function(value) {                                                                  // 9672
    if (isDefined(value)) {                                                                                            // 9673
      useLegacyPromise = !!value;                                                                                      // 9674
      return this;                                                                                                     // 9675
    }                                                                                                                  // 9676
    return useLegacyPromise;                                                                                           // 9677
  };                                                                                                                   // 9678
                                                                                                                       // 9679
  /**                                                                                                                  // 9680
   * @ngdoc property                                                                                                   // 9681
   * @name $httpProvider#interceptors                                                                                  // 9682
   * @description                                                                                                      // 9683
   *                                                                                                                   // 9684
   * Array containing service factories for all synchronous or asynchronous {@link ng.$http $http}                     // 9685
   * pre-processing of request or postprocessing of responses.                                                         // 9686
   *                                                                                                                   // 9687
   * These service factories are ordered by request, i.e. they are applied in the same order as the                    // 9688
   * array, on request, but reverse order, on response.                                                                // 9689
   *                                                                                                                   // 9690
   * {@link ng.$http#interceptors Interceptors detailed info}                                                          // 9691
   **/                                                                                                                 // 9692
  var interceptorFactories = this.interceptors = [];                                                                   // 9693
                                                                                                                       // 9694
  this.$get = ['$httpBackend', '$$cookieReader', '$cacheFactory', '$rootScope', '$q', '$injector',                     // 9695
      function($httpBackend, $$cookieReader, $cacheFactory, $rootScope, $q, $injector) {                               // 9696
                                                                                                                       // 9697
    var defaultCache = $cacheFactory('$http');                                                                         // 9698
                                                                                                                       // 9699
    /**                                                                                                                // 9700
     * Make sure that default param serializer is exposed as a function                                                // 9701
     */                                                                                                                // 9702
    defaults.paramSerializer = isString(defaults.paramSerializer) ?                                                    // 9703
      $injector.get(defaults.paramSerializer) : defaults.paramSerializer;                                              // 9704
                                                                                                                       // 9705
    /**                                                                                                                // 9706
     * Interceptors stored in reverse order. Inner interceptors before outer interceptors.                             // 9707
     * The reversal is needed so that we can build up the interception chain around the                                // 9708
     * server request.                                                                                                 // 9709
     */                                                                                                                // 9710
    var reversedInterceptors = [];                                                                                     // 9711
                                                                                                                       // 9712
    forEach(interceptorFactories, function(interceptorFactory) {                                                       // 9713
      reversedInterceptors.unshift(isString(interceptorFactory)                                                        // 9714
          ? $injector.get(interceptorFactory) : $injector.invoke(interceptorFactory));                                 // 9715
    });                                                                                                                // 9716
                                                                                                                       // 9717
    /**                                                                                                                // 9718
     * @ngdoc service                                                                                                  // 9719
     * @kind function                                                                                                  // 9720
     * @name $http                                                                                                     // 9721
     * @requires ng.$httpBackend                                                                                       // 9722
     * @requires $cacheFactory                                                                                         // 9723
     * @requires $rootScope                                                                                            // 9724
     * @requires $q                                                                                                    // 9725
     * @requires $injector                                                                                             // 9726
     *                                                                                                                 // 9727
     * @description                                                                                                    // 9728
     * The `$http` service is a core Angular service that facilitates communication with the remote                    // 9729
     * HTTP servers via the browser's [XMLHttpRequest](https://developer.mozilla.org/en/xmlhttprequest)                // 9730
     * object or via [JSONP](http://en.wikipedia.org/wiki/JSONP).                                                      // 9731
     *                                                                                                                 // 9732
     * For unit testing applications that use `$http` service, see                                                     // 9733
     * {@link ngMock.$httpBackend $httpBackend mock}.                                                                  // 9734
     *                                                                                                                 // 9735
     * For a higher level of abstraction, please check out the {@link ngResource.$resource                             // 9736
     * $resource} service.                                                                                             // 9737
     *                                                                                                                 // 9738
     * The $http API is based on the {@link ng.$q deferred/promise APIs} exposed by                                    // 9739
     * the $q service. While for simple usage patterns this doesn't matter much, for advanced usage                    // 9740
     * it is important to familiarize yourself with these APIs and the guarantees they provide.                        // 9741
     *                                                                                                                 // 9742
     *                                                                                                                 // 9743
     * ## General usage                                                                                                // 9744
     * The `$http` service is a function which takes a single argument — a {@link $http#usage configuration object} —  // 9745
     * that is used to generate an HTTP request and returns  a {@link ng.$q promise}.                                  // 9746
     *                                                                                                                 // 9747
     * ```js                                                                                                           // 9748
     *   // Simple GET request example:                                                                                // 9749
     *   $http({                                                                                                       // 9750
     *     method: 'GET',                                                                                              // 9751
     *     url: '/someUrl'                                                                                             // 9752
     *   }).then(function successCallback(response) {                                                                  // 9753
     *       // this callback will be called asynchronously                                                            // 9754
     *       // when the response is available                                                                         // 9755
     *     }, function errorCallback(response) {                                                                       // 9756
     *       // called asynchronously if an error occurs                                                               // 9757
     *       // or server returns response with an error status.                                                       // 9758
     *     });                                                                                                         // 9759
     * ```                                                                                                             // 9760
     *                                                                                                                 // 9761
     * The response object has these properties:                                                                       // 9762
     *                                                                                                                 // 9763
     *   - **data** – `{string|Object}` – The response body transformed with the transform                             // 9764
     *     functions.                                                                                                  // 9765
     *   - **status** – `{number}` – HTTP status code of the response.                                                 // 9766
     *   - **headers** – `{function([headerName])}` – Header getter function.                                          // 9767
     *   - **config** – `{Object}` – The configuration object that was used to generate the request.                   // 9768
     *   - **statusText** – `{string}` – HTTP status text of the response.                                             // 9769
     *                                                                                                                 // 9770
     * A response status code between 200 and 299 is considered a success status and                                   // 9771
     * will result in the success callback being called. Note that if the response is a redirect,                      // 9772
     * XMLHttpRequest will transparently follow it, meaning that the error callback will not be                        // 9773
     * called for such responses.                                                                                      // 9774
     *                                                                                                                 // 9775
     *                                                                                                                 // 9776
     * ## Shortcut methods                                                                                             // 9777
     *                                                                                                                 // 9778
     * Shortcut methods are also available. All shortcut methods require passing in the URL, and                       // 9779
     * request data must be passed in for POST/PUT requests. An optional config can be passed as the                   // 9780
     * last argument.                                                                                                  // 9781
     *                                                                                                                 // 9782
     * ```js                                                                                                           // 9783
     *   $http.get('/someUrl', config).then(successCallback, errorCallback);                                           // 9784
     *   $http.post('/someUrl', data, config).then(successCallback, errorCallback);                                    // 9785
     * ```                                                                                                             // 9786
     *                                                                                                                 // 9787
     * Complete list of shortcut methods:                                                                              // 9788
     *                                                                                                                 // 9789
     * - {@link ng.$http#get $http.get}                                                                                // 9790
     * - {@link ng.$http#head $http.head}                                                                              // 9791
     * - {@link ng.$http#post $http.post}                                                                              // 9792
     * - {@link ng.$http#put $http.put}                                                                                // 9793
     * - {@link ng.$http#delete $http.delete}                                                                          // 9794
     * - {@link ng.$http#jsonp $http.jsonp}                                                                            // 9795
     * - {@link ng.$http#patch $http.patch}                                                                            // 9796
     *                                                                                                                 // 9797
     *                                                                                                                 // 9798
     * ## Writing Unit Tests that use $http                                                                            // 9799
     * When unit testing (using {@link ngMock ngMock}), it is necessary to call                                        // 9800
     * {@link ngMock.$httpBackend#flush $httpBackend.flush()} to flush each pending                                    // 9801
     * request using trained responses.                                                                                // 9802
     *                                                                                                                 // 9803
     * ```                                                                                                             // 9804
     * $httpBackend.expectGET(...);                                                                                    // 9805
     * $http.get(...);                                                                                                 // 9806
     * $httpBackend.flush();                                                                                           // 9807
     * ```                                                                                                             // 9808
     *                                                                                                                 // 9809
     * ## Deprecation Notice                                                                                           // 9810
     * <div class="alert alert-danger">                                                                                // 9811
     *   The `$http` legacy promise methods `success` and `error` have been deprecated.                                // 9812
     *   Use the standard `then` method instead.                                                                       // 9813
     *   If {@link $httpProvider#useLegacyPromiseExtensions `$httpProvider.useLegacyPromiseExtensions`} is set to      // 9814
     *   `false` then these methods will throw {@link $http:legacy `$http/legacy`} error.                              // 9815
     * </div>                                                                                                          // 9816
     *                                                                                                                 // 9817
     * ## Setting HTTP Headers                                                                                         // 9818
     *                                                                                                                 // 9819
     * The $http service will automatically add certain HTTP headers to all requests. These defaults                   // 9820
     * can be fully configured by accessing the `$httpProvider.defaults.headers` configuration                         // 9821
     * object, which currently contains this default configuration:                                                    // 9822
     *                                                                                                                 // 9823
     * - `$httpProvider.defaults.headers.common` (headers that are common for all requests):                           // 9824
     *   - `Accept: application/json, text/plain, * / *`                                                               // 9825
     * - `$httpProvider.defaults.headers.post`: (header defaults for POST requests)                                    // 9826
     *   - `Content-Type: application/json`                                                                            // 9827
     * - `$httpProvider.defaults.headers.put` (header defaults for PUT requests)                                       // 9828
     *   - `Content-Type: application/json`                                                                            // 9829
     *                                                                                                                 // 9830
     * To add or overwrite these defaults, simply add or remove a property from these configuration                    // 9831
     * objects. To add headers for an HTTP method other than POST or PUT, simply add a new object                      // 9832
     * with the lowercased HTTP method name as the key, e.g.                                                           // 9833
     * `$httpProvider.defaults.headers.get = { 'My-Header' : 'value' }`.                                               // 9834
     *                                                                                                                 // 9835
     * The defaults can also be set at runtime via the `$http.defaults` object in the same                             // 9836
     * fashion. For example:                                                                                           // 9837
     *                                                                                                                 // 9838
     * ```                                                                                                             // 9839
     * module.run(function($http) {                                                                                    // 9840
     *   $http.defaults.headers.common.Authorization = 'Basic YmVlcDpib29w'                                            // 9841
     * });                                                                                                             // 9842
     * ```                                                                                                             // 9843
     *                                                                                                                 // 9844
     * In addition, you can supply a `headers` property in the config object passed when                               // 9845
     * calling `$http(config)`, which overrides the defaults without changing them globally.                           // 9846
     *                                                                                                                 // 9847
     * To explicitly remove a header automatically added via $httpProvider.defaults.headers on a per request basis,    // 9848
     * Use the `headers` property, setting the desired header to `undefined`. For example:                             // 9849
     *                                                                                                                 // 9850
     * ```js                                                                                                           // 9851
     * var req = {                                                                                                     // 9852
     *  method: 'POST',                                                                                                // 9853
     *  url: 'http://example.com',                                                                                     // 9854
     *  headers: {                                                                                                     // 9855
     *    'Content-Type': undefined                                                                                    // 9856
     *  },                                                                                                             // 9857
     *  data: { test: 'test' }                                                                                         // 9858
     * }                                                                                                               // 9859
     *                                                                                                                 // 9860
     * $http(req).then(function(){...}, function(){...});                                                              // 9861
     * ```                                                                                                             // 9862
     *                                                                                                                 // 9863
     * ## Transforming Requests and Responses                                                                          // 9864
     *                                                                                                                 // 9865
     * Both requests and responses can be transformed using transformation functions: `transformRequest`               // 9866
     * and `transformResponse`. These properties can be a single function that returns                                 // 9867
     * the transformed value (`function(data, headersGetter, status)`) or an array of such transformation functions,   // 9868
     * which allows you to `push` or `unshift` a new transformation function into the transformation chain.            // 9869
     *                                                                                                                 // 9870
     * ### Default Transformations                                                                                     // 9871
     *                                                                                                                 // 9872
     * The `$httpProvider` provider and `$http` service expose `defaults.transformRequest` and                         // 9873
     * `defaults.transformResponse` properties. If a request does not provide its own transformations                  // 9874
     * then these will be applied.                                                                                     // 9875
     *                                                                                                                 // 9876
     * You can augment or replace the default transformations by modifying these properties by adding to or            // 9877
     * replacing the array.                                                                                            // 9878
     *                                                                                                                 // 9879
     * Angular provides the following default transformations:                                                         // 9880
     *                                                                                                                 // 9881
     * Request transformations (`$httpProvider.defaults.transformRequest` and `$http.defaults.transformRequest`):      // 9882
     *                                                                                                                 // 9883
     * - If the `data` property of the request configuration object contains an object, serialize it                   // 9884
     *   into JSON format.                                                                                             // 9885
     *                                                                                                                 // 9886
     * Response transformations (`$httpProvider.defaults.transformResponse` and `$http.defaults.transformResponse`):   // 9887
     *                                                                                                                 // 9888
     *  - If XSRF prefix is detected, strip it (see Security Considerations section below).                            // 9889
     *  - If JSON response is detected, deserialize it using a JSON parser.                                            // 9890
     *                                                                                                                 // 9891
     *                                                                                                                 // 9892
     * ### Overriding the Default Transformations Per Request                                                          // 9893
     *                                                                                                                 // 9894
     * If you wish override the request/response transformations only for a single request then provide                // 9895
     * `transformRequest` and/or `transformResponse` properties on the configuration object passed                     // 9896
     * into `$http`.                                                                                                   // 9897
     *                                                                                                                 // 9898
     * Note that if you provide these properties on the config object the default transformations will be              // 9899
     * overwritten. If you wish to augment the default transformations then you must include them in your              // 9900
     * local transformation array.                                                                                     // 9901
     *                                                                                                                 // 9902
     * The following code demonstrates adding a new response transformation to be run after the default response       // 9903
     * transformations have been run.                                                                                  // 9904
     *                                                                                                                 // 9905
     * ```js                                                                                                           // 9906
     * function appendTransform(defaults, transform) {                                                                 // 9907
     *                                                                                                                 // 9908
     *   // We can't guarantee that the default transformation is an array                                             // 9909
     *   defaults = angular.isArray(defaults) ? defaults : [defaults];                                                 // 9910
     *                                                                                                                 // 9911
     *   // Append the new transformation to the defaults                                                              // 9912
     *   return defaults.concat(transform);                                                                            // 9913
     * }                                                                                                               // 9914
     *                                                                                                                 // 9915
     * $http({                                                                                                         // 9916
     *   url: '...',                                                                                                   // 9917
     *   method: 'GET',                                                                                                // 9918
     *   transformResponse: appendTransform($http.defaults.transformResponse, function(value) {                        // 9919
     *     return doTransform(value);                                                                                  // 9920
     *   })                                                                                                            // 9921
     * });                                                                                                             // 9922
     * ```                                                                                                             // 9923
     *                                                                                                                 // 9924
     *                                                                                                                 // 9925
     * ## Caching                                                                                                      // 9926
     *                                                                                                                 // 9927
     * To enable caching, set the request configuration `cache` property to `true` (to use default                     // 9928
     * cache) or to a custom cache object (built with {@link ng.$cacheFactory `$cacheFactory`}).                       // 9929
     * When the cache is enabled, `$http` stores the response from the server in the specified                         // 9930
     * cache. The next time the same request is made, the response is served from the cache without                    // 9931
     * sending a request to the server.                                                                                // 9932
     *                                                                                                                 // 9933
     * Note that even if the response is served from cache, delivery of the data is asynchronous in                    // 9934
     * the same way that real requests are.                                                                            // 9935
     *                                                                                                                 // 9936
     * If there are multiple GET requests for the same URL that should be cached using the same                        // 9937
     * cache, but the cache is not populated yet, only one request to the server will be made and                      // 9938
     * the remaining requests will be fulfilled using the response from the first request.                             // 9939
     *                                                                                                                 // 9940
     * You can change the default cache to a new object (built with                                                    // 9941
     * {@link ng.$cacheFactory `$cacheFactory`}) by updating the                                                       // 9942
     * {@link ng.$http#defaults `$http.defaults.cache`} property. All requests who set                                 // 9943
     * their `cache` property to `true` will now use this cache object.                                                // 9944
     *                                                                                                                 // 9945
     * If you set the default cache to `false` then only requests that specify their own custom                        // 9946
     * cache object will be cached.                                                                                    // 9947
     *                                                                                                                 // 9948
     * ## Interceptors                                                                                                 // 9949
     *                                                                                                                 // 9950
     * Before you start creating interceptors, be sure to understand the                                               // 9951
     * {@link ng.$q $q and deferred/promise APIs}.                                                                     // 9952
     *                                                                                                                 // 9953
     * For purposes of global error handling, authentication, or any kind of synchronous or                            // 9954
     * asynchronous pre-processing of request or postprocessing of responses, it is desirable to be                    // 9955
     * able to intercept requests before they are handed to the server and                                             // 9956
     * responses before they are handed over to the application code that                                              // 9957
     * initiated these requests. The interceptors leverage the {@link ng.$q                                            // 9958
     * promise APIs} to fulfill this need for both synchronous and asynchronous pre-processing.                        // 9959
     *                                                                                                                 // 9960
     * The interceptors are service factories that are registered with the `$httpProvider` by                          // 9961
     * adding them to the `$httpProvider.interceptors` array. The factory is called and                                // 9962
     * injected with dependencies (if specified) and returns the interceptor.                                          // 9963
     *                                                                                                                 // 9964
     * There are two kinds of interceptors (and two kinds of rejection interceptors):                                  // 9965
     *                                                                                                                 // 9966
     *   * `request`: interceptors get called with a http {@link $http#usage config} object. The function is free to   // 9967
     *     modify the `config` object or create a new one. The function needs to return the `config`                   // 9968
     *     object directly, or a promise containing the `config` or a new `config` object.                             // 9969
     *   * `requestError`: interceptor gets called when a previous interceptor threw an error or                       // 9970
     *     resolved with a rejection.                                                                                  // 9971
     *   * `response`: interceptors get called with http `response` object. The function is free to                    // 9972
     *     modify the `response` object or create a new one. The function needs to return the `response`               // 9973
     *     object directly, or as a promise containing the `response` or a new `response` object.                      // 9974
     *   * `responseError`: interceptor gets called when a previous interceptor threw an error or                      // 9975
     *     resolved with a rejection.                                                                                  // 9976
     *                                                                                                                 // 9977
     *                                                                                                                 // 9978
     * ```js                                                                                                           // 9979
     *   // register the interceptor as a service                                                                      // 9980
     *   $provide.factory('myHttpInterceptor', function($q, dependency1, dependency2) {                                // 9981
     *     return {                                                                                                    // 9982
     *       // optional method                                                                                        // 9983
     *       'request': function(config) {                                                                             // 9984
     *         // do something on success                                                                              // 9985
     *         return config;                                                                                          // 9986
     *       },                                                                                                        // 9987
     *                                                                                                                 // 9988
     *       // optional method                                                                                        // 9989
     *      'requestError': function(rejection) {                                                                      // 9990
     *         // do something on error                                                                                // 9991
     *         if (canRecover(rejection)) {                                                                            // 9992
     *           return responseOrNewPromise                                                                           // 9993
     *         }                                                                                                       // 9994
     *         return $q.reject(rejection);                                                                            // 9995
     *       },                                                                                                        // 9996
     *                                                                                                                 // 9997
     *                                                                                                                 // 9998
     *                                                                                                                 // 9999
     *       // optional method                                                                                        // 10000
     *       'response': function(response) {                                                                          // 10001
     *         // do something on success                                                                              // 10002
     *         return response;                                                                                        // 10003
     *       },                                                                                                        // 10004
     *                                                                                                                 // 10005
     *       // optional method                                                                                        // 10006
     *      'responseError': function(rejection) {                                                                     // 10007
     *         // do something on error                                                                                // 10008
     *         if (canRecover(rejection)) {                                                                            // 10009
     *           return responseOrNewPromise                                                                           // 10010
     *         }                                                                                                       // 10011
     *         return $q.reject(rejection);                                                                            // 10012
     *       }                                                                                                         // 10013
     *     };                                                                                                          // 10014
     *   });                                                                                                           // 10015
     *                                                                                                                 // 10016
     *   $httpProvider.interceptors.push('myHttpInterceptor');                                                         // 10017
     *                                                                                                                 // 10018
     *                                                                                                                 // 10019
     *   // alternatively, register the interceptor via an anonymous factory                                           // 10020
     *   $httpProvider.interceptors.push(function($q, dependency1, dependency2) {                                      // 10021
     *     return {                                                                                                    // 10022
     *      'request': function(config) {                                                                              // 10023
     *          // same as above                                                                                       // 10024
     *       },                                                                                                        // 10025
     *                                                                                                                 // 10026
     *       'response': function(response) {                                                                          // 10027
     *          // same as above                                                                                       // 10028
     *       }                                                                                                         // 10029
     *     };                                                                                                          // 10030
     *   });                                                                                                           // 10031
     * ```                                                                                                             // 10032
     *                                                                                                                 // 10033
     * ## Security Considerations                                                                                      // 10034
     *                                                                                                                 // 10035
     * When designing web applications, consider security threats from:                                                // 10036
     *                                                                                                                 // 10037
     * - [JSON vulnerability](http://haacked.com/archive/2008/11/20/anatomy-of-a-subtle-json-vulnerability.aspx)       // 10038
     * - [XSRF](http://en.wikipedia.org/wiki/Cross-site_request_forgery)                                               // 10039
     *                                                                                                                 // 10040
     * Both server and the client must cooperate in order to eliminate these threats. Angular comes                    // 10041
     * pre-configured with strategies that address these issues, but for this to work backend server                   // 10042
     * cooperation is required.                                                                                        // 10043
     *                                                                                                                 // 10044
     * ### JSON Vulnerability Protection                                                                               // 10045
     *                                                                                                                 // 10046
     * A [JSON vulnerability](http://haacked.com/archive/2008/11/20/anatomy-of-a-subtle-json-vulnerability.aspx)       // 10047
     * allows third party website to turn your JSON resource URL into                                                  // 10048
     * [JSONP](http://en.wikipedia.org/wiki/JSONP) request under some conditions. To                                   // 10049
     * counter this your server can prefix all JSON requests with following string `")]}',\n"`.                        // 10050
     * Angular will automatically strip the prefix before processing it as JSON.                                       // 10051
     *                                                                                                                 // 10052
     * For example if your server needs to return:                                                                     // 10053
     * ```js                                                                                                           // 10054
     * ['one','two']                                                                                                   // 10055
     * ```                                                                                                             // 10056
     *                                                                                                                 // 10057
     * which is vulnerable to attack, your server can return:                                                          // 10058
     * ```js                                                                                                           // 10059
     * )]}',                                                                                                           // 10060
     * ['one','two']                                                                                                   // 10061
     * ```                                                                                                             // 10062
     *                                                                                                                 // 10063
     * Angular will strip the prefix, before processing the JSON.                                                      // 10064
     *                                                                                                                 // 10065
     *                                                                                                                 // 10066
     * ### Cross Site Request Forgery (XSRF) Protection                                                                // 10067
     *                                                                                                                 // 10068
     * [XSRF](http://en.wikipedia.org/wiki/Cross-site_request_forgery) is a technique by which                         // 10069
     * an unauthorized site can gain your user's private data. Angular provides a mechanism                            // 10070
     * to counter XSRF. When performing XHR requests, the $http service reads a token from a cookie                    // 10071
     * (by default, `XSRF-TOKEN`) and sets it as an HTTP header (`X-XSRF-TOKEN`). Since only                           // 10072
     * JavaScript that runs on your domain could read the cookie, your server can be assured that                      // 10073
     * the XHR came from JavaScript running on your domain. The header will not be set for                             // 10074
     * cross-domain requests.                                                                                          // 10075
     *                                                                                                                 // 10076
     * To take advantage of this, your server needs to set a token in a JavaScript readable session                    // 10077
     * cookie called `XSRF-TOKEN` on the first HTTP GET request. On subsequent XHR requests the                        // 10078
     * server can verify that the cookie matches `X-XSRF-TOKEN` HTTP header, and therefore be sure                     // 10079
     * that only JavaScript running on your domain could have sent the request. The token must be                      // 10080
     * unique for each user and must be verifiable by the server (to prevent the JavaScript from                       // 10081
     * making up its own tokens). We recommend that the token is a digest of your site's                               // 10082
     * authentication cookie with a [salt](https://en.wikipedia.org/wiki/Salt_(cryptography&#41;)                      // 10083
     * for added security.                                                                                             // 10084
     *                                                                                                                 // 10085
     * The name of the headers can be specified using the xsrfHeaderName and xsrfCookieName                            // 10086
     * properties of either $httpProvider.defaults at config-time, $http.defaults at run-time,                         // 10087
     * or the per-request config object.                                                                               // 10088
     *                                                                                                                 // 10089
     * In order to prevent collisions in environments where multiple Angular apps share the                            // 10090
     * same domain or subdomain, we recommend that each application uses unique cookie name.                           // 10091
     *                                                                                                                 // 10092
     * @param {object} config Object describing the request to be made and how it should be                            // 10093
     *    processed. The object has following properties:                                                              // 10094
     *                                                                                                                 // 10095
     *    - **method** – `{string}` – HTTP method (e.g. 'GET', 'POST', etc)                                            // 10096
     *    - **url** – `{string}` – Absolute or relative URL of the resource that is being requested.                   // 10097
     *    - **params** – `{Object.<string|Object>}` – Map of strings or objects which will be serialized               // 10098
     *      with the `paramSerializer` and appended as GET parameters.                                                 // 10099
     *    - **data** – `{string|Object}` – Data to be sent as the request message data.                                // 10100
     *    - **headers** – `{Object}` – Map of strings or functions which return strings representing                   // 10101
     *      HTTP headers to send to the server. If the return value of a function is null, the                         // 10102
     *      header will not be sent. Functions accept a config object as an argument.                                  // 10103
     *    - **xsrfHeaderName** – `{string}` – Name of HTTP header to populate with the XSRF token.                     // 10104
     *    - **xsrfCookieName** – `{string}` – Name of cookie containing the XSRF token.                                // 10105
     *    - **transformRequest** –                                                                                     // 10106
     *      `{function(data, headersGetter)|Array.<function(data, headersGetter)>}` –                                  // 10107
     *      transform function or an array of such functions. The transform function takes the http                    // 10108
     *      request body and headers and returns its transformed (typically serialized) version.                       // 10109
     *      See {@link ng.$http#overriding-the-default-transformations-per-request                                     // 10110
     *      Overriding the Default Transformations}                                                                    // 10111
     *    - **transformResponse** –                                                                                    // 10112
     *      `{function(data, headersGetter, status)|Array.<function(data, headersGetter, status)>}` –                  // 10113
     *      transform function or an array of such functions. The transform function takes the http                    // 10114
     *      response body, headers and status and returns its transformed (typically deserialized) version.            // 10115
     *      See {@link ng.$http#overriding-the-default-transformations-per-request                                     // 10116
     *      Overriding the Default TransformationjqLiks}                                                               // 10117
     *    - **paramSerializer** - `{string|function(Object<string,string>):string}` - A function used to               // 10118
     *      prepare the string representation of request parameters (specified as an object).                          // 10119
     *      If specified as string, it is interpreted as function registered with the                                  // 10120
     *      {@link $injector $injector}, which means you can create your own serializer                                // 10121
     *      by registering it as a {@link auto.$provide#service service}.                                              // 10122
     *      The default serializer is the {@link $httpParamSerializer $httpParamSerializer};                           // 10123
     *      alternatively, you can use the {@link $httpParamSerializerJQLike $httpParamSerializerJQLike}               // 10124
     *    - **cache** – `{boolean|Cache}` – If true, a default $http cache will be used to cache the                   // 10125
     *      GET request, otherwise if a cache instance built with                                                      // 10126
     *      {@link ng.$cacheFactory $cacheFactory}, this cache will be used for                                        // 10127
     *      caching.                                                                                                   // 10128
     *    - **timeout** – `{number|Promise}` – timeout in milliseconds, or {@link ng.$q promise}                       // 10129
     *      that should abort the request when resolved.                                                               // 10130
     *    - **withCredentials** - `{boolean}` - whether to set the `withCredentials` flag on the                       // 10131
     *      XHR object. See [requests with credentials](https://developer.mozilla.org/docs/Web/HTTP/Access_control_CORS#Requests_with_credentials)
     *      for more information.                                                                                      // 10133
     *    - **responseType** - `{string}` - see                                                                        // 10134
     *      [XMLHttpRequest.responseType](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest#xmlhttprequest-responsetype).
     *                                                                                                                 // 10136
     * @returns {HttpPromise} Returns a {@link ng.$q `Promise}` that will be resolved to a response object             // 10137
     *                        when the request succeeds or fails.                                                      // 10138
     *                                                                                                                 // 10139
     *                                                                                                                 // 10140
     * @property {Array.<Object>} pendingRequests Array of config objects for currently pending                        // 10141
     *   requests. This is primarily meant to be used for debugging purposes.                                          // 10142
     *                                                                                                                 // 10143
     *                                                                                                                 // 10144
     * @example                                                                                                        // 10145
<example module="httpExample">                                                                                         // 10146
<file name="index.html">                                                                                               // 10147
  <div ng-controller="FetchController">                                                                                // 10148
    <select ng-model="method" aria-label="Request method">                                                             // 10149
      <option>GET</option>                                                                                             // 10150
      <option>JSONP</option>                                                                                           // 10151
    </select>                                                                                                          // 10152
    <input type="text" ng-model="url" size="80" aria-label="URL" />                                                    // 10153
    <button id="fetchbtn" ng-click="fetch()">fetch</button><br>                                                        // 10154
    <button id="samplegetbtn" ng-click="updateModel('GET', 'http-hello.html')">Sample GET</button>                     // 10155
    <button id="samplejsonpbtn"                                                                                        // 10156
      ng-click="updateModel('JSONP',                                                                                   // 10157
                    'https://angularjs.org/greet.php?callback=JSON_CALLBACK&name=Super%20Hero')">                      // 10158
      Sample JSONP                                                                                                     // 10159
    </button>                                                                                                          // 10160
    <button id="invalidjsonpbtn"                                                                                       // 10161
      ng-click="updateModel('JSONP', 'https://angularjs.org/doesntexist&callback=JSON_CALLBACK')">                     // 10162
        Invalid JSONP                                                                                                  // 10163
      </button>                                                                                                        // 10164
    <pre>http status code: {{status}}</pre>                                                                            // 10165
    <pre>http response data: {{data}}</pre>                                                                            // 10166
  </div>                                                                                                               // 10167
</file>                                                                                                                // 10168
<file name="script.js">                                                                                                // 10169
  angular.module('httpExample', [])                                                                                    // 10170
    .controller('FetchController', ['$scope', '$http', '$templateCache',                                               // 10171
      function($scope, $http, $templateCache) {                                                                        // 10172
        $scope.method = 'GET';                                                                                         // 10173
        $scope.url = 'http-hello.html';                                                                                // 10174
                                                                                                                       // 10175
        $scope.fetch = function() {                                                                                    // 10176
          $scope.code = null;                                                                                          // 10177
          $scope.response = null;                                                                                      // 10178
                                                                                                                       // 10179
          $http({method: $scope.method, url: $scope.url, cache: $templateCache}).                                      // 10180
            then(function(response) {                                                                                  // 10181
              $scope.status = response.status;                                                                         // 10182
              $scope.data = response.data;                                                                             // 10183
            }, function(response) {                                                                                    // 10184
              $scope.data = response.data || "Request failed";                                                         // 10185
              $scope.status = response.status;                                                                         // 10186
          });                                                                                                          // 10187
        };                                                                                                             // 10188
                                                                                                                       // 10189
        $scope.updateModel = function(method, url) {                                                                   // 10190
          $scope.method = method;                                                                                      // 10191
          $scope.url = url;                                                                                            // 10192
        };                                                                                                             // 10193
      }]);                                                                                                             // 10194
</file>                                                                                                                // 10195
<file name="http-hello.html">                                                                                          // 10196
  Hello, $http!                                                                                                        // 10197
</file>                                                                                                                // 10198
<file name="protractor.js" type="protractor">                                                                          // 10199
  var status = element(by.binding('status'));                                                                          // 10200
  var data = element(by.binding('data'));                                                                              // 10201
  var fetchBtn = element(by.id('fetchbtn'));                                                                           // 10202
  var sampleGetBtn = element(by.id('samplegetbtn'));                                                                   // 10203
  var sampleJsonpBtn = element(by.id('samplejsonpbtn'));                                                               // 10204
  var invalidJsonpBtn = element(by.id('invalidjsonpbtn'));                                                             // 10205
                                                                                                                       // 10206
  it('should make an xhr GET request', function() {                                                                    // 10207
    sampleGetBtn.click();                                                                                              // 10208
    fetchBtn.click();                                                                                                  // 10209
    expect(status.getText()).toMatch('200');                                                                           // 10210
    expect(data.getText()).toMatch(/Hello, \$http!/);                                                                  // 10211
  });                                                                                                                  // 10212
                                                                                                                       // 10213
// Commented out due to flakes. See https://github.com/angular/angular.js/issues/9185                                  // 10214
// it('should make a JSONP request to angularjs.org', function() {                                                     // 10215
//   sampleJsonpBtn.click();                                                                                           // 10216
//   fetchBtn.click();                                                                                                 // 10217
//   expect(status.getText()).toMatch('200');                                                                          // 10218
//   expect(data.getText()).toMatch(/Super Hero!/);                                                                    // 10219
// });                                                                                                                 // 10220
                                                                                                                       // 10221
  it('should make JSONP request to invalid URL and invoke the error handler',                                          // 10222
      function() {                                                                                                     // 10223
    invalidJsonpBtn.click();                                                                                           // 10224
    fetchBtn.click();                                                                                                  // 10225
    expect(status.getText()).toMatch('0');                                                                             // 10226
    expect(data.getText()).toMatch('Request failed');                                                                  // 10227
  });                                                                                                                  // 10228
</file>                                                                                                                // 10229
</example>                                                                                                             // 10230
     */                                                                                                                // 10231
    function $http(requestConfig) {                                                                                    // 10232
                                                                                                                       // 10233
      if (!angular.isObject(requestConfig)) {                                                                          // 10234
        throw minErr('$http')('badreq', 'Http request configuration must be an object.  Received: {0}', requestConfig);
      }                                                                                                                // 10236
                                                                                                                       // 10237
      var config = extend({                                                                                            // 10238
        method: 'get',                                                                                                 // 10239
        transformRequest: defaults.transformRequest,                                                                   // 10240
        transformResponse: defaults.transformResponse,                                                                 // 10241
        paramSerializer: defaults.paramSerializer                                                                      // 10242
      }, requestConfig);                                                                                               // 10243
                                                                                                                       // 10244
      config.headers = mergeHeaders(requestConfig);                                                                    // 10245
      config.method = uppercase(config.method);                                                                        // 10246
      config.paramSerializer = isString(config.paramSerializer) ?                                                      // 10247
        $injector.get(config.paramSerializer) : config.paramSerializer;                                                // 10248
                                                                                                                       // 10249
      var serverRequest = function(config) {                                                                           // 10250
        var headers = config.headers;                                                                                  // 10251
        var reqData = transformData(config.data, headersGetter(headers), undefined, config.transformRequest);          // 10252
                                                                                                                       // 10253
        // strip content-type if data is undefined                                                                     // 10254
        if (isUndefined(reqData)) {                                                                                    // 10255
          forEach(headers, function(value, header) {                                                                   // 10256
            if (lowercase(header) === 'content-type') {                                                                // 10257
                delete headers[header];                                                                                // 10258
            }                                                                                                          // 10259
          });                                                                                                          // 10260
        }                                                                                                              // 10261
                                                                                                                       // 10262
        if (isUndefined(config.withCredentials) && !isUndefined(defaults.withCredentials)) {                           // 10263
          config.withCredentials = defaults.withCredentials;                                                           // 10264
        }                                                                                                              // 10265
                                                                                                                       // 10266
        // send request                                                                                                // 10267
        return sendReq(config, reqData).then(transformResponse, transformResponse);                                    // 10268
      };                                                                                                               // 10269
                                                                                                                       // 10270
      var chain = [serverRequest, undefined];                                                                          // 10271
      var promise = $q.when(config);                                                                                   // 10272
                                                                                                                       // 10273
      // apply interceptors                                                                                            // 10274
      forEach(reversedInterceptors, function(interceptor) {                                                            // 10275
        if (interceptor.request || interceptor.requestError) {                                                         // 10276
          chain.unshift(interceptor.request, interceptor.requestError);                                                // 10277
        }                                                                                                              // 10278
        if (interceptor.response || interceptor.responseError) {                                                       // 10279
          chain.push(interceptor.response, interceptor.responseError);                                                 // 10280
        }                                                                                                              // 10281
      });                                                                                                              // 10282
                                                                                                                       // 10283
      while (chain.length) {                                                                                           // 10284
        var thenFn = chain.shift();                                                                                    // 10285
        var rejectFn = chain.shift();                                                                                  // 10286
                                                                                                                       // 10287
        promise = promise.then(thenFn, rejectFn);                                                                      // 10288
      }                                                                                                                // 10289
                                                                                                                       // 10290
      if (useLegacyPromise) {                                                                                          // 10291
        promise.success = function(fn) {                                                                               // 10292
          assertArgFn(fn, 'fn');                                                                                       // 10293
                                                                                                                       // 10294
          promise.then(function(response) {                                                                            // 10295
            fn(response.data, response.status, response.headers, config);                                              // 10296
          });                                                                                                          // 10297
          return promise;                                                                                              // 10298
        };                                                                                                             // 10299
                                                                                                                       // 10300
        promise.error = function(fn) {                                                                                 // 10301
          assertArgFn(fn, 'fn');                                                                                       // 10302
                                                                                                                       // 10303
          promise.then(null, function(response) {                                                                      // 10304
            fn(response.data, response.status, response.headers, config);                                              // 10305
          });                                                                                                          // 10306
          return promise;                                                                                              // 10307
        };                                                                                                             // 10308
      } else {                                                                                                         // 10309
        promise.success = $httpMinErrLegacyFn('success');                                                              // 10310
        promise.error = $httpMinErrLegacyFn('error');                                                                  // 10311
      }                                                                                                                // 10312
                                                                                                                       // 10313
      return promise;                                                                                                  // 10314
                                                                                                                       // 10315
      function transformResponse(response) {                                                                           // 10316
        // make a copy since the response must be cacheable                                                            // 10317
        var resp = extend({}, response);                                                                               // 10318
        resp.data = transformData(response.data, response.headers, response.status,                                    // 10319
                                  config.transformResponse);                                                           // 10320
        return (isSuccess(response.status))                                                                            // 10321
          ? resp                                                                                                       // 10322
          : $q.reject(resp);                                                                                           // 10323
      }                                                                                                                // 10324
                                                                                                                       // 10325
      function executeHeaderFns(headers, config) {                                                                     // 10326
        var headerContent, processedHeaders = {};                                                                      // 10327
                                                                                                                       // 10328
        forEach(headers, function(headerFn, header) {                                                                  // 10329
          if (isFunction(headerFn)) {                                                                                  // 10330
            headerContent = headerFn(config);                                                                          // 10331
            if (headerContent != null) {                                                                               // 10332
              processedHeaders[header] = headerContent;                                                                // 10333
            }                                                                                                          // 10334
          } else {                                                                                                     // 10335
            processedHeaders[header] = headerFn;                                                                       // 10336
          }                                                                                                            // 10337
        });                                                                                                            // 10338
                                                                                                                       // 10339
        return processedHeaders;                                                                                       // 10340
      }                                                                                                                // 10341
                                                                                                                       // 10342
      function mergeHeaders(config) {                                                                                  // 10343
        var defHeaders = defaults.headers,                                                                             // 10344
            reqHeaders = extend({}, config.headers),                                                                   // 10345
            defHeaderName, lowercaseDefHeaderName, reqHeaderName;                                                      // 10346
                                                                                                                       // 10347
        defHeaders = extend({}, defHeaders.common, defHeaders[lowercase(config.method)]);                              // 10348
                                                                                                                       // 10349
        // using for-in instead of forEach to avoid unecessary iteration after header has been found                   // 10350
        defaultHeadersIteration:                                                                                       // 10351
        for (defHeaderName in defHeaders) {                                                                            // 10352
          lowercaseDefHeaderName = lowercase(defHeaderName);                                                           // 10353
                                                                                                                       // 10354
          for (reqHeaderName in reqHeaders) {                                                                          // 10355
            if (lowercase(reqHeaderName) === lowercaseDefHeaderName) {                                                 // 10356
              continue defaultHeadersIteration;                                                                        // 10357
            }                                                                                                          // 10358
          }                                                                                                            // 10359
                                                                                                                       // 10360
          reqHeaders[defHeaderName] = defHeaders[defHeaderName];                                                       // 10361
        }                                                                                                              // 10362
                                                                                                                       // 10363
        // execute if header value is a function for merged headers                                                    // 10364
        return executeHeaderFns(reqHeaders, shallowCopy(config));                                                      // 10365
      }                                                                                                                // 10366
    }                                                                                                                  // 10367
                                                                                                                       // 10368
    $http.pendingRequests = [];                                                                                        // 10369
                                                                                                                       // 10370
    /**                                                                                                                // 10371
     * @ngdoc method                                                                                                   // 10372
     * @name $http#get                                                                                                 // 10373
     *                                                                                                                 // 10374
     * @description                                                                                                    // 10375
     * Shortcut method to perform `GET` request.                                                                       // 10376
     *                                                                                                                 // 10377
     * @param {string} url Relative or absolute URL specifying the destination of the request                          // 10378
     * @param {Object=} config Optional configuration object                                                           // 10379
     * @returns {HttpPromise} Future object                                                                            // 10380
     */                                                                                                                // 10381
                                                                                                                       // 10382
    /**                                                                                                                // 10383
     * @ngdoc method                                                                                                   // 10384
     * @name $http#delete                                                                                              // 10385
     *                                                                                                                 // 10386
     * @description                                                                                                    // 10387
     * Shortcut method to perform `DELETE` request.                                                                    // 10388
     *                                                                                                                 // 10389
     * @param {string} url Relative or absolute URL specifying the destination of the request                          // 10390
     * @param {Object=} config Optional configuration object                                                           // 10391
     * @returns {HttpPromise} Future object                                                                            // 10392
     */                                                                                                                // 10393
                                                                                                                       // 10394
    /**                                                                                                                // 10395
     * @ngdoc method                                                                                                   // 10396
     * @name $http#head                                                                                                // 10397
     *                                                                                                                 // 10398
     * @description                                                                                                    // 10399
     * Shortcut method to perform `HEAD` request.                                                                      // 10400
     *                                                                                                                 // 10401
     * @param {string} url Relative or absolute URL specifying the destination of the request                          // 10402
     * @param {Object=} config Optional configuration object                                                           // 10403
     * @returns {HttpPromise} Future object                                                                            // 10404
     */                                                                                                                // 10405
                                                                                                                       // 10406
    /**                                                                                                                // 10407
     * @ngdoc method                                                                                                   // 10408
     * @name $http#jsonp                                                                                               // 10409
     *                                                                                                                 // 10410
     * @description                                                                                                    // 10411
     * Shortcut method to perform `JSONP` request.                                                                     // 10412
     *                                                                                                                 // 10413
     * @param {string} url Relative or absolute URL specifying the destination of the request.                         // 10414
     *                     The name of the callback should be the string `JSON_CALLBACK`.                              // 10415
     * @param {Object=} config Optional configuration object                                                           // 10416
     * @returns {HttpPromise} Future object                                                                            // 10417
     */                                                                                                                // 10418
    createShortMethods('get', 'delete', 'head', 'jsonp');                                                              // 10419
                                                                                                                       // 10420
    /**                                                                                                                // 10421
     * @ngdoc method                                                                                                   // 10422
     * @name $http#post                                                                                                // 10423
     *                                                                                                                 // 10424
     * @description                                                                                                    // 10425
     * Shortcut method to perform `POST` request.                                                                      // 10426
     *                                                                                                                 // 10427
     * @param {string} url Relative or absolute URL specifying the destination of the request                          // 10428
     * @param {*} data Request content                                                                                 // 10429
     * @param {Object=} config Optional configuration object                                                           // 10430
     * @returns {HttpPromise} Future object                                                                            // 10431
     */                                                                                                                // 10432
                                                                                                                       // 10433
    /**                                                                                                                // 10434
     * @ngdoc method                                                                                                   // 10435
     * @name $http#put                                                                                                 // 10436
     *                                                                                                                 // 10437
     * @description                                                                                                    // 10438
     * Shortcut method to perform `PUT` request.                                                                       // 10439
     *                                                                                                                 // 10440
     * @param {string} url Relative or absolute URL specifying the destination of the request                          // 10441
     * @param {*} data Request content                                                                                 // 10442
     * @param {Object=} config Optional configuration object                                                           // 10443
     * @returns {HttpPromise} Future object                                                                            // 10444
     */                                                                                                                // 10445
                                                                                                                       // 10446
     /**                                                                                                               // 10447
      * @ngdoc method                                                                                                  // 10448
      * @name $http#patch                                                                                              // 10449
      *                                                                                                                // 10450
      * @description                                                                                                   // 10451
      * Shortcut method to perform `PATCH` request.                                                                    // 10452
      *                                                                                                                // 10453
      * @param {string} url Relative or absolute URL specifying the destination of the request                         // 10454
      * @param {*} data Request content                                                                                // 10455
      * @param {Object=} config Optional configuration object                                                          // 10456
      * @returns {HttpPromise} Future object                                                                           // 10457
      */                                                                                                               // 10458
    createShortMethodsWithData('post', 'put', 'patch');                                                                // 10459
                                                                                                                       // 10460
        /**                                                                                                            // 10461
         * @ngdoc property                                                                                             // 10462
         * @name $http#defaults                                                                                        // 10463
         *                                                                                                             // 10464
         * @description                                                                                                // 10465
         * Runtime equivalent of the `$httpProvider.defaults` property. Allows configuration of                        // 10466
         * default headers, withCredentials as well as request and response transformations.                           // 10467
         *                                                                                                             // 10468
         * See "Setting HTTP Headers" and "Transforming Requests and Responses" sections above.                        // 10469
         */                                                                                                            // 10470
    $http.defaults = defaults;                                                                                         // 10471
                                                                                                                       // 10472
                                                                                                                       // 10473
    return $http;                                                                                                      // 10474
                                                                                                                       // 10475
                                                                                                                       // 10476
    function createShortMethods(names) {                                                                               // 10477
      forEach(arguments, function(name) {                                                                              // 10478
        $http[name] = function(url, config) {                                                                          // 10479
          return $http(extend({}, config || {}, {                                                                      // 10480
            method: name,                                                                                              // 10481
            url: url                                                                                                   // 10482
          }));                                                                                                         // 10483
        };                                                                                                             // 10484
      });                                                                                                              // 10485
    }                                                                                                                  // 10486
                                                                                                                       // 10487
                                                                                                                       // 10488
    function createShortMethodsWithData(name) {                                                                        // 10489
      forEach(arguments, function(name) {                                                                              // 10490
        $http[name] = function(url, data, config) {                                                                    // 10491
          return $http(extend({}, config || {}, {                                                                      // 10492
            method: name,                                                                                              // 10493
            url: url,                                                                                                  // 10494
            data: data                                                                                                 // 10495
          }));                                                                                                         // 10496
        };                                                                                                             // 10497
      });                                                                                                              // 10498
    }                                                                                                                  // 10499
                                                                                                                       // 10500
                                                                                                                       // 10501
    /**                                                                                                                // 10502
     * Makes the request.                                                                                              // 10503
     *                                                                                                                 // 10504
     * !!! ACCESSES CLOSURE VARS:                                                                                      // 10505
     * $httpBackend, defaults, $log, $rootScope, defaultCache, $http.pendingRequests                                   // 10506
     */                                                                                                                // 10507
    function sendReq(config, reqData) {                                                                                // 10508
      var deferred = $q.defer(),                                                                                       // 10509
          promise = deferred.promise,                                                                                  // 10510
          cache,                                                                                                       // 10511
          cachedResp,                                                                                                  // 10512
          reqHeaders = config.headers,                                                                                 // 10513
          url = buildUrl(config.url, config.paramSerializer(config.params));                                           // 10514
                                                                                                                       // 10515
      $http.pendingRequests.push(config);                                                                              // 10516
      promise.then(removePendingReq, removePendingReq);                                                                // 10517
                                                                                                                       // 10518
                                                                                                                       // 10519
      if ((config.cache || defaults.cache) && config.cache !== false &&                                                // 10520
          (config.method === 'GET' || config.method === 'JSONP')) {                                                    // 10521
        cache = isObject(config.cache) ? config.cache                                                                  // 10522
              : isObject(defaults.cache) ? defaults.cache                                                              // 10523
              : defaultCache;                                                                                          // 10524
      }                                                                                                                // 10525
                                                                                                                       // 10526
      if (cache) {                                                                                                     // 10527
        cachedResp = cache.get(url);                                                                                   // 10528
        if (isDefined(cachedResp)) {                                                                                   // 10529
          if (isPromiseLike(cachedResp)) {                                                                             // 10530
            // cached request has already been sent, but there is no response yet                                      // 10531
            cachedResp.then(resolvePromiseWithResult, resolvePromiseWithResult);                                       // 10532
          } else {                                                                                                     // 10533
            // serving from cache                                                                                      // 10534
            if (isArray(cachedResp)) {                                                                                 // 10535
              resolvePromise(cachedResp[1], cachedResp[0], shallowCopy(cachedResp[2]), cachedResp[3]);                 // 10536
            } else {                                                                                                   // 10537
              resolvePromise(cachedResp, 200, {}, 'OK');                                                               // 10538
            }                                                                                                          // 10539
          }                                                                                                            // 10540
        } else {                                                                                                       // 10541
          // put the promise for the non-transformed response into cache as a placeholder                              // 10542
          cache.put(url, promise);                                                                                     // 10543
        }                                                                                                              // 10544
      }                                                                                                                // 10545
                                                                                                                       // 10546
                                                                                                                       // 10547
      // if we won't have the response in cache, set the xsrf headers and                                              // 10548
      // send the request to the backend                                                                               // 10549
      if (isUndefined(cachedResp)) {                                                                                   // 10550
        var xsrfValue = urlIsSameOrigin(config.url)                                                                    // 10551
            ? $$cookieReader()[config.xsrfCookieName || defaults.xsrfCookieName]                                       // 10552
            : undefined;                                                                                               // 10553
        if (xsrfValue) {                                                                                               // 10554
          reqHeaders[(config.xsrfHeaderName || defaults.xsrfHeaderName)] = xsrfValue;                                  // 10555
        }                                                                                                              // 10556
                                                                                                                       // 10557
        $httpBackend(config.method, url, reqData, done, reqHeaders, config.timeout,                                    // 10558
            config.withCredentials, config.responseType);                                                              // 10559
      }                                                                                                                // 10560
                                                                                                                       // 10561
      return promise;                                                                                                  // 10562
                                                                                                                       // 10563
                                                                                                                       // 10564
      /**                                                                                                              // 10565
       * Callback registered to $httpBackend():                                                                        // 10566
       *  - caches the response if desired                                                                             // 10567
       *  - resolves the raw $http promise                                                                             // 10568
       *  - calls $apply                                                                                               // 10569
       */                                                                                                              // 10570
      function done(status, response, headersString, statusText) {                                                     // 10571
        if (cache) {                                                                                                   // 10572
          if (isSuccess(status)) {                                                                                     // 10573
            cache.put(url, [status, response, parseHeaders(headersString), statusText]);                               // 10574
          } else {                                                                                                     // 10575
            // remove promise from the cache                                                                           // 10576
            cache.remove(url);                                                                                         // 10577
          }                                                                                                            // 10578
        }                                                                                                              // 10579
                                                                                                                       // 10580
        function resolveHttpPromise() {                                                                                // 10581
          resolvePromise(response, status, headersString, statusText);                                                 // 10582
        }                                                                                                              // 10583
                                                                                                                       // 10584
        if (useApplyAsync) {                                                                                           // 10585
          $rootScope.$applyAsync(resolveHttpPromise);                                                                  // 10586
        } else {                                                                                                       // 10587
          resolveHttpPromise();                                                                                        // 10588
          if (!$rootScope.$$phase) $rootScope.$apply();                                                                // 10589
        }                                                                                                              // 10590
      }                                                                                                                // 10591
                                                                                                                       // 10592
                                                                                                                       // 10593
      /**                                                                                                              // 10594
       * Resolves the raw $http promise.                                                                               // 10595
       */                                                                                                              // 10596
      function resolvePromise(response, status, headers, statusText) {                                                 // 10597
        //status: HTTP response status code, 0, -1 (aborted by timeout / promise)                                      // 10598
        status = status >= -1 ? status : 0;                                                                            // 10599
                                                                                                                       // 10600
        (isSuccess(status) ? deferred.resolve : deferred.reject)({                                                     // 10601
          data: response,                                                                                              // 10602
          status: status,                                                                                              // 10603
          headers: headersGetter(headers),                                                                             // 10604
          config: config,                                                                                              // 10605
          statusText: statusText                                                                                       // 10606
        });                                                                                                            // 10607
      }                                                                                                                // 10608
                                                                                                                       // 10609
      function resolvePromiseWithResult(result) {                                                                      // 10610
        resolvePromise(result.data, result.status, shallowCopy(result.headers()), result.statusText);                  // 10611
      }                                                                                                                // 10612
                                                                                                                       // 10613
      function removePendingReq() {                                                                                    // 10614
        var idx = $http.pendingRequests.indexOf(config);                                                               // 10615
        if (idx !== -1) $http.pendingRequests.splice(idx, 1);                                                          // 10616
      }                                                                                                                // 10617
    }                                                                                                                  // 10618
                                                                                                                       // 10619
                                                                                                                       // 10620
    function buildUrl(url, serializedParams) {                                                                         // 10621
      if (serializedParams.length > 0) {                                                                               // 10622
        url += ((url.indexOf('?') == -1) ? '?' : '&') + serializedParams;                                              // 10623
      }                                                                                                                // 10624
      return url;                                                                                                      // 10625
    }                                                                                                                  // 10626
  }];                                                                                                                  // 10627
}                                                                                                                      // 10628
                                                                                                                       // 10629
/**                                                                                                                    // 10630
 * @ngdoc service                                                                                                      // 10631
 * @name $xhrFactory                                                                                                   // 10632
 *                                                                                                                     // 10633
 * @description                                                                                                        // 10634
 * Factory function used to create XMLHttpRequest objects.                                                             // 10635
 *                                                                                                                     // 10636
 * Replace or decorate this service to create your own custom XMLHttpRequest objects.                                  // 10637
 *                                                                                                                     // 10638
 * ```                                                                                                                 // 10639
 * angular.module('myApp', [])                                                                                         // 10640
 * .factory('$xhrFactory', function() {                                                                                // 10641
 *   return function createXhr(method, url) {                                                                          // 10642
 *     return new window.XMLHttpRequest({mozSystem: true});                                                            // 10643
 *   };                                                                                                                // 10644
 * });                                                                                                                 // 10645
 * ```                                                                                                                 // 10646
 *                                                                                                                     // 10647
 * @param {string} method HTTP method of the request (GET, POST, PUT, ..)                                              // 10648
 * @param {string} url URL of the request.                                                                             // 10649
 */                                                                                                                    // 10650
function $xhrFactoryProvider() {                                                                                       // 10651
  this.$get = function() {                                                                                             // 10652
    return function createXhr() {                                                                                      // 10653
      return new window.XMLHttpRequest();                                                                              // 10654
    };                                                                                                                 // 10655
  };                                                                                                                   // 10656
}                                                                                                                      // 10657
                                                                                                                       // 10658
/**                                                                                                                    // 10659
 * @ngdoc service                                                                                                      // 10660
 * @name $httpBackend                                                                                                  // 10661
 * @requires $window                                                                                                   // 10662
 * @requires $document                                                                                                 // 10663
 * @requires $xhrFactory                                                                                               // 10664
 *                                                                                                                     // 10665
 * @description                                                                                                        // 10666
 * HTTP backend used by the {@link ng.$http service} that delegates to                                                 // 10667
 * XMLHttpRequest object or JSONP and deals with browser incompatibilities.                                            // 10668
 *                                                                                                                     // 10669
 * You should never need to use this service directly, instead use the higher-level abstractions:                      // 10670
 * {@link ng.$http $http} or {@link ngResource.$resource $resource}.                                                   // 10671
 *                                                                                                                     // 10672
 * During testing this implementation is swapped with {@link ngMock.$httpBackend mock                                  // 10673
 * $httpBackend} which can be trained with responses.                                                                  // 10674
 */                                                                                                                    // 10675
function $HttpBackendProvider() {                                                                                      // 10676
  this.$get = ['$browser', '$window', '$document', '$xhrFactory', function($browser, $window, $document, $xhrFactory) {
    return createHttpBackend($browser, $xhrFactory, $browser.defer, $window.angular.callbacks, $document[0]);          // 10678
  }];                                                                                                                  // 10679
}                                                                                                                      // 10680
                                                                                                                       // 10681
function createHttpBackend($browser, createXhr, $browserDefer, callbacks, rawDocument) {                               // 10682
  // TODO(vojta): fix the signature                                                                                    // 10683
  return function(method, url, post, callback, headers, timeout, withCredentials, responseType) {                      // 10684
    $browser.$$incOutstandingRequestCount();                                                                           // 10685
    url = url || $browser.url();                                                                                       // 10686
                                                                                                                       // 10687
    if (lowercase(method) == 'jsonp') {                                                                                // 10688
      var callbackId = '_' + (callbacks.counter++).toString(36);                                                       // 10689
      callbacks[callbackId] = function(data) {                                                                         // 10690
        callbacks[callbackId].data = data;                                                                             // 10691
        callbacks[callbackId].called = true;                                                                           // 10692
      };                                                                                                               // 10693
                                                                                                                       // 10694
      var jsonpDone = jsonpReq(url.replace('JSON_CALLBACK', 'angular.callbacks.' + callbackId),                        // 10695
          callbackId, function(status, text) {                                                                         // 10696
        completeRequest(callback, status, callbacks[callbackId].data, "", text);                                       // 10697
        callbacks[callbackId] = noop;                                                                                  // 10698
      });                                                                                                              // 10699
    } else {                                                                                                           // 10700
                                                                                                                       // 10701
      var xhr = createXhr(method, url);                                                                                // 10702
                                                                                                                       // 10703
      xhr.open(method, url, true);                                                                                     // 10704
      forEach(headers, function(value, key) {                                                                          // 10705
        if (isDefined(value)) {                                                                                        // 10706
            xhr.setRequestHeader(key, value);                                                                          // 10707
        }                                                                                                              // 10708
      });                                                                                                              // 10709
                                                                                                                       // 10710
      xhr.onload = function requestLoaded() {                                                                          // 10711
        var statusText = xhr.statusText || '';                                                                         // 10712
                                                                                                                       // 10713
        // responseText is the old-school way of retrieving response (supported by IE9)                                // 10714
        // response/responseType properties were introduced in XHR Level2 spec (supported by IE10)                     // 10715
        var response = ('response' in xhr) ? xhr.response : xhr.responseText;                                          // 10716
                                                                                                                       // 10717
        // normalize IE9 bug (http://bugs.jquery.com/ticket/1450)                                                      // 10718
        var status = xhr.status === 1223 ? 204 : xhr.status;                                                           // 10719
                                                                                                                       // 10720
        // fix status code when it is 0 (0 status is undocumented).                                                    // 10721
        // Occurs when accessing file resources or on Android 4.1 stock browser                                        // 10722
        // while retrieving files from application cache.                                                              // 10723
        if (status === 0) {                                                                                            // 10724
          status = response ? 200 : urlResolve(url).protocol == 'file' ? 404 : 0;                                      // 10725
        }                                                                                                              // 10726
                                                                                                                       // 10727
        completeRequest(callback,                                                                                      // 10728
            status,                                                                                                    // 10729
            response,                                                                                                  // 10730
            xhr.getAllResponseHeaders(),                                                                               // 10731
            statusText);                                                                                               // 10732
      };                                                                                                               // 10733
                                                                                                                       // 10734
      var requestError = function() {                                                                                  // 10735
        // The response is always empty                                                                                // 10736
        // See https://xhr.spec.whatwg.org/#request-error-steps and https://fetch.spec.whatwg.org/#concept-network-error
        completeRequest(callback, -1, null, null, '');                                                                 // 10738
      };                                                                                                               // 10739
                                                                                                                       // 10740
      xhr.onerror = requestError;                                                                                      // 10741
      xhr.onabort = requestError;                                                                                      // 10742
                                                                                                                       // 10743
      if (withCredentials) {                                                                                           // 10744
        xhr.withCredentials = true;                                                                                    // 10745
      }                                                                                                                // 10746
                                                                                                                       // 10747
      if (responseType) {                                                                                              // 10748
        try {                                                                                                          // 10749
          xhr.responseType = responseType;                                                                             // 10750
        } catch (e) {                                                                                                  // 10751
          // WebKit added support for the json responseType value on 09/03/2013                                        // 10752
          // https://bugs.webkit.org/show_bug.cgi?id=73648. Versions of Safari prior to 7 are                          // 10753
          // known to throw when setting the value "json" as the response type. Other older                            // 10754
          // browsers implementing the responseType                                                                    // 10755
          //                                                                                                           // 10756
          // The json response type can be ignored if not supported, because JSON payloads are                         // 10757
          // parsed on the client-side regardless.                                                                     // 10758
          if (responseType !== 'json') {                                                                               // 10759
            throw e;                                                                                                   // 10760
          }                                                                                                            // 10761
        }                                                                                                              // 10762
      }                                                                                                                // 10763
                                                                                                                       // 10764
      xhr.send(isUndefined(post) ? null : post);                                                                       // 10765
    }                                                                                                                  // 10766
                                                                                                                       // 10767
    if (timeout > 0) {                                                                                                 // 10768
      var timeoutId = $browserDefer(timeoutRequest, timeout);                                                          // 10769
    } else if (isPromiseLike(timeout)) {                                                                               // 10770
      timeout.then(timeoutRequest);                                                                                    // 10771
    }                                                                                                                  // 10772
                                                                                                                       // 10773
                                                                                                                       // 10774
    function timeoutRequest() {                                                                                        // 10775
      jsonpDone && jsonpDone();                                                                                        // 10776
      xhr && xhr.abort();                                                                                              // 10777
    }                                                                                                                  // 10778
                                                                                                                       // 10779
    function completeRequest(callback, status, response, headersString, statusText) {                                  // 10780
      // cancel timeout and subsequent timeout promise resolution                                                      // 10781
      if (isDefined(timeoutId)) {                                                                                      // 10782
        $browserDefer.cancel(timeoutId);                                                                               // 10783
      }                                                                                                                // 10784
      jsonpDone = xhr = null;                                                                                          // 10785
                                                                                                                       // 10786
      callback(status, response, headersString, statusText);                                                           // 10787
      $browser.$$completeOutstandingRequest(noop);                                                                     // 10788
    }                                                                                                                  // 10789
  };                                                                                                                   // 10790
                                                                                                                       // 10791
  function jsonpReq(url, callbackId, done) {                                                                           // 10792
    // we can't use jQuery/jqLite here because jQuery does crazy stuff with script elements, e.g.:                     // 10793
    // - fetches local scripts via XHR and evals them                                                                  // 10794
    // - adds and immediately removes script elements from the document                                                // 10795
    var script = rawDocument.createElement('script'), callback = null;                                                 // 10796
    script.type = "text/javascript";                                                                                   // 10797
    script.src = url;                                                                                                  // 10798
    script.async = true;                                                                                               // 10799
                                                                                                                       // 10800
    callback = function(event) {                                                                                       // 10801
      removeEventListenerFn(script, "load", callback);                                                                 // 10802
      removeEventListenerFn(script, "error", callback);                                                                // 10803
      rawDocument.body.removeChild(script);                                                                            // 10804
      script = null;                                                                                                   // 10805
      var status = -1;                                                                                                 // 10806
      var text = "unknown";                                                                                            // 10807
                                                                                                                       // 10808
      if (event) {                                                                                                     // 10809
        if (event.type === "load" && !callbacks[callbackId].called) {                                                  // 10810
          event = { type: "error" };                                                                                   // 10811
        }                                                                                                              // 10812
        text = event.type;                                                                                             // 10813
        status = event.type === "error" ? 404 : 200;                                                                   // 10814
      }                                                                                                                // 10815
                                                                                                                       // 10816
      if (done) {                                                                                                      // 10817
        done(status, text);                                                                                            // 10818
      }                                                                                                                // 10819
    };                                                                                                                 // 10820
                                                                                                                       // 10821
    addEventListenerFn(script, "load", callback);                                                                      // 10822
    addEventListenerFn(script, "error", callback);                                                                     // 10823
    rawDocument.body.appendChild(script);                                                                              // 10824
    return callback;                                                                                                   // 10825
  }                                                                                                                    // 10826
}                                                                                                                      // 10827
                                                                                                                       // 10828
var $interpolateMinErr = angular.$interpolateMinErr = minErr('$interpolate');                                          // 10829
$interpolateMinErr.throwNoconcat = function(text) {                                                                    // 10830
  throw $interpolateMinErr('noconcat',                                                                                 // 10831
      "Error while interpolating: {0}\nStrict Contextual Escaping disallows " +                                        // 10832
      "interpolations that concatenate multiple expressions when a trusted value is " +                                // 10833
      "required.  See http://docs.angularjs.org/api/ng.$sce", text);                                                   // 10834
};                                                                                                                     // 10835
                                                                                                                       // 10836
$interpolateMinErr.interr = function(text, err) {                                                                      // 10837
  return $interpolateMinErr('interr', "Can't interpolate: {0}\n{1}", text, err.toString());                            // 10838
};                                                                                                                     // 10839
                                                                                                                       // 10840
/**                                                                                                                    // 10841
 * @ngdoc provider                                                                                                     // 10842
 * @name $interpolateProvider                                                                                          // 10843
 *                                                                                                                     // 10844
 * @description                                                                                                        // 10845
 *                                                                                                                     // 10846
 * Used for configuring the interpolation markup. Defaults to `{{` and `}}`.                                           // 10847
 *                                                                                                                     // 10848
 * @example                                                                                                            // 10849
<example module="customInterpolationApp">                                                                              // 10850
<file name="index.html">                                                                                               // 10851
<script>                                                                                                               // 10852
  var customInterpolationApp = angular.module('customInterpolationApp', []);                                           // 10853
                                                                                                                       // 10854
  customInterpolationApp.config(function($interpolateProvider) {                                                       // 10855
    $interpolateProvider.startSymbol('//');                                                                            // 10856
    $interpolateProvider.endSymbol('//');                                                                              // 10857
  });                                                                                                                  // 10858
                                                                                                                       // 10859
                                                                                                                       // 10860
  customInterpolationApp.controller('DemoController', function() {                                                     // 10861
      this.label = "This binding is brought you by // interpolation symbols.";                                         // 10862
  });                                                                                                                  // 10863
</script>                                                                                                              // 10864
<div ng-app="App" ng-controller="DemoController as demo">                                                              // 10865
    //demo.label//                                                                                                     // 10866
</div>                                                                                                                 // 10867
</file>                                                                                                                // 10868
<file name="protractor.js" type="protractor">                                                                          // 10869
  it('should interpolate binding with custom symbols', function() {                                                    // 10870
    expect(element(by.binding('demo.label')).getText()).toBe('This binding is brought you by // interpolation symbols.');
  });                                                                                                                  // 10872
</file>                                                                                                                // 10873
</example>                                                                                                             // 10874
 */                                                                                                                    // 10875
function $InterpolateProvider() {                                                                                      // 10876
  var startSymbol = '{{';                                                                                              // 10877
  var endSymbol = '}}';                                                                                                // 10878
                                                                                                                       // 10879
  /**                                                                                                                  // 10880
   * @ngdoc method                                                                                                     // 10881
   * @name $interpolateProvider#startSymbol                                                                            // 10882
   * @description                                                                                                      // 10883
   * Symbol to denote start of expression in the interpolated string. Defaults to `{{`.                                // 10884
   *                                                                                                                   // 10885
   * @param {string=} value new value to set the starting symbol to.                                                   // 10886
   * @returns {string|self} Returns the symbol when used as getter and self if used as setter.                         // 10887
   */                                                                                                                  // 10888
  this.startSymbol = function(value) {                                                                                 // 10889
    if (value) {                                                                                                       // 10890
      startSymbol = value;                                                                                             // 10891
      return this;                                                                                                     // 10892
    } else {                                                                                                           // 10893
      return startSymbol;                                                                                              // 10894
    }                                                                                                                  // 10895
  };                                                                                                                   // 10896
                                                                                                                       // 10897
  /**                                                                                                                  // 10898
   * @ngdoc method                                                                                                     // 10899
   * @name $interpolateProvider#endSymbol                                                                              // 10900
   * @description                                                                                                      // 10901
   * Symbol to denote the end of expression in the interpolated string. Defaults to `}}`.                              // 10902
   *                                                                                                                   // 10903
   * @param {string=} value new value to set the ending symbol to.                                                     // 10904
   * @returns {string|self} Returns the symbol when used as getter and self if used as setter.                         // 10905
   */                                                                                                                  // 10906
  this.endSymbol = function(value) {                                                                                   // 10907
    if (value) {                                                                                                       // 10908
      endSymbol = value;                                                                                               // 10909
      return this;                                                                                                     // 10910
    } else {                                                                                                           // 10911
      return endSymbol;                                                                                                // 10912
    }                                                                                                                  // 10913
  };                                                                                                                   // 10914
                                                                                                                       // 10915
                                                                                                                       // 10916
  this.$get = ['$parse', '$exceptionHandler', '$sce', function($parse, $exceptionHandler, $sce) {                      // 10917
    var startSymbolLength = startSymbol.length,                                                                        // 10918
        endSymbolLength = endSymbol.length,                                                                            // 10919
        escapedStartRegexp = new RegExp(startSymbol.replace(/./g, escape), 'g'),                                       // 10920
        escapedEndRegexp = new RegExp(endSymbol.replace(/./g, escape), 'g');                                           // 10921
                                                                                                                       // 10922
    function escape(ch) {                                                                                              // 10923
      return '\\\\\\' + ch;                                                                                            // 10924
    }                                                                                                                  // 10925
                                                                                                                       // 10926
    function unescapeText(text) {                                                                                      // 10927
      return text.replace(escapedStartRegexp, startSymbol).                                                            // 10928
        replace(escapedEndRegexp, endSymbol);                                                                          // 10929
    }                                                                                                                  // 10930
                                                                                                                       // 10931
    function stringify(value) {                                                                                        // 10932
      if (value == null) { // null || undefined                                                                        // 10933
        return '';                                                                                                     // 10934
      }                                                                                                                // 10935
      switch (typeof value) {                                                                                          // 10936
        case 'string':                                                                                                 // 10937
          break;                                                                                                       // 10938
        case 'number':                                                                                                 // 10939
          value = '' + value;                                                                                          // 10940
          break;                                                                                                       // 10941
        default:                                                                                                       // 10942
          value = toJson(value);                                                                                       // 10943
      }                                                                                                                // 10944
                                                                                                                       // 10945
      return value;                                                                                                    // 10946
    }                                                                                                                  // 10947
                                                                                                                       // 10948
    /**                                                                                                                // 10949
     * @ngdoc service                                                                                                  // 10950
     * @name $interpolate                                                                                              // 10951
     * @kind function                                                                                                  // 10952
     *                                                                                                                 // 10953
     * @requires $parse                                                                                                // 10954
     * @requires $sce                                                                                                  // 10955
     *                                                                                                                 // 10956
     * @description                                                                                                    // 10957
     *                                                                                                                 // 10958
     * Compiles a string with markup into an interpolation function. This service is used by the                       // 10959
     * HTML {@link ng.$compile $compile} service for data binding. See                                                 // 10960
     * {@link ng.$interpolateProvider $interpolateProvider} for configuring the                                        // 10961
     * interpolation markup.                                                                                           // 10962
     *                                                                                                                 // 10963
     *                                                                                                                 // 10964
     * ```js                                                                                                           // 10965
     *   var $interpolate = ...; // injected                                                                           // 10966
     *   var exp = $interpolate('Hello {{name | uppercase}}!');                                                        // 10967
     *   expect(exp({name:'Angular'})).toEqual('Hello ANGULAR!');                                                      // 10968
     * ```                                                                                                             // 10969
     *                                                                                                                 // 10970
     * `$interpolate` takes an optional fourth argument, `allOrNothing`. If `allOrNothing` is                          // 10971
     * `true`, the interpolation function will return `undefined` unless all embedded expressions                      // 10972
     * evaluate to a value other than `undefined`.                                                                     // 10973
     *                                                                                                                 // 10974
     * ```js                                                                                                           // 10975
     *   var $interpolate = ...; // injected                                                                           // 10976
     *   var context = {greeting: 'Hello', name: undefined };                                                          // 10977
     *                                                                                                                 // 10978
     *   // default "forgiving" mode                                                                                   // 10979
     *   var exp = $interpolate('{{greeting}} {{name}}!');                                                             // 10980
     *   expect(exp(context)).toEqual('Hello !');                                                                      // 10981
     *                                                                                                                 // 10982
     *   // "allOrNothing" mode                                                                                        // 10983
     *   exp = $interpolate('{{greeting}} {{name}}!', false, null, true);                                              // 10984
     *   expect(exp(context)).toBeUndefined();                                                                         // 10985
     *   context.name = 'Angular';                                                                                     // 10986
     *   expect(exp(context)).toEqual('Hello Angular!');                                                               // 10987
     * ```                                                                                                             // 10988
     *                                                                                                                 // 10989
     * `allOrNothing` is useful for interpolating URLs. `ngSrc` and `ngSrcset` use this behavior.                      // 10990
     *                                                                                                                 // 10991
     * ####Escaped Interpolation                                                                                       // 10992
     * $interpolate provides a mechanism for escaping interpolation markers. Start and end markers                     // 10993
     * can be escaped by preceding each of their characters with a REVERSE SOLIDUS U+005C (backslash).                 // 10994
     * It will be rendered as a regular start/end marker, and will not be interpreted as an expression                 // 10995
     * or binding.                                                                                                     // 10996
     *                                                                                                                 // 10997
     * This enables web-servers to prevent script injection attacks and defacing attacks, to some                      // 10998
     * degree, while also enabling code examples to work without relying on the                                        // 10999
     * {@link ng.directive:ngNonBindable ngNonBindable} directive.                                                     // 11000
     *                                                                                                                 // 11001
     * **For security purposes, it is strongly encouraged that web servers escape user-supplied data,                  // 11002
     * replacing angle brackets (&lt;, &gt;) with &amp;lt; and &amp;gt; respectively, and replacing all                // 11003
     * interpolation start/end markers with their escaped counterparts.**                                              // 11004
     *                                                                                                                 // 11005
     * Escaped interpolation markers are only replaced with the actual interpolation markers in rendered               // 11006
     * output when the $interpolate service processes the text. So, for HTML elements interpolated                     // 11007
     * by {@link ng.$compile $compile}, or otherwise interpolated with the `mustHaveExpression` parameter              // 11008
     * set to `true`, the interpolated text must contain an unescaped interpolation expression. As such,               // 11009
     * this is typically useful only when user-data is used in rendering a template from the server, or                // 11010
     * when otherwise untrusted data is used by a directive.                                                           // 11011
     *                                                                                                                 // 11012
     * <example>                                                                                                       // 11013
     *  <file name="index.html">                                                                                       // 11014
     *    <div ng-init="username='A user'">                                                                            // 11015
     *      <p ng-init="apptitle='Escaping demo'">{{apptitle}}: \{\{ username = "defaced value"; \}\}                  // 11016
     *        </p>                                                                                                     // 11017
     *      <p><strong>{{username}}</strong> attempts to inject code which will deface the                             // 11018
     *        application, but fails to accomplish their task, because the server has correctly                        // 11019
     *        escaped the interpolation start/end markers with REVERSE SOLIDUS U+005C (backslash)                      // 11020
     *        characters.</p>                                                                                          // 11021
     *      <p>Instead, the result of the attempted script injection is visible, and can be removed                    // 11022
     *        from the database by an administrator.</p>                                                               // 11023
     *    </div>                                                                                                       // 11024
     *  </file>                                                                                                        // 11025
     * </example>                                                                                                      // 11026
     *                                                                                                                 // 11027
     * @param {string} text The text with markup to interpolate.                                                       // 11028
     * @param {boolean=} mustHaveExpression if set to true then the interpolation string must have                     // 11029
     *    embedded expression in order to return an interpolation function. Strings with no                            // 11030
     *    embedded expression will return null for the interpolation function.                                         // 11031
     * @param {string=} trustedContext when provided, the returned function passes the interpolated                    // 11032
     *    result through {@link ng.$sce#getTrusted $sce.getTrusted(interpolatedResult,                                 // 11033
     *    trustedContext)} before returning it.  Refer to the {@link ng.$sce $sce} service that                        // 11034
     *    provides Strict Contextual Escaping for details.                                                             // 11035
     * @param {boolean=} allOrNothing if `true`, then the returned function returns undefined                          // 11036
     *    unless all embedded expressions evaluate to a value other than `undefined`.                                  // 11037
     * @returns {function(context)} an interpolation function which is used to compute the                             // 11038
     *    interpolated string. The function has these parameters:                                                      // 11039
     *                                                                                                                 // 11040
     * - `context`: evaluation context for all expressions embedded in the interpolated text                           // 11041
     */                                                                                                                // 11042
    function $interpolate(text, mustHaveExpression, trustedContext, allOrNothing) {                                    // 11043
      allOrNothing = !!allOrNothing;                                                                                   // 11044
      var startIndex,                                                                                                  // 11045
          endIndex,                                                                                                    // 11046
          index = 0,                                                                                                   // 11047
          expressions = [],                                                                                            // 11048
          parseFns = [],                                                                                               // 11049
          textLength = text.length,                                                                                    // 11050
          exp,                                                                                                         // 11051
          concat = [],                                                                                                 // 11052
          expressionPositions = [];                                                                                    // 11053
                                                                                                                       // 11054
      while (index < textLength) {                                                                                     // 11055
        if (((startIndex = text.indexOf(startSymbol, index)) != -1) &&                                                 // 11056
             ((endIndex = text.indexOf(endSymbol, startIndex + startSymbolLength)) != -1)) {                           // 11057
          if (index !== startIndex) {                                                                                  // 11058
            concat.push(unescapeText(text.substring(index, startIndex)));                                              // 11059
          }                                                                                                            // 11060
          exp = text.substring(startIndex + startSymbolLength, endIndex);                                              // 11061
          expressions.push(exp);                                                                                       // 11062
          parseFns.push($parse(exp, parseStringifyInterceptor));                                                       // 11063
          index = endIndex + endSymbolLength;                                                                          // 11064
          expressionPositions.push(concat.length);                                                                     // 11065
          concat.push('');                                                                                             // 11066
        } else {                                                                                                       // 11067
          // we did not find an interpolation, so we have to add the remainder to the separators array                 // 11068
          if (index !== textLength) {                                                                                  // 11069
            concat.push(unescapeText(text.substring(index)));                                                          // 11070
          }                                                                                                            // 11071
          break;                                                                                                       // 11072
        }                                                                                                              // 11073
      }                                                                                                                // 11074
                                                                                                                       // 11075
      // Concatenating expressions makes it hard to reason about whether some combination of                           // 11076
      // concatenated values are unsafe to use and could easily lead to XSS.  By requiring that a                      // 11077
      // single expression be used for iframe[src], object[src], etc., we ensure that the value                        // 11078
      // that's used is assigned or constructed by some JS code somewhere that is more testable or                     // 11079
      // make it obvious that you bound the value to some user controlled value.  This helps reduce                    // 11080
      // the load when auditing for XSS issues.                                                                        // 11081
      if (trustedContext && concat.length > 1) {                                                                       // 11082
          $interpolateMinErr.throwNoconcat(text);                                                                      // 11083
      }                                                                                                                // 11084
                                                                                                                       // 11085
      if (!mustHaveExpression || expressions.length) {                                                                 // 11086
        var compute = function(values) {                                                                               // 11087
          for (var i = 0, ii = expressions.length; i < ii; i++) {                                                      // 11088
            if (allOrNothing && isUndefined(values[i])) return;                                                        // 11089
            concat[expressionPositions[i]] = values[i];                                                                // 11090
          }                                                                                                            // 11091
          return concat.join('');                                                                                      // 11092
        };                                                                                                             // 11093
                                                                                                                       // 11094
        var getValue = function(value) {                                                                               // 11095
          return trustedContext ?                                                                                      // 11096
            $sce.getTrusted(trustedContext, value) :                                                                   // 11097
            $sce.valueOf(value);                                                                                       // 11098
        };                                                                                                             // 11099
                                                                                                                       // 11100
        return extend(function interpolationFn(context) {                                                              // 11101
            var i = 0;                                                                                                 // 11102
            var ii = expressions.length;                                                                               // 11103
            var values = new Array(ii);                                                                                // 11104
                                                                                                                       // 11105
            try {                                                                                                      // 11106
              for (; i < ii; i++) {                                                                                    // 11107
                values[i] = parseFns[i](context);                                                                      // 11108
              }                                                                                                        // 11109
                                                                                                                       // 11110
              return compute(values);                                                                                  // 11111
            } catch (err) {                                                                                            // 11112
              $exceptionHandler($interpolateMinErr.interr(text, err));                                                 // 11113
            }                                                                                                          // 11114
                                                                                                                       // 11115
          }, {                                                                                                         // 11116
          // all of these properties are undocumented for now                                                          // 11117
          exp: text, //just for compatibility with regular watchers created via $watch                                 // 11118
          expressions: expressions,                                                                                    // 11119
          $$watchDelegate: function(scope, listener) {                                                                 // 11120
            var lastValue;                                                                                             // 11121
            return scope.$watchGroup(parseFns, function interpolateFnWatcher(values, oldValues) {                      // 11122
              var currValue = compute(values);                                                                         // 11123
              if (isFunction(listener)) {                                                                              // 11124
                listener.call(this, currValue, values !== oldValues ? lastValue : currValue, scope);                   // 11125
              }                                                                                                        // 11126
              lastValue = currValue;                                                                                   // 11127
            });                                                                                                        // 11128
          }                                                                                                            // 11129
        });                                                                                                            // 11130
      }                                                                                                                // 11131
                                                                                                                       // 11132
      function parseStringifyInterceptor(value) {                                                                      // 11133
        try {                                                                                                          // 11134
          value = getValue(value);                                                                                     // 11135
          return allOrNothing && !isDefined(value) ? value : stringify(value);                                         // 11136
        } catch (err) {                                                                                                // 11137
          $exceptionHandler($interpolateMinErr.interr(text, err));                                                     // 11138
        }                                                                                                              // 11139
      }                                                                                                                // 11140
    }                                                                                                                  // 11141
                                                                                                                       // 11142
                                                                                                                       // 11143
    /**                                                                                                                // 11144
     * @ngdoc method                                                                                                   // 11145
     * @name $interpolate#startSymbol                                                                                  // 11146
     * @description                                                                                                    // 11147
     * Symbol to denote the start of expression in the interpolated string. Defaults to `{{`.                          // 11148
     *                                                                                                                 // 11149
     * Use {@link ng.$interpolateProvider#startSymbol `$interpolateProvider.startSymbol`} to change                    // 11150
     * the symbol.                                                                                                     // 11151
     *                                                                                                                 // 11152
     * @returns {string} start symbol.                                                                                 // 11153
     */                                                                                                                // 11154
    $interpolate.startSymbol = function() {                                                                            // 11155
      return startSymbol;                                                                                              // 11156
    };                                                                                                                 // 11157
                                                                                                                       // 11158
                                                                                                                       // 11159
    /**                                                                                                                // 11160
     * @ngdoc method                                                                                                   // 11161
     * @name $interpolate#endSymbol                                                                                    // 11162
     * @description                                                                                                    // 11163
     * Symbol to denote the end of expression in the interpolated string. Defaults to `}}`.                            // 11164
     *                                                                                                                 // 11165
     * Use {@link ng.$interpolateProvider#endSymbol `$interpolateProvider.endSymbol`} to change                        // 11166
     * the symbol.                                                                                                     // 11167
     *                                                                                                                 // 11168
     * @returns {string} end symbol.                                                                                   // 11169
     */                                                                                                                // 11170
    $interpolate.endSymbol = function() {                                                                              // 11171
      return endSymbol;                                                                                                // 11172
    };                                                                                                                 // 11173
                                                                                                                       // 11174
    return $interpolate;                                                                                               // 11175
  }];                                                                                                                  // 11176
}                                                                                                                      // 11177
                                                                                                                       // 11178
function $IntervalProvider() {                                                                                         // 11179
  this.$get = ['$rootScope', '$window', '$q', '$$q',                                                                   // 11180
       function($rootScope,   $window,   $q,   $$q) {                                                                  // 11181
    var intervals = {};                                                                                                // 11182
                                                                                                                       // 11183
                                                                                                                       // 11184
     /**                                                                                                               // 11185
      * @ngdoc service                                                                                                 // 11186
      * @name $interval                                                                                                // 11187
      *                                                                                                                // 11188
      * @description                                                                                                   // 11189
      * Angular's wrapper for `window.setInterval`. The `fn` function is executed every `delay`                        // 11190
      * milliseconds.                                                                                                  // 11191
      *                                                                                                                // 11192
      * The return value of registering an interval function is a promise. This promise will be                        // 11193
      * notified upon each tick of the interval, and will be resolved after `count` iterations, or                     // 11194
      * run indefinitely if `count` is not defined. The value of the notification will be the                          // 11195
      * number of iterations that have run.                                                                            // 11196
      * To cancel an interval, call `$interval.cancel(promise)`.                                                       // 11197
      *                                                                                                                // 11198
      * In tests you can use {@link ngMock.$interval#flush `$interval.flush(millis)`} to                               // 11199
      * move forward by `millis` milliseconds and trigger any functions scheduled to run in that                       // 11200
      * time.                                                                                                          // 11201
      *                                                                                                                // 11202
      * <div class="alert alert-warning">                                                                              // 11203
      * **Note**: Intervals created by this service must be explicitly destroyed when you are finished                 // 11204
      * with them.  In particular they are not automatically destroyed when a controller's scope or a                  // 11205
      * directive's element are destroyed.                                                                             // 11206
      * You should take this into consideration and make sure to always cancel the interval at the                     // 11207
      * appropriate moment.  See the example below for more details on how and when to do this.                        // 11208
      * </div>                                                                                                         // 11209
      *                                                                                                                // 11210
      * @param {function()} fn A function that should be called repeatedly.                                            // 11211
      * @param {number} delay Number of milliseconds between each function call.                                       // 11212
      * @param {number=} [count=0] Number of times to repeat. If not set, or 0, will repeat                            // 11213
      *   indefinitely.                                                                                                // 11214
      * @param {boolean=} [invokeApply=true] If set to `false` skips model dirty checking, otherwise                   // 11215
      *   will invoke `fn` within the {@link ng.$rootScope.Scope#$apply $apply} block.                                 // 11216
      * @param {...*=} Pass additional parameters to the executed function.                                            // 11217
      * @returns {promise} A promise which will be notified on each iteration.                                         // 11218
      *                                                                                                                // 11219
      * @example                                                                                                       // 11220
      * <example module="intervalExample">                                                                             // 11221
      * <file name="index.html">                                                                                       // 11222
      *   <script>                                                                                                     // 11223
      *     angular.module('intervalExample', [])                                                                      // 11224
      *       .controller('ExampleController', ['$scope', '$interval',                                                 // 11225
      *         function($scope, $interval) {                                                                          // 11226
      *           $scope.format = 'M/d/yy h:mm:ss a';                                                                  // 11227
      *           $scope.blood_1 = 100;                                                                                // 11228
      *           $scope.blood_2 = 120;                                                                                // 11229
      *                                                                                                                // 11230
      *           var stop;                                                                                            // 11231
      *           $scope.fight = function() {                                                                          // 11232
      *             // Don't start a new fight if we are already fighting                                              // 11233
      *             if ( angular.isDefined(stop) ) return;                                                             // 11234
      *                                                                                                                // 11235
      *             stop = $interval(function() {                                                                      // 11236
      *               if ($scope.blood_1 > 0 && $scope.blood_2 > 0) {                                                  // 11237
      *                 $scope.blood_1 = $scope.blood_1 - 3;                                                           // 11238
      *                 $scope.blood_2 = $scope.blood_2 - 4;                                                           // 11239
      *               } else {                                                                                         // 11240
      *                 $scope.stopFight();                                                                            // 11241
      *               }                                                                                                // 11242
      *             }, 100);                                                                                           // 11243
      *           };                                                                                                   // 11244
      *                                                                                                                // 11245
      *           $scope.stopFight = function() {                                                                      // 11246
      *             if (angular.isDefined(stop)) {                                                                     // 11247
      *               $interval.cancel(stop);                                                                          // 11248
      *               stop = undefined;                                                                                // 11249
      *             }                                                                                                  // 11250
      *           };                                                                                                   // 11251
      *                                                                                                                // 11252
      *           $scope.resetFight = function() {                                                                     // 11253
      *             $scope.blood_1 = 100;                                                                              // 11254
      *             $scope.blood_2 = 120;                                                                              // 11255
      *           };                                                                                                   // 11256
      *                                                                                                                // 11257
      *           $scope.$on('$destroy', function() {                                                                  // 11258
      *             // Make sure that the interval is destroyed too                                                    // 11259
      *             $scope.stopFight();                                                                                // 11260
      *           });                                                                                                  // 11261
      *         }])                                                                                                    // 11262
      *       // Register the 'myCurrentTime' directive factory method.                                                // 11263
      *       // We inject $interval and dateFilter service since the factory method is DI.                            // 11264
      *       .directive('myCurrentTime', ['$interval', 'dateFilter',                                                  // 11265
      *         function($interval, dateFilter) {                                                                      // 11266
      *           // return the directive link function. (compile function not needed)                                 // 11267
      *           return function(scope, element, attrs) {                                                             // 11268
      *             var format,  // date format                                                                        // 11269
      *                 stopTime; // so that we can cancel the time updates                                            // 11270
      *                                                                                                                // 11271
      *             // used to update the UI                                                                           // 11272
      *             function updateTime() {                                                                            // 11273
      *               element.text(dateFilter(new Date(), format));                                                    // 11274
      *             }                                                                                                  // 11275
      *                                                                                                                // 11276
      *             // watch the expression, and update the UI on change.                                              // 11277
      *             scope.$watch(attrs.myCurrentTime, function(value) {                                                // 11278
      *               format = value;                                                                                  // 11279
      *               updateTime();                                                                                    // 11280
      *             });                                                                                                // 11281
      *                                                                                                                // 11282
      *             stopTime = $interval(updateTime, 1000);                                                            // 11283
      *                                                                                                                // 11284
      *             // listen on DOM destroy (removal) event, and cancel the next UI update                            // 11285
      *             // to prevent updating time after the DOM element was removed.                                     // 11286
      *             element.on('$destroy', function() {                                                                // 11287
      *               $interval.cancel(stopTime);                                                                      // 11288
      *             });                                                                                                // 11289
      *           }                                                                                                    // 11290
      *         }]);                                                                                                   // 11291
      *   </script>                                                                                                    // 11292
      *                                                                                                                // 11293
      *   <div>                                                                                                        // 11294
      *     <div ng-controller="ExampleController">                                                                    // 11295
      *       <label>Date format: <input ng-model="format"></label> <hr/>                                              // 11296
      *       Current time is: <span my-current-time="format"></span>                                                  // 11297
      *       <hr/>                                                                                                    // 11298
      *       Blood 1 : <font color='red'>{{blood_1}}</font>                                                           // 11299
      *       Blood 2 : <font color='red'>{{blood_2}}</font>                                                           // 11300
      *       <button type="button" data-ng-click="fight()">Fight</button>                                             // 11301
      *       <button type="button" data-ng-click="stopFight()">StopFight</button>                                     // 11302
      *       <button type="button" data-ng-click="resetFight()">resetFight</button>                                   // 11303
      *     </div>                                                                                                     // 11304
      *   </div>                                                                                                       // 11305
      *                                                                                                                // 11306
      * </file>                                                                                                        // 11307
      * </example>                                                                                                     // 11308
      */                                                                                                               // 11309
    function interval(fn, delay, count, invokeApply) {                                                                 // 11310
      var hasParams = arguments.length > 4,                                                                            // 11311
          args = hasParams ? sliceArgs(arguments, 4) : [],                                                             // 11312
          setInterval = $window.setInterval,                                                                           // 11313
          clearInterval = $window.clearInterval,                                                                       // 11314
          iteration = 0,                                                                                               // 11315
          skipApply = (isDefined(invokeApply) && !invokeApply),                                                        // 11316
          deferred = (skipApply ? $$q : $q).defer(),                                                                   // 11317
          promise = deferred.promise;                                                                                  // 11318
                                                                                                                       // 11319
      count = isDefined(count) ? count : 0;                                                                            // 11320
                                                                                                                       // 11321
      promise.then(null, null, (!hasParams) ? fn : function() {                                                        // 11322
        fn.apply(null, args);                                                                                          // 11323
      });                                                                                                              // 11324
                                                                                                                       // 11325
      promise.$$intervalId = setInterval(function tick() {                                                             // 11326
        deferred.notify(iteration++);                                                                                  // 11327
                                                                                                                       // 11328
        if (count > 0 && iteration >= count) {                                                                         // 11329
          deferred.resolve(iteration);                                                                                 // 11330
          clearInterval(promise.$$intervalId);                                                                         // 11331
          delete intervals[promise.$$intervalId];                                                                      // 11332
        }                                                                                                              // 11333
                                                                                                                       // 11334
        if (!skipApply) $rootScope.$apply();                                                                           // 11335
                                                                                                                       // 11336
      }, delay);                                                                                                       // 11337
                                                                                                                       // 11338
      intervals[promise.$$intervalId] = deferred;                                                                      // 11339
                                                                                                                       // 11340
      return promise;                                                                                                  // 11341
    }                                                                                                                  // 11342
                                                                                                                       // 11343
                                                                                                                       // 11344
     /**                                                                                                               // 11345
      * @ngdoc method                                                                                                  // 11346
      * @name $interval#cancel                                                                                         // 11347
      *                                                                                                                // 11348
      * @description                                                                                                   // 11349
      * Cancels a task associated with the `promise`.                                                                  // 11350
      *                                                                                                                // 11351
      * @param {Promise=} promise returned by the `$interval` function.                                                // 11352
      * @returns {boolean} Returns `true` if the task was successfully canceled.                                       // 11353
      */                                                                                                               // 11354
    interval.cancel = function(promise) {                                                                              // 11355
      if (promise && promise.$$intervalId in intervals) {                                                              // 11356
        intervals[promise.$$intervalId].reject('canceled');                                                            // 11357
        $window.clearInterval(promise.$$intervalId);                                                                   // 11358
        delete intervals[promise.$$intervalId];                                                                        // 11359
        return true;                                                                                                   // 11360
      }                                                                                                                // 11361
      return false;                                                                                                    // 11362
    };                                                                                                                 // 11363
                                                                                                                       // 11364
    return interval;                                                                                                   // 11365
  }];                                                                                                                  // 11366
}                                                                                                                      // 11367
                                                                                                                       // 11368
/**                                                                                                                    // 11369
 * @ngdoc service                                                                                                      // 11370
 * @name $locale                                                                                                       // 11371
 *                                                                                                                     // 11372
 * @description                                                                                                        // 11373
 * $locale service provides localization rules for various Angular components. As of right now the                     // 11374
 * only public api is:                                                                                                 // 11375
 *                                                                                                                     // 11376
 * * `id` – `{string}` – locale id formatted as `languageId-countryId` (e.g. `en-us`)                                  // 11377
 */                                                                                                                    // 11378
                                                                                                                       // 11379
var PATH_MATCH = /^([^\?#]*)(\?([^#]*))?(#(.*))?$/,                                                                    // 11380
    DEFAULT_PORTS = {'http': 80, 'https': 443, 'ftp': 21};                                                             // 11381
var $locationMinErr = minErr('$location');                                                                             // 11382
                                                                                                                       // 11383
                                                                                                                       // 11384
/**                                                                                                                    // 11385
 * Encode path using encodeUriSegment, ignoring forward slashes                                                        // 11386
 *                                                                                                                     // 11387
 * @param {string} path Path to encode                                                                                 // 11388
 * @returns {string}                                                                                                   // 11389
 */                                                                                                                    // 11390
function encodePath(path) {                                                                                            // 11391
  var segments = path.split('/'),                                                                                      // 11392
      i = segments.length;                                                                                             // 11393
                                                                                                                       // 11394
  while (i--) {                                                                                                        // 11395
    segments[i] = encodeUriSegment(segments[i]);                                                                       // 11396
  }                                                                                                                    // 11397
                                                                                                                       // 11398
  return segments.join('/');                                                                                           // 11399
}                                                                                                                      // 11400
                                                                                                                       // 11401
function parseAbsoluteUrl(absoluteUrl, locationObj) {                                                                  // 11402
  var parsedUrl = urlResolve(absoluteUrl);                                                                             // 11403
                                                                                                                       // 11404
  locationObj.$$protocol = parsedUrl.protocol;                                                                         // 11405
  locationObj.$$host = parsedUrl.hostname;                                                                             // 11406
  locationObj.$$port = toInt(parsedUrl.port) || DEFAULT_PORTS[parsedUrl.protocol] || null;                             // 11407
}                                                                                                                      // 11408
                                                                                                                       // 11409
                                                                                                                       // 11410
function parseAppUrl(relativeUrl, locationObj) {                                                                       // 11411
  var prefixed = (relativeUrl.charAt(0) !== '/');                                                                      // 11412
  if (prefixed) {                                                                                                      // 11413
    relativeUrl = '/' + relativeUrl;                                                                                   // 11414
  }                                                                                                                    // 11415
  var match = urlResolve(relativeUrl);                                                                                 // 11416
  locationObj.$$path = decodeURIComponent(prefixed && match.pathname.charAt(0) === '/' ?                               // 11417
      match.pathname.substring(1) : match.pathname);                                                                   // 11418
  locationObj.$$search = parseKeyValue(match.search);                                                                  // 11419
  locationObj.$$hash = decodeURIComponent(match.hash);                                                                 // 11420
                                                                                                                       // 11421
  // make sure path starts with '/';                                                                                   // 11422
  if (locationObj.$$path && locationObj.$$path.charAt(0) != '/') {                                                     // 11423
    locationObj.$$path = '/' + locationObj.$$path;                                                                     // 11424
  }                                                                                                                    // 11425
}                                                                                                                      // 11426
                                                                                                                       // 11427
                                                                                                                       // 11428
/**                                                                                                                    // 11429
 *                                                                                                                     // 11430
 * @param {string} begin                                                                                               // 11431
 * @param {string} whole                                                                                               // 11432
 * @returns {string} returns text from whole after begin or undefined if it does not begin with                        // 11433
 *                   expected string.                                                                                  // 11434
 */                                                                                                                    // 11435
function beginsWith(begin, whole) {                                                                                    // 11436
  if (whole.indexOf(begin) === 0) {                                                                                    // 11437
    return whole.substr(begin.length);                                                                                 // 11438
  }                                                                                                                    // 11439
}                                                                                                                      // 11440
                                                                                                                       // 11441
                                                                                                                       // 11442
function stripHash(url) {                                                                                              // 11443
  var index = url.indexOf('#');                                                                                        // 11444
  return index == -1 ? url : url.substr(0, index);                                                                     // 11445
}                                                                                                                      // 11446
                                                                                                                       // 11447
function trimEmptyHash(url) {                                                                                          // 11448
  return url.replace(/(#.+)|#$/, '$1');                                                                                // 11449
}                                                                                                                      // 11450
                                                                                                                       // 11451
                                                                                                                       // 11452
function stripFile(url) {                                                                                              // 11453
  return url.substr(0, stripHash(url).lastIndexOf('/') + 1);                                                           // 11454
}                                                                                                                      // 11455
                                                                                                                       // 11456
/* return the server only (scheme://host:port) */                                                                      // 11457
function serverBase(url) {                                                                                             // 11458
  return url.substring(0, url.indexOf('/', url.indexOf('//') + 2));                                                    // 11459
}                                                                                                                      // 11460
                                                                                                                       // 11461
                                                                                                                       // 11462
/**                                                                                                                    // 11463
 * LocationHtml5Url represents an url                                                                                  // 11464
 * This object is exposed as $location service when HTML5 mode is enabled and supported                                // 11465
 *                                                                                                                     // 11466
 * @constructor                                                                                                        // 11467
 * @param {string} appBase application base URL                                                                        // 11468
 * @param {string} appBaseNoFile application base URL stripped of any filename                                         // 11469
 * @param {string} basePrefix url path prefix                                                                          // 11470
 */                                                                                                                    // 11471
function LocationHtml5Url(appBase, appBaseNoFile, basePrefix) {                                                        // 11472
  this.$$html5 = true;                                                                                                 // 11473
  basePrefix = basePrefix || '';                                                                                       // 11474
  parseAbsoluteUrl(appBase, this);                                                                                     // 11475
                                                                                                                       // 11476
                                                                                                                       // 11477
  /**                                                                                                                  // 11478
   * Parse given html5 (regular) url string into properties                                                            // 11479
   * @param {string} url HTML5 url                                                                                     // 11480
   * @private                                                                                                          // 11481
   */                                                                                                                  // 11482
  this.$$parse = function(url) {                                                                                       // 11483
    var pathUrl = beginsWith(appBaseNoFile, url);                                                                      // 11484
    if (!isString(pathUrl)) {                                                                                          // 11485
      throw $locationMinErr('ipthprfx', 'Invalid url "{0}", missing path prefix "{1}".', url,                          // 11486
          appBaseNoFile);                                                                                              // 11487
    }                                                                                                                  // 11488
                                                                                                                       // 11489
    parseAppUrl(pathUrl, this);                                                                                        // 11490
                                                                                                                       // 11491
    if (!this.$$path) {                                                                                                // 11492
      this.$$path = '/';                                                                                               // 11493
    }                                                                                                                  // 11494
                                                                                                                       // 11495
    this.$$compose();                                                                                                  // 11496
  };                                                                                                                   // 11497
                                                                                                                       // 11498
  /**                                                                                                                  // 11499
   * Compose url and update `absUrl` property                                                                          // 11500
   * @private                                                                                                          // 11501
   */                                                                                                                  // 11502
  this.$$compose = function() {                                                                                        // 11503
    var search = toKeyValue(this.$$search),                                                                            // 11504
        hash = this.$$hash ? '#' + encodeUriSegment(this.$$hash) : '';                                                 // 11505
                                                                                                                       // 11506
    this.$$url = encodePath(this.$$path) + (search ? '?' + search : '') + hash;                                        // 11507
    this.$$absUrl = appBaseNoFile + this.$$url.substr(1); // first char is always '/'                                  // 11508
  };                                                                                                                   // 11509
                                                                                                                       // 11510
  this.$$parseLinkUrl = function(url, relHref) {                                                                       // 11511
    if (relHref && relHref[0] === '#') {                                                                               // 11512
      // special case for links to hash fragments:                                                                     // 11513
      // keep the old url and only replace the hash fragment                                                           // 11514
      this.hash(relHref.slice(1));                                                                                     // 11515
      return true;                                                                                                     // 11516
    }                                                                                                                  // 11517
    var appUrl, prevAppUrl;                                                                                            // 11518
    var rewrittenUrl;                                                                                                  // 11519
                                                                                                                       // 11520
    if (isDefined(appUrl = beginsWith(appBase, url))) {                                                                // 11521
      prevAppUrl = appUrl;                                                                                             // 11522
      if (isDefined(appUrl = beginsWith(basePrefix, appUrl))) {                                                        // 11523
        rewrittenUrl = appBaseNoFile + (beginsWith('/', appUrl) || appUrl);                                            // 11524
      } else {                                                                                                         // 11525
        rewrittenUrl = appBase + prevAppUrl;                                                                           // 11526
      }                                                                                                                // 11527
    } else if (isDefined(appUrl = beginsWith(appBaseNoFile, url))) {                                                   // 11528
      rewrittenUrl = appBaseNoFile + appUrl;                                                                           // 11529
    } else if (appBaseNoFile == url + '/') {                                                                           // 11530
      rewrittenUrl = appBaseNoFile;                                                                                    // 11531
    }                                                                                                                  // 11532
    if (rewrittenUrl) {                                                                                                // 11533
      this.$$parse(rewrittenUrl);                                                                                      // 11534
    }                                                                                                                  // 11535
    return !!rewrittenUrl;                                                                                             // 11536
  };                                                                                                                   // 11537
}                                                                                                                      // 11538
                                                                                                                       // 11539
                                                                                                                       // 11540
/**                                                                                                                    // 11541
 * LocationHashbangUrl represents url                                                                                  // 11542
 * This object is exposed as $location service when developer doesn't opt into html5 mode.                             // 11543
 * It also serves as the base class for html5 mode fallback on legacy browsers.                                        // 11544
 *                                                                                                                     // 11545
 * @constructor                                                                                                        // 11546
 * @param {string} appBase application base URL                                                                        // 11547
 * @param {string} appBaseNoFile application base URL stripped of any filename                                         // 11548
 * @param {string} hashPrefix hashbang prefix                                                                          // 11549
 */                                                                                                                    // 11550
function LocationHashbangUrl(appBase, appBaseNoFile, hashPrefix) {                                                     // 11551
                                                                                                                       // 11552
  parseAbsoluteUrl(appBase, this);                                                                                     // 11553
                                                                                                                       // 11554
                                                                                                                       // 11555
  /**                                                                                                                  // 11556
   * Parse given hashbang url into properties                                                                          // 11557
   * @param {string} url Hashbang url                                                                                  // 11558
   * @private                                                                                                          // 11559
   */                                                                                                                  // 11560
  this.$$parse = function(url) {                                                                                       // 11561
    var withoutBaseUrl = beginsWith(appBase, url) || beginsWith(appBaseNoFile, url);                                   // 11562
    var withoutHashUrl;                                                                                                // 11563
                                                                                                                       // 11564
    if (!isUndefined(withoutBaseUrl) && withoutBaseUrl.charAt(0) === '#') {                                            // 11565
                                                                                                                       // 11566
      // The rest of the url starts with a hash so we have                                                             // 11567
      // got either a hashbang path or a plain hash fragment                                                           // 11568
      withoutHashUrl = beginsWith(hashPrefix, withoutBaseUrl);                                                         // 11569
      if (isUndefined(withoutHashUrl)) {                                                                               // 11570
        // There was no hashbang prefix so we just have a hash fragment                                                // 11571
        withoutHashUrl = withoutBaseUrl;                                                                               // 11572
      }                                                                                                                // 11573
                                                                                                                       // 11574
    } else {                                                                                                           // 11575
      // There was no hashbang path nor hash fragment:                                                                 // 11576
      // If we are in HTML5 mode we use what is left as the path;                                                      // 11577
      // Otherwise we ignore what is left                                                                              // 11578
      if (this.$$html5) {                                                                                              // 11579
        withoutHashUrl = withoutBaseUrl;                                                                               // 11580
      } else {                                                                                                         // 11581
        withoutHashUrl = '';                                                                                           // 11582
        if (isUndefined(withoutBaseUrl)) {                                                                             // 11583
          appBase = url;                                                                                               // 11584
          this.replace();                                                                                              // 11585
        }                                                                                                              // 11586
      }                                                                                                                // 11587
    }                                                                                                                  // 11588
                                                                                                                       // 11589
    parseAppUrl(withoutHashUrl, this);                                                                                 // 11590
                                                                                                                       // 11591
    this.$$path = removeWindowsDriveName(this.$$path, withoutHashUrl, appBase);                                        // 11592
                                                                                                                       // 11593
    this.$$compose();                                                                                                  // 11594
                                                                                                                       // 11595
    /*                                                                                                                 // 11596
     * In Windows, on an anchor node on documents loaded from                                                          // 11597
     * the filesystem, the browser will return a pathname                                                              // 11598
     * prefixed with the drive name ('/C:/path') when a                                                                // 11599
     * pathname without a drive is set:                                                                                // 11600
     *  * a.setAttribute('href', '/foo')                                                                               // 11601
     *   * a.pathname === '/C:/foo' //true                                                                             // 11602
     *                                                                                                                 // 11603
     * Inside of Angular, we're always using pathnames that                                                            // 11604
     * do not include drive names for routing.                                                                         // 11605
     */                                                                                                                // 11606
    function removeWindowsDriveName(path, url, base) {                                                                 // 11607
      /*                                                                                                               // 11608
      Matches paths for file protocol on windows,                                                                      // 11609
      such as /C:/foo/bar, and captures only /foo/bar.                                                                 // 11610
      */                                                                                                               // 11611
      var windowsFilePathExp = /^\/[A-Z]:(\/.*)/;                                                                      // 11612
                                                                                                                       // 11613
      var firstPathSegmentMatch;                                                                                       // 11614
                                                                                                                       // 11615
      //Get the relative path from the input URL.                                                                      // 11616
      if (url.indexOf(base) === 0) {                                                                                   // 11617
        url = url.replace(base, '');                                                                                   // 11618
      }                                                                                                                // 11619
                                                                                                                       // 11620
      // The input URL intentionally contains a first path segment that ends with a colon.                             // 11621
      if (windowsFilePathExp.exec(url)) {                                                                              // 11622
        return path;                                                                                                   // 11623
      }                                                                                                                // 11624
                                                                                                                       // 11625
      firstPathSegmentMatch = windowsFilePathExp.exec(path);                                                           // 11626
      return firstPathSegmentMatch ? firstPathSegmentMatch[1] : path;                                                  // 11627
    }                                                                                                                  // 11628
  };                                                                                                                   // 11629
                                                                                                                       // 11630
  /**                                                                                                                  // 11631
   * Compose hashbang url and update `absUrl` property                                                                 // 11632
   * @private                                                                                                          // 11633
   */                                                                                                                  // 11634
  this.$$compose = function() {                                                                                        // 11635
    var search = toKeyValue(this.$$search),                                                                            // 11636
        hash = this.$$hash ? '#' + encodeUriSegment(this.$$hash) : '';                                                 // 11637
                                                                                                                       // 11638
    this.$$url = encodePath(this.$$path) + (search ? '?' + search : '') + hash;                                        // 11639
    this.$$absUrl = appBase + (this.$$url ? hashPrefix + this.$$url : '');                                             // 11640
  };                                                                                                                   // 11641
                                                                                                                       // 11642
  this.$$parseLinkUrl = function(url, relHref) {                                                                       // 11643
    if (stripHash(appBase) == stripHash(url)) {                                                                        // 11644
      this.$$parse(url);                                                                                               // 11645
      return true;                                                                                                     // 11646
    }                                                                                                                  // 11647
    return false;                                                                                                      // 11648
  };                                                                                                                   // 11649
}                                                                                                                      // 11650
                                                                                                                       // 11651
                                                                                                                       // 11652
/**                                                                                                                    // 11653
 * LocationHashbangUrl represents url                                                                                  // 11654
 * This object is exposed as $location service when html5 history api is enabled but the browser                       // 11655
 * does not support it.                                                                                                // 11656
 *                                                                                                                     // 11657
 * @constructor                                                                                                        // 11658
 * @param {string} appBase application base URL                                                                        // 11659
 * @param {string} appBaseNoFile application base URL stripped of any filename                                         // 11660
 * @param {string} hashPrefix hashbang prefix                                                                          // 11661
 */                                                                                                                    // 11662
function LocationHashbangInHtml5Url(appBase, appBaseNoFile, hashPrefix) {                                              // 11663
  this.$$html5 = true;                                                                                                 // 11664
  LocationHashbangUrl.apply(this, arguments);                                                                          // 11665
                                                                                                                       // 11666
  this.$$parseLinkUrl = function(url, relHref) {                                                                       // 11667
    if (relHref && relHref[0] === '#') {                                                                               // 11668
      // special case for links to hash fragments:                                                                     // 11669
      // keep the old url and only replace the hash fragment                                                           // 11670
      this.hash(relHref.slice(1));                                                                                     // 11671
      return true;                                                                                                     // 11672
    }                                                                                                                  // 11673
                                                                                                                       // 11674
    var rewrittenUrl;                                                                                                  // 11675
    var appUrl;                                                                                                        // 11676
                                                                                                                       // 11677
    if (appBase == stripHash(url)) {                                                                                   // 11678
      rewrittenUrl = url;                                                                                              // 11679
    } else if ((appUrl = beginsWith(appBaseNoFile, url))) {                                                            // 11680
      rewrittenUrl = appBase + hashPrefix + appUrl;                                                                    // 11681
    } else if (appBaseNoFile === url + '/') {                                                                          // 11682
      rewrittenUrl = appBaseNoFile;                                                                                    // 11683
    }                                                                                                                  // 11684
    if (rewrittenUrl) {                                                                                                // 11685
      this.$$parse(rewrittenUrl);                                                                                      // 11686
    }                                                                                                                  // 11687
    return !!rewrittenUrl;                                                                                             // 11688
  };                                                                                                                   // 11689
                                                                                                                       // 11690
  this.$$compose = function() {                                                                                        // 11691
    var search = toKeyValue(this.$$search),                                                                            // 11692
        hash = this.$$hash ? '#' + encodeUriSegment(this.$$hash) : '';                                                 // 11693
                                                                                                                       // 11694
    this.$$url = encodePath(this.$$path) + (search ? '?' + search : '') + hash;                                        // 11695
    // include hashPrefix in $$absUrl when $$url is empty so IE9 does not reload page because of removal of '#'        // 11696
    this.$$absUrl = appBase + hashPrefix + this.$$url;                                                                 // 11697
  };                                                                                                                   // 11698
                                                                                                                       // 11699
}                                                                                                                      // 11700
                                                                                                                       // 11701
                                                                                                                       // 11702
var locationPrototype = {                                                                                              // 11703
                                                                                                                       // 11704
  /**                                                                                                                  // 11705
   * Are we in html5 mode?                                                                                             // 11706
   * @private                                                                                                          // 11707
   */                                                                                                                  // 11708
  $$html5: false,                                                                                                      // 11709
                                                                                                                       // 11710
  /**                                                                                                                  // 11711
   * Has any change been replacing?                                                                                    // 11712
   * @private                                                                                                          // 11713
   */                                                                                                                  // 11714
  $$replace: false,                                                                                                    // 11715
                                                                                                                       // 11716
  /**                                                                                                                  // 11717
   * @ngdoc method                                                                                                     // 11718
   * @name $location#absUrl                                                                                            // 11719
   *                                                                                                                   // 11720
   * @description                                                                                                      // 11721
   * This method is getter only.                                                                                       // 11722
   *                                                                                                                   // 11723
   * Return full url representation with all segments encoded according to rules specified in                          // 11724
   * [RFC 3986](http://www.ietf.org/rfc/rfc3986.txt).                                                                  // 11725
   *                                                                                                                   // 11726
   *                                                                                                                   // 11727
   * ```js                                                                                                             // 11728
   * // given url http://example.com/#/some/path?foo=bar&baz=xoxo                                                      // 11729
   * var absUrl = $location.absUrl();                                                                                  // 11730
   * // => "http://example.com/#/some/path?foo=bar&baz=xoxo"                                                           // 11731
   * ```                                                                                                               // 11732
   *                                                                                                                   // 11733
   * @return {string} full url                                                                                         // 11734
   */                                                                                                                  // 11735
  absUrl: locationGetter('$$absUrl'),                                                                                  // 11736
                                                                                                                       // 11737
  /**                                                                                                                  // 11738
   * @ngdoc method                                                                                                     // 11739
   * @name $location#url                                                                                               // 11740
   *                                                                                                                   // 11741
   * @description                                                                                                      // 11742
   * This method is getter / setter.                                                                                   // 11743
   *                                                                                                                   // 11744
   * Return url (e.g. `/path?a=b#hash`) when called without any parameter.                                             // 11745
   *                                                                                                                   // 11746
   * Change path, search and hash, when called with parameter and return `$location`.                                  // 11747
   *                                                                                                                   // 11748
   *                                                                                                                   // 11749
   * ```js                                                                                                             // 11750
   * // given url http://example.com/#/some/path?foo=bar&baz=xoxo                                                      // 11751
   * var url = $location.url();                                                                                        // 11752
   * // => "/some/path?foo=bar&baz=xoxo"                                                                               // 11753
   * ```                                                                                                               // 11754
   *                                                                                                                   // 11755
   * @param {string=} url New url without base prefix (e.g. `/path?a=b#hash`)                                          // 11756
   * @return {string} url                                                                                              // 11757
   */                                                                                                                  // 11758
  url: function(url) {                                                                                                 // 11759
    if (isUndefined(url)) {                                                                                            // 11760
      return this.$$url;                                                                                               // 11761
    }                                                                                                                  // 11762
                                                                                                                       // 11763
    var match = PATH_MATCH.exec(url);                                                                                  // 11764
    if (match[1] || url === '') this.path(decodeURIComponent(match[1]));                                               // 11765
    if (match[2] || match[1] || url === '') this.search(match[3] || '');                                               // 11766
    this.hash(match[5] || '');                                                                                         // 11767
                                                                                                                       // 11768
    return this;                                                                                                       // 11769
  },                                                                                                                   // 11770
                                                                                                                       // 11771
  /**                                                                                                                  // 11772
   * @ngdoc method                                                                                                     // 11773
   * @name $location#protocol                                                                                          // 11774
   *                                                                                                                   // 11775
   * @description                                                                                                      // 11776
   * This method is getter only.                                                                                       // 11777
   *                                                                                                                   // 11778
   * Return protocol of current url.                                                                                   // 11779
   *                                                                                                                   // 11780
   *                                                                                                                   // 11781
   * ```js                                                                                                             // 11782
   * // given url http://example.com/#/some/path?foo=bar&baz=xoxo                                                      // 11783
   * var protocol = $location.protocol();                                                                              // 11784
   * // => "http"                                                                                                      // 11785
   * ```                                                                                                               // 11786
   *                                                                                                                   // 11787
   * @return {string} protocol of current url                                                                          // 11788
   */                                                                                                                  // 11789
  protocol: locationGetter('$$protocol'),                                                                              // 11790
                                                                                                                       // 11791
  /**                                                                                                                  // 11792
   * @ngdoc method                                                                                                     // 11793
   * @name $location#host                                                                                              // 11794
   *                                                                                                                   // 11795
   * @description                                                                                                      // 11796
   * This method is getter only.                                                                                       // 11797
   *                                                                                                                   // 11798
   * Return host of current url.                                                                                       // 11799
   *                                                                                                                   // 11800
   * Note: compared to the non-angular version `location.host` which returns `hostname:port`, this returns the `hostname` portion only.
   *                                                                                                                   // 11802
   *                                                                                                                   // 11803
   * ```js                                                                                                             // 11804
   * // given url http://example.com/#/some/path?foo=bar&baz=xoxo                                                      // 11805
   * var host = $location.host();                                                                                      // 11806
   * // => "example.com"                                                                                               // 11807
   *                                                                                                                   // 11808
   * // given url http://user:password@example.com:8080/#/some/path?foo=bar&baz=xoxo                                   // 11809
   * host = $location.host();                                                                                          // 11810
   * // => "example.com"                                                                                               // 11811
   * host = location.host;                                                                                             // 11812
   * // => "example.com:8080"                                                                                          // 11813
   * ```                                                                                                               // 11814
   *                                                                                                                   // 11815
   * @return {string} host of current url.                                                                             // 11816
   */                                                                                                                  // 11817
  host: locationGetter('$$host'),                                                                                      // 11818
                                                                                                                       // 11819
  /**                                                                                                                  // 11820
   * @ngdoc method                                                                                                     // 11821
   * @name $location#port                                                                                              // 11822
   *                                                                                                                   // 11823
   * @description                                                                                                      // 11824
   * This method is getter only.                                                                                       // 11825
   *                                                                                                                   // 11826
   * Return port of current url.                                                                                       // 11827
   *                                                                                                                   // 11828
   *                                                                                                                   // 11829
   * ```js                                                                                                             // 11830
   * // given url http://example.com/#/some/path?foo=bar&baz=xoxo                                                      // 11831
   * var port = $location.port();                                                                                      // 11832
   * // => 80                                                                                                          // 11833
   * ```                                                                                                               // 11834
   *                                                                                                                   // 11835
   * @return {Number} port                                                                                             // 11836
   */                                                                                                                  // 11837
  port: locationGetter('$$port'),                                                                                      // 11838
                                                                                                                       // 11839
  /**                                                                                                                  // 11840
   * @ngdoc method                                                                                                     // 11841
   * @name $location#path                                                                                              // 11842
   *                                                                                                                   // 11843
   * @description                                                                                                      // 11844
   * This method is getter / setter.                                                                                   // 11845
   *                                                                                                                   // 11846
   * Return path of current url when called without any parameter.                                                     // 11847
   *                                                                                                                   // 11848
   * Change path when called with parameter and return `$location`.                                                    // 11849
   *                                                                                                                   // 11850
   * Note: Path should always begin with forward slash (/), this method will add the forward slash                     // 11851
   * if it is missing.                                                                                                 // 11852
   *                                                                                                                   // 11853
   *                                                                                                                   // 11854
   * ```js                                                                                                             // 11855
   * // given url http://example.com/#/some/path?foo=bar&baz=xoxo                                                      // 11856
   * var path = $location.path();                                                                                      // 11857
   * // => "/some/path"                                                                                                // 11858
   * ```                                                                                                               // 11859
   *                                                                                                                   // 11860
   * @param {(string|number)=} path New path                                                                           // 11861
   * @return {string} path                                                                                             // 11862
   */                                                                                                                  // 11863
  path: locationGetterSetter('$$path', function(path) {                                                                // 11864
    path = path !== null ? path.toString() : '';                                                                       // 11865
    return path.charAt(0) == '/' ? path : '/' + path;                                                                  // 11866
  }),                                                                                                                  // 11867
                                                                                                                       // 11868
  /**                                                                                                                  // 11869
   * @ngdoc method                                                                                                     // 11870
   * @name $location#search                                                                                            // 11871
   *                                                                                                                   // 11872
   * @description                                                                                                      // 11873
   * This method is getter / setter.                                                                                   // 11874
   *                                                                                                                   // 11875
   * Return search part (as object) of current url when called without any parameter.                                  // 11876
   *                                                                                                                   // 11877
   * Change search part when called with parameter and return `$location`.                                             // 11878
   *                                                                                                                   // 11879
   *                                                                                                                   // 11880
   * ```js                                                                                                             // 11881
   * // given url http://example.com/#/some/path?foo=bar&baz=xoxo                                                      // 11882
   * var searchObject = $location.search();                                                                            // 11883
   * // => {foo: 'bar', baz: 'xoxo'}                                                                                   // 11884
   *                                                                                                                   // 11885
   * // set foo to 'yipee'                                                                                             // 11886
   * $location.search('foo', 'yipee');                                                                                 // 11887
   * // $location.search() => {foo: 'yipee', baz: 'xoxo'}                                                              // 11888
   * ```                                                                                                               // 11889
   *                                                                                                                   // 11890
   * @param {string|Object.<string>|Object.<Array.<string>>} search New search params - string or                      // 11891
   * hash object.                                                                                                      // 11892
   *                                                                                                                   // 11893
   * When called with a single argument the method acts as a setter, setting the `search` component                    // 11894
   * of `$location` to the specified value.                                                                            // 11895
   *                                                                                                                   // 11896
   * If the argument is a hash object containing an array of values, these values will be encoded                      // 11897
   * as duplicate search parameters in the url.                                                                        // 11898
   *                                                                                                                   // 11899
   * @param {(string|Number|Array<string>|boolean)=} paramValue If `search` is a string or number, then `paramValue`   // 11900
   * will override only a single search property.                                                                      // 11901
   *                                                                                                                   // 11902
   * If `paramValue` is an array, it will override the property of the `search` component of                           // 11903
   * `$location` specified via the first argument.                                                                     // 11904
   *                                                                                                                   // 11905
   * If `paramValue` is `null`, the property specified via the first argument will be deleted.                         // 11906
   *                                                                                                                   // 11907
   * If `paramValue` is `true`, the property specified via the first argument will be added with no                    // 11908
   * value nor trailing equal sign.                                                                                    // 11909
   *                                                                                                                   // 11910
   * @return {Object} If called with no arguments returns the parsed `search` object. If called with                   // 11911
   * one or more arguments returns `$location` object itself.                                                          // 11912
   */                                                                                                                  // 11913
  search: function(search, paramValue) {                                                                               // 11914
    switch (arguments.length) {                                                                                        // 11915
      case 0:                                                                                                          // 11916
        return this.$$search;                                                                                          // 11917
      case 1:                                                                                                          // 11918
        if (isString(search) || isNumber(search)) {                                                                    // 11919
          search = search.toString();                                                                                  // 11920
          this.$$search = parseKeyValue(search);                                                                       // 11921
        } else if (isObject(search)) {                                                                                 // 11922
          search = copy(search, {});                                                                                   // 11923
          // remove object undefined or null properties                                                                // 11924
          forEach(search, function(value, key) {                                                                       // 11925
            if (value == null) delete search[key];                                                                     // 11926
          });                                                                                                          // 11927
                                                                                                                       // 11928
          this.$$search = search;                                                                                      // 11929
        } else {                                                                                                       // 11930
          throw $locationMinErr('isrcharg',                                                                            // 11931
              'The first argument of the `$location#search()` call must be a string or an object.');                   // 11932
        }                                                                                                              // 11933
        break;                                                                                                         // 11934
      default:                                                                                                         // 11935
        if (isUndefined(paramValue) || paramValue === null) {                                                          // 11936
          delete this.$$search[search];                                                                                // 11937
        } else {                                                                                                       // 11938
          this.$$search[search] = paramValue;                                                                          // 11939
        }                                                                                                              // 11940
    }                                                                                                                  // 11941
                                                                                                                       // 11942
    this.$$compose();                                                                                                  // 11943
    return this;                                                                                                       // 11944
  },                                                                                                                   // 11945
                                                                                                                       // 11946
  /**                                                                                                                  // 11947
   * @ngdoc method                                                                                                     // 11948
   * @name $location#hash                                                                                              // 11949
   *                                                                                                                   // 11950
   * @description                                                                                                      // 11951
   * This method is getter / setter.                                                                                   // 11952
   *                                                                                                                   // 11953
   * Returns the hash fragment when called without any parameters.                                                     // 11954
   *                                                                                                                   // 11955
   * Changes the hash fragment when called with a parameter and returns `$location`.                                   // 11956
   *                                                                                                                   // 11957
   *                                                                                                                   // 11958
   * ```js                                                                                                             // 11959
   * // given url http://example.com/#/some/path?foo=bar&baz=xoxo#hashValue                                            // 11960
   * var hash = $location.hash();                                                                                      // 11961
   * // => "hashValue"                                                                                                 // 11962
   * ```                                                                                                               // 11963
   *                                                                                                                   // 11964
   * @param {(string|number)=} hash New hash fragment                                                                  // 11965
   * @return {string} hash                                                                                             // 11966
   */                                                                                                                  // 11967
  hash: locationGetterSetter('$$hash', function(hash) {                                                                // 11968
    return hash !== null ? hash.toString() : '';                                                                       // 11969
  }),                                                                                                                  // 11970
                                                                                                                       // 11971
  /**                                                                                                                  // 11972
   * @ngdoc method                                                                                                     // 11973
   * @name $location#replace                                                                                           // 11974
   *                                                                                                                   // 11975
   * @description                                                                                                      // 11976
   * If called, all changes to $location during the current `$digest` will replace the current history                 // 11977
   * record, instead of adding a new one.                                                                              // 11978
   */                                                                                                                  // 11979
  replace: function() {                                                                                                // 11980
    this.$$replace = true;                                                                                             // 11981
    return this;                                                                                                       // 11982
  }                                                                                                                    // 11983
};                                                                                                                     // 11984
                                                                                                                       // 11985
forEach([LocationHashbangInHtml5Url, LocationHashbangUrl, LocationHtml5Url], function(Location) {                      // 11986
  Location.prototype = Object.create(locationPrototype);                                                               // 11987
                                                                                                                       // 11988
  /**                                                                                                                  // 11989
   * @ngdoc method                                                                                                     // 11990
   * @name $location#state                                                                                             // 11991
   *                                                                                                                   // 11992
   * @description                                                                                                      // 11993
   * This method is getter / setter.                                                                                   // 11994
   *                                                                                                                   // 11995
   * Return the history state object when called without any parameter.                                                // 11996
   *                                                                                                                   // 11997
   * Change the history state object when called with one parameter and return `$location`.                            // 11998
   * The state object is later passed to `pushState` or `replaceState`.                                                // 11999
   *                                                                                                                   // 12000
   * NOTE: This method is supported only in HTML5 mode and only in browsers supporting                                 // 12001
   * the HTML5 History API (i.e. methods `pushState` and `replaceState`). If you need to support                       // 12002
   * older browsers (like IE9 or Android < 4.0), don't use this method.                                                // 12003
   *                                                                                                                   // 12004
   * @param {object=} state State object for pushState or replaceState                                                 // 12005
   * @return {object} state                                                                                            // 12006
   */                                                                                                                  // 12007
  Location.prototype.state = function(state) {                                                                         // 12008
    if (!arguments.length) {                                                                                           // 12009
      return this.$$state;                                                                                             // 12010
    }                                                                                                                  // 12011
                                                                                                                       // 12012
    if (Location !== LocationHtml5Url || !this.$$html5) {                                                              // 12013
      throw $locationMinErr('nostate', 'History API state support is available only ' +                                // 12014
        'in HTML5 mode and only in browsers supporting HTML5 History API');                                            // 12015
    }                                                                                                                  // 12016
    // The user might modify `stateObject` after invoking `$location.state(stateObject)`                               // 12017
    // but we're changing the $$state reference to $browser.state() during the $digest                                 // 12018
    // so the modification window is narrow.                                                                           // 12019
    this.$$state = isUndefined(state) ? null : state;                                                                  // 12020
                                                                                                                       // 12021
    return this;                                                                                                       // 12022
  };                                                                                                                   // 12023
});                                                                                                                    // 12024
                                                                                                                       // 12025
                                                                                                                       // 12026
function locationGetter(property) {                                                                                    // 12027
  return function() {                                                                                                  // 12028
    return this[property];                                                                                             // 12029
  };                                                                                                                   // 12030
}                                                                                                                      // 12031
                                                                                                                       // 12032
                                                                                                                       // 12033
function locationGetterSetter(property, preprocess) {                                                                  // 12034
  return function(value) {                                                                                             // 12035
    if (isUndefined(value)) {                                                                                          // 12036
      return this[property];                                                                                           // 12037
    }                                                                                                                  // 12038
                                                                                                                       // 12039
    this[property] = preprocess(value);                                                                                // 12040
    this.$$compose();                                                                                                  // 12041
                                                                                                                       // 12042
    return this;                                                                                                       // 12043
  };                                                                                                                   // 12044
}                                                                                                                      // 12045
                                                                                                                       // 12046
                                                                                                                       // 12047
/**                                                                                                                    // 12048
 * @ngdoc service                                                                                                      // 12049
 * @name $location                                                                                                     // 12050
 *                                                                                                                     // 12051
 * @requires $rootElement                                                                                              // 12052
 *                                                                                                                     // 12053
 * @description                                                                                                        // 12054
 * The $location service parses the URL in the browser address bar (based on the                                       // 12055
 * [window.location](https://developer.mozilla.org/en/window.location)) and makes the URL                              // 12056
 * available to your application. Changes to the URL in the address bar are reflected into                             // 12057
 * $location service and changes to $location are reflected into the browser address bar.                              // 12058
 *                                                                                                                     // 12059
 * **The $location service:**                                                                                          // 12060
 *                                                                                                                     // 12061
 * - Exposes the current URL in the browser address bar, so you can                                                    // 12062
 *   - Watch and observe the URL.                                                                                      // 12063
 *   - Change the URL.                                                                                                 // 12064
 * - Synchronizes the URL with the browser when the user                                                               // 12065
 *   - Changes the address bar.                                                                                        // 12066
 *   - Clicks the back or forward button (or clicks a History link).                                                   // 12067
 *   - Clicks on a link.                                                                                               // 12068
 * - Represents the URL object as a set of methods (protocol, host, port, path, search, hash).                         // 12069
 *                                                                                                                     // 12070
 * For more information see {@link guide/$location Developer Guide: Using $location}                                   // 12071
 */                                                                                                                    // 12072
                                                                                                                       // 12073
/**                                                                                                                    // 12074
 * @ngdoc provider                                                                                                     // 12075
 * @name $locationProvider                                                                                             // 12076
 * @description                                                                                                        // 12077
 * Use the `$locationProvider` to configure how the application deep linking paths are stored.                         // 12078
 */                                                                                                                    // 12079
function $LocationProvider() {                                                                                         // 12080
  var hashPrefix = '',                                                                                                 // 12081
      html5Mode = {                                                                                                    // 12082
        enabled: false,                                                                                                // 12083
        requireBase: true,                                                                                             // 12084
        rewriteLinks: true                                                                                             // 12085
      };                                                                                                               // 12086
                                                                                                                       // 12087
  /**                                                                                                                  // 12088
   * @ngdoc method                                                                                                     // 12089
   * @name $locationProvider#hashPrefix                                                                                // 12090
   * @description                                                                                                      // 12091
   * @param {string=} prefix Prefix for hash part (containing path and search)                                         // 12092
   * @returns {*} current value if used as getter or itself (chaining) if used as setter                               // 12093
   */                                                                                                                  // 12094
  this.hashPrefix = function(prefix) {                                                                                 // 12095
    if (isDefined(prefix)) {                                                                                           // 12096
      hashPrefix = prefix;                                                                                             // 12097
      return this;                                                                                                     // 12098
    } else {                                                                                                           // 12099
      return hashPrefix;                                                                                               // 12100
    }                                                                                                                  // 12101
  };                                                                                                                   // 12102
                                                                                                                       // 12103
  /**                                                                                                                  // 12104
   * @ngdoc method                                                                                                     // 12105
   * @name $locationProvider#html5Mode                                                                                 // 12106
   * @description                                                                                                      // 12107
   * @param {(boolean|Object)=} mode If boolean, sets `html5Mode.enabled` to value.                                    // 12108
   *   If object, sets `enabled`, `requireBase` and `rewriteLinks` to respective values. Supported                     // 12109
   *   properties:                                                                                                     // 12110
   *   - **enabled** – `{boolean}` – (default: false) If true, will rely on `history.pushState` to                     // 12111
   *     change urls where supported. Will fall back to hash-prefixed paths in browsers that do not                    // 12112
   *     support `pushState`.                                                                                          // 12113
   *   - **requireBase** - `{boolean}` - (default: `true`) When html5Mode is enabled, specifies                        // 12114
   *     whether or not a <base> tag is required to be present. If `enabled` and `requireBase` are                     // 12115
   *     true, and a base tag is not present, an error will be thrown when `$location` is injected.                    // 12116
   *     See the {@link guide/$location $location guide for more information}                                          // 12117
   *   - **rewriteLinks** - `{boolean}` - (default: `true`) When html5Mode is enabled,                                 // 12118
   *     enables/disables url rewriting for relative links.                                                            // 12119
   *                                                                                                                   // 12120
   * @returns {Object} html5Mode object if used as getter or itself (chaining) if used as setter                       // 12121
   */                                                                                                                  // 12122
  this.html5Mode = function(mode) {                                                                                    // 12123
    if (isBoolean(mode)) {                                                                                             // 12124
      html5Mode.enabled = mode;                                                                                        // 12125
      return this;                                                                                                     // 12126
    } else if (isObject(mode)) {                                                                                       // 12127
                                                                                                                       // 12128
      if (isBoolean(mode.enabled)) {                                                                                   // 12129
        html5Mode.enabled = mode.enabled;                                                                              // 12130
      }                                                                                                                // 12131
                                                                                                                       // 12132
      if (isBoolean(mode.requireBase)) {                                                                               // 12133
        html5Mode.requireBase = mode.requireBase;                                                                      // 12134
      }                                                                                                                // 12135
                                                                                                                       // 12136
      if (isBoolean(mode.rewriteLinks)) {                                                                              // 12137
        html5Mode.rewriteLinks = mode.rewriteLinks;                                                                    // 12138
      }                                                                                                                // 12139
                                                                                                                       // 12140
      return this;                                                                                                     // 12141
    } else {                                                                                                           // 12142
      return html5Mode;                                                                                                // 12143
    }                                                                                                                  // 12144
  };                                                                                                                   // 12145
                                                                                                                       // 12146
  /**                                                                                                                  // 12147
   * @ngdoc event                                                                                                      // 12148
   * @name $location#$locationChangeStart                                                                              // 12149
   * @eventType broadcast on root scope                                                                                // 12150
   * @description                                                                                                      // 12151
   * Broadcasted before a URL will change.                                                                             // 12152
   *                                                                                                                   // 12153
   * This change can be prevented by calling                                                                           // 12154
   * `preventDefault` method of the event. See {@link ng.$rootScope.Scope#$on} for more                                // 12155
   * details about event object. Upon successful change                                                                // 12156
   * {@link ng.$location#$locationChangeSuccess $locationChangeSuccess} is fired.                                      // 12157
   *                                                                                                                   // 12158
   * The `newState` and `oldState` parameters may be defined only in HTML5 mode and when                               // 12159
   * the browser supports the HTML5 History API.                                                                       // 12160
   *                                                                                                                   // 12161
   * @param {Object} angularEvent Synthetic event object.                                                              // 12162
   * @param {string} newUrl New URL                                                                                    // 12163
   * @param {string=} oldUrl URL that was before it was changed.                                                       // 12164
   * @param {string=} newState New history state object                                                                // 12165
   * @param {string=} oldState History state object that was before it was changed.                                    // 12166
   */                                                                                                                  // 12167
                                                                                                                       // 12168
  /**                                                                                                                  // 12169
   * @ngdoc event                                                                                                      // 12170
   * @name $location#$locationChangeSuccess                                                                            // 12171
   * @eventType broadcast on root scope                                                                                // 12172
   * @description                                                                                                      // 12173
   * Broadcasted after a URL was changed.                                                                              // 12174
   *                                                                                                                   // 12175
   * The `newState` and `oldState` parameters may be defined only in HTML5 mode and when                               // 12176
   * the browser supports the HTML5 History API.                                                                       // 12177
   *                                                                                                                   // 12178
   * @param {Object} angularEvent Synthetic event object.                                                              // 12179
   * @param {string} newUrl New URL                                                                                    // 12180
   * @param {string=} oldUrl URL that was before it was changed.                                                       // 12181
   * @param {string=} newState New history state object                                                                // 12182
   * @param {string=} oldState History state object that was before it was changed.                                    // 12183
   */                                                                                                                  // 12184
                                                                                                                       // 12185
  this.$get = ['$rootScope', '$browser', '$sniffer', '$rootElement', '$window',                                        // 12186
      function($rootScope, $browser, $sniffer, $rootElement, $window) {                                                // 12187
    var $location,                                                                                                     // 12188
        LocationMode,                                                                                                  // 12189
        baseHref = $browser.baseHref(), // if base[href] is undefined, it defaults to ''                               // 12190
        initialUrl = $browser.url(),                                                                                   // 12191
        appBase;                                                                                                       // 12192
                                                                                                                       // 12193
    if (html5Mode.enabled) {                                                                                           // 12194
      if (!baseHref && html5Mode.requireBase) {                                                                        // 12195
        throw $locationMinErr('nobase',                                                                                // 12196
          "$location in HTML5 mode requires a <base> tag to be present!");                                             // 12197
      }                                                                                                                // 12198
      appBase = serverBase(initialUrl) + (baseHref || '/');                                                            // 12199
      LocationMode = $sniffer.history ? LocationHtml5Url : LocationHashbangInHtml5Url;                                 // 12200
    } else {                                                                                                           // 12201
      appBase = stripHash(initialUrl);                                                                                 // 12202
      LocationMode = LocationHashbangUrl;                                                                              // 12203
    }                                                                                                                  // 12204
    var appBaseNoFile = stripFile(appBase);                                                                            // 12205
                                                                                                                       // 12206
    $location = new LocationMode(appBase, appBaseNoFile, '#' + hashPrefix);                                            // 12207
    $location.$$parseLinkUrl(initialUrl, initialUrl);                                                                  // 12208
                                                                                                                       // 12209
    $location.$$state = $browser.state();                                                                              // 12210
                                                                                                                       // 12211
    var IGNORE_URI_REGEXP = /^\s*(javascript|mailto):/i;                                                               // 12212
                                                                                                                       // 12213
    function setBrowserUrlWithFallback(url, replace, state) {                                                          // 12214
      var oldUrl = $location.url();                                                                                    // 12215
      var oldState = $location.$$state;                                                                                // 12216
      try {                                                                                                            // 12217
        $browser.url(url, replace, state);                                                                             // 12218
                                                                                                                       // 12219
        // Make sure $location.state() returns referentially identical (not just deeply equal)                         // 12220
        // state object; this makes possible quick checking if the state changed in the digest                         // 12221
        // loop. Checking deep equality would be too expensive.                                                        // 12222
        $location.$$state = $browser.state();                                                                          // 12223
      } catch (e) {                                                                                                    // 12224
        // Restore old values if pushState fails                                                                       // 12225
        $location.url(oldUrl);                                                                                         // 12226
        $location.$$state = oldState;                                                                                  // 12227
                                                                                                                       // 12228
        throw e;                                                                                                       // 12229
      }                                                                                                                // 12230
    }                                                                                                                  // 12231
                                                                                                                       // 12232
    $rootElement.on('click', function(event) {                                                                         // 12233
      // TODO(vojta): rewrite link when opening in new tab/window (in legacy browser)                                  // 12234
      // currently we open nice url link and redirect then                                                             // 12235
                                                                                                                       // 12236
      if (!html5Mode.rewriteLinks || event.ctrlKey || event.metaKey || event.shiftKey || event.which == 2 || event.button == 2) return;
                                                                                                                       // 12238
      var elm = jqLite(event.target);                                                                                  // 12239
                                                                                                                       // 12240
      // traverse the DOM up to find first A tag                                                                       // 12241
      while (nodeName_(elm[0]) !== 'a') {                                                                              // 12242
        // ignore rewriting if no A tag (reached root element, or no parent - removed from document)                   // 12243
        if (elm[0] === $rootElement[0] || !(elm = elm.parent())[0]) return;                                            // 12244
      }                                                                                                                // 12245
                                                                                                                       // 12246
      var absHref = elm.prop('href');                                                                                  // 12247
      // get the actual href attribute - see                                                                           // 12248
      // http://msdn.microsoft.com/en-us/library/ie/dd347148(v=vs.85).aspx                                             // 12249
      var relHref = elm.attr('href') || elm.attr('xlink:href');                                                        // 12250
                                                                                                                       // 12251
      if (isObject(absHref) && absHref.toString() === '[object SVGAnimatedString]') {                                  // 12252
        // SVGAnimatedString.animVal should be identical to SVGAnimatedString.baseVal, unless during                   // 12253
        // an animation.                                                                                               // 12254
        absHref = urlResolve(absHref.animVal).href;                                                                    // 12255
      }                                                                                                                // 12256
                                                                                                                       // 12257
      // Ignore when url is started with javascript: or mailto:                                                        // 12258
      if (IGNORE_URI_REGEXP.test(absHref)) return;                                                                     // 12259
                                                                                                                       // 12260
      if (absHref && !elm.attr('target') && !event.isDefaultPrevented()) {                                             // 12261
        if ($location.$$parseLinkUrl(absHref, relHref)) {                                                              // 12262
          // We do a preventDefault for all urls that are part of the angular application,                             // 12263
          // in html5mode and also without, so that we are able to abort navigation without                            // 12264
          // getting double entries in the location history.                                                           // 12265
          event.preventDefault();                                                                                      // 12266
          // update location manually                                                                                  // 12267
          if ($location.absUrl() != $browser.url()) {                                                                  // 12268
            $rootScope.$apply();                                                                                       // 12269
            // hack to work around FF6 bug 684208 when scenario runner clicks on links                                 // 12270
            $window.angular['ff-684208-preventDefault'] = true;                                                        // 12271
          }                                                                                                            // 12272
        }                                                                                                              // 12273
      }                                                                                                                // 12274
    });                                                                                                                // 12275
                                                                                                                       // 12276
                                                                                                                       // 12277
    // rewrite hashbang url <> html5 url                                                                               // 12278
    if (trimEmptyHash($location.absUrl()) != trimEmptyHash(initialUrl)) {                                              // 12279
      $browser.url($location.absUrl(), true);                                                                          // 12280
    }                                                                                                                  // 12281
                                                                                                                       // 12282
    var initializing = true;                                                                                           // 12283
                                                                                                                       // 12284
    // update $location when $browser url changes                                                                      // 12285
    $browser.onUrlChange(function(newUrl, newState) {                                                                  // 12286
                                                                                                                       // 12287
      if (isUndefined(beginsWith(appBaseNoFile, newUrl))) {                                                            // 12288
        // If we are navigating outside of the app then force a reload                                                 // 12289
        $window.location.href = newUrl;                                                                                // 12290
        return;                                                                                                        // 12291
      }                                                                                                                // 12292
                                                                                                                       // 12293
      $rootScope.$evalAsync(function() {                                                                               // 12294
        var oldUrl = $location.absUrl();                                                                               // 12295
        var oldState = $location.$$state;                                                                              // 12296
        var defaultPrevented;                                                                                          // 12297
        newUrl = trimEmptyHash(newUrl);                                                                                // 12298
        $location.$$parse(newUrl);                                                                                     // 12299
        $location.$$state = newState;                                                                                  // 12300
                                                                                                                       // 12301
        defaultPrevented = $rootScope.$broadcast('$locationChangeStart', newUrl, oldUrl,                               // 12302
            newState, oldState).defaultPrevented;                                                                      // 12303
                                                                                                                       // 12304
        // if the location was changed by a `$locationChangeStart` handler then stop                                   // 12305
        // processing this location change                                                                             // 12306
        if ($location.absUrl() !== newUrl) return;                                                                     // 12307
                                                                                                                       // 12308
        if (defaultPrevented) {                                                                                        // 12309
          $location.$$parse(oldUrl);                                                                                   // 12310
          $location.$$state = oldState;                                                                                // 12311
          setBrowserUrlWithFallback(oldUrl, false, oldState);                                                          // 12312
        } else {                                                                                                       // 12313
          initializing = false;                                                                                        // 12314
          afterLocationChange(oldUrl, oldState);                                                                       // 12315
        }                                                                                                              // 12316
      });                                                                                                              // 12317
      if (!$rootScope.$$phase) $rootScope.$digest();                                                                   // 12318
    });                                                                                                                // 12319
                                                                                                                       // 12320
    // update browser                                                                                                  // 12321
    $rootScope.$watch(function $locationWatch() {                                                                      // 12322
      var oldUrl = trimEmptyHash($browser.url());                                                                      // 12323
      var newUrl = trimEmptyHash($location.absUrl());                                                                  // 12324
      var oldState = $browser.state();                                                                                 // 12325
      var currentReplace = $location.$$replace;                                                                        // 12326
      var urlOrStateChanged = oldUrl !== newUrl ||                                                                     // 12327
        ($location.$$html5 && $sniffer.history && oldState !== $location.$$state);                                     // 12328
                                                                                                                       // 12329
      if (initializing || urlOrStateChanged) {                                                                         // 12330
        initializing = false;                                                                                          // 12331
                                                                                                                       // 12332
        $rootScope.$evalAsync(function() {                                                                             // 12333
          var newUrl = $location.absUrl();                                                                             // 12334
          var defaultPrevented = $rootScope.$broadcast('$locationChangeStart', newUrl, oldUrl,                         // 12335
              $location.$$state, oldState).defaultPrevented;                                                           // 12336
                                                                                                                       // 12337
          // if the location was changed by a `$locationChangeStart` handler then stop                                 // 12338
          // processing this location change                                                                           // 12339
          if ($location.absUrl() !== newUrl) return;                                                                   // 12340
                                                                                                                       // 12341
          if (defaultPrevented) {                                                                                      // 12342
            $location.$$parse(oldUrl);                                                                                 // 12343
            $location.$$state = oldState;                                                                              // 12344
          } else {                                                                                                     // 12345
            if (urlOrStateChanged) {                                                                                   // 12346
              setBrowserUrlWithFallback(newUrl, currentReplace,                                                        // 12347
                                        oldState === $location.$$state ? null : $location.$$state);                    // 12348
            }                                                                                                          // 12349
            afterLocationChange(oldUrl, oldState);                                                                     // 12350
          }                                                                                                            // 12351
        });                                                                                                            // 12352
      }                                                                                                                // 12353
                                                                                                                       // 12354
      $location.$$replace = false;                                                                                     // 12355
                                                                                                                       // 12356
      // we don't need to return anything because $evalAsync will make the digest loop dirty when                      // 12357
      // there is a change                                                                                             // 12358
    });                                                                                                                // 12359
                                                                                                                       // 12360
    return $location;                                                                                                  // 12361
                                                                                                                       // 12362
    function afterLocationChange(oldUrl, oldState) {                                                                   // 12363
      $rootScope.$broadcast('$locationChangeSuccess', $location.absUrl(), oldUrl,                                      // 12364
        $location.$$state, oldState);                                                                                  // 12365
    }                                                                                                                  // 12366
}];                                                                                                                    // 12367
}                                                                                                                      // 12368
                                                                                                                       // 12369
/**                                                                                                                    // 12370
 * @ngdoc service                                                                                                      // 12371
 * @name $log                                                                                                          // 12372
 * @requires $window                                                                                                   // 12373
 *                                                                                                                     // 12374
 * @description                                                                                                        // 12375
 * Simple service for logging. Default implementation safely writes the message                                        // 12376
 * into the browser's console (if present).                                                                            // 12377
 *                                                                                                                     // 12378
 * The main purpose of this service is to simplify debugging and troubleshooting.                                      // 12379
 *                                                                                                                     // 12380
 * The default is to log `debug` messages. You can use                                                                 // 12381
 * {@link ng.$logProvider ng.$logProvider#debugEnabled} to change this.                                                // 12382
 *                                                                                                                     // 12383
 * @example                                                                                                            // 12384
   <example module="logExample">                                                                                       // 12385
     <file name="script.js">                                                                                           // 12386
       angular.module('logExample', [])                                                                                // 12387
         .controller('LogController', ['$scope', '$log', function($scope, $log) {                                      // 12388
           $scope.$log = $log;                                                                                         // 12389
           $scope.message = 'Hello World!';                                                                            // 12390
         }]);                                                                                                          // 12391
     </file>                                                                                                           // 12392
     <file name="index.html">                                                                                          // 12393
       <div ng-controller="LogController">                                                                             // 12394
         <p>Reload this page with open console, enter text and hit the log button...</p>                               // 12395
         <label>Message:                                                                                               // 12396
         <input type="text" ng-model="message" /></label>                                                              // 12397
         <button ng-click="$log.log(message)">log</button>                                                             // 12398
         <button ng-click="$log.warn(message)">warn</button>                                                           // 12399
         <button ng-click="$log.info(message)">info</button>                                                           // 12400
         <button ng-click="$log.error(message)">error</button>                                                         // 12401
         <button ng-click="$log.debug(message)">debug</button>                                                         // 12402
       </div>                                                                                                          // 12403
     </file>                                                                                                           // 12404
   </example>                                                                                                          // 12405
 */                                                                                                                    // 12406
                                                                                                                       // 12407
/**                                                                                                                    // 12408
 * @ngdoc provider                                                                                                     // 12409
 * @name $logProvider                                                                                                  // 12410
 * @description                                                                                                        // 12411
 * Use the `$logProvider` to configure how the application logs messages                                               // 12412
 */                                                                                                                    // 12413
function $LogProvider() {                                                                                              // 12414
  var debug = true,                                                                                                    // 12415
      self = this;                                                                                                     // 12416
                                                                                                                       // 12417
  /**                                                                                                                  // 12418
   * @ngdoc method                                                                                                     // 12419
   * @name $logProvider#debugEnabled                                                                                   // 12420
   * @description                                                                                                      // 12421
   * @param {boolean=} flag enable or disable debug level messages                                                     // 12422
   * @returns {*} current value if used as getter or itself (chaining) if used as setter                               // 12423
   */                                                                                                                  // 12424
  this.debugEnabled = function(flag) {                                                                                 // 12425
    if (isDefined(flag)) {                                                                                             // 12426
      debug = flag;                                                                                                    // 12427
    return this;                                                                                                       // 12428
    } else {                                                                                                           // 12429
      return debug;                                                                                                    // 12430
    }                                                                                                                  // 12431
  };                                                                                                                   // 12432
                                                                                                                       // 12433
  this.$get = ['$window', function($window) {                                                                          // 12434
    return {                                                                                                           // 12435
      /**                                                                                                              // 12436
       * @ngdoc method                                                                                                 // 12437
       * @name $log#log                                                                                                // 12438
       *                                                                                                               // 12439
       * @description                                                                                                  // 12440
       * Write a log message                                                                                           // 12441
       */                                                                                                              // 12442
      log: consoleLog('log'),                                                                                          // 12443
                                                                                                                       // 12444
      /**                                                                                                              // 12445
       * @ngdoc method                                                                                                 // 12446
       * @name $log#info                                                                                               // 12447
       *                                                                                                               // 12448
       * @description                                                                                                  // 12449
       * Write an information message                                                                                  // 12450
       */                                                                                                              // 12451
      info: consoleLog('info'),                                                                                        // 12452
                                                                                                                       // 12453
      /**                                                                                                              // 12454
       * @ngdoc method                                                                                                 // 12455
       * @name $log#warn                                                                                               // 12456
       *                                                                                                               // 12457
       * @description                                                                                                  // 12458
       * Write a warning message                                                                                       // 12459
       */                                                                                                              // 12460
      warn: consoleLog('warn'),                                                                                        // 12461
                                                                                                                       // 12462
      /**                                                                                                              // 12463
       * @ngdoc method                                                                                                 // 12464
       * @name $log#error                                                                                              // 12465
       *                                                                                                               // 12466
       * @description                                                                                                  // 12467
       * Write an error message                                                                                        // 12468
       */                                                                                                              // 12469
      error: consoleLog('error'),                                                                                      // 12470
                                                                                                                       // 12471
      /**                                                                                                              // 12472
       * @ngdoc method                                                                                                 // 12473
       * @name $log#debug                                                                                              // 12474
       *                                                                                                               // 12475
       * @description                                                                                                  // 12476
       * Write a debug message                                                                                         // 12477
       */                                                                                                              // 12478
      debug: (function() {                                                                                             // 12479
        var fn = consoleLog('debug');                                                                                  // 12480
                                                                                                                       // 12481
        return function() {                                                                                            // 12482
          if (debug) {                                                                                                 // 12483
            fn.apply(self, arguments);                                                                                 // 12484
          }                                                                                                            // 12485
        };                                                                                                             // 12486
      }())                                                                                                             // 12487
    };                                                                                                                 // 12488
                                                                                                                       // 12489
    function formatError(arg) {                                                                                        // 12490
      if (arg instanceof Error) {                                                                                      // 12491
        if (arg.stack) {                                                                                               // 12492
          arg = (arg.message && arg.stack.indexOf(arg.message) === -1)                                                 // 12493
              ? 'Error: ' + arg.message + '\n' + arg.stack                                                             // 12494
              : arg.stack;                                                                                             // 12495
        } else if (arg.sourceURL) {                                                                                    // 12496
          arg = arg.message + '\n' + arg.sourceURL + ':' + arg.line;                                                   // 12497
        }                                                                                                              // 12498
      }                                                                                                                // 12499
      return arg;                                                                                                      // 12500
    }                                                                                                                  // 12501
                                                                                                                       // 12502
    function consoleLog(type) {                                                                                        // 12503
      var console = $window.console || {},                                                                             // 12504
          logFn = console[type] || console.log || noop,                                                                // 12505
          hasApply = false;                                                                                            // 12506
                                                                                                                       // 12507
      // Note: reading logFn.apply throws an error in IE11 in IE8 document mode.                                       // 12508
      // The reason behind this is that console.log has type "object" in IE8...                                        // 12509
      try {                                                                                                            // 12510
        hasApply = !!logFn.apply;                                                                                      // 12511
      } catch (e) {}                                                                                                   // 12512
                                                                                                                       // 12513
      if (hasApply) {                                                                                                  // 12514
        return function() {                                                                                            // 12515
          var args = [];                                                                                               // 12516
          forEach(arguments, function(arg) {                                                                           // 12517
            args.push(formatError(arg));                                                                               // 12518
          });                                                                                                          // 12519
          return logFn.apply(console, args);                                                                           // 12520
        };                                                                                                             // 12521
      }                                                                                                                // 12522
                                                                                                                       // 12523
      // we are IE which either doesn't have window.console => this is noop and we do nothing,                         // 12524
      // or we are IE where console.log doesn't have apply so we log at least first 2 args                             // 12525
      return function(arg1, arg2) {                                                                                    // 12526
        logFn(arg1, arg2 == null ? '' : arg2);                                                                         // 12527
      };                                                                                                               // 12528
    }                                                                                                                  // 12529
  }];                                                                                                                  // 12530
}                                                                                                                      // 12531
                                                                                                                       // 12532
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *                                           // 12533
 *     Any commits to this file should be reviewed with security in mind.  *                                           // 12534
 *   Changes to this file can potentially create security vulnerabilities. *                                           // 12535
 *          An approval from 2 Core members with history of modifying      *                                           // 12536
 *                         this file is required.                          *                                           // 12537
 *                                                                         *                                           // 12538
 *  Does the change somehow allow for arbitrary javascript to be executed? *                                           // 12539
 *    Or allows for someone to change the prototype of built-in objects?   *                                           // 12540
 *     Or gives undesired access to variables likes document or window?    *                                           // 12541
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */                                          // 12542
                                                                                                                       // 12543
var $parseMinErr = minErr('$parse');                                                                                   // 12544
                                                                                                                       // 12545
// Sandboxing Angular Expressions                                                                                      // 12546
// ------------------------------                                                                                      // 12547
// Angular expressions are generally considered safe because these expressions only have direct                        // 12548
// access to `$scope` and locals. However, one can obtain the ability to execute arbitrary JS code by                  // 12549
// obtaining a reference to native JS functions such as the Function constructor.                                      // 12550
//                                                                                                                     // 12551
// As an example, consider the following Angular expression:                                                           // 12552
//                                                                                                                     // 12553
//   {}.toString.constructor('alert("evil JS code")')                                                                  // 12554
//                                                                                                                     // 12555
// This sandboxing technique is not perfect and doesn't aim to be. The goal is to prevent exploits                     // 12556
// against the expression language, but not to prevent exploits that were enabled by exposing                          // 12557
// sensitive JavaScript or browser APIs on Scope. Exposing such objects on a Scope is never a good                     // 12558
// practice and therefore we are not even trying to protect against interaction with an object                         // 12559
// explicitly exposed in this way.                                                                                     // 12560
//                                                                                                                     // 12561
// In general, it is not possible to access a Window object from an angular expression unless a                        // 12562
// window or some DOM object that has a reference to window is published onto a Scope.                                 // 12563
// Similarly we prevent invocations of function known to be dangerous, as well as assignments to                       // 12564
// native objects.                                                                                                     // 12565
//                                                                                                                     // 12566
// See https://docs.angularjs.org/guide/security                                                                       // 12567
                                                                                                                       // 12568
                                                                                                                       // 12569
function ensureSafeMemberName(name, fullExpression) {                                                                  // 12570
  if (name === "__defineGetter__" || name === "__defineSetter__"                                                       // 12571
      || name === "__lookupGetter__" || name === "__lookupSetter__"                                                    // 12572
      || name === "__proto__") {                                                                                       // 12573
    throw $parseMinErr('isecfld',                                                                                      // 12574
        'Attempting to access a disallowed field in Angular expressions! '                                             // 12575
        + 'Expression: {0}', fullExpression);                                                                          // 12576
  }                                                                                                                    // 12577
  return name;                                                                                                         // 12578
}                                                                                                                      // 12579
                                                                                                                       // 12580
function getStringValue(name, fullExpression) {                                                                        // 12581
  // From the JavaScript docs:                                                                                         // 12582
  // Property names must be strings. This means that non-string objects cannot be used                                 // 12583
  // as keys in an object. Any non-string object, including a number, is typecasted                                    // 12584
  // into a string via the toString method.                                                                            // 12585
  //                                                                                                                   // 12586
  // So, to ensure that we are checking the same `name` that JavaScript would use,                                     // 12587
  // we cast it to a string, if possible.                                                                              // 12588
  // Doing `name + ''` can cause a repl error if the result to `toString` is not a string,                             // 12589
  // this is, this will handle objects that misbehave.                                                                 // 12590
  name = name + '';                                                                                                    // 12591
  if (!isString(name)) {                                                                                               // 12592
    throw $parseMinErr('iseccst',                                                                                      // 12593
        'Cannot convert object to primitive value! '                                                                   // 12594
        + 'Expression: {0}', fullExpression);                                                                          // 12595
  }                                                                                                                    // 12596
  return name;                                                                                                         // 12597
}                                                                                                                      // 12598
                                                                                                                       // 12599
function ensureSafeObject(obj, fullExpression) {                                                                       // 12600
  // nifty check if obj is Function that is fast and works across iframes and other contexts                           // 12601
  if (obj) {                                                                                                           // 12602
    if (obj.constructor === obj) {                                                                                     // 12603
      throw $parseMinErr('isecfn',                                                                                     // 12604
          'Referencing Function in Angular expressions is disallowed! Expression: {0}',                                // 12605
          fullExpression);                                                                                             // 12606
    } else if (// isWindow(obj)                                                                                        // 12607
        obj.window === obj) {                                                                                          // 12608
      throw $parseMinErr('isecwindow',                                                                                 // 12609
          'Referencing the Window in Angular expressions is disallowed! Expression: {0}',                              // 12610
          fullExpression);                                                                                             // 12611
    } else if (// isElement(obj)                                                                                       // 12612
        obj.children && (obj.nodeName || (obj.prop && obj.attr && obj.find))) {                                        // 12613
      throw $parseMinErr('isecdom',                                                                                    // 12614
          'Referencing DOM nodes in Angular expressions is disallowed! Expression: {0}',                               // 12615
          fullExpression);                                                                                             // 12616
    } else if (// block Object so that we can't get hold of dangerous Object.* methods                                 // 12617
        obj === Object) {                                                                                              // 12618
      throw $parseMinErr('isecobj',                                                                                    // 12619
          'Referencing Object in Angular expressions is disallowed! Expression: {0}',                                  // 12620
          fullExpression);                                                                                             // 12621
    }                                                                                                                  // 12622
  }                                                                                                                    // 12623
  return obj;                                                                                                          // 12624
}                                                                                                                      // 12625
                                                                                                                       // 12626
var CALL = Function.prototype.call;                                                                                    // 12627
var APPLY = Function.prototype.apply;                                                                                  // 12628
var BIND = Function.prototype.bind;                                                                                    // 12629
                                                                                                                       // 12630
function ensureSafeFunction(obj, fullExpression) {                                                                     // 12631
  if (obj) {                                                                                                           // 12632
    if (obj.constructor === obj) {                                                                                     // 12633
      throw $parseMinErr('isecfn',                                                                                     // 12634
        'Referencing Function in Angular expressions is disallowed! Expression: {0}',                                  // 12635
        fullExpression);                                                                                               // 12636
    } else if (obj === CALL || obj === APPLY || obj === BIND) {                                                        // 12637
      throw $parseMinErr('isecff',                                                                                     // 12638
        'Referencing call, apply or bind in Angular expressions is disallowed! Expression: {0}',                       // 12639
        fullExpression);                                                                                               // 12640
    }                                                                                                                  // 12641
  }                                                                                                                    // 12642
}                                                                                                                      // 12643
                                                                                                                       // 12644
function ensureSafeAssignContext(obj, fullExpression) {                                                                // 12645
  if (obj) {                                                                                                           // 12646
    if (obj === (0).constructor || obj === (false).constructor || obj === ''.constructor ||                            // 12647
        obj === {}.constructor || obj === [].constructor || obj === Function.constructor) {                            // 12648
      throw $parseMinErr('isecaf',                                                                                     // 12649
        'Assigning to a constructor is disallowed! Expression: {0}', fullExpression);                                  // 12650
    }                                                                                                                  // 12651
  }                                                                                                                    // 12652
}                                                                                                                      // 12653
                                                                                                                       // 12654
var OPERATORS = createMap();                                                                                           // 12655
forEach('+ - * / % === !== == != < > <= >= && || ! = |'.split(' '), function(operator) { OPERATORS[operator] = true; });
var ESCAPE = {"n":"\n", "f":"\f", "r":"\r", "t":"\t", "v":"\v", "'":"'", '"':'"'};                                     // 12657
                                                                                                                       // 12658
                                                                                                                       // 12659
/////////////////////////////////////////                                                                              // 12660
                                                                                                                       // 12661
                                                                                                                       // 12662
/**                                                                                                                    // 12663
 * @constructor                                                                                                        // 12664
 */                                                                                                                    // 12665
var Lexer = function(options) {                                                                                        // 12666
  this.options = options;                                                                                              // 12667
};                                                                                                                     // 12668
                                                                                                                       // 12669
Lexer.prototype = {                                                                                                    // 12670
  constructor: Lexer,                                                                                                  // 12671
                                                                                                                       // 12672
  lex: function(text) {                                                                                                // 12673
    this.text = text;                                                                                                  // 12674
    this.index = 0;                                                                                                    // 12675
    this.tokens = [];                                                                                                  // 12676
                                                                                                                       // 12677
    while (this.index < this.text.length) {                                                                            // 12678
      var ch = this.text.charAt(this.index);                                                                           // 12679
      if (ch === '"' || ch === "'") {                                                                                  // 12680
        this.readString(ch);                                                                                           // 12681
      } else if (this.isNumber(ch) || ch === '.' && this.isNumber(this.peek())) {                                      // 12682
        this.readNumber();                                                                                             // 12683
      } else if (this.isIdent(ch)) {                                                                                   // 12684
        this.readIdent();                                                                                              // 12685
      } else if (this.is(ch, '(){}[].,;:?')) {                                                                         // 12686
        this.tokens.push({index: this.index, text: ch});                                                               // 12687
        this.index++;                                                                                                  // 12688
      } else if (this.isWhitespace(ch)) {                                                                              // 12689
        this.index++;                                                                                                  // 12690
      } else {                                                                                                         // 12691
        var ch2 = ch + this.peek();                                                                                    // 12692
        var ch3 = ch2 + this.peek(2);                                                                                  // 12693
        var op1 = OPERATORS[ch];                                                                                       // 12694
        var op2 = OPERATORS[ch2];                                                                                      // 12695
        var op3 = OPERATORS[ch3];                                                                                      // 12696
        if (op1 || op2 || op3) {                                                                                       // 12697
          var token = op3 ? ch3 : (op2 ? ch2 : ch);                                                                    // 12698
          this.tokens.push({index: this.index, text: token, operator: true});                                          // 12699
          this.index += token.length;                                                                                  // 12700
        } else {                                                                                                       // 12701
          this.throwError('Unexpected next character ', this.index, this.index + 1);                                   // 12702
        }                                                                                                              // 12703
      }                                                                                                                // 12704
    }                                                                                                                  // 12705
    return this.tokens;                                                                                                // 12706
  },                                                                                                                   // 12707
                                                                                                                       // 12708
  is: function(ch, chars) {                                                                                            // 12709
    return chars.indexOf(ch) !== -1;                                                                                   // 12710
  },                                                                                                                   // 12711
                                                                                                                       // 12712
  peek: function(i) {                                                                                                  // 12713
    var num = i || 1;                                                                                                  // 12714
    return (this.index + num < this.text.length) ? this.text.charAt(this.index + num) : false;                         // 12715
  },                                                                                                                   // 12716
                                                                                                                       // 12717
  isNumber: function(ch) {                                                                                             // 12718
    return ('0' <= ch && ch <= '9') && typeof ch === "string";                                                         // 12719
  },                                                                                                                   // 12720
                                                                                                                       // 12721
  isWhitespace: function(ch) {                                                                                         // 12722
    // IE treats non-breaking space as \u00A0                                                                          // 12723
    return (ch === ' ' || ch === '\r' || ch === '\t' ||                                                                // 12724
            ch === '\n' || ch === '\v' || ch === '\u00A0');                                                            // 12725
  },                                                                                                                   // 12726
                                                                                                                       // 12727
  isIdent: function(ch) {                                                                                              // 12728
    return ('a' <= ch && ch <= 'z' ||                                                                                  // 12729
            'A' <= ch && ch <= 'Z' ||                                                                                  // 12730
            '_' === ch || ch === '$');                                                                                 // 12731
  },                                                                                                                   // 12732
                                                                                                                       // 12733
  isExpOperator: function(ch) {                                                                                        // 12734
    return (ch === '-' || ch === '+' || this.isNumber(ch));                                                            // 12735
  },                                                                                                                   // 12736
                                                                                                                       // 12737
  throwError: function(error, start, end) {                                                                            // 12738
    end = end || this.index;                                                                                           // 12739
    var colStr = (isDefined(start)                                                                                     // 12740
            ? 's ' + start +  '-' + this.index + ' [' + this.text.substring(start, end) + ']'                          // 12741
            : ' ' + end);                                                                                              // 12742
    throw $parseMinErr('lexerr', 'Lexer Error: {0} at column{1} in expression [{2}].',                                 // 12743
        error, colStr, this.text);                                                                                     // 12744
  },                                                                                                                   // 12745
                                                                                                                       // 12746
  readNumber: function() {                                                                                             // 12747
    var number = '';                                                                                                   // 12748
    var start = this.index;                                                                                            // 12749
    while (this.index < this.text.length) {                                                                            // 12750
      var ch = lowercase(this.text.charAt(this.index));                                                                // 12751
      if (ch == '.' || this.isNumber(ch)) {                                                                            // 12752
        number += ch;                                                                                                  // 12753
      } else {                                                                                                         // 12754
        var peekCh = this.peek();                                                                                      // 12755
        if (ch == 'e' && this.isExpOperator(peekCh)) {                                                                 // 12756
          number += ch;                                                                                                // 12757
        } else if (this.isExpOperator(ch) &&                                                                           // 12758
            peekCh && this.isNumber(peekCh) &&                                                                         // 12759
            number.charAt(number.length - 1) == 'e') {                                                                 // 12760
          number += ch;                                                                                                // 12761
        } else if (this.isExpOperator(ch) &&                                                                           // 12762
            (!peekCh || !this.isNumber(peekCh)) &&                                                                     // 12763
            number.charAt(number.length - 1) == 'e') {                                                                 // 12764
          this.throwError('Invalid exponent');                                                                         // 12765
        } else {                                                                                                       // 12766
          break;                                                                                                       // 12767
        }                                                                                                              // 12768
      }                                                                                                                // 12769
      this.index++;                                                                                                    // 12770
    }                                                                                                                  // 12771
    this.tokens.push({                                                                                                 // 12772
      index: start,                                                                                                    // 12773
      text: number,                                                                                                    // 12774
      constant: true,                                                                                                  // 12775
      value: Number(number)                                                                                            // 12776
    });                                                                                                                // 12777
  },                                                                                                                   // 12778
                                                                                                                       // 12779
  readIdent: function() {                                                                                              // 12780
    var start = this.index;                                                                                            // 12781
    while (this.index < this.text.length) {                                                                            // 12782
      var ch = this.text.charAt(this.index);                                                                           // 12783
      if (!(this.isIdent(ch) || this.isNumber(ch))) {                                                                  // 12784
        break;                                                                                                         // 12785
      }                                                                                                                // 12786
      this.index++;                                                                                                    // 12787
    }                                                                                                                  // 12788
    this.tokens.push({                                                                                                 // 12789
      index: start,                                                                                                    // 12790
      text: this.text.slice(start, this.index),                                                                        // 12791
      identifier: true                                                                                                 // 12792
    });                                                                                                                // 12793
  },                                                                                                                   // 12794
                                                                                                                       // 12795
  readString: function(quote) {                                                                                        // 12796
    var start = this.index;                                                                                            // 12797
    this.index++;                                                                                                      // 12798
    var string = '';                                                                                                   // 12799
    var rawString = quote;                                                                                             // 12800
    var escape = false;                                                                                                // 12801
    while (this.index < this.text.length) {                                                                            // 12802
      var ch = this.text.charAt(this.index);                                                                           // 12803
      rawString += ch;                                                                                                 // 12804
      if (escape) {                                                                                                    // 12805
        if (ch === 'u') {                                                                                              // 12806
          var hex = this.text.substring(this.index + 1, this.index + 5);                                               // 12807
          if (!hex.match(/[\da-f]{4}/i)) {                                                                             // 12808
            this.throwError('Invalid unicode escape [\\u' + hex + ']');                                                // 12809
          }                                                                                                            // 12810
          this.index += 4;                                                                                             // 12811
          string += String.fromCharCode(parseInt(hex, 16));                                                            // 12812
        } else {                                                                                                       // 12813
          var rep = ESCAPE[ch];                                                                                        // 12814
          string = string + (rep || ch);                                                                               // 12815
        }                                                                                                              // 12816
        escape = false;                                                                                                // 12817
      } else if (ch === '\\') {                                                                                        // 12818
        escape = true;                                                                                                 // 12819
      } else if (ch === quote) {                                                                                       // 12820
        this.index++;                                                                                                  // 12821
        this.tokens.push({                                                                                             // 12822
          index: start,                                                                                                // 12823
          text: rawString,                                                                                             // 12824
          constant: true,                                                                                              // 12825
          value: string                                                                                                // 12826
        });                                                                                                            // 12827
        return;                                                                                                        // 12828
      } else {                                                                                                         // 12829
        string += ch;                                                                                                  // 12830
      }                                                                                                                // 12831
      this.index++;                                                                                                    // 12832
    }                                                                                                                  // 12833
    this.throwError('Unterminated quote', start);                                                                      // 12834
  }                                                                                                                    // 12835
};                                                                                                                     // 12836
                                                                                                                       // 12837
var AST = function(lexer, options) {                                                                                   // 12838
  this.lexer = lexer;                                                                                                  // 12839
  this.options = options;                                                                                              // 12840
};                                                                                                                     // 12841
                                                                                                                       // 12842
AST.Program = 'Program';                                                                                               // 12843
AST.ExpressionStatement = 'ExpressionStatement';                                                                       // 12844
AST.AssignmentExpression = 'AssignmentExpression';                                                                     // 12845
AST.ConditionalExpression = 'ConditionalExpression';                                                                   // 12846
AST.LogicalExpression = 'LogicalExpression';                                                                           // 12847
AST.BinaryExpression = 'BinaryExpression';                                                                             // 12848
AST.UnaryExpression = 'UnaryExpression';                                                                               // 12849
AST.CallExpression = 'CallExpression';                                                                                 // 12850
AST.MemberExpression = 'MemberExpression';                                                                             // 12851
AST.Identifier = 'Identifier';                                                                                         // 12852
AST.Literal = 'Literal';                                                                                               // 12853
AST.ArrayExpression = 'ArrayExpression';                                                                               // 12854
AST.Property = 'Property';                                                                                             // 12855
AST.ObjectExpression = 'ObjectExpression';                                                                             // 12856
AST.ThisExpression = 'ThisExpression';                                                                                 // 12857
                                                                                                                       // 12858
// Internal use only                                                                                                   // 12859
AST.NGValueParameter = 'NGValueParameter';                                                                             // 12860
                                                                                                                       // 12861
AST.prototype = {                                                                                                      // 12862
  ast: function(text) {                                                                                                // 12863
    this.text = text;                                                                                                  // 12864
    this.tokens = this.lexer.lex(text);                                                                                // 12865
                                                                                                                       // 12866
    var value = this.program();                                                                                        // 12867
                                                                                                                       // 12868
    if (this.tokens.length !== 0) {                                                                                    // 12869
      this.throwError('is an unexpected token', this.tokens[0]);                                                       // 12870
    }                                                                                                                  // 12871
                                                                                                                       // 12872
    return value;                                                                                                      // 12873
  },                                                                                                                   // 12874
                                                                                                                       // 12875
  program: function() {                                                                                                // 12876
    var body = [];                                                                                                     // 12877
    while (true) {                                                                                                     // 12878
      if (this.tokens.length > 0 && !this.peek('}', ')', ';', ']'))                                                    // 12879
        body.push(this.expressionStatement());                                                                         // 12880
      if (!this.expect(';')) {                                                                                         // 12881
        return { type: AST.Program, body: body};                                                                       // 12882
      }                                                                                                                // 12883
    }                                                                                                                  // 12884
  },                                                                                                                   // 12885
                                                                                                                       // 12886
  expressionStatement: function() {                                                                                    // 12887
    return { type: AST.ExpressionStatement, expression: this.filterChain() };                                          // 12888
  },                                                                                                                   // 12889
                                                                                                                       // 12890
  filterChain: function() {                                                                                            // 12891
    var left = this.expression();                                                                                      // 12892
    var token;                                                                                                         // 12893
    while ((token = this.expect('|'))) {                                                                               // 12894
      left = this.filter(left);                                                                                        // 12895
    }                                                                                                                  // 12896
    return left;                                                                                                       // 12897
  },                                                                                                                   // 12898
                                                                                                                       // 12899
  expression: function() {                                                                                             // 12900
    return this.assignment();                                                                                          // 12901
  },                                                                                                                   // 12902
                                                                                                                       // 12903
  assignment: function() {                                                                                             // 12904
    var result = this.ternary();                                                                                       // 12905
    if (this.expect('=')) {                                                                                            // 12906
      result = { type: AST.AssignmentExpression, left: result, right: this.assignment(), operator: '='};               // 12907
    }                                                                                                                  // 12908
    return result;                                                                                                     // 12909
  },                                                                                                                   // 12910
                                                                                                                       // 12911
  ternary: function() {                                                                                                // 12912
    var test = this.logicalOR();                                                                                       // 12913
    var alternate;                                                                                                     // 12914
    var consequent;                                                                                                    // 12915
    if (this.expect('?')) {                                                                                            // 12916
      alternate = this.expression();                                                                                   // 12917
      if (this.consume(':')) {                                                                                         // 12918
        consequent = this.expression();                                                                                // 12919
        return { type: AST.ConditionalExpression, test: test, alternate: alternate, consequent: consequent};           // 12920
      }                                                                                                                // 12921
    }                                                                                                                  // 12922
    return test;                                                                                                       // 12923
  },                                                                                                                   // 12924
                                                                                                                       // 12925
  logicalOR: function() {                                                                                              // 12926
    var left = this.logicalAND();                                                                                      // 12927
    while (this.expect('||')) {                                                                                        // 12928
      left = { type: AST.LogicalExpression, operator: '||', left: left, right: this.logicalAND() };                    // 12929
    }                                                                                                                  // 12930
    return left;                                                                                                       // 12931
  },                                                                                                                   // 12932
                                                                                                                       // 12933
  logicalAND: function() {                                                                                             // 12934
    var left = this.equality();                                                                                        // 12935
    while (this.expect('&&')) {                                                                                        // 12936
      left = { type: AST.LogicalExpression, operator: '&&', left: left, right: this.equality()};                       // 12937
    }                                                                                                                  // 12938
    return left;                                                                                                       // 12939
  },                                                                                                                   // 12940
                                                                                                                       // 12941
  equality: function() {                                                                                               // 12942
    var left = this.relational();                                                                                      // 12943
    var token;                                                                                                         // 12944
    while ((token = this.expect('==','!=','===','!=='))) {                                                             // 12945
      left = { type: AST.BinaryExpression, operator: token.text, left: left, right: this.relational() };               // 12946
    }                                                                                                                  // 12947
    return left;                                                                                                       // 12948
  },                                                                                                                   // 12949
                                                                                                                       // 12950
  relational: function() {                                                                                             // 12951
    var left = this.additive();                                                                                        // 12952
    var token;                                                                                                         // 12953
    while ((token = this.expect('<', '>', '<=', '>='))) {                                                              // 12954
      left = { type: AST.BinaryExpression, operator: token.text, left: left, right: this.additive() };                 // 12955
    }                                                                                                                  // 12956
    return left;                                                                                                       // 12957
  },                                                                                                                   // 12958
                                                                                                                       // 12959
  additive: function() {                                                                                               // 12960
    var left = this.multiplicative();                                                                                  // 12961
    var token;                                                                                                         // 12962
    while ((token = this.expect('+','-'))) {                                                                           // 12963
      left = { type: AST.BinaryExpression, operator: token.text, left: left, right: this.multiplicative() };           // 12964
    }                                                                                                                  // 12965
    return left;                                                                                                       // 12966
  },                                                                                                                   // 12967
                                                                                                                       // 12968
  multiplicative: function() {                                                                                         // 12969
    var left = this.unary();                                                                                           // 12970
    var token;                                                                                                         // 12971
    while ((token = this.expect('*','/','%'))) {                                                                       // 12972
      left = { type: AST.BinaryExpression, operator: token.text, left: left, right: this.unary() };                    // 12973
    }                                                                                                                  // 12974
    return left;                                                                                                       // 12975
  },                                                                                                                   // 12976
                                                                                                                       // 12977
  unary: function() {                                                                                                  // 12978
    var token;                                                                                                         // 12979
    if ((token = this.expect('+', '-', '!'))) {                                                                        // 12980
      return { type: AST.UnaryExpression, operator: token.text, prefix: true, argument: this.unary() };                // 12981
    } else {                                                                                                           // 12982
      return this.primary();                                                                                           // 12983
    }                                                                                                                  // 12984
  },                                                                                                                   // 12985
                                                                                                                       // 12986
  primary: function() {                                                                                                // 12987
    var primary;                                                                                                       // 12988
    if (this.expect('(')) {                                                                                            // 12989
      primary = this.filterChain();                                                                                    // 12990
      this.consume(')');                                                                                               // 12991
    } else if (this.expect('[')) {                                                                                     // 12992
      primary = this.arrayDeclaration();                                                                               // 12993
    } else if (this.expect('{')) {                                                                                     // 12994
      primary = this.object();                                                                                         // 12995
    } else if (this.constants.hasOwnProperty(this.peek().text)) {                                                      // 12996
      primary = copy(this.constants[this.consume().text]);                                                             // 12997
    } else if (this.peek().identifier) {                                                                               // 12998
      primary = this.identifier();                                                                                     // 12999
    } else if (this.peek().constant) {                                                                                 // 13000
      primary = this.constant();                                                                                       // 13001
    } else {                                                                                                           // 13002
      this.throwError('not a primary expression', this.peek());                                                        // 13003
    }                                                                                                                  // 13004
                                                                                                                       // 13005
    var next;                                                                                                          // 13006
    while ((next = this.expect('(', '[', '.'))) {                                                                      // 13007
      if (next.text === '(') {                                                                                         // 13008
        primary = {type: AST.CallExpression, callee: primary, arguments: this.parseArguments() };                      // 13009
        this.consume(')');                                                                                             // 13010
      } else if (next.text === '[') {                                                                                  // 13011
        primary = { type: AST.MemberExpression, object: primary, property: this.expression(), computed: true };        // 13012
        this.consume(']');                                                                                             // 13013
      } else if (next.text === '.') {                                                                                  // 13014
        primary = { type: AST.MemberExpression, object: primary, property: this.identifier(), computed: false };       // 13015
      } else {                                                                                                         // 13016
        this.throwError('IMPOSSIBLE');                                                                                 // 13017
      }                                                                                                                // 13018
    }                                                                                                                  // 13019
    return primary;                                                                                                    // 13020
  },                                                                                                                   // 13021
                                                                                                                       // 13022
  filter: function(baseExpression) {                                                                                   // 13023
    var args = [baseExpression];                                                                                       // 13024
    var result = {type: AST.CallExpression, callee: this.identifier(), arguments: args, filter: true};                 // 13025
                                                                                                                       // 13026
    while (this.expect(':')) {                                                                                         // 13027
      args.push(this.expression());                                                                                    // 13028
    }                                                                                                                  // 13029
                                                                                                                       // 13030
    return result;                                                                                                     // 13031
  },                                                                                                                   // 13032
                                                                                                                       // 13033
  parseArguments: function() {                                                                                         // 13034
    var args = [];                                                                                                     // 13035
    if (this.peekToken().text !== ')') {                                                                               // 13036
      do {                                                                                                             // 13037
        args.push(this.expression());                                                                                  // 13038
      } while (this.expect(','));                                                                                      // 13039
    }                                                                                                                  // 13040
    return args;                                                                                                       // 13041
  },                                                                                                                   // 13042
                                                                                                                       // 13043
  identifier: function() {                                                                                             // 13044
    var token = this.consume();                                                                                        // 13045
    if (!token.identifier) {                                                                                           // 13046
      this.throwError('is not a valid identifier', token);                                                             // 13047
    }                                                                                                                  // 13048
    return { type: AST.Identifier, name: token.text };                                                                 // 13049
  },                                                                                                                   // 13050
                                                                                                                       // 13051
  constant: function() {                                                                                               // 13052
    // TODO check that it is a constant                                                                                // 13053
    return { type: AST.Literal, value: this.consume().value };                                                         // 13054
  },                                                                                                                   // 13055
                                                                                                                       // 13056
  arrayDeclaration: function() {                                                                                       // 13057
    var elements = [];                                                                                                 // 13058
    if (this.peekToken().text !== ']') {                                                                               // 13059
      do {                                                                                                             // 13060
        if (this.peek(']')) {                                                                                          // 13061
          // Support trailing commas per ES5.1.                                                                        // 13062
          break;                                                                                                       // 13063
        }                                                                                                              // 13064
        elements.push(this.expression());                                                                              // 13065
      } while (this.expect(','));                                                                                      // 13066
    }                                                                                                                  // 13067
    this.consume(']');                                                                                                 // 13068
                                                                                                                       // 13069
    return { type: AST.ArrayExpression, elements: elements };                                                          // 13070
  },                                                                                                                   // 13071
                                                                                                                       // 13072
  object: function() {                                                                                                 // 13073
    var properties = [], property;                                                                                     // 13074
    if (this.peekToken().text !== '}') {                                                                               // 13075
      do {                                                                                                             // 13076
        if (this.peek('}')) {                                                                                          // 13077
          // Support trailing commas per ES5.1.                                                                        // 13078
          break;                                                                                                       // 13079
        }                                                                                                              // 13080
        property = {type: AST.Property, kind: 'init'};                                                                 // 13081
        if (this.peek().constant) {                                                                                    // 13082
          property.key = this.constant();                                                                              // 13083
        } else if (this.peek().identifier) {                                                                           // 13084
          property.key = this.identifier();                                                                            // 13085
        } else {                                                                                                       // 13086
          this.throwError("invalid key", this.peek());                                                                 // 13087
        }                                                                                                              // 13088
        this.consume(':');                                                                                             // 13089
        property.value = this.expression();                                                                            // 13090
        properties.push(property);                                                                                     // 13091
      } while (this.expect(','));                                                                                      // 13092
    }                                                                                                                  // 13093
    this.consume('}');                                                                                                 // 13094
                                                                                                                       // 13095
    return {type: AST.ObjectExpression, properties: properties };                                                      // 13096
  },                                                                                                                   // 13097
                                                                                                                       // 13098
  throwError: function(msg, token) {                                                                                   // 13099
    throw $parseMinErr('syntax',                                                                                       // 13100
        'Syntax Error: Token \'{0}\' {1} at column {2} of the expression [{3}] starting at [{4}].',                    // 13101
          token.text, msg, (token.index + 1), this.text, this.text.substring(token.index));                            // 13102
  },                                                                                                                   // 13103
                                                                                                                       // 13104
  consume: function(e1) {                                                                                              // 13105
    if (this.tokens.length === 0) {                                                                                    // 13106
      throw $parseMinErr('ueoe', 'Unexpected end of expression: {0}', this.text);                                      // 13107
    }                                                                                                                  // 13108
                                                                                                                       // 13109
    var token = this.expect(e1);                                                                                       // 13110
    if (!token) {                                                                                                      // 13111
      this.throwError('is unexpected, expecting [' + e1 + ']', this.peek());                                           // 13112
    }                                                                                                                  // 13113
    return token;                                                                                                      // 13114
  },                                                                                                                   // 13115
                                                                                                                       // 13116
  peekToken: function() {                                                                                              // 13117
    if (this.tokens.length === 0) {                                                                                    // 13118
      throw $parseMinErr('ueoe', 'Unexpected end of expression: {0}', this.text);                                      // 13119
    }                                                                                                                  // 13120
    return this.tokens[0];                                                                                             // 13121
  },                                                                                                                   // 13122
                                                                                                                       // 13123
  peek: function(e1, e2, e3, e4) {                                                                                     // 13124
    return this.peekAhead(0, e1, e2, e3, e4);                                                                          // 13125
  },                                                                                                                   // 13126
                                                                                                                       // 13127
  peekAhead: function(i, e1, e2, e3, e4) {                                                                             // 13128
    if (this.tokens.length > i) {                                                                                      // 13129
      var token = this.tokens[i];                                                                                      // 13130
      var t = token.text;                                                                                              // 13131
      if (t === e1 || t === e2 || t === e3 || t === e4 ||                                                              // 13132
          (!e1 && !e2 && !e3 && !e4)) {                                                                                // 13133
        return token;                                                                                                  // 13134
      }                                                                                                                // 13135
    }                                                                                                                  // 13136
    return false;                                                                                                      // 13137
  },                                                                                                                   // 13138
                                                                                                                       // 13139
  expect: function(e1, e2, e3, e4) {                                                                                   // 13140
    var token = this.peek(e1, e2, e3, e4);                                                                             // 13141
    if (token) {                                                                                                       // 13142
      this.tokens.shift();                                                                                             // 13143
      return token;                                                                                                    // 13144
    }                                                                                                                  // 13145
    return false;                                                                                                      // 13146
  },                                                                                                                   // 13147
                                                                                                                       // 13148
                                                                                                                       // 13149
  /* `undefined` is not a constant, it is an identifier,                                                               // 13150
   * but using it as an identifier is not supported                                                                    // 13151
   */                                                                                                                  // 13152
  constants: {                                                                                                         // 13153
    'true': { type: AST.Literal, value: true },                                                                        // 13154
    'false': { type: AST.Literal, value: false },                                                                      // 13155
    'null': { type: AST.Literal, value: null },                                                                        // 13156
    'undefined': {type: AST.Literal, value: undefined },                                                               // 13157
    'this': {type: AST.ThisExpression }                                                                                // 13158
  }                                                                                                                    // 13159
};                                                                                                                     // 13160
                                                                                                                       // 13161
function ifDefined(v, d) {                                                                                             // 13162
  return typeof v !== 'undefined' ? v : d;                                                                             // 13163
}                                                                                                                      // 13164
                                                                                                                       // 13165
function plusFn(l, r) {                                                                                                // 13166
  if (typeof l === 'undefined') return r;                                                                              // 13167
  if (typeof r === 'undefined') return l;                                                                              // 13168
  return l + r;                                                                                                        // 13169
}                                                                                                                      // 13170
                                                                                                                       // 13171
function isStateless($filter, filterName) {                                                                            // 13172
  var fn = $filter(filterName);                                                                                        // 13173
  return !fn.$stateful;                                                                                                // 13174
}                                                                                                                      // 13175
                                                                                                                       // 13176
function findConstantAndWatchExpressions(ast, $filter) {                                                               // 13177
  var allConstants;                                                                                                    // 13178
  var argsToWatch;                                                                                                     // 13179
  switch (ast.type) {                                                                                                  // 13180
  case AST.Program:                                                                                                    // 13181
    allConstants = true;                                                                                               // 13182
    forEach(ast.body, function(expr) {                                                                                 // 13183
      findConstantAndWatchExpressions(expr.expression, $filter);                                                       // 13184
      allConstants = allConstants && expr.expression.constant;                                                         // 13185
    });                                                                                                                // 13186
    ast.constant = allConstants;                                                                                       // 13187
    break;                                                                                                             // 13188
  case AST.Literal:                                                                                                    // 13189
    ast.constant = true;                                                                                               // 13190
    ast.toWatch = [];                                                                                                  // 13191
    break;                                                                                                             // 13192
  case AST.UnaryExpression:                                                                                            // 13193
    findConstantAndWatchExpressions(ast.argument, $filter);                                                            // 13194
    ast.constant = ast.argument.constant;                                                                              // 13195
    ast.toWatch = ast.argument.toWatch;                                                                                // 13196
    break;                                                                                                             // 13197
  case AST.BinaryExpression:                                                                                           // 13198
    findConstantAndWatchExpressions(ast.left, $filter);                                                                // 13199
    findConstantAndWatchExpressions(ast.right, $filter);                                                               // 13200
    ast.constant = ast.left.constant && ast.right.constant;                                                            // 13201
    ast.toWatch = ast.left.toWatch.concat(ast.right.toWatch);                                                          // 13202
    break;                                                                                                             // 13203
  case AST.LogicalExpression:                                                                                          // 13204
    findConstantAndWatchExpressions(ast.left, $filter);                                                                // 13205
    findConstantAndWatchExpressions(ast.right, $filter);                                                               // 13206
    ast.constant = ast.left.constant && ast.right.constant;                                                            // 13207
    ast.toWatch = ast.constant ? [] : [ast];                                                                           // 13208
    break;                                                                                                             // 13209
  case AST.ConditionalExpression:                                                                                      // 13210
    findConstantAndWatchExpressions(ast.test, $filter);                                                                // 13211
    findConstantAndWatchExpressions(ast.alternate, $filter);                                                           // 13212
    findConstantAndWatchExpressions(ast.consequent, $filter);                                                          // 13213
    ast.constant = ast.test.constant && ast.alternate.constant && ast.consequent.constant;                             // 13214
    ast.toWatch = ast.constant ? [] : [ast];                                                                           // 13215
    break;                                                                                                             // 13216
  case AST.Identifier:                                                                                                 // 13217
    ast.constant = false;                                                                                              // 13218
    ast.toWatch = [ast];                                                                                               // 13219
    break;                                                                                                             // 13220
  case AST.MemberExpression:                                                                                           // 13221
    findConstantAndWatchExpressions(ast.object, $filter);                                                              // 13222
    if (ast.computed) {                                                                                                // 13223
      findConstantAndWatchExpressions(ast.property, $filter);                                                          // 13224
    }                                                                                                                  // 13225
    ast.constant = ast.object.constant && (!ast.computed || ast.property.constant);                                    // 13226
    ast.toWatch = [ast];                                                                                               // 13227
    break;                                                                                                             // 13228
  case AST.CallExpression:                                                                                             // 13229
    allConstants = ast.filter ? isStateless($filter, ast.callee.name) : false;                                         // 13230
    argsToWatch = [];                                                                                                  // 13231
    forEach(ast.arguments, function(expr) {                                                                            // 13232
      findConstantAndWatchExpressions(expr, $filter);                                                                  // 13233
      allConstants = allConstants && expr.constant;                                                                    // 13234
      if (!expr.constant) {                                                                                            // 13235
        argsToWatch.push.apply(argsToWatch, expr.toWatch);                                                             // 13236
      }                                                                                                                // 13237
    });                                                                                                                // 13238
    ast.constant = allConstants;                                                                                       // 13239
    ast.toWatch = ast.filter && isStateless($filter, ast.callee.name) ? argsToWatch : [ast];                           // 13240
    break;                                                                                                             // 13241
  case AST.AssignmentExpression:                                                                                       // 13242
    findConstantAndWatchExpressions(ast.left, $filter);                                                                // 13243
    findConstantAndWatchExpressions(ast.right, $filter);                                                               // 13244
    ast.constant = ast.left.constant && ast.right.constant;                                                            // 13245
    ast.toWatch = [ast];                                                                                               // 13246
    break;                                                                                                             // 13247
  case AST.ArrayExpression:                                                                                            // 13248
    allConstants = true;                                                                                               // 13249
    argsToWatch = [];                                                                                                  // 13250
    forEach(ast.elements, function(expr) {                                                                             // 13251
      findConstantAndWatchExpressions(expr, $filter);                                                                  // 13252
      allConstants = allConstants && expr.constant;                                                                    // 13253
      if (!expr.constant) {                                                                                            // 13254
        argsToWatch.push.apply(argsToWatch, expr.toWatch);                                                             // 13255
      }                                                                                                                // 13256
    });                                                                                                                // 13257
    ast.constant = allConstants;                                                                                       // 13258
    ast.toWatch = argsToWatch;                                                                                         // 13259
    break;                                                                                                             // 13260
  case AST.ObjectExpression:                                                                                           // 13261
    allConstants = true;                                                                                               // 13262
    argsToWatch = [];                                                                                                  // 13263
    forEach(ast.properties, function(property) {                                                                       // 13264
      findConstantAndWatchExpressions(property.value, $filter);                                                        // 13265
      allConstants = allConstants && property.value.constant;                                                          // 13266
      if (!property.value.constant) {                                                                                  // 13267
        argsToWatch.push.apply(argsToWatch, property.value.toWatch);                                                   // 13268
      }                                                                                                                // 13269
    });                                                                                                                // 13270
    ast.constant = allConstants;                                                                                       // 13271
    ast.toWatch = argsToWatch;                                                                                         // 13272
    break;                                                                                                             // 13273
  case AST.ThisExpression:                                                                                             // 13274
    ast.constant = false;                                                                                              // 13275
    ast.toWatch = [];                                                                                                  // 13276
    break;                                                                                                             // 13277
  }                                                                                                                    // 13278
}                                                                                                                      // 13279
                                                                                                                       // 13280
function getInputs(body) {                                                                                             // 13281
  if (body.length != 1) return;                                                                                        // 13282
  var lastExpression = body[0].expression;                                                                             // 13283
  var candidate = lastExpression.toWatch;                                                                              // 13284
  if (candidate.length !== 1) return candidate;                                                                        // 13285
  return candidate[0] !== lastExpression ? candidate : undefined;                                                      // 13286
}                                                                                                                      // 13287
                                                                                                                       // 13288
function isAssignable(ast) {                                                                                           // 13289
  return ast.type === AST.Identifier || ast.type === AST.MemberExpression;                                             // 13290
}                                                                                                                      // 13291
                                                                                                                       // 13292
function assignableAST(ast) {                                                                                          // 13293
  if (ast.body.length === 1 && isAssignable(ast.body[0].expression)) {                                                 // 13294
    return {type: AST.AssignmentExpression, left: ast.body[0].expression, right: {type: AST.NGValueParameter}, operator: '='};
  }                                                                                                                    // 13296
}                                                                                                                      // 13297
                                                                                                                       // 13298
function isLiteral(ast) {                                                                                              // 13299
  return ast.body.length === 0 ||                                                                                      // 13300
      ast.body.length === 1 && (                                                                                       // 13301
      ast.body[0].expression.type === AST.Literal ||                                                                   // 13302
      ast.body[0].expression.type === AST.ArrayExpression ||                                                           // 13303
      ast.body[0].expression.type === AST.ObjectExpression);                                                           // 13304
}                                                                                                                      // 13305
                                                                                                                       // 13306
function isConstant(ast) {                                                                                             // 13307
  return ast.constant;                                                                                                 // 13308
}                                                                                                                      // 13309
                                                                                                                       // 13310
function ASTCompiler(astBuilder, $filter) {                                                                            // 13311
  this.astBuilder = astBuilder;                                                                                        // 13312
  this.$filter = $filter;                                                                                              // 13313
}                                                                                                                      // 13314
                                                                                                                       // 13315
ASTCompiler.prototype = {                                                                                              // 13316
  compile: function(expression, expensiveChecks) {                                                                     // 13317
    var self = this;                                                                                                   // 13318
    var ast = this.astBuilder.ast(expression);                                                                         // 13319
    this.state = {                                                                                                     // 13320
      nextId: 0,                                                                                                       // 13321
      filters: {},                                                                                                     // 13322
      expensiveChecks: expensiveChecks,                                                                                // 13323
      fn: {vars: [], body: [], own: {}},                                                                               // 13324
      assign: {vars: [], body: [], own: {}},                                                                           // 13325
      inputs: []                                                                                                       // 13326
    };                                                                                                                 // 13327
    findConstantAndWatchExpressions(ast, self.$filter);                                                                // 13328
    var extra = '';                                                                                                    // 13329
    var assignable;                                                                                                    // 13330
    this.stage = 'assign';                                                                                             // 13331
    if ((assignable = assignableAST(ast))) {                                                                           // 13332
      this.state.computing = 'assign';                                                                                 // 13333
      var result = this.nextId();                                                                                      // 13334
      this.recurse(assignable, result);                                                                                // 13335
      this.return_(result);                                                                                            // 13336
      extra = 'fn.assign=' + this.generateFunction('assign', 's,v,l');                                                 // 13337
    }                                                                                                                  // 13338
    var toWatch = getInputs(ast.body);                                                                                 // 13339
    self.stage = 'inputs';                                                                                             // 13340
    forEach(toWatch, function(watch, key) {                                                                            // 13341
      var fnKey = 'fn' + key;                                                                                          // 13342
      self.state[fnKey] = {vars: [], body: [], own: {}};                                                               // 13343
      self.state.computing = fnKey;                                                                                    // 13344
      var intoId = self.nextId();                                                                                      // 13345
      self.recurse(watch, intoId);                                                                                     // 13346
      self.return_(intoId);                                                                                            // 13347
      self.state.inputs.push(fnKey);                                                                                   // 13348
      watch.watchId = key;                                                                                             // 13349
    });                                                                                                                // 13350
    this.state.computing = 'fn';                                                                                       // 13351
    this.stage = 'main';                                                                                               // 13352
    this.recurse(ast);                                                                                                 // 13353
    var fnString =                                                                                                     // 13354
      // The build and minification steps remove the string "use strict" from the code, but this is done using a regex.
      // This is a workaround for this until we do a better job at only removing the prefix only when we should.       // 13356
      '"' + this.USE + ' ' + this.STRICT + '";\n' +                                                                    // 13357
      this.filterPrefix() +                                                                                            // 13358
      'var fn=' + this.generateFunction('fn', 's,l,a,i') +                                                             // 13359
      extra +                                                                                                          // 13360
      this.watchFns() +                                                                                                // 13361
      'return fn;';                                                                                                    // 13362
                                                                                                                       // 13363
    /* jshint -W054 */                                                                                                 // 13364
    var fn = (new Function('$filter',                                                                                  // 13365
        'ensureSafeMemberName',                                                                                        // 13366
        'ensureSafeObject',                                                                                            // 13367
        'ensureSafeFunction',                                                                                          // 13368
        'getStringValue',                                                                                              // 13369
        'ensureSafeAssignContext',                                                                                     // 13370
        'ifDefined',                                                                                                   // 13371
        'plus',                                                                                                        // 13372
        'text',                                                                                                        // 13373
        fnString))(                                                                                                    // 13374
          this.$filter,                                                                                                // 13375
          ensureSafeMemberName,                                                                                        // 13376
          ensureSafeObject,                                                                                            // 13377
          ensureSafeFunction,                                                                                          // 13378
          getStringValue,                                                                                              // 13379
          ensureSafeAssignContext,                                                                                     // 13380
          ifDefined,                                                                                                   // 13381
          plusFn,                                                                                                      // 13382
          expression);                                                                                                 // 13383
    /* jshint +W054 */                                                                                                 // 13384
    this.state = this.stage = undefined;                                                                               // 13385
    fn.literal = isLiteral(ast);                                                                                       // 13386
    fn.constant = isConstant(ast);                                                                                     // 13387
    return fn;                                                                                                         // 13388
  },                                                                                                                   // 13389
                                                                                                                       // 13390
  USE: 'use',                                                                                                          // 13391
                                                                                                                       // 13392
  STRICT: 'strict',                                                                                                    // 13393
                                                                                                                       // 13394
  watchFns: function() {                                                                                               // 13395
    var result = [];                                                                                                   // 13396
    var fns = this.state.inputs;                                                                                       // 13397
    var self = this;                                                                                                   // 13398
    forEach(fns, function(name) {                                                                                      // 13399
      result.push('var ' + name + '=' + self.generateFunction(name, 's'));                                             // 13400
    });                                                                                                                // 13401
    if (fns.length) {                                                                                                  // 13402
      result.push('fn.inputs=[' + fns.join(',') + '];');                                                               // 13403
    }                                                                                                                  // 13404
    return result.join('');                                                                                            // 13405
  },                                                                                                                   // 13406
                                                                                                                       // 13407
  generateFunction: function(name, params) {                                                                           // 13408
    return 'function(' + params + '){' +                                                                               // 13409
        this.varsPrefix(name) +                                                                                        // 13410
        this.body(name) +                                                                                              // 13411
        '};';                                                                                                          // 13412
  },                                                                                                                   // 13413
                                                                                                                       // 13414
  filterPrefix: function() {                                                                                           // 13415
    var parts = [];                                                                                                    // 13416
    var self = this;                                                                                                   // 13417
    forEach(this.state.filters, function(id, filter) {                                                                 // 13418
      parts.push(id + '=$filter(' + self.escape(filter) + ')');                                                        // 13419
    });                                                                                                                // 13420
    if (parts.length) return 'var ' + parts.join(',') + ';';                                                           // 13421
    return '';                                                                                                         // 13422
  },                                                                                                                   // 13423
                                                                                                                       // 13424
  varsPrefix: function(section) {                                                                                      // 13425
    return this.state[section].vars.length ? 'var ' + this.state[section].vars.join(',') + ';' : '';                   // 13426
  },                                                                                                                   // 13427
                                                                                                                       // 13428
  body: function(section) {                                                                                            // 13429
    return this.state[section].body.join('');                                                                          // 13430
  },                                                                                                                   // 13431
                                                                                                                       // 13432
  recurse: function(ast, intoId, nameId, recursionFn, create, skipWatchIdCheck) {                                      // 13433
    var left, right, self = this, args, expression;                                                                    // 13434
    recursionFn = recursionFn || noop;                                                                                 // 13435
    if (!skipWatchIdCheck && isDefined(ast.watchId)) {                                                                 // 13436
      intoId = intoId || this.nextId();                                                                                // 13437
      this.if_('i',                                                                                                    // 13438
        this.lazyAssign(intoId, this.computedMember('i', ast.watchId)),                                                // 13439
        this.lazyRecurse(ast, intoId, nameId, recursionFn, create, true)                                               // 13440
      );                                                                                                               // 13441
      return;                                                                                                          // 13442
    }                                                                                                                  // 13443
    switch (ast.type) {                                                                                                // 13444
    case AST.Program:                                                                                                  // 13445
      forEach(ast.body, function(expression, pos) {                                                                    // 13446
        self.recurse(expression.expression, undefined, undefined, function(expr) { right = expr; });                   // 13447
        if (pos !== ast.body.length - 1) {                                                                             // 13448
          self.current().body.push(right, ';');                                                                        // 13449
        } else {                                                                                                       // 13450
          self.return_(right);                                                                                         // 13451
        }                                                                                                              // 13452
      });                                                                                                              // 13453
      break;                                                                                                           // 13454
    case AST.Literal:                                                                                                  // 13455
      expression = this.escape(ast.value);                                                                             // 13456
      this.assign(intoId, expression);                                                                                 // 13457
      recursionFn(expression);                                                                                         // 13458
      break;                                                                                                           // 13459
    case AST.UnaryExpression:                                                                                          // 13460
      this.recurse(ast.argument, undefined, undefined, function(expr) { right = expr; });                              // 13461
      expression = ast.operator + '(' + this.ifDefined(right, 0) + ')';                                                // 13462
      this.assign(intoId, expression);                                                                                 // 13463
      recursionFn(expression);                                                                                         // 13464
      break;                                                                                                           // 13465
    case AST.BinaryExpression:                                                                                         // 13466
      this.recurse(ast.left, undefined, undefined, function(expr) { left = expr; });                                   // 13467
      this.recurse(ast.right, undefined, undefined, function(expr) { right = expr; });                                 // 13468
      if (ast.operator === '+') {                                                                                      // 13469
        expression = this.plus(left, right);                                                                           // 13470
      } else if (ast.operator === '-') {                                                                               // 13471
        expression = this.ifDefined(left, 0) + ast.operator + this.ifDefined(right, 0);                                // 13472
      } else {                                                                                                         // 13473
        expression = '(' + left + ')' + ast.operator + '(' + right + ')';                                              // 13474
      }                                                                                                                // 13475
      this.assign(intoId, expression);                                                                                 // 13476
      recursionFn(expression);                                                                                         // 13477
      break;                                                                                                           // 13478
    case AST.LogicalExpression:                                                                                        // 13479
      intoId = intoId || this.nextId();                                                                                // 13480
      self.recurse(ast.left, intoId);                                                                                  // 13481
      self.if_(ast.operator === '&&' ? intoId : self.not(intoId), self.lazyRecurse(ast.right, intoId));                // 13482
      recursionFn(intoId);                                                                                             // 13483
      break;                                                                                                           // 13484
    case AST.ConditionalExpression:                                                                                    // 13485
      intoId = intoId || this.nextId();                                                                                // 13486
      self.recurse(ast.test, intoId);                                                                                  // 13487
      self.if_(intoId, self.lazyRecurse(ast.alternate, intoId), self.lazyRecurse(ast.consequent, intoId));             // 13488
      recursionFn(intoId);                                                                                             // 13489
      break;                                                                                                           // 13490
    case AST.Identifier:                                                                                               // 13491
      intoId = intoId || this.nextId();                                                                                // 13492
      if (nameId) {                                                                                                    // 13493
        nameId.context = self.stage === 'inputs' ? 's' : this.assign(this.nextId(), this.getHasOwnProperty('l', ast.name) + '?l:s');
        nameId.computed = false;                                                                                       // 13495
        nameId.name = ast.name;                                                                                        // 13496
      }                                                                                                                // 13497
      ensureSafeMemberName(ast.name);                                                                                  // 13498
      self.if_(self.stage === 'inputs' || self.not(self.getHasOwnProperty('l', ast.name)),                             // 13499
        function() {                                                                                                   // 13500
          self.if_(self.stage === 'inputs' || 's', function() {                                                        // 13501
            if (create && create !== 1) {                                                                              // 13502
              self.if_(                                                                                                // 13503
                self.not(self.nonComputedMember('s', ast.name)),                                                       // 13504
                self.lazyAssign(self.nonComputedMember('s', ast.name), '{}'));                                         // 13505
            }                                                                                                          // 13506
            self.assign(intoId, self.nonComputedMember('s', ast.name));                                                // 13507
          });                                                                                                          // 13508
        }, intoId && self.lazyAssign(intoId, self.nonComputedMember('l', ast.name))                                    // 13509
        );                                                                                                             // 13510
      if (self.state.expensiveChecks || isPossiblyDangerousMemberName(ast.name)) {                                     // 13511
        self.addEnsureSafeObject(intoId);                                                                              // 13512
      }                                                                                                                // 13513
      recursionFn(intoId);                                                                                             // 13514
      break;                                                                                                           // 13515
    case AST.MemberExpression:                                                                                         // 13516
      left = nameId && (nameId.context = this.nextId()) || this.nextId();                                              // 13517
      intoId = intoId || this.nextId();                                                                                // 13518
      self.recurse(ast.object, left, undefined, function() {                                                           // 13519
        self.if_(self.notNull(left), function() {                                                                      // 13520
          if (ast.computed) {                                                                                          // 13521
            right = self.nextId();                                                                                     // 13522
            self.recurse(ast.property, right);                                                                         // 13523
            self.getStringValue(right);                                                                                // 13524
            self.addEnsureSafeMemberName(right);                                                                       // 13525
            if (create && create !== 1) {                                                                              // 13526
              self.if_(self.not(self.computedMember(left, right)), self.lazyAssign(self.computedMember(left, right), '{}'));
            }                                                                                                          // 13528
            expression = self.ensureSafeObject(self.computedMember(left, right));                                      // 13529
            self.assign(intoId, expression);                                                                           // 13530
            if (nameId) {                                                                                              // 13531
              nameId.computed = true;                                                                                  // 13532
              nameId.name = right;                                                                                     // 13533
            }                                                                                                          // 13534
          } else {                                                                                                     // 13535
            ensureSafeMemberName(ast.property.name);                                                                   // 13536
            if (create && create !== 1) {                                                                              // 13537
              self.if_(self.not(self.nonComputedMember(left, ast.property.name)), self.lazyAssign(self.nonComputedMember(left, ast.property.name), '{}'));
            }                                                                                                          // 13539
            expression = self.nonComputedMember(left, ast.property.name);                                              // 13540
            if (self.state.expensiveChecks || isPossiblyDangerousMemberName(ast.property.name)) {                      // 13541
              expression = self.ensureSafeObject(expression);                                                          // 13542
            }                                                                                                          // 13543
            self.assign(intoId, expression);                                                                           // 13544
            if (nameId) {                                                                                              // 13545
              nameId.computed = false;                                                                                 // 13546
              nameId.name = ast.property.name;                                                                         // 13547
            }                                                                                                          // 13548
          }                                                                                                            // 13549
        }, function() {                                                                                                // 13550
          self.assign(intoId, 'undefined');                                                                            // 13551
        });                                                                                                            // 13552
        recursionFn(intoId);                                                                                           // 13553
      }, !!create);                                                                                                    // 13554
      break;                                                                                                           // 13555
    case AST.CallExpression:                                                                                           // 13556
      intoId = intoId || this.nextId();                                                                                // 13557
      if (ast.filter) {                                                                                                // 13558
        right = self.filter(ast.callee.name);                                                                          // 13559
        args = [];                                                                                                     // 13560
        forEach(ast.arguments, function(expr) {                                                                        // 13561
          var argument = self.nextId();                                                                                // 13562
          self.recurse(expr, argument);                                                                                // 13563
          args.push(argument);                                                                                         // 13564
        });                                                                                                            // 13565
        expression = right + '(' + args.join(',') + ')';                                                               // 13566
        self.assign(intoId, expression);                                                                               // 13567
        recursionFn(intoId);                                                                                           // 13568
      } else {                                                                                                         // 13569
        right = self.nextId();                                                                                         // 13570
        left = {};                                                                                                     // 13571
        args = [];                                                                                                     // 13572
        self.recurse(ast.callee, right, left, function() {                                                             // 13573
          self.if_(self.notNull(right), function() {                                                                   // 13574
            self.addEnsureSafeFunction(right);                                                                         // 13575
            forEach(ast.arguments, function(expr) {                                                                    // 13576
              self.recurse(expr, self.nextId(), undefined, function(argument) {                                        // 13577
                args.push(self.ensureSafeObject(argument));                                                            // 13578
              });                                                                                                      // 13579
            });                                                                                                        // 13580
            if (left.name) {                                                                                           // 13581
              if (!self.state.expensiveChecks) {                                                                       // 13582
                self.addEnsureSafeObject(left.context);                                                                // 13583
              }                                                                                                        // 13584
              expression = self.member(left.context, left.name, left.computed) + '(' + args.join(',') + ')';           // 13585
            } else {                                                                                                   // 13586
              expression = right + '(' + args.join(',') + ')';                                                         // 13587
            }                                                                                                          // 13588
            expression = self.ensureSafeObject(expression);                                                            // 13589
            self.assign(intoId, expression);                                                                           // 13590
          }, function() {                                                                                              // 13591
            self.assign(intoId, 'undefined');                                                                          // 13592
          });                                                                                                          // 13593
          recursionFn(intoId);                                                                                         // 13594
        });                                                                                                            // 13595
      }                                                                                                                // 13596
      break;                                                                                                           // 13597
    case AST.AssignmentExpression:                                                                                     // 13598
      right = this.nextId();                                                                                           // 13599
      left = {};                                                                                                       // 13600
      if (!isAssignable(ast.left)) {                                                                                   // 13601
        throw $parseMinErr('lval', 'Trying to assing a value to a non l-value');                                       // 13602
      }                                                                                                                // 13603
      this.recurse(ast.left, undefined, left, function() {                                                             // 13604
        self.if_(self.notNull(left.context), function() {                                                              // 13605
          self.recurse(ast.right, right);                                                                              // 13606
          self.addEnsureSafeObject(self.member(left.context, left.name, left.computed));                               // 13607
          self.addEnsureSafeAssignContext(left.context);                                                               // 13608
          expression = self.member(left.context, left.name, left.computed) + ast.operator + right;                     // 13609
          self.assign(intoId, expression);                                                                             // 13610
          recursionFn(intoId || expression);                                                                           // 13611
        });                                                                                                            // 13612
      }, 1);                                                                                                           // 13613
      break;                                                                                                           // 13614
    case AST.ArrayExpression:                                                                                          // 13615
      args = [];                                                                                                       // 13616
      forEach(ast.elements, function(expr) {                                                                           // 13617
        self.recurse(expr, self.nextId(), undefined, function(argument) {                                              // 13618
          args.push(argument);                                                                                         // 13619
        });                                                                                                            // 13620
      });                                                                                                              // 13621
      expression = '[' + args.join(',') + ']';                                                                         // 13622
      this.assign(intoId, expression);                                                                                 // 13623
      recursionFn(expression);                                                                                         // 13624
      break;                                                                                                           // 13625
    case AST.ObjectExpression:                                                                                         // 13626
      args = [];                                                                                                       // 13627
      forEach(ast.properties, function(property) {                                                                     // 13628
        self.recurse(property.value, self.nextId(), undefined, function(expr) {                                        // 13629
          args.push(self.escape(                                                                                       // 13630
              property.key.type === AST.Identifier ? property.key.name :                                               // 13631
                ('' + property.key.value)) +                                                                           // 13632
              ':' + expr);                                                                                             // 13633
        });                                                                                                            // 13634
      });                                                                                                              // 13635
      expression = '{' + args.join(',') + '}';                                                                         // 13636
      this.assign(intoId, expression);                                                                                 // 13637
      recursionFn(expression);                                                                                         // 13638
      break;                                                                                                           // 13639
    case AST.ThisExpression:                                                                                           // 13640
      this.assign(intoId, 's');                                                                                        // 13641
      recursionFn('s');                                                                                                // 13642
      break;                                                                                                           // 13643
    case AST.NGValueParameter:                                                                                         // 13644
      this.assign(intoId, 'v');                                                                                        // 13645
      recursionFn('v');                                                                                                // 13646
      break;                                                                                                           // 13647
    }                                                                                                                  // 13648
  },                                                                                                                   // 13649
                                                                                                                       // 13650
  getHasOwnProperty: function(element, property) {                                                                     // 13651
    var key = element + '.' + property;                                                                                // 13652
    var own = this.current().own;                                                                                      // 13653
    if (!own.hasOwnProperty(key)) {                                                                                    // 13654
      own[key] = this.nextId(false, element + '&&(' + this.escape(property) + ' in ' + element + ')');                 // 13655
    }                                                                                                                  // 13656
    return own[key];                                                                                                   // 13657
  },                                                                                                                   // 13658
                                                                                                                       // 13659
  assign: function(id, value) {                                                                                        // 13660
    if (!id) return;                                                                                                   // 13661
    this.current().body.push(id, '=', value, ';');                                                                     // 13662
    return id;                                                                                                         // 13663
  },                                                                                                                   // 13664
                                                                                                                       // 13665
  filter: function(filterName) {                                                                                       // 13666
    if (!this.state.filters.hasOwnProperty(filterName)) {                                                              // 13667
      this.state.filters[filterName] = this.nextId(true);                                                              // 13668
    }                                                                                                                  // 13669
    return this.state.filters[filterName];                                                                             // 13670
  },                                                                                                                   // 13671
                                                                                                                       // 13672
  ifDefined: function(id, defaultValue) {                                                                              // 13673
    return 'ifDefined(' + id + ',' + this.escape(defaultValue) + ')';                                                  // 13674
  },                                                                                                                   // 13675
                                                                                                                       // 13676
  plus: function(left, right) {                                                                                        // 13677
    return 'plus(' + left + ',' + right + ')';                                                                         // 13678
  },                                                                                                                   // 13679
                                                                                                                       // 13680
  return_: function(id) {                                                                                              // 13681
    this.current().body.push('return ', id, ';');                                                                      // 13682
  },                                                                                                                   // 13683
                                                                                                                       // 13684
  if_: function(test, alternate, consequent) {                                                                         // 13685
    if (test === true) {                                                                                               // 13686
      alternate();                                                                                                     // 13687
    } else {                                                                                                           // 13688
      var body = this.current().body;                                                                                  // 13689
      body.push('if(', test, '){');                                                                                    // 13690
      alternate();                                                                                                     // 13691
      body.push('}');                                                                                                  // 13692
      if (consequent) {                                                                                                // 13693
        body.push('else{');                                                                                            // 13694
        consequent();                                                                                                  // 13695
        body.push('}');                                                                                                // 13696
      }                                                                                                                // 13697
    }                                                                                                                  // 13698
  },                                                                                                                   // 13699
                                                                                                                       // 13700
  not: function(expression) {                                                                                          // 13701
    return '!(' + expression + ')';                                                                                    // 13702
  },                                                                                                                   // 13703
                                                                                                                       // 13704
  notNull: function(expression) {                                                                                      // 13705
    return expression + '!=null';                                                                                      // 13706
  },                                                                                                                   // 13707
                                                                                                                       // 13708
  nonComputedMember: function(left, right) {                                                                           // 13709
    return left + '.' + right;                                                                                         // 13710
  },                                                                                                                   // 13711
                                                                                                                       // 13712
  computedMember: function(left, right) {                                                                              // 13713
    return left + '[' + right + ']';                                                                                   // 13714
  },                                                                                                                   // 13715
                                                                                                                       // 13716
  member: function(left, right, computed) {                                                                            // 13717
    if (computed) return this.computedMember(left, right);                                                             // 13718
    return this.nonComputedMember(left, right);                                                                        // 13719
  },                                                                                                                   // 13720
                                                                                                                       // 13721
  addEnsureSafeObject: function(item) {                                                                                // 13722
    this.current().body.push(this.ensureSafeObject(item), ';');                                                        // 13723
  },                                                                                                                   // 13724
                                                                                                                       // 13725
  addEnsureSafeMemberName: function(item) {                                                                            // 13726
    this.current().body.push(this.ensureSafeMemberName(item), ';');                                                    // 13727
  },                                                                                                                   // 13728
                                                                                                                       // 13729
  addEnsureSafeFunction: function(item) {                                                                              // 13730
    this.current().body.push(this.ensureSafeFunction(item), ';');                                                      // 13731
  },                                                                                                                   // 13732
                                                                                                                       // 13733
  addEnsureSafeAssignContext: function(item) {                                                                         // 13734
    this.current().body.push(this.ensureSafeAssignContext(item), ';');                                                 // 13735
  },                                                                                                                   // 13736
                                                                                                                       // 13737
  ensureSafeObject: function(item) {                                                                                   // 13738
    return 'ensureSafeObject(' + item + ',text)';                                                                      // 13739
  },                                                                                                                   // 13740
                                                                                                                       // 13741
  ensureSafeMemberName: function(item) {                                                                               // 13742
    return 'ensureSafeMemberName(' + item + ',text)';                                                                  // 13743
  },                                                                                                                   // 13744
                                                                                                                       // 13745
  ensureSafeFunction: function(item) {                                                                                 // 13746
    return 'ensureSafeFunction(' + item + ',text)';                                                                    // 13747
  },                                                                                                                   // 13748
                                                                                                                       // 13749
  getStringValue: function(item) {                                                                                     // 13750
    this.assign(item, 'getStringValue(' + item + ',text)');                                                            // 13751
  },                                                                                                                   // 13752
                                                                                                                       // 13753
  ensureSafeAssignContext: function(item) {                                                                            // 13754
    return 'ensureSafeAssignContext(' + item + ',text)';                                                               // 13755
  },                                                                                                                   // 13756
                                                                                                                       // 13757
  lazyRecurse: function(ast, intoId, nameId, recursionFn, create, skipWatchIdCheck) {                                  // 13758
    var self = this;                                                                                                   // 13759
    return function() {                                                                                                // 13760
      self.recurse(ast, intoId, nameId, recursionFn, create, skipWatchIdCheck);                                        // 13761
    };                                                                                                                 // 13762
  },                                                                                                                   // 13763
                                                                                                                       // 13764
  lazyAssign: function(id, value) {                                                                                    // 13765
    var self = this;                                                                                                   // 13766
    return function() {                                                                                                // 13767
      self.assign(id, value);                                                                                          // 13768
    };                                                                                                                 // 13769
  },                                                                                                                   // 13770
                                                                                                                       // 13771
  stringEscapeRegex: /[^ a-zA-Z0-9]/g,                                                                                 // 13772
                                                                                                                       // 13773
  stringEscapeFn: function(c) {                                                                                        // 13774
    return '\\u' + ('0000' + c.charCodeAt(0).toString(16)).slice(-4);                                                  // 13775
  },                                                                                                                   // 13776
                                                                                                                       // 13777
  escape: function(value) {                                                                                            // 13778
    if (isString(value)) return "'" + value.replace(this.stringEscapeRegex, this.stringEscapeFn) + "'";                // 13779
    if (isNumber(value)) return value.toString();                                                                      // 13780
    if (value === true) return 'true';                                                                                 // 13781
    if (value === false) return 'false';                                                                               // 13782
    if (value === null) return 'null';                                                                                 // 13783
    if (typeof value === 'undefined') return 'undefined';                                                              // 13784
                                                                                                                       // 13785
    throw $parseMinErr('esc', 'IMPOSSIBLE');                                                                           // 13786
  },                                                                                                                   // 13787
                                                                                                                       // 13788
  nextId: function(skip, init) {                                                                                       // 13789
    var id = 'v' + (this.state.nextId++);                                                                              // 13790
    if (!skip) {                                                                                                       // 13791
      this.current().vars.push(id + (init ? '=' + init : ''));                                                         // 13792
    }                                                                                                                  // 13793
    return id;                                                                                                         // 13794
  },                                                                                                                   // 13795
                                                                                                                       // 13796
  current: function() {                                                                                                // 13797
    return this.state[this.state.computing];                                                                           // 13798
  }                                                                                                                    // 13799
};                                                                                                                     // 13800
                                                                                                                       // 13801
                                                                                                                       // 13802
function ASTInterpreter(astBuilder, $filter) {                                                                         // 13803
  this.astBuilder = astBuilder;                                                                                        // 13804
  this.$filter = $filter;                                                                                              // 13805
}                                                                                                                      // 13806
                                                                                                                       // 13807
ASTInterpreter.prototype = {                                                                                           // 13808
  compile: function(expression, expensiveChecks) {                                                                     // 13809
    var self = this;                                                                                                   // 13810
    var ast = this.astBuilder.ast(expression);                                                                         // 13811
    this.expression = expression;                                                                                      // 13812
    this.expensiveChecks = expensiveChecks;                                                                            // 13813
    findConstantAndWatchExpressions(ast, self.$filter);                                                                // 13814
    var assignable;                                                                                                    // 13815
    var assign;                                                                                                        // 13816
    if ((assignable = assignableAST(ast))) {                                                                           // 13817
      assign = this.recurse(assignable);                                                                               // 13818
    }                                                                                                                  // 13819
    var toWatch = getInputs(ast.body);                                                                                 // 13820
    var inputs;                                                                                                        // 13821
    if (toWatch) {                                                                                                     // 13822
      inputs = [];                                                                                                     // 13823
      forEach(toWatch, function(watch, key) {                                                                          // 13824
        var input = self.recurse(watch);                                                                               // 13825
        watch.input = input;                                                                                           // 13826
        inputs.push(input);                                                                                            // 13827
        watch.watchId = key;                                                                                           // 13828
      });                                                                                                              // 13829
    }                                                                                                                  // 13830
    var expressions = [];                                                                                              // 13831
    forEach(ast.body, function(expression) {                                                                           // 13832
      expressions.push(self.recurse(expression.expression));                                                           // 13833
    });                                                                                                                // 13834
    var fn = ast.body.length === 0 ? function() {} :                                                                   // 13835
             ast.body.length === 1 ? expressions[0] :                                                                  // 13836
             function(scope, locals) {                                                                                 // 13837
               var lastValue;                                                                                          // 13838
               forEach(expressions, function(exp) {                                                                    // 13839
                 lastValue = exp(scope, locals);                                                                       // 13840
               });                                                                                                     // 13841
               return lastValue;                                                                                       // 13842
             };                                                                                                        // 13843
    if (assign) {                                                                                                      // 13844
      fn.assign = function(scope, value, locals) {                                                                     // 13845
        return assign(scope, locals, value);                                                                           // 13846
      };                                                                                                               // 13847
    }                                                                                                                  // 13848
    if (inputs) {                                                                                                      // 13849
      fn.inputs = inputs;                                                                                              // 13850
    }                                                                                                                  // 13851
    fn.literal = isLiteral(ast);                                                                                       // 13852
    fn.constant = isConstant(ast);                                                                                     // 13853
    return fn;                                                                                                         // 13854
  },                                                                                                                   // 13855
                                                                                                                       // 13856
  recurse: function(ast, context, create) {                                                                            // 13857
    var left, right, self = this, args, expression;                                                                    // 13858
    if (ast.input) {                                                                                                   // 13859
      return this.inputs(ast.input, ast.watchId);                                                                      // 13860
    }                                                                                                                  // 13861
    switch (ast.type) {                                                                                                // 13862
    case AST.Literal:                                                                                                  // 13863
      return this.value(ast.value, context);                                                                           // 13864
    case AST.UnaryExpression:                                                                                          // 13865
      right = this.recurse(ast.argument);                                                                              // 13866
      return this['unary' + ast.operator](right, context);                                                             // 13867
    case AST.BinaryExpression:                                                                                         // 13868
      left = this.recurse(ast.left);                                                                                   // 13869
      right = this.recurse(ast.right);                                                                                 // 13870
      return this['binary' + ast.operator](left, right, context);                                                      // 13871
    case AST.LogicalExpression:                                                                                        // 13872
      left = this.recurse(ast.left);                                                                                   // 13873
      right = this.recurse(ast.right);                                                                                 // 13874
      return this['binary' + ast.operator](left, right, context);                                                      // 13875
    case AST.ConditionalExpression:                                                                                    // 13876
      return this['ternary?:'](                                                                                        // 13877
        this.recurse(ast.test),                                                                                        // 13878
        this.recurse(ast.alternate),                                                                                   // 13879
        this.recurse(ast.consequent),                                                                                  // 13880
        context                                                                                                        // 13881
      );                                                                                                               // 13882
    case AST.Identifier:                                                                                               // 13883
      ensureSafeMemberName(ast.name, self.expression);                                                                 // 13884
      return self.identifier(ast.name,                                                                                 // 13885
                             self.expensiveChecks || isPossiblyDangerousMemberName(ast.name),                          // 13886
                             context, create, self.expression);                                                        // 13887
    case AST.MemberExpression:                                                                                         // 13888
      left = this.recurse(ast.object, false, !!create);                                                                // 13889
      if (!ast.computed) {                                                                                             // 13890
        ensureSafeMemberName(ast.property.name, self.expression);                                                      // 13891
        right = ast.property.name;                                                                                     // 13892
      }                                                                                                                // 13893
      if (ast.computed) right = this.recurse(ast.property);                                                            // 13894
      return ast.computed ?                                                                                            // 13895
        this.computedMember(left, right, context, create, self.expression) :                                           // 13896
        this.nonComputedMember(left, right, self.expensiveChecks, context, create, self.expression);                   // 13897
    case AST.CallExpression:                                                                                           // 13898
      args = [];                                                                                                       // 13899
      forEach(ast.arguments, function(expr) {                                                                          // 13900
        args.push(self.recurse(expr));                                                                                 // 13901
      });                                                                                                              // 13902
      if (ast.filter) right = this.$filter(ast.callee.name);                                                           // 13903
      if (!ast.filter) right = this.recurse(ast.callee, true);                                                         // 13904
      return ast.filter ?                                                                                              // 13905
        function(scope, locals, assign, inputs) {                                                                      // 13906
          var values = [];                                                                                             // 13907
          for (var i = 0; i < args.length; ++i) {                                                                      // 13908
            values.push(args[i](scope, locals, assign, inputs));                                                       // 13909
          }                                                                                                            // 13910
          var value = right.apply(undefined, values, inputs);                                                          // 13911
          return context ? {context: undefined, name: undefined, value: value} : value;                                // 13912
        } :                                                                                                            // 13913
        function(scope, locals, assign, inputs) {                                                                      // 13914
          var rhs = right(scope, locals, assign, inputs);                                                              // 13915
          var value;                                                                                                   // 13916
          if (rhs.value != null) {                                                                                     // 13917
            ensureSafeObject(rhs.context, self.expression);                                                            // 13918
            ensureSafeFunction(rhs.value, self.expression);                                                            // 13919
            var values = [];                                                                                           // 13920
            for (var i = 0; i < args.length; ++i) {                                                                    // 13921
              values.push(ensureSafeObject(args[i](scope, locals, assign, inputs), self.expression));                  // 13922
            }                                                                                                          // 13923
            value = ensureSafeObject(rhs.value.apply(rhs.context, values), self.expression);                           // 13924
          }                                                                                                            // 13925
          return context ? {value: value} : value;                                                                     // 13926
        };                                                                                                             // 13927
    case AST.AssignmentExpression:                                                                                     // 13928
      left = this.recurse(ast.left, true, 1);                                                                          // 13929
      right = this.recurse(ast.right);                                                                                 // 13930
      return function(scope, locals, assign, inputs) {                                                                 // 13931
        var lhs = left(scope, locals, assign, inputs);                                                                 // 13932
        var rhs = right(scope, locals, assign, inputs);                                                                // 13933
        ensureSafeObject(lhs.value, self.expression);                                                                  // 13934
        ensureSafeAssignContext(lhs.context);                                                                          // 13935
        lhs.context[lhs.name] = rhs;                                                                                   // 13936
        return context ? {value: rhs} : rhs;                                                                           // 13937
      };                                                                                                               // 13938
    case AST.ArrayExpression:                                                                                          // 13939
      args = [];                                                                                                       // 13940
      forEach(ast.elements, function(expr) {                                                                           // 13941
        args.push(self.recurse(expr));                                                                                 // 13942
      });                                                                                                              // 13943
      return function(scope, locals, assign, inputs) {                                                                 // 13944
        var value = [];                                                                                                // 13945
        for (var i = 0; i < args.length; ++i) {                                                                        // 13946
          value.push(args[i](scope, locals, assign, inputs));                                                          // 13947
        }                                                                                                              // 13948
        return context ? {value: value} : value;                                                                       // 13949
      };                                                                                                               // 13950
    case AST.ObjectExpression:                                                                                         // 13951
      args = [];                                                                                                       // 13952
      forEach(ast.properties, function(property) {                                                                     // 13953
        args.push({key: property.key.type === AST.Identifier ?                                                         // 13954
                        property.key.name :                                                                            // 13955
                        ('' + property.key.value),                                                                     // 13956
                   value: self.recurse(property.value)                                                                 // 13957
        });                                                                                                            // 13958
      });                                                                                                              // 13959
      return function(scope, locals, assign, inputs) {                                                                 // 13960
        var value = {};                                                                                                // 13961
        for (var i = 0; i < args.length; ++i) {                                                                        // 13962
          value[args[i].key] = args[i].value(scope, locals, assign, inputs);                                           // 13963
        }                                                                                                              // 13964
        return context ? {value: value} : value;                                                                       // 13965
      };                                                                                                               // 13966
    case AST.ThisExpression:                                                                                           // 13967
      return function(scope) {                                                                                         // 13968
        return context ? {value: scope} : scope;                                                                       // 13969
      };                                                                                                               // 13970
    case AST.NGValueParameter:                                                                                         // 13971
      return function(scope, locals, assign, inputs) {                                                                 // 13972
        return context ? {value: assign} : assign;                                                                     // 13973
      };                                                                                                               // 13974
    }                                                                                                                  // 13975
  },                                                                                                                   // 13976
                                                                                                                       // 13977
  'unary+': function(argument, context) {                                                                              // 13978
    return function(scope, locals, assign, inputs) {                                                                   // 13979
      var arg = argument(scope, locals, assign, inputs);                                                               // 13980
      if (isDefined(arg)) {                                                                                            // 13981
        arg = +arg;                                                                                                    // 13982
      } else {                                                                                                         // 13983
        arg = 0;                                                                                                       // 13984
      }                                                                                                                // 13985
      return context ? {value: arg} : arg;                                                                             // 13986
    };                                                                                                                 // 13987
  },                                                                                                                   // 13988
  'unary-': function(argument, context) {                                                                              // 13989
    return function(scope, locals, assign, inputs) {                                                                   // 13990
      var arg = argument(scope, locals, assign, inputs);                                                               // 13991
      if (isDefined(arg)) {                                                                                            // 13992
        arg = -arg;                                                                                                    // 13993
      } else {                                                                                                         // 13994
        arg = 0;                                                                                                       // 13995
      }                                                                                                                // 13996
      return context ? {value: arg} : arg;                                                                             // 13997
    };                                                                                                                 // 13998
  },                                                                                                                   // 13999
  'unary!': function(argument, context) {                                                                              // 14000
    return function(scope, locals, assign, inputs) {                                                                   // 14001
      var arg = !argument(scope, locals, assign, inputs);                                                              // 14002
      return context ? {value: arg} : arg;                                                                             // 14003
    };                                                                                                                 // 14004
  },                                                                                                                   // 14005
  'binary+': function(left, right, context) {                                                                          // 14006
    return function(scope, locals, assign, inputs) {                                                                   // 14007
      var lhs = left(scope, locals, assign, inputs);                                                                   // 14008
      var rhs = right(scope, locals, assign, inputs);                                                                  // 14009
      var arg = plusFn(lhs, rhs);                                                                                      // 14010
      return context ? {value: arg} : arg;                                                                             // 14011
    };                                                                                                                 // 14012
  },                                                                                                                   // 14013
  'binary-': function(left, right, context) {                                                                          // 14014
    return function(scope, locals, assign, inputs) {                                                                   // 14015
      var lhs = left(scope, locals, assign, inputs);                                                                   // 14016
      var rhs = right(scope, locals, assign, inputs);                                                                  // 14017
      var arg = (isDefined(lhs) ? lhs : 0) - (isDefined(rhs) ? rhs : 0);                                               // 14018
      return context ? {value: arg} : arg;                                                                             // 14019
    };                                                                                                                 // 14020
  },                                                                                                                   // 14021
  'binary*': function(left, right, context) {                                                                          // 14022
    return function(scope, locals, assign, inputs) {                                                                   // 14023
      var arg = left(scope, locals, assign, inputs) * right(scope, locals, assign, inputs);                            // 14024
      return context ? {value: arg} : arg;                                                                             // 14025
    };                                                                                                                 // 14026
  },                                                                                                                   // 14027
  'binary/': function(left, right, context) {                                                                          // 14028
    return function(scope, locals, assign, inputs) {                                                                   // 14029
      var arg = left(scope, locals, assign, inputs) / right(scope, locals, assign, inputs);                            // 14030
      return context ? {value: arg} : arg;                                                                             // 14031
    };                                                                                                                 // 14032
  },                                                                                                                   // 14033
  'binary%': function(left, right, context) {                                                                          // 14034
    return function(scope, locals, assign, inputs) {                                                                   // 14035
      var arg = left(scope, locals, assign, inputs) % right(scope, locals, assign, inputs);                            // 14036
      return context ? {value: arg} : arg;                                                                             // 14037
    };                                                                                                                 // 14038
  },                                                                                                                   // 14039
  'binary===': function(left, right, context) {                                                                        // 14040
    return function(scope, locals, assign, inputs) {                                                                   // 14041
      var arg = left(scope, locals, assign, inputs) === right(scope, locals, assign, inputs);                          // 14042
      return context ? {value: arg} : arg;                                                                             // 14043
    };                                                                                                                 // 14044
  },                                                                                                                   // 14045
  'binary!==': function(left, right, context) {                                                                        // 14046
    return function(scope, locals, assign, inputs) {                                                                   // 14047
      var arg = left(scope, locals, assign, inputs) !== right(scope, locals, assign, inputs);                          // 14048
      return context ? {value: arg} : arg;                                                                             // 14049
    };                                                                                                                 // 14050
  },                                                                                                                   // 14051
  'binary==': function(left, right, context) {                                                                         // 14052
    return function(scope, locals, assign, inputs) {                                                                   // 14053
      var arg = left(scope, locals, assign, inputs) == right(scope, locals, assign, inputs);                           // 14054
      return context ? {value: arg} : arg;                                                                             // 14055
    };                                                                                                                 // 14056
  },                                                                                                                   // 14057
  'binary!=': function(left, right, context) {                                                                         // 14058
    return function(scope, locals, assign, inputs) {                                                                   // 14059
      var arg = left(scope, locals, assign, inputs) != right(scope, locals, assign, inputs);                           // 14060
      return context ? {value: arg} : arg;                                                                             // 14061
    };                                                                                                                 // 14062
  },                                                                                                                   // 14063
  'binary<': function(left, right, context) {                                                                          // 14064
    return function(scope, locals, assign, inputs) {                                                                   // 14065
      var arg = left(scope, locals, assign, inputs) < right(scope, locals, assign, inputs);                            // 14066
      return context ? {value: arg} : arg;                                                                             // 14067
    };                                                                                                                 // 14068
  },                                                                                                                   // 14069
  'binary>': function(left, right, context) {                                                                          // 14070
    return function(scope, locals, assign, inputs) {                                                                   // 14071
      var arg = left(scope, locals, assign, inputs) > right(scope, locals, assign, inputs);                            // 14072
      return context ? {value: arg} : arg;                                                                             // 14073
    };                                                                                                                 // 14074
  },                                                                                                                   // 14075
  'binary<=': function(left, right, context) {                                                                         // 14076
    return function(scope, locals, assign, inputs) {                                                                   // 14077
      var arg = left(scope, locals, assign, inputs) <= right(scope, locals, assign, inputs);                           // 14078
      return context ? {value: arg} : arg;                                                                             // 14079
    };                                                                                                                 // 14080
  },                                                                                                                   // 14081
  'binary>=': function(left, right, context) {                                                                         // 14082
    return function(scope, locals, assign, inputs) {                                                                   // 14083
      var arg = left(scope, locals, assign, inputs) >= right(scope, locals, assign, inputs);                           // 14084
      return context ? {value: arg} : arg;                                                                             // 14085
    };                                                                                                                 // 14086
  },                                                                                                                   // 14087
  'binary&&': function(left, right, context) {                                                                         // 14088
    return function(scope, locals, assign, inputs) {                                                                   // 14089
      var arg = left(scope, locals, assign, inputs) && right(scope, locals, assign, inputs);                           // 14090
      return context ? {value: arg} : arg;                                                                             // 14091
    };                                                                                                                 // 14092
  },                                                                                                                   // 14093
  'binary||': function(left, right, context) {                                                                         // 14094
    return function(scope, locals, assign, inputs) {                                                                   // 14095
      var arg = left(scope, locals, assign, inputs) || right(scope, locals, assign, inputs);                           // 14096
      return context ? {value: arg} : arg;                                                                             // 14097
    };                                                                                                                 // 14098
  },                                                                                                                   // 14099
  'ternary?:': function(test, alternate, consequent, context) {                                                        // 14100
    return function(scope, locals, assign, inputs) {                                                                   // 14101
      var arg = test(scope, locals, assign, inputs) ? alternate(scope, locals, assign, inputs) : consequent(scope, locals, assign, inputs);
      return context ? {value: arg} : arg;                                                                             // 14103
    };                                                                                                                 // 14104
  },                                                                                                                   // 14105
  value: function(value, context) {                                                                                    // 14106
    return function() { return context ? {context: undefined, name: undefined, value: value} : value; };               // 14107
  },                                                                                                                   // 14108
  identifier: function(name, expensiveChecks, context, create, expression) {                                           // 14109
    return function(scope, locals, assign, inputs) {                                                                   // 14110
      var base = locals && (name in locals) ? locals : scope;                                                          // 14111
      if (create && create !== 1 && base && !(base[name])) {                                                           // 14112
        base[name] = {};                                                                                               // 14113
      }                                                                                                                // 14114
      var value = base ? base[name] : undefined;                                                                       // 14115
      if (expensiveChecks) {                                                                                           // 14116
        ensureSafeObject(value, expression);                                                                           // 14117
      }                                                                                                                // 14118
      if (context) {                                                                                                   // 14119
        return {context: base, name: name, value: value};                                                              // 14120
      } else {                                                                                                         // 14121
        return value;                                                                                                  // 14122
      }                                                                                                                // 14123
    };                                                                                                                 // 14124
  },                                                                                                                   // 14125
  computedMember: function(left, right, context, create, expression) {                                                 // 14126
    return function(scope, locals, assign, inputs) {                                                                   // 14127
      var lhs = left(scope, locals, assign, inputs);                                                                   // 14128
      var rhs;                                                                                                         // 14129
      var value;                                                                                                       // 14130
      if (lhs != null) {                                                                                               // 14131
        rhs = right(scope, locals, assign, inputs);                                                                    // 14132
        rhs = getStringValue(rhs);                                                                                     // 14133
        ensureSafeMemberName(rhs, expression);                                                                         // 14134
        if (create && create !== 1 && lhs && !(lhs[rhs])) {                                                            // 14135
          lhs[rhs] = {};                                                                                               // 14136
        }                                                                                                              // 14137
        value = lhs[rhs];                                                                                              // 14138
        ensureSafeObject(value, expression);                                                                           // 14139
      }                                                                                                                // 14140
      if (context) {                                                                                                   // 14141
        return {context: lhs, name: rhs, value: value};                                                                // 14142
      } else {                                                                                                         // 14143
        return value;                                                                                                  // 14144
      }                                                                                                                // 14145
    };                                                                                                                 // 14146
  },                                                                                                                   // 14147
  nonComputedMember: function(left, right, expensiveChecks, context, create, expression) {                             // 14148
    return function(scope, locals, assign, inputs) {                                                                   // 14149
      var lhs = left(scope, locals, assign, inputs);                                                                   // 14150
      if (create && create !== 1 && lhs && !(lhs[right])) {                                                            // 14151
        lhs[right] = {};                                                                                               // 14152
      }                                                                                                                // 14153
      var value = lhs != null ? lhs[right] : undefined;                                                                // 14154
      if (expensiveChecks || isPossiblyDangerousMemberName(right)) {                                                   // 14155
        ensureSafeObject(value, expression);                                                                           // 14156
      }                                                                                                                // 14157
      if (context) {                                                                                                   // 14158
        return {context: lhs, name: right, value: value};                                                              // 14159
      } else {                                                                                                         // 14160
        return value;                                                                                                  // 14161
      }                                                                                                                // 14162
    };                                                                                                                 // 14163
  },                                                                                                                   // 14164
  inputs: function(input, watchId) {                                                                                   // 14165
    return function(scope, value, locals, inputs) {                                                                    // 14166
      if (inputs) return inputs[watchId];                                                                              // 14167
      return input(scope, value, locals);                                                                              // 14168
    };                                                                                                                 // 14169
  }                                                                                                                    // 14170
};                                                                                                                     // 14171
                                                                                                                       // 14172
/**                                                                                                                    // 14173
 * @constructor                                                                                                        // 14174
 */                                                                                                                    // 14175
var Parser = function(lexer, $filter, options) {                                                                       // 14176
  this.lexer = lexer;                                                                                                  // 14177
  this.$filter = $filter;                                                                                              // 14178
  this.options = options;                                                                                              // 14179
  this.ast = new AST(this.lexer);                                                                                      // 14180
  this.astCompiler = options.csp ? new ASTInterpreter(this.ast, $filter) :                                             // 14181
                                   new ASTCompiler(this.ast, $filter);                                                 // 14182
};                                                                                                                     // 14183
                                                                                                                       // 14184
Parser.prototype = {                                                                                                   // 14185
  constructor: Parser,                                                                                                 // 14186
                                                                                                                       // 14187
  parse: function(text) {                                                                                              // 14188
    return this.astCompiler.compile(text, this.options.expensiveChecks);                                               // 14189
  }                                                                                                                    // 14190
};                                                                                                                     // 14191
                                                                                                                       // 14192
var getterFnCacheDefault = createMap();                                                                                // 14193
var getterFnCacheExpensive = createMap();                                                                              // 14194
                                                                                                                       // 14195
function isPossiblyDangerousMemberName(name) {                                                                         // 14196
  return name == 'constructor';                                                                                        // 14197
}                                                                                                                      // 14198
                                                                                                                       // 14199
var objectValueOf = Object.prototype.valueOf;                                                                          // 14200
                                                                                                                       // 14201
function getValueOf(value) {                                                                                           // 14202
  return isFunction(value.valueOf) ? value.valueOf() : objectValueOf.call(value);                                      // 14203
}                                                                                                                      // 14204
                                                                                                                       // 14205
///////////////////////////////////                                                                                    // 14206
                                                                                                                       // 14207
/**                                                                                                                    // 14208
 * @ngdoc service                                                                                                      // 14209
 * @name $parse                                                                                                        // 14210
 * @kind function                                                                                                      // 14211
 *                                                                                                                     // 14212
 * @description                                                                                                        // 14213
 *                                                                                                                     // 14214
 * Converts Angular {@link guide/expression expression} into a function.                                               // 14215
 *                                                                                                                     // 14216
 * ```js                                                                                                               // 14217
 *   var getter = $parse('user.name');                                                                                 // 14218
 *   var setter = getter.assign;                                                                                       // 14219
 *   var context = {user:{name:'angular'}};                                                                            // 14220
 *   var locals = {user:{name:'local'}};                                                                               // 14221
 *                                                                                                                     // 14222
 *   expect(getter(context)).toEqual('angular');                                                                       // 14223
 *   setter(context, 'newValue');                                                                                      // 14224
 *   expect(context.user.name).toEqual('newValue');                                                                    // 14225
 *   expect(getter(context, locals)).toEqual('local');                                                                 // 14226
 * ```                                                                                                                 // 14227
 *                                                                                                                     // 14228
 *                                                                                                                     // 14229
 * @param {string} expression String expression to compile.                                                            // 14230
 * @returns {function(context, locals)} a function which represents the compiled expression:                           // 14231
 *                                                                                                                     // 14232
 *    * `context` – `{object}` – an object against which any expressions embedded in the strings                       // 14233
 *      are evaluated against (typically a scope object).                                                              // 14234
 *    * `locals` – `{object=}` – local variables context object, useful for overriding values in                       // 14235
 *      `context`.                                                                                                     // 14236
 *                                                                                                                     // 14237
 *    The returned function also has the following properties:                                                         // 14238
 *      * `literal` – `{boolean}` – whether the expression's top-level node is a JavaScript                            // 14239
 *        literal.                                                                                                     // 14240
 *      * `constant` – `{boolean}` – whether the expression is made entirely of JavaScript                             // 14241
 *        constant literals.                                                                                           // 14242
 *      * `assign` – `{?function(context, value)}` – if the expression is assignable, this will be                     // 14243
 *        set to a function to change its value on the given context.                                                  // 14244
 *                                                                                                                     // 14245
 */                                                                                                                    // 14246
                                                                                                                       // 14247
                                                                                                                       // 14248
/**                                                                                                                    // 14249
 * @ngdoc provider                                                                                                     // 14250
 * @name $parseProvider                                                                                                // 14251
 *                                                                                                                     // 14252
 * @description                                                                                                        // 14253
 * `$parseProvider` can be used for configuring the default behavior of the {@link ng.$parse $parse}                   // 14254
 *  service.                                                                                                           // 14255
 */                                                                                                                    // 14256
function $ParseProvider() {                                                                                            // 14257
  var cacheDefault = createMap();                                                                                      // 14258
  var cacheExpensive = createMap();                                                                                    // 14259
                                                                                                                       // 14260
  this.$get = ['$filter', function($filter) {                                                                          // 14261
    var noUnsafeEval = csp().noUnsafeEval;                                                                             // 14262
    var $parseOptions = {                                                                                              // 14263
          csp: noUnsafeEval,                                                                                           // 14264
          expensiveChecks: false                                                                                       // 14265
        },                                                                                                             // 14266
        $parseOptionsExpensive = {                                                                                     // 14267
          csp: noUnsafeEval,                                                                                           // 14268
          expensiveChecks: true                                                                                        // 14269
        };                                                                                                             // 14270
                                                                                                                       // 14271
    return function $parse(exp, interceptorFn, expensiveChecks) {                                                      // 14272
      var parsedExpression, oneTime, cacheKey;                                                                         // 14273
                                                                                                                       // 14274
      switch (typeof exp) {                                                                                            // 14275
        case 'string':                                                                                                 // 14276
          exp = exp.trim();                                                                                            // 14277
          cacheKey = exp;                                                                                              // 14278
                                                                                                                       // 14279
          var cache = (expensiveChecks ? cacheExpensive : cacheDefault);                                               // 14280
          parsedExpression = cache[cacheKey];                                                                          // 14281
                                                                                                                       // 14282
          if (!parsedExpression) {                                                                                     // 14283
            if (exp.charAt(0) === ':' && exp.charAt(1) === ':') {                                                      // 14284
              oneTime = true;                                                                                          // 14285
              exp = exp.substring(2);                                                                                  // 14286
            }                                                                                                          // 14287
            var parseOptions = expensiveChecks ? $parseOptionsExpensive : $parseOptions;                               // 14288
            var lexer = new Lexer(parseOptions);                                                                       // 14289
            var parser = new Parser(lexer, $filter, parseOptions);                                                     // 14290
            parsedExpression = parser.parse(exp);                                                                      // 14291
            if (parsedExpression.constant) {                                                                           // 14292
              parsedExpression.$$watchDelegate = constantWatchDelegate;                                                // 14293
            } else if (oneTime) {                                                                                      // 14294
              parsedExpression.$$watchDelegate = parsedExpression.literal ?                                            // 14295
                  oneTimeLiteralWatchDelegate : oneTimeWatchDelegate;                                                  // 14296
            } else if (parsedExpression.inputs) {                                                                      // 14297
              parsedExpression.$$watchDelegate = inputsWatchDelegate;                                                  // 14298
            }                                                                                                          // 14299
            cache[cacheKey] = parsedExpression;                                                                        // 14300
          }                                                                                                            // 14301
          return addInterceptor(parsedExpression, interceptorFn);                                                      // 14302
                                                                                                                       // 14303
        case 'function':                                                                                               // 14304
          return addInterceptor(exp, interceptorFn);                                                                   // 14305
                                                                                                                       // 14306
        default:                                                                                                       // 14307
          return noop;                                                                                                 // 14308
      }                                                                                                                // 14309
    };                                                                                                                 // 14310
                                                                                                                       // 14311
    function expressionInputDirtyCheck(newValue, oldValueOfValue) {                                                    // 14312
                                                                                                                       // 14313
      if (newValue == null || oldValueOfValue == null) { // null/undefined                                             // 14314
        return newValue === oldValueOfValue;                                                                           // 14315
      }                                                                                                                // 14316
                                                                                                                       // 14317
      if (typeof newValue === 'object') {                                                                              // 14318
                                                                                                                       // 14319
        // attempt to convert the value to a primitive type                                                            // 14320
        // TODO(docs): add a note to docs that by implementing valueOf even objects and arrays can                     // 14321
        //             be cheaply dirty-checked                                                                        // 14322
        newValue = getValueOf(newValue);                                                                               // 14323
                                                                                                                       // 14324
        if (typeof newValue === 'object') {                                                                            // 14325
          // objects/arrays are not supported - deep-watching them would be too expensive                              // 14326
          return false;                                                                                                // 14327
        }                                                                                                              // 14328
                                                                                                                       // 14329
        // fall-through to the primitive equality check                                                                // 14330
      }                                                                                                                // 14331
                                                                                                                       // 14332
      //Primitive or NaN                                                                                               // 14333
      return newValue === oldValueOfValue || (newValue !== newValue && oldValueOfValue !== oldValueOfValue);           // 14334
    }                                                                                                                  // 14335
                                                                                                                       // 14336
    function inputsWatchDelegate(scope, listener, objectEquality, parsedExpression, prettyPrintExpression) {           // 14337
      var inputExpressions = parsedExpression.inputs;                                                                  // 14338
      var lastResult;                                                                                                  // 14339
                                                                                                                       // 14340
      if (inputExpressions.length === 1) {                                                                             // 14341
        var oldInputValueOf = expressionInputDirtyCheck; // init to something unique so that equals check fails        // 14342
        inputExpressions = inputExpressions[0];                                                                        // 14343
        return scope.$watch(function expressionInputWatch(scope) {                                                     // 14344
          var newInputValue = inputExpressions(scope);                                                                 // 14345
          if (!expressionInputDirtyCheck(newInputValue, oldInputValueOf)) {                                            // 14346
            lastResult = parsedExpression(scope, undefined, undefined, [newInputValue]);                               // 14347
            oldInputValueOf = newInputValue && getValueOf(newInputValue);                                              // 14348
          }                                                                                                            // 14349
          return lastResult;                                                                                           // 14350
        }, listener, objectEquality, prettyPrintExpression);                                                           // 14351
      }                                                                                                                // 14352
                                                                                                                       // 14353
      var oldInputValueOfValues = [];                                                                                  // 14354
      var oldInputValues = [];                                                                                         // 14355
      for (var i = 0, ii = inputExpressions.length; i < ii; i++) {                                                     // 14356
        oldInputValueOfValues[i] = expressionInputDirtyCheck; // init to something unique so that equals check fails   // 14357
        oldInputValues[i] = null;                                                                                      // 14358
      }                                                                                                                // 14359
                                                                                                                       // 14360
      return scope.$watch(function expressionInputsWatch(scope) {                                                      // 14361
        var changed = false;                                                                                           // 14362
                                                                                                                       // 14363
        for (var i = 0, ii = inputExpressions.length; i < ii; i++) {                                                   // 14364
          var newInputValue = inputExpressions[i](scope);                                                              // 14365
          if (changed || (changed = !expressionInputDirtyCheck(newInputValue, oldInputValueOfValues[i]))) {            // 14366
            oldInputValues[i] = newInputValue;                                                                         // 14367
            oldInputValueOfValues[i] = newInputValue && getValueOf(newInputValue);                                     // 14368
          }                                                                                                            // 14369
        }                                                                                                              // 14370
                                                                                                                       // 14371
        if (changed) {                                                                                                 // 14372
          lastResult = parsedExpression(scope, undefined, undefined, oldInputValues);                                  // 14373
        }                                                                                                              // 14374
                                                                                                                       // 14375
        return lastResult;                                                                                             // 14376
      }, listener, objectEquality, prettyPrintExpression);                                                             // 14377
    }                                                                                                                  // 14378
                                                                                                                       // 14379
    function oneTimeWatchDelegate(scope, listener, objectEquality, parsedExpression) {                                 // 14380
      var unwatch, lastValue;                                                                                          // 14381
      return unwatch = scope.$watch(function oneTimeWatch(scope) {                                                     // 14382
        return parsedExpression(scope);                                                                                // 14383
      }, function oneTimeListener(value, old, scope) {                                                                 // 14384
        lastValue = value;                                                                                             // 14385
        if (isFunction(listener)) {                                                                                    // 14386
          listener.apply(this, arguments);                                                                             // 14387
        }                                                                                                              // 14388
        if (isDefined(value)) {                                                                                        // 14389
          scope.$$postDigest(function() {                                                                              // 14390
            if (isDefined(lastValue)) {                                                                                // 14391
              unwatch();                                                                                               // 14392
            }                                                                                                          // 14393
          });                                                                                                          // 14394
        }                                                                                                              // 14395
      }, objectEquality);                                                                                              // 14396
    }                                                                                                                  // 14397
                                                                                                                       // 14398
    function oneTimeLiteralWatchDelegate(scope, listener, objectEquality, parsedExpression) {                          // 14399
      var unwatch, lastValue;                                                                                          // 14400
      return unwatch = scope.$watch(function oneTimeWatch(scope) {                                                     // 14401
        return parsedExpression(scope);                                                                                // 14402
      }, function oneTimeListener(value, old, scope) {                                                                 // 14403
        lastValue = value;                                                                                             // 14404
        if (isFunction(listener)) {                                                                                    // 14405
          listener.call(this, value, old, scope);                                                                      // 14406
        }                                                                                                              // 14407
        if (isAllDefined(value)) {                                                                                     // 14408
          scope.$$postDigest(function() {                                                                              // 14409
            if (isAllDefined(lastValue)) unwatch();                                                                    // 14410
          });                                                                                                          // 14411
        }                                                                                                              // 14412
      }, objectEquality);                                                                                              // 14413
                                                                                                                       // 14414
      function isAllDefined(value) {                                                                                   // 14415
        var allDefined = true;                                                                                         // 14416
        forEach(value, function(val) {                                                                                 // 14417
          if (!isDefined(val)) allDefined = false;                                                                     // 14418
        });                                                                                                            // 14419
        return allDefined;                                                                                             // 14420
      }                                                                                                                // 14421
    }                                                                                                                  // 14422
                                                                                                                       // 14423
    function constantWatchDelegate(scope, listener, objectEquality, parsedExpression) {                                // 14424
      var unwatch;                                                                                                     // 14425
      return unwatch = scope.$watch(function constantWatch(scope) {                                                    // 14426
        return parsedExpression(scope);                                                                                // 14427
      }, function constantListener(value, old, scope) {                                                                // 14428
        if (isFunction(listener)) {                                                                                    // 14429
          listener.apply(this, arguments);                                                                             // 14430
        }                                                                                                              // 14431
        unwatch();                                                                                                     // 14432
      }, objectEquality);                                                                                              // 14433
    }                                                                                                                  // 14434
                                                                                                                       // 14435
    function addInterceptor(parsedExpression, interceptorFn) {                                                         // 14436
      if (!interceptorFn) return parsedExpression;                                                                     // 14437
      var watchDelegate = parsedExpression.$$watchDelegate;                                                            // 14438
      var useInputs = false;                                                                                           // 14439
                                                                                                                       // 14440
      var regularWatch =                                                                                               // 14441
          watchDelegate !== oneTimeLiteralWatchDelegate &&                                                             // 14442
          watchDelegate !== oneTimeWatchDelegate;                                                                      // 14443
                                                                                                                       // 14444
      var fn = regularWatch ? function regularInterceptedExpression(scope, locals, assign, inputs) {                   // 14445
        var value = useInputs && inputs ? inputs[0] : parsedExpression(scope, locals, assign, inputs);                 // 14446
        return interceptorFn(value, scope, locals);                                                                    // 14447
      } : function oneTimeInterceptedExpression(scope, locals, assign, inputs) {                                       // 14448
        var value = parsedExpression(scope, locals, assign, inputs);                                                   // 14449
        var result = interceptorFn(value, scope, locals);                                                              // 14450
        // we only return the interceptor's result if the                                                              // 14451
        // initial value is defined (for bind-once)                                                                    // 14452
        return isDefined(value) ? result : value;                                                                      // 14453
      };                                                                                                               // 14454
                                                                                                                       // 14455
      // Propagate $$watchDelegates other then inputsWatchDelegate                                                     // 14456
      if (parsedExpression.$$watchDelegate &&                                                                          // 14457
          parsedExpression.$$watchDelegate !== inputsWatchDelegate) {                                                  // 14458
        fn.$$watchDelegate = parsedExpression.$$watchDelegate;                                                         // 14459
      } else if (!interceptorFn.$stateful) {                                                                           // 14460
        // If there is an interceptor, but no watchDelegate then treat the interceptor like                            // 14461
        // we treat filters - it is assumed to be a pure function unless flagged with $stateful                        // 14462
        fn.$$watchDelegate = inputsWatchDelegate;                                                                      // 14463
        useInputs = !parsedExpression.inputs;                                                                          // 14464
        fn.inputs = parsedExpression.inputs ? parsedExpression.inputs : [parsedExpression];                            // 14465
      }                                                                                                                // 14466
                                                                                                                       // 14467
      return fn;                                                                                                       // 14468
    }                                                                                                                  // 14469
  }];                                                                                                                  // 14470
}                                                                                                                      // 14471
                                                                                                                       // 14472
/**                                                                                                                    // 14473
 * @ngdoc service                                                                                                      // 14474
 * @name $q                                                                                                            // 14475
 * @requires $rootScope                                                                                                // 14476
 *                                                                                                                     // 14477
 * @description                                                                                                        // 14478
 * A service that helps you run functions asynchronously, and use their return values (or exceptions)                  // 14479
 * when they are done processing.                                                                                      // 14480
 *                                                                                                                     // 14481
 * This is an implementation of promises/deferred objects inspired by                                                  // 14482
 * [Kris Kowal's Q](https://github.com/kriskowal/q).                                                                   // 14483
 *                                                                                                                     // 14484
 * $q can be used in two fashions --- one which is more similar to Kris Kowal's Q or jQuery's Deferred                 // 14485
 * implementations, and the other which resembles ES6 promises to some degree.                                         // 14486
 *                                                                                                                     // 14487
 * # $q constructor                                                                                                    // 14488
 *                                                                                                                     // 14489
 * The streamlined ES6 style promise is essentially just using $q as a constructor which takes a `resolver`            // 14490
 * function as the first argument. This is similar to the native Promise implementation from ES6 Harmony,              // 14491
 * see [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise).                // 14492
 *                                                                                                                     // 14493
 * While the constructor-style use is supported, not all of the supporting methods from ES6 Harmony promises are       // 14494
 * available yet.                                                                                                      // 14495
 *                                                                                                                     // 14496
 * It can be used like so:                                                                                             // 14497
 *                                                                                                                     // 14498
 * ```js                                                                                                               // 14499
 *   // for the purpose of this example let's assume that variables `$q` and `okToGreet`                               // 14500
 *   // are available in the current lexical scope (they could have been injected or passed in).                       // 14501
 *                                                                                                                     // 14502
 *   function asyncGreet(name) {                                                                                       // 14503
 *     // perform some asynchronous operation, resolve or reject the promise when appropriate.                         // 14504
 *     return $q(function(resolve, reject) {                                                                           // 14505
 *       setTimeout(function() {                                                                                       // 14506
 *         if (okToGreet(name)) {                                                                                      // 14507
 *           resolve('Hello, ' + name + '!');                                                                          // 14508
 *         } else {                                                                                                    // 14509
 *           reject('Greeting ' + name + ' is not allowed.');                                                          // 14510
 *         }                                                                                                           // 14511
 *       }, 1000);                                                                                                     // 14512
 *     });                                                                                                             // 14513
 *   }                                                                                                                 // 14514
 *                                                                                                                     // 14515
 *   var promise = asyncGreet('Robin Hood');                                                                           // 14516
 *   promise.then(function(greeting) {                                                                                 // 14517
 *     alert('Success: ' + greeting);                                                                                  // 14518
 *   }, function(reason) {                                                                                             // 14519
 *     alert('Failed: ' + reason);                                                                                     // 14520
 *   });                                                                                                               // 14521
 * ```                                                                                                                 // 14522
 *                                                                                                                     // 14523
 * Note: progress/notify callbacks are not currently supported via the ES6-style interface.                            // 14524
 *                                                                                                                     // 14525
 * Note: unlike ES6 behaviour, an exception thrown in the constructor function will NOT implicitly reject the promise.
 *                                                                                                                     // 14527
 * However, the more traditional CommonJS-style usage is still available, and documented below.                        // 14528
 *                                                                                                                     // 14529
 * [The CommonJS Promise proposal](http://wiki.commonjs.org/wiki/Promises) describes a promise as an                   // 14530
 * interface for interacting with an object that represents the result of an action that is                            // 14531
 * performed asynchronously, and may or may not be finished at any given point in time.                                // 14532
 *                                                                                                                     // 14533
 * From the perspective of dealing with error handling, deferred and promise APIs are to                               // 14534
 * asynchronous programming what `try`, `catch` and `throw` keywords are to synchronous programming.                   // 14535
 *                                                                                                                     // 14536
 * ```js                                                                                                               // 14537
 *   // for the purpose of this example let's assume that variables `$q` and `okToGreet`                               // 14538
 *   // are available in the current lexical scope (they could have been injected or passed in).                       // 14539
 *                                                                                                                     // 14540
 *   function asyncGreet(name) {                                                                                       // 14541
 *     var deferred = $q.defer();                                                                                      // 14542
 *                                                                                                                     // 14543
 *     setTimeout(function() {                                                                                         // 14544
 *       deferred.notify('About to greet ' + name + '.');                                                              // 14545
 *                                                                                                                     // 14546
 *       if (okToGreet(name)) {                                                                                        // 14547
 *         deferred.resolve('Hello, ' + name + '!');                                                                   // 14548
 *       } else {                                                                                                      // 14549
 *         deferred.reject('Greeting ' + name + ' is not allowed.');                                                   // 14550
 *       }                                                                                                             // 14551
 *     }, 1000);                                                                                                       // 14552
 *                                                                                                                     // 14553
 *     return deferred.promise;                                                                                        // 14554
 *   }                                                                                                                 // 14555
 *                                                                                                                     // 14556
 *   var promise = asyncGreet('Robin Hood');                                                                           // 14557
 *   promise.then(function(greeting) {                                                                                 // 14558
 *     alert('Success: ' + greeting);                                                                                  // 14559
 *   }, function(reason) {                                                                                             // 14560
 *     alert('Failed: ' + reason);                                                                                     // 14561
 *   }, function(update) {                                                                                             // 14562
 *     alert('Got notification: ' + update);                                                                           // 14563
 *   });                                                                                                               // 14564
 * ```                                                                                                                 // 14565
 *                                                                                                                     // 14566
 * At first it might not be obvious why this extra complexity is worth the trouble. The payoff                         // 14567
 * comes in the way of guarantees that promise and deferred APIs make, see                                             // 14568
 * https://github.com/kriskowal/uncommonjs/blob/master/promises/specification.md.                                      // 14569
 *                                                                                                                     // 14570
 * Additionally the promise api allows for composition that is very hard to do with the                                // 14571
 * traditional callback ([CPS](http://en.wikipedia.org/wiki/Continuation-passing_style)) approach.                     // 14572
 * For more on this please see the [Q documentation](https://github.com/kriskowal/q) especially the                    // 14573
 * section on serial or parallel joining of promises.                                                                  // 14574
 *                                                                                                                     // 14575
 * # The Deferred API                                                                                                  // 14576
 *                                                                                                                     // 14577
 * A new instance of deferred is constructed by calling `$q.defer()`.                                                  // 14578
 *                                                                                                                     // 14579
 * The purpose of the deferred object is to expose the associated Promise instance as well as APIs                     // 14580
 * that can be used for signaling the successful or unsuccessful completion, as well as the status                     // 14581
 * of the task.                                                                                                        // 14582
 *                                                                                                                     // 14583
 * **Methods**                                                                                                         // 14584
 *                                                                                                                     // 14585
 * - `resolve(value)` – resolves the derived promise with the `value`. If the value is a rejection                     // 14586
 *   constructed via `$q.reject`, the promise will be rejected instead.                                                // 14587
 * - `reject(reason)` – rejects the derived promise with the `reason`. This is equivalent to                           // 14588
 *   resolving it with a rejection constructed via `$q.reject`.                                                        // 14589
 * - `notify(value)` - provides updates on the status of the promise's execution. This may be called                   // 14590
 *   multiple times before the promise is either resolved or rejected.                                                 // 14591
 *                                                                                                                     // 14592
 * **Properties**                                                                                                      // 14593
 *                                                                                                                     // 14594
 * - promise – `{Promise}` – promise object associated with this deferred.                                             // 14595
 *                                                                                                                     // 14596
 *                                                                                                                     // 14597
 * # The Promise API                                                                                                   // 14598
 *                                                                                                                     // 14599
 * A new promise instance is created when a deferred instance is created and can be retrieved by                       // 14600
 * calling `deferred.promise`.                                                                                         // 14601
 *                                                                                                                     // 14602
 * The purpose of the promise object is to allow for interested parties to get access to the result                    // 14603
 * of the deferred task when it completes.                                                                             // 14604
 *                                                                                                                     // 14605
 * **Methods**                                                                                                         // 14606
 *                                                                                                                     // 14607
 * - `then(successCallback, errorCallback, notifyCallback)` – regardless of when the promise was or                    // 14608
 *   will be resolved or rejected, `then` calls one of the success or error callbacks asynchronously                   // 14609
 *   as soon as the result is available. The callbacks are called with a single argument: the result                   // 14610
 *   or rejection reason. Additionally, the notify callback may be called zero or more times to                        // 14611
 *   provide a progress indication, before the promise is resolved or rejected.                                        // 14612
 *                                                                                                                     // 14613
 *   This method *returns a new promise* which is resolved or rejected via the return value of the                     // 14614
 *   `successCallback`, `errorCallback` (unless that value is a promise, in which case it is resolved                  // 14615
 *   with the value which is resolved in that promise using                                                            // 14616
 *   [promise chaining](http://www.html5rocks.com/en/tutorials/es6/promises/#toc-promises-queues)).                    // 14617
 *   It also notifies via the return value of the `notifyCallback` method. The promise cannot be                       // 14618
 *   resolved or rejected from the notifyCallback method.                                                              // 14619
 *                                                                                                                     // 14620
 * - `catch(errorCallback)` – shorthand for `promise.then(null, errorCallback)`                                        // 14621
 *                                                                                                                     // 14622
 * - `finally(callback, notifyCallback)` – allows you to observe either the fulfillment or rejection of a promise,     // 14623
 *   but to do so without modifying the final value. This is useful to release resources or do some                    // 14624
 *   clean-up that needs to be done whether the promise was rejected or resolved. See the [full                        // 14625
 *   specification](https://github.com/kriskowal/q/wiki/API-Reference#promisefinallycallback) for                      // 14626
 *   more information.                                                                                                 // 14627
 *                                                                                                                     // 14628
 * # Chaining promises                                                                                                 // 14629
 *                                                                                                                     // 14630
 * Because calling the `then` method of a promise returns a new derived promise, it is easily                          // 14631
 * possible to create a chain of promises:                                                                             // 14632
 *                                                                                                                     // 14633
 * ```js                                                                                                               // 14634
 *   promiseB = promiseA.then(function(result) {                                                                       // 14635
 *     return result + 1;                                                                                              // 14636
 *   });                                                                                                               // 14637
 *                                                                                                                     // 14638
 *   // promiseB will be resolved immediately after promiseA is resolved and its value                                 // 14639
 *   // will be the result of promiseA incremented by 1                                                                // 14640
 * ```                                                                                                                 // 14641
 *                                                                                                                     // 14642
 * It is possible to create chains of any length and since a promise can be resolved with another                      // 14643
 * promise (which will defer its resolution further), it is possible to pause/defer resolution of                      // 14644
 * the promises at any point in the chain. This makes it possible to implement powerful APIs like                      // 14645
 * $http's response interceptors.                                                                                      // 14646
 *                                                                                                                     // 14647
 *                                                                                                                     // 14648
 * # Differences between Kris Kowal's Q and $q                                                                         // 14649
 *                                                                                                                     // 14650
 *  There are two main differences:                                                                                    // 14651
 *                                                                                                                     // 14652
 * - $q is integrated with the {@link ng.$rootScope.Scope} Scope model observation                                     // 14653
 *   mechanism in angular, which means faster propagation of resolution or rejection into your                         // 14654
 *   models and avoiding unnecessary browser repaints, which would result in flickering UI.                            // 14655
 * - Q has many more features than $q, but that comes at a cost of bytes. $q is tiny, but contains                     // 14656
 *   all the important functionality needed for common async tasks.                                                    // 14657
 *                                                                                                                     // 14658
 *  # Testing                                                                                                          // 14659
 *                                                                                                                     // 14660
 *  ```js                                                                                                              // 14661
 *    it('should simulate promise', inject(function($q, $rootScope) {                                                  // 14662
 *      var deferred = $q.defer();                                                                                     // 14663
 *      var promise = deferred.promise;                                                                                // 14664
 *      var resolvedValue;                                                                                             // 14665
 *                                                                                                                     // 14666
 *      promise.then(function(value) { resolvedValue = value; });                                                      // 14667
 *      expect(resolvedValue).toBeUndefined();                                                                         // 14668
 *                                                                                                                     // 14669
 *      // Simulate resolving of promise                                                                               // 14670
 *      deferred.resolve(123);                                                                                         // 14671
 *      // Note that the 'then' function does not get called synchronously.                                            // 14672
 *      // This is because we want the promise API to always be async, whether or not                                  // 14673
 *      // it got called synchronously or asynchronously.                                                              // 14674
 *      expect(resolvedValue).toBeUndefined();                                                                         // 14675
 *                                                                                                                     // 14676
 *      // Propagate promise resolution to 'then' functions using $apply().                                            // 14677
 *      $rootScope.$apply();                                                                                           // 14678
 *      expect(resolvedValue).toEqual(123);                                                                            // 14679
 *    }));                                                                                                             // 14680
 *  ```                                                                                                                // 14681
 *                                                                                                                     // 14682
 * @param {function(function, function)} resolver Function which is responsible for resolving or                       // 14683
 *   rejecting the newly created promise. The first parameter is a function which resolves the                         // 14684
 *   promise, the second parameter is a function which rejects the promise.                                            // 14685
 *                                                                                                                     // 14686
 * @returns {Promise} The newly created promise.                                                                       // 14687
 */                                                                                                                    // 14688
function $QProvider() {                                                                                                // 14689
                                                                                                                       // 14690
  this.$get = ['$rootScope', '$exceptionHandler', function($rootScope, $exceptionHandler) {                            // 14691
    return qFactory(function(callback) {                                                                               // 14692
      $rootScope.$evalAsync(callback);                                                                                 // 14693
    }, $exceptionHandler);                                                                                             // 14694
  }];                                                                                                                  // 14695
}                                                                                                                      // 14696
                                                                                                                       // 14697
function $$QProvider() {                                                                                               // 14698
  this.$get = ['$browser', '$exceptionHandler', function($browser, $exceptionHandler) {                                // 14699
    return qFactory(function(callback) {                                                                               // 14700
      $browser.defer(callback);                                                                                        // 14701
    }, $exceptionHandler);                                                                                             // 14702
  }];                                                                                                                  // 14703
}                                                                                                                      // 14704
                                                                                                                       // 14705
/**                                                                                                                    // 14706
 * Constructs a promise manager.                                                                                       // 14707
 *                                                                                                                     // 14708
 * @param {function(function)} nextTick Function for executing functions in the next turn.                             // 14709
 * @param {function(...*)} exceptionHandler Function into which unexpected exceptions are passed for                   // 14710
 *     debugging purposes.                                                                                             // 14711
 * @returns {object} Promise manager.                                                                                  // 14712
 */                                                                                                                    // 14713
function qFactory(nextTick, exceptionHandler) {                                                                        // 14714
  var $qMinErr = minErr('$q', TypeError);                                                                              // 14715
  function callOnce(self, resolveFn, rejectFn) {                                                                       // 14716
    var called = false;                                                                                                // 14717
    function wrap(fn) {                                                                                                // 14718
      return function(value) {                                                                                         // 14719
        if (called) return;                                                                                            // 14720
        called = true;                                                                                                 // 14721
        fn.call(self, value);                                                                                          // 14722
      };                                                                                                               // 14723
    }                                                                                                                  // 14724
                                                                                                                       // 14725
    return [wrap(resolveFn), wrap(rejectFn)];                                                                          // 14726
  }                                                                                                                    // 14727
                                                                                                                       // 14728
  /**                                                                                                                  // 14729
   * @ngdoc method                                                                                                     // 14730
   * @name ng.$q#defer                                                                                                 // 14731
   * @kind function                                                                                                    // 14732
   *                                                                                                                   // 14733
   * @description                                                                                                      // 14734
   * Creates a `Deferred` object which represents a task which will finish in the future.                              // 14735
   *                                                                                                                   // 14736
   * @returns {Deferred} Returns a new instance of deferred.                                                           // 14737
   */                                                                                                                  // 14738
  var defer = function() {                                                                                             // 14739
    return new Deferred();                                                                                             // 14740
  };                                                                                                                   // 14741
                                                                                                                       // 14742
  function Promise() {                                                                                                 // 14743
    this.$$state = { status: 0 };                                                                                      // 14744
  }                                                                                                                    // 14745
                                                                                                                       // 14746
  extend(Promise.prototype, {                                                                                          // 14747
    then: function(onFulfilled, onRejected, progressBack) {                                                            // 14748
      if (isUndefined(onFulfilled) && isUndefined(onRejected) && isUndefined(progressBack)) {                          // 14749
        return this;                                                                                                   // 14750
      }                                                                                                                // 14751
      var result = new Deferred();                                                                                     // 14752
                                                                                                                       // 14753
      this.$$state.pending = this.$$state.pending || [];                                                               // 14754
      this.$$state.pending.push([result, onFulfilled, onRejected, progressBack]);                                      // 14755
      if (this.$$state.status > 0) scheduleProcessQueue(this.$$state);                                                 // 14756
                                                                                                                       // 14757
      return result.promise;                                                                                           // 14758
    },                                                                                                                 // 14759
                                                                                                                       // 14760
    "catch": function(callback) {                                                                                      // 14761
      return this.then(null, callback);                                                                                // 14762
    },                                                                                                                 // 14763
                                                                                                                       // 14764
    "finally": function(callback, progressBack) {                                                                      // 14765
      return this.then(function(value) {                                                                               // 14766
        return handleCallback(value, true, callback);                                                                  // 14767
      }, function(error) {                                                                                             // 14768
        return handleCallback(error, false, callback);                                                                 // 14769
      }, progressBack);                                                                                                // 14770
    }                                                                                                                  // 14771
  });                                                                                                                  // 14772
                                                                                                                       // 14773
  //Faster, more basic than angular.bind http://jsperf.com/angular-bind-vs-custom-vs-native                            // 14774
  function simpleBind(context, fn) {                                                                                   // 14775
    return function(value) {                                                                                           // 14776
      fn.call(context, value);                                                                                         // 14777
    };                                                                                                                 // 14778
  }                                                                                                                    // 14779
                                                                                                                       // 14780
  function processQueue(state) {                                                                                       // 14781
    var fn, deferred, pending;                                                                                         // 14782
                                                                                                                       // 14783
    pending = state.pending;                                                                                           // 14784
    state.processScheduled = false;                                                                                    // 14785
    state.pending = undefined;                                                                                         // 14786
    for (var i = 0, ii = pending.length; i < ii; ++i) {                                                                // 14787
      deferred = pending[i][0];                                                                                        // 14788
      fn = pending[i][state.status];                                                                                   // 14789
      try {                                                                                                            // 14790
        if (isFunction(fn)) {                                                                                          // 14791
          deferred.resolve(fn(state.value));                                                                           // 14792
        } else if (state.status === 1) {                                                                               // 14793
          deferred.resolve(state.value);                                                                               // 14794
        } else {                                                                                                       // 14795
          deferred.reject(state.value);                                                                                // 14796
        }                                                                                                              // 14797
      } catch (e) {                                                                                                    // 14798
        deferred.reject(e);                                                                                            // 14799
        exceptionHandler(e);                                                                                           // 14800
      }                                                                                                                // 14801
    }                                                                                                                  // 14802
  }                                                                                                                    // 14803
                                                                                                                       // 14804
  function scheduleProcessQueue(state) {                                                                               // 14805
    if (state.processScheduled || !state.pending) return;                                                              // 14806
    state.processScheduled = true;                                                                                     // 14807
    nextTick(function() { processQueue(state); });                                                                     // 14808
  }                                                                                                                    // 14809
                                                                                                                       // 14810
  function Deferred() {                                                                                                // 14811
    this.promise = new Promise();                                                                                      // 14812
    //Necessary to support unbound execution :/                                                                        // 14813
    this.resolve = simpleBind(this, this.resolve);                                                                     // 14814
    this.reject = simpleBind(this, this.reject);                                                                       // 14815
    this.notify = simpleBind(this, this.notify);                                                                       // 14816
  }                                                                                                                    // 14817
                                                                                                                       // 14818
  extend(Deferred.prototype, {                                                                                         // 14819
    resolve: function(val) {                                                                                           // 14820
      if (this.promise.$$state.status) return;                                                                         // 14821
      if (val === this.promise) {                                                                                      // 14822
        this.$$reject($qMinErr(                                                                                        // 14823
          'qcycle',                                                                                                    // 14824
          "Expected promise to be resolved with value other than itself '{0}'",                                        // 14825
          val));                                                                                                       // 14826
      } else {                                                                                                         // 14827
        this.$$resolve(val);                                                                                           // 14828
      }                                                                                                                // 14829
                                                                                                                       // 14830
    },                                                                                                                 // 14831
                                                                                                                       // 14832
    $$resolve: function(val) {                                                                                         // 14833
      var then, fns;                                                                                                   // 14834
                                                                                                                       // 14835
      fns = callOnce(this, this.$$resolve, this.$$reject);                                                             // 14836
      try {                                                                                                            // 14837
        if ((isObject(val) || isFunction(val))) then = val && val.then;                                                // 14838
        if (isFunction(then)) {                                                                                        // 14839
          this.promise.$$state.status = -1;                                                                            // 14840
          then.call(val, fns[0], fns[1], this.notify);                                                                 // 14841
        } else {                                                                                                       // 14842
          this.promise.$$state.value = val;                                                                            // 14843
          this.promise.$$state.status = 1;                                                                             // 14844
          scheduleProcessQueue(this.promise.$$state);                                                                  // 14845
        }                                                                                                              // 14846
      } catch (e) {                                                                                                    // 14847
        fns[1](e);                                                                                                     // 14848
        exceptionHandler(e);                                                                                           // 14849
      }                                                                                                                // 14850
    },                                                                                                                 // 14851
                                                                                                                       // 14852
    reject: function(reason) {                                                                                         // 14853
      if (this.promise.$$state.status) return;                                                                         // 14854
      this.$$reject(reason);                                                                                           // 14855
    },                                                                                                                 // 14856
                                                                                                                       // 14857
    $$reject: function(reason) {                                                                                       // 14858
      this.promise.$$state.value = reason;                                                                             // 14859
      this.promise.$$state.status = 2;                                                                                 // 14860
      scheduleProcessQueue(this.promise.$$state);                                                                      // 14861
    },                                                                                                                 // 14862
                                                                                                                       // 14863
    notify: function(progress) {                                                                                       // 14864
      var callbacks = this.promise.$$state.pending;                                                                    // 14865
                                                                                                                       // 14866
      if ((this.promise.$$state.status <= 0) && callbacks && callbacks.length) {                                       // 14867
        nextTick(function() {                                                                                          // 14868
          var callback, result;                                                                                        // 14869
          for (var i = 0, ii = callbacks.length; i < ii; i++) {                                                        // 14870
            result = callbacks[i][0];                                                                                  // 14871
            callback = callbacks[i][3];                                                                                // 14872
            try {                                                                                                      // 14873
              result.notify(isFunction(callback) ? callback(progress) : progress);                                     // 14874
            } catch (e) {                                                                                              // 14875
              exceptionHandler(e);                                                                                     // 14876
            }                                                                                                          // 14877
          }                                                                                                            // 14878
        });                                                                                                            // 14879
      }                                                                                                                // 14880
    }                                                                                                                  // 14881
  });                                                                                                                  // 14882
                                                                                                                       // 14883
  /**                                                                                                                  // 14884
   * @ngdoc method                                                                                                     // 14885
   * @name $q#reject                                                                                                   // 14886
   * @kind function                                                                                                    // 14887
   *                                                                                                                   // 14888
   * @description                                                                                                      // 14889
   * Creates a promise that is resolved as rejected with the specified `reason`. This api should be                    // 14890
   * used to forward rejection in a chain of promises. If you are dealing with the last promise in                     // 14891
   * a promise chain, you don't need to worry about it.                                                                // 14892
   *                                                                                                                   // 14893
   * When comparing deferreds/promises to the familiar behavior of try/catch/throw, think of                           // 14894
   * `reject` as the `throw` keyword in JavaScript. This also means that if you "catch" an error via                   // 14895
   * a promise error callback and you want to forward the error to the promise derived from the                        // 14896
   * current promise, you have to "rethrow" the error by returning a rejection constructed via                         // 14897
   * `reject`.                                                                                                         // 14898
   *                                                                                                                   // 14899
   * ```js                                                                                                             // 14900
   *   promiseB = promiseA.then(function(result) {                                                                     // 14901
   *     // success: do something and resolve promiseB                                                                 // 14902
   *     //          with the old or a new result                                                                      // 14903
   *     return result;                                                                                                // 14904
   *   }, function(reason) {                                                                                           // 14905
   *     // error: handle the error if possible and                                                                    // 14906
   *     //        resolve promiseB with newPromiseOrValue,                                                            // 14907
   *     //        otherwise forward the rejection to promiseB                                                         // 14908
   *     if (canHandle(reason)) {                                                                                      // 14909
   *      // handle the error and recover                                                                              // 14910
   *      return newPromiseOrValue;                                                                                    // 14911
   *     }                                                                                                             // 14912
   *     return $q.reject(reason);                                                                                     // 14913
   *   });                                                                                                             // 14914
   * ```                                                                                                               // 14915
   *                                                                                                                   // 14916
   * @param {*} reason Constant, message, exception or an object representing the rejection reason.                    // 14917
   * @returns {Promise} Returns a promise that was already resolved as rejected with the `reason`.                     // 14918
   */                                                                                                                  // 14919
  var reject = function(reason) {                                                                                      // 14920
    var result = new Deferred();                                                                                       // 14921
    result.reject(reason);                                                                                             // 14922
    return result.promise;                                                                                             // 14923
  };                                                                                                                   // 14924
                                                                                                                       // 14925
  var makePromise = function makePromise(value, resolved) {                                                            // 14926
    var result = new Deferred();                                                                                       // 14927
    if (resolved) {                                                                                                    // 14928
      result.resolve(value);                                                                                           // 14929
    } else {                                                                                                           // 14930
      result.reject(value);                                                                                            // 14931
    }                                                                                                                  // 14932
    return result.promise;                                                                                             // 14933
  };                                                                                                                   // 14934
                                                                                                                       // 14935
  var handleCallback = function handleCallback(value, isResolved, callback) {                                          // 14936
    var callbackOutput = null;                                                                                         // 14937
    try {                                                                                                              // 14938
      if (isFunction(callback)) callbackOutput = callback();                                                           // 14939
    } catch (e) {                                                                                                      // 14940
      return makePromise(e, false);                                                                                    // 14941
    }                                                                                                                  // 14942
    if (isPromiseLike(callbackOutput)) {                                                                               // 14943
      return callbackOutput.then(function() {                                                                          // 14944
        return makePromise(value, isResolved);                                                                         // 14945
      }, function(error) {                                                                                             // 14946
        return makePromise(error, false);                                                                              // 14947
      });                                                                                                              // 14948
    } else {                                                                                                           // 14949
      return makePromise(value, isResolved);                                                                           // 14950
    }                                                                                                                  // 14951
  };                                                                                                                   // 14952
                                                                                                                       // 14953
  /**                                                                                                                  // 14954
   * @ngdoc method                                                                                                     // 14955
   * @name $q#when                                                                                                     // 14956
   * @kind function                                                                                                    // 14957
   *                                                                                                                   // 14958
   * @description                                                                                                      // 14959
   * Wraps an object that might be a value or a (3rd party) then-able promise into a $q promise.                       // 14960
   * This is useful when you are dealing with an object that might or might not be a promise, or if                    // 14961
   * the promise comes from a source that can't be trusted.                                                            // 14962
   *                                                                                                                   // 14963
   * @param {*} value Value or a promise                                                                               // 14964
   * @param {Function=} successCallback                                                                                // 14965
   * @param {Function=} errorCallback                                                                                  // 14966
   * @param {Function=} progressCallback                                                                               // 14967
   * @returns {Promise} Returns a promise of the passed value or promise                                               // 14968
   */                                                                                                                  // 14969
                                                                                                                       // 14970
                                                                                                                       // 14971
  var when = function(value, callback, errback, progressBack) {                                                        // 14972
    var result = new Deferred();                                                                                       // 14973
    result.resolve(value);                                                                                             // 14974
    return result.promise.then(callback, errback, progressBack);                                                       // 14975
  };                                                                                                                   // 14976
                                                                                                                       // 14977
  /**                                                                                                                  // 14978
   * @ngdoc method                                                                                                     // 14979
   * @name $q#resolve                                                                                                  // 14980
   * @kind function                                                                                                    // 14981
   *                                                                                                                   // 14982
   * @description                                                                                                      // 14983
   * Alias of {@link ng.$q#when when} to maintain naming consistency with ES6.                                         // 14984
   *                                                                                                                   // 14985
   * @param {*} value Value or a promise                                                                               // 14986
   * @param {Function=} successCallback                                                                                // 14987
   * @param {Function=} errorCallback                                                                                  // 14988
   * @param {Function=} progressCallback                                                                               // 14989
   * @returns {Promise} Returns a promise of the passed value or promise                                               // 14990
   */                                                                                                                  // 14991
  var resolve = when;                                                                                                  // 14992
                                                                                                                       // 14993
  /**                                                                                                                  // 14994
   * @ngdoc method                                                                                                     // 14995
   * @name $q#all                                                                                                      // 14996
   * @kind function                                                                                                    // 14997
   *                                                                                                                   // 14998
   * @description                                                                                                      // 14999
   * Combines multiple promises into a single promise that is resolved when all of the input                           // 15000
   * promises are resolved.                                                                                            // 15001
   *                                                                                                                   // 15002
   * @param {Array.<Promise>|Object.<Promise>} promises An array or hash of promises.                                  // 15003
   * @returns {Promise} Returns a single promise that will be resolved with an array/hash of values,                   // 15004
   *   each value corresponding to the promise at the same index/key in the `promises` array/hash.                     // 15005
   *   If any of the promises is resolved with a rejection, this resulting promise will be rejected                    // 15006
   *   with the same rejection value.                                                                                  // 15007
   */                                                                                                                  // 15008
                                                                                                                       // 15009
  function all(promises) {                                                                                             // 15010
    var deferred = new Deferred(),                                                                                     // 15011
        counter = 0,                                                                                                   // 15012
        results = isArray(promises) ? [] : {};                                                                         // 15013
                                                                                                                       // 15014
    forEach(promises, function(promise, key) {                                                                         // 15015
      counter++;                                                                                                       // 15016
      when(promise).then(function(value) {                                                                             // 15017
        if (results.hasOwnProperty(key)) return;                                                                       // 15018
        results[key] = value;                                                                                          // 15019
        if (!(--counter)) deferred.resolve(results);                                                                   // 15020
      }, function(reason) {                                                                                            // 15021
        if (results.hasOwnProperty(key)) return;                                                                       // 15022
        deferred.reject(reason);                                                                                       // 15023
      });                                                                                                              // 15024
    });                                                                                                                // 15025
                                                                                                                       // 15026
    if (counter === 0) {                                                                                               // 15027
      deferred.resolve(results);                                                                                       // 15028
    }                                                                                                                  // 15029
                                                                                                                       // 15030
    return deferred.promise;                                                                                           // 15031
  }                                                                                                                    // 15032
                                                                                                                       // 15033
  var $Q = function Q(resolver) {                                                                                      // 15034
    if (!isFunction(resolver)) {                                                                                       // 15035
      throw $qMinErr('norslvr', "Expected resolverFn, got '{0}'", resolver);                                           // 15036
    }                                                                                                                  // 15037
                                                                                                                       // 15038
    if (!(this instanceof Q)) {                                                                                        // 15039
      // More useful when $Q is the Promise itself.                                                                    // 15040
      return new Q(resolver);                                                                                          // 15041
    }                                                                                                                  // 15042
                                                                                                                       // 15043
    var deferred = new Deferred();                                                                                     // 15044
                                                                                                                       // 15045
    function resolveFn(value) {                                                                                        // 15046
      deferred.resolve(value);                                                                                         // 15047
    }                                                                                                                  // 15048
                                                                                                                       // 15049
    function rejectFn(reason) {                                                                                        // 15050
      deferred.reject(reason);                                                                                         // 15051
    }                                                                                                                  // 15052
                                                                                                                       // 15053
    resolver(resolveFn, rejectFn);                                                                                     // 15054
                                                                                                                       // 15055
    return deferred.promise;                                                                                           // 15056
  };                                                                                                                   // 15057
                                                                                                                       // 15058
  $Q.defer = defer;                                                                                                    // 15059
  $Q.reject = reject;                                                                                                  // 15060
  $Q.when = when;                                                                                                      // 15061
  $Q.resolve = resolve;                                                                                                // 15062
  $Q.all = all;                                                                                                        // 15063
                                                                                                                       // 15064
  return $Q;                                                                                                           // 15065
}                                                                                                                      // 15066
                                                                                                                       // 15067
function $$RAFProvider() { //rAF                                                                                       // 15068
  this.$get = ['$window', '$timeout', function($window, $timeout) {                                                    // 15069
    var requestAnimationFrame = $window.requestAnimationFrame ||                                                       // 15070
                                $window.webkitRequestAnimationFrame;                                                   // 15071
                                                                                                                       // 15072
    var cancelAnimationFrame = $window.cancelAnimationFrame ||                                                         // 15073
                               $window.webkitCancelAnimationFrame ||                                                   // 15074
                               $window.webkitCancelRequestAnimationFrame;                                              // 15075
                                                                                                                       // 15076
    var rafSupported = !!requestAnimationFrame;                                                                        // 15077
    var raf = rafSupported                                                                                             // 15078
      ? function(fn) {                                                                                                 // 15079
          var id = requestAnimationFrame(fn);                                                                          // 15080
          return function() {                                                                                          // 15081
            cancelAnimationFrame(id);                                                                                  // 15082
          };                                                                                                           // 15083
        }                                                                                                              // 15084
      : function(fn) {                                                                                                 // 15085
          var timer = $timeout(fn, 16.66, false); // 1000 / 60 = 16.666                                                // 15086
          return function() {                                                                                          // 15087
            $timeout.cancel(timer);                                                                                    // 15088
          };                                                                                                           // 15089
        };                                                                                                             // 15090
                                                                                                                       // 15091
    raf.supported = rafSupported;                                                                                      // 15092
                                                                                                                       // 15093
    return raf;                                                                                                        // 15094
  }];                                                                                                                  // 15095
}                                                                                                                      // 15096
                                                                                                                       // 15097
/**                                                                                                                    // 15098
 * DESIGN NOTES                                                                                                        // 15099
 *                                                                                                                     // 15100
 * The design decisions behind the scope are heavily favored for speed and memory consumption.                         // 15101
 *                                                                                                                     // 15102
 * The typical use of scope is to watch the expressions, which most of the time return the same                        // 15103
 * value as last time so we optimize the operation.                                                                    // 15104
 *                                                                                                                     // 15105
 * Closures construction is expensive in terms of speed as well as memory:                                             // 15106
 *   - No closures, instead use prototypical inheritance for API                                                       // 15107
 *   - Internal state needs to be stored on scope directly, which means that private state is                          // 15108
 *     exposed as $$____ properties                                                                                    // 15109
 *                                                                                                                     // 15110
 * Loop operations are optimized by using while(count--) { ... }                                                       // 15111
 *   - This means that in order to keep the same order of execution as addition we have to add                         // 15112
 *     items to the array at the beginning (unshift) instead of at the end (push)                                      // 15113
 *                                                                                                                     // 15114
 * Child scopes are created and removed often                                                                          // 15115
 *   - Using an array would be slow since inserts in the middle are expensive; so we use linked lists                  // 15116
 *                                                                                                                     // 15117
 * There are fewer watches than observers. This is why you don't want the observer to be implemented                   // 15118
 * in the same way as watch. Watch requires return of the initialization function which is expensive                   // 15119
 * to construct.                                                                                                       // 15120
 */                                                                                                                    // 15121
                                                                                                                       // 15122
                                                                                                                       // 15123
/**                                                                                                                    // 15124
 * @ngdoc provider                                                                                                     // 15125
 * @name $rootScopeProvider                                                                                            // 15126
 * @description                                                                                                        // 15127
 *                                                                                                                     // 15128
 * Provider for the $rootScope service.                                                                                // 15129
 */                                                                                                                    // 15130
                                                                                                                       // 15131
/**                                                                                                                    // 15132
 * @ngdoc method                                                                                                       // 15133
 * @name $rootScopeProvider#digestTtl                                                                                  // 15134
 * @description                                                                                                        // 15135
 *                                                                                                                     // 15136
 * Sets the number of `$digest` iterations the scope should attempt to execute before giving up and                    // 15137
 * assuming that the model is unstable.                                                                                // 15138
 *                                                                                                                     // 15139
 * The current default is 10 iterations.                                                                               // 15140
 *                                                                                                                     // 15141
 * In complex applications it's possible that the dependencies between `$watch`s will result in                        // 15142
 * several digest iterations. However if an application needs more than the default 10 digest                          // 15143
 * iterations for its model to stabilize then you should investigate what is causing the model to                      // 15144
 * continuously change during the digest.                                                                              // 15145
 *                                                                                                                     // 15146
 * Increasing the TTL could have performance implications, so you should not change it without                         // 15147
 * proper justification.                                                                                               // 15148
 *                                                                                                                     // 15149
 * @param {number} limit The number of digest iterations.                                                              // 15150
 */                                                                                                                    // 15151
                                                                                                                       // 15152
                                                                                                                       // 15153
/**                                                                                                                    // 15154
 * @ngdoc service                                                                                                      // 15155
 * @name $rootScope                                                                                                    // 15156
 * @description                                                                                                        // 15157
 *                                                                                                                     // 15158
 * Every application has a single root {@link ng.$rootScope.Scope scope}.                                              // 15159
 * All other scopes are descendant scopes of the root scope. Scopes provide separation                                 // 15160
 * between the model and the view, via a mechanism for watching the model for changes.                                 // 15161
 * They also provide event emission/broadcast and subscription facility. See the                                       // 15162
 * {@link guide/scope developer guide on scopes}.                                                                      // 15163
 */                                                                                                                    // 15164
function $RootScopeProvider() {                                                                                        // 15165
  var TTL = 10;                                                                                                        // 15166
  var $rootScopeMinErr = minErr('$rootScope');                                                                         // 15167
  var lastDirtyWatch = null;                                                                                           // 15168
  var applyAsyncId = null;                                                                                             // 15169
                                                                                                                       // 15170
  this.digestTtl = function(value) {                                                                                   // 15171
    if (arguments.length) {                                                                                            // 15172
      TTL = value;                                                                                                     // 15173
    }                                                                                                                  // 15174
    return TTL;                                                                                                        // 15175
  };                                                                                                                   // 15176
                                                                                                                       // 15177
  function createChildScopeClass(parent) {                                                                             // 15178
    function ChildScope() {                                                                                            // 15179
      this.$$watchers = this.$$nextSibling =                                                                           // 15180
          this.$$childHead = this.$$childTail = null;                                                                  // 15181
      this.$$listeners = {};                                                                                           // 15182
      this.$$listenerCount = {};                                                                                       // 15183
      this.$$watchersCount = 0;                                                                                        // 15184
      this.$id = nextUid();                                                                                            // 15185
      this.$$ChildScope = null;                                                                                        // 15186
    }                                                                                                                  // 15187
    ChildScope.prototype = parent;                                                                                     // 15188
    return ChildScope;                                                                                                 // 15189
  }                                                                                                                    // 15190
                                                                                                                       // 15191
  this.$get = ['$injector', '$exceptionHandler', '$parse', '$browser',                                                 // 15192
      function($injector, $exceptionHandler, $parse, $browser) {                                                       // 15193
                                                                                                                       // 15194
    function destroyChildScope($event) {                                                                               // 15195
        $event.currentScope.$$destroyed = true;                                                                        // 15196
    }                                                                                                                  // 15197
                                                                                                                       // 15198
    function cleanUpScope($scope) {                                                                                    // 15199
                                                                                                                       // 15200
      if (msie === 9) {                                                                                                // 15201
        // There is a memory leak in IE9 if all child scopes are not disconnected                                      // 15202
        // completely when a scope is destroyed. So this code will recurse up through                                  // 15203
        // all this scopes children                                                                                    // 15204
        //                                                                                                             // 15205
        // See issue https://github.com/angular/angular.js/issues/10706                                                // 15206
        $scope.$$childHead && cleanUpScope($scope.$$childHead);                                                        // 15207
        $scope.$$nextSibling && cleanUpScope($scope.$$nextSibling);                                                    // 15208
      }                                                                                                                // 15209
                                                                                                                       // 15210
      // The code below works around IE9 and V8's memory leaks                                                         // 15211
      //                                                                                                               // 15212
      // See:                                                                                                          // 15213
      // - https://code.google.com/p/v8/issues/detail?id=2073#c26                                                      // 15214
      // - https://github.com/angular/angular.js/issues/6794#issuecomment-38648909                                     // 15215
      // - https://github.com/angular/angular.js/issues/1313#issuecomment-10378451                                     // 15216
                                                                                                                       // 15217
      $scope.$parent = $scope.$$nextSibling = $scope.$$prevSibling = $scope.$$childHead =                              // 15218
          $scope.$$childTail = $scope.$root = $scope.$$watchers = null;                                                // 15219
    }                                                                                                                  // 15220
                                                                                                                       // 15221
    /**                                                                                                                // 15222
     * @ngdoc type                                                                                                     // 15223
     * @name $rootScope.Scope                                                                                          // 15224
     *                                                                                                                 // 15225
     * @description                                                                                                    // 15226
     * A root scope can be retrieved using the {@link ng.$rootScope $rootScope} key from the                           // 15227
     * {@link auto.$injector $injector}. Child scopes are created using the                                            // 15228
     * {@link ng.$rootScope.Scope#$new $new()} method. (Most scopes are created automatically when                     // 15229
     * compiled HTML template is executed.) See also the {@link guide/scope Scopes guide} for                          // 15230
     * an in-depth introduction and usage examples.                                                                    // 15231
     *                                                                                                                 // 15232
     *                                                                                                                 // 15233
     * # Inheritance                                                                                                   // 15234
     * A scope can inherit from a parent scope, as in this example:                                                    // 15235
     * ```js                                                                                                           // 15236
         var parent = $rootScope;                                                                                      // 15237
         var child = parent.$new();                                                                                    // 15238
                                                                                                                       // 15239
         parent.salutation = "Hello";                                                                                  // 15240
         expect(child.salutation).toEqual('Hello');                                                                    // 15241
                                                                                                                       // 15242
         child.salutation = "Welcome";                                                                                 // 15243
         expect(child.salutation).toEqual('Welcome');                                                                  // 15244
         expect(parent.salutation).toEqual('Hello');                                                                   // 15245
     * ```                                                                                                             // 15246
     *                                                                                                                 // 15247
     * When interacting with `Scope` in tests, additional helper methods are available on the                          // 15248
     * instances of `Scope` type. See {@link ngMock.$rootScope.Scope ngMock Scope} for additional                      // 15249
     * details.                                                                                                        // 15250
     *                                                                                                                 // 15251
     *                                                                                                                 // 15252
     * @param {Object.<string, function()>=} providers Map of service factory which need to be                         // 15253
     *                                       provided for the current scope. Defaults to {@link ng}.                   // 15254
     * @param {Object.<string, *>=} instanceCache Provides pre-instantiated services which should                      // 15255
     *                              append/override services provided by `providers`. This is handy                    // 15256
     *                              when unit-testing and having the need to override a default                        // 15257
     *                              service.                                                                           // 15258
     * @returns {Object} Newly created scope.                                                                          // 15259
     *                                                                                                                 // 15260
     */                                                                                                                // 15261
    function Scope() {                                                                                                 // 15262
      this.$id = nextUid();                                                                                            // 15263
      this.$$phase = this.$parent = this.$$watchers =                                                                  // 15264
                     this.$$nextSibling = this.$$prevSibling =                                                         // 15265
                     this.$$childHead = this.$$childTail = null;                                                       // 15266
      this.$root = this;                                                                                               // 15267
      this.$$destroyed = false;                                                                                        // 15268
      this.$$listeners = {};                                                                                           // 15269
      this.$$listenerCount = {};                                                                                       // 15270
      this.$$watchersCount = 0;                                                                                        // 15271
      this.$$isolateBindings = null;                                                                                   // 15272
    }                                                                                                                  // 15273
                                                                                                                       // 15274
    /**                                                                                                                // 15275
     * @ngdoc property                                                                                                 // 15276
     * @name $rootScope.Scope#$id                                                                                      // 15277
     *                                                                                                                 // 15278
     * @description                                                                                                    // 15279
     * Unique scope ID (monotonically increasing) useful for debugging.                                                // 15280
     */                                                                                                                // 15281
                                                                                                                       // 15282
     /**                                                                                                               // 15283
      * @ngdoc property                                                                                                // 15284
      * @name $rootScope.Scope#$parent                                                                                 // 15285
      *                                                                                                                // 15286
      * @description                                                                                                   // 15287
      * Reference to the parent scope.                                                                                 // 15288
      */                                                                                                               // 15289
                                                                                                                       // 15290
      /**                                                                                                              // 15291
       * @ngdoc property                                                                                               // 15292
       * @name $rootScope.Scope#$root                                                                                  // 15293
       *                                                                                                               // 15294
       * @description                                                                                                  // 15295
       * Reference to the root scope.                                                                                  // 15296
       */                                                                                                              // 15297
                                                                                                                       // 15298
    Scope.prototype = {                                                                                                // 15299
      constructor: Scope,                                                                                              // 15300
      /**                                                                                                              // 15301
       * @ngdoc method                                                                                                 // 15302
       * @name $rootScope.Scope#$new                                                                                   // 15303
       * @kind function                                                                                                // 15304
       *                                                                                                               // 15305
       * @description                                                                                                  // 15306
       * Creates a new child {@link ng.$rootScope.Scope scope}.                                                        // 15307
       *                                                                                                               // 15308
       * The parent scope will propagate the {@link ng.$rootScope.Scope#$digest $digest()} event.                      // 15309
       * The scope can be removed from the scope hierarchy using {@link ng.$rootScope.Scope#$destroy $destroy()}.      // 15310
       *                                                                                                               // 15311
       * {@link ng.$rootScope.Scope#$destroy $destroy()} must be called on a scope when it is                          // 15312
       * desired for the scope and its child scopes to be permanently detached from the parent and                     // 15313
       * thus stop participating in model change detection and listener notification by invoking.                      // 15314
       *                                                                                                               // 15315
       * @param {boolean} isolate If true, then the scope does not prototypically inherit from the                     // 15316
       *         parent scope. The scope is isolated, as it can not see parent scope properties.                       // 15317
       *         When creating widgets, it is useful for the widget to not accidentally read parent                    // 15318
       *         state.                                                                                                // 15319
       *                                                                                                               // 15320
       * @param {Scope} [parent=this] The {@link ng.$rootScope.Scope `Scope`} that will be the `$parent`               // 15321
       *                              of the newly created scope. Defaults to `this` scope if not provided.            // 15322
       *                              This is used when creating a transclude scope to correctly place it              // 15323
       *                              in the scope hierarchy while maintaining the correct prototypical                // 15324
       *                              inheritance.                                                                     // 15325
       *                                                                                                               // 15326
       * @returns {Object} The newly created child scope.                                                              // 15327
       *                                                                                                               // 15328
       */                                                                                                              // 15329
      $new: function(isolate, parent) {                                                                                // 15330
        var child;                                                                                                     // 15331
                                                                                                                       // 15332
        parent = parent || this;                                                                                       // 15333
                                                                                                                       // 15334
        if (isolate) {                                                                                                 // 15335
          child = new Scope();                                                                                         // 15336
          child.$root = this.$root;                                                                                    // 15337
        } else {                                                                                                       // 15338
          // Only create a child scope class if somebody asks for one,                                                 // 15339
          // but cache it to allow the VM to optimize lookups.                                                         // 15340
          if (!this.$$ChildScope) {                                                                                    // 15341
            this.$$ChildScope = createChildScopeClass(this);                                                           // 15342
          }                                                                                                            // 15343
          child = new this.$$ChildScope();                                                                             // 15344
        }                                                                                                              // 15345
        child.$parent = parent;                                                                                        // 15346
        child.$$prevSibling = parent.$$childTail;                                                                      // 15347
        if (parent.$$childHead) {                                                                                      // 15348
          parent.$$childTail.$$nextSibling = child;                                                                    // 15349
          parent.$$childTail = child;                                                                                  // 15350
        } else {                                                                                                       // 15351
          parent.$$childHead = parent.$$childTail = child;                                                             // 15352
        }                                                                                                              // 15353
                                                                                                                       // 15354
        // When the new scope is not isolated or we inherit from `this`, and                                           // 15355
        // the parent scope is destroyed, the property `$$destroyed` is inherited                                      // 15356
        // prototypically. In all other cases, this property needs to be set                                           // 15357
        // when the parent scope is destroyed.                                                                         // 15358
        // The listener needs to be added after the parent is set                                                      // 15359
        if (isolate || parent != this) child.$on('$destroy', destroyChildScope);                                       // 15360
                                                                                                                       // 15361
        return child;                                                                                                  // 15362
      },                                                                                                               // 15363
                                                                                                                       // 15364
      /**                                                                                                              // 15365
       * @ngdoc method                                                                                                 // 15366
       * @name $rootScope.Scope#$watch                                                                                 // 15367
       * @kind function                                                                                                // 15368
       *                                                                                                               // 15369
       * @description                                                                                                  // 15370
       * Registers a `listener` callback to be executed whenever the `watchExpression` changes.                        // 15371
       *                                                                                                               // 15372
       * - The `watchExpression` is called on every call to {@link ng.$rootScope.Scope#$digest                         // 15373
       *   $digest()} and should return the value that will be watched. (`watchExpression` should not change           // 15374
       *   its value when executed multiple times with the same input because it may be executed multiple              // 15375
       *   times by {@link ng.$rootScope.Scope#$digest $digest()}. That is, `watchExpression` should be                // 15376
       *   [idempotent](http://en.wikipedia.org/wiki/Idempotence).                                                     // 15377
       * - The `listener` is called only when the value from the current `watchExpression` and the                     // 15378
       *   previous call to `watchExpression` are not equal (with the exception of the initial run,                    // 15379
       *   see below). Inequality is determined according to reference inequality,                                     // 15380
       *   [strict comparison](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators)
       *    via the `!==` Javascript operator, unless `objectEquality == true`                                         // 15382
       *   (see next point)                                                                                            // 15383
       * - When `objectEquality == true`, inequality of the `watchExpression` is determined                            // 15384
       *   according to the {@link angular.equals} function. To save the value of the object for                       // 15385
       *   later comparison, the {@link angular.copy} function is used. This therefore means that                      // 15386
       *   watching complex objects will have adverse memory and performance implications.                             // 15387
       * - The watch `listener` may change the model, which may trigger other `listener`s to fire.                     // 15388
       *   This is achieved by rerunning the watchers until no changes are detected. The rerun                         // 15389
       *   iteration limit is 10 to prevent an infinite loop deadlock.                                                 // 15390
       *                                                                                                               // 15391
       *                                                                                                               // 15392
       * If you want to be notified whenever {@link ng.$rootScope.Scope#$digest $digest} is called,                    // 15393
       * you can register a `watchExpression` function with no `listener`. (Be prepared for                            // 15394
       * multiple calls to your `watchExpression` because it will execute multiple times in a                          // 15395
       * single {@link ng.$rootScope.Scope#$digest $digest} cycle if a change is detected.)                            // 15396
       *                                                                                                               // 15397
       * After a watcher is registered with the scope, the `listener` fn is called asynchronously                      // 15398
       * (via {@link ng.$rootScope.Scope#$evalAsync $evalAsync}) to initialize the                                     // 15399
       * watcher. In rare cases, this is undesirable because the listener is called when the result                    // 15400
       * of `watchExpression` didn't change. To detect this scenario within the `listener` fn, you                     // 15401
       * can compare the `newVal` and `oldVal`. If these two values are identical (`===`) then the                     // 15402
       * listener was called due to initialization.                                                                    // 15403
       *                                                                                                               // 15404
       *                                                                                                               // 15405
       *                                                                                                               // 15406
       * # Example                                                                                                     // 15407
       * ```js                                                                                                         // 15408
           // let's assume that scope was dependency injected as the $rootScope                                        // 15409
           var scope = $rootScope;                                                                                     // 15410
           scope.name = 'misko';                                                                                       // 15411
           scope.counter = 0;                                                                                          // 15412
                                                                                                                       // 15413
           expect(scope.counter).toEqual(0);                                                                           // 15414
           scope.$watch('name', function(newValue, oldValue) {                                                         // 15415
             scope.counter = scope.counter + 1;                                                                        // 15416
           });                                                                                                         // 15417
           expect(scope.counter).toEqual(0);                                                                           // 15418
                                                                                                                       // 15419
           scope.$digest();                                                                                            // 15420
           // the listener is always called during the first $digest loop after it was registered                      // 15421
           expect(scope.counter).toEqual(1);                                                                           // 15422
                                                                                                                       // 15423
           scope.$digest();                                                                                            // 15424
           // but now it will not be called unless the value changes                                                   // 15425
           expect(scope.counter).toEqual(1);                                                                           // 15426
                                                                                                                       // 15427
           scope.name = 'adam';                                                                                        // 15428
           scope.$digest();                                                                                            // 15429
           expect(scope.counter).toEqual(2);                                                                           // 15430
                                                                                                                       // 15431
                                                                                                                       // 15432
                                                                                                                       // 15433
           // Using a function as a watchExpression                                                                    // 15434
           var food;                                                                                                   // 15435
           scope.foodCounter = 0;                                                                                      // 15436
           expect(scope.foodCounter).toEqual(0);                                                                       // 15437
           scope.$watch(                                                                                               // 15438
             // This function returns the value being watched. It is called for each turn of the $digest loop          // 15439
             function() { return food; },                                                                              // 15440
             // This is the change listener, called when the value returned from the above function changes            // 15441
             function(newValue, oldValue) {                                                                            // 15442
               if ( newValue !== oldValue ) {                                                                          // 15443
                 // Only increment the counter if the value changed                                                    // 15444
                 scope.foodCounter = scope.foodCounter + 1;                                                            // 15445
               }                                                                                                       // 15446
             }                                                                                                         // 15447
           );                                                                                                          // 15448
           // No digest has been run so the counter will be zero                                                       // 15449
           expect(scope.foodCounter).toEqual(0);                                                                       // 15450
                                                                                                                       // 15451
           // Run the digest but since food has not changed count will still be zero                                   // 15452
           scope.$digest();                                                                                            // 15453
           expect(scope.foodCounter).toEqual(0);                                                                       // 15454
                                                                                                                       // 15455
           // Update food and run digest.  Now the counter will increment                                              // 15456
           food = 'cheeseburger';                                                                                      // 15457
           scope.$digest();                                                                                            // 15458
           expect(scope.foodCounter).toEqual(1);                                                                       // 15459
                                                                                                                       // 15460
       * ```                                                                                                           // 15461
       *                                                                                                               // 15462
       *                                                                                                               // 15463
       *                                                                                                               // 15464
       * @param {(function()|string)} watchExpression Expression that is evaluated on each                             // 15465
       *    {@link ng.$rootScope.Scope#$digest $digest} cycle. A change in the return value triggers                   // 15466
       *    a call to the `listener`.                                                                                  // 15467
       *                                                                                                               // 15468
       *    - `string`: Evaluated as {@link guide/expression expression}                                               // 15469
       *    - `function(scope)`: called with current `scope` as a parameter.                                           // 15470
       * @param {function(newVal, oldVal, scope)} listener Callback called whenever the value                          // 15471
       *    of `watchExpression` changes.                                                                              // 15472
       *                                                                                                               // 15473
       *    - `newVal` contains the current value of the `watchExpression`                                             // 15474
       *    - `oldVal` contains the previous value of the `watchExpression`                                            // 15475
       *    - `scope` refers to the current scope                                                                      // 15476
       * @param {boolean=} objectEquality Compare for object equality using {@link angular.equals} instead of          // 15477
       *     comparing for reference equality.                                                                         // 15478
       * @returns {function()} Returns a deregistration function for this listener.                                    // 15479
       */                                                                                                              // 15480
      $watch: function(watchExp, listener, objectEquality, prettyPrintExpression) {                                    // 15481
        var get = $parse(watchExp);                                                                                    // 15482
                                                                                                                       // 15483
        if (get.$$watchDelegate) {                                                                                     // 15484
          return get.$$watchDelegate(this, listener, objectEquality, get, watchExp);                                   // 15485
        }                                                                                                              // 15486
        var scope = this,                                                                                              // 15487
            array = scope.$$watchers,                                                                                  // 15488
            watcher = {                                                                                                // 15489
              fn: listener,                                                                                            // 15490
              last: initWatchVal,                                                                                      // 15491
              get: get,                                                                                                // 15492
              exp: prettyPrintExpression || watchExp,                                                                  // 15493
              eq: !!objectEquality                                                                                     // 15494
            };                                                                                                         // 15495
                                                                                                                       // 15496
        lastDirtyWatch = null;                                                                                         // 15497
                                                                                                                       // 15498
        if (!isFunction(listener)) {                                                                                   // 15499
          watcher.fn = noop;                                                                                           // 15500
        }                                                                                                              // 15501
                                                                                                                       // 15502
        if (!array) {                                                                                                  // 15503
          array = scope.$$watchers = [];                                                                               // 15504
        }                                                                                                              // 15505
        // we use unshift since we use a while loop in $digest for speed.                                              // 15506
        // the while loop reads in reverse order.                                                                      // 15507
        array.unshift(watcher);                                                                                        // 15508
        incrementWatchersCount(this, 1);                                                                               // 15509
                                                                                                                       // 15510
        return function deregisterWatch() {                                                                            // 15511
          if (arrayRemove(array, watcher) >= 0) {                                                                      // 15512
            incrementWatchersCount(scope, -1);                                                                         // 15513
          }                                                                                                            // 15514
          lastDirtyWatch = null;                                                                                       // 15515
        };                                                                                                             // 15516
      },                                                                                                               // 15517
                                                                                                                       // 15518
      /**                                                                                                              // 15519
       * @ngdoc method                                                                                                 // 15520
       * @name $rootScope.Scope#$watchGroup                                                                            // 15521
       * @kind function                                                                                                // 15522
       *                                                                                                               // 15523
       * @description                                                                                                  // 15524
       * A variant of {@link ng.$rootScope.Scope#$watch $watch()} where it watches an array of `watchExpressions`.     // 15525
       * If any one expression in the collection changes the `listener` is executed.                                   // 15526
       *                                                                                                               // 15527
       * - The items in the `watchExpressions` array are observed via standard $watch operation and are examined on every
       *   call to $digest() to see if any items changes.                                                              // 15529
       * - The `listener` is called whenever any expression in the `watchExpressions` array changes.                   // 15530
       *                                                                                                               // 15531
       * @param {Array.<string|Function(scope)>} watchExpressions Array of expressions that will be individually       // 15532
       * watched using {@link ng.$rootScope.Scope#$watch $watch()}                                                     // 15533
       *                                                                                                               // 15534
       * @param {function(newValues, oldValues, scope)} listener Callback called whenever the return value of any      // 15535
       *    expression in `watchExpressions` changes                                                                   // 15536
       *    The `newValues` array contains the current values of the `watchExpressions`, with the indexes matching     // 15537
       *    those of `watchExpression`                                                                                 // 15538
       *    and the `oldValues` array contains the previous values of the `watchExpressions`, with the indexes matching
       *    those of `watchExpression`                                                                                 // 15540
       *    The `scope` refers to the current scope.                                                                   // 15541
       * @returns {function()} Returns a de-registration function for all listeners.                                   // 15542
       */                                                                                                              // 15543
      $watchGroup: function(watchExpressions, listener) {                                                              // 15544
        var oldValues = new Array(watchExpressions.length);                                                            // 15545
        var newValues = new Array(watchExpressions.length);                                                            // 15546
        var deregisterFns = [];                                                                                        // 15547
        var self = this;                                                                                               // 15548
        var changeReactionScheduled = false;                                                                           // 15549
        var firstRun = true;                                                                                           // 15550
                                                                                                                       // 15551
        if (!watchExpressions.length) {                                                                                // 15552
          // No expressions means we call the listener ASAP                                                            // 15553
          var shouldCall = true;                                                                                       // 15554
          self.$evalAsync(function() {                                                                                 // 15555
            if (shouldCall) listener(newValues, newValues, self);                                                      // 15556
          });                                                                                                          // 15557
          return function deregisterWatchGroup() {                                                                     // 15558
            shouldCall = false;                                                                                        // 15559
          };                                                                                                           // 15560
        }                                                                                                              // 15561
                                                                                                                       // 15562
        if (watchExpressions.length === 1) {                                                                           // 15563
          // Special case size of one                                                                                  // 15564
          return this.$watch(watchExpressions[0], function watchGroupAction(value, oldValue, scope) {                  // 15565
            newValues[0] = value;                                                                                      // 15566
            oldValues[0] = oldValue;                                                                                   // 15567
            listener(newValues, (value === oldValue) ? newValues : oldValues, scope);                                  // 15568
          });                                                                                                          // 15569
        }                                                                                                              // 15570
                                                                                                                       // 15571
        forEach(watchExpressions, function(expr, i) {                                                                  // 15572
          var unwatchFn = self.$watch(expr, function watchGroupSubAction(value, oldValue) {                            // 15573
            newValues[i] = value;                                                                                      // 15574
            oldValues[i] = oldValue;                                                                                   // 15575
            if (!changeReactionScheduled) {                                                                            // 15576
              changeReactionScheduled = true;                                                                          // 15577
              self.$evalAsync(watchGroupAction);                                                                       // 15578
            }                                                                                                          // 15579
          });                                                                                                          // 15580
          deregisterFns.push(unwatchFn);                                                                               // 15581
        });                                                                                                            // 15582
                                                                                                                       // 15583
        function watchGroupAction() {                                                                                  // 15584
          changeReactionScheduled = false;                                                                             // 15585
                                                                                                                       // 15586
          if (firstRun) {                                                                                              // 15587
            firstRun = false;                                                                                          // 15588
            listener(newValues, newValues, self);                                                                      // 15589
          } else {                                                                                                     // 15590
            listener(newValues, oldValues, self);                                                                      // 15591
          }                                                                                                            // 15592
        }                                                                                                              // 15593
                                                                                                                       // 15594
        return function deregisterWatchGroup() {                                                                       // 15595
          while (deregisterFns.length) {                                                                               // 15596
            deregisterFns.shift()();                                                                                   // 15597
          }                                                                                                            // 15598
        };                                                                                                             // 15599
      },                                                                                                               // 15600
                                                                                                                       // 15601
                                                                                                                       // 15602
      /**                                                                                                              // 15603
       * @ngdoc method                                                                                                 // 15604
       * @name $rootScope.Scope#$watchCollection                                                                       // 15605
       * @kind function                                                                                                // 15606
       *                                                                                                               // 15607
       * @description                                                                                                  // 15608
       * Shallow watches the properties of an object and fires whenever any of the properties change                   // 15609
       * (for arrays, this implies watching the array items; for object maps, this implies watching                    // 15610
       * the properties). If a change is detected, the `listener` callback is fired.                                   // 15611
       *                                                                                                               // 15612
       * - The `obj` collection is observed via standard $watch operation and is examined on every                     // 15613
       *   call to $digest() to see if any items have been added, removed, or moved.                                   // 15614
       * - The `listener` is called whenever anything within the `obj` has changed. Examples include                   // 15615
       *   adding, removing, and moving items belonging to an object or array.                                         // 15616
       *                                                                                                               // 15617
       *                                                                                                               // 15618
       * # Example                                                                                                     // 15619
       * ```js                                                                                                         // 15620
          $scope.names = ['igor', 'matias', 'misko', 'james'];                                                         // 15621
          $scope.dataCount = 4;                                                                                        // 15622
                                                                                                                       // 15623
          $scope.$watchCollection('names', function(newNames, oldNames) {                                              // 15624
            $scope.dataCount = newNames.length;                                                                        // 15625
          });                                                                                                          // 15626
                                                                                                                       // 15627
          expect($scope.dataCount).toEqual(4);                                                                         // 15628
          $scope.$digest();                                                                                            // 15629
                                                                                                                       // 15630
          //still at 4 ... no changes                                                                                  // 15631
          expect($scope.dataCount).toEqual(4);                                                                         // 15632
                                                                                                                       // 15633
          $scope.names.pop();                                                                                          // 15634
          $scope.$digest();                                                                                            // 15635
                                                                                                                       // 15636
          //now there's been a change                                                                                  // 15637
          expect($scope.dataCount).toEqual(3);                                                                         // 15638
       * ```                                                                                                           // 15639
       *                                                                                                               // 15640
       *                                                                                                               // 15641
       * @param {string|function(scope)} obj Evaluated as {@link guide/expression expression}. The                     // 15642
       *    expression value should evaluate to an object or an array which is observed on each                        // 15643
       *    {@link ng.$rootScope.Scope#$digest $digest} cycle. Any shallow change within the                           // 15644
       *    collection will trigger a call to the `listener`.                                                          // 15645
       *                                                                                                               // 15646
       * @param {function(newCollection, oldCollection, scope)} listener a callback function called                    // 15647
       *    when a change is detected.                                                                                 // 15648
       *    - The `newCollection` object is the newly modified data obtained from the `obj` expression                 // 15649
       *    - The `oldCollection` object is a copy of the former collection data.                                      // 15650
       *      Due to performance considerations, the`oldCollection` value is computed only if the                      // 15651
       *      `listener` function declares two or more arguments.                                                      // 15652
       *    - The `scope` argument refers to the current scope.                                                        // 15653
       *                                                                                                               // 15654
       * @returns {function()} Returns a de-registration function for this listener. When the                          // 15655
       *    de-registration function is executed, the internal watch operation is terminated.                          // 15656
       */                                                                                                              // 15657
      $watchCollection: function(obj, listener) {                                                                      // 15658
        $watchCollectionInterceptor.$stateful = true;                                                                  // 15659
                                                                                                                       // 15660
        var self = this;                                                                                               // 15661
        // the current value, updated on each dirty-check run                                                          // 15662
        var newValue;                                                                                                  // 15663
        // a shallow copy of the newValue from the last dirty-check run,                                               // 15664
        // updated to match newValue during dirty-check run                                                            // 15665
        var oldValue;                                                                                                  // 15666
        // a shallow copy of the newValue from when the last change happened                                           // 15667
        var veryOldValue;                                                                                              // 15668
        // only track veryOldValue if the listener is asking for it                                                    // 15669
        var trackVeryOldValue = (listener.length > 1);                                                                 // 15670
        var changeDetected = 0;                                                                                        // 15671
        var changeDetector = $parse(obj, $watchCollectionInterceptor);                                                 // 15672
        var internalArray = [];                                                                                        // 15673
        var internalObject = {};                                                                                       // 15674
        var initRun = true;                                                                                            // 15675
        var oldLength = 0;                                                                                             // 15676
                                                                                                                       // 15677
        function $watchCollectionInterceptor(_value) {                                                                 // 15678
          newValue = _value;                                                                                           // 15679
          var newLength, key, bothNaN, newItem, oldItem;                                                               // 15680
                                                                                                                       // 15681
          // If the new value is undefined, then return undefined as the watch may be a one-time watch                 // 15682
          if (isUndefined(newValue)) return;                                                                           // 15683
                                                                                                                       // 15684
          if (!isObject(newValue)) { // if primitive                                                                   // 15685
            if (oldValue !== newValue) {                                                                               // 15686
              oldValue = newValue;                                                                                     // 15687
              changeDetected++;                                                                                        // 15688
            }                                                                                                          // 15689
          } else if (isArrayLike(newValue)) {                                                                          // 15690
            if (oldValue !== internalArray) {                                                                          // 15691
              // we are transitioning from something which was not an array into array.                                // 15692
              oldValue = internalArray;                                                                                // 15693
              oldLength = oldValue.length = 0;                                                                         // 15694
              changeDetected++;                                                                                        // 15695
            }                                                                                                          // 15696
                                                                                                                       // 15697
            newLength = newValue.length;                                                                               // 15698
                                                                                                                       // 15699
            if (oldLength !== newLength) {                                                                             // 15700
              // if lengths do not match we need to trigger change notification                                        // 15701
              changeDetected++;                                                                                        // 15702
              oldValue.length = oldLength = newLength;                                                                 // 15703
            }                                                                                                          // 15704
            // copy the items to oldValue and look for changes.                                                        // 15705
            for (var i = 0; i < newLength; i++) {                                                                      // 15706
              oldItem = oldValue[i];                                                                                   // 15707
              newItem = newValue[i];                                                                                   // 15708
                                                                                                                       // 15709
              bothNaN = (oldItem !== oldItem) && (newItem !== newItem);                                                // 15710
              if (!bothNaN && (oldItem !== newItem)) {                                                                 // 15711
                changeDetected++;                                                                                      // 15712
                oldValue[i] = newItem;                                                                                 // 15713
              }                                                                                                        // 15714
            }                                                                                                          // 15715
          } else {                                                                                                     // 15716
            if (oldValue !== internalObject) {                                                                         // 15717
              // we are transitioning from something which was not an object into object.                              // 15718
              oldValue = internalObject = {};                                                                          // 15719
              oldLength = 0;                                                                                           // 15720
              changeDetected++;                                                                                        // 15721
            }                                                                                                          // 15722
            // copy the items to oldValue and look for changes.                                                        // 15723
            newLength = 0;                                                                                             // 15724
            for (key in newValue) {                                                                                    // 15725
              if (hasOwnProperty.call(newValue, key)) {                                                                // 15726
                newLength++;                                                                                           // 15727
                newItem = newValue[key];                                                                               // 15728
                oldItem = oldValue[key];                                                                               // 15729
                                                                                                                       // 15730
                if (key in oldValue) {                                                                                 // 15731
                  bothNaN = (oldItem !== oldItem) && (newItem !== newItem);                                            // 15732
                  if (!bothNaN && (oldItem !== newItem)) {                                                             // 15733
                    changeDetected++;                                                                                  // 15734
                    oldValue[key] = newItem;                                                                           // 15735
                  }                                                                                                    // 15736
                } else {                                                                                               // 15737
                  oldLength++;                                                                                         // 15738
                  oldValue[key] = newItem;                                                                             // 15739
                  changeDetected++;                                                                                    // 15740
                }                                                                                                      // 15741
              }                                                                                                        // 15742
            }                                                                                                          // 15743
            if (oldLength > newLength) {                                                                               // 15744
              // we used to have more keys, need to find them and destroy them.                                        // 15745
              changeDetected++;                                                                                        // 15746
              for (key in oldValue) {                                                                                  // 15747
                if (!hasOwnProperty.call(newValue, key)) {                                                             // 15748
                  oldLength--;                                                                                         // 15749
                  delete oldValue[key];                                                                                // 15750
                }                                                                                                      // 15751
              }                                                                                                        // 15752
            }                                                                                                          // 15753
          }                                                                                                            // 15754
          return changeDetected;                                                                                       // 15755
        }                                                                                                              // 15756
                                                                                                                       // 15757
        function $watchCollectionAction() {                                                                            // 15758
          if (initRun) {                                                                                               // 15759
            initRun = false;                                                                                           // 15760
            listener(newValue, newValue, self);                                                                        // 15761
          } else {                                                                                                     // 15762
            listener(newValue, veryOldValue, self);                                                                    // 15763
          }                                                                                                            // 15764
                                                                                                                       // 15765
          // make a copy for the next time a collection is changed                                                     // 15766
          if (trackVeryOldValue) {                                                                                     // 15767
            if (!isObject(newValue)) {                                                                                 // 15768
              //primitive                                                                                              // 15769
              veryOldValue = newValue;                                                                                 // 15770
            } else if (isArrayLike(newValue)) {                                                                        // 15771
              veryOldValue = new Array(newValue.length);                                                               // 15772
              for (var i = 0; i < newValue.length; i++) {                                                              // 15773
                veryOldValue[i] = newValue[i];                                                                         // 15774
              }                                                                                                        // 15775
            } else { // if object                                                                                      // 15776
              veryOldValue = {};                                                                                       // 15777
              for (var key in newValue) {                                                                              // 15778
                if (hasOwnProperty.call(newValue, key)) {                                                              // 15779
                  veryOldValue[key] = newValue[key];                                                                   // 15780
                }                                                                                                      // 15781
              }                                                                                                        // 15782
            }                                                                                                          // 15783
          }                                                                                                            // 15784
        }                                                                                                              // 15785
                                                                                                                       // 15786
        return this.$watch(changeDetector, $watchCollectionAction);                                                    // 15787
      },                                                                                                               // 15788
                                                                                                                       // 15789
      /**                                                                                                              // 15790
       * @ngdoc method                                                                                                 // 15791
       * @name $rootScope.Scope#$digest                                                                                // 15792
       * @kind function                                                                                                // 15793
       *                                                                                                               // 15794
       * @description                                                                                                  // 15795
       * Processes all of the {@link ng.$rootScope.Scope#$watch watchers} of the current scope and                     // 15796
       * its children. Because a {@link ng.$rootScope.Scope#$watch watcher}'s listener can change                      // 15797
       * the model, the `$digest()` keeps calling the {@link ng.$rootScope.Scope#$watch watchers}                      // 15798
       * until no more listeners are firing. This means that it is possible to get into an infinite                    // 15799
       * loop. This function will throw `'Maximum iteration limit exceeded.'` if the number of                         // 15800
       * iterations exceeds 10.                                                                                        // 15801
       *                                                                                                               // 15802
       * Usually, you don't call `$digest()` directly in                                                               // 15803
       * {@link ng.directive:ngController controllers} or in                                                           // 15804
       * {@link ng.$compileProvider#directive directives}.                                                             // 15805
       * Instead, you should call {@link ng.$rootScope.Scope#$apply $apply()} (typically from within                   // 15806
       * a {@link ng.$compileProvider#directive directive}), which will force a `$digest()`.                           // 15807
       *                                                                                                               // 15808
       * If you want to be notified whenever `$digest()` is called,                                                    // 15809
       * you can register a `watchExpression` function with                                                            // 15810
       * {@link ng.$rootScope.Scope#$watch $watch()} with no `listener`.                                               // 15811
       *                                                                                                               // 15812
       * In unit tests, you may need to call `$digest()` to simulate the scope life cycle.                             // 15813
       *                                                                                                               // 15814
       * # Example                                                                                                     // 15815
       * ```js                                                                                                         // 15816
           var scope = ...;                                                                                            // 15817
           scope.name = 'misko';                                                                                       // 15818
           scope.counter = 0;                                                                                          // 15819
                                                                                                                       // 15820
           expect(scope.counter).toEqual(0);                                                                           // 15821
           scope.$watch('name', function(newValue, oldValue) {                                                         // 15822
             scope.counter = scope.counter + 1;                                                                        // 15823
           });                                                                                                         // 15824
           expect(scope.counter).toEqual(0);                                                                           // 15825
                                                                                                                       // 15826
           scope.$digest();                                                                                            // 15827
           // the listener is always called during the first $digest loop after it was registered                      // 15828
           expect(scope.counter).toEqual(1);                                                                           // 15829
                                                                                                                       // 15830
           scope.$digest();                                                                                            // 15831
           // but now it will not be called unless the value changes                                                   // 15832
           expect(scope.counter).toEqual(1);                                                                           // 15833
                                                                                                                       // 15834
           scope.name = 'adam';                                                                                        // 15835
           scope.$digest();                                                                                            // 15836
           expect(scope.counter).toEqual(2);                                                                           // 15837
       * ```                                                                                                           // 15838
       *                                                                                                               // 15839
       */                                                                                                              // 15840
      $digest: function() {                                                                                            // 15841
        var watch, value, last,                                                                                        // 15842
            watchers,                                                                                                  // 15843
            length,                                                                                                    // 15844
            dirty, ttl = TTL,                                                                                          // 15845
            next, current, target = this,                                                                              // 15846
            watchLog = [],                                                                                             // 15847
            logIdx, logMsg, asyncTask;                                                                                 // 15848
                                                                                                                       // 15849
        beginPhase('$digest');                                                                                         // 15850
        // Check for changes to browser url that happened in sync before the call to $digest                           // 15851
        $browser.$$checkUrlChange();                                                                                   // 15852
                                                                                                                       // 15853
        if (this === $rootScope && applyAsyncId !== null) {                                                            // 15854
          // If this is the root scope, and $applyAsync has scheduled a deferred $apply(), then                        // 15855
          // cancel the scheduled $apply and flush the queue of expressions to be evaluated.                           // 15856
          $browser.defer.cancel(applyAsyncId);                                                                         // 15857
          flushApplyAsync();                                                                                           // 15858
        }                                                                                                              // 15859
                                                                                                                       // 15860
        lastDirtyWatch = null;                                                                                         // 15861
                                                                                                                       // 15862
        do { // "while dirty" loop                                                                                     // 15863
          dirty = false;                                                                                               // 15864
          current = target;                                                                                            // 15865
                                                                                                                       // 15866
          while (asyncQueue.length) {                                                                                  // 15867
            try {                                                                                                      // 15868
              asyncTask = asyncQueue.shift();                                                                          // 15869
              asyncTask.scope.$eval(asyncTask.expression, asyncTask.locals);                                           // 15870
            } catch (e) {                                                                                              // 15871
              $exceptionHandler(e);                                                                                    // 15872
            }                                                                                                          // 15873
            lastDirtyWatch = null;                                                                                     // 15874
          }                                                                                                            // 15875
                                                                                                                       // 15876
          traverseScopesLoop:                                                                                          // 15877
          do { // "traverse the scopes" loop                                                                           // 15878
            if ((watchers = current.$$watchers)) {                                                                     // 15879
              // process our watches                                                                                   // 15880
              length = watchers.length;                                                                                // 15881
              while (length--) {                                                                                       // 15882
                try {                                                                                                  // 15883
                  watch = watchers[length];                                                                            // 15884
                  // Most common watches are on primitives, in which case we can short                                 // 15885
                  // circuit it with === operator, only when === fails do we use .equals                               // 15886
                  if (watch) {                                                                                         // 15887
                    if ((value = watch.get(current)) !== (last = watch.last) &&                                        // 15888
                        !(watch.eq                                                                                     // 15889
                            ? equals(value, last)                                                                      // 15890
                            : (typeof value === 'number' && typeof last === 'number'                                   // 15891
                               && isNaN(value) && isNaN(last)))) {                                                     // 15892
                      dirty = true;                                                                                    // 15893
                      lastDirtyWatch = watch;                                                                          // 15894
                      watch.last = watch.eq ? copy(value, null) : value;                                               // 15895
                      watch.fn(value, ((last === initWatchVal) ? value : last), current);                              // 15896
                      if (ttl < 5) {                                                                                   // 15897
                        logIdx = 4 - ttl;                                                                              // 15898
                        if (!watchLog[logIdx]) watchLog[logIdx] = [];                                                  // 15899
                        watchLog[logIdx].push({                                                                        // 15900
                          msg: isFunction(watch.exp) ? 'fn: ' + (watch.exp.name || watch.exp.toString()) : watch.exp,  // 15901
                          newVal: value,                                                                               // 15902
                          oldVal: last                                                                                 // 15903
                        });                                                                                            // 15904
                      }                                                                                                // 15905
                    } else if (watch === lastDirtyWatch) {                                                             // 15906
                      // If the most recently dirty watcher is now clean, short circuit since the remaining watchers   // 15907
                      // have already been tested.                                                                     // 15908
                      dirty = false;                                                                                   // 15909
                      break traverseScopesLoop;                                                                        // 15910
                    }                                                                                                  // 15911
                  }                                                                                                    // 15912
                } catch (e) {                                                                                          // 15913
                  $exceptionHandler(e);                                                                                // 15914
                }                                                                                                      // 15915
              }                                                                                                        // 15916
            }                                                                                                          // 15917
                                                                                                                       // 15918
            // Insanity Warning: scope depth-first traversal                                                           // 15919
            // yes, this code is a bit crazy, but it works and we have tests to prove it!                              // 15920
            // this piece should be kept in sync with the traversal in $broadcast                                      // 15921
            if (!(next = ((current.$$watchersCount && current.$$childHead) ||                                          // 15922
                (current !== target && current.$$nextSibling)))) {                                                     // 15923
              while (current !== target && !(next = current.$$nextSibling)) {                                          // 15924
                current = current.$parent;                                                                             // 15925
              }                                                                                                        // 15926
            }                                                                                                          // 15927
          } while ((current = next));                                                                                  // 15928
                                                                                                                       // 15929
          // `break traverseScopesLoop;` takes us to here                                                              // 15930
                                                                                                                       // 15931
          if ((dirty || asyncQueue.length) && !(ttl--)) {                                                              // 15932
            clearPhase();                                                                                              // 15933
            throw $rootScopeMinErr('infdig',                                                                           // 15934
                '{0} $digest() iterations reached. Aborting!\n' +                                                      // 15935
                'Watchers fired in the last 5 iterations: {1}',                                                        // 15936
                TTL, watchLog);                                                                                        // 15937
          }                                                                                                            // 15938
                                                                                                                       // 15939
        } while (dirty || asyncQueue.length);                                                                          // 15940
                                                                                                                       // 15941
        clearPhase();                                                                                                  // 15942
                                                                                                                       // 15943
        while (postDigestQueue.length) {                                                                               // 15944
          try {                                                                                                        // 15945
            postDigestQueue.shift()();                                                                                 // 15946
          } catch (e) {                                                                                                // 15947
            $exceptionHandler(e);                                                                                      // 15948
          }                                                                                                            // 15949
        }                                                                                                              // 15950
      },                                                                                                               // 15951
                                                                                                                       // 15952
                                                                                                                       // 15953
      /**                                                                                                              // 15954
       * @ngdoc event                                                                                                  // 15955
       * @name $rootScope.Scope#$destroy                                                                               // 15956
       * @eventType broadcast on scope being destroyed                                                                 // 15957
       *                                                                                                               // 15958
       * @description                                                                                                  // 15959
       * Broadcasted when a scope and its children are being destroyed.                                                // 15960
       *                                                                                                               // 15961
       * Note that, in AngularJS, there is also a `$destroy` jQuery event, which can be used to                        // 15962
       * clean up DOM bindings before an element is removed from the DOM.                                              // 15963
       */                                                                                                              // 15964
                                                                                                                       // 15965
      /**                                                                                                              // 15966
       * @ngdoc method                                                                                                 // 15967
       * @name $rootScope.Scope#$destroy                                                                               // 15968
       * @kind function                                                                                                // 15969
       *                                                                                                               // 15970
       * @description                                                                                                  // 15971
       * Removes the current scope (and all of its children) from the parent scope. Removal implies                    // 15972
       * that calls to {@link ng.$rootScope.Scope#$digest $digest()} will no longer                                    // 15973
       * propagate to the current scope and its children. Removal also implies that the current                        // 15974
       * scope is eligible for garbage collection.                                                                     // 15975
       *                                                                                                               // 15976
       * The `$destroy()` is usually used by directives such as                                                        // 15977
       * {@link ng.directive:ngRepeat ngRepeat} for managing the                                                       // 15978
       * unrolling of the loop.                                                                                        // 15979
       *                                                                                                               // 15980
       * Just before a scope is destroyed, a `$destroy` event is broadcasted on this scope.                            // 15981
       * Application code can register a `$destroy` event handler that will give it a chance to                        // 15982
       * perform any necessary cleanup.                                                                                // 15983
       *                                                                                                               // 15984
       * Note that, in AngularJS, there is also a `$destroy` jQuery event, which can be used to                        // 15985
       * clean up DOM bindings before an element is removed from the DOM.                                              // 15986
       */                                                                                                              // 15987
      $destroy: function() {                                                                                           // 15988
        // We can't destroy a scope that has been already destroyed.                                                   // 15989
        if (this.$$destroyed) return;                                                                                  // 15990
        var parent = this.$parent;                                                                                     // 15991
                                                                                                                       // 15992
        this.$broadcast('$destroy');                                                                                   // 15993
        this.$$destroyed = true;                                                                                       // 15994
                                                                                                                       // 15995
        if (this === $rootScope) {                                                                                     // 15996
          //Remove handlers attached to window when $rootScope is removed                                              // 15997
          $browser.$$applicationDestroyed();                                                                           // 15998
        }                                                                                                              // 15999
                                                                                                                       // 16000
        incrementWatchersCount(this, -this.$$watchersCount);                                                           // 16001
        for (var eventName in this.$$listenerCount) {                                                                  // 16002
          decrementListenerCount(this, this.$$listenerCount[eventName], eventName);                                    // 16003
        }                                                                                                              // 16004
                                                                                                                       // 16005
        // sever all the references to parent scopes (after this cleanup, the current scope should                     // 16006
        // not be retained by any of our references and should be eligible for garbage collection)                     // 16007
        if (parent && parent.$$childHead == this) parent.$$childHead = this.$$nextSibling;                             // 16008
        if (parent && parent.$$childTail == this) parent.$$childTail = this.$$prevSibling;                             // 16009
        if (this.$$prevSibling) this.$$prevSibling.$$nextSibling = this.$$nextSibling;                                 // 16010
        if (this.$$nextSibling) this.$$nextSibling.$$prevSibling = this.$$prevSibling;                                 // 16011
                                                                                                                       // 16012
        // Disable listeners, watchers and apply/digest methods                                                        // 16013
        this.$destroy = this.$digest = this.$apply = this.$evalAsync = this.$applyAsync = noop;                        // 16014
        this.$on = this.$watch = this.$watchGroup = function() { return noop; };                                       // 16015
        this.$$listeners = {};                                                                                         // 16016
                                                                                                                       // 16017
        // Disconnect the next sibling to prevent `cleanUpScope` destroying those too                                  // 16018
        this.$$nextSibling = null;                                                                                     // 16019
        cleanUpScope(this);                                                                                            // 16020
      },                                                                                                               // 16021
                                                                                                                       // 16022
      /**                                                                                                              // 16023
       * @ngdoc method                                                                                                 // 16024
       * @name $rootScope.Scope#$eval                                                                                  // 16025
       * @kind function                                                                                                // 16026
       *                                                                                                               // 16027
       * @description                                                                                                  // 16028
       * Executes the `expression` on the current scope and returns the result. Any exceptions in                      // 16029
       * the expression are propagated (uncaught). This is useful when evaluating Angular                              // 16030
       * expressions.                                                                                                  // 16031
       *                                                                                                               // 16032
       * # Example                                                                                                     // 16033
       * ```js                                                                                                         // 16034
           var scope = ng.$rootScope.Scope();                                                                          // 16035
           scope.a = 1;                                                                                                // 16036
           scope.b = 2;                                                                                                // 16037
                                                                                                                       // 16038
           expect(scope.$eval('a+b')).toEqual(3);                                                                      // 16039
           expect(scope.$eval(function(scope){ return scope.a + scope.b; })).toEqual(3);                               // 16040
       * ```                                                                                                           // 16041
       *                                                                                                               // 16042
       * @param {(string|function())=} expression An angular expression to be executed.                                // 16043
       *                                                                                                               // 16044
       *    - `string`: execute using the rules as defined in  {@link guide/expression expression}.                    // 16045
       *    - `function(scope)`: execute the function with the current `scope` parameter.                              // 16046
       *                                                                                                               // 16047
       * @param {(object)=} locals Local variables object, useful for overriding values in scope.                      // 16048
       * @returns {*} The result of evaluating the expression.                                                         // 16049
       */                                                                                                              // 16050
      $eval: function(expr, locals) {                                                                                  // 16051
        return $parse(expr)(this, locals);                                                                             // 16052
      },                                                                                                               // 16053
                                                                                                                       // 16054
      /**                                                                                                              // 16055
       * @ngdoc method                                                                                                 // 16056
       * @name $rootScope.Scope#$evalAsync                                                                             // 16057
       * @kind function                                                                                                // 16058
       *                                                                                                               // 16059
       * @description                                                                                                  // 16060
       * Executes the expression on the current scope at a later point in time.                                        // 16061
       *                                                                                                               // 16062
       * The `$evalAsync` makes no guarantees as to when the `expression` will be executed, only                       // 16063
       * that:                                                                                                         // 16064
       *                                                                                                               // 16065
       *   - it will execute after the function that scheduled the evaluation (preferably before DOM                   // 16066
       *     rendering).                                                                                               // 16067
       *   - at least one {@link ng.$rootScope.Scope#$digest $digest cycle} will be performed after                    // 16068
       *     `expression` execution.                                                                                   // 16069
       *                                                                                                               // 16070
       * Any exceptions from the execution of the expression are forwarded to the                                      // 16071
       * {@link ng.$exceptionHandler $exceptionHandler} service.                                                       // 16072
       *                                                                                                               // 16073
       * __Note:__ if this function is called outside of a `$digest` cycle, a new `$digest` cycle                      // 16074
       * will be scheduled. However, it is encouraged to always call code that changes the model                       // 16075
       * from within an `$apply` call. That includes code evaluated via `$evalAsync`.                                  // 16076
       *                                                                                                               // 16077
       * @param {(string|function())=} expression An angular expression to be executed.                                // 16078
       *                                                                                                               // 16079
       *    - `string`: execute using the rules as defined in {@link guide/expression expression}.                     // 16080
       *    - `function(scope)`: execute the function with the current `scope` parameter.                              // 16081
       *                                                                                                               // 16082
       * @param {(object)=} locals Local variables object, useful for overriding values in scope.                      // 16083
       */                                                                                                              // 16084
      $evalAsync: function(expr, locals) {                                                                             // 16085
        // if we are outside of an $digest loop and this is the first time we are scheduling async                     // 16086
        // task also schedule async auto-flush                                                                         // 16087
        if (!$rootScope.$$phase && !asyncQueue.length) {                                                               // 16088
          $browser.defer(function() {                                                                                  // 16089
            if (asyncQueue.length) {                                                                                   // 16090
              $rootScope.$digest();                                                                                    // 16091
            }                                                                                                          // 16092
          });                                                                                                          // 16093
        }                                                                                                              // 16094
                                                                                                                       // 16095
        asyncQueue.push({scope: this, expression: expr, locals: locals});                                              // 16096
      },                                                                                                               // 16097
                                                                                                                       // 16098
      $$postDigest: function(fn) {                                                                                     // 16099
        postDigestQueue.push(fn);                                                                                      // 16100
      },                                                                                                               // 16101
                                                                                                                       // 16102
      /**                                                                                                              // 16103
       * @ngdoc method                                                                                                 // 16104
       * @name $rootScope.Scope#$apply                                                                                 // 16105
       * @kind function                                                                                                // 16106
       *                                                                                                               // 16107
       * @description                                                                                                  // 16108
       * `$apply()` is used to execute an expression in angular from outside of the angular                            // 16109
       * framework. (For example from browser DOM events, setTimeout, XHR or third party libraries).                   // 16110
       * Because we are calling into the angular framework we need to perform proper scope life                        // 16111
       * cycle of {@link ng.$exceptionHandler exception handling},                                                     // 16112
       * {@link ng.$rootScope.Scope#$digest executing watches}.                                                        // 16113
       *                                                                                                               // 16114
       * ## Life cycle                                                                                                 // 16115
       *                                                                                                               // 16116
       * # Pseudo-Code of `$apply()`                                                                                   // 16117
       * ```js                                                                                                         // 16118
           function $apply(expr) {                                                                                     // 16119
             try {                                                                                                     // 16120
               return $eval(expr);                                                                                     // 16121
             } catch (e) {                                                                                             // 16122
               $exceptionHandler(e);                                                                                   // 16123
             } finally {                                                                                               // 16124
               $root.$digest();                                                                                        // 16125
             }                                                                                                         // 16126
           }                                                                                                           // 16127
       * ```                                                                                                           // 16128
       *                                                                                                               // 16129
       *                                                                                                               // 16130
       * Scope's `$apply()` method transitions through the following stages:                                           // 16131
       *                                                                                                               // 16132
       * 1. The {@link guide/expression expression} is executed using the                                              // 16133
       *    {@link ng.$rootScope.Scope#$eval $eval()} method.                                                          // 16134
       * 2. Any exceptions from the execution of the expression are forwarded to the                                   // 16135
       *    {@link ng.$exceptionHandler $exceptionHandler} service.                                                    // 16136
       * 3. The {@link ng.$rootScope.Scope#$watch watch} listeners are fired immediately after the                     // 16137
       *    expression was executed using the {@link ng.$rootScope.Scope#$digest $digest()} method.                    // 16138
       *                                                                                                               // 16139
       *                                                                                                               // 16140
       * @param {(string|function())=} exp An angular expression to be executed.                                       // 16141
       *                                                                                                               // 16142
       *    - `string`: execute using the rules as defined in {@link guide/expression expression}.                     // 16143
       *    - `function(scope)`: execute the function with current `scope` parameter.                                  // 16144
       *                                                                                                               // 16145
       * @returns {*} The result of evaluating the expression.                                                         // 16146
       */                                                                                                              // 16147
      $apply: function(expr) {                                                                                         // 16148
        try {                                                                                                          // 16149
          beginPhase('$apply');                                                                                        // 16150
          try {                                                                                                        // 16151
            return this.$eval(expr);                                                                                   // 16152
          } finally {                                                                                                  // 16153
            clearPhase();                                                                                              // 16154
          }                                                                                                            // 16155
        } catch (e) {                                                                                                  // 16156
          $exceptionHandler(e);                                                                                        // 16157
        } finally {                                                                                                    // 16158
          try {                                                                                                        // 16159
            $rootScope.$digest();                                                                                      // 16160
          } catch (e) {                                                                                                // 16161
            $exceptionHandler(e);                                                                                      // 16162
            throw e;                                                                                                   // 16163
          }                                                                                                            // 16164
        }                                                                                                              // 16165
      },                                                                                                               // 16166
                                                                                                                       // 16167
      /**                                                                                                              // 16168
       * @ngdoc method                                                                                                 // 16169
       * @name $rootScope.Scope#$applyAsync                                                                            // 16170
       * @kind function                                                                                                // 16171
       *                                                                                                               // 16172
       * @description                                                                                                  // 16173
       * Schedule the invocation of $apply to occur at a later time. The actual time difference                        // 16174
       * varies across browsers, but is typically around ~10 milliseconds.                                             // 16175
       *                                                                                                               // 16176
       * This can be used to queue up multiple expressions which need to be evaluated in the same                      // 16177
       * digest.                                                                                                       // 16178
       *                                                                                                               // 16179
       * @param {(string|function())=} exp An angular expression to be executed.                                       // 16180
       *                                                                                                               // 16181
       *    - `string`: execute using the rules as defined in {@link guide/expression expression}.                     // 16182
       *    - `function(scope)`: execute the function with current `scope` parameter.                                  // 16183
       */                                                                                                              // 16184
      $applyAsync: function(expr) {                                                                                    // 16185
        var scope = this;                                                                                              // 16186
        expr && applyAsyncQueue.push($applyAsyncExpression);                                                           // 16187
        scheduleApplyAsync();                                                                                          // 16188
                                                                                                                       // 16189
        function $applyAsyncExpression() {                                                                             // 16190
          scope.$eval(expr);                                                                                           // 16191
        }                                                                                                              // 16192
      },                                                                                                               // 16193
                                                                                                                       // 16194
      /**                                                                                                              // 16195
       * @ngdoc method                                                                                                 // 16196
       * @name $rootScope.Scope#$on                                                                                    // 16197
       * @kind function                                                                                                // 16198
       *                                                                                                               // 16199
       * @description                                                                                                  // 16200
       * Listens on events of a given type. See {@link ng.$rootScope.Scope#$emit $emit} for                            // 16201
       * discussion of event life cycle.                                                                               // 16202
       *                                                                                                               // 16203
       * The event listener function format is: `function(event, args...)`. The `event` object                         // 16204
       * passed into the listener has the following attributes:                                                        // 16205
       *                                                                                                               // 16206
       *   - `targetScope` - `{Scope}`: the scope on which the event was `$emit`-ed or                                 // 16207
       *     `$broadcast`-ed.                                                                                          // 16208
       *   - `currentScope` - `{Scope}`: the scope that is currently handling the event. Once the                      // 16209
       *     event propagates through the scope hierarchy, this property is set to null.                               // 16210
       *   - `name` - `{string}`: name of the event.                                                                   // 16211
       *   - `stopPropagation` - `{function=}`: calling `stopPropagation` function will cancel                         // 16212
       *     further event propagation (available only for events that were `$emit`-ed).                               // 16213
       *   - `preventDefault` - `{function}`: calling `preventDefault` sets `defaultPrevented` flag                    // 16214
       *     to true.                                                                                                  // 16215
       *   - `defaultPrevented` - `{boolean}`: true if `preventDefault` was called.                                    // 16216
       *                                                                                                               // 16217
       * @param {string} name Event name to listen on.                                                                 // 16218
       * @param {function(event, ...args)} listener Function to call when the event is emitted.                        // 16219
       * @returns {function()} Returns a deregistration function for this listener.                                    // 16220
       */                                                                                                              // 16221
      $on: function(name, listener) {                                                                                  // 16222
        var namedListeners = this.$$listeners[name];                                                                   // 16223
        if (!namedListeners) {                                                                                         // 16224
          this.$$listeners[name] = namedListeners = [];                                                                // 16225
        }                                                                                                              // 16226
        namedListeners.push(listener);                                                                                 // 16227
                                                                                                                       // 16228
        var current = this;                                                                                            // 16229
        do {                                                                                                           // 16230
          if (!current.$$listenerCount[name]) {                                                                        // 16231
            current.$$listenerCount[name] = 0;                                                                         // 16232
          }                                                                                                            // 16233
          current.$$listenerCount[name]++;                                                                             // 16234
        } while ((current = current.$parent));                                                                         // 16235
                                                                                                                       // 16236
        var self = this;                                                                                               // 16237
        return function() {                                                                                            // 16238
          var indexOfListener = namedListeners.indexOf(listener);                                                      // 16239
          if (indexOfListener !== -1) {                                                                                // 16240
            namedListeners[indexOfListener] = null;                                                                    // 16241
            decrementListenerCount(self, 1, name);                                                                     // 16242
          }                                                                                                            // 16243
        };                                                                                                             // 16244
      },                                                                                                               // 16245
                                                                                                                       // 16246
                                                                                                                       // 16247
      /**                                                                                                              // 16248
       * @ngdoc method                                                                                                 // 16249
       * @name $rootScope.Scope#$emit                                                                                  // 16250
       * @kind function                                                                                                // 16251
       *                                                                                                               // 16252
       * @description                                                                                                  // 16253
       * Dispatches an event `name` upwards through the scope hierarchy notifying the                                  // 16254
       * registered {@link ng.$rootScope.Scope#$on} listeners.                                                         // 16255
       *                                                                                                               // 16256
       * The event life cycle starts at the scope on which `$emit` was called. All                                     // 16257
       * {@link ng.$rootScope.Scope#$on listeners} listening for `name` event on this scope get                        // 16258
       * notified. Afterwards, the event traverses upwards toward the root scope and calls all                         // 16259
       * registered listeners along the way. The event will stop propagating if one of the listeners                   // 16260
       * cancels it.                                                                                                   // 16261
       *                                                                                                               // 16262
       * Any exception emitted from the {@link ng.$rootScope.Scope#$on listeners} will be passed                       // 16263
       * onto the {@link ng.$exceptionHandler $exceptionHandler} service.                                              // 16264
       *                                                                                                               // 16265
       * @param {string} name Event name to emit.                                                                      // 16266
       * @param {...*} args Optional one or more arguments which will be passed onto the event listeners.              // 16267
       * @return {Object} Event object (see {@link ng.$rootScope.Scope#$on}).                                          // 16268
       */                                                                                                              // 16269
      $emit: function(name, args) {                                                                                    // 16270
        var empty = [],                                                                                                // 16271
            namedListeners,                                                                                            // 16272
            scope = this,                                                                                              // 16273
            stopPropagation = false,                                                                                   // 16274
            event = {                                                                                                  // 16275
              name: name,                                                                                              // 16276
              targetScope: scope,                                                                                      // 16277
              stopPropagation: function() {stopPropagation = true;},                                                   // 16278
              preventDefault: function() {                                                                             // 16279
                event.defaultPrevented = true;                                                                         // 16280
              },                                                                                                       // 16281
              defaultPrevented: false                                                                                  // 16282
            },                                                                                                         // 16283
            listenerArgs = concat([event], arguments, 1),                                                              // 16284
            i, length;                                                                                                 // 16285
                                                                                                                       // 16286
        do {                                                                                                           // 16287
          namedListeners = scope.$$listeners[name] || empty;                                                           // 16288
          event.currentScope = scope;                                                                                  // 16289
          for (i = 0, length = namedListeners.length; i < length; i++) {                                               // 16290
                                                                                                                       // 16291
            // if listeners were deregistered, defragment the array                                                    // 16292
            if (!namedListeners[i]) {                                                                                  // 16293
              namedListeners.splice(i, 1);                                                                             // 16294
              i--;                                                                                                     // 16295
              length--;                                                                                                // 16296
              continue;                                                                                                // 16297
            }                                                                                                          // 16298
            try {                                                                                                      // 16299
              //allow all listeners attached to the current scope to run                                               // 16300
              namedListeners[i].apply(null, listenerArgs);                                                             // 16301
            } catch (e) {                                                                                              // 16302
              $exceptionHandler(e);                                                                                    // 16303
            }                                                                                                          // 16304
          }                                                                                                            // 16305
          //if any listener on the current scope stops propagation, prevent bubbling                                   // 16306
          if (stopPropagation) {                                                                                       // 16307
            event.currentScope = null;                                                                                 // 16308
            return event;                                                                                              // 16309
          }                                                                                                            // 16310
          //traverse upwards                                                                                           // 16311
          scope = scope.$parent;                                                                                       // 16312
        } while (scope);                                                                                               // 16313
                                                                                                                       // 16314
        event.currentScope = null;                                                                                     // 16315
                                                                                                                       // 16316
        return event;                                                                                                  // 16317
      },                                                                                                               // 16318
                                                                                                                       // 16319
                                                                                                                       // 16320
      /**                                                                                                              // 16321
       * @ngdoc method                                                                                                 // 16322
       * @name $rootScope.Scope#$broadcast                                                                             // 16323
       * @kind function                                                                                                // 16324
       *                                                                                                               // 16325
       * @description                                                                                                  // 16326
       * Dispatches an event `name` downwards to all child scopes (and their children) notifying the                   // 16327
       * registered {@link ng.$rootScope.Scope#$on} listeners.                                                         // 16328
       *                                                                                                               // 16329
       * The event life cycle starts at the scope on which `$broadcast` was called. All                                // 16330
       * {@link ng.$rootScope.Scope#$on listeners} listening for `name` event on this scope get                        // 16331
       * notified. Afterwards, the event propagates to all direct and indirect scopes of the current                   // 16332
       * scope and calls all registered listeners along the way. The event cannot be canceled.                         // 16333
       *                                                                                                               // 16334
       * Any exception emitted from the {@link ng.$rootScope.Scope#$on listeners} will be passed                       // 16335
       * onto the {@link ng.$exceptionHandler $exceptionHandler} service.                                              // 16336
       *                                                                                                               // 16337
       * @param {string} name Event name to broadcast.                                                                 // 16338
       * @param {...*} args Optional one or more arguments which will be passed onto the event listeners.              // 16339
       * @return {Object} Event object, see {@link ng.$rootScope.Scope#$on}                                            // 16340
       */                                                                                                              // 16341
      $broadcast: function(name, args) {                                                                               // 16342
        var target = this,                                                                                             // 16343
            current = target,                                                                                          // 16344
            next = target,                                                                                             // 16345
            event = {                                                                                                  // 16346
              name: name,                                                                                              // 16347
              targetScope: target,                                                                                     // 16348
              preventDefault: function() {                                                                             // 16349
                event.defaultPrevented = true;                                                                         // 16350
              },                                                                                                       // 16351
              defaultPrevented: false                                                                                  // 16352
            };                                                                                                         // 16353
                                                                                                                       // 16354
        if (!target.$$listenerCount[name]) return event;                                                               // 16355
                                                                                                                       // 16356
        var listenerArgs = concat([event], arguments, 1),                                                              // 16357
            listeners, i, length;                                                                                      // 16358
                                                                                                                       // 16359
        //down while you can, then up and next sibling or up and next sibling until back at root                       // 16360
        while ((current = next)) {                                                                                     // 16361
          event.currentScope = current;                                                                                // 16362
          listeners = current.$$listeners[name] || [];                                                                 // 16363
          for (i = 0, length = listeners.length; i < length; i++) {                                                    // 16364
            // if listeners were deregistered, defragment the array                                                    // 16365
            if (!listeners[i]) {                                                                                       // 16366
              listeners.splice(i, 1);                                                                                  // 16367
              i--;                                                                                                     // 16368
              length--;                                                                                                // 16369
              continue;                                                                                                // 16370
            }                                                                                                          // 16371
                                                                                                                       // 16372
            try {                                                                                                      // 16373
              listeners[i].apply(null, listenerArgs);                                                                  // 16374
            } catch (e) {                                                                                              // 16375
              $exceptionHandler(e);                                                                                    // 16376
            }                                                                                                          // 16377
          }                                                                                                            // 16378
                                                                                                                       // 16379
          // Insanity Warning: scope depth-first traversal                                                             // 16380
          // yes, this code is a bit crazy, but it works and we have tests to prove it!                                // 16381
          // this piece should be kept in sync with the traversal in $digest                                           // 16382
          // (though it differs due to having the extra check for $$listenerCount)                                     // 16383
          if (!(next = ((current.$$listenerCount[name] && current.$$childHead) ||                                      // 16384
              (current !== target && current.$$nextSibling)))) {                                                       // 16385
            while (current !== target && !(next = current.$$nextSibling)) {                                            // 16386
              current = current.$parent;                                                                               // 16387
            }                                                                                                          // 16388
          }                                                                                                            // 16389
        }                                                                                                              // 16390
                                                                                                                       // 16391
        event.currentScope = null;                                                                                     // 16392
        return event;                                                                                                  // 16393
      }                                                                                                                // 16394
    };                                                                                                                 // 16395
                                                                                                                       // 16396
    var $rootScope = new Scope();                                                                                      // 16397
                                                                                                                       // 16398
    //The internal queues. Expose them on the $rootScope for debugging/testing purposes.                               // 16399
    var asyncQueue = $rootScope.$$asyncQueue = [];                                                                     // 16400
    var postDigestQueue = $rootScope.$$postDigestQueue = [];                                                           // 16401
    var applyAsyncQueue = $rootScope.$$applyAsyncQueue = [];                                                           // 16402
                                                                                                                       // 16403
    return $rootScope;                                                                                                 // 16404
                                                                                                                       // 16405
                                                                                                                       // 16406
    function beginPhase(phase) {                                                                                       // 16407
      if ($rootScope.$$phase) {                                                                                        // 16408
        throw $rootScopeMinErr('inprog', '{0} already in progress', $rootScope.$$phase);                               // 16409
      }                                                                                                                // 16410
                                                                                                                       // 16411
      $rootScope.$$phase = phase;                                                                                      // 16412
    }                                                                                                                  // 16413
                                                                                                                       // 16414
    function clearPhase() {                                                                                            // 16415
      $rootScope.$$phase = null;                                                                                       // 16416
    }                                                                                                                  // 16417
                                                                                                                       // 16418
    function incrementWatchersCount(current, count) {                                                                  // 16419
      do {                                                                                                             // 16420
        current.$$watchersCount += count;                                                                              // 16421
      } while ((current = current.$parent));                                                                           // 16422
    }                                                                                                                  // 16423
                                                                                                                       // 16424
    function decrementListenerCount(current, count, name) {                                                            // 16425
      do {                                                                                                             // 16426
        current.$$listenerCount[name] -= count;                                                                        // 16427
                                                                                                                       // 16428
        if (current.$$listenerCount[name] === 0) {                                                                     // 16429
          delete current.$$listenerCount[name];                                                                        // 16430
        }                                                                                                              // 16431
      } while ((current = current.$parent));                                                                           // 16432
    }                                                                                                                  // 16433
                                                                                                                       // 16434
    /**                                                                                                                // 16435
     * function used as an initial value for watchers.                                                                 // 16436
     * because it's unique we can easily tell it apart from other values                                               // 16437
     */                                                                                                                // 16438
    function initWatchVal() {}                                                                                         // 16439
                                                                                                                       // 16440
    function flushApplyAsync() {                                                                                       // 16441
      while (applyAsyncQueue.length) {                                                                                 // 16442
        try {                                                                                                          // 16443
          applyAsyncQueue.shift()();                                                                                   // 16444
        } catch (e) {                                                                                                  // 16445
          $exceptionHandler(e);                                                                                        // 16446
        }                                                                                                              // 16447
      }                                                                                                                // 16448
      applyAsyncId = null;                                                                                             // 16449
    }                                                                                                                  // 16450
                                                                                                                       // 16451
    function scheduleApplyAsync() {                                                                                    // 16452
      if (applyAsyncId === null) {                                                                                     // 16453
        applyAsyncId = $browser.defer(function() {                                                                     // 16454
          $rootScope.$apply(flushApplyAsync);                                                                          // 16455
        });                                                                                                            // 16456
      }                                                                                                                // 16457
    }                                                                                                                  // 16458
  }];                                                                                                                  // 16459
}                                                                                                                      // 16460
                                                                                                                       // 16461
/**                                                                                                                    // 16462
 * @description                                                                                                        // 16463
 * Private service to sanitize uris for links and images. Used by $compile and $sanitize.                              // 16464
 */                                                                                                                    // 16465
function $$SanitizeUriProvider() {                                                                                     // 16466
  var aHrefSanitizationWhitelist = /^\s*(https?|ftp|mailto|tel|file):/,                                                // 16467
    imgSrcSanitizationWhitelist = /^\s*((https?|ftp|file|blob):|data:image\/)/;                                        // 16468
                                                                                                                       // 16469
  /**                                                                                                                  // 16470
   * @description                                                                                                      // 16471
   * Retrieves or overrides the default regular expression that is used for whitelisting of safe                       // 16472
   * urls during a[href] sanitization.                                                                                 // 16473
   *                                                                                                                   // 16474
   * The sanitization is a security measure aimed at prevent XSS attacks via html links.                               // 16475
   *                                                                                                                   // 16476
   * Any url about to be assigned to a[href] via data-binding is first normalized and turned into                      // 16477
   * an absolute url. Afterwards, the url is matched against the `aHrefSanitizationWhitelist`                          // 16478
   * regular expression. If a match is found, the original url is written into the dom. Otherwise,                     // 16479
   * the absolute url is prefixed with `'unsafe:'` string and only then is it written into the DOM.                    // 16480
   *                                                                                                                   // 16481
   * @param {RegExp=} regexp New regexp to whitelist urls with.                                                        // 16482
   * @returns {RegExp|ng.$compileProvider} Current RegExp if called without value or self for                          // 16483
   *    chaining otherwise.                                                                                            // 16484
   */                                                                                                                  // 16485
  this.aHrefSanitizationWhitelist = function(regexp) {                                                                 // 16486
    if (isDefined(regexp)) {                                                                                           // 16487
      aHrefSanitizationWhitelist = regexp;                                                                             // 16488
      return this;                                                                                                     // 16489
    }                                                                                                                  // 16490
    return aHrefSanitizationWhitelist;                                                                                 // 16491
  };                                                                                                                   // 16492
                                                                                                                       // 16493
                                                                                                                       // 16494
  /**                                                                                                                  // 16495
   * @description                                                                                                      // 16496
   * Retrieves or overrides the default regular expression that is used for whitelisting of safe                       // 16497
   * urls during img[src] sanitization.                                                                                // 16498
   *                                                                                                                   // 16499
   * The sanitization is a security measure aimed at prevent XSS attacks via html links.                               // 16500
   *                                                                                                                   // 16501
   * Any url about to be assigned to img[src] via data-binding is first normalized and turned into                     // 16502
   * an absolute url. Afterwards, the url is matched against the `imgSrcSanitizationWhitelist`                         // 16503
   * regular expression. If a match is found, the original url is written into the dom. Otherwise,                     // 16504
   * the absolute url is prefixed with `'unsafe:'` string and only then is it written into the DOM.                    // 16505
   *                                                                                                                   // 16506
   * @param {RegExp=} regexp New regexp to whitelist urls with.                                                        // 16507
   * @returns {RegExp|ng.$compileProvider} Current RegExp if called without value or self for                          // 16508
   *    chaining otherwise.                                                                                            // 16509
   */                                                                                                                  // 16510
  this.imgSrcSanitizationWhitelist = function(regexp) {                                                                // 16511
    if (isDefined(regexp)) {                                                                                           // 16512
      imgSrcSanitizationWhitelist = regexp;                                                                            // 16513
      return this;                                                                                                     // 16514
    }                                                                                                                  // 16515
    return imgSrcSanitizationWhitelist;                                                                                // 16516
  };                                                                                                                   // 16517
                                                                                                                       // 16518
  this.$get = function() {                                                                                             // 16519
    return function sanitizeUri(uri, isImage) {                                                                        // 16520
      var regex = isImage ? imgSrcSanitizationWhitelist : aHrefSanitizationWhitelist;                                  // 16521
      var normalizedVal;                                                                                               // 16522
      normalizedVal = urlResolve(uri).href;                                                                            // 16523
      if (normalizedVal !== '' && !normalizedVal.match(regex)) {                                                       // 16524
        return 'unsafe:' + normalizedVal;                                                                              // 16525
      }                                                                                                                // 16526
      return uri;                                                                                                      // 16527
    };                                                                                                                 // 16528
  };                                                                                                                   // 16529
}                                                                                                                      // 16530
                                                                                                                       // 16531
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *                                           // 16532
 *     Any commits to this file should be reviewed with security in mind.  *                                           // 16533
 *   Changes to this file can potentially create security vulnerabilities. *                                           // 16534
 *          An approval from 2 Core members with history of modifying      *                                           // 16535
 *                         this file is required.                          *                                           // 16536
 *                                                                         *                                           // 16537
 *  Does the change somehow allow for arbitrary javascript to be executed? *                                           // 16538
 *    Or allows for someone to change the prototype of built-in objects?   *                                           // 16539
 *     Or gives undesired access to variables likes document or window?    *                                           // 16540
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */                                          // 16541
                                                                                                                       // 16542
var $sceMinErr = minErr('$sce');                                                                                       // 16543
                                                                                                                       // 16544
var SCE_CONTEXTS = {                                                                                                   // 16545
  HTML: 'html',                                                                                                        // 16546
  CSS: 'css',                                                                                                          // 16547
  URL: 'url',                                                                                                          // 16548
  // RESOURCE_URL is a subtype of URL used in contexts where a privileged resource is sourced from a                   // 16549
  // url.  (e.g. ng-include, script src, templateUrl)                                                                  // 16550
  RESOURCE_URL: 'resourceUrl',                                                                                         // 16551
  JS: 'js'                                                                                                             // 16552
};                                                                                                                     // 16553
                                                                                                                       // 16554
// Helper functions follow.                                                                                            // 16555
                                                                                                                       // 16556
function adjustMatcher(matcher) {                                                                                      // 16557
  if (matcher === 'self') {                                                                                            // 16558
    return matcher;                                                                                                    // 16559
  } else if (isString(matcher)) {                                                                                      // 16560
    // Strings match exactly except for 2 wildcards - '*' and '**'.                                                    // 16561
    // '*' matches any character except those from the set ':/.?&'.                                                    // 16562
    // '**' matches any character (like .* in a RegExp).                                                               // 16563
    // More than 2 *'s raises an error as it's ill defined.                                                            // 16564
    if (matcher.indexOf('***') > -1) {                                                                                 // 16565
      throw $sceMinErr('iwcard',                                                                                       // 16566
          'Illegal sequence *** in string matcher.  String: {0}', matcher);                                            // 16567
    }                                                                                                                  // 16568
    matcher = escapeForRegexp(matcher).                                                                                // 16569
                  replace('\\*\\*', '.*').                                                                             // 16570
                  replace('\\*', '[^:/.?&;]*');                                                                        // 16571
    return new RegExp('^' + matcher + '$');                                                                            // 16572
  } else if (isRegExp(matcher)) {                                                                                      // 16573
    // The only other type of matcher allowed is a Regexp.                                                             // 16574
    // Match entire URL / disallow partial matches.                                                                    // 16575
    // Flags are reset (i.e. no global, ignoreCase or multiline)                                                       // 16576
    return new RegExp('^' + matcher.source + '$');                                                                     // 16577
  } else {                                                                                                             // 16578
    throw $sceMinErr('imatcher',                                                                                       // 16579
        'Matchers may only be "self", string patterns or RegExp objects');                                             // 16580
  }                                                                                                                    // 16581
}                                                                                                                      // 16582
                                                                                                                       // 16583
                                                                                                                       // 16584
function adjustMatchers(matchers) {                                                                                    // 16585
  var adjustedMatchers = [];                                                                                           // 16586
  if (isDefined(matchers)) {                                                                                           // 16587
    forEach(matchers, function(matcher) {                                                                              // 16588
      adjustedMatchers.push(adjustMatcher(matcher));                                                                   // 16589
    });                                                                                                                // 16590
  }                                                                                                                    // 16591
  return adjustedMatchers;                                                                                             // 16592
}                                                                                                                      // 16593
                                                                                                                       // 16594
                                                                                                                       // 16595
/**                                                                                                                    // 16596
 * @ngdoc service                                                                                                      // 16597
 * @name $sceDelegate                                                                                                  // 16598
 * @kind function                                                                                                      // 16599
 *                                                                                                                     // 16600
 * @description                                                                                                        // 16601
 *                                                                                                                     // 16602
 * `$sceDelegate` is a service that is used by the `$sce` service to provide {@link ng.$sce Strict                     // 16603
 * Contextual Escaping (SCE)} services to AngularJS.                                                                   // 16604
 *                                                                                                                     // 16605
 * Typically, you would configure or override the {@link ng.$sceDelegate $sceDelegate} instead of                      // 16606
 * the `$sce` service to customize the way Strict Contextual Escaping works in AngularJS.  This is                     // 16607
 * because, while the `$sce` provides numerous shorthand methods, etc., you really only need to                        // 16608
 * override 3 core functions (`trustAs`, `getTrusted` and `valueOf`) to replace the way things                         // 16609
 * work because `$sce` delegates to `$sceDelegate` for these operations.                                               // 16610
 *                                                                                                                     // 16611
 * Refer {@link ng.$sceDelegateProvider $sceDelegateProvider} to configure this service.                               // 16612
 *                                                                                                                     // 16613
 * The default instance of `$sceDelegate` should work out of the box with little pain.  While you                      // 16614
 * can override it completely to change the behavior of `$sce`, the common case would                                  // 16615
 * involve configuring the {@link ng.$sceDelegateProvider $sceDelegateProvider} instead by setting                     // 16616
 * your own whitelists and blacklists for trusting URLs used for loading AngularJS resources such as                   // 16617
 * templates.  Refer {@link ng.$sceDelegateProvider#resourceUrlWhitelist                                               // 16618
 * $sceDelegateProvider.resourceUrlWhitelist} and {@link                                                               // 16619
 * ng.$sceDelegateProvider#resourceUrlBlacklist $sceDelegateProvider.resourceUrlBlacklist}                             // 16620
 */                                                                                                                    // 16621
                                                                                                                       // 16622
/**                                                                                                                    // 16623
 * @ngdoc provider                                                                                                     // 16624
 * @name $sceDelegateProvider                                                                                          // 16625
 * @description                                                                                                        // 16626
 *                                                                                                                     // 16627
 * The `$sceDelegateProvider` provider allows developers to configure the {@link ng.$sceDelegate                       // 16628
 * $sceDelegate} service.  This allows one to get/set the whitelists and blacklists used to ensure                     // 16629
 * that the URLs used for sourcing Angular templates are safe.  Refer {@link                                           // 16630
 * ng.$sceDelegateProvider#resourceUrlWhitelist $sceDelegateProvider.resourceUrlWhitelist} and                         // 16631
 * {@link ng.$sceDelegateProvider#resourceUrlBlacklist $sceDelegateProvider.resourceUrlBlacklist}                      // 16632
 *                                                                                                                     // 16633
 * For the general details about this service in Angular, read the main page for {@link ng.$sce                        // 16634
 * Strict Contextual Escaping (SCE)}.                                                                                  // 16635
 *                                                                                                                     // 16636
 * **Example**:  Consider the following case. <a name="example"></a>                                                   // 16637
 *                                                                                                                     // 16638
 * - your app is hosted at url `http://myapp.example.com/`                                                             // 16639
 * - but some of your templates are hosted on other domains you control such as                                        // 16640
 *   `http://srv01.assets.example.com/`,  `http://srv02.assets.example.com/`, etc.                                     // 16641
 * - and you have an open redirect at `http://myapp.example.com/clickThru?...`.                                        // 16642
 *                                                                                                                     // 16643
 * Here is what a secure configuration for this scenario might look like:                                              // 16644
 *                                                                                                                     // 16645
 * ```                                                                                                                 // 16646
 *  angular.module('myApp', []).config(function($sceDelegateProvider) {                                                // 16647
 *    $sceDelegateProvider.resourceUrlWhitelist([                                                                      // 16648
 *      // Allow same origin resource loads.                                                                           // 16649
 *      'self',                                                                                                        // 16650
 *      // Allow loading from our assets domain.  Notice the difference between * and **.                              // 16651
 *      'http://srv*.assets.example.com/**'                                                                            // 16652
 *    ]);                                                                                                              // 16653
 *                                                                                                                     // 16654
 *    // The blacklist overrides the whitelist so the open redirect here is blocked.                                   // 16655
 *    $sceDelegateProvider.resourceUrlBlacklist([                                                                      // 16656
 *      'http://myapp.example.com/clickThru**'                                                                         // 16657
 *    ]);                                                                                                              // 16658
 *  });                                                                                                                // 16659
 * ```                                                                                                                 // 16660
 */                                                                                                                    // 16661
                                                                                                                       // 16662
function $SceDelegateProvider() {                                                                                      // 16663
  this.SCE_CONTEXTS = SCE_CONTEXTS;                                                                                    // 16664
                                                                                                                       // 16665
  // Resource URLs can also be trusted by policy.                                                                      // 16666
  var resourceUrlWhitelist = ['self'],                                                                                 // 16667
      resourceUrlBlacklist = [];                                                                                       // 16668
                                                                                                                       // 16669
  /**                                                                                                                  // 16670
   * @ngdoc method                                                                                                     // 16671
   * @name $sceDelegateProvider#resourceUrlWhitelist                                                                   // 16672
   * @kind function                                                                                                    // 16673
   *                                                                                                                   // 16674
   * @param {Array=} whitelist When provided, replaces the resourceUrlWhitelist with the value                         // 16675
   *     provided.  This must be an array or null.  A snapshot of this array is used so further                        // 16676
   *     changes to the array are ignored.                                                                             // 16677
   *                                                                                                                   // 16678
   *     Follow {@link ng.$sce#resourceUrlPatternItem this link} for a description of the items                        // 16679
   *     allowed in this array.                                                                                        // 16680
   *                                                                                                                   // 16681
   *     Note: **an empty whitelist array will block all URLs**!                                                       // 16682
   *                                                                                                                   // 16683
   * @return {Array} the currently set whitelist array.                                                                // 16684
   *                                                                                                                   // 16685
   * The **default value** when no whitelist has been explicitly set is `['self']` allowing only                       // 16686
   * same origin resource requests.                                                                                    // 16687
   *                                                                                                                   // 16688
   * @description                                                                                                      // 16689
   * Sets/Gets the whitelist of trusted resource URLs.                                                                 // 16690
   */                                                                                                                  // 16691
  this.resourceUrlWhitelist = function(value) {                                                                        // 16692
    if (arguments.length) {                                                                                            // 16693
      resourceUrlWhitelist = adjustMatchers(value);                                                                    // 16694
    }                                                                                                                  // 16695
    return resourceUrlWhitelist;                                                                                       // 16696
  };                                                                                                                   // 16697
                                                                                                                       // 16698
  /**                                                                                                                  // 16699
   * @ngdoc method                                                                                                     // 16700
   * @name $sceDelegateProvider#resourceUrlBlacklist                                                                   // 16701
   * @kind function                                                                                                    // 16702
   *                                                                                                                   // 16703
   * @param {Array=} blacklist When provided, replaces the resourceUrlBlacklist with the value                         // 16704
   *     provided.  This must be an array or null.  A snapshot of this array is used so further                        // 16705
   *     changes to the array are ignored.                                                                             // 16706
   *                                                                                                                   // 16707
   *     Follow {@link ng.$sce#resourceUrlPatternItem this link} for a description of the items                        // 16708
   *     allowed in this array.                                                                                        // 16709
   *                                                                                                                   // 16710
   *     The typical usage for the blacklist is to **block                                                             // 16711
   *     [open redirects](http://cwe.mitre.org/data/definitions/601.html)** served by your domain as                   // 16712
   *     these would otherwise be trusted but actually return content from the redirected domain.                      // 16713
   *                                                                                                                   // 16714
   *     Finally, **the blacklist overrides the whitelist** and has the final say.                                     // 16715
   *                                                                                                                   // 16716
   * @return {Array} the currently set blacklist array.                                                                // 16717
   *                                                                                                                   // 16718
   * The **default value** when no whitelist has been explicitly set is the empty array (i.e. there                    // 16719
   * is no blacklist.)                                                                                                 // 16720
   *                                                                                                                   // 16721
   * @description                                                                                                      // 16722
   * Sets/Gets the blacklist of trusted resource URLs.                                                                 // 16723
   */                                                                                                                  // 16724
                                                                                                                       // 16725
  this.resourceUrlBlacklist = function(value) {                                                                        // 16726
    if (arguments.length) {                                                                                            // 16727
      resourceUrlBlacklist = adjustMatchers(value);                                                                    // 16728
    }                                                                                                                  // 16729
    return resourceUrlBlacklist;                                                                                       // 16730
  };                                                                                                                   // 16731
                                                                                                                       // 16732
  this.$get = ['$injector', function($injector) {                                                                      // 16733
                                                                                                                       // 16734
    var htmlSanitizer = function htmlSanitizer(html) {                                                                 // 16735
      throw $sceMinErr('unsafe', 'Attempting to use an unsafe value in a safe context.');                              // 16736
    };                                                                                                                 // 16737
                                                                                                                       // 16738
    if ($injector.has('$sanitize')) {                                                                                  // 16739
      htmlSanitizer = $injector.get('$sanitize');                                                                      // 16740
    }                                                                                                                  // 16741
                                                                                                                       // 16742
                                                                                                                       // 16743
    function matchUrl(matcher, parsedUrl) {                                                                            // 16744
      if (matcher === 'self') {                                                                                        // 16745
        return urlIsSameOrigin(parsedUrl);                                                                             // 16746
      } else {                                                                                                         // 16747
        // definitely a regex.  See adjustMatchers()                                                                   // 16748
        return !!matcher.exec(parsedUrl.href);                                                                         // 16749
      }                                                                                                                // 16750
    }                                                                                                                  // 16751
                                                                                                                       // 16752
    function isResourceUrlAllowedByPolicy(url) {                                                                       // 16753
      var parsedUrl = urlResolve(url.toString());                                                                      // 16754
      var i, n, allowed = false;                                                                                       // 16755
      // Ensure that at least one item from the whitelist allows this url.                                             // 16756
      for (i = 0, n = resourceUrlWhitelist.length; i < n; i++) {                                                       // 16757
        if (matchUrl(resourceUrlWhitelist[i], parsedUrl)) {                                                            // 16758
          allowed = true;                                                                                              // 16759
          break;                                                                                                       // 16760
        }                                                                                                              // 16761
      }                                                                                                                // 16762
      if (allowed) {                                                                                                   // 16763
        // Ensure that no item from the blacklist blocked this url.                                                    // 16764
        for (i = 0, n = resourceUrlBlacklist.length; i < n; i++) {                                                     // 16765
          if (matchUrl(resourceUrlBlacklist[i], parsedUrl)) {                                                          // 16766
            allowed = false;                                                                                           // 16767
            break;                                                                                                     // 16768
          }                                                                                                            // 16769
        }                                                                                                              // 16770
      }                                                                                                                // 16771
      return allowed;                                                                                                  // 16772
    }                                                                                                                  // 16773
                                                                                                                       // 16774
    function generateHolderType(Base) {                                                                                // 16775
      var holderType = function TrustedValueHolderType(trustedValue) {                                                 // 16776
        this.$$unwrapTrustedValue = function() {                                                                       // 16777
          return trustedValue;                                                                                         // 16778
        };                                                                                                             // 16779
      };                                                                                                               // 16780
      if (Base) {                                                                                                      // 16781
        holderType.prototype = new Base();                                                                             // 16782
      }                                                                                                                // 16783
      holderType.prototype.valueOf = function sceValueOf() {                                                           // 16784
        return this.$$unwrapTrustedValue();                                                                            // 16785
      };                                                                                                               // 16786
      holderType.prototype.toString = function sceToString() {                                                         // 16787
        return this.$$unwrapTrustedValue().toString();                                                                 // 16788
      };                                                                                                               // 16789
      return holderType;                                                                                               // 16790
    }                                                                                                                  // 16791
                                                                                                                       // 16792
    var trustedValueHolderBase = generateHolderType(),                                                                 // 16793
        byType = {};                                                                                                   // 16794
                                                                                                                       // 16795
    byType[SCE_CONTEXTS.HTML] = generateHolderType(trustedValueHolderBase);                                            // 16796
    byType[SCE_CONTEXTS.CSS] = generateHolderType(trustedValueHolderBase);                                             // 16797
    byType[SCE_CONTEXTS.URL] = generateHolderType(trustedValueHolderBase);                                             // 16798
    byType[SCE_CONTEXTS.JS] = generateHolderType(trustedValueHolderBase);                                              // 16799
    byType[SCE_CONTEXTS.RESOURCE_URL] = generateHolderType(byType[SCE_CONTEXTS.URL]);                                  // 16800
                                                                                                                       // 16801
    /**                                                                                                                // 16802
     * @ngdoc method                                                                                                   // 16803
     * @name $sceDelegate#trustAs                                                                                      // 16804
     *                                                                                                                 // 16805
     * @description                                                                                                    // 16806
     * Returns an object that is trusted by angular for use in specified strict                                        // 16807
     * contextual escaping contexts (such as ng-bind-html, ng-include, any src                                         // 16808
     * attribute interpolation, any dom event binding attribute interpolation                                          // 16809
     * such as for onclick,  etc.) that uses the provided value.                                                       // 16810
     * See {@link ng.$sce $sce} for enabling strict contextual escaping.                                               // 16811
     *                                                                                                                 // 16812
     * @param {string} type The kind of context in which this value is safe for use.  e.g. url,                        // 16813
     *   resourceUrl, html, js and css.                                                                                // 16814
     * @param {*} value The value that that should be considered trusted/safe.                                         // 16815
     * @returns {*} A value that can be used to stand in for the provided `value` in places                            // 16816
     * where Angular expects a $sce.trustAs() return value.                                                            // 16817
     */                                                                                                                // 16818
    function trustAs(type, trustedValue) {                                                                             // 16819
      var Constructor = (byType.hasOwnProperty(type) ? byType[type] : null);                                           // 16820
      if (!Constructor) {                                                                                              // 16821
        throw $sceMinErr('icontext',                                                                                   // 16822
            'Attempted to trust a value in invalid context. Context: {0}; Value: {1}',                                 // 16823
            type, trustedValue);                                                                                       // 16824
      }                                                                                                                // 16825
      if (trustedValue === null || isUndefined(trustedValue) || trustedValue === '') {                                 // 16826
        return trustedValue;                                                                                           // 16827
      }                                                                                                                // 16828
      // All the current contexts in SCE_CONTEXTS happen to be strings.  In order to avoid trusting                    // 16829
      // mutable objects, we ensure here that the value passed in is actually a string.                                // 16830
      if (typeof trustedValue !== 'string') {                                                                          // 16831
        throw $sceMinErr('itype',                                                                                      // 16832
            'Attempted to trust a non-string value in a content requiring a string: Context: {0}',                     // 16833
            type);                                                                                                     // 16834
      }                                                                                                                // 16835
      return new Constructor(trustedValue);                                                                            // 16836
    }                                                                                                                  // 16837
                                                                                                                       // 16838
    /**                                                                                                                // 16839
     * @ngdoc method                                                                                                   // 16840
     * @name $sceDelegate#valueOf                                                                                      // 16841
     *                                                                                                                 // 16842
     * @description                                                                                                    // 16843
     * If the passed parameter had been returned by a prior call to {@link ng.$sceDelegate#trustAs                     // 16844
     * `$sceDelegate.trustAs`}, returns the value that had been passed to {@link                                       // 16845
     * ng.$sceDelegate#trustAs `$sceDelegate.trustAs`}.                                                                // 16846
     *                                                                                                                 // 16847
     * If the passed parameter is not a value that had been returned by {@link                                         // 16848
     * ng.$sceDelegate#trustAs `$sceDelegate.trustAs`}, returns it as-is.                                              // 16849
     *                                                                                                                 // 16850
     * @param {*} value The result of a prior {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs`}                   // 16851
     *      call or anything else.                                                                                     // 16852
     * @returns {*} The `value` that was originally provided to {@link ng.$sceDelegate#trustAs                         // 16853
     *     `$sceDelegate.trustAs`} if `value` is the result of such a call.  Otherwise, returns                        // 16854
     *     `value` unchanged.                                                                                          // 16855
     */                                                                                                                // 16856
    function valueOf(maybeTrusted) {                                                                                   // 16857
      if (maybeTrusted instanceof trustedValueHolderBase) {                                                            // 16858
        return maybeTrusted.$$unwrapTrustedValue();                                                                    // 16859
      } else {                                                                                                         // 16860
        return maybeTrusted;                                                                                           // 16861
      }                                                                                                                // 16862
    }                                                                                                                  // 16863
                                                                                                                       // 16864
    /**                                                                                                                // 16865
     * @ngdoc method                                                                                                   // 16866
     * @name $sceDelegate#getTrusted                                                                                   // 16867
     *                                                                                                                 // 16868
     * @description                                                                                                    // 16869
     * Takes the result of a {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs`} call and                           // 16870
     * returns the originally supplied value if the queried context type is a supertype of the                         // 16871
     * created type.  If this condition isn't satisfied, throws an exception.                                          // 16872
     *                                                                                                                 // 16873
     * @param {string} type The kind of context in which this value is to be used.                                     // 16874
     * @param {*} maybeTrusted The result of a prior {@link ng.$sceDelegate#trustAs                                    // 16875
     *     `$sceDelegate.trustAs`} call.                                                                               // 16876
     * @returns {*} The value the was originally provided to {@link ng.$sceDelegate#trustAs                            // 16877
     *     `$sceDelegate.trustAs`} if valid in this context.  Otherwise, throws an exception.                          // 16878
     */                                                                                                                // 16879
    function getTrusted(type, maybeTrusted) {                                                                          // 16880
      if (maybeTrusted === null || isUndefined(maybeTrusted) || maybeTrusted === '') {                                 // 16881
        return maybeTrusted;                                                                                           // 16882
      }                                                                                                                // 16883
      var constructor = (byType.hasOwnProperty(type) ? byType[type] : null);                                           // 16884
      if (constructor && maybeTrusted instanceof constructor) {                                                        // 16885
        return maybeTrusted.$$unwrapTrustedValue();                                                                    // 16886
      }                                                                                                                // 16887
      // If we get here, then we may only take one of two actions.                                                     // 16888
      // 1. sanitize the value for the requested type, or                                                              // 16889
      // 2. throw an exception.                                                                                        // 16890
      if (type === SCE_CONTEXTS.RESOURCE_URL) {                                                                        // 16891
        if (isResourceUrlAllowedByPolicy(maybeTrusted)) {                                                              // 16892
          return maybeTrusted;                                                                                         // 16893
        } else {                                                                                                       // 16894
          throw $sceMinErr('insecurl',                                                                                 // 16895
              'Blocked loading resource from url not allowed by $sceDelegate policy.  URL: {0}',                       // 16896
              maybeTrusted.toString());                                                                                // 16897
        }                                                                                                              // 16898
      } else if (type === SCE_CONTEXTS.HTML) {                                                                         // 16899
        return htmlSanitizer(maybeTrusted);                                                                            // 16900
      }                                                                                                                // 16901
      throw $sceMinErr('unsafe', 'Attempting to use an unsafe value in a safe context.');                              // 16902
    }                                                                                                                  // 16903
                                                                                                                       // 16904
    return { trustAs: trustAs,                                                                                         // 16905
             getTrusted: getTrusted,                                                                                   // 16906
             valueOf: valueOf };                                                                                       // 16907
  }];                                                                                                                  // 16908
}                                                                                                                      // 16909
                                                                                                                       // 16910
                                                                                                                       // 16911
/**                                                                                                                    // 16912
 * @ngdoc provider                                                                                                     // 16913
 * @name $sceProvider                                                                                                  // 16914
 * @description                                                                                                        // 16915
 *                                                                                                                     // 16916
 * The $sceProvider provider allows developers to configure the {@link ng.$sce $sce} service.                          // 16917
 * -   enable/disable Strict Contextual Escaping (SCE) in a module                                                     // 16918
 * -   override the default implementation with a custom delegate                                                      // 16919
 *                                                                                                                     // 16920
 * Read more about {@link ng.$sce Strict Contextual Escaping (SCE)}.                                                   // 16921
 */                                                                                                                    // 16922
                                                                                                                       // 16923
/* jshint maxlen: false*/                                                                                              // 16924
                                                                                                                       // 16925
/**                                                                                                                    // 16926
 * @ngdoc service                                                                                                      // 16927
 * @name $sce                                                                                                          // 16928
 * @kind function                                                                                                      // 16929
 *                                                                                                                     // 16930
 * @description                                                                                                        // 16931
 *                                                                                                                     // 16932
 * `$sce` is a service that provides Strict Contextual Escaping services to AngularJS.                                 // 16933
 *                                                                                                                     // 16934
 * # Strict Contextual Escaping                                                                                        // 16935
 *                                                                                                                     // 16936
 * Strict Contextual Escaping (SCE) is a mode in which AngularJS requires bindings in certain                          // 16937
 * contexts to result in a value that is marked as safe to use for that context.  One example of                       // 16938
 * such a context is binding arbitrary html controlled by the user via `ng-bind-html`.  We refer                       // 16939
 * to these contexts as privileged or SCE contexts.                                                                    // 16940
 *                                                                                                                     // 16941
 * As of version 1.2, Angular ships with SCE enabled by default.                                                       // 16942
 *                                                                                                                     // 16943
 * Note:  When enabled (the default), IE<11 in quirks mode is not supported.  In this mode, IE<11 allow                // 16944
 * one to execute arbitrary javascript by the use of the expression() syntax.  Refer                                   // 16945
 * <http://blogs.msdn.com/b/ie/archive/2008/10/16/ending-expressions.aspx> to learn more about them.                   // 16946
 * You can ensure your document is in standards mode and not quirks mode by adding `<!doctype html>`                   // 16947
 * to the top of your HTML document.                                                                                   // 16948
 *                                                                                                                     // 16949
 * SCE assists in writing code in way that (a) is secure by default and (b) makes auditing for                         // 16950
 * security vulnerabilities such as XSS, clickjacking, etc. a lot easier.                                              // 16951
 *                                                                                                                     // 16952
 * Here's an example of a binding in a privileged context:                                                             // 16953
 *                                                                                                                     // 16954
 * ```                                                                                                                 // 16955
 * <input ng-model="userHtml" aria-label="User input">                                                                 // 16956
 * <div ng-bind-html="userHtml"></div>                                                                                 // 16957
 * ```                                                                                                                 // 16958
 *                                                                                                                     // 16959
 * Notice that `ng-bind-html` is bound to `userHtml` controlled by the user.  With SCE                                 // 16960
 * disabled, this application allows the user to render arbitrary HTML into the DIV.                                   // 16961
 * In a more realistic example, one may be rendering user comments, blog articles, etc. via                            // 16962
 * bindings.  (HTML is just one example of a context where rendering user controlled input creates                     // 16963
 * security vulnerabilities.)                                                                                          // 16964
 *                                                                                                                     // 16965
 * For the case of HTML, you might use a library, either on the client side, or on the server side,                    // 16966
 * to sanitize unsafe HTML before binding to the value and rendering it in the document.                               // 16967
 *                                                                                                                     // 16968
 * How would you ensure that every place that used these types of bindings was bound to a value that                   // 16969
 * was sanitized by your library (or returned as safe for rendering by your server?)  How can you                      // 16970
 * ensure that you didn't accidentally delete the line that sanitized the value, or renamed some                       // 16971
 * properties/fields and forgot to update the binding to the sanitized value?                                          // 16972
 *                                                                                                                     // 16973
 * To be secure by default, you want to ensure that any such bindings are disallowed unless you can                    // 16974
 * determine that something explicitly says it's safe to use a value for binding in that                               // 16975
 * context.  You can then audit your code (a simple grep would do) to ensure that this is only done                    // 16976
 * for those values that you can easily tell are safe - because they were received from your server,                   // 16977
 * sanitized by your library, etc.  You can organize your codebase to help with this - perhaps                         // 16978
 * allowing only the files in a specific directory to do this.  Ensuring that the internal API                         // 16979
 * exposed by that code doesn't markup arbitrary values as safe then becomes a more manageable task.                   // 16980
 *                                                                                                                     // 16981
 * In the case of AngularJS' SCE service, one uses {@link ng.$sce#trustAs $sce.trustAs}                                // 16982
 * (and shorthand methods such as {@link ng.$sce#trustAsHtml $sce.trustAsHtml}, etc.) to                               // 16983
 * obtain values that will be accepted by SCE / privileged contexts.                                                   // 16984
 *                                                                                                                     // 16985
 *                                                                                                                     // 16986
 * ## How does it work?                                                                                                // 16987
 *                                                                                                                     // 16988
 * In privileged contexts, directives and code will bind to the result of {@link ng.$sce#getTrusted                    // 16989
 * $sce.getTrusted(context, value)} rather than to the value directly.  Directives use {@link                          // 16990
 * ng.$sce#parseAs $sce.parseAs} rather than `$parse` to watch attribute bindings, which performs the                  // 16991
 * {@link ng.$sce#getTrusted $sce.getTrusted} behind the scenes on non-constant literals.                              // 16992
 *                                                                                                                     // 16993
 * As an example, {@link ng.directive:ngBindHtml ngBindHtml} uses {@link                                               // 16994
 * ng.$sce#parseAsHtml $sce.parseAsHtml(binding expression)}.  Here's the actual code (slightly                        // 16995
 * simplified):                                                                                                        // 16996
 *                                                                                                                     // 16997
 * ```                                                                                                                 // 16998
 * var ngBindHtmlDirective = ['$sce', function($sce) {                                                                 // 16999
 *   return function(scope, element, attr) {                                                                           // 17000
 *     scope.$watch($sce.parseAsHtml(attr.ngBindHtml), function(value) {                                               // 17001
 *       element.html(value || '');                                                                                    // 17002
 *     });                                                                                                             // 17003
 *   };                                                                                                                // 17004
 * }];                                                                                                                 // 17005
 * ```                                                                                                                 // 17006
 *                                                                                                                     // 17007
 * ## Impact on loading templates                                                                                      // 17008
 *                                                                                                                     // 17009
 * This applies both to the {@link ng.directive:ngInclude `ng-include`} directive as well as                           // 17010
 * `templateUrl`'s specified by {@link guide/directive directives}.                                                    // 17011
 *                                                                                                                     // 17012
 * By default, Angular only loads templates from the same domain and protocol as the application                       // 17013
 * document.  This is done by calling {@link ng.$sce#getTrustedResourceUrl                                             // 17014
 * $sce.getTrustedResourceUrl} on the template URL.  To load templates from other domains and/or                       // 17015
 * protocols, you may either {@link ng.$sceDelegateProvider#resourceUrlWhitelist whitelist                             // 17016
 * them} or {@link ng.$sce#trustAsResourceUrl wrap it} into a trusted value.                                           // 17017
 *                                                                                                                     // 17018
 * *Please note*:                                                                                                      // 17019
 * The browser's                                                                                                       // 17020
 * [Same Origin Policy](https://code.google.com/p/browsersec/wiki/Part2#Same-origin_policy_for_XMLHttpRequest)         // 17021
 * and [Cross-Origin Resource Sharing (CORS)](http://www.w3.org/TR/cors/)                                              // 17022
 * policy apply in addition to this and may further restrict whether the template is successfully                      // 17023
 * loaded.  This means that without the right CORS policy, loading templates from a different domain                   // 17024
 * won't work on all browsers.  Also, loading templates from `file://` URL does not work on some                       // 17025
 * browsers.                                                                                                           // 17026
 *                                                                                                                     // 17027
 * ## This feels like too much overhead                                                                                // 17028
 *                                                                                                                     // 17029
 * It's important to remember that SCE only applies to interpolation expressions.                                      // 17030
 *                                                                                                                     // 17031
 * If your expressions are constant literals, they're automatically trusted and you don't need to                      // 17032
 * call `$sce.trustAs` on them (remember to include the `ngSanitize` module) (e.g.                                     // 17033
 * `<div ng-bind-html="'<b>implicitly trusted</b>'"></div>`) just works.                                               // 17034
 *                                                                                                                     // 17035
 * Additionally, `a[href]` and `img[src]` automatically sanitize their URLs and do not pass them                       // 17036
 * through {@link ng.$sce#getTrusted $sce.getTrusted}.  SCE doesn't play a role here.                                  // 17037
 *                                                                                                                     // 17038
 * The included {@link ng.$sceDelegate $sceDelegate} comes with sane defaults to allow you to load                     // 17039
 * templates in `ng-include` from your application's domain without having to even know about SCE.                     // 17040
 * It blocks loading templates from other domains or loading templates over http from an https                         // 17041
 * served document.  You can change these by setting your own custom {@link                                            // 17042
 * ng.$sceDelegateProvider#resourceUrlWhitelist whitelists} and {@link                                                 // 17043
 * ng.$sceDelegateProvider#resourceUrlBlacklist blacklists} for matching such URLs.                                    // 17044
 *                                                                                                                     // 17045
 * This significantly reduces the overhead.  It is far easier to pay the small overhead and have an                    // 17046
 * application that's secure and can be audited to verify that with much more ease than bolting                        // 17047
 * security onto an application later.                                                                                 // 17048
 *                                                                                                                     // 17049
 * <a name="contexts"></a>                                                                                             // 17050
 * ## What trusted context types are supported?                                                                        // 17051
 *                                                                                                                     // 17052
 * | Context             | Notes          |                                                                            // 17053
 * |---------------------|----------------|                                                                            // 17054
 * | `$sce.HTML`         | For HTML that's safe to source into the application.  The {@link ng.directive:ngBindHtml ngBindHtml} directive uses this context for bindings. If an unsafe value is encountered and the {@link ngSanitize $sanitize} module is present this will sanitize the value instead of throwing an error. |
 * | `$sce.CSS`          | For CSS that's safe to source into the application.  Currently unused.  Feel free to use it in your own directives. |
 * | `$sce.URL`          | For URLs that are safe to follow as links.  Currently unused (`<a href=` and `<img src=` sanitize their urls and don't constitute an SCE context. |
 * | `$sce.RESOURCE_URL` | For URLs that are not only safe to follow as links, but whose contents are also safe to include in your application.  Examples include `ng-include`, `src` / `ngSrc` bindings for tags other than `IMG` (e.g. `IFRAME`, `OBJECT`, etc.)  <br><br>Note that `$sce.RESOURCE_URL` makes a stronger statement about the URL than `$sce.URL` does and therefore contexts requiring values trusted for `$sce.RESOURCE_URL` can be used anywhere that values trusted for `$sce.URL` are required. |
 * | `$sce.JS`           | For JavaScript that is safe to execute in your application's context.  Currently unused.  Feel free to use it in your own directives. |
 *                                                                                                                     // 17060
 * ## Format of items in {@link ng.$sceDelegateProvider#resourceUrlWhitelist resourceUrlWhitelist}/{@link ng.$sceDelegateProvider#resourceUrlBlacklist Blacklist} <a name="resourceUrlPatternItem"></a>
 *                                                                                                                     // 17062
 *  Each element in these arrays must be one of the following:                                                         // 17063
 *                                                                                                                     // 17064
 *  - **'self'**                                                                                                       // 17065
 *    - The special **string**, `'self'`, can be used to match against all URLs of the **same                          // 17066
 *      domain** as the application document using the **same protocol**.                                              // 17067
 *  - **String** (except the special value `'self'`)                                                                   // 17068
 *    - The string is matched against the full *normalized / absolute URL* of the resource                             // 17069
 *      being tested (substring matches are not good enough.)                                                          // 17070
 *    - There are exactly **two wildcard sequences** - `*` and `**`.  All other characters                             // 17071
 *      match themselves.                                                                                              // 17072
 *    - `*`: matches zero or more occurrences of any character other than one of the following 6                       // 17073
 *      characters: '`:`', '`/`', '`.`', '`?`', '`&`' and '`;`'.  It's a useful wildcard for use                       // 17074
 *      in a whitelist.                                                                                                // 17075
 *    - `**`: matches zero or more occurrences of *any* character.  As such, it's not                                  // 17076
 *      appropriate for use in a scheme, domain, etc. as it would match too much.  (e.g.                               // 17077
 *      http://**.example.com/ would match http://evil.com/?ignore=.example.com/ and that might                        // 17078
 *      not have been the intention.)  Its usage at the very end of the path is ok.  (e.g.                             // 17079
 *      http://foo.example.com/templates/**).                                                                          // 17080
 *  - **RegExp** (*see caveat below*)                                                                                  // 17081
 *    - *Caveat*:  While regular expressions are powerful and offer great flexibility,  their syntax                   // 17082
 *      (and all the inevitable escaping) makes them *harder to maintain*.  It's easy to                               // 17083
 *      accidentally introduce a bug when one updates a complex expression (imho, all regexes should                   // 17084
 *      have good test coverage).  For instance, the use of `.` in the regex is correct only in a                      // 17085
 *      small number of cases.  A `.` character in the regex used when matching the scheme or a                        // 17086
 *      subdomain could be matched against a `:` or literal `.` that was likely not intended.   It                     // 17087
 *      is highly recommended to use the string patterns and only fall back to regular expressions                     // 17088
 *      as a last resort.                                                                                              // 17089
 *    - The regular expression must be an instance of RegExp (i.e. not a string.)  It is                               // 17090
 *      matched against the **entire** *normalized / absolute URL* of the resource being tested                        // 17091
 *      (even when the RegExp did not have the `^` and `$` codes.)  In addition, any flags                             // 17092
 *      present on the RegExp (such as multiline, global, ignoreCase) are ignored.                                     // 17093
 *    - If you are generating your JavaScript from some other templating engine (not                                   // 17094
 *      recommended, e.g. in issue [#4006](https://github.com/angular/angular.js/issues/4006)),                        // 17095
 *      remember to escape your regular expression (and be aware that you might need more than                         // 17096
 *      one level of escaping depending on your templating engine and the way you interpolated                         // 17097
 *      the value.)  Do make use of your platform's escaping mechanism as it might be good                             // 17098
 *      enough before coding your own.  E.g. Ruby has                                                                  // 17099
 *      [Regexp.escape(str)](http://www.ruby-doc.org/core-2.0.0/Regexp.html#method-c-escape)                           // 17100
 *      and Python has [re.escape](http://docs.python.org/library/re.html#re.escape).                                  // 17101
 *      Javascript lacks a similar built in function for escaping.  Take a look at Google                              // 17102
 *      Closure library's [goog.string.regExpEscape(s)](                                                               // 17103
 *      http://docs.closure-library.googlecode.com/git/closure_goog_string_string.js.source.html#line962).             // 17104
 *                                                                                                                     // 17105
 * Refer {@link ng.$sceDelegateProvider $sceDelegateProvider} for an example.                                          // 17106
 *                                                                                                                     // 17107
 * ## Show me an example using SCE.                                                                                    // 17108
 *                                                                                                                     // 17109
 * <example module="mySceApp" deps="angular-sanitize.js">                                                              // 17110
 * <file name="index.html">                                                                                            // 17111
 *   <div ng-controller="AppController as myCtrl">                                                                     // 17112
 *     <i ng-bind-html="myCtrl.explicitlyTrustedHtml" id="explicitlyTrustedHtml"></i><br><br>                          // 17113
 *     <b>User comments</b><br>                                                                                        // 17114
 *     By default, HTML that isn't explicitly trusted (e.g. Alice's comment) is sanitized when                         // 17115
 *     $sanitize is available.  If $sanitize isn't available, this results in an error instead of an                   // 17116
 *     exploit.                                                                                                        // 17117
 *     <div class="well">                                                                                              // 17118
 *       <div ng-repeat="userComment in myCtrl.userComments">                                                          // 17119
 *         <b>{{userComment.name}}</b>:                                                                                // 17120
 *         <span ng-bind-html="userComment.htmlComment" class="htmlComment"></span>                                    // 17121
 *         <br>                                                                                                        // 17122
 *       </div>                                                                                                        // 17123
 *     </div>                                                                                                          // 17124
 *   </div>                                                                                                            // 17125
 * </file>                                                                                                             // 17126
 *                                                                                                                     // 17127
 * <file name="script.js">                                                                                             // 17128
 *   angular.module('mySceApp', ['ngSanitize'])                                                                        // 17129
 *     .controller('AppController', ['$http', '$templateCache', '$sce',                                                // 17130
 *       function($http, $templateCache, $sce) {                                                                       // 17131
 *         var self = this;                                                                                            // 17132
 *         $http.get("test_data.json", {cache: $templateCache}).success(function(userComments) {                       // 17133
 *           self.userComments = userComments;                                                                         // 17134
 *         });                                                                                                         // 17135
 *         self.explicitlyTrustedHtml = $sce.trustAsHtml(                                                              // 17136
 *             '<span onmouseover="this.textContent=&quot;Explicitly trusted HTML bypasses ' +                         // 17137
 *             'sanitization.&quot;">Hover over this text.</span>');                                                   // 17138
 *       }]);                                                                                                          // 17139
 * </file>                                                                                                             // 17140
 *                                                                                                                     // 17141
 * <file name="test_data.json">                                                                                        // 17142
 * [                                                                                                                   // 17143
 *   { "name": "Alice",                                                                                                // 17144
 *     "htmlComment":                                                                                                  // 17145
 *         "<span onmouseover='this.textContent=\"PWN3D!\"'>Is <i>anyone</i> reading this?</span>"                     // 17146
 *   },                                                                                                                // 17147
 *   { "name": "Bob",                                                                                                  // 17148
 *     "htmlComment": "<i>Yes!</i>  Am I the only other one?"                                                          // 17149
 *   }                                                                                                                 // 17150
 * ]                                                                                                                   // 17151
 * </file>                                                                                                             // 17152
 *                                                                                                                     // 17153
 * <file name="protractor.js" type="protractor">                                                                       // 17154
 *   describe('SCE doc demo', function() {                                                                             // 17155
 *     it('should sanitize untrusted values', function() {                                                             // 17156
 *       expect(element.all(by.css('.htmlComment')).first().getInnerHtml())                                            // 17157
 *           .toBe('<span>Is <i>anyone</i> reading this?</span>');                                                     // 17158
 *     });                                                                                                             // 17159
 *                                                                                                                     // 17160
 *     it('should NOT sanitize explicitly trusted values', function() {                                                // 17161
 *       expect(element(by.id('explicitlyTrustedHtml')).getInnerHtml()).toBe(                                          // 17162
 *           '<span onmouseover="this.textContent=&quot;Explicitly trusted HTML bypasses ' +                           // 17163
 *           'sanitization.&quot;">Hover over this text.</span>');                                                     // 17164
 *     });                                                                                                             // 17165
 *   });                                                                                                               // 17166
 * </file>                                                                                                             // 17167
 * </example>                                                                                                          // 17168
 *                                                                                                                     // 17169
 *                                                                                                                     // 17170
 *                                                                                                                     // 17171
 * ## Can I disable SCE completely?                                                                                    // 17172
 *                                                                                                                     // 17173
 * Yes, you can.  However, this is strongly discouraged.  SCE gives you a lot of security benefits                     // 17174
 * for little coding overhead.  It will be much harder to take an SCE disabled application and                         // 17175
 * either secure it on your own or enable SCE at a later stage.  It might make sense to disable SCE                    // 17176
 * for cases where you have a lot of existing code that was written before SCE was introduced and                      // 17177
 * you're migrating them a module at a time.                                                                           // 17178
 *                                                                                                                     // 17179
 * That said, here's how you can completely disable SCE:                                                               // 17180
 *                                                                                                                     // 17181
 * ```                                                                                                                 // 17182
 * angular.module('myAppWithSceDisabledmyApp', []).config(function($sceProvider) {                                     // 17183
 *   // Completely disable SCE.  For demonstration purposes only!                                                      // 17184
 *   // Do not use in new projects.                                                                                    // 17185
 *   $sceProvider.enabled(false);                                                                                      // 17186
 * });                                                                                                                 // 17187
 * ```                                                                                                                 // 17188
 *                                                                                                                     // 17189
 */                                                                                                                    // 17190
/* jshint maxlen: 100 */                                                                                               // 17191
                                                                                                                       // 17192
function $SceProvider() {                                                                                              // 17193
  var enabled = true;                                                                                                  // 17194
                                                                                                                       // 17195
  /**                                                                                                                  // 17196
   * @ngdoc method                                                                                                     // 17197
   * @name $sceProvider#enabled                                                                                        // 17198
   * @kind function                                                                                                    // 17199
   *                                                                                                                   // 17200
   * @param {boolean=} value If provided, then enables/disables SCE.                                                   // 17201
   * @return {boolean} true if SCE is enabled, false otherwise.                                                        // 17202
   *                                                                                                                   // 17203
   * @description                                                                                                      // 17204
   * Enables/disables SCE and returns the current value.                                                               // 17205
   */                                                                                                                  // 17206
  this.enabled = function(value) {                                                                                     // 17207
    if (arguments.length) {                                                                                            // 17208
      enabled = !!value;                                                                                               // 17209
    }                                                                                                                  // 17210
    return enabled;                                                                                                    // 17211
  };                                                                                                                   // 17212
                                                                                                                       // 17213
                                                                                                                       // 17214
  /* Design notes on the default implementation for SCE.                                                               // 17215
   *                                                                                                                   // 17216
   * The API contract for the SCE delegate                                                                             // 17217
   * -------------------------------------                                                                             // 17218
   * The SCE delegate object must provide the following 3 methods:                                                     // 17219
   *                                                                                                                   // 17220
   * - trustAs(contextEnum, value)                                                                                     // 17221
   *     This method is used to tell the SCE service that the provided value is OK to use in the                       // 17222
   *     contexts specified by contextEnum.  It must return an object that will be accepted by                         // 17223
   *     getTrusted() for a compatible contextEnum and return this value.                                              // 17224
   *                                                                                                                   // 17225
   * - valueOf(value)                                                                                                  // 17226
   *     For values that were not produced by trustAs(), return them as is.  For values that were                      // 17227
   *     produced by trustAs(), return the corresponding input value to trustAs.  Basically, if                        // 17228
   *     trustAs is wrapping the given values into some type, this operation unwraps it when given                     // 17229
   *     such a value.                                                                                                 // 17230
   *                                                                                                                   // 17231
   * - getTrusted(contextEnum, value)                                                                                  // 17232
   *     This function should return the a value that is safe to use in the context specified by                       // 17233
   *     contextEnum or throw and exception otherwise.                                                                 // 17234
   *                                                                                                                   // 17235
   * NOTE: This contract deliberately does NOT state that values returned by trustAs() must be                         // 17236
   * opaque or wrapped in some holder object.  That happens to be an implementation detail.  For                       // 17237
   * instance, an implementation could maintain a registry of all trusted objects by context.  In                      // 17238
   * such a case, trustAs() would return the same object that was passed in.  getTrusted() would                       // 17239
   * return the same object passed in if it was found in the registry under a compatible context or                    // 17240
   * throw an exception otherwise.  An implementation might only wrap values some of the time based                    // 17241
   * on some criteria.  getTrusted() might return a value and not throw an exception for special                       // 17242
   * constants or objects even if not wrapped.  All such implementations fulfill this contract.                        // 17243
   *                                                                                                                   // 17244
   *                                                                                                                   // 17245
   * A note on the inheritance model for SCE contexts                                                                  // 17246
   * ------------------------------------------------                                                                  // 17247
   * I've used inheritance and made RESOURCE_URL wrapped types a subtype of URL wrapped types.  This                   // 17248
   * is purely an implementation details.                                                                              // 17249
   *                                                                                                                   // 17250
   * The contract is simply this:                                                                                      // 17251
   *                                                                                                                   // 17252
   *     getTrusted($sce.RESOURCE_URL, value) succeeding implies that getTrusted($sce.URL, value)                      // 17253
   *     will also succeed.                                                                                            // 17254
   *                                                                                                                   // 17255
   * Inheritance happens to capture this in a natural way.  In some future, we                                         // 17256
   * may not use inheritance anymore.  That is OK because no code outside of                                           // 17257
   * sce.js and sceSpecs.js would need to be aware of this detail.                                                     // 17258
   */                                                                                                                  // 17259
                                                                                                                       // 17260
  this.$get = ['$parse', '$sceDelegate', function(                                                                     // 17261
                $parse,   $sceDelegate) {                                                                              // 17262
    // Prereq: Ensure that we're not running in IE<11 quirks mode.  In that mode, IE < 11 allow                        // 17263
    // the "expression(javascript expression)" syntax which is insecure.                                               // 17264
    if (enabled && msie < 8) {                                                                                         // 17265
      throw $sceMinErr('iequirks',                                                                                     // 17266
        'Strict Contextual Escaping does not support Internet Explorer version < 11 in quirks ' +                      // 17267
        'mode.  You can fix this by adding the text <!doctype html> to the top of your HTML ' +                        // 17268
        'document.  See http://docs.angularjs.org/api/ng.$sce for more information.');                                 // 17269
    }                                                                                                                  // 17270
                                                                                                                       // 17271
    var sce = shallowCopy(SCE_CONTEXTS);                                                                               // 17272
                                                                                                                       // 17273
    /**                                                                                                                // 17274
     * @ngdoc method                                                                                                   // 17275
     * @name $sce#isEnabled                                                                                            // 17276
     * @kind function                                                                                                  // 17277
     *                                                                                                                 // 17278
     * @return {Boolean} true if SCE is enabled, false otherwise.  If you want to set the value, you                   // 17279
     * have to do it at module config time on {@link ng.$sceProvider $sceProvider}.                                    // 17280
     *                                                                                                                 // 17281
     * @description                                                                                                    // 17282
     * Returns a boolean indicating if SCE is enabled.                                                                 // 17283
     */                                                                                                                // 17284
    sce.isEnabled = function() {                                                                                       // 17285
      return enabled;                                                                                                  // 17286
    };                                                                                                                 // 17287
    sce.trustAs = $sceDelegate.trustAs;                                                                                // 17288
    sce.getTrusted = $sceDelegate.getTrusted;                                                                          // 17289
    sce.valueOf = $sceDelegate.valueOf;                                                                                // 17290
                                                                                                                       // 17291
    if (!enabled) {                                                                                                    // 17292
      sce.trustAs = sce.getTrusted = function(type, value) { return value; };                                          // 17293
      sce.valueOf = identity;                                                                                          // 17294
    }                                                                                                                  // 17295
                                                                                                                       // 17296
    /**                                                                                                                // 17297
     * @ngdoc method                                                                                                   // 17298
     * @name $sce#parseAs                                                                                              // 17299
     *                                                                                                                 // 17300
     * @description                                                                                                    // 17301
     * Converts Angular {@link guide/expression expression} into a function.  This is like {@link                      // 17302
     * ng.$parse $parse} and is identical when the expression is a literal constant.  Otherwise, it                    // 17303
     * wraps the expression in a call to {@link ng.$sce#getTrusted $sce.getTrusted(*type*,                             // 17304
     * *result*)}                                                                                                      // 17305
     *                                                                                                                 // 17306
     * @param {string} type The kind of SCE context in which this result will be used.                                 // 17307
     * @param {string} expression String expression to compile.                                                        // 17308
     * @returns {function(context, locals)} a function which represents the compiled expression:                       // 17309
     *                                                                                                                 // 17310
     *    * `context` – `{object}` – an object against which any expressions embedded in the strings                   // 17311
     *      are evaluated against (typically a scope object).                                                          // 17312
     *    * `locals` – `{object=}` – local variables context object, useful for overriding values in                   // 17313
     *      `context`.                                                                                                 // 17314
     */                                                                                                                // 17315
    sce.parseAs = function sceParseAs(type, expr) {                                                                    // 17316
      var parsed = $parse(expr);                                                                                       // 17317
      if (parsed.literal && parsed.constant) {                                                                         // 17318
        return parsed;                                                                                                 // 17319
      } else {                                                                                                         // 17320
        return $parse(expr, function(value) {                                                                          // 17321
          return sce.getTrusted(type, value);                                                                          // 17322
        });                                                                                                            // 17323
      }                                                                                                                // 17324
    };                                                                                                                 // 17325
                                                                                                                       // 17326
    /**                                                                                                                // 17327
     * @ngdoc method                                                                                                   // 17328
     * @name $sce#trustAs                                                                                              // 17329
     *                                                                                                                 // 17330
     * @description                                                                                                    // 17331
     * Delegates to {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs`}.  As such,                                  // 17332
     * returns an object that is trusted by angular for use in specified strict contextual                             // 17333
     * escaping contexts (such as ng-bind-html, ng-include, any src attribute                                          // 17334
     * interpolation, any dom event binding attribute interpolation such as for onclick,  etc.)                        // 17335
     * that uses the provided value.  See * {@link ng.$sce $sce} for enabling strict contextual                        // 17336
     * escaping.                                                                                                       // 17337
     *                                                                                                                 // 17338
     * @param {string} type The kind of context in which this value is safe for use.  e.g. url,                        // 17339
     *   resourceUrl, html, js and css.                                                                                // 17340
     * @param {*} value The value that that should be considered trusted/safe.                                         // 17341
     * @returns {*} A value that can be used to stand in for the provided `value` in places                            // 17342
     * where Angular expects a $sce.trustAs() return value.                                                            // 17343
     */                                                                                                                // 17344
                                                                                                                       // 17345
    /**                                                                                                                // 17346
     * @ngdoc method                                                                                                   // 17347
     * @name $sce#trustAsHtml                                                                                          // 17348
     *                                                                                                                 // 17349
     * @description                                                                                                    // 17350
     * Shorthand method.  `$sce.trustAsHtml(value)` →                                                                  // 17351
     *     {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs($sce.HTML, value)`}                                    // 17352
     *                                                                                                                 // 17353
     * @param {*} value The value to trustAs.                                                                          // 17354
     * @returns {*} An object that can be passed to {@link ng.$sce#getTrustedHtml                                      // 17355
     *     $sce.getTrustedHtml(value)} to obtain the original value.  (privileged directives                           // 17356
     *     only accept expressions that are either literal constants or are the                                        // 17357
     *     return value of {@link ng.$sce#trustAs $sce.trustAs}.)                                                      // 17358
     */                                                                                                                // 17359
                                                                                                                       // 17360
    /**                                                                                                                // 17361
     * @ngdoc method                                                                                                   // 17362
     * @name $sce#trustAsUrl                                                                                           // 17363
     *                                                                                                                 // 17364
     * @description                                                                                                    // 17365
     * Shorthand method.  `$sce.trustAsUrl(value)` →                                                                   // 17366
     *     {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs($sce.URL, value)`}                                     // 17367
     *                                                                                                                 // 17368
     * @param {*} value The value to trustAs.                                                                          // 17369
     * @returns {*} An object that can be passed to {@link ng.$sce#getTrustedUrl                                       // 17370
     *     $sce.getTrustedUrl(value)} to obtain the original value.  (privileged directives                            // 17371
     *     only accept expressions that are either literal constants or are the                                        // 17372
     *     return value of {@link ng.$sce#trustAs $sce.trustAs}.)                                                      // 17373
     */                                                                                                                // 17374
                                                                                                                       // 17375
    /**                                                                                                                // 17376
     * @ngdoc method                                                                                                   // 17377
     * @name $sce#trustAsResourceUrl                                                                                   // 17378
     *                                                                                                                 // 17379
     * @description                                                                                                    // 17380
     * Shorthand method.  `$sce.trustAsResourceUrl(value)` →                                                           // 17381
     *     {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs($sce.RESOURCE_URL, value)`}                            // 17382
     *                                                                                                                 // 17383
     * @param {*} value The value to trustAs.                                                                          // 17384
     * @returns {*} An object that can be passed to {@link ng.$sce#getTrustedResourceUrl                               // 17385
     *     $sce.getTrustedResourceUrl(value)} to obtain the original value.  (privileged directives                    // 17386
     *     only accept expressions that are either literal constants or are the return                                 // 17387
     *     value of {@link ng.$sce#trustAs $sce.trustAs}.)                                                             // 17388
     */                                                                                                                // 17389
                                                                                                                       // 17390
    /**                                                                                                                // 17391
     * @ngdoc method                                                                                                   // 17392
     * @name $sce#trustAsJs                                                                                            // 17393
     *                                                                                                                 // 17394
     * @description                                                                                                    // 17395
     * Shorthand method.  `$sce.trustAsJs(value)` →                                                                    // 17396
     *     {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs($sce.JS, value)`}                                      // 17397
     *                                                                                                                 // 17398
     * @param {*} value The value to trustAs.                                                                          // 17399
     * @returns {*} An object that can be passed to {@link ng.$sce#getTrustedJs                                        // 17400
     *     $sce.getTrustedJs(value)} to obtain the original value.  (privileged directives                             // 17401
     *     only accept expressions that are either literal constants or are the                                        // 17402
     *     return value of {@link ng.$sce#trustAs $sce.trustAs}.)                                                      // 17403
     */                                                                                                                // 17404
                                                                                                                       // 17405
    /**                                                                                                                // 17406
     * @ngdoc method                                                                                                   // 17407
     * @name $sce#getTrusted                                                                                           // 17408
     *                                                                                                                 // 17409
     * @description                                                                                                    // 17410
     * Delegates to {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted`}.  As such,                            // 17411
     * takes the result of a {@link ng.$sce#trustAs `$sce.trustAs`}() call and returns the                             // 17412
     * originally supplied value if the queried context type is a supertype of the created type.                       // 17413
     * If this condition isn't satisfied, throws an exception.                                                         // 17414
     *                                                                                                                 // 17415
     * @param {string} type The kind of context in which this value is to be used.                                     // 17416
     * @param {*} maybeTrusted The result of a prior {@link ng.$sce#trustAs `$sce.trustAs`}                            // 17417
     *                         call.                                                                                   // 17418
     * @returns {*} The value the was originally provided to                                                           // 17419
     *              {@link ng.$sce#trustAs `$sce.trustAs`} if valid in this context.                                   // 17420
     *              Otherwise, throws an exception.                                                                    // 17421
     */                                                                                                                // 17422
                                                                                                                       // 17423
    /**                                                                                                                // 17424
     * @ngdoc method                                                                                                   // 17425
     * @name $sce#getTrustedHtml                                                                                       // 17426
     *                                                                                                                 // 17427
     * @description                                                                                                    // 17428
     * Shorthand method.  `$sce.getTrustedHtml(value)` →                                                               // 17429
     *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.HTML, value)`}                              // 17430
     *                                                                                                                 // 17431
     * @param {*} value The value to pass to `$sce.getTrusted`.                                                        // 17432
     * @returns {*} The return value of `$sce.getTrusted($sce.HTML, value)`                                            // 17433
     */                                                                                                                // 17434
                                                                                                                       // 17435
    /**                                                                                                                // 17436
     * @ngdoc method                                                                                                   // 17437
     * @name $sce#getTrustedCss                                                                                        // 17438
     *                                                                                                                 // 17439
     * @description                                                                                                    // 17440
     * Shorthand method.  `$sce.getTrustedCss(value)` →                                                                // 17441
     *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.CSS, value)`}                               // 17442
     *                                                                                                                 // 17443
     * @param {*} value The value to pass to `$sce.getTrusted`.                                                        // 17444
     * @returns {*} The return value of `$sce.getTrusted($sce.CSS, value)`                                             // 17445
     */                                                                                                                // 17446
                                                                                                                       // 17447
    /**                                                                                                                // 17448
     * @ngdoc method                                                                                                   // 17449
     * @name $sce#getTrustedUrl                                                                                        // 17450
     *                                                                                                                 // 17451
     * @description                                                                                                    // 17452
     * Shorthand method.  `$sce.getTrustedUrl(value)` →                                                                // 17453
     *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.URL, value)`}                               // 17454
     *                                                                                                                 // 17455
     * @param {*} value The value to pass to `$sce.getTrusted`.                                                        // 17456
     * @returns {*} The return value of `$sce.getTrusted($sce.URL, value)`                                             // 17457
     */                                                                                                                // 17458
                                                                                                                       // 17459
    /**                                                                                                                // 17460
     * @ngdoc method                                                                                                   // 17461
     * @name $sce#getTrustedResourceUrl                                                                                // 17462
     *                                                                                                                 // 17463
     * @description                                                                                                    // 17464
     * Shorthand method.  `$sce.getTrustedResourceUrl(value)` →                                                        // 17465
     *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.RESOURCE_URL, value)`}                      // 17466
     *                                                                                                                 // 17467
     * @param {*} value The value to pass to `$sceDelegate.getTrusted`.                                                // 17468
     * @returns {*} The return value of `$sce.getTrusted($sce.RESOURCE_URL, value)`                                    // 17469
     */                                                                                                                // 17470
                                                                                                                       // 17471
    /**                                                                                                                // 17472
     * @ngdoc method                                                                                                   // 17473
     * @name $sce#getTrustedJs                                                                                         // 17474
     *                                                                                                                 // 17475
     * @description                                                                                                    // 17476
     * Shorthand method.  `$sce.getTrustedJs(value)` →                                                                 // 17477
     *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.JS, value)`}                                // 17478
     *                                                                                                                 // 17479
     * @param {*} value The value to pass to `$sce.getTrusted`.                                                        // 17480
     * @returns {*} The return value of `$sce.getTrusted($sce.JS, value)`                                              // 17481
     */                                                                                                                // 17482
                                                                                                                       // 17483
    /**                                                                                                                // 17484
     * @ngdoc method                                                                                                   // 17485
     * @name $sce#parseAsHtml                                                                                          // 17486
     *                                                                                                                 // 17487
     * @description                                                                                                    // 17488
     * Shorthand method.  `$sce.parseAsHtml(expression string)` →                                                      // 17489
     *     {@link ng.$sce#parseAs `$sce.parseAs($sce.HTML, value)`}                                                    // 17490
     *                                                                                                                 // 17491
     * @param {string} expression String expression to compile.                                                        // 17492
     * @returns {function(context, locals)} a function which represents the compiled expression:                       // 17493
     *                                                                                                                 // 17494
     *    * `context` – `{object}` – an object against which any expressions embedded in the strings                   // 17495
     *      are evaluated against (typically a scope object).                                                          // 17496
     *    * `locals` – `{object=}` – local variables context object, useful for overriding values in                   // 17497
     *      `context`.                                                                                                 // 17498
     */                                                                                                                // 17499
                                                                                                                       // 17500
    /**                                                                                                                // 17501
     * @ngdoc method                                                                                                   // 17502
     * @name $sce#parseAsCss                                                                                           // 17503
     *                                                                                                                 // 17504
     * @description                                                                                                    // 17505
     * Shorthand method.  `$sce.parseAsCss(value)` →                                                                   // 17506
     *     {@link ng.$sce#parseAs `$sce.parseAs($sce.CSS, value)`}                                                     // 17507
     *                                                                                                                 // 17508
     * @param {string} expression String expression to compile.                                                        // 17509
     * @returns {function(context, locals)} a function which represents the compiled expression:                       // 17510
     *                                                                                                                 // 17511
     *    * `context` – `{object}` – an object against which any expressions embedded in the strings                   // 17512
     *      are evaluated against (typically a scope object).                                                          // 17513
     *    * `locals` – `{object=}` – local variables context object, useful for overriding values in                   // 17514
     *      `context`.                                                                                                 // 17515
     */                                                                                                                // 17516
                                                                                                                       // 17517
    /**                                                                                                                // 17518
     * @ngdoc method                                                                                                   // 17519
     * @name $sce#parseAsUrl                                                                                           // 17520
     *                                                                                                                 // 17521
     * @description                                                                                                    // 17522
     * Shorthand method.  `$sce.parseAsUrl(value)` →                                                                   // 17523
     *     {@link ng.$sce#parseAs `$sce.parseAs($sce.URL, value)`}                                                     // 17524
     *                                                                                                                 // 17525
     * @param {string} expression String expression to compile.                                                        // 17526
     * @returns {function(context, locals)} a function which represents the compiled expression:                       // 17527
     *                                                                                                                 // 17528
     *    * `context` – `{object}` – an object against which any expressions embedded in the strings                   // 17529
     *      are evaluated against (typically a scope object).                                                          // 17530
     *    * `locals` – `{object=}` – local variables context object, useful for overriding values in                   // 17531
     *      `context`.                                                                                                 // 17532
     */                                                                                                                // 17533
                                                                                                                       // 17534
    /**                                                                                                                // 17535
     * @ngdoc method                                                                                                   // 17536
     * @name $sce#parseAsResourceUrl                                                                                   // 17537
     *                                                                                                                 // 17538
     * @description                                                                                                    // 17539
     * Shorthand method.  `$sce.parseAsResourceUrl(value)` →                                                           // 17540
     *     {@link ng.$sce#parseAs `$sce.parseAs($sce.RESOURCE_URL, value)`}                                            // 17541
     *                                                                                                                 // 17542
     * @param {string} expression String expression to compile.                                                        // 17543
     * @returns {function(context, locals)} a function which represents the compiled expression:                       // 17544
     *                                                                                                                 // 17545
     *    * `context` – `{object}` – an object against which any expressions embedded in the strings                   // 17546
     *      are evaluated against (typically a scope object).                                                          // 17547
     *    * `locals` – `{object=}` – local variables context object, useful for overriding values in                   // 17548
     *      `context`.                                                                                                 // 17549
     */                                                                                                                // 17550
                                                                                                                       // 17551
    /**                                                                                                                // 17552
     * @ngdoc method                                                                                                   // 17553
     * @name $sce#parseAsJs                                                                                            // 17554
     *                                                                                                                 // 17555
     * @description                                                                                                    // 17556
     * Shorthand method.  `$sce.parseAsJs(value)` →                                                                    // 17557
     *     {@link ng.$sce#parseAs `$sce.parseAs($sce.JS, value)`}                                                      // 17558
     *                                                                                                                 // 17559
     * @param {string} expression String expression to compile.                                                        // 17560
     * @returns {function(context, locals)} a function which represents the compiled expression:                       // 17561
     *                                                                                                                 // 17562
     *    * `context` – `{object}` – an object against which any expressions embedded in the strings                   // 17563
     *      are evaluated against (typically a scope object).                                                          // 17564
     *    * `locals` – `{object=}` – local variables context object, useful for overriding values in                   // 17565
     *      `context`.                                                                                                 // 17566
     */                                                                                                                // 17567
                                                                                                                       // 17568
    // Shorthand delegations.                                                                                          // 17569
    var parse = sce.parseAs,                                                                                           // 17570
        getTrusted = sce.getTrusted,                                                                                   // 17571
        trustAs = sce.trustAs;                                                                                         // 17572
                                                                                                                       // 17573
    forEach(SCE_CONTEXTS, function(enumValue, name) {                                                                  // 17574
      var lName = lowercase(name);                                                                                     // 17575
      sce[camelCase("parse_as_" + lName)] = function(expr) {                                                           // 17576
        return parse(enumValue, expr);                                                                                 // 17577
      };                                                                                                               // 17578
      sce[camelCase("get_trusted_" + lName)] = function(value) {                                                       // 17579
        return getTrusted(enumValue, value);                                                                           // 17580
      };                                                                                                               // 17581
      sce[camelCase("trust_as_" + lName)] = function(value) {                                                          // 17582
        return trustAs(enumValue, value);                                                                              // 17583
      };                                                                                                               // 17584
    });                                                                                                                // 17585
                                                                                                                       // 17586
    return sce;                                                                                                        // 17587
  }];                                                                                                                  // 17588
}                                                                                                                      // 17589
                                                                                                                       // 17590
/**                                                                                                                    // 17591
 * !!! This is an undocumented "private" service !!!                                                                   // 17592
 *                                                                                                                     // 17593
 * @name $sniffer                                                                                                      // 17594
 * @requires $window                                                                                                   // 17595
 * @requires $document                                                                                                 // 17596
 *                                                                                                                     // 17597
 * @property {boolean} history Does the browser support html5 history api ?                                            // 17598
 * @property {boolean} transitions Does the browser support CSS transition events ?                                    // 17599
 * @property {boolean} animations Does the browser support CSS animation events ?                                      // 17600
 *                                                                                                                     // 17601
 * @description                                                                                                        // 17602
 * This is very simple implementation of testing browser's features.                                                   // 17603
 */                                                                                                                    // 17604
function $SnifferProvider() {                                                                                          // 17605
  this.$get = ['$window', '$document', function($window, $document) {                                                  // 17606
    var eventSupport = {},                                                                                             // 17607
        android =                                                                                                      // 17608
          toInt((/android (\d+)/.exec(lowercase(($window.navigator || {}).userAgent)) || [])[1]),                      // 17609
        boxee = /Boxee/i.test(($window.navigator || {}).userAgent),                                                    // 17610
        document = $document[0] || {},                                                                                 // 17611
        vendorPrefix,                                                                                                  // 17612
        vendorRegex = /^(Moz|webkit|ms)(?=[A-Z])/,                                                                     // 17613
        bodyStyle = document.body && document.body.style,                                                              // 17614
        transitions = false,                                                                                           // 17615
        animations = false,                                                                                            // 17616
        match;                                                                                                         // 17617
                                                                                                                       // 17618
    if (bodyStyle) {                                                                                                   // 17619
      for (var prop in bodyStyle) {                                                                                    // 17620
        if (match = vendorRegex.exec(prop)) {                                                                          // 17621
          vendorPrefix = match[0];                                                                                     // 17622
          vendorPrefix = vendorPrefix.substr(0, 1).toUpperCase() + vendorPrefix.substr(1);                             // 17623
          break;                                                                                                       // 17624
        }                                                                                                              // 17625
      }                                                                                                                // 17626
                                                                                                                       // 17627
      if (!vendorPrefix) {                                                                                             // 17628
        vendorPrefix = ('WebkitOpacity' in bodyStyle) && 'webkit';                                                     // 17629
      }                                                                                                                // 17630
                                                                                                                       // 17631
      transitions = !!(('transition' in bodyStyle) || (vendorPrefix + 'Transition' in bodyStyle));                     // 17632
      animations  = !!(('animation' in bodyStyle) || (vendorPrefix + 'Animation' in bodyStyle));                       // 17633
                                                                                                                       // 17634
      if (android && (!transitions ||  !animations)) {                                                                 // 17635
        transitions = isString(bodyStyle.webkitTransition);                                                            // 17636
        animations = isString(bodyStyle.webkitAnimation);                                                              // 17637
      }                                                                                                                // 17638
    }                                                                                                                  // 17639
                                                                                                                       // 17640
                                                                                                                       // 17641
    return {                                                                                                           // 17642
      // Android has history.pushState, but it does not update location correctly                                      // 17643
      // so let's not use the history API at all.                                                                      // 17644
      // http://code.google.com/p/android/issues/detail?id=17471                                                       // 17645
      // https://github.com/angular/angular.js/issues/904                                                              // 17646
                                                                                                                       // 17647
      // older webkit browser (533.9) on Boxee box has exactly the same problem as Android has                         // 17648
      // so let's not use the history API also                                                                         // 17649
      // We are purposefully using `!(android < 4)` to cover the case when `android` is undefined                      // 17650
      // jshint -W018                                                                                                  // 17651
      history: !!($window.history && $window.history.pushState && !(android < 4) && !boxee),                           // 17652
      // jshint +W018                                                                                                  // 17653
      hasEvent: function(event) {                                                                                      // 17654
        // IE9 implements 'input' event it's so fubared that we rather pretend that it doesn't have                    // 17655
        // it. In particular the event is not fired when backspace or delete key are pressed or                        // 17656
        // when cut operation is performed.                                                                            // 17657
        // IE10+ implements 'input' event but it erroneously fires under various situations,                           // 17658
        // e.g. when placeholder changes, or a form is focused.                                                        // 17659
        if (event === 'input' && msie <= 11) return false;                                                             // 17660
                                                                                                                       // 17661
        if (isUndefined(eventSupport[event])) {                                                                        // 17662
          var divElm = document.createElement('div');                                                                  // 17663
          eventSupport[event] = 'on' + event in divElm;                                                                // 17664
        }                                                                                                              // 17665
                                                                                                                       // 17666
        return eventSupport[event];                                                                                    // 17667
      },                                                                                                               // 17668
      csp: csp(),                                                                                                      // 17669
      vendorPrefix: vendorPrefix,                                                                                      // 17670
      transitions: transitions,                                                                                        // 17671
      animations: animations,                                                                                          // 17672
      android: android                                                                                                 // 17673
    };                                                                                                                 // 17674
  }];                                                                                                                  // 17675
}                                                                                                                      // 17676
                                                                                                                       // 17677
var $compileMinErr = minErr('$compile');                                                                               // 17678
                                                                                                                       // 17679
/**                                                                                                                    // 17680
 * @ngdoc service                                                                                                      // 17681
 * @name $templateRequest                                                                                              // 17682
 *                                                                                                                     // 17683
 * @description                                                                                                        // 17684
 * The `$templateRequest` service runs security checks then downloads the provided template using                      // 17685
 * `$http` and, upon success, stores the contents inside of `$templateCache`. If the HTTP request                      // 17686
 * fails or the response data of the HTTP request is empty, a `$compile` error will be thrown (the                     // 17687
 * exception can be thwarted by setting the 2nd parameter of the function to true). Note that the                      // 17688
 * contents of `$templateCache` are trusted, so the call to `$sce.getTrustedUrl(tpl)` is omitted                       // 17689
 * when `tpl` is of type string and `$templateCache` has the matching entry.                                           // 17690
 *                                                                                                                     // 17691
 * @param {string|TrustedResourceUrl} tpl The HTTP request template URL                                                // 17692
 * @param {boolean=} ignoreRequestError Whether or not to ignore the exception when the request fails or the template is empty
 *                                                                                                                     // 17694
 * @return {Promise} a promise for the HTTP response data of the given URL.                                            // 17695
 *                                                                                                                     // 17696
 * @property {number} totalPendingRequests total amount of pending template requests being downloaded.                 // 17697
 */                                                                                                                    // 17698
function $TemplateRequestProvider() {                                                                                  // 17699
  this.$get = ['$templateCache', '$http', '$q', '$sce', function($templateCache, $http, $q, $sce) {                    // 17700
    function handleRequestFn(tpl, ignoreRequestError) {                                                                // 17701
      handleRequestFn.totalPendingRequests++;                                                                          // 17702
                                                                                                                       // 17703
      // We consider the template cache holds only trusted templates, so                                               // 17704
      // there's no need to go through whitelisting again for keys that already                                        // 17705
      // are included in there. This also makes Angular accept any script                                              // 17706
      // directive, no matter its name. However, we still need to unwrap trusted                                       // 17707
      // types.                                                                                                        // 17708
      if (!isString(tpl) || !$templateCache.get(tpl)) {                                                                // 17709
        tpl = $sce.getTrustedResourceUrl(tpl);                                                                         // 17710
      }                                                                                                                // 17711
                                                                                                                       // 17712
      var transformResponse = $http.defaults && $http.defaults.transformResponse;                                      // 17713
                                                                                                                       // 17714
      if (isArray(transformResponse)) {                                                                                // 17715
        transformResponse = transformResponse.filter(function(transformer) {                                           // 17716
          return transformer !== defaultHttpResponseTransform;                                                         // 17717
        });                                                                                                            // 17718
      } else if (transformResponse === defaultHttpResponseTransform) {                                                 // 17719
        transformResponse = null;                                                                                      // 17720
      }                                                                                                                // 17721
                                                                                                                       // 17722
      var httpOptions = {                                                                                              // 17723
        cache: $templateCache,                                                                                         // 17724
        transformResponse: transformResponse                                                                           // 17725
      };                                                                                                               // 17726
                                                                                                                       // 17727
      return $http.get(tpl, httpOptions)                                                                               // 17728
        ['finally'](function() {                                                                                       // 17729
          handleRequestFn.totalPendingRequests--;                                                                      // 17730
        })                                                                                                             // 17731
        .then(function(response) {                                                                                     // 17732
          $templateCache.put(tpl, response.data);                                                                      // 17733
          return response.data;                                                                                        // 17734
        }, handleError);                                                                                               // 17735
                                                                                                                       // 17736
      function handleError(resp) {                                                                                     // 17737
        if (!ignoreRequestError) {                                                                                     // 17738
          throw $compileMinErr('tpload', 'Failed to load template: {0} (HTTP status: {1} {2})',                        // 17739
            tpl, resp.status, resp.statusText);                                                                        // 17740
        }                                                                                                              // 17741
        return $q.reject(resp);                                                                                        // 17742
      }                                                                                                                // 17743
    }                                                                                                                  // 17744
                                                                                                                       // 17745
    handleRequestFn.totalPendingRequests = 0;                                                                          // 17746
                                                                                                                       // 17747
    return handleRequestFn;                                                                                            // 17748
  }];                                                                                                                  // 17749
}                                                                                                                      // 17750
                                                                                                                       // 17751
function $$TestabilityProvider() {                                                                                     // 17752
  this.$get = ['$rootScope', '$browser', '$location',                                                                  // 17753
       function($rootScope,   $browser,   $location) {                                                                 // 17754
                                                                                                                       // 17755
    /**                                                                                                                // 17756
     * @name $testability                                                                                              // 17757
     *                                                                                                                 // 17758
     * @description                                                                                                    // 17759
     * The private $$testability service provides a collection of methods for use when debugging                       // 17760
     * or by automated test and debugging tools.                                                                       // 17761
     */                                                                                                                // 17762
    var testability = {};                                                                                              // 17763
                                                                                                                       // 17764
    /**                                                                                                                // 17765
     * @name $$testability#findBindings                                                                                // 17766
     *                                                                                                                 // 17767
     * @description                                                                                                    // 17768
     * Returns an array of elements that are bound (via ng-bind or {{}})                                               // 17769
     * to expressions matching the input.                                                                              // 17770
     *                                                                                                                 // 17771
     * @param {Element} element The element root to search from.                                                       // 17772
     * @param {string} expression The binding expression to match.                                                     // 17773
     * @param {boolean} opt_exactMatch If true, only returns exact matches                                             // 17774
     *     for the expression. Filters and whitespace are ignored.                                                     // 17775
     */                                                                                                                // 17776
    testability.findBindings = function(element, expression, opt_exactMatch) {                                         // 17777
      var bindings = element.getElementsByClassName('ng-binding');                                                     // 17778
      var matches = [];                                                                                                // 17779
      forEach(bindings, function(binding) {                                                                            // 17780
        var dataBinding = angular.element(binding).data('$binding');                                                   // 17781
        if (dataBinding) {                                                                                             // 17782
          forEach(dataBinding, function(bindingName) {                                                                 // 17783
            if (opt_exactMatch) {                                                                                      // 17784
              var matcher = new RegExp('(^|\\s)' + escapeForRegexp(expression) + '(\\s|\\||$)');                       // 17785
              if (matcher.test(bindingName)) {                                                                         // 17786
                matches.push(binding);                                                                                 // 17787
              }                                                                                                        // 17788
            } else {                                                                                                   // 17789
              if (bindingName.indexOf(expression) != -1) {                                                             // 17790
                matches.push(binding);                                                                                 // 17791
              }                                                                                                        // 17792
            }                                                                                                          // 17793
          });                                                                                                          // 17794
        }                                                                                                              // 17795
      });                                                                                                              // 17796
      return matches;                                                                                                  // 17797
    };                                                                                                                 // 17798
                                                                                                                       // 17799
    /**                                                                                                                // 17800
     * @name $$testability#findModels                                                                                  // 17801
     *                                                                                                                 // 17802
     * @description                                                                                                    // 17803
     * Returns an array of elements that are two-way found via ng-model to                                             // 17804
     * expressions matching the input.                                                                                 // 17805
     *                                                                                                                 // 17806
     * @param {Element} element The element root to search from.                                                       // 17807
     * @param {string} expression The model expression to match.                                                       // 17808
     * @param {boolean} opt_exactMatch If true, only returns exact matches                                             // 17809
     *     for the expression.                                                                                         // 17810
     */                                                                                                                // 17811
    testability.findModels = function(element, expression, opt_exactMatch) {                                           // 17812
      var prefixes = ['ng-', 'data-ng-', 'ng\\:'];                                                                     // 17813
      for (var p = 0; p < prefixes.length; ++p) {                                                                      // 17814
        var attributeEquals = opt_exactMatch ? '=' : '*=';                                                             // 17815
        var selector = '[' + prefixes[p] + 'model' + attributeEquals + '"' + expression + '"]';                        // 17816
        var elements = element.querySelectorAll(selector);                                                             // 17817
        if (elements.length) {                                                                                         // 17818
          return elements;                                                                                             // 17819
        }                                                                                                              // 17820
      }                                                                                                                // 17821
    };                                                                                                                 // 17822
                                                                                                                       // 17823
    /**                                                                                                                // 17824
     * @name $$testability#getLocation                                                                                 // 17825
     *                                                                                                                 // 17826
     * @description                                                                                                    // 17827
     * Shortcut for getting the location in a browser agnostic way. Returns                                            // 17828
     *     the path, search, and hash. (e.g. /path?a=b#hash)                                                           // 17829
     */                                                                                                                // 17830
    testability.getLocation = function() {                                                                             // 17831
      return $location.url();                                                                                          // 17832
    };                                                                                                                 // 17833
                                                                                                                       // 17834
    /**                                                                                                                // 17835
     * @name $$testability#setLocation                                                                                 // 17836
     *                                                                                                                 // 17837
     * @description                                                                                                    // 17838
     * Shortcut for navigating to a location without doing a full page reload.                                         // 17839
     *                                                                                                                 // 17840
     * @param {string} url The location url (path, search and hash,                                                    // 17841
     *     e.g. /path?a=b#hash) to go to.                                                                              // 17842
     */                                                                                                                // 17843
    testability.setLocation = function(url) {                                                                          // 17844
      if (url !== $location.url()) {                                                                                   // 17845
        $location.url(url);                                                                                            // 17846
        $rootScope.$digest();                                                                                          // 17847
      }                                                                                                                // 17848
    };                                                                                                                 // 17849
                                                                                                                       // 17850
    /**                                                                                                                // 17851
     * @name $$testability#whenStable                                                                                  // 17852
     *                                                                                                                 // 17853
     * @description                                                                                                    // 17854
     * Calls the callback when $timeout and $http requests are completed.                                              // 17855
     *                                                                                                                 // 17856
     * @param {function} callback                                                                                      // 17857
     */                                                                                                                // 17858
    testability.whenStable = function(callback) {                                                                      // 17859
      $browser.notifyWhenNoOutstandingRequests(callback);                                                              // 17860
    };                                                                                                                 // 17861
                                                                                                                       // 17862
    return testability;                                                                                                // 17863
  }];                                                                                                                  // 17864
}                                                                                                                      // 17865
                                                                                                                       // 17866
function $TimeoutProvider() {                                                                                          // 17867
  this.$get = ['$rootScope', '$browser', '$q', '$$q', '$exceptionHandler',                                             // 17868
       function($rootScope,   $browser,   $q,   $$q,   $exceptionHandler) {                                            // 17869
                                                                                                                       // 17870
    var deferreds = {};                                                                                                // 17871
                                                                                                                       // 17872
                                                                                                                       // 17873
     /**                                                                                                               // 17874
      * @ngdoc service                                                                                                 // 17875
      * @name $timeout                                                                                                 // 17876
      *                                                                                                                // 17877
      * @description                                                                                                   // 17878
      * Angular's wrapper for `window.setTimeout`. The `fn` function is wrapped into a try/catch                       // 17879
      * block and delegates any exceptions to                                                                          // 17880
      * {@link ng.$exceptionHandler $exceptionHandler} service.                                                        // 17881
      *                                                                                                                // 17882
      * The return value of calling `$timeout` is a promise, which will be resolved when                               // 17883
      * the delay has passed and the timeout function, if provided, is executed.                                       // 17884
      *                                                                                                                // 17885
      * To cancel a timeout request, call `$timeout.cancel(promise)`.                                                  // 17886
      *                                                                                                                // 17887
      * In tests you can use {@link ngMock.$timeout `$timeout.flush()`} to                                             // 17888
      * synchronously flush the queue of deferred functions.                                                           // 17889
      *                                                                                                                // 17890
      * If you only want a promise that will be resolved after some specified delay                                    // 17891
      * then you can call `$timeout` without the `fn` function.                                                        // 17892
      *                                                                                                                // 17893
      * @param {function()=} fn A function, whose execution should be delayed.                                         // 17894
      * @param {number=} [delay=0] Delay in milliseconds.                                                              // 17895
      * @param {boolean=} [invokeApply=true] If set to `false` skips model dirty checking, otherwise                   // 17896
      *   will invoke `fn` within the {@link ng.$rootScope.Scope#$apply $apply} block.                                 // 17897
      * @param {...*=} Pass additional parameters to the executed function.                                            // 17898
      * @returns {Promise} Promise that will be resolved when the timeout is reached. The value this                   // 17899
      *   promise will be resolved with is the return value of the `fn` function.                                      // 17900
      *                                                                                                                // 17901
      */                                                                                                               // 17902
    function timeout(fn, delay, invokeApply) {                                                                         // 17903
      if (!isFunction(fn)) {                                                                                           // 17904
        invokeApply = delay;                                                                                           // 17905
        delay = fn;                                                                                                    // 17906
        fn = noop;                                                                                                     // 17907
      }                                                                                                                // 17908
                                                                                                                       // 17909
      var args = sliceArgs(arguments, 3),                                                                              // 17910
          skipApply = (isDefined(invokeApply) && !invokeApply),                                                        // 17911
          deferred = (skipApply ? $$q : $q).defer(),                                                                   // 17912
          promise = deferred.promise,                                                                                  // 17913
          timeoutId;                                                                                                   // 17914
                                                                                                                       // 17915
      timeoutId = $browser.defer(function() {                                                                          // 17916
        try {                                                                                                          // 17917
          deferred.resolve(fn.apply(null, args));                                                                      // 17918
        } catch (e) {                                                                                                  // 17919
          deferred.reject(e);                                                                                          // 17920
          $exceptionHandler(e);                                                                                        // 17921
        }                                                                                                              // 17922
        finally {                                                                                                      // 17923
          delete deferreds[promise.$$timeoutId];                                                                       // 17924
        }                                                                                                              // 17925
                                                                                                                       // 17926
        if (!skipApply) $rootScope.$apply();                                                                           // 17927
      }, delay);                                                                                                       // 17928
                                                                                                                       // 17929
      promise.$$timeoutId = timeoutId;                                                                                 // 17930
      deferreds[timeoutId] = deferred;                                                                                 // 17931
                                                                                                                       // 17932
      return promise;                                                                                                  // 17933
    }                                                                                                                  // 17934
                                                                                                                       // 17935
                                                                                                                       // 17936
     /**                                                                                                               // 17937
      * @ngdoc method                                                                                                  // 17938
      * @name $timeout#cancel                                                                                          // 17939
      *                                                                                                                // 17940
      * @description                                                                                                   // 17941
      * Cancels a task associated with the `promise`. As a result of this, the promise will be                         // 17942
      * resolved with a rejection.                                                                                     // 17943
      *                                                                                                                // 17944
      * @param {Promise=} promise Promise returned by the `$timeout` function.                                         // 17945
      * @returns {boolean} Returns `true` if the task hasn't executed yet and was successfully                         // 17946
      *   canceled.                                                                                                    // 17947
      */                                                                                                               // 17948
    timeout.cancel = function(promise) {                                                                               // 17949
      if (promise && promise.$$timeoutId in deferreds) {                                                               // 17950
        deferreds[promise.$$timeoutId].reject('canceled');                                                             // 17951
        delete deferreds[promise.$$timeoutId];                                                                         // 17952
        return $browser.defer.cancel(promise.$$timeoutId);                                                             // 17953
      }                                                                                                                // 17954
      return false;                                                                                                    // 17955
    };                                                                                                                 // 17956
                                                                                                                       // 17957
    return timeout;                                                                                                    // 17958
  }];                                                                                                                  // 17959
}                                                                                                                      // 17960
                                                                                                                       // 17961
// NOTE:  The usage of window and document instead of $window and $document here is                                    // 17962
// deliberate.  This service depends on the specific behavior of anchor nodes created by the                           // 17963
// browser (resolving and parsing URLs) that is unlikely to be provided by mock objects and                            // 17964
// cause us to break tests.  In addition, when the browser resolves a URL for XHR, it                                  // 17965
// doesn't know about mocked locations and resolves URLs to the real document - which is                               // 17966
// exactly the behavior needed here.  There is little value is mocking these out for this                              // 17967
// service.                                                                                                            // 17968
var urlParsingNode = document.createElement("a");                                                                      // 17969
var originUrl = urlResolve(window.location.href);                                                                      // 17970
                                                                                                                       // 17971
                                                                                                                       // 17972
/**                                                                                                                    // 17973
 *                                                                                                                     // 17974
 * Implementation Notes for non-IE browsers                                                                            // 17975
 * ----------------------------------------                                                                            // 17976
 * Assigning a URL to the href property of an anchor DOM node, even one attached to the DOM,                           // 17977
 * results both in the normalizing and parsing of the URL.  Normalizing means that a relative                          // 17978
 * URL will be resolved into an absolute URL in the context of the application document.                               // 17979
 * Parsing means that the anchor node's host, hostname, protocol, port, pathname and related                           // 17980
 * properties are all populated to reflect the normalized URL.  This approach has wide                                 // 17981
 * compatibility - Safari 1+, Mozilla 1+, Opera 7+,e etc.  See                                                         // 17982
 * http://www.aptana.com/reference/html/api/HTMLAnchorElement.html                                                     // 17983
 *                                                                                                                     // 17984
 * Implementation Notes for IE                                                                                         // 17985
 * ---------------------------                                                                                         // 17986
 * IE <= 10 normalizes the URL when assigned to the anchor node similar to the other                                   // 17987
 * browsers.  However, the parsed components will not be set if the URL assigned did not specify                       // 17988
 * them.  (e.g. if you assign a.href = "foo", then a.protocol, a.host, etc. will be empty.)  We                        // 17989
 * work around that by performing the parsing in a 2nd step by taking a previously normalized                          // 17990
 * URL (e.g. by assigning to a.href) and assigning it a.href again.  This correctly populates the                      // 17991
 * properties such as protocol, hostname, port, etc.                                                                   // 17992
 *                                                                                                                     // 17993
 * References:                                                                                                         // 17994
 *   http://developer.mozilla.org/en-US/docs/Web/API/HTMLAnchorElement                                                 // 17995
 *   http://www.aptana.com/reference/html/api/HTMLAnchorElement.html                                                   // 17996
 *   http://url.spec.whatwg.org/#urlutils                                                                              // 17997
 *   https://github.com/angular/angular.js/pull/2902                                                                   // 17998
 *   http://james.padolsey.com/javascript/parsing-urls-with-the-dom/                                                   // 17999
 *                                                                                                                     // 18000
 * @kind function                                                                                                      // 18001
 * @param {string} url The URL to be parsed.                                                                           // 18002
 * @description Normalizes and parses a URL.                                                                           // 18003
 * @returns {object} Returns the normalized URL as a dictionary.                                                       // 18004
 *                                                                                                                     // 18005
 *   | member name   | Description    |                                                                                // 18006
 *   |---------------|----------------|                                                                                // 18007
 *   | href          | A normalized version of the provided URL if it was not an absolute URL |                        // 18008
 *   | protocol      | The protocol including the trailing colon                              |                        // 18009
 *   | host          | The host and port (if the port is non-default) of the normalizedUrl    |                        // 18010
 *   | search        | The search params, minus the question mark                             |                        // 18011
 *   | hash          | The hash string, minus the hash symbol                                                          // 18012
 *   | hostname      | The hostname                                                                                    // 18013
 *   | port          | The port, without ":"                                                                           // 18014
 *   | pathname      | The pathname, beginning with "/"                                                                // 18015
 *                                                                                                                     // 18016
 */                                                                                                                    // 18017
function urlResolve(url) {                                                                                             // 18018
  var href = url;                                                                                                      // 18019
                                                                                                                       // 18020
  if (msie) {                                                                                                          // 18021
    // Normalize before parse.  Refer Implementation Notes on why this is                                              // 18022
    // done in two steps on IE.                                                                                        // 18023
    urlParsingNode.setAttribute("href", href);                                                                         // 18024
    href = urlParsingNode.href;                                                                                        // 18025
  }                                                                                                                    // 18026
                                                                                                                       // 18027
  urlParsingNode.setAttribute('href', href);                                                                           // 18028
                                                                                                                       // 18029
  // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils                             // 18030
  return {                                                                                                             // 18031
    href: urlParsingNode.href,                                                                                         // 18032
    protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',                                // 18033
    host: urlParsingNode.host,                                                                                         // 18034
    search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, '') : '',                                     // 18035
    hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',                                            // 18036
    hostname: urlParsingNode.hostname,                                                                                 // 18037
    port: urlParsingNode.port,                                                                                         // 18038
    pathname: (urlParsingNode.pathname.charAt(0) === '/')                                                              // 18039
      ? urlParsingNode.pathname                                                                                        // 18040
      : '/' + urlParsingNode.pathname                                                                                  // 18041
  };                                                                                                                   // 18042
}                                                                                                                      // 18043
                                                                                                                       // 18044
/**                                                                                                                    // 18045
 * Parse a request URL and determine whether this is a same-origin request as the application document.                // 18046
 *                                                                                                                     // 18047
 * @param {string|object} requestUrl The url of the request as a string that will be resolved                          // 18048
 * or a parsed URL object.                                                                                             // 18049
 * @returns {boolean} Whether the request is for the same origin as the application document.                          // 18050
 */                                                                                                                    // 18051
function urlIsSameOrigin(requestUrl) {                                                                                 // 18052
  var parsed = (isString(requestUrl)) ? urlResolve(requestUrl) : requestUrl;                                           // 18053
  return (parsed.protocol === originUrl.protocol &&                                                                    // 18054
          parsed.host === originUrl.host);                                                                             // 18055
}                                                                                                                      // 18056
                                                                                                                       // 18057
/**                                                                                                                    // 18058
 * @ngdoc service                                                                                                      // 18059
 * @name $window                                                                                                       // 18060
 *                                                                                                                     // 18061
 * @description                                                                                                        // 18062
 * A reference to the browser's `window` object. While `window`                                                        // 18063
 * is globally available in JavaScript, it causes testability problems, because                                        // 18064
 * it is a global variable. In angular we always refer to it through the                                               // 18065
 * `$window` service, so it may be overridden, removed or mocked for testing.                                          // 18066
 *                                                                                                                     // 18067
 * Expressions, like the one defined for the `ngClick` directive in the example                                        // 18068
 * below, are evaluated with respect to the current scope.  Therefore, there is                                        // 18069
 * no risk of inadvertently coding in a dependency on a global value in such an                                        // 18070
 * expression.                                                                                                         // 18071
 *                                                                                                                     // 18072
 * @example                                                                                                            // 18073
   <example module="windowExample">                                                                                    // 18074
     <file name="index.html">                                                                                          // 18075
       <script>                                                                                                        // 18076
         angular.module('windowExample', [])                                                                           // 18077
           .controller('ExampleController', ['$scope', '$window', function($scope, $window) {                          // 18078
             $scope.greeting = 'Hello, World!';                                                                        // 18079
             $scope.doGreeting = function(greeting) {                                                                  // 18080
               $window.alert(greeting);                                                                                // 18081
             };                                                                                                        // 18082
           }]);                                                                                                        // 18083
       </script>                                                                                                       // 18084
       <div ng-controller="ExampleController">                                                                         // 18085
         <input type="text" ng-model="greeting" aria-label="greeting" />                                               // 18086
         <button ng-click="doGreeting(greeting)">ALERT</button>                                                        // 18087
       </div>                                                                                                          // 18088
     </file>                                                                                                           // 18089
     <file name="protractor.js" type="protractor">                                                                     // 18090
      it('should display the greeting in the input box', function() {                                                  // 18091
       element(by.model('greeting')).sendKeys('Hello, E2E Tests');                                                     // 18092
       // If we click the button it will block the test runner                                                         // 18093
       // element(':button').click();                                                                                  // 18094
      });                                                                                                              // 18095
     </file>                                                                                                           // 18096
   </example>                                                                                                          // 18097
 */                                                                                                                    // 18098
function $WindowProvider() {                                                                                           // 18099
  this.$get = valueFn(window);                                                                                         // 18100
}                                                                                                                      // 18101
                                                                                                                       // 18102
/**                                                                                                                    // 18103
 * @name $$cookieReader                                                                                                // 18104
 * @requires $document                                                                                                 // 18105
 *                                                                                                                     // 18106
 * @description                                                                                                        // 18107
 * This is a private service for reading cookies used by $http and ngCookies                                           // 18108
 *                                                                                                                     // 18109
 * @return {Object} a key/value map of the current cookies                                                             // 18110
 */                                                                                                                    // 18111
function $$CookieReader($document) {                                                                                   // 18112
  var rawDocument = $document[0] || {};                                                                                // 18113
  var lastCookies = {};                                                                                                // 18114
  var lastCookieString = '';                                                                                           // 18115
                                                                                                                       // 18116
  function safeDecodeURIComponent(str) {                                                                               // 18117
    try {                                                                                                              // 18118
      return decodeURIComponent(str);                                                                                  // 18119
    } catch (e) {                                                                                                      // 18120
      return str;                                                                                                      // 18121
    }                                                                                                                  // 18122
  }                                                                                                                    // 18123
                                                                                                                       // 18124
  return function() {                                                                                                  // 18125
    var cookieArray, cookie, i, index, name;                                                                           // 18126
    var currentCookieString = rawDocument.cookie || '';                                                                // 18127
                                                                                                                       // 18128
    if (currentCookieString !== lastCookieString) {                                                                    // 18129
      lastCookieString = currentCookieString;                                                                          // 18130
      cookieArray = lastCookieString.split('; ');                                                                      // 18131
      lastCookies = {};                                                                                                // 18132
                                                                                                                       // 18133
      for (i = 0; i < cookieArray.length; i++) {                                                                       // 18134
        cookie = cookieArray[i];                                                                                       // 18135
        index = cookie.indexOf('=');                                                                                   // 18136
        if (index > 0) { //ignore nameless cookies                                                                     // 18137
          name = safeDecodeURIComponent(cookie.substring(0, index));                                                   // 18138
          // the first value that is seen for a cookie is the most                                                     // 18139
          // specific one.  values for the same cookie name that                                                       // 18140
          // follow are for less specific paths.                                                                       // 18141
          if (isUndefined(lastCookies[name])) {                                                                        // 18142
            lastCookies[name] = safeDecodeURIComponent(cookie.substring(index + 1));                                   // 18143
          }                                                                                                            // 18144
        }                                                                                                              // 18145
      }                                                                                                                // 18146
    }                                                                                                                  // 18147
    return lastCookies;                                                                                                // 18148
  };                                                                                                                   // 18149
}                                                                                                                      // 18150
                                                                                                                       // 18151
$$CookieReader.$inject = ['$document'];                                                                                // 18152
                                                                                                                       // 18153
function $$CookieReaderProvider() {                                                                                    // 18154
  this.$get = $$CookieReader;                                                                                          // 18155
}                                                                                                                      // 18156
                                                                                                                       // 18157
/* global currencyFilter: true,                                                                                        // 18158
 dateFilter: true,                                                                                                     // 18159
 filterFilter: true,                                                                                                   // 18160
 jsonFilter: true,                                                                                                     // 18161
 limitToFilter: true,                                                                                                  // 18162
 lowercaseFilter: true,                                                                                                // 18163
 numberFilter: true,                                                                                                   // 18164
 orderByFilter: true,                                                                                                  // 18165
 uppercaseFilter: true,                                                                                                // 18166
 */                                                                                                                    // 18167
                                                                                                                       // 18168
/**                                                                                                                    // 18169
 * @ngdoc provider                                                                                                     // 18170
 * @name $filterProvider                                                                                               // 18171
 * @description                                                                                                        // 18172
 *                                                                                                                     // 18173
 * Filters are just functions which transform input to an output. However filters need to be                           // 18174
 * Dependency Injected. To achieve this a filter definition consists of a factory function which is                    // 18175
 * annotated with dependencies and is responsible for creating a filter function.                                      // 18176
 *                                                                                                                     // 18177
 * <div class="alert alert-warning">                                                                                   // 18178
 * **Note:** Filter names must be valid angular {@link expression} identifiers, such as `uppercase` or `orderBy`.      // 18179
 * Names with special characters, such as hyphens and dots, are not allowed. If you wish to namespace                  // 18180
 * your filters, then you can use capitalization (`myappSubsectionFilterx`) or underscores                             // 18181
 * (`myapp_subsection_filterx`).                                                                                       // 18182
 * </div>                                                                                                              // 18183
 *                                                                                                                     // 18184
 * ```js                                                                                                               // 18185
 *   // Filter registration                                                                                            // 18186
 *   function MyModule($provide, $filterProvider) {                                                                    // 18187
 *     // create a service to demonstrate injection (not always needed)                                                // 18188
 *     $provide.value('greet', function(name){                                                                         // 18189
 *       return 'Hello ' + name + '!';                                                                                 // 18190
 *     });                                                                                                             // 18191
 *                                                                                                                     // 18192
 *     // register a filter factory which uses the                                                                     // 18193
 *     // greet service to demonstrate DI.                                                                             // 18194
 *     $filterProvider.register('greet', function(greet){                                                              // 18195
 *       // return the filter function which uses the greet service                                                    // 18196
 *       // to generate salutation                                                                                     // 18197
 *       return function(text) {                                                                                       // 18198
 *         // filters need to be forgiving so check input validity                                                     // 18199
 *         return text && greet(text) || text;                                                                         // 18200
 *       };                                                                                                            // 18201
 *     });                                                                                                             // 18202
 *   }                                                                                                                 // 18203
 * ```                                                                                                                 // 18204
 *                                                                                                                     // 18205
 * The filter function is registered with the `$injector` under the filter name suffix with                            // 18206
 * `Filter`.                                                                                                           // 18207
 *                                                                                                                     // 18208
 * ```js                                                                                                               // 18209
 *   it('should be the same instance', inject(                                                                         // 18210
 *     function($filterProvider) {                                                                                     // 18211
 *       $filterProvider.register('reverse', function(){                                                               // 18212
 *         return ...;                                                                                                 // 18213
 *       });                                                                                                           // 18214
 *     },                                                                                                              // 18215
 *     function($filter, reverseFilter) {                                                                              // 18216
 *       expect($filter('reverse')).toBe(reverseFilter);                                                               // 18217
 *     });                                                                                                             // 18218
 * ```                                                                                                                 // 18219
 *                                                                                                                     // 18220
 *                                                                                                                     // 18221
 * For more information about how angular filters work, and how to create your own filters, see                        // 18222
 * {@link guide/filter Filters} in the Angular Developer Guide.                                                        // 18223
 */                                                                                                                    // 18224
                                                                                                                       // 18225
/**                                                                                                                    // 18226
 * @ngdoc service                                                                                                      // 18227
 * @name $filter                                                                                                       // 18228
 * @kind function                                                                                                      // 18229
 * @description                                                                                                        // 18230
 * Filters are used for formatting data displayed to the user.                                                         // 18231
 *                                                                                                                     // 18232
 * The general syntax in templates is as follows:                                                                      // 18233
 *                                                                                                                     // 18234
 *         {{ expression [| filter_name[:parameter_value] ... ] }}                                                     // 18235
 *                                                                                                                     // 18236
 * @param {String} name Name of the filter function to retrieve                                                        // 18237
 * @return {Function} the filter function                                                                              // 18238
 * @example                                                                                                            // 18239
   <example name="$filter" module="filterExample">                                                                     // 18240
     <file name="index.html">                                                                                          // 18241
       <div ng-controller="MainCtrl">                                                                                  // 18242
        <h3>{{ originalText }}</h3>                                                                                    // 18243
        <h3>{{ filteredText }}</h3>                                                                                    // 18244
       </div>                                                                                                          // 18245
     </file>                                                                                                           // 18246
                                                                                                                       // 18247
     <file name="script.js">                                                                                           // 18248
      angular.module('filterExample', [])                                                                              // 18249
      .controller('MainCtrl', function($scope, $filter) {                                                              // 18250
        $scope.originalText = 'hello';                                                                                 // 18251
        $scope.filteredText = $filter('uppercase')($scope.originalText);                                               // 18252
      });                                                                                                              // 18253
     </file>                                                                                                           // 18254
   </example>                                                                                                          // 18255
  */                                                                                                                   // 18256
$FilterProvider.$inject = ['$provide'];                                                                                // 18257
function $FilterProvider($provide) {                                                                                   // 18258
  var suffix = 'Filter';                                                                                               // 18259
                                                                                                                       // 18260
  /**                                                                                                                  // 18261
   * @ngdoc method                                                                                                     // 18262
   * @name $filterProvider#register                                                                                    // 18263
   * @param {string|Object} name Name of the filter function, or an object map of filters where                        // 18264
   *    the keys are the filter names and the values are the filter factories.                                         // 18265
   *                                                                                                                   // 18266
   *    <div class="alert alert-warning">                                                                              // 18267
   *    **Note:** Filter names must be valid angular {@link expression} identifiers, such as `uppercase` or `orderBy`.
   *    Names with special characters, such as hyphens and dots, are not allowed. If you wish to namespace             // 18269
   *    your filters, then you can use capitalization (`myappSubsectionFilterx`) or underscores                        // 18270
   *    (`myapp_subsection_filterx`).                                                                                  // 18271
   *    </div>                                                                                                         // 18272
    * @param {Function} factory If the first argument was a string, a factory function for the filter to be registered.
   * @returns {Object} Registered filter instance, or if a map of filters was provided then a map                      // 18274
   *    of the registered filter instances.                                                                            // 18275
   */                                                                                                                  // 18276
  function register(name, factory) {                                                                                   // 18277
    if (isObject(name)) {                                                                                              // 18278
      var filters = {};                                                                                                // 18279
      forEach(name, function(filter, key) {                                                                            // 18280
        filters[key] = register(key, filter);                                                                          // 18281
      });                                                                                                              // 18282
      return filters;                                                                                                  // 18283
    } else {                                                                                                           // 18284
      return $provide.factory(name + suffix, factory);                                                                 // 18285
    }                                                                                                                  // 18286
  }                                                                                                                    // 18287
  this.register = register;                                                                                            // 18288
                                                                                                                       // 18289
  this.$get = ['$injector', function($injector) {                                                                      // 18290
    return function(name) {                                                                                            // 18291
      return $injector.get(name + suffix);                                                                             // 18292
    };                                                                                                                 // 18293
  }];                                                                                                                  // 18294
                                                                                                                       // 18295
  ////////////////////////////////////////                                                                             // 18296
                                                                                                                       // 18297
  /* global                                                                                                            // 18298
    currencyFilter: false,                                                                                             // 18299
    dateFilter: false,                                                                                                 // 18300
    filterFilter: false,                                                                                               // 18301
    jsonFilter: false,                                                                                                 // 18302
    limitToFilter: false,                                                                                              // 18303
    lowercaseFilter: false,                                                                                            // 18304
    numberFilter: false,                                                                                               // 18305
    orderByFilter: false,                                                                                              // 18306
    uppercaseFilter: false,                                                                                            // 18307
  */                                                                                                                   // 18308
                                                                                                                       // 18309
  register('currency', currencyFilter);                                                                                // 18310
  register('date', dateFilter);                                                                                        // 18311
  register('filter', filterFilter);                                                                                    // 18312
  register('json', jsonFilter);                                                                                        // 18313
  register('limitTo', limitToFilter);                                                                                  // 18314
  register('lowercase', lowercaseFilter);                                                                              // 18315
  register('number', numberFilter);                                                                                    // 18316
  register('orderBy', orderByFilter);                                                                                  // 18317
  register('uppercase', uppercaseFilter);                                                                              // 18318
}                                                                                                                      // 18319
                                                                                                                       // 18320
/**                                                                                                                    // 18321
 * @ngdoc filter                                                                                                       // 18322
 * @name filter                                                                                                        // 18323
 * @kind function                                                                                                      // 18324
 *                                                                                                                     // 18325
 * @description                                                                                                        // 18326
 * Selects a subset of items from `array` and returns it as a new array.                                               // 18327
 *                                                                                                                     // 18328
 * @param {Array} array The source array.                                                                              // 18329
 * @param {string|Object|function()} expression The predicate to be used for selecting items from                      // 18330
 *   `array`.                                                                                                          // 18331
 *                                                                                                                     // 18332
 *   Can be one of:                                                                                                    // 18333
 *                                                                                                                     // 18334
 *   - `string`: The string is used for matching against the contents of the `array`. All strings or                   // 18335
 *     objects with string properties in `array` that match this string will be returned. This also                    // 18336
 *     applies to nested object properties.                                                                            // 18337
 *     The predicate can be negated by prefixing the string with `!`.                                                  // 18338
 *                                                                                                                     // 18339
 *   - `Object`: A pattern object can be used to filter specific properties on objects contained                       // 18340
 *     by `array`. For example `{name:"M", phone:"1"}` predicate will return an array of items                         // 18341
 *     which have property `name` containing "M" and property `phone` containing "1". A special                        // 18342
 *     property name `$` can be used (as in `{$:"text"}`) to accept a match against any                                // 18343
 *     property of the object or its nested object properties. That's equivalent to the simple                         // 18344
 *     substring match with a `string` as described above. The predicate can be negated by prefixing                   // 18345
 *     the string with `!`.                                                                                            // 18346
 *     For example `{name: "!M"}` predicate will return an array of items which have property `name`                   // 18347
 *     not containing "M".                                                                                             // 18348
 *                                                                                                                     // 18349
 *     Note that a named property will match properties on the same level only, while the special                      // 18350
 *     `$` property will match properties on the same level or deeper. E.g. an array item like                         // 18351
 *     `{name: {first: 'John', last: 'Doe'}}` will **not** be matched by `{name: 'John'}`, but                         // 18352
 *     **will** be matched by `{$: 'John'}`.                                                                           // 18353
 *                                                                                                                     // 18354
 *   - `function(value, index, array)`: A predicate function can be used to write arbitrary filters.                   // 18355
 *     The function is called for each element of the array, with the element, its index, and                          // 18356
 *     the entire array itself as arguments.                                                                           // 18357
 *                                                                                                                     // 18358
 *     The final result is an array of those elements that the predicate returned true for.                            // 18359
 *                                                                                                                     // 18360
 * @param {function(actual, expected)|true|undefined} comparator Comparator which is used in                           // 18361
 *     determining if the expected value (from the filter expression) and actual value (from                           // 18362
 *     the object in the array) should be considered a match.                                                          // 18363
 *                                                                                                                     // 18364
 *   Can be one of:                                                                                                    // 18365
 *                                                                                                                     // 18366
 *   - `function(actual, expected)`:                                                                                   // 18367
 *     The function will be given the object value and the predicate value to compare and                              // 18368
 *     should return true if both values should be considered equal.                                                   // 18369
 *                                                                                                                     // 18370
 *   - `true`: A shorthand for `function(actual, expected) { return angular.equals(actual, expected)}`.                // 18371
 *     This is essentially strict comparison of expected and actual.                                                   // 18372
 *                                                                                                                     // 18373
 *   - `false|undefined`: A short hand for a function which will look for a substring match in case                    // 18374
 *     insensitive way.                                                                                                // 18375
 *                                                                                                                     // 18376
 *     Primitive values are converted to strings. Objects are not compared against primitives,                         // 18377
 *     unless they have a custom `toString` method (e.g. `Date` objects).                                              // 18378
 *                                                                                                                     // 18379
 * @example                                                                                                            // 18380
   <example>                                                                                                           // 18381
     <file name="index.html">                                                                                          // 18382
       <div ng-init="friends = [{name:'John', phone:'555-1276'},                                                       // 18383
                                {name:'Mary', phone:'800-BIG-MARY'},                                                   // 18384
                                {name:'Mike', phone:'555-4321'},                                                       // 18385
                                {name:'Adam', phone:'555-5678'},                                                       // 18386
                                {name:'Julie', phone:'555-8765'},                                                      // 18387
                                {name:'Juliette', phone:'555-5678'}]"></div>                                           // 18388
                                                                                                                       // 18389
       <label>Search: <input ng-model="searchText"></label>                                                            // 18390
       <table id="searchTextResults">                                                                                  // 18391
         <tr><th>Name</th><th>Phone</th></tr>                                                                          // 18392
         <tr ng-repeat="friend in friends | filter:searchText">                                                        // 18393
           <td>{{friend.name}}</td>                                                                                    // 18394
           <td>{{friend.phone}}</td>                                                                                   // 18395
         </tr>                                                                                                         // 18396
       </table>                                                                                                        // 18397
       <hr>                                                                                                            // 18398
       <label>Any: <input ng-model="search.$"></label> <br>                                                            // 18399
       <label>Name only <input ng-model="search.name"></label><br>                                                     // 18400
       <label>Phone only <input ng-model="search.phone"></label><br>                                                   // 18401
       <label>Equality <input type="checkbox" ng-model="strict"></label><br>                                           // 18402
       <table id="searchObjResults">                                                                                   // 18403
         <tr><th>Name</th><th>Phone</th></tr>                                                                          // 18404
         <tr ng-repeat="friendObj in friends | filter:search:strict">                                                  // 18405
           <td>{{friendObj.name}}</td>                                                                                 // 18406
           <td>{{friendObj.phone}}</td>                                                                                // 18407
         </tr>                                                                                                         // 18408
       </table>                                                                                                        // 18409
     </file>                                                                                                           // 18410
     <file name="protractor.js" type="protractor">                                                                     // 18411
       var expectFriendNames = function(expectedNames, key) {                                                          // 18412
         element.all(by.repeater(key + ' in friends').column(key + '.name')).then(function(arr) {                      // 18413
           arr.forEach(function(wd, i) {                                                                               // 18414
             expect(wd.getText()).toMatch(expectedNames[i]);                                                           // 18415
           });                                                                                                         // 18416
         });                                                                                                           // 18417
       };                                                                                                              // 18418
                                                                                                                       // 18419
       it('should search across all fields when filtering with a string', function() {                                 // 18420
         var searchText = element(by.model('searchText'));                                                             // 18421
         searchText.clear();                                                                                           // 18422
         searchText.sendKeys('m');                                                                                     // 18423
         expectFriendNames(['Mary', 'Mike', 'Adam'], 'friend');                                                        // 18424
                                                                                                                       // 18425
         searchText.clear();                                                                                           // 18426
         searchText.sendKeys('76');                                                                                    // 18427
         expectFriendNames(['John', 'Julie'], 'friend');                                                               // 18428
       });                                                                                                             // 18429
                                                                                                                       // 18430
       it('should search in specific fields when filtering with a predicate object', function() {                      // 18431
         var searchAny = element(by.model('search.$'));                                                                // 18432
         searchAny.clear();                                                                                            // 18433
         searchAny.sendKeys('i');                                                                                      // 18434
         expectFriendNames(['Mary', 'Mike', 'Julie', 'Juliette'], 'friendObj');                                        // 18435
       });                                                                                                             // 18436
       it('should use a equal comparison when comparator is true', function() {                                        // 18437
         var searchName = element(by.model('search.name'));                                                            // 18438
         var strict = element(by.model('strict'));                                                                     // 18439
         searchName.clear();                                                                                           // 18440
         searchName.sendKeys('Julie');                                                                                 // 18441
         strict.click();                                                                                               // 18442
         expectFriendNames(['Julie'], 'friendObj');                                                                    // 18443
       });                                                                                                             // 18444
     </file>                                                                                                           // 18445
   </example>                                                                                                          // 18446
 */                                                                                                                    // 18447
function filterFilter() {                                                                                              // 18448
  return function(array, expression, comparator) {                                                                     // 18449
    if (!isArrayLike(array)) {                                                                                         // 18450
      if (array == null) {                                                                                             // 18451
        return array;                                                                                                  // 18452
      } else {                                                                                                         // 18453
        throw minErr('filter')('notarray', 'Expected array but received: {0}', array);                                 // 18454
      }                                                                                                                // 18455
    }                                                                                                                  // 18456
                                                                                                                       // 18457
    var expressionType = getTypeForFilter(expression);                                                                 // 18458
    var predicateFn;                                                                                                   // 18459
    var matchAgainstAnyProp;                                                                                           // 18460
                                                                                                                       // 18461
    switch (expressionType) {                                                                                          // 18462
      case 'function':                                                                                                 // 18463
        predicateFn = expression;                                                                                      // 18464
        break;                                                                                                         // 18465
      case 'boolean':                                                                                                  // 18466
      case 'null':                                                                                                     // 18467
      case 'number':                                                                                                   // 18468
      case 'string':                                                                                                   // 18469
        matchAgainstAnyProp = true;                                                                                    // 18470
        //jshint -W086                                                                                                 // 18471
      case 'object':                                                                                                   // 18472
        //jshint +W086                                                                                                 // 18473
        predicateFn = createPredicateFn(expression, comparator, matchAgainstAnyProp);                                  // 18474
        break;                                                                                                         // 18475
      default:                                                                                                         // 18476
        return array;                                                                                                  // 18477
    }                                                                                                                  // 18478
                                                                                                                       // 18479
    return Array.prototype.filter.call(array, predicateFn);                                                            // 18480
  };                                                                                                                   // 18481
}                                                                                                                      // 18482
                                                                                                                       // 18483
// Helper functions for `filterFilter`                                                                                 // 18484
function createPredicateFn(expression, comparator, matchAgainstAnyProp) {                                              // 18485
  var shouldMatchPrimitives = isObject(expression) && ('$' in expression);                                             // 18486
  var predicateFn;                                                                                                     // 18487
                                                                                                                       // 18488
  if (comparator === true) {                                                                                           // 18489
    comparator = equals;                                                                                               // 18490
  } else if (!isFunction(comparator)) {                                                                                // 18491
    comparator = function(actual, expected) {                                                                          // 18492
      if (isUndefined(actual)) {                                                                                       // 18493
        // No substring matching against `undefined`                                                                   // 18494
        return false;                                                                                                  // 18495
      }                                                                                                                // 18496
      if ((actual === null) || (expected === null)) {                                                                  // 18497
        // No substring matching against `null`; only match against `null`                                             // 18498
        return actual === expected;                                                                                    // 18499
      }                                                                                                                // 18500
      if (isObject(expected) || (isObject(actual) && !hasCustomToString(actual))) {                                    // 18501
        // Should not compare primitives against objects, unless they have custom `toString` method                    // 18502
        return false;                                                                                                  // 18503
      }                                                                                                                // 18504
                                                                                                                       // 18505
      actual = lowercase('' + actual);                                                                                 // 18506
      expected = lowercase('' + expected);                                                                             // 18507
      return actual.indexOf(expected) !== -1;                                                                          // 18508
    };                                                                                                                 // 18509
  }                                                                                                                    // 18510
                                                                                                                       // 18511
  predicateFn = function(item) {                                                                                       // 18512
    if (shouldMatchPrimitives && !isObject(item)) {                                                                    // 18513
      return deepCompare(item, expression.$, comparator, false);                                                       // 18514
    }                                                                                                                  // 18515
    return deepCompare(item, expression, comparator, matchAgainstAnyProp);                                             // 18516
  };                                                                                                                   // 18517
                                                                                                                       // 18518
  return predicateFn;                                                                                                  // 18519
}                                                                                                                      // 18520
                                                                                                                       // 18521
function deepCompare(actual, expected, comparator, matchAgainstAnyProp, dontMatchWholeObject) {                        // 18522
  var actualType = getTypeForFilter(actual);                                                                           // 18523
  var expectedType = getTypeForFilter(expected);                                                                       // 18524
                                                                                                                       // 18525
  if ((expectedType === 'string') && (expected.charAt(0) === '!')) {                                                   // 18526
    return !deepCompare(actual, expected.substring(1), comparator, matchAgainstAnyProp);                               // 18527
  } else if (isArray(actual)) {                                                                                        // 18528
    // In case `actual` is an array, consider it a match                                                               // 18529
    // if ANY of it's items matches `expected`                                                                         // 18530
    return actual.some(function(item) {                                                                                // 18531
      return deepCompare(item, expected, comparator, matchAgainstAnyProp);                                             // 18532
    });                                                                                                                // 18533
  }                                                                                                                    // 18534
                                                                                                                       // 18535
  switch (actualType) {                                                                                                // 18536
    case 'object':                                                                                                     // 18537
      var key;                                                                                                         // 18538
      if (matchAgainstAnyProp) {                                                                                       // 18539
        for (key in actual) {                                                                                          // 18540
          if ((key.charAt(0) !== '$') && deepCompare(actual[key], expected, comparator, true)) {                       // 18541
            return true;                                                                                               // 18542
          }                                                                                                            // 18543
        }                                                                                                              // 18544
        return dontMatchWholeObject ? false : deepCompare(actual, expected, comparator, false);                        // 18545
      } else if (expectedType === 'object') {                                                                          // 18546
        for (key in expected) {                                                                                        // 18547
          var expectedVal = expected[key];                                                                             // 18548
          if (isFunction(expectedVal) || isUndefined(expectedVal)) {                                                   // 18549
            continue;                                                                                                  // 18550
          }                                                                                                            // 18551
                                                                                                                       // 18552
          var matchAnyProperty = key === '$';                                                                          // 18553
          var actualVal = matchAnyProperty ? actual : actual[key];                                                     // 18554
          if (!deepCompare(actualVal, expectedVal, comparator, matchAnyProperty, matchAnyProperty)) {                  // 18555
            return false;                                                                                              // 18556
          }                                                                                                            // 18557
        }                                                                                                              // 18558
        return true;                                                                                                   // 18559
      } else {                                                                                                         // 18560
        return comparator(actual, expected);                                                                           // 18561
      }                                                                                                                // 18562
      break;                                                                                                           // 18563
    case 'function':                                                                                                   // 18564
      return false;                                                                                                    // 18565
    default:                                                                                                           // 18566
      return comparator(actual, expected);                                                                             // 18567
  }                                                                                                                    // 18568
}                                                                                                                      // 18569
                                                                                                                       // 18570
// Used for easily differentiating between `null` and actual `object`                                                  // 18571
function getTypeForFilter(val) {                                                                                       // 18572
  return (val === null) ? 'null' : typeof val;                                                                         // 18573
}                                                                                                                      // 18574
                                                                                                                       // 18575
/**                                                                                                                    // 18576
 * @ngdoc filter                                                                                                       // 18577
 * @name currency                                                                                                      // 18578
 * @kind function                                                                                                      // 18579
 *                                                                                                                     // 18580
 * @description                                                                                                        // 18581
 * Formats a number as a currency (ie $1,234.56). When no currency symbol is provided, default                         // 18582
 * symbol for current locale is used.                                                                                  // 18583
 *                                                                                                                     // 18584
 * @param {number} amount Input to filter.                                                                             // 18585
 * @param {string=} symbol Currency symbol or identifier to be displayed.                                              // 18586
 * @param {number=} fractionSize Number of decimal places to round the amount to, defaults to default max fraction size for current locale
 * @returns {string} Formatted number.                                                                                 // 18588
 *                                                                                                                     // 18589
 *                                                                                                                     // 18590
 * @example                                                                                                            // 18591
   <example module="currencyExample">                                                                                  // 18592
     <file name="index.html">                                                                                          // 18593
       <script>                                                                                                        // 18594
         angular.module('currencyExample', [])                                                                         // 18595
           .controller('ExampleController', ['$scope', function($scope) {                                              // 18596
             $scope.amount = 1234.56;                                                                                  // 18597
           }]);                                                                                                        // 18598
       </script>                                                                                                       // 18599
       <div ng-controller="ExampleController">                                                                         // 18600
         <input type="number" ng-model="amount" aria-label="amount"> <br>                                              // 18601
         default currency symbol ($): <span id="currency-default">{{amount | currency}}</span><br>                     // 18602
         custom currency identifier (USD$): <span id="currency-custom">{{amount | currency:"USD$"}}</span>             // 18603
         no fractions (0): <span id="currency-no-fractions">{{amount | currency:"USD$":0}}</span>                      // 18604
       </div>                                                                                                          // 18605
     </file>                                                                                                           // 18606
     <file name="protractor.js" type="protractor">                                                                     // 18607
       it('should init with 1234.56', function() {                                                                     // 18608
         expect(element(by.id('currency-default')).getText()).toBe('$1,234.56');                                       // 18609
         expect(element(by.id('currency-custom')).getText()).toBe('USD$1,234.56');                                     // 18610
         expect(element(by.id('currency-no-fractions')).getText()).toBe('USD$1,235');                                  // 18611
       });                                                                                                             // 18612
       it('should update', function() {                                                                                // 18613
         if (browser.params.browser == 'safari') {                                                                     // 18614
           // Safari does not understand the minus key. See                                                            // 18615
           // https://github.com/angular/protractor/issues/481                                                         // 18616
           return;                                                                                                     // 18617
         }                                                                                                             // 18618
         element(by.model('amount')).clear();                                                                          // 18619
         element(by.model('amount')).sendKeys('-1234');                                                                // 18620
         expect(element(by.id('currency-default')).getText()).toBe('-$1,234.00');                                      // 18621
         expect(element(by.id('currency-custom')).getText()).toBe('-USD$1,234.00');                                    // 18622
         expect(element(by.id('currency-no-fractions')).getText()).toBe('-USD$1,234');                                 // 18623
       });                                                                                                             // 18624
     </file>                                                                                                           // 18625
   </example>                                                                                                          // 18626
 */                                                                                                                    // 18627
currencyFilter.$inject = ['$locale'];                                                                                  // 18628
function currencyFilter($locale) {                                                                                     // 18629
  var formats = $locale.NUMBER_FORMATS;                                                                                // 18630
  return function(amount, currencySymbol, fractionSize) {                                                              // 18631
    if (isUndefined(currencySymbol)) {                                                                                 // 18632
      currencySymbol = formats.CURRENCY_SYM;                                                                           // 18633
    }                                                                                                                  // 18634
                                                                                                                       // 18635
    if (isUndefined(fractionSize)) {                                                                                   // 18636
      fractionSize = formats.PATTERNS[1].maxFrac;                                                                      // 18637
    }                                                                                                                  // 18638
                                                                                                                       // 18639
    // if null or undefined pass it through                                                                            // 18640
    return (amount == null)                                                                                            // 18641
        ? amount                                                                                                       // 18642
        : formatNumber(amount, formats.PATTERNS[1], formats.GROUP_SEP, formats.DECIMAL_SEP, fractionSize).             // 18643
            replace(/\u00A4/g, currencySymbol);                                                                        // 18644
  };                                                                                                                   // 18645
}                                                                                                                      // 18646
                                                                                                                       // 18647
/**                                                                                                                    // 18648
 * @ngdoc filter                                                                                                       // 18649
 * @name number                                                                                                        // 18650
 * @kind function                                                                                                      // 18651
 *                                                                                                                     // 18652
 * @description                                                                                                        // 18653
 * Formats a number as text.                                                                                           // 18654
 *                                                                                                                     // 18655
 * If the input is null or undefined, it will just be returned.                                                        // 18656
 * If the input is infinite (Infinity/-Infinity) the Infinity symbol '∞' is returned.                                  // 18657
 * If the input is not a number an empty string is returned.                                                           // 18658
 *                                                                                                                     // 18659
 *                                                                                                                     // 18660
 * @param {number|string} number Number to format.                                                                     // 18661
 * @param {(number|string)=} fractionSize Number of decimal places to round the number to.                             // 18662
 * If this is not provided then the fraction size is computed from the current locale's number                         // 18663
 * formatting pattern. In the case of the default locale, it will be 3.                                                // 18664
 * @returns {string} Number rounded to decimalPlaces and places a “,” after each third digit.                          // 18665
 *                                                                                                                     // 18666
 * @example                                                                                                            // 18667
   <example module="numberFilterExample">                                                                              // 18668
     <file name="index.html">                                                                                          // 18669
       <script>                                                                                                        // 18670
         angular.module('numberFilterExample', [])                                                                     // 18671
           .controller('ExampleController', ['$scope', function($scope) {                                              // 18672
             $scope.val = 1234.56789;                                                                                  // 18673
           }]);                                                                                                        // 18674
       </script>                                                                                                       // 18675
       <div ng-controller="ExampleController">                                                                         // 18676
         <label>Enter number: <input ng-model='val'></label><br>                                                       // 18677
         Default formatting: <span id='number-default'>{{val | number}}</span><br>                                     // 18678
         No fractions: <span>{{val | number:0}}</span><br>                                                             // 18679
         Negative number: <span>{{-val | number:4}}</span>                                                             // 18680
       </div>                                                                                                          // 18681
     </file>                                                                                                           // 18682
     <file name="protractor.js" type="protractor">                                                                     // 18683
       it('should format numbers', function() {                                                                        // 18684
         expect(element(by.id('number-default')).getText()).toBe('1,234.568');                                         // 18685
         expect(element(by.binding('val | number:0')).getText()).toBe('1,235');                                        // 18686
         expect(element(by.binding('-val | number:4')).getText()).toBe('-1,234.5679');                                 // 18687
       });                                                                                                             // 18688
                                                                                                                       // 18689
       it('should update', function() {                                                                                // 18690
         element(by.model('val')).clear();                                                                             // 18691
         element(by.model('val')).sendKeys('3374.333');                                                                // 18692
         expect(element(by.id('number-default')).getText()).toBe('3,374.333');                                         // 18693
         expect(element(by.binding('val | number:0')).getText()).toBe('3,374');                                        // 18694
         expect(element(by.binding('-val | number:4')).getText()).toBe('-3,374.3330');                                 // 18695
      });                                                                                                              // 18696
     </file>                                                                                                           // 18697
   </example>                                                                                                          // 18698
 */                                                                                                                    // 18699
                                                                                                                       // 18700
                                                                                                                       // 18701
numberFilter.$inject = ['$locale'];                                                                                    // 18702
function numberFilter($locale) {                                                                                       // 18703
  var formats = $locale.NUMBER_FORMATS;                                                                                // 18704
  return function(number, fractionSize) {                                                                              // 18705
                                                                                                                       // 18706
    // if null or undefined pass it through                                                                            // 18707
    return (number == null)                                                                                            // 18708
        ? number                                                                                                       // 18709
        : formatNumber(number, formats.PATTERNS[0], formats.GROUP_SEP, formats.DECIMAL_SEP,                            // 18710
                       fractionSize);                                                                                  // 18711
  };                                                                                                                   // 18712
}                                                                                                                      // 18713
                                                                                                                       // 18714
var DECIMAL_SEP = '.';                                                                                                 // 18715
function formatNumber(number, pattern, groupSep, decimalSep, fractionSize) {                                           // 18716
  if (isObject(number)) return '';                                                                                     // 18717
                                                                                                                       // 18718
  var isNegative = number < 0;                                                                                         // 18719
  number = Math.abs(number);                                                                                           // 18720
                                                                                                                       // 18721
  var isInfinity = number === Infinity;                                                                                // 18722
  if (!isInfinity && !isFinite(number)) return '';                                                                     // 18723
                                                                                                                       // 18724
  var numStr = number + '',                                                                                            // 18725
      formatedText = '',                                                                                               // 18726
      hasExponent = false,                                                                                             // 18727
      parts = [];                                                                                                      // 18728
                                                                                                                       // 18729
  if (isInfinity) formatedText = '\u221e';                                                                             // 18730
                                                                                                                       // 18731
  if (!isInfinity && numStr.indexOf('e') !== -1) {                                                                     // 18732
    var match = numStr.match(/([\d\.]+)e(-?)(\d+)/);                                                                   // 18733
    if (match && match[2] == '-' && match[3] > fractionSize + 1) {                                                     // 18734
      number = 0;                                                                                                      // 18735
    } else {                                                                                                           // 18736
      formatedText = numStr;                                                                                           // 18737
      hasExponent = true;                                                                                              // 18738
    }                                                                                                                  // 18739
  }                                                                                                                    // 18740
                                                                                                                       // 18741
  if (!isInfinity && !hasExponent) {                                                                                   // 18742
    var fractionLen = (numStr.split(DECIMAL_SEP)[1] || '').length;                                                     // 18743
                                                                                                                       // 18744
    // determine fractionSize if it is not specified                                                                   // 18745
    if (isUndefined(fractionSize)) {                                                                                   // 18746
      fractionSize = Math.min(Math.max(pattern.minFrac, fractionLen), pattern.maxFrac);                                // 18747
    }                                                                                                                  // 18748
                                                                                                                       // 18749
    // safely round numbers in JS without hitting imprecisions of floating-point arithmetics                           // 18750
    // inspired by:                                                                                                    // 18751
    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/round                     // 18752
    number = +(Math.round(+(number.toString() + 'e' + fractionSize)).toString() + 'e' + -fractionSize);                // 18753
                                                                                                                       // 18754
    var fraction = ('' + number).split(DECIMAL_SEP);                                                                   // 18755
    var whole = fraction[0];                                                                                           // 18756
    fraction = fraction[1] || '';                                                                                      // 18757
                                                                                                                       // 18758
    var i, pos = 0,                                                                                                    // 18759
        lgroup = pattern.lgSize,                                                                                       // 18760
        group = pattern.gSize;                                                                                         // 18761
                                                                                                                       // 18762
    if (whole.length >= (lgroup + group)) {                                                                            // 18763
      pos = whole.length - lgroup;                                                                                     // 18764
      for (i = 0; i < pos; i++) {                                                                                      // 18765
        if ((pos - i) % group === 0 && i !== 0) {                                                                      // 18766
          formatedText += groupSep;                                                                                    // 18767
        }                                                                                                              // 18768
        formatedText += whole.charAt(i);                                                                               // 18769
      }                                                                                                                // 18770
    }                                                                                                                  // 18771
                                                                                                                       // 18772
    for (i = pos; i < whole.length; i++) {                                                                             // 18773
      if ((whole.length - i) % lgroup === 0 && i !== 0) {                                                              // 18774
        formatedText += groupSep;                                                                                      // 18775
      }                                                                                                                // 18776
      formatedText += whole.charAt(i);                                                                                 // 18777
    }                                                                                                                  // 18778
                                                                                                                       // 18779
    // format fraction part.                                                                                           // 18780
    while (fraction.length < fractionSize) {                                                                           // 18781
      fraction += '0';                                                                                                 // 18782
    }                                                                                                                  // 18783
                                                                                                                       // 18784
    if (fractionSize && fractionSize !== "0") formatedText += decimalSep + fraction.substr(0, fractionSize);           // 18785
  } else {                                                                                                             // 18786
    if (fractionSize > 0 && number < 1) {                                                                              // 18787
      formatedText = number.toFixed(fractionSize);                                                                     // 18788
      number = parseFloat(formatedText);                                                                               // 18789
      formatedText = formatedText.replace(DECIMAL_SEP, decimalSep);                                                    // 18790
    }                                                                                                                  // 18791
  }                                                                                                                    // 18792
                                                                                                                       // 18793
  if (number === 0) {                                                                                                  // 18794
    isNegative = false;                                                                                                // 18795
  }                                                                                                                    // 18796
                                                                                                                       // 18797
  parts.push(isNegative ? pattern.negPre : pattern.posPre,                                                             // 18798
             formatedText,                                                                                             // 18799
             isNegative ? pattern.negSuf : pattern.posSuf);                                                            // 18800
  return parts.join('');                                                                                               // 18801
}                                                                                                                      // 18802
                                                                                                                       // 18803
function padNumber(num, digits, trim) {                                                                                // 18804
  var neg = '';                                                                                                        // 18805
  if (num < 0) {                                                                                                       // 18806
    neg =  '-';                                                                                                        // 18807
    num = -num;                                                                                                        // 18808
  }                                                                                                                    // 18809
  num = '' + num;                                                                                                      // 18810
  while (num.length < digits) num = '0' + num;                                                                         // 18811
  if (trim) {                                                                                                          // 18812
    num = num.substr(num.length - digits);                                                                             // 18813
  }                                                                                                                    // 18814
  return neg + num;                                                                                                    // 18815
}                                                                                                                      // 18816
                                                                                                                       // 18817
                                                                                                                       // 18818
function dateGetter(name, size, offset, trim) {                                                                        // 18819
  offset = offset || 0;                                                                                                // 18820
  return function(date) {                                                                                              // 18821
    var value = date['get' + name]();                                                                                  // 18822
    if (offset > 0 || value > -offset) {                                                                               // 18823
      value += offset;                                                                                                 // 18824
    }                                                                                                                  // 18825
    if (value === 0 && offset == -12) value = 12;                                                                      // 18826
    return padNumber(value, size, trim);                                                                               // 18827
  };                                                                                                                   // 18828
}                                                                                                                      // 18829
                                                                                                                       // 18830
function dateStrGetter(name, shortForm) {                                                                              // 18831
  return function(date, formats) {                                                                                     // 18832
    var value = date['get' + name]();                                                                                  // 18833
    var get = uppercase(shortForm ? ('SHORT' + name) : name);                                                          // 18834
                                                                                                                       // 18835
    return formats[get][value];                                                                                        // 18836
  };                                                                                                                   // 18837
}                                                                                                                      // 18838
                                                                                                                       // 18839
function timeZoneGetter(date, formats, offset) {                                                                       // 18840
  var zone = -1 * offset;                                                                                              // 18841
  var paddedZone = (zone >= 0) ? "+" : "";                                                                             // 18842
                                                                                                                       // 18843
  paddedZone += padNumber(Math[zone > 0 ? 'floor' : 'ceil'](zone / 60), 2) +                                           // 18844
                padNumber(Math.abs(zone % 60), 2);                                                                     // 18845
                                                                                                                       // 18846
  return paddedZone;                                                                                                   // 18847
}                                                                                                                      // 18848
                                                                                                                       // 18849
function getFirstThursdayOfYear(year) {                                                                                // 18850
    // 0 = index of January                                                                                            // 18851
    var dayOfWeekOnFirst = (new Date(year, 0, 1)).getDay();                                                            // 18852
    // 4 = index of Thursday (+1 to account for 1st = 5)                                                               // 18853
    // 11 = index of *next* Thursday (+1 account for 1st = 12)                                                         // 18854
    return new Date(year, 0, ((dayOfWeekOnFirst <= 4) ? 5 : 12) - dayOfWeekOnFirst);                                   // 18855
}                                                                                                                      // 18856
                                                                                                                       // 18857
function getThursdayThisWeek(datetime) {                                                                               // 18858
    return new Date(datetime.getFullYear(), datetime.getMonth(),                                                       // 18859
      // 4 = index of Thursday                                                                                         // 18860
      datetime.getDate() + (4 - datetime.getDay()));                                                                   // 18861
}                                                                                                                      // 18862
                                                                                                                       // 18863
function weekGetter(size) {                                                                                            // 18864
   return function(date) {                                                                                             // 18865
      var firstThurs = getFirstThursdayOfYear(date.getFullYear()),                                                     // 18866
         thisThurs = getThursdayThisWeek(date);                                                                        // 18867
                                                                                                                       // 18868
      var diff = +thisThurs - +firstThurs,                                                                             // 18869
         result = 1 + Math.round(diff / 6.048e8); // 6.048e8 ms per week                                               // 18870
                                                                                                                       // 18871
      return padNumber(result, size);                                                                                  // 18872
   };                                                                                                                  // 18873
}                                                                                                                      // 18874
                                                                                                                       // 18875
function ampmGetter(date, formats) {                                                                                   // 18876
  return date.getHours() < 12 ? formats.AMPMS[0] : formats.AMPMS[1];                                                   // 18877
}                                                                                                                      // 18878
                                                                                                                       // 18879
function eraGetter(date, formats) {                                                                                    // 18880
  return date.getFullYear() <= 0 ? formats.ERAS[0] : formats.ERAS[1];                                                  // 18881
}                                                                                                                      // 18882
                                                                                                                       // 18883
function longEraGetter(date, formats) {                                                                                // 18884
  return date.getFullYear() <= 0 ? formats.ERANAMES[0] : formats.ERANAMES[1];                                          // 18885
}                                                                                                                      // 18886
                                                                                                                       // 18887
var DATE_FORMATS = {                                                                                                   // 18888
  yyyy: dateGetter('FullYear', 4),                                                                                     // 18889
    yy: dateGetter('FullYear', 2, 0, true),                                                                            // 18890
     y: dateGetter('FullYear', 1),                                                                                     // 18891
  MMMM: dateStrGetter('Month'),                                                                                        // 18892
   MMM: dateStrGetter('Month', true),                                                                                  // 18893
    MM: dateGetter('Month', 2, 1),                                                                                     // 18894
     M: dateGetter('Month', 1, 1),                                                                                     // 18895
    dd: dateGetter('Date', 2),                                                                                         // 18896
     d: dateGetter('Date', 1),                                                                                         // 18897
    HH: dateGetter('Hours', 2),                                                                                        // 18898
     H: dateGetter('Hours', 1),                                                                                        // 18899
    hh: dateGetter('Hours', 2, -12),                                                                                   // 18900
     h: dateGetter('Hours', 1, -12),                                                                                   // 18901
    mm: dateGetter('Minutes', 2),                                                                                      // 18902
     m: dateGetter('Minutes', 1),                                                                                      // 18903
    ss: dateGetter('Seconds', 2),                                                                                      // 18904
     s: dateGetter('Seconds', 1),                                                                                      // 18905
     // while ISO 8601 requires fractions to be prefixed with `.` or `,`                                               // 18906
     // we can be just safely rely on using `sss` since we currently don't support single or two digit fractions       // 18907
   sss: dateGetter('Milliseconds', 3),                                                                                 // 18908
  EEEE: dateStrGetter('Day'),                                                                                          // 18909
   EEE: dateStrGetter('Day', true),                                                                                    // 18910
     a: ampmGetter,                                                                                                    // 18911
     Z: timeZoneGetter,                                                                                                // 18912
    ww: weekGetter(2),                                                                                                 // 18913
     w: weekGetter(1),                                                                                                 // 18914
     G: eraGetter,                                                                                                     // 18915
     GG: eraGetter,                                                                                                    // 18916
     GGG: eraGetter,                                                                                                   // 18917
     GGGG: longEraGetter                                                                                               // 18918
};                                                                                                                     // 18919
                                                                                                                       // 18920
var DATE_FORMATS_SPLIT = /((?:[^yMdHhmsaZEwG']+)|(?:'(?:[^']|'')*')|(?:E+|y+|M+|d+|H+|h+|m+|s+|a|Z|G+|w+))(.*)/,       // 18921
    NUMBER_STRING = /^\-?\d+$/;                                                                                        // 18922
                                                                                                                       // 18923
/**                                                                                                                    // 18924
 * @ngdoc filter                                                                                                       // 18925
 * @name date                                                                                                          // 18926
 * @kind function                                                                                                      // 18927
 *                                                                                                                     // 18928
 * @description                                                                                                        // 18929
 *   Formats `date` to a string based on the requested `format`.                                                       // 18930
 *                                                                                                                     // 18931
 *   `format` string can be composed of the following elements:                                                        // 18932
 *                                                                                                                     // 18933
 *   * `'yyyy'`: 4 digit representation of year (e.g. AD 1 => 0001, AD 2010 => 2010)                                   // 18934
 *   * `'yy'`: 2 digit representation of year, padded (00-99). (e.g. AD 2001 => 01, AD 2010 => 10)                     // 18935
 *   * `'y'`: 1 digit representation of year, e.g. (AD 1 => 1, AD 199 => 199)                                          // 18936
 *   * `'MMMM'`: Month in year (January-December)                                                                      // 18937
 *   * `'MMM'`: Month in year (Jan-Dec)                                                                                // 18938
 *   * `'MM'`: Month in year, padded (01-12)                                                                           // 18939
 *   * `'M'`: Month in year (1-12)                                                                                     // 18940
 *   * `'dd'`: Day in month, padded (01-31)                                                                            // 18941
 *   * `'d'`: Day in month (1-31)                                                                                      // 18942
 *   * `'EEEE'`: Day in Week,(Sunday-Saturday)                                                                         // 18943
 *   * `'EEE'`: Day in Week, (Sun-Sat)                                                                                 // 18944
 *   * `'HH'`: Hour in day, padded (00-23)                                                                             // 18945
 *   * `'H'`: Hour in day (0-23)                                                                                       // 18946
 *   * `'hh'`: Hour in AM/PM, padded (01-12)                                                                           // 18947
 *   * `'h'`: Hour in AM/PM, (1-12)                                                                                    // 18948
 *   * `'mm'`: Minute in hour, padded (00-59)                                                                          // 18949
 *   * `'m'`: Minute in hour (0-59)                                                                                    // 18950
 *   * `'ss'`: Second in minute, padded (00-59)                                                                        // 18951
 *   * `'s'`: Second in minute (0-59)                                                                                  // 18952
 *   * `'sss'`: Millisecond in second, padded (000-999)                                                                // 18953
 *   * `'a'`: AM/PM marker                                                                                             // 18954
 *   * `'Z'`: 4 digit (+sign) representation of the timezone offset (-1200-+1200)                                      // 18955
 *   * `'ww'`: Week of year, padded (00-53). Week 01 is the week with the first Thursday of the year                   // 18956
 *   * `'w'`: Week of year (0-53). Week 1 is the week with the first Thursday of the year                              // 18957
 *   * `'G'`, `'GG'`, `'GGG'`: The abbreviated form of the era string (e.g. 'AD')                                      // 18958
 *   * `'GGGG'`: The long form of the era string (e.g. 'Anno Domini')                                                  // 18959
 *                                                                                                                     // 18960
 *   `format` string can also be one of the following predefined                                                       // 18961
 *   {@link guide/i18n localizable formats}:                                                                           // 18962
 *                                                                                                                     // 18963
 *   * `'medium'`: equivalent to `'MMM d, y h:mm:ss a'` for en_US locale                                               // 18964
 *     (e.g. Sep 3, 2010 12:05:08 PM)                                                                                  // 18965
 *   * `'short'`: equivalent to `'M/d/yy h:mm a'` for en_US  locale (e.g. 9/3/10 12:05 PM)                             // 18966
 *   * `'fullDate'`: equivalent to `'EEEE, MMMM d, y'` for en_US  locale                                               // 18967
 *     (e.g. Friday, September 3, 2010)                                                                                // 18968
 *   * `'longDate'`: equivalent to `'MMMM d, y'` for en_US  locale (e.g. September 3, 2010)                            // 18969
 *   * `'mediumDate'`: equivalent to `'MMM d, y'` for en_US  locale (e.g. Sep 3, 2010)                                 // 18970
 *   * `'shortDate'`: equivalent to `'M/d/yy'` for en_US locale (e.g. 9/3/10)                                          // 18971
 *   * `'mediumTime'`: equivalent to `'h:mm:ss a'` for en_US locale (e.g. 12:05:08 PM)                                 // 18972
 *   * `'shortTime'`: equivalent to `'h:mm a'` for en_US locale (e.g. 12:05 PM)                                        // 18973
 *                                                                                                                     // 18974
 *   `format` string can contain literal values. These need to be escaped by surrounding with single quotes (e.g.      // 18975
 *   `"h 'in the morning'"`). In order to output a single quote, escape it - i.e., two single quotes in a sequence     // 18976
 *   (e.g. `"h 'o''clock'"`).                                                                                          // 18977
 *                                                                                                                     // 18978
 * @param {(Date|number|string)} date Date to format either as Date object, milliseconds (string or                    // 18979
 *    number) or various ISO 8601 datetime string formats (e.g. yyyy-MM-ddTHH:mm:ss.sssZ and its                       // 18980
 *    shorter versions like yyyy-MM-ddTHH:mmZ, yyyy-MM-dd or yyyyMMddTHHmmssZ). If no timezone is                      // 18981
 *    specified in the string input, the time is considered to be in the local timezone.                               // 18982
 * @param {string=} format Formatting rules (see Description). If not specified,                                       // 18983
 *    `mediumDate` is used.                                                                                            // 18984
 * @param {string=} timezone Timezone to be used for formatting. It understands UTC/GMT and the                        // 18985
 *    continental US time zone abbreviations, but for general use, use a time zone offset, for                         // 18986
 *    example, `'+0430'` (4 hours, 30 minutes east of the Greenwich meridian)                                          // 18987
 *    If not specified, the timezone of the browser will be used.                                                      // 18988
 * @returns {string} Formatted string or the input if input is not recognized as date/millis.                          // 18989
 *                                                                                                                     // 18990
 * @example                                                                                                            // 18991
   <example>                                                                                                           // 18992
     <file name="index.html">                                                                                          // 18993
       <span ng-non-bindable>{{1288323623006 | date:'medium'}}</span>:                                                 // 18994
           <span>{{1288323623006 | date:'medium'}}</span><br>                                                          // 18995
       <span ng-non-bindable>{{1288323623006 | date:'yyyy-MM-dd HH:mm:ss Z'}}</span>:                                  // 18996
          <span>{{1288323623006 | date:'yyyy-MM-dd HH:mm:ss Z'}}</span><br>                                            // 18997
       <span ng-non-bindable>{{1288323623006 | date:'MM/dd/yyyy @ h:mma'}}</span>:                                     // 18998
          <span>{{'1288323623006' | date:'MM/dd/yyyy @ h:mma'}}</span><br>                                             // 18999
       <span ng-non-bindable>{{1288323623006 | date:"MM/dd/yyyy 'at' h:mma"}}</span>:                                  // 19000
          <span>{{'1288323623006' | date:"MM/dd/yyyy 'at' h:mma"}}</span><br>                                          // 19001
     </file>                                                                                                           // 19002
     <file name="protractor.js" type="protractor">                                                                     // 19003
       it('should format date', function() {                                                                           // 19004
         expect(element(by.binding("1288323623006 | date:'medium'")).getText()).                                       // 19005
            toMatch(/Oct 2\d, 2010 \d{1,2}:\d{2}:\d{2} (AM|PM)/);                                                      // 19006
         expect(element(by.binding("1288323623006 | date:'yyyy-MM-dd HH:mm:ss Z'")).getText()).                        // 19007
            toMatch(/2010\-10\-2\d \d{2}:\d{2}:\d{2} (\-|\+)?\d{4}/);                                                  // 19008
         expect(element(by.binding("'1288323623006' | date:'MM/dd/yyyy @ h:mma'")).getText()).                         // 19009
            toMatch(/10\/2\d\/2010 @ \d{1,2}:\d{2}(AM|PM)/);                                                           // 19010
         expect(element(by.binding("'1288323623006' | date:\"MM/dd/yyyy 'at' h:mma\"")).getText()).                    // 19011
            toMatch(/10\/2\d\/2010 at \d{1,2}:\d{2}(AM|PM)/);                                                          // 19012
       });                                                                                                             // 19013
     </file>                                                                                                           // 19014
   </example>                                                                                                          // 19015
 */                                                                                                                    // 19016
dateFilter.$inject = ['$locale'];                                                                                      // 19017
function dateFilter($locale) {                                                                                         // 19018
                                                                                                                       // 19019
                                                                                                                       // 19020
  var R_ISO8601_STR = /^(\d{4})-?(\d\d)-?(\d\d)(?:T(\d\d)(?::?(\d\d)(?::?(\d\d)(?:\.(\d+))?)?)?(Z|([+-])(\d\d):?(\d\d))?)?$/;
                     // 1        2       3         4          5          6          7          8  9     10      11     // 19022
  function jsonStringToDate(string) {                                                                                  // 19023
    var match;                                                                                                         // 19024
    if (match = string.match(R_ISO8601_STR)) {                                                                         // 19025
      var date = new Date(0),                                                                                          // 19026
          tzHour = 0,                                                                                                  // 19027
          tzMin  = 0,                                                                                                  // 19028
          dateSetter = match[8] ? date.setUTCFullYear : date.setFullYear,                                              // 19029
          timeSetter = match[8] ? date.setUTCHours : date.setHours;                                                    // 19030
                                                                                                                       // 19031
      if (match[9]) {                                                                                                  // 19032
        tzHour = toInt(match[9] + match[10]);                                                                          // 19033
        tzMin = toInt(match[9] + match[11]);                                                                           // 19034
      }                                                                                                                // 19035
      dateSetter.call(date, toInt(match[1]), toInt(match[2]) - 1, toInt(match[3]));                                    // 19036
      var h = toInt(match[4] || 0) - tzHour;                                                                           // 19037
      var m = toInt(match[5] || 0) - tzMin;                                                                            // 19038
      var s = toInt(match[6] || 0);                                                                                    // 19039
      var ms = Math.round(parseFloat('0.' + (match[7] || 0)) * 1000);                                                  // 19040
      timeSetter.call(date, h, m, s, ms);                                                                              // 19041
      return date;                                                                                                     // 19042
    }                                                                                                                  // 19043
    return string;                                                                                                     // 19044
  }                                                                                                                    // 19045
                                                                                                                       // 19046
                                                                                                                       // 19047
  return function(date, format, timezone) {                                                                            // 19048
    var text = '',                                                                                                     // 19049
        parts = [],                                                                                                    // 19050
        fn, match;                                                                                                     // 19051
                                                                                                                       // 19052
    format = format || 'mediumDate';                                                                                   // 19053
    format = $locale.DATETIME_FORMATS[format] || format;                                                               // 19054
    if (isString(date)) {                                                                                              // 19055
      date = NUMBER_STRING.test(date) ? toInt(date) : jsonStringToDate(date);                                          // 19056
    }                                                                                                                  // 19057
                                                                                                                       // 19058
    if (isNumber(date)) {                                                                                              // 19059
      date = new Date(date);                                                                                           // 19060
    }                                                                                                                  // 19061
                                                                                                                       // 19062
    if (!isDate(date) || !isFinite(date.getTime())) {                                                                  // 19063
      return date;                                                                                                     // 19064
    }                                                                                                                  // 19065
                                                                                                                       // 19066
    while (format) {                                                                                                   // 19067
      match = DATE_FORMATS_SPLIT.exec(format);                                                                         // 19068
      if (match) {                                                                                                     // 19069
        parts = concat(parts, match, 1);                                                                               // 19070
        format = parts.pop();                                                                                          // 19071
      } else {                                                                                                         // 19072
        parts.push(format);                                                                                            // 19073
        format = null;                                                                                                 // 19074
      }                                                                                                                // 19075
    }                                                                                                                  // 19076
                                                                                                                       // 19077
    var dateTimezoneOffset = date.getTimezoneOffset();                                                                 // 19078
    if (timezone) {                                                                                                    // 19079
      dateTimezoneOffset = timezoneToOffset(timezone, date.getTimezoneOffset());                                       // 19080
      date = convertTimezoneToLocal(date, timezone, true);                                                             // 19081
    }                                                                                                                  // 19082
    forEach(parts, function(value) {                                                                                   // 19083
      fn = DATE_FORMATS[value];                                                                                        // 19084
      text += fn ? fn(date, $locale.DATETIME_FORMATS, dateTimezoneOffset)                                              // 19085
                 : value.replace(/(^'|'$)/g, '').replace(/''/g, "'");                                                  // 19086
    });                                                                                                                // 19087
                                                                                                                       // 19088
    return text;                                                                                                       // 19089
  };                                                                                                                   // 19090
}                                                                                                                      // 19091
                                                                                                                       // 19092
                                                                                                                       // 19093
/**                                                                                                                    // 19094
 * @ngdoc filter                                                                                                       // 19095
 * @name json                                                                                                          // 19096
 * @kind function                                                                                                      // 19097
 *                                                                                                                     // 19098
 * @description                                                                                                        // 19099
 *   Allows you to convert a JavaScript object into JSON string.                                                       // 19100
 *                                                                                                                     // 19101
 *   This filter is mostly useful for debugging. When using the double curly {{value}} notation                        // 19102
 *   the binding is automatically converted to JSON.                                                                   // 19103
 *                                                                                                                     // 19104
 * @param {*} object Any JavaScript object (including arrays and primitive types) to filter.                           // 19105
 * @param {number=} spacing The number of spaces to use per indentation, defaults to 2.                                // 19106
 * @returns {string} JSON string.                                                                                      // 19107
 *                                                                                                                     // 19108
 *                                                                                                                     // 19109
 * @example                                                                                                            // 19110
   <example>                                                                                                           // 19111
     <file name="index.html">                                                                                          // 19112
       <pre id="default-spacing">{{ {'name':'value'} | json }}</pre>                                                   // 19113
       <pre id="custom-spacing">{{ {'name':'value'} | json:4 }}</pre>                                                  // 19114
     </file>                                                                                                           // 19115
     <file name="protractor.js" type="protractor">                                                                     // 19116
       it('should jsonify filtered objects', function() {                                                              // 19117
         expect(element(by.id('default-spacing')).getText()).toMatch(/\{\n  "name": ?"value"\n}/);                     // 19118
         expect(element(by.id('custom-spacing')).getText()).toMatch(/\{\n    "name": ?"value"\n}/);                    // 19119
       });                                                                                                             // 19120
     </file>                                                                                                           // 19121
   </example>                                                                                                          // 19122
 *                                                                                                                     // 19123
 */                                                                                                                    // 19124
function jsonFilter() {                                                                                                // 19125
  return function(object, spacing) {                                                                                   // 19126
    if (isUndefined(spacing)) {                                                                                        // 19127
        spacing = 2;                                                                                                   // 19128
    }                                                                                                                  // 19129
    return toJson(object, spacing);                                                                                    // 19130
  };                                                                                                                   // 19131
}                                                                                                                      // 19132
                                                                                                                       // 19133
                                                                                                                       // 19134
/**                                                                                                                    // 19135
 * @ngdoc filter                                                                                                       // 19136
 * @name lowercase                                                                                                     // 19137
 * @kind function                                                                                                      // 19138
 * @description                                                                                                        // 19139
 * Converts string to lowercase.                                                                                       // 19140
 * @see angular.lowercase                                                                                              // 19141
 */                                                                                                                    // 19142
var lowercaseFilter = valueFn(lowercase);                                                                              // 19143
                                                                                                                       // 19144
                                                                                                                       // 19145
/**                                                                                                                    // 19146
 * @ngdoc filter                                                                                                       // 19147
 * @name uppercase                                                                                                     // 19148
 * @kind function                                                                                                      // 19149
 * @description                                                                                                        // 19150
 * Converts string to uppercase.                                                                                       // 19151
 * @see angular.uppercase                                                                                              // 19152
 */                                                                                                                    // 19153
var uppercaseFilter = valueFn(uppercase);                                                                              // 19154
                                                                                                                       // 19155
/**                                                                                                                    // 19156
 * @ngdoc filter                                                                                                       // 19157
 * @name limitTo                                                                                                       // 19158
 * @kind function                                                                                                      // 19159
 *                                                                                                                     // 19160
 * @description                                                                                                        // 19161
 * Creates a new array or string containing only a specified number of elements. The elements                          // 19162
 * are taken from either the beginning or the end of the source array, string or number, as specified by               // 19163
 * the value and sign (positive or negative) of `limit`. If a number is used as input, it is                           // 19164
 * converted to a string.                                                                                              // 19165
 *                                                                                                                     // 19166
 * @param {Array|string|number} input Source array, string or number to be limited.                                    // 19167
 * @param {string|number} limit The length of the returned array or string. If the `limit` number                      // 19168
 *     is positive, `limit` number of items from the beginning of the source array/string are copied.                  // 19169
 *     If the number is negative, `limit` number  of items from the end of the source array/string                     // 19170
 *     are copied. The `limit` will be trimmed if it exceeds `array.length`. If `limit` is undefined,                  // 19171
 *     the input will be returned unchanged.                                                                           // 19172
 * @param {(string|number)=} begin Index at which to begin limitation. As a negative index, `begin`                    // 19173
 *     indicates an offset from the end of `input`. Defaults to `0`.                                                   // 19174
 * @returns {Array|string} A new sub-array or substring of length `limit` or less if input array                       // 19175
 *     had less than `limit` elements.                                                                                 // 19176
 *                                                                                                                     // 19177
 * @example                                                                                                            // 19178
   <example module="limitToExample">                                                                                   // 19179
     <file name="index.html">                                                                                          // 19180
       <script>                                                                                                        // 19181
         angular.module('limitToExample', [])                                                                          // 19182
           .controller('ExampleController', ['$scope', function($scope) {                                              // 19183
             $scope.numbers = [1,2,3,4,5,6,7,8,9];                                                                     // 19184
             $scope.letters = "abcdefghi";                                                                             // 19185
             $scope.longNumber = 2345432342;                                                                           // 19186
             $scope.numLimit = 3;                                                                                      // 19187
             $scope.letterLimit = 3;                                                                                   // 19188
             $scope.longNumberLimit = 3;                                                                               // 19189
           }]);                                                                                                        // 19190
       </script>                                                                                                       // 19191
       <div ng-controller="ExampleController">                                                                         // 19192
         <label>                                                                                                       // 19193
            Limit {{numbers}} to:                                                                                      // 19194
            <input type="number" step="1" ng-model="numLimit">                                                         // 19195
         </label>                                                                                                      // 19196
         <p>Output numbers: {{ numbers | limitTo:numLimit }}</p>                                                       // 19197
         <label>                                                                                                       // 19198
            Limit {{letters}} to:                                                                                      // 19199
            <input type="number" step="1" ng-model="letterLimit">                                                      // 19200
         </label>                                                                                                      // 19201
         <p>Output letters: {{ letters | limitTo:letterLimit }}</p>                                                    // 19202
         <label>                                                                                                       // 19203
            Limit {{longNumber}} to:                                                                                   // 19204
            <input type="number" step="1" ng-model="longNumberLimit">                                                  // 19205
         </label>                                                                                                      // 19206
         <p>Output long number: {{ longNumber | limitTo:longNumberLimit }}</p>                                         // 19207
       </div>                                                                                                          // 19208
     </file>                                                                                                           // 19209
     <file name="protractor.js" type="protractor">                                                                     // 19210
       var numLimitInput = element(by.model('numLimit'));                                                              // 19211
       var letterLimitInput = element(by.model('letterLimit'));                                                        // 19212
       var longNumberLimitInput = element(by.model('longNumberLimit'));                                                // 19213
       var limitedNumbers = element(by.binding('numbers | limitTo:numLimit'));                                         // 19214
       var limitedLetters = element(by.binding('letters | limitTo:letterLimit'));                                      // 19215
       var limitedLongNumber = element(by.binding('longNumber | limitTo:longNumberLimit'));                            // 19216
                                                                                                                       // 19217
       it('should limit the number array to first three items', function() {                                           // 19218
         expect(numLimitInput.getAttribute('value')).toBe('3');                                                        // 19219
         expect(letterLimitInput.getAttribute('value')).toBe('3');                                                     // 19220
         expect(longNumberLimitInput.getAttribute('value')).toBe('3');                                                 // 19221
         expect(limitedNumbers.getText()).toEqual('Output numbers: [1,2,3]');                                          // 19222
         expect(limitedLetters.getText()).toEqual('Output letters: abc');                                              // 19223
         expect(limitedLongNumber.getText()).toEqual('Output long number: 234');                                       // 19224
       });                                                                                                             // 19225
                                                                                                                       // 19226
       // There is a bug in safari and protractor that doesn't like the minus key                                      // 19227
       // it('should update the output when -3 is entered', function() {                                               // 19228
       //   numLimitInput.clear();                                                                                     // 19229
       //   numLimitInput.sendKeys('-3');                                                                              // 19230
       //   letterLimitInput.clear();                                                                                  // 19231
       //   letterLimitInput.sendKeys('-3');                                                                           // 19232
       //   longNumberLimitInput.clear();                                                                              // 19233
       //   longNumberLimitInput.sendKeys('-3');                                                                       // 19234
       //   expect(limitedNumbers.getText()).toEqual('Output numbers: [7,8,9]');                                       // 19235
       //   expect(limitedLetters.getText()).toEqual('Output letters: ghi');                                           // 19236
       //   expect(limitedLongNumber.getText()).toEqual('Output long number: 342');                                    // 19237
       // });                                                                                                          // 19238
                                                                                                                       // 19239
       it('should not exceed the maximum size of input array', function() {                                            // 19240
         numLimitInput.clear();                                                                                        // 19241
         numLimitInput.sendKeys('100');                                                                                // 19242
         letterLimitInput.clear();                                                                                     // 19243
         letterLimitInput.sendKeys('100');                                                                             // 19244
         longNumberLimitInput.clear();                                                                                 // 19245
         longNumberLimitInput.sendKeys('100');                                                                         // 19246
         expect(limitedNumbers.getText()).toEqual('Output numbers: [1,2,3,4,5,6,7,8,9]');                              // 19247
         expect(limitedLetters.getText()).toEqual('Output letters: abcdefghi');                                        // 19248
         expect(limitedLongNumber.getText()).toEqual('Output long number: 2345432342');                                // 19249
       });                                                                                                             // 19250
     </file>                                                                                                           // 19251
   </example>                                                                                                          // 19252
*/                                                                                                                     // 19253
function limitToFilter() {                                                                                             // 19254
  return function(input, limit, begin) {                                                                               // 19255
    if (Math.abs(Number(limit)) === Infinity) {                                                                        // 19256
      limit = Number(limit);                                                                                           // 19257
    } else {                                                                                                           // 19258
      limit = toInt(limit);                                                                                            // 19259
    }                                                                                                                  // 19260
    if (isNaN(limit)) return input;                                                                                    // 19261
                                                                                                                       // 19262
    if (isNumber(input)) input = input.toString();                                                                     // 19263
    if (!isArray(input) && !isString(input)) return input;                                                             // 19264
                                                                                                                       // 19265
    begin = (!begin || isNaN(begin)) ? 0 : toInt(begin);                                                               // 19266
    begin = (begin < 0) ? Math.max(0, input.length + begin) : begin;                                                   // 19267
                                                                                                                       // 19268
    if (limit >= 0) {                                                                                                  // 19269
      return input.slice(begin, begin + limit);                                                                        // 19270
    } else {                                                                                                           // 19271
      if (begin === 0) {                                                                                               // 19272
        return input.slice(limit, input.length);                                                                       // 19273
      } else {                                                                                                         // 19274
        return input.slice(Math.max(0, begin + limit), begin);                                                         // 19275
      }                                                                                                                // 19276
    }                                                                                                                  // 19277
  };                                                                                                                   // 19278
}                                                                                                                      // 19279
                                                                                                                       // 19280
/**                                                                                                                    // 19281
 * @ngdoc filter                                                                                                       // 19282
 * @name orderBy                                                                                                       // 19283
 * @kind function                                                                                                      // 19284
 *                                                                                                                     // 19285
 * @description                                                                                                        // 19286
 * Orders a specified `array` by the `expression` predicate. It is ordered alphabetically                              // 19287
 * for strings and numerically for numbers. Note: if you notice numbers are not being sorted                           // 19288
 * as expected, make sure they are actually being saved as numbers and not strings.                                    // 19289
 *                                                                                                                     // 19290
 * @param {Array} array The array to sort.                                                                             // 19291
 * @param {function(*)|string|Array.<(function(*)|string)>=} expression A predicate to be                              // 19292
 *    used by the comparator to determine the order of elements.                                                       // 19293
 *                                                                                                                     // 19294
 *    Can be one of:                                                                                                   // 19295
 *                                                                                                                     // 19296
 *    - `function`: Getter function. The result of this function will be sorted using the                              // 19297
 *      `<`, `===`, `>` operator.                                                                                      // 19298
 *    - `string`: An Angular expression. The result of this expression is used to compare elements                     // 19299
 *      (for example `name` to sort by a property called `name` or `name.substr(0, 3)` to sort by                      // 19300
 *      3 first characters of a property called `name`). The result of a constant expression                           // 19301
 *      is interpreted as a property name to be used in comparisons (for example `"special name"`                      // 19302
 *      to sort object by the value of their `special name` property). An expression can be                            // 19303
 *      optionally prefixed with `+` or `-` to control ascending or descending sort order                              // 19304
 *      (for example, `+name` or `-name`). If no property is provided, (e.g. `'+'`) then the array                     // 19305
 *      element itself is used to compare where sorting.                                                               // 19306
 *    - `Array`: An array of function or string predicates. The first predicate in the array                           // 19307
 *      is used for sorting, but when two items are equivalent, the next predicate is used.                            // 19308
 *                                                                                                                     // 19309
 *    If the predicate is missing or empty then it defaults to `'+'`.                                                  // 19310
 *                                                                                                                     // 19311
 * @param {boolean=} reverse Reverse the order of the array.                                                           // 19312
 * @returns {Array} Sorted copy of the source array.                                                                   // 19313
 *                                                                                                                     // 19314
 *                                                                                                                     // 19315
 * @example                                                                                                            // 19316
 * The example below demonstrates a simple ngRepeat, where the data is sorted                                          // 19317
 * by age in descending order (predicate is set to `'-age'`).                                                          // 19318
 * `reverse` is not set, which means it defaults to `false`.                                                           // 19319
   <example module="orderByExample">                                                                                   // 19320
     <file name="index.html">                                                                                          // 19321
       <script>                                                                                                        // 19322
         angular.module('orderByExample', [])                                                                          // 19323
           .controller('ExampleController', ['$scope', function($scope) {                                              // 19324
             $scope.friends =                                                                                          // 19325
                 [{name:'John', phone:'555-1212', age:10},                                                             // 19326
                  {name:'Mary', phone:'555-9876', age:19},                                                             // 19327
                  {name:'Mike', phone:'555-4321', age:21},                                                             // 19328
                  {name:'Adam', phone:'555-5678', age:35},                                                             // 19329
                  {name:'Julie', phone:'555-8765', age:29}];                                                           // 19330
           }]);                                                                                                        // 19331
       </script>                                                                                                       // 19332
       <div ng-controller="ExampleController">                                                                         // 19333
         <table class="friend">                                                                                        // 19334
           <tr>                                                                                                        // 19335
             <th>Name</th>                                                                                             // 19336
             <th>Phone Number</th>                                                                                     // 19337
             <th>Age</th>                                                                                              // 19338
           </tr>                                                                                                       // 19339
           <tr ng-repeat="friend in friends | orderBy:'-age'">                                                         // 19340
             <td>{{friend.name}}</td>                                                                                  // 19341
             <td>{{friend.phone}}</td>                                                                                 // 19342
             <td>{{friend.age}}</td>                                                                                   // 19343
           </tr>                                                                                                       // 19344
         </table>                                                                                                      // 19345
       </div>                                                                                                          // 19346
     </file>                                                                                                           // 19347
   </example>                                                                                                          // 19348
 *                                                                                                                     // 19349
 * The predicate and reverse parameters can be controlled dynamically through scope properties,                        // 19350
 * as shown in the next example.                                                                                       // 19351
 * @example                                                                                                            // 19352
   <example module="orderByExample">                                                                                   // 19353
     <file name="index.html">                                                                                          // 19354
       <script>                                                                                                        // 19355
         angular.module('orderByExample', [])                                                                          // 19356
           .controller('ExampleController', ['$scope', function($scope) {                                              // 19357
             $scope.friends =                                                                                          // 19358
                 [{name:'John', phone:'555-1212', age:10},                                                             // 19359
                  {name:'Mary', phone:'555-9876', age:19},                                                             // 19360
                  {name:'Mike', phone:'555-4321', age:21},                                                             // 19361
                  {name:'Adam', phone:'555-5678', age:35},                                                             // 19362
                  {name:'Julie', phone:'555-8765', age:29}];                                                           // 19363
             $scope.predicate = 'age';                                                                                 // 19364
             $scope.reverse = true;                                                                                    // 19365
             $scope.order = function(predicate) {                                                                      // 19366
               $scope.reverse = ($scope.predicate === predicate) ? !$scope.reverse : false;                            // 19367
               $scope.predicate = predicate;                                                                           // 19368
             };                                                                                                        // 19369
           }]);                                                                                                        // 19370
       </script>                                                                                                       // 19371
       <style type="text/css">                                                                                         // 19372
         .sortorder:after {                                                                                            // 19373
           content: '\25b2';                                                                                           // 19374
         }                                                                                                             // 19375
         .sortorder.reverse:after {                                                                                    // 19376
           content: '\25bc';                                                                                           // 19377
         }                                                                                                             // 19378
       </style>                                                                                                        // 19379
       <div ng-controller="ExampleController">                                                                         // 19380
         <pre>Sorting predicate = {{predicate}}; reverse = {{reverse}}</pre>                                           // 19381
         <hr/>                                                                                                         // 19382
         [ <a href="" ng-click="predicate=''">unsorted</a> ]                                                           // 19383
         <table class="friend">                                                                                        // 19384
           <tr>                                                                                                        // 19385
             <th>                                                                                                      // 19386
               <a href="" ng-click="order('name')">Name</a>                                                            // 19387
               <span class="sortorder" ng-show="predicate === 'name'" ng-class="{reverse:reverse}"></span>             // 19388
             </th>                                                                                                     // 19389
             <th>                                                                                                      // 19390
               <a href="" ng-click="order('phone')">Phone Number</a>                                                   // 19391
               <span class="sortorder" ng-show="predicate === 'phone'" ng-class="{reverse:reverse}"></span>            // 19392
             </th>                                                                                                     // 19393
             <th>                                                                                                      // 19394
               <a href="" ng-click="order('age')">Age</a>                                                              // 19395
               <span class="sortorder" ng-show="predicate === 'age'" ng-class="{reverse:reverse}"></span>              // 19396
             </th>                                                                                                     // 19397
           </tr>                                                                                                       // 19398
           <tr ng-repeat="friend in friends | orderBy:predicate:reverse">                                              // 19399
             <td>{{friend.name}}</td>                                                                                  // 19400
             <td>{{friend.phone}}</td>                                                                                 // 19401
             <td>{{friend.age}}</td>                                                                                   // 19402
           </tr>                                                                                                       // 19403
         </table>                                                                                                      // 19404
       </div>                                                                                                          // 19405
     </file>                                                                                                           // 19406
   </example>                                                                                                          // 19407
 *                                                                                                                     // 19408
 * It's also possible to call the orderBy filter manually, by injecting `$filter`, retrieving the                      // 19409
 * filter routine with `$filter('orderBy')`, and calling the returned filter routine with the                          // 19410
 * desired parameters.                                                                                                 // 19411
 *                                                                                                                     // 19412
 * Example:                                                                                                            // 19413
 *                                                                                                                     // 19414
 * @example                                                                                                            // 19415
  <example module="orderByExample">                                                                                    // 19416
    <file name="index.html">                                                                                           // 19417
      <div ng-controller="ExampleController">                                                                          // 19418
        <table class="friend">                                                                                         // 19419
          <tr>                                                                                                         // 19420
            <th><a href="" ng-click="reverse=false;order('name', false)">Name</a>                                      // 19421
              (<a href="" ng-click="order('-name',false)">^</a>)</th>                                                  // 19422
            <th><a href="" ng-click="reverse=!reverse;order('phone', reverse)">Phone Number</a></th>                   // 19423
            <th><a href="" ng-click="reverse=!reverse;order('age',reverse)">Age</a></th>                               // 19424
          </tr>                                                                                                        // 19425
          <tr ng-repeat="friend in friends">                                                                           // 19426
            <td>{{friend.name}}</td>                                                                                   // 19427
            <td>{{friend.phone}}</td>                                                                                  // 19428
            <td>{{friend.age}}</td>                                                                                    // 19429
          </tr>                                                                                                        // 19430
        </table>                                                                                                       // 19431
      </div>                                                                                                           // 19432
    </file>                                                                                                            // 19433
                                                                                                                       // 19434
    <file name="script.js">                                                                                            // 19435
      angular.module('orderByExample', [])                                                                             // 19436
        .controller('ExampleController', ['$scope', '$filter', function($scope, $filter) {                             // 19437
          var orderBy = $filter('orderBy');                                                                            // 19438
          $scope.friends = [                                                                                           // 19439
            { name: 'John',    phone: '555-1212',    age: 10 },                                                        // 19440
            { name: 'Mary',    phone: '555-9876',    age: 19 },                                                        // 19441
            { name: 'Mike',    phone: '555-4321',    age: 21 },                                                        // 19442
            { name: 'Adam',    phone: '555-5678',    age: 35 },                                                        // 19443
            { name: 'Julie',   phone: '555-8765',    age: 29 }                                                         // 19444
          ];                                                                                                           // 19445
          $scope.order = function(predicate, reverse) {                                                                // 19446
            $scope.friends = orderBy($scope.friends, predicate, reverse);                                              // 19447
          };                                                                                                           // 19448
          $scope.order('-age',false);                                                                                  // 19449
        }]);                                                                                                           // 19450
    </file>                                                                                                            // 19451
</example>                                                                                                             // 19452
 */                                                                                                                    // 19453
orderByFilter.$inject = ['$parse'];                                                                                    // 19454
function orderByFilter($parse) {                                                                                       // 19455
  return function(array, sortPredicate, reverseOrder) {                                                                // 19456
                                                                                                                       // 19457
    if (!(isArrayLike(array))) return array;                                                                           // 19458
                                                                                                                       // 19459
    if (!isArray(sortPredicate)) { sortPredicate = [sortPredicate]; }                                                  // 19460
    if (sortPredicate.length === 0) { sortPredicate = ['+']; }                                                         // 19461
                                                                                                                       // 19462
    var predicates = processPredicates(sortPredicate, reverseOrder);                                                   // 19463
    // Add a predicate at the end that evaluates to the element index. This makes the                                  // 19464
    // sort stable as it works as a tie-breaker when all the input predicates cannot                                   // 19465
    // distinguish between two elements.                                                                               // 19466
    predicates.push({ get: function() { return {}; }, descending: reverseOrder ? -1 : 1});                             // 19467
                                                                                                                       // 19468
    // The next three lines are a version of a Swartzian Transform idiom from Perl                                     // 19469
    // (sometimes called the Decorate-Sort-Undecorate idiom)                                                           // 19470
    // See https://en.wikipedia.org/wiki/Schwartzian_transform                                                         // 19471
    var compareValues = Array.prototype.map.call(array, getComparisonObject);                                          // 19472
    compareValues.sort(doComparison);                                                                                  // 19473
    array = compareValues.map(function(item) { return item.value; });                                                  // 19474
                                                                                                                       // 19475
    return array;                                                                                                      // 19476
                                                                                                                       // 19477
    function getComparisonObject(value, index) {                                                                       // 19478
      return {                                                                                                         // 19479
        value: value,                                                                                                  // 19480
        predicateValues: predicates.map(function(predicate) {                                                          // 19481
          return getPredicateValue(predicate.get(value), index);                                                       // 19482
        })                                                                                                             // 19483
      };                                                                                                               // 19484
    }                                                                                                                  // 19485
                                                                                                                       // 19486
    function doComparison(v1, v2) {                                                                                    // 19487
      var result = 0;                                                                                                  // 19488
      for (var index=0, length = predicates.length; index < length; ++index) {                                         // 19489
        result = compare(v1.predicateValues[index], v2.predicateValues[index]) * predicates[index].descending;         // 19490
        if (result) break;                                                                                             // 19491
      }                                                                                                                // 19492
      return result;                                                                                                   // 19493
    }                                                                                                                  // 19494
  };                                                                                                                   // 19495
                                                                                                                       // 19496
  function processPredicates(sortPredicate, reverseOrder) {                                                            // 19497
    reverseOrder = reverseOrder ? -1 : 1;                                                                              // 19498
    return sortPredicate.map(function(predicate) {                                                                     // 19499
      var descending = 1, get = identity;                                                                              // 19500
                                                                                                                       // 19501
      if (isFunction(predicate)) {                                                                                     // 19502
        get = predicate;                                                                                               // 19503
      } else if (isString(predicate)) {                                                                                // 19504
        if ((predicate.charAt(0) == '+' || predicate.charAt(0) == '-')) {                                              // 19505
          descending = predicate.charAt(0) == '-' ? -1 : 1;                                                            // 19506
          predicate = predicate.substring(1);                                                                          // 19507
        }                                                                                                              // 19508
        if (predicate !== '') {                                                                                        // 19509
          get = $parse(predicate);                                                                                     // 19510
          if (get.constant) {                                                                                          // 19511
            var key = get();                                                                                           // 19512
            get = function(value) { return value[key]; };                                                              // 19513
          }                                                                                                            // 19514
        }                                                                                                              // 19515
      }                                                                                                                // 19516
      return { get: get, descending: descending * reverseOrder };                                                      // 19517
    });                                                                                                                // 19518
  }                                                                                                                    // 19519
                                                                                                                       // 19520
  function isPrimitive(value) {                                                                                        // 19521
    switch (typeof value) {                                                                                            // 19522
      case 'number': /* falls through */                                                                               // 19523
      case 'boolean': /* falls through */                                                                              // 19524
      case 'string':                                                                                                   // 19525
        return true;                                                                                                   // 19526
      default:                                                                                                         // 19527
        return false;                                                                                                  // 19528
    }                                                                                                                  // 19529
  }                                                                                                                    // 19530
                                                                                                                       // 19531
  function objectValue(value, index) {                                                                                 // 19532
    // If `valueOf` is a valid function use that                                                                       // 19533
    if (typeof value.valueOf === 'function') {                                                                         // 19534
      value = value.valueOf();                                                                                         // 19535
      if (isPrimitive(value)) return value;                                                                            // 19536
    }                                                                                                                  // 19537
    // If `toString` is a valid function and not the one from `Object.prototype` use that                              // 19538
    if (hasCustomToString(value)) {                                                                                    // 19539
      value = value.toString();                                                                                        // 19540
      if (isPrimitive(value)) return value;                                                                            // 19541
    }                                                                                                                  // 19542
    // We have a basic object so we use the position of the object in the collection                                   // 19543
    return index;                                                                                                      // 19544
  }                                                                                                                    // 19545
                                                                                                                       // 19546
  function getPredicateValue(value, index) {                                                                           // 19547
    var type = typeof value;                                                                                           // 19548
    if (value === null) {                                                                                              // 19549
      type = 'string';                                                                                                 // 19550
      value = 'null';                                                                                                  // 19551
    } else if (type === 'string') {                                                                                    // 19552
      value = value.toLowerCase();                                                                                     // 19553
    } else if (type === 'object') {                                                                                    // 19554
      value = objectValue(value, index);                                                                               // 19555
    }                                                                                                                  // 19556
    return { value: value, type: type };                                                                               // 19557
  }                                                                                                                    // 19558
                                                                                                                       // 19559
  function compare(v1, v2) {                                                                                           // 19560
    var result = 0;                                                                                                    // 19561
    if (v1.type === v2.type) {                                                                                         // 19562
      if (v1.value !== v2.value) {                                                                                     // 19563
        result = v1.value < v2.value ? -1 : 1;                                                                         // 19564
      }                                                                                                                // 19565
    } else {                                                                                                           // 19566
      result = v1.type < v2.type ? -1 : 1;                                                                             // 19567
    }                                                                                                                  // 19568
    return result;                                                                                                     // 19569
  }                                                                                                                    // 19570
}                                                                                                                      // 19571
                                                                                                                       // 19572
function ngDirective(directive) {                                                                                      // 19573
  if (isFunction(directive)) {                                                                                         // 19574
    directive = {                                                                                                      // 19575
      link: directive                                                                                                  // 19576
    };                                                                                                                 // 19577
  }                                                                                                                    // 19578
  directive.restrict = directive.restrict || 'AC';                                                                     // 19579
  return valueFn(directive);                                                                                           // 19580
}                                                                                                                      // 19581
                                                                                                                       // 19582
/**                                                                                                                    // 19583
 * @ngdoc directive                                                                                                    // 19584
 * @name a                                                                                                             // 19585
 * @restrict E                                                                                                         // 19586
 *                                                                                                                     // 19587
 * @description                                                                                                        // 19588
 * Modifies the default behavior of the html A tag so that the default action is prevented when                        // 19589
 * the href attribute is empty.                                                                                        // 19590
 *                                                                                                                     // 19591
 * This change permits the easy creation of action links with the `ngClick` directive                                  // 19592
 * without changing the location or causing page reloads, e.g.:                                                        // 19593
 * `<a href="" ng-click="list.addItem()">Add Item</a>`                                                                 // 19594
 */                                                                                                                    // 19595
var htmlAnchorDirective = valueFn({                                                                                    // 19596
  restrict: 'E',                                                                                                       // 19597
  compile: function(element, attr) {                                                                                   // 19598
    if (!attr.href && !attr.xlinkHref) {                                                                               // 19599
      return function(scope, element) {                                                                                // 19600
        // If the linked element is not an anchor tag anymore, do nothing                                              // 19601
        if (element[0].nodeName.toLowerCase() !== 'a') return;                                                         // 19602
                                                                                                                       // 19603
        // SVGAElement does not use the href attribute, but rather the 'xlinkHref' attribute.                          // 19604
        var href = toString.call(element.prop('href')) === '[object SVGAnimatedString]' ?                              // 19605
                   'xlink:href' : 'href';                                                                              // 19606
        element.on('click', function(event) {                                                                          // 19607
          // if we have no href url, then don't navigate anywhere.                                                     // 19608
          if (!element.attr(href)) {                                                                                   // 19609
            event.preventDefault();                                                                                    // 19610
          }                                                                                                            // 19611
        });                                                                                                            // 19612
      };                                                                                                               // 19613
    }                                                                                                                  // 19614
  }                                                                                                                    // 19615
});                                                                                                                    // 19616
                                                                                                                       // 19617
/**                                                                                                                    // 19618
 * @ngdoc directive                                                                                                    // 19619
 * @name ngHref                                                                                                        // 19620
 * @restrict A                                                                                                         // 19621
 * @priority 99                                                                                                        // 19622
 *                                                                                                                     // 19623
 * @description                                                                                                        // 19624
 * Using Angular markup like `{{hash}}` in an href attribute will                                                      // 19625
 * make the link go to the wrong URL if the user clicks it before                                                      // 19626
 * Angular has a chance to replace the `{{hash}}` markup with its                                                      // 19627
 * value. Until Angular replaces the markup the link will be broken                                                    // 19628
 * and will most likely return a 404 error. The `ngHref` directive                                                     // 19629
 * solves this problem.                                                                                                // 19630
 *                                                                                                                     // 19631
 * The wrong way to write it:                                                                                          // 19632
 * ```html                                                                                                             // 19633
 * <a href="http://www.gravatar.com/avatar/{{hash}}">link1</a>                                                         // 19634
 * ```                                                                                                                 // 19635
 *                                                                                                                     // 19636
 * The correct way to write it:                                                                                        // 19637
 * ```html                                                                                                             // 19638
 * <a ng-href="http://www.gravatar.com/avatar/{{hash}}">link1</a>                                                      // 19639
 * ```                                                                                                                 // 19640
 *                                                                                                                     // 19641
 * @element A                                                                                                          // 19642
 * @param {template} ngHref any string which can contain `{{}}` markup.                                                // 19643
 *                                                                                                                     // 19644
 * @example                                                                                                            // 19645
 * This example shows various combinations of `href`, `ng-href` and `ng-click` attributes                              // 19646
 * in links and their different behaviors:                                                                             // 19647
    <example>                                                                                                          // 19648
      <file name="index.html">                                                                                         // 19649
        <input ng-model="value" /><br />                                                                               // 19650
        <a id="link-1" href ng-click="value = 1">link 1</a> (link, don't reload)<br />                                 // 19651
        <a id="link-2" href="" ng-click="value = 2">link 2</a> (link, don't reload)<br />                              // 19652
        <a id="link-3" ng-href="/{{'123'}}">link 3</a> (link, reload!)<br />                                           // 19653
        <a id="link-4" href="" name="xx" ng-click="value = 4">anchor</a> (link, don't reload)<br />                    // 19654
        <a id="link-5" name="xxx" ng-click="value = 5">anchor</a> (no link)<br />                                      // 19655
        <a id="link-6" ng-href="{{value}}">link</a> (link, change location)                                            // 19656
      </file>                                                                                                          // 19657
      <file name="protractor.js" type="protractor">                                                                    // 19658
        it('should execute ng-click but not reload when href without value', function() {                              // 19659
          element(by.id('link-1')).click();                                                                            // 19660
          expect(element(by.model('value')).getAttribute('value')).toEqual('1');                                       // 19661
          expect(element(by.id('link-1')).getAttribute('href')).toBe('');                                              // 19662
        });                                                                                                            // 19663
                                                                                                                       // 19664
        it('should execute ng-click but not reload when href empty string', function() {                               // 19665
          element(by.id('link-2')).click();                                                                            // 19666
          expect(element(by.model('value')).getAttribute('value')).toEqual('2');                                       // 19667
          expect(element(by.id('link-2')).getAttribute('href')).toBe('');                                              // 19668
        });                                                                                                            // 19669
                                                                                                                       // 19670
        it('should execute ng-click and change url when ng-href specified', function() {                               // 19671
          expect(element(by.id('link-3')).getAttribute('href')).toMatch(/\/123$/);                                     // 19672
                                                                                                                       // 19673
          element(by.id('link-3')).click();                                                                            // 19674
                                                                                                                       // 19675
          // At this point, we navigate away from an Angular page, so we need                                          // 19676
          // to use browser.driver to get the base webdriver.                                                          // 19677
                                                                                                                       // 19678
          browser.wait(function() {                                                                                    // 19679
            return browser.driver.getCurrentUrl().then(function(url) {                                                 // 19680
              return url.match(/\/123$/);                                                                              // 19681
            });                                                                                                        // 19682
          }, 5000, 'page should navigate to /123');                                                                    // 19683
        });                                                                                                            // 19684
                                                                                                                       // 19685
        it('should execute ng-click but not reload when href empty string and name specified', function() {            // 19686
          element(by.id('link-4')).click();                                                                            // 19687
          expect(element(by.model('value')).getAttribute('value')).toEqual('4');                                       // 19688
          expect(element(by.id('link-4')).getAttribute('href')).toBe('');                                              // 19689
        });                                                                                                            // 19690
                                                                                                                       // 19691
        it('should execute ng-click but not reload when no href but name specified', function() {                      // 19692
          element(by.id('link-5')).click();                                                                            // 19693
          expect(element(by.model('value')).getAttribute('value')).toEqual('5');                                       // 19694
          expect(element(by.id('link-5')).getAttribute('href')).toBe(null);                                            // 19695
        });                                                                                                            // 19696
                                                                                                                       // 19697
        it('should only change url when only ng-href', function() {                                                    // 19698
          element(by.model('value')).clear();                                                                          // 19699
          element(by.model('value')).sendKeys('6');                                                                    // 19700
          expect(element(by.id('link-6')).getAttribute('href')).toMatch(/\/6$/);                                       // 19701
                                                                                                                       // 19702
          element(by.id('link-6')).click();                                                                            // 19703
                                                                                                                       // 19704
          // At this point, we navigate away from an Angular page, so we need                                          // 19705
          // to use browser.driver to get the base webdriver.                                                          // 19706
          browser.wait(function() {                                                                                    // 19707
            return browser.driver.getCurrentUrl().then(function(url) {                                                 // 19708
              return url.match(/\/6$/);                                                                                // 19709
            });                                                                                                        // 19710
          }, 5000, 'page should navigate to /6');                                                                      // 19711
        });                                                                                                            // 19712
      </file>                                                                                                          // 19713
    </example>                                                                                                         // 19714
 */                                                                                                                    // 19715
                                                                                                                       // 19716
/**                                                                                                                    // 19717
 * @ngdoc directive                                                                                                    // 19718
 * @name ngSrc                                                                                                         // 19719
 * @restrict A                                                                                                         // 19720
 * @priority 99                                                                                                        // 19721
 *                                                                                                                     // 19722
 * @description                                                                                                        // 19723
 * Using Angular markup like `{{hash}}` in a `src` attribute doesn't                                                   // 19724
 * work right: The browser will fetch from the URL with the literal                                                    // 19725
 * text `{{hash}}` until Angular replaces the expression inside                                                        // 19726
 * `{{hash}}`. The `ngSrc` directive solves this problem.                                                              // 19727
 *                                                                                                                     // 19728
 * The buggy way to write it:                                                                                          // 19729
 * ```html                                                                                                             // 19730
 * <img src="http://www.gravatar.com/avatar/{{hash}}" alt="Description"/>                                              // 19731
 * ```                                                                                                                 // 19732
 *                                                                                                                     // 19733
 * The correct way to write it:                                                                                        // 19734
 * ```html                                                                                                             // 19735
 * <img ng-src="http://www.gravatar.com/avatar/{{hash}}" alt="Description" />                                          // 19736
 * ```                                                                                                                 // 19737
 *                                                                                                                     // 19738
 * @element IMG                                                                                                        // 19739
 * @param {template} ngSrc any string which can contain `{{}}` markup.                                                 // 19740
 */                                                                                                                    // 19741
                                                                                                                       // 19742
/**                                                                                                                    // 19743
 * @ngdoc directive                                                                                                    // 19744
 * @name ngSrcset                                                                                                      // 19745
 * @restrict A                                                                                                         // 19746
 * @priority 99                                                                                                        // 19747
 *                                                                                                                     // 19748
 * @description                                                                                                        // 19749
 * Using Angular markup like `{{hash}}` in a `srcset` attribute doesn't                                                // 19750
 * work right: The browser will fetch from the URL with the literal                                                    // 19751
 * text `{{hash}}` until Angular replaces the expression inside                                                        // 19752
 * `{{hash}}`. The `ngSrcset` directive solves this problem.                                                           // 19753
 *                                                                                                                     // 19754
 * The buggy way to write it:                                                                                          // 19755
 * ```html                                                                                                             // 19756
 * <img srcset="http://www.gravatar.com/avatar/{{hash}} 2x" alt="Description"/>                                        // 19757
 * ```                                                                                                                 // 19758
 *                                                                                                                     // 19759
 * The correct way to write it:                                                                                        // 19760
 * ```html                                                                                                             // 19761
 * <img ng-srcset="http://www.gravatar.com/avatar/{{hash}} 2x" alt="Description" />                                    // 19762
 * ```                                                                                                                 // 19763
 *                                                                                                                     // 19764
 * @element IMG                                                                                                        // 19765
 * @param {template} ngSrcset any string which can contain `{{}}` markup.                                              // 19766
 */                                                                                                                    // 19767
                                                                                                                       // 19768
/**                                                                                                                    // 19769
 * @ngdoc directive                                                                                                    // 19770
 * @name ngDisabled                                                                                                    // 19771
 * @restrict A                                                                                                         // 19772
 * @priority 100                                                                                                       // 19773
 *                                                                                                                     // 19774
 * @description                                                                                                        // 19775
 *                                                                                                                     // 19776
 * This directive sets the `disabled` attribute on the element if the                                                  // 19777
 * {@link guide/expression expression} inside `ngDisabled` evaluates to truthy.                                        // 19778
 *                                                                                                                     // 19779
 * A special directive is necessary because we cannot use interpolation inside the `disabled`                          // 19780
 * attribute.  The following example would make the button enabled on Chrome/Firefox                                   // 19781
 * but not on older IEs:                                                                                               // 19782
 *                                                                                                                     // 19783
 * ```html                                                                                                             // 19784
 * <!-- See below for an example of ng-disabled being used correctly -->                                               // 19785
 * <div ng-init="isDisabled = false">                                                                                  // 19786
 *  <button disabled="{{isDisabled}}">Disabled</button>                                                                // 19787
 * </div>                                                                                                              // 19788
 * ```                                                                                                                 // 19789
 *                                                                                                                     // 19790
 * This is because the HTML specification does not require browsers to preserve the values of                          // 19791
 * boolean attributes such as `disabled` (Their presence means true and their absence means false.)                    // 19792
 * If we put an Angular interpolation expression into such an attribute then the                                       // 19793
 * binding information would be lost when the browser removes the attribute.                                           // 19794
 *                                                                                                                     // 19795
 * @example                                                                                                            // 19796
    <example>                                                                                                          // 19797
      <file name="index.html">                                                                                         // 19798
        <label>Click me to toggle: <input type="checkbox" ng-model="checked"></label><br/>                             // 19799
        <button ng-model="button" ng-disabled="checked">Button</button>                                                // 19800
      </file>                                                                                                          // 19801
      <file name="protractor.js" type="protractor">                                                                    // 19802
        it('should toggle button', function() {                                                                        // 19803
          expect(element(by.css('button')).getAttribute('disabled')).toBeFalsy();                                      // 19804
          element(by.model('checked')).click();                                                                        // 19805
          expect(element(by.css('button')).getAttribute('disabled')).toBeTruthy();                                     // 19806
        });                                                                                                            // 19807
      </file>                                                                                                          // 19808
    </example>                                                                                                         // 19809
 *                                                                                                                     // 19810
 * @element INPUT                                                                                                      // 19811
 * @param {expression} ngDisabled If the {@link guide/expression expression} is truthy,                                // 19812
 *     then the `disabled` attribute will be set on the element                                                        // 19813
 */                                                                                                                    // 19814
                                                                                                                       // 19815
                                                                                                                       // 19816
/**                                                                                                                    // 19817
 * @ngdoc directive                                                                                                    // 19818
 * @name ngChecked                                                                                                     // 19819
 * @restrict A                                                                                                         // 19820
 * @priority 100                                                                                                       // 19821
 *                                                                                                                     // 19822
 * @description                                                                                                        // 19823
 * Sets the `checked` attribute on the element, if the expression inside `ngChecked` is truthy.                        // 19824
 *                                                                                                                     // 19825
 * Note that this directive should not be used together with {@link ngModel `ngModel`},                                // 19826
 * as this can lead to unexpected behavior.                                                                            // 19827
 *                                                                                                                     // 19828
 * ### Why do we need `ngChecked`?                                                                                     // 19829
 *                                                                                                                     // 19830
 * The HTML specification does not require browsers to preserve the values of boolean attributes                       // 19831
 * such as checked. (Their presence means true and their absence means false.)                                         // 19832
 * If we put an Angular interpolation expression into such an attribute then the                                       // 19833
 * binding information would be lost when the browser removes the attribute.                                           // 19834
 * The `ngChecked` directive solves this problem for the `checked` attribute.                                          // 19835
 * This complementary directive is not removed by the browser and so provides                                          // 19836
 * a permanent reliable place to store the binding information.                                                        // 19837
 * @example                                                                                                            // 19838
    <example>                                                                                                          // 19839
      <file name="index.html">                                                                                         // 19840
        <label>Check me to check both: <input type="checkbox" ng-model="master"></label><br/>                          // 19841
        <input id="checkSlave" type="checkbox" ng-checked="master" aria-label="Slave input">                           // 19842
      </file>                                                                                                          // 19843
      <file name="protractor.js" type="protractor">                                                                    // 19844
        it('should check both checkBoxes', function() {                                                                // 19845
          expect(element(by.id('checkSlave')).getAttribute('checked')).toBeFalsy();                                    // 19846
          element(by.model('master')).click();                                                                         // 19847
          expect(element(by.id('checkSlave')).getAttribute('checked')).toBeTruthy();                                   // 19848
        });                                                                                                            // 19849
      </file>                                                                                                          // 19850
    </example>                                                                                                         // 19851
 *                                                                                                                     // 19852
 * @element INPUT                                                                                                      // 19853
 * @param {expression} ngChecked If the {@link guide/expression expression} is truthy,                                 // 19854
 *     then the `checked` attribute will be set on the element                                                         // 19855
 */                                                                                                                    // 19856
                                                                                                                       // 19857
                                                                                                                       // 19858
/**                                                                                                                    // 19859
 * @ngdoc directive                                                                                                    // 19860
 * @name ngReadonly                                                                                                    // 19861
 * @restrict A                                                                                                         // 19862
 * @priority 100                                                                                                       // 19863
 *                                                                                                                     // 19864
 * @description                                                                                                        // 19865
 * The HTML specification does not require browsers to preserve the values of boolean attributes                       // 19866
 * such as readonly. (Their presence means true and their absence means false.)                                        // 19867
 * If we put an Angular interpolation expression into such an attribute then the                                       // 19868
 * binding information would be lost when the browser removes the attribute.                                           // 19869
 * The `ngReadonly` directive solves this problem for the `readonly` attribute.                                        // 19870
 * This complementary directive is not removed by the browser and so provides                                          // 19871
 * a permanent reliable place to store the binding information.                                                        // 19872
 * @example                                                                                                            // 19873
    <example>                                                                                                          // 19874
      <file name="index.html">                                                                                         // 19875
        <label>Check me to make text readonly: <input type="checkbox" ng-model="checked"></label><br/>                 // 19876
        <input type="text" ng-readonly="checked" value="I'm Angular" aria-label="Readonly field" />                    // 19877
      </file>                                                                                                          // 19878
      <file name="protractor.js" type="protractor">                                                                    // 19879
        it('should toggle readonly attr', function() {                                                                 // 19880
          expect(element(by.css('[type="text"]')).getAttribute('readonly')).toBeFalsy();                               // 19881
          element(by.model('checked')).click();                                                                        // 19882
          expect(element(by.css('[type="text"]')).getAttribute('readonly')).toBeTruthy();                              // 19883
        });                                                                                                            // 19884
      </file>                                                                                                          // 19885
    </example>                                                                                                         // 19886
 *                                                                                                                     // 19887
 * @element INPUT                                                                                                      // 19888
 * @param {expression} ngReadonly If the {@link guide/expression expression} is truthy,                                // 19889
 *     then special attribute "readonly" will be set on the element                                                    // 19890
 */                                                                                                                    // 19891
                                                                                                                       // 19892
                                                                                                                       // 19893
/**                                                                                                                    // 19894
 * @ngdoc directive                                                                                                    // 19895
 * @name ngSelected                                                                                                    // 19896
 * @restrict A                                                                                                         // 19897
 * @priority 100                                                                                                       // 19898
 *                                                                                                                     // 19899
 * @description                                                                                                        // 19900
 * The HTML specification does not require browsers to preserve the values of boolean attributes                       // 19901
 * such as selected. (Their presence means true and their absence means false.)                                        // 19902
 * If we put an Angular interpolation expression into such an attribute then the                                       // 19903
 * binding information would be lost when the browser removes the attribute.                                           // 19904
 * The `ngSelected` directive solves this problem for the `selected` attribute.                                        // 19905
 * This complementary directive is not removed by the browser and so provides                                          // 19906
 * a permanent reliable place to store the binding information.                                                        // 19907
 *                                                                                                                     // 19908
 * @example                                                                                                            // 19909
    <example>                                                                                                          // 19910
      <file name="index.html">                                                                                         // 19911
        <label>Check me to select: <input type="checkbox" ng-model="selected"></label><br/>                            // 19912
        <select aria-label="ngSelected demo">                                                                          // 19913
          <option>Hello!</option>                                                                                      // 19914
          <option id="greet" ng-selected="selected">Greetings!</option>                                                // 19915
        </select>                                                                                                      // 19916
      </file>                                                                                                          // 19917
      <file name="protractor.js" type="protractor">                                                                    // 19918
        it('should select Greetings!', function() {                                                                    // 19919
          expect(element(by.id('greet')).getAttribute('selected')).toBeFalsy();                                        // 19920
          element(by.model('selected')).click();                                                                       // 19921
          expect(element(by.id('greet')).getAttribute('selected')).toBeTruthy();                                       // 19922
        });                                                                                                            // 19923
      </file>                                                                                                          // 19924
    </example>                                                                                                         // 19925
 *                                                                                                                     // 19926
 * @element OPTION                                                                                                     // 19927
 * @param {expression} ngSelected If the {@link guide/expression expression} is truthy,                                // 19928
 *     then special attribute "selected" will be set on the element                                                    // 19929
 */                                                                                                                    // 19930
                                                                                                                       // 19931
/**                                                                                                                    // 19932
 * @ngdoc directive                                                                                                    // 19933
 * @name ngOpen                                                                                                        // 19934
 * @restrict A                                                                                                         // 19935
 * @priority 100                                                                                                       // 19936
 *                                                                                                                     // 19937
 * @description                                                                                                        // 19938
 * The HTML specification does not require browsers to preserve the values of boolean attributes                       // 19939
 * such as open. (Their presence means true and their absence means false.)                                            // 19940
 * If we put an Angular interpolation expression into such an attribute then the                                       // 19941
 * binding information would be lost when the browser removes the attribute.                                           // 19942
 * The `ngOpen` directive solves this problem for the `open` attribute.                                                // 19943
 * This complementary directive is not removed by the browser and so provides                                          // 19944
 * a permanent reliable place to store the binding information.                                                        // 19945
 * @example                                                                                                            // 19946
     <example>                                                                                                         // 19947
       <file name="index.html">                                                                                        // 19948
         <label>Check me check multiple: <input type="checkbox" ng-model="open"></label><br/>                          // 19949
         <details id="details" ng-open="open">                                                                         // 19950
            <summary>Show/Hide me</summary>                                                                            // 19951
         </details>                                                                                                    // 19952
       </file>                                                                                                         // 19953
       <file name="protractor.js" type="protractor">                                                                   // 19954
         it('should toggle open', function() {                                                                         // 19955
           expect(element(by.id('details')).getAttribute('open')).toBeFalsy();                                         // 19956
           element(by.model('open')).click();                                                                          // 19957
           expect(element(by.id('details')).getAttribute('open')).toBeTruthy();                                        // 19958
         });                                                                                                           // 19959
       </file>                                                                                                         // 19960
     </example>                                                                                                        // 19961
 *                                                                                                                     // 19962
 * @element DETAILS                                                                                                    // 19963
 * @param {expression} ngOpen If the {@link guide/expression expression} is truthy,                                    // 19964
 *     then special attribute "open" will be set on the element                                                        // 19965
 */                                                                                                                    // 19966
                                                                                                                       // 19967
var ngAttributeAliasDirectives = {};                                                                                   // 19968
                                                                                                                       // 19969
// boolean attrs are evaluated                                                                                         // 19970
forEach(BOOLEAN_ATTR, function(propName, attrName) {                                                                   // 19971
  // binding to multiple is not supported                                                                              // 19972
  if (propName == "multiple") return;                                                                                  // 19973
                                                                                                                       // 19974
  function defaultLinkFn(scope, element, attr) {                                                                       // 19975
    scope.$watch(attr[normalized], function ngBooleanAttrWatchAction(value) {                                          // 19976
      attr.$set(attrName, !!value);                                                                                    // 19977
    });                                                                                                                // 19978
  }                                                                                                                    // 19979
                                                                                                                       // 19980
  var normalized = directiveNormalize('ng-' + attrName);                                                               // 19981
  var linkFn = defaultLinkFn;                                                                                          // 19982
                                                                                                                       // 19983
  if (propName === 'checked') {                                                                                        // 19984
    linkFn = function(scope, element, attr) {                                                                          // 19985
      // ensuring ngChecked doesn't interfere with ngModel when both are set on the same input                         // 19986
      if (attr.ngModel !== attr[normalized]) {                                                                         // 19987
        defaultLinkFn(scope, element, attr);                                                                           // 19988
      }                                                                                                                // 19989
    };                                                                                                                 // 19990
  }                                                                                                                    // 19991
                                                                                                                       // 19992
  ngAttributeAliasDirectives[normalized] = function() {                                                                // 19993
    return {                                                                                                           // 19994
      restrict: 'A',                                                                                                   // 19995
      priority: 100,                                                                                                   // 19996
      link: linkFn                                                                                                     // 19997
    };                                                                                                                 // 19998
  };                                                                                                                   // 19999
});                                                                                                                    // 20000
                                                                                                                       // 20001
// aliased input attrs are evaluated                                                                                   // 20002
forEach(ALIASED_ATTR, function(htmlAttr, ngAttr) {                                                                     // 20003
  ngAttributeAliasDirectives[ngAttr] = function() {                                                                    // 20004
    return {                                                                                                           // 20005
      priority: 100,                                                                                                   // 20006
      link: function(scope, element, attr) {                                                                           // 20007
        //special case ngPattern when a literal regular expression value                                               // 20008
        //is used as the expression (this way we don't have to watch anything).                                        // 20009
        if (ngAttr === "ngPattern" && attr.ngPattern.charAt(0) == "/") {                                               // 20010
          var match = attr.ngPattern.match(REGEX_STRING_REGEXP);                                                       // 20011
          if (match) {                                                                                                 // 20012
            attr.$set("ngPattern", new RegExp(match[1], match[2]));                                                    // 20013
            return;                                                                                                    // 20014
          }                                                                                                            // 20015
        }                                                                                                              // 20016
                                                                                                                       // 20017
        scope.$watch(attr[ngAttr], function ngAttrAliasWatchAction(value) {                                            // 20018
          attr.$set(ngAttr, value);                                                                                    // 20019
        });                                                                                                            // 20020
      }                                                                                                                // 20021
    };                                                                                                                 // 20022
  };                                                                                                                   // 20023
});                                                                                                                    // 20024
                                                                                                                       // 20025
// ng-src, ng-srcset, ng-href are interpolated                                                                         // 20026
forEach(['src', 'srcset', 'href'], function(attrName) {                                                                // 20027
  var normalized = directiveNormalize('ng-' + attrName);                                                               // 20028
  ngAttributeAliasDirectives[normalized] = function() {                                                                // 20029
    return {                                                                                                           // 20030
      priority: 99, // it needs to run after the attributes are interpolated                                           // 20031
      link: function(scope, element, attr) {                                                                           // 20032
        var propName = attrName,                                                                                       // 20033
            name = attrName;                                                                                           // 20034
                                                                                                                       // 20035
        if (attrName === 'href' &&                                                                                     // 20036
            toString.call(element.prop('href')) === '[object SVGAnimatedString]') {                                    // 20037
          name = 'xlinkHref';                                                                                          // 20038
          attr.$attr[name] = 'xlink:href';                                                                             // 20039
          propName = null;                                                                                             // 20040
        }                                                                                                              // 20041
                                                                                                                       // 20042
        attr.$observe(normalized, function(value) {                                                                    // 20043
          if (!value) {                                                                                                // 20044
            if (attrName === 'href') {                                                                                 // 20045
              attr.$set(name, null);                                                                                   // 20046
            }                                                                                                          // 20047
            return;                                                                                                    // 20048
          }                                                                                                            // 20049
                                                                                                                       // 20050
          attr.$set(name, value);                                                                                      // 20051
                                                                                                                       // 20052
          // on IE, if "ng:src" directive declaration is used and "src" attribute doesn't exist                        // 20053
          // then calling element.setAttribute('src', 'foo') doesn't do anything, so we need                           // 20054
          // to set the property as well to achieve the desired effect.                                                // 20055
          // we use attr[attrName] value since $set can sanitize the url.                                              // 20056
          if (msie && propName) element.prop(propName, attr[name]);                                                    // 20057
        });                                                                                                            // 20058
      }                                                                                                                // 20059
    };                                                                                                                 // 20060
  };                                                                                                                   // 20061
});                                                                                                                    // 20062
                                                                                                                       // 20063
/* global -nullFormCtrl, -SUBMITTED_CLASS, addSetValidityMethod: true                                                  // 20064
 */                                                                                                                    // 20065
var nullFormCtrl = {                                                                                                   // 20066
  $addControl: noop,                                                                                                   // 20067
  $$renameControl: nullFormRenameControl,                                                                              // 20068
  $removeControl: noop,                                                                                                // 20069
  $setValidity: noop,                                                                                                  // 20070
  $setDirty: noop,                                                                                                     // 20071
  $setPristine: noop,                                                                                                  // 20072
  $setSubmitted: noop                                                                                                  // 20073
},                                                                                                                     // 20074
SUBMITTED_CLASS = 'ng-submitted';                                                                                      // 20075
                                                                                                                       // 20076
function nullFormRenameControl(control, name) {                                                                        // 20077
  control.$name = name;                                                                                                // 20078
}                                                                                                                      // 20079
                                                                                                                       // 20080
/**                                                                                                                    // 20081
 * @ngdoc type                                                                                                         // 20082
 * @name form.FormController                                                                                           // 20083
 *                                                                                                                     // 20084
 * @property {boolean} $pristine True if user has not interacted with the form yet.                                    // 20085
 * @property {boolean} $dirty True if user has already interacted with the form.                                       // 20086
 * @property {boolean} $valid True if all of the containing forms and controls are valid.                              // 20087
 * @property {boolean} $invalid True if at least one containing control or form is invalid.                            // 20088
 * @property {boolean} $pending True if at least one containing control or form is pending.                            // 20089
 * @property {boolean} $submitted True if user has submitted the form even if its invalid.                             // 20090
 *                                                                                                                     // 20091
 * @property {Object} $error Is an object hash, containing references to controls or                                   // 20092
 *  forms with failing validators, where:                                                                              // 20093
 *                                                                                                                     // 20094
 *  - keys are validation tokens (error names),                                                                        // 20095
 *  - values are arrays of controls or forms that have a failing validator for given error name.                       // 20096
 *                                                                                                                     // 20097
 *  Built-in validation tokens:                                                                                        // 20098
 *                                                                                                                     // 20099
 *  - `email`                                                                                                          // 20100
 *  - `max`                                                                                                            // 20101
 *  - `maxlength`                                                                                                      // 20102
 *  - `min`                                                                                                            // 20103
 *  - `minlength`                                                                                                      // 20104
 *  - `number`                                                                                                         // 20105
 *  - `pattern`                                                                                                        // 20106
 *  - `required`                                                                                                       // 20107
 *  - `url`                                                                                                            // 20108
 *  - `date`                                                                                                           // 20109
 *  - `datetimelocal`                                                                                                  // 20110
 *  - `time`                                                                                                           // 20111
 *  - `week`                                                                                                           // 20112
 *  - `month`                                                                                                          // 20113
 *                                                                                                                     // 20114
 * @description                                                                                                        // 20115
 * `FormController` keeps track of all its controls and nested forms as well as the state of them,                     // 20116
 * such as being valid/invalid or dirty/pristine.                                                                      // 20117
 *                                                                                                                     // 20118
 * Each {@link ng.directive:form form} directive creates an instance                                                   // 20119
 * of `FormController`.                                                                                                // 20120
 *                                                                                                                     // 20121
 */                                                                                                                    // 20122
//asks for $scope to fool the BC controller module                                                                     // 20123
FormController.$inject = ['$element', '$attrs', '$scope', '$animate', '$interpolate'];                                 // 20124
function FormController(element, attrs, $scope, $animate, $interpolate) {                                              // 20125
  var form = this,                                                                                                     // 20126
      controls = [];                                                                                                   // 20127
                                                                                                                       // 20128
  // init state                                                                                                        // 20129
  form.$error = {};                                                                                                    // 20130
  form.$$success = {};                                                                                                 // 20131
  form.$pending = undefined;                                                                                           // 20132
  form.$name = $interpolate(attrs.name || attrs.ngForm || '')($scope);                                                 // 20133
  form.$dirty = false;                                                                                                 // 20134
  form.$pristine = true;                                                                                               // 20135
  form.$valid = true;                                                                                                  // 20136
  form.$invalid = false;                                                                                               // 20137
  form.$submitted = false;                                                                                             // 20138
  form.$$parentForm = nullFormCtrl;                                                                                    // 20139
                                                                                                                       // 20140
  /**                                                                                                                  // 20141
   * @ngdoc method                                                                                                     // 20142
   * @name form.FormController#$rollbackViewValue                                                                      // 20143
   *                                                                                                                   // 20144
   * @description                                                                                                      // 20145
   * Rollback all form controls pending updates to the `$modelValue`.                                                  // 20146
   *                                                                                                                   // 20147
   * Updates may be pending by a debounced event or because the input is waiting for a some future                     // 20148
   * event defined in `ng-model-options`. This method is typically needed by the reset button of                       // 20149
   * a form that uses `ng-model-options` to pend updates.                                                              // 20150
   */                                                                                                                  // 20151
  form.$rollbackViewValue = function() {                                                                               // 20152
    forEach(controls, function(control) {                                                                              // 20153
      control.$rollbackViewValue();                                                                                    // 20154
    });                                                                                                                // 20155
  };                                                                                                                   // 20156
                                                                                                                       // 20157
  /**                                                                                                                  // 20158
   * @ngdoc method                                                                                                     // 20159
   * @name form.FormController#$commitViewValue                                                                        // 20160
   *                                                                                                                   // 20161
   * @description                                                                                                      // 20162
   * Commit all form controls pending updates to the `$modelValue`.                                                    // 20163
   *                                                                                                                   // 20164
   * Updates may be pending by a debounced event or because the input is waiting for a some future                     // 20165
   * event defined in `ng-model-options`. This method is rarely needed as `NgModelController`                          // 20166
   * usually handles calling this in response to input events.                                                         // 20167
   */                                                                                                                  // 20168
  form.$commitViewValue = function() {                                                                                 // 20169
    forEach(controls, function(control) {                                                                              // 20170
      control.$commitViewValue();                                                                                      // 20171
    });                                                                                                                // 20172
  };                                                                                                                   // 20173
                                                                                                                       // 20174
  /**                                                                                                                  // 20175
   * @ngdoc method                                                                                                     // 20176
   * @name form.FormController#$addControl                                                                             // 20177
   * @param {object} control control object, either a {@link form.FormController} or an                                // 20178
   * {@link ngModel.NgModelController}                                                                                 // 20179
   *                                                                                                                   // 20180
   * @description                                                                                                      // 20181
   * Register a control with the form. Input elements using ngModelController do this automatically                    // 20182
   * when they are linked.                                                                                             // 20183
   *                                                                                                                   // 20184
   * Note that the current state of the control will not be reflected on the new parent form. This                     // 20185
   * is not an issue with normal use, as freshly compiled and linked controls are in a `$pristine`                     // 20186
   * state.                                                                                                            // 20187
   *                                                                                                                   // 20188
   * However, if the method is used programmatically, for example by adding dynamically created controls,              // 20189
   * or controls that have been previously removed without destroying their corresponding DOM element,                 // 20190
   * it's the developers responsiblity to make sure the current state propagates to the parent form.                   // 20191
   *                                                                                                                   // 20192
   * For example, if an input control is added that is already `$dirty` and has `$error` properties,                   // 20193
   * calling `$setDirty()` and `$validate()` afterwards will propagate the state to the parent form.                   // 20194
   */                                                                                                                  // 20195
  form.$addControl = function(control) {                                                                               // 20196
    // Breaking change - before, inputs whose name was "hasOwnProperty" were quietly ignored                           // 20197
    // and not added to the scope.  Now we throw an error.                                                             // 20198
    assertNotHasOwnProperty(control.$name, 'input');                                                                   // 20199
    controls.push(control);                                                                                            // 20200
                                                                                                                       // 20201
    if (control.$name) {                                                                                               // 20202
      form[control.$name] = control;                                                                                   // 20203
    }                                                                                                                  // 20204
                                                                                                                       // 20205
    control.$$parentForm = form;                                                                                       // 20206
  };                                                                                                                   // 20207
                                                                                                                       // 20208
  // Private API: rename a form control                                                                                // 20209
  form.$$renameControl = function(control, newName) {                                                                  // 20210
    var oldName = control.$name;                                                                                       // 20211
                                                                                                                       // 20212
    if (form[oldName] === control) {                                                                                   // 20213
      delete form[oldName];                                                                                            // 20214
    }                                                                                                                  // 20215
    form[newName] = control;                                                                                           // 20216
    control.$name = newName;                                                                                           // 20217
  };                                                                                                                   // 20218
                                                                                                                       // 20219
  /**                                                                                                                  // 20220
   * @ngdoc method                                                                                                     // 20221
   * @name form.FormController#$removeControl                                                                          // 20222
   * @param {object} control control object, either a {@link form.FormController} or an                                // 20223
   * {@link ngModel.NgModelController}                                                                                 // 20224
   *                                                                                                                   // 20225
   * @description                                                                                                      // 20226
   * Deregister a control from the form.                                                                               // 20227
   *                                                                                                                   // 20228
   * Input elements using ngModelController do this automatically when they are destroyed.                             // 20229
   *                                                                                                                   // 20230
   * Note that only the removed control's validation state (`$errors`etc.) will be removed from the                    // 20231
   * form. `$dirty`, `$submitted` states will not be changed, because the expected behavior can be                     // 20232
   * different from case to case. For example, removing the only `$dirty` control from a form may or                   // 20233
   * may not mean that the form is still `$dirty`.                                                                     // 20234
   */                                                                                                                  // 20235
  form.$removeControl = function(control) {                                                                            // 20236
    if (control.$name && form[control.$name] === control) {                                                            // 20237
      delete form[control.$name];                                                                                      // 20238
    }                                                                                                                  // 20239
    forEach(form.$pending, function(value, name) {                                                                     // 20240
      form.$setValidity(name, null, control);                                                                          // 20241
    });                                                                                                                // 20242
    forEach(form.$error, function(value, name) {                                                                       // 20243
      form.$setValidity(name, null, control);                                                                          // 20244
    });                                                                                                                // 20245
    forEach(form.$$success, function(value, name) {                                                                    // 20246
      form.$setValidity(name, null, control);                                                                          // 20247
    });                                                                                                                // 20248
                                                                                                                       // 20249
    arrayRemove(controls, control);                                                                                    // 20250
    control.$$parentForm = nullFormCtrl;                                                                               // 20251
  };                                                                                                                   // 20252
                                                                                                                       // 20253
                                                                                                                       // 20254
  /**                                                                                                                  // 20255
   * @ngdoc method                                                                                                     // 20256
   * @name form.FormController#$setValidity                                                                            // 20257
   *                                                                                                                   // 20258
   * @description                                                                                                      // 20259
   * Sets the validity of a form control.                                                                              // 20260
   *                                                                                                                   // 20261
   * This method will also propagate to parent forms.                                                                  // 20262
   */                                                                                                                  // 20263
  addSetValidityMethod({                                                                                               // 20264
    ctrl: this,                                                                                                        // 20265
    $element: element,                                                                                                 // 20266
    set: function(object, property, controller) {                                                                      // 20267
      var list = object[property];                                                                                     // 20268
      if (!list) {                                                                                                     // 20269
        object[property] = [controller];                                                                               // 20270
      } else {                                                                                                         // 20271
        var index = list.indexOf(controller);                                                                          // 20272
        if (index === -1) {                                                                                            // 20273
          list.push(controller);                                                                                       // 20274
        }                                                                                                              // 20275
      }                                                                                                                // 20276
    },                                                                                                                 // 20277
    unset: function(object, property, controller) {                                                                    // 20278
      var list = object[property];                                                                                     // 20279
      if (!list) {                                                                                                     // 20280
        return;                                                                                                        // 20281
      }                                                                                                                // 20282
      arrayRemove(list, controller);                                                                                   // 20283
      if (list.length === 0) {                                                                                         // 20284
        delete object[property];                                                                                       // 20285
      }                                                                                                                // 20286
    },                                                                                                                 // 20287
    $animate: $animate                                                                                                 // 20288
  });                                                                                                                  // 20289
                                                                                                                       // 20290
  /**                                                                                                                  // 20291
   * @ngdoc method                                                                                                     // 20292
   * @name form.FormController#$setDirty                                                                               // 20293
   *                                                                                                                   // 20294
   * @description                                                                                                      // 20295
   * Sets the form to a dirty state.                                                                                   // 20296
   *                                                                                                                   // 20297
   * This method can be called to add the 'ng-dirty' class and set the form to a dirty                                 // 20298
   * state (ng-dirty class). This method will also propagate to parent forms.                                          // 20299
   */                                                                                                                  // 20300
  form.$setDirty = function() {                                                                                        // 20301
    $animate.removeClass(element, PRISTINE_CLASS);                                                                     // 20302
    $animate.addClass(element, DIRTY_CLASS);                                                                           // 20303
    form.$dirty = true;                                                                                                // 20304
    form.$pristine = false;                                                                                            // 20305
    form.$$parentForm.$setDirty();                                                                                     // 20306
  };                                                                                                                   // 20307
                                                                                                                       // 20308
  /**                                                                                                                  // 20309
   * @ngdoc method                                                                                                     // 20310
   * @name form.FormController#$setPristine                                                                            // 20311
   *                                                                                                                   // 20312
   * @description                                                                                                      // 20313
   * Sets the form to its pristine state.                                                                              // 20314
   *                                                                                                                   // 20315
   * This method can be called to remove the 'ng-dirty' class and set the form to its pristine                         // 20316
   * state (ng-pristine class). This method will also propagate to all the controls contained                          // 20317
   * in this form.                                                                                                     // 20318
   *                                                                                                                   // 20319
   * Setting a form back to a pristine state is often useful when we want to 'reuse' a form after                      // 20320
   * saving or resetting it.                                                                                           // 20321
   */                                                                                                                  // 20322
  form.$setPristine = function() {                                                                                     // 20323
    $animate.setClass(element, PRISTINE_CLASS, DIRTY_CLASS + ' ' + SUBMITTED_CLASS);                                   // 20324
    form.$dirty = false;                                                                                               // 20325
    form.$pristine = true;                                                                                             // 20326
    form.$submitted = false;                                                                                           // 20327
    forEach(controls, function(control) {                                                                              // 20328
      control.$setPristine();                                                                                          // 20329
    });                                                                                                                // 20330
  };                                                                                                                   // 20331
                                                                                                                       // 20332
  /**                                                                                                                  // 20333
   * @ngdoc method                                                                                                     // 20334
   * @name form.FormController#$setUntouched                                                                           // 20335
   *                                                                                                                   // 20336
   * @description                                                                                                      // 20337
   * Sets the form to its untouched state.                                                                             // 20338
   *                                                                                                                   // 20339
   * This method can be called to remove the 'ng-touched' class and set the form controls to their                     // 20340
   * untouched state (ng-untouched class).                                                                             // 20341
   *                                                                                                                   // 20342
   * Setting a form controls back to their untouched state is often useful when setting the form                       // 20343
   * back to its pristine state.                                                                                       // 20344
   */                                                                                                                  // 20345
  form.$setUntouched = function() {                                                                                    // 20346
    forEach(controls, function(control) {                                                                              // 20347
      control.$setUntouched();                                                                                         // 20348
    });                                                                                                                // 20349
  };                                                                                                                   // 20350
                                                                                                                       // 20351
  /**                                                                                                                  // 20352
   * @ngdoc method                                                                                                     // 20353
   * @name form.FormController#$setSubmitted                                                                           // 20354
   *                                                                                                                   // 20355
   * @description                                                                                                      // 20356
   * Sets the form to its submitted state.                                                                             // 20357
   */                                                                                                                  // 20358
  form.$setSubmitted = function() {                                                                                    // 20359
    $animate.addClass(element, SUBMITTED_CLASS);                                                                       // 20360
    form.$submitted = true;                                                                                            // 20361
    form.$$parentForm.$setSubmitted();                                                                                 // 20362
  };                                                                                                                   // 20363
}                                                                                                                      // 20364
                                                                                                                       // 20365
/**                                                                                                                    // 20366
 * @ngdoc directive                                                                                                    // 20367
 * @name ngForm                                                                                                        // 20368
 * @restrict EAC                                                                                                       // 20369
 *                                                                                                                     // 20370
 * @description                                                                                                        // 20371
 * Nestable alias of {@link ng.directive:form `form`} directive. HTML                                                  // 20372
 * does not allow nesting of form elements. It is useful to nest forms, for example if the validity of a               // 20373
 * sub-group of controls needs to be determined.                                                                       // 20374
 *                                                                                                                     // 20375
 * Note: the purpose of `ngForm` is to group controls,                                                                 // 20376
 * but not to be a replacement for the `<form>` tag with all of its capabilities                                       // 20377
 * (e.g. posting to the server, ...).                                                                                  // 20378
 *                                                                                                                     // 20379
 * @param {string=} ngForm|name Name of the form. If specified, the form controller will be published into             // 20380
 *                       related scope, under this name.                                                               // 20381
 *                                                                                                                     // 20382
 */                                                                                                                    // 20383
                                                                                                                       // 20384
 /**                                                                                                                   // 20385
 * @ngdoc directive                                                                                                    // 20386
 * @name form                                                                                                          // 20387
 * @restrict E                                                                                                         // 20388
 *                                                                                                                     // 20389
 * @description                                                                                                        // 20390
 * Directive that instantiates                                                                                         // 20391
 * {@link form.FormController FormController}.                                                                         // 20392
 *                                                                                                                     // 20393
 * If the `name` attribute is specified, the form controller is published onto the current scope under                 // 20394
 * this name.                                                                                                          // 20395
 *                                                                                                                     // 20396
 * # Alias: {@link ng.directive:ngForm `ngForm`}                                                                       // 20397
 *                                                                                                                     // 20398
 * In Angular, forms can be nested. This means that the outer form is valid when all of the child                      // 20399
 * forms are valid as well. However, browsers do not allow nesting of `<form>` elements, so                            // 20400
 * Angular provides the {@link ng.directive:ngForm `ngForm`} directive which behaves identically to                    // 20401
 * `<form>` but can be nested.  This allows you to have nested forms, which is very useful when                        // 20402
 * using Angular validation directives in forms that are dynamically generated using the                               // 20403
 * {@link ng.directive:ngRepeat `ngRepeat`} directive. Since you cannot dynamically generate the `name`                // 20404
 * attribute of input elements using interpolation, you have to wrap each set of repeated inputs in an                 // 20405
 * `ngForm` directive and nest these in an outer `form` element.                                                       // 20406
 *                                                                                                                     // 20407
 *                                                                                                                     // 20408
 * # CSS classes                                                                                                       // 20409
 *  - `ng-valid` is set if the form is valid.                                                                          // 20410
 *  - `ng-invalid` is set if the form is invalid.                                                                      // 20411
 *  - `ng-pending` is set if the form is pending.                                                                      // 20412
 *  - `ng-pristine` is set if the form is pristine.                                                                    // 20413
 *  - `ng-dirty` is set if the form is dirty.                                                                          // 20414
 *  - `ng-submitted` is set if the form was submitted.                                                                 // 20415
 *                                                                                                                     // 20416
 * Keep in mind that ngAnimate can detect each of these classes when added and removed.                                // 20417
 *                                                                                                                     // 20418
 *                                                                                                                     // 20419
 * # Submitting a form and preventing the default action                                                               // 20420
 *                                                                                                                     // 20421
 * Since the role of forms in client-side Angular applications is different than in classical                          // 20422
 * roundtrip apps, it is desirable for the browser not to translate the form submission into a full                    // 20423
 * page reload that sends the data to the server. Instead some javascript logic should be triggered                    // 20424
 * to handle the form submission in an application-specific way.                                                       // 20425
 *                                                                                                                     // 20426
 * For this reason, Angular prevents the default action (form submission to the server) unless the                     // 20427
 * `<form>` element has an `action` attribute specified.                                                               // 20428
 *                                                                                                                     // 20429
 * You can use one of the following two ways to specify what javascript method should be called when                   // 20430
 * a form is submitted:                                                                                                // 20431
 *                                                                                                                     // 20432
 * - {@link ng.directive:ngSubmit ngSubmit} directive on the form element                                              // 20433
 * - {@link ng.directive:ngClick ngClick} directive on the first                                                       // 20434
  *  button or input field of type submit (input[type=submit])                                                         // 20435
 *                                                                                                                     // 20436
 * To prevent double execution of the handler, use only one of the {@link ng.directive:ngSubmit ngSubmit}              // 20437
 * or {@link ng.directive:ngClick ngClick} directives.                                                                 // 20438
 * This is because of the following form submission rules in the HTML specification:                                   // 20439
 *                                                                                                                     // 20440
 * - If a form has only one input field then hitting enter in this field triggers form submit                          // 20441
 * (`ngSubmit`)                                                                                                        // 20442
 * - if a form has 2+ input fields and no buttons or input[type=submit] then hitting enter                             // 20443
 * doesn't trigger submit                                                                                              // 20444
 * - if a form has one or more input fields and one or more buttons or input[type=submit] then                         // 20445
 * hitting enter in any of the input fields will trigger the click handler on the *first* button or                    // 20446
 * input[type=submit] (`ngClick`) *and* a submit handler on the enclosing form (`ngSubmit`)                            // 20447
 *                                                                                                                     // 20448
 * Any pending `ngModelOptions` changes will take place immediately when an enclosing form is                          // 20449
 * submitted. Note that `ngClick` events will occur before the model is updated. Use `ngSubmit`                        // 20450
 * to have access to the updated model.                                                                                // 20451
 *                                                                                                                     // 20452
 * ## Animation Hooks                                                                                                  // 20453
 *                                                                                                                     // 20454
 * Animations in ngForm are triggered when any of the associated CSS classes are added and removed.                    // 20455
 * These classes are: `.ng-pristine`, `.ng-dirty`, `.ng-invalid` and `.ng-valid` as well as any                        // 20456
 * other validations that are performed within the form. Animations in ngForm are similar to how                       // 20457
 * they work in ngClass and animations can be hooked into using CSS transitions, keyframes as well                     // 20458
 * as JS animations.                                                                                                   // 20459
 *                                                                                                                     // 20460
 * The following example shows a simple way to utilize CSS transitions to style a form element                         // 20461
 * that has been rendered as invalid after it has been validated:                                                      // 20462
 *                                                                                                                     // 20463
 * <pre>                                                                                                               // 20464
 * //be sure to include ngAnimate as a module to hook into more                                                        // 20465
 * //advanced animations                                                                                               // 20466
 * .my-form {                                                                                                          // 20467
 *   transition:0.5s linear all;                                                                                       // 20468
 *   background: white;                                                                                                // 20469
 * }                                                                                                                   // 20470
 * .my-form.ng-invalid {                                                                                               // 20471
 *   background: red;                                                                                                  // 20472
 *   color:white;                                                                                                      // 20473
 * }                                                                                                                   // 20474
 * </pre>                                                                                                              // 20475
 *                                                                                                                     // 20476
 * @example                                                                                                            // 20477
    <example deps="angular-animate.js" animations="true" fixBase="true" module="formExample">                          // 20478
      <file name="index.html">                                                                                         // 20479
       <script>                                                                                                        // 20480
         angular.module('formExample', [])                                                                             // 20481
           .controller('FormController', ['$scope', function($scope) {                                                 // 20482
             $scope.userType = 'guest';                                                                                // 20483
           }]);                                                                                                        // 20484
       </script>                                                                                                       // 20485
       <style>                                                                                                         // 20486
        .my-form {                                                                                                     // 20487
          transition:all linear 0.5s;                                                                                  // 20488
          background: transparent;                                                                                     // 20489
        }                                                                                                              // 20490
        .my-form.ng-invalid {                                                                                          // 20491
          background: red;                                                                                             // 20492
        }                                                                                                              // 20493
       </style>                                                                                                        // 20494
       <form name="myForm" ng-controller="FormController" class="my-form">                                             // 20495
         userType: <input name="input" ng-model="userType" required>                                                   // 20496
         <span class="error" ng-show="myForm.input.$error.required">Required!</span><br>                               // 20497
         <code>userType = {{userType}}</code><br>                                                                      // 20498
         <code>myForm.input.$valid = {{myForm.input.$valid}}</code><br>                                                // 20499
         <code>myForm.input.$error = {{myForm.input.$error}}</code><br>                                                // 20500
         <code>myForm.$valid = {{myForm.$valid}}</code><br>                                                            // 20501
         <code>myForm.$error.required = {{!!myForm.$error.required}}</code><br>                                        // 20502
        </form>                                                                                                        // 20503
      </file>                                                                                                          // 20504
      <file name="protractor.js" type="protractor">                                                                    // 20505
        it('should initialize to model', function() {                                                                  // 20506
          var userType = element(by.binding('userType'));                                                              // 20507
          var valid = element(by.binding('myForm.input.$valid'));                                                      // 20508
                                                                                                                       // 20509
          expect(userType.getText()).toContain('guest');                                                               // 20510
          expect(valid.getText()).toContain('true');                                                                   // 20511
        });                                                                                                            // 20512
                                                                                                                       // 20513
        it('should be invalid if empty', function() {                                                                  // 20514
          var userType = element(by.binding('userType'));                                                              // 20515
          var valid = element(by.binding('myForm.input.$valid'));                                                      // 20516
          var userInput = element(by.model('userType'));                                                               // 20517
                                                                                                                       // 20518
          userInput.clear();                                                                                           // 20519
          userInput.sendKeys('');                                                                                      // 20520
                                                                                                                       // 20521
          expect(userType.getText()).toEqual('userType =');                                                            // 20522
          expect(valid.getText()).toContain('false');                                                                  // 20523
        });                                                                                                            // 20524
      </file>                                                                                                          // 20525
    </example>                                                                                                         // 20526
 *                                                                                                                     // 20527
 * @param {string=} name Name of the form. If specified, the form controller will be published into                    // 20528
 *                       related scope, under this name.                                                               // 20529
 */                                                                                                                    // 20530
var formDirectiveFactory = function(isNgForm) {                                                                        // 20531
  return ['$timeout', '$parse', function($timeout, $parse) {                                                           // 20532
    var formDirective = {                                                                                              // 20533
      name: 'form',                                                                                                    // 20534
      restrict: isNgForm ? 'EAC' : 'E',                                                                                // 20535
      require: ['form', '^^?form'], //first is the form's own ctrl, second is an optional parent form                  // 20536
      controller: FormController,                                                                                      // 20537
      compile: function ngFormCompile(formElement, attr) {                                                             // 20538
        // Setup initial state of the control                                                                          // 20539
        formElement.addClass(PRISTINE_CLASS).addClass(VALID_CLASS);                                                    // 20540
                                                                                                                       // 20541
        var nameAttr = attr.name ? 'name' : (isNgForm && attr.ngForm ? 'ngForm' : false);                              // 20542
                                                                                                                       // 20543
        return {                                                                                                       // 20544
          pre: function ngFormPreLink(scope, formElement, attr, ctrls) {                                               // 20545
            var controller = ctrls[0];                                                                                 // 20546
                                                                                                                       // 20547
            // if `action` attr is not present on the form, prevent the default action (submission)                    // 20548
            if (!('action' in attr)) {                                                                                 // 20549
              // we can't use jq events because if a form is destroyed during submission the default                   // 20550
              // action is not prevented. see #1238                                                                    // 20551
              //                                                                                                       // 20552
              // IE 9 is not affected because it doesn't fire a submit event and try to do a full                      // 20553
              // page reload if the form was destroyed by submission of the form via a click handler                   // 20554
              // on a button in the form. Looks like an IE9 specific bug.                                              // 20555
              var handleFormSubmission = function(event) {                                                             // 20556
                scope.$apply(function() {                                                                              // 20557
                  controller.$commitViewValue();                                                                       // 20558
                  controller.$setSubmitted();                                                                          // 20559
                });                                                                                                    // 20560
                                                                                                                       // 20561
                event.preventDefault();                                                                                // 20562
              };                                                                                                       // 20563
                                                                                                                       // 20564
              addEventListenerFn(formElement[0], 'submit', handleFormSubmission);                                      // 20565
                                                                                                                       // 20566
              // unregister the preventDefault listener so that we don't not leak memory but in a                      // 20567
              // way that will achieve the prevention of the default action.                                           // 20568
              formElement.on('$destroy', function() {                                                                  // 20569
                $timeout(function() {                                                                                  // 20570
                  removeEventListenerFn(formElement[0], 'submit', handleFormSubmission);                               // 20571
                }, 0, false);                                                                                          // 20572
              });                                                                                                      // 20573
            }                                                                                                          // 20574
                                                                                                                       // 20575
            var parentFormCtrl = ctrls[1] || controller.$$parentForm;                                                  // 20576
            parentFormCtrl.$addControl(controller);                                                                    // 20577
                                                                                                                       // 20578
            var setter = nameAttr ? getSetter(controller.$name) : noop;                                                // 20579
                                                                                                                       // 20580
            if (nameAttr) {                                                                                            // 20581
              setter(scope, controller);                                                                               // 20582
              attr.$observe(nameAttr, function(newValue) {                                                             // 20583
                if (controller.$name === newValue) return;                                                             // 20584
                setter(scope, undefined);                                                                              // 20585
                controller.$$parentForm.$$renameControl(controller, newValue);                                         // 20586
                setter = getSetter(controller.$name);                                                                  // 20587
                setter(scope, controller);                                                                             // 20588
              });                                                                                                      // 20589
            }                                                                                                          // 20590
            formElement.on('$destroy', function() {                                                                    // 20591
              controller.$$parentForm.$removeControl(controller);                                                      // 20592
              setter(scope, undefined);                                                                                // 20593
              extend(controller, nullFormCtrl); //stop propagating child destruction handlers upwards                  // 20594
            });                                                                                                        // 20595
          }                                                                                                            // 20596
        };                                                                                                             // 20597
      }                                                                                                                // 20598
    };                                                                                                                 // 20599
                                                                                                                       // 20600
    return formDirective;                                                                                              // 20601
                                                                                                                       // 20602
    function getSetter(expression) {                                                                                   // 20603
      if (expression === '') {                                                                                         // 20604
        //create an assignable expression, so forms with an empty name can be renamed later                            // 20605
        return $parse('this[""]').assign;                                                                              // 20606
      }                                                                                                                // 20607
      return $parse(expression).assign || noop;                                                                        // 20608
    }                                                                                                                  // 20609
  }];                                                                                                                  // 20610
};                                                                                                                     // 20611
                                                                                                                       // 20612
var formDirective = formDirectiveFactory();                                                                            // 20613
var ngFormDirective = formDirectiveFactory(true);                                                                      // 20614
                                                                                                                       // 20615
/* global VALID_CLASS: false,                                                                                          // 20616
  INVALID_CLASS: false,                                                                                                // 20617
  PRISTINE_CLASS: false,                                                                                               // 20618
  DIRTY_CLASS: false,                                                                                                  // 20619
  UNTOUCHED_CLASS: false,                                                                                              // 20620
  TOUCHED_CLASS: false,                                                                                                // 20621
  ngModelMinErr: false,                                                                                                // 20622
*/                                                                                                                     // 20623
                                                                                                                       // 20624
// Regex code is obtained from SO: https://stackoverflow.com/questions/3143070/javascript-regex-iso-datetime#answer-3143231
var ISO_DATE_REGEXP = /\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+([+-][0-2]\d:[0-5]\d|Z)/;                      // 20626
// See valid URLs in RFC3987 (http://tools.ietf.org/html/rfc3987)                                                      // 20627
var URL_REGEXP = /^[A-Za-z][A-Za-z\d.+-]*:\/*(?:\w+(?::\w+)?@)?[^\s/]+(?::\d+)?(?:\/[\w#!:.?+=&%@\-/]*)?$/;            // 20628
var EMAIL_REGEXP = /^[a-z0-9!#$%&'*+\/=?^_`{|}~.-]+@[a-z0-9]([a-z0-9-]*[a-z0-9])?(\.[a-z0-9]([a-z0-9-]*[a-z0-9])?)*$/i;
var NUMBER_REGEXP = /^\s*(\-|\+)?(\d+|(\d*(\.\d*)))([eE][+-]?\d+)?\s*$/;                                               // 20630
var DATE_REGEXP = /^(\d{4})-(\d{2})-(\d{2})$/;                                                                         // 20631
var DATETIMELOCAL_REGEXP = /^(\d{4})-(\d\d)-(\d\d)T(\d\d):(\d\d)(?::(\d\d)(\.\d{1,3})?)?$/;                            // 20632
var WEEK_REGEXP = /^(\d{4})-W(\d\d)$/;                                                                                 // 20633
var MONTH_REGEXP = /^(\d{4})-(\d\d)$/;                                                                                 // 20634
var TIME_REGEXP = /^(\d\d):(\d\d)(?::(\d\d)(\.\d{1,3})?)?$/;                                                           // 20635
                                                                                                                       // 20636
var inputType = {                                                                                                      // 20637
                                                                                                                       // 20638
  /**                                                                                                                  // 20639
   * @ngdoc input                                                                                                      // 20640
   * @name input[text]                                                                                                 // 20641
   *                                                                                                                   // 20642
   * @description                                                                                                      // 20643
   * Standard HTML text input with angular data binding, inherited by most of the `input` elements.                    // 20644
   *                                                                                                                   // 20645
   *                                                                                                                   // 20646
   * @param {string} ngModel Assignable angular expression to data-bind to.                                            // 20647
   * @param {string=} name Property name of the form under which the control is published.                             // 20648
   * @param {string=} required Adds `required` validation error key if the value is not entered.                       // 20649
   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to                     // 20650
   *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of                      // 20651
   *    `required` when you want to data-bind to the `required` attribute.                                             // 20652
   * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than                   // 20653
   *    minlength.                                                                                                     // 20654
   * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than                    // 20655
   *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of                     // 20656
   *    any length.                                                                                                    // 20657
   * @param {string=} pattern Similar to `ngPattern` except that the attribute value is the actual string              // 20658
   *    that contains the regular expression body that will be converted to a regular expression                       // 20659
   *    as in the ngPattern directive.                                                                                 // 20660
   * @param {string=} ngPattern Sets `pattern` validation error key if the ngModel value does not match                // 20661
   *    a RegExp found by evaluating the Angular expression given in the attribute value.                              // 20662
   *    If the expression evaluates to a RegExp object, then this is used directly.                                    // 20663
   *    If the expression evaluates to a string, then it will be converted to a RegExp                                 // 20664
   *    after wrapping it in `^` and `$` characters. For instance, `"abc"` will be converted to                        // 20665
   *    `new RegExp('^abc$')`.<br />                                                                                   // 20666
   *    **Note:** Avoid using the `g` flag on the RegExp, as it will cause each successive search to                   // 20667
   *    start at the index of the last search's match, thus not taking the whole input value into                      // 20668
   *    account.                                                                                                       // 20669
   * @param {string=} ngChange Angular expression to be executed when input changes due to user                        // 20670
   *    interaction with the input element.                                                                            // 20671
   * @param {boolean=} [ngTrim=true] If set to false Angular will not automatically trim the input.                    // 20672
   *    This parameter is ignored for input[type=password] controls, which will never trim the                         // 20673
   *    input.                                                                                                         // 20674
   *                                                                                                                   // 20675
   * @example                                                                                                          // 20676
      <example name="text-input-directive" module="textInputExample">                                                  // 20677
        <file name="index.html">                                                                                       // 20678
         <script>                                                                                                      // 20679
           angular.module('textInputExample', [])                                                                      // 20680
             .controller('ExampleController', ['$scope', function($scope) {                                            // 20681
               $scope.example = {                                                                                      // 20682
                 text: 'guest',                                                                                        // 20683
                 word: /^\s*\w*\s*$/                                                                                   // 20684
               };                                                                                                      // 20685
             }]);                                                                                                      // 20686
         </script>                                                                                                     // 20687
         <form name="myForm" ng-controller="ExampleController">                                                        // 20688
           <label>Single word:                                                                                         // 20689
             <input type="text" name="input" ng-model="example.text"                                                   // 20690
                    ng-pattern="example.word" required ng-trim="false">                                                // 20691
           </label>                                                                                                    // 20692
           <div role="alert">                                                                                          // 20693
             <span class="error" ng-show="myForm.input.$error.required">                                               // 20694
               Required!</span>                                                                                        // 20695
             <span class="error" ng-show="myForm.input.$error.pattern">                                                // 20696
               Single word only!</span>                                                                                // 20697
           </div>                                                                                                      // 20698
           <tt>text = {{example.text}}</tt><br/>                                                                       // 20699
           <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>                                                 // 20700
           <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>                                                 // 20701
           <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>                                                             // 20702
           <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>                                         // 20703
          </form>                                                                                                      // 20704
        </file>                                                                                                        // 20705
        <file name="protractor.js" type="protractor">                                                                  // 20706
          var text = element(by.binding('example.text'));                                                              // 20707
          var valid = element(by.binding('myForm.input.$valid'));                                                      // 20708
          var input = element(by.model('example.text'));                                                               // 20709
                                                                                                                       // 20710
          it('should initialize to model', function() {                                                                // 20711
            expect(text.getText()).toContain('guest');                                                                 // 20712
            expect(valid.getText()).toContain('true');                                                                 // 20713
          });                                                                                                          // 20714
                                                                                                                       // 20715
          it('should be invalid if empty', function() {                                                                // 20716
            input.clear();                                                                                             // 20717
            input.sendKeys('');                                                                                        // 20718
                                                                                                                       // 20719
            expect(text.getText()).toEqual('text =');                                                                  // 20720
            expect(valid.getText()).toContain('false');                                                                // 20721
          });                                                                                                          // 20722
                                                                                                                       // 20723
          it('should be invalid if multi word', function() {                                                           // 20724
            input.clear();                                                                                             // 20725
            input.sendKeys('hello world');                                                                             // 20726
                                                                                                                       // 20727
            expect(valid.getText()).toContain('false');                                                                // 20728
          });                                                                                                          // 20729
        </file>                                                                                                        // 20730
      </example>                                                                                                       // 20731
   */                                                                                                                  // 20732
  'text': textInputType,                                                                                               // 20733
                                                                                                                       // 20734
    /**                                                                                                                // 20735
     * @ngdoc input                                                                                                    // 20736
     * @name input[date]                                                                                               // 20737
     *                                                                                                                 // 20738
     * @description                                                                                                    // 20739
     * Input with date validation and transformation. In browsers that do not yet support                              // 20740
     * the HTML5 date input, a text element will be used. In that case, text must be entered in a valid ISO-8601       // 20741
     * date format (yyyy-MM-dd), for example: `2009-01-06`. Since many                                                 // 20742
     * modern browsers do not yet support this input type, it is important to provide cues to users on the             // 20743
     * expected input format via a placeholder or label.                                                               // 20744
     *                                                                                                                 // 20745
     * The model must always be a Date object, otherwise Angular will throw an error.                                  // 20746
     * Invalid `Date` objects (dates whose `getTime()` is `NaN`) will be rendered as an empty string.                  // 20747
     *                                                                                                                 // 20748
     * The timezone to be used to read/write the `Date` instance in the model can be defined using                     // 20749
     * {@link ng.directive:ngModelOptions ngModelOptions}. By default, this is the timezone of the browser.            // 20750
     *                                                                                                                 // 20751
     * @param {string} ngModel Assignable angular expression to data-bind to.                                          // 20752
     * @param {string=} name Property name of the form under which the control is published.                           // 20753
     * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`. This must be a
     *   valid ISO date string (yyyy-MM-dd). You can also use interpolation inside this attribute                      // 20755
     *   (e.g. `min="{{minDate | date:'yyyy-MM-dd'}}"`). Note that `min` will also add native HTML5                    // 20756
     *   constraint validation.                                                                                        // 20757
     * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`. This must be
     *   a valid ISO date string (yyyy-MM-dd). You can also use interpolation inside this attribute                    // 20759
     *   (e.g. `max="{{maxDate | date:'yyyy-MM-dd'}}"`). Note that `max` will also add native HTML5                    // 20760
     *   constraint validation.                                                                                        // 20761
     * @param {(date|string)=} ngMin Sets the `min` validation constraint to the Date / ISO date string                // 20762
     *   the `ngMin` expression evaluates to. Note that it does not set the `min` attribute.                           // 20763
     * @param {(date|string)=} ngMax Sets the `max` validation constraint to the Date / ISO date string                // 20764
     *   the `ngMax` expression evaluates to. Note that it does not set the `max` attribute.                           // 20765
     * @param {string=} required Sets `required` validation error key if the value is not entered.                     // 20766
     * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to                   // 20767
     *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of                    // 20768
     *    `required` when you want to data-bind to the `required` attribute.                                           // 20769
     * @param {string=} ngChange Angular expression to be executed when input changes due to user                      // 20770
     *    interaction with the input element.                                                                          // 20771
     *                                                                                                                 // 20772
     * @example                                                                                                        // 20773
     <example name="date-input-directive" module="dateInputExample">                                                   // 20774
     <file name="index.html">                                                                                          // 20775
       <script>                                                                                                        // 20776
          angular.module('dateInputExample', [])                                                                       // 20777
            .controller('DateController', ['$scope', function($scope) {                                                // 20778
              $scope.example = {                                                                                       // 20779
                value: new Date(2013, 9, 22)                                                                           // 20780
              };                                                                                                       // 20781
            }]);                                                                                                       // 20782
       </script>                                                                                                       // 20783
       <form name="myForm" ng-controller="DateController as dateCtrl">                                                 // 20784
          <label for="exampleInput">Pick a date in 2013:</label>                                                       // 20785
          <input type="date" id="exampleInput" name="input" ng-model="example.value"                                   // 20786
              placeholder="yyyy-MM-dd" min="2013-01-01" max="2013-12-31" required />                                   // 20787
          <div role="alert">                                                                                           // 20788
            <span class="error" ng-show="myForm.input.$error.required">                                                // 20789
                Required!</span>                                                                                       // 20790
            <span class="error" ng-show="myForm.input.$error.date">                                                    // 20791
                Not a valid date!</span>                                                                               // 20792
           </div>                                                                                                      // 20793
           <tt>value = {{example.value | date: "yyyy-MM-dd"}}</tt><br/>                                                // 20794
           <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>                                                 // 20795
           <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>                                                 // 20796
           <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>                                                             // 20797
           <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>                                         // 20798
       </form>                                                                                                         // 20799
     </file>                                                                                                           // 20800
     <file name="protractor.js" type="protractor">                                                                     // 20801
        var value = element(by.binding('example.value | date: "yyyy-MM-dd"'));                                         // 20802
        var valid = element(by.binding('myForm.input.$valid'));                                                        // 20803
        var input = element(by.model('example.value'));                                                                // 20804
                                                                                                                       // 20805
        // currently protractor/webdriver does not support                                                             // 20806
        // sending keys to all known HTML5 input controls                                                              // 20807
        // for various browsers (see https://github.com/angular/protractor/issues/562).                                // 20808
        function setInput(val) {                                                                                       // 20809
          // set the value of the element and force validation.                                                        // 20810
          var scr = "var ipt = document.getElementById('exampleInput'); " +                                            // 20811
          "ipt.value = '" + val + "';" +                                                                               // 20812
          "angular.element(ipt).scope().$apply(function(s) { s.myForm[ipt.name].$setViewValue('" + val + "'); });";    // 20813
          browser.executeScript(scr);                                                                                  // 20814
        }                                                                                                              // 20815
                                                                                                                       // 20816
        it('should initialize to model', function() {                                                                  // 20817
          expect(value.getText()).toContain('2013-10-22');                                                             // 20818
          expect(valid.getText()).toContain('myForm.input.$valid = true');                                             // 20819
        });                                                                                                            // 20820
                                                                                                                       // 20821
        it('should be invalid if empty', function() {                                                                  // 20822
          setInput('');                                                                                                // 20823
          expect(value.getText()).toEqual('value =');                                                                  // 20824
          expect(valid.getText()).toContain('myForm.input.$valid = false');                                            // 20825
        });                                                                                                            // 20826
                                                                                                                       // 20827
        it('should be invalid if over max', function() {                                                               // 20828
          setInput('2015-01-01');                                                                                      // 20829
          expect(value.getText()).toContain('');                                                                       // 20830
          expect(valid.getText()).toContain('myForm.input.$valid = false');                                            // 20831
        });                                                                                                            // 20832
     </file>                                                                                                           // 20833
     </example>                                                                                                        // 20834
     */                                                                                                                // 20835
  'date': createDateInputType('date', DATE_REGEXP,                                                                     // 20836
         createDateParser(DATE_REGEXP, ['yyyy', 'MM', 'dd']),                                                          // 20837
         'yyyy-MM-dd'),                                                                                                // 20838
                                                                                                                       // 20839
   /**                                                                                                                 // 20840
    * @ngdoc input                                                                                                     // 20841
    * @name input[datetime-local]                                                                                      // 20842
    *                                                                                                                  // 20843
    * @description                                                                                                     // 20844
    * Input with datetime validation and transformation. In browsers that do not yet support                           // 20845
    * the HTML5 date input, a text element will be used. In that case, the text must be entered in a valid ISO-8601    // 20846
    * local datetime format (yyyy-MM-ddTHH:mm:ss), for example: `2010-12-28T14:57:00`.                                 // 20847
    *                                                                                                                  // 20848
    * The model must always be a Date object, otherwise Angular will throw an error.                                   // 20849
    * Invalid `Date` objects (dates whose `getTime()` is `NaN`) will be rendered as an empty string.                   // 20850
    *                                                                                                                  // 20851
    * The timezone to be used to read/write the `Date` instance in the model can be defined using                      // 20852
    * {@link ng.directive:ngModelOptions ngModelOptions}. By default, this is the timezone of the browser.             // 20853
    *                                                                                                                  // 20854
    * @param {string} ngModel Assignable angular expression to data-bind to.                                           // 20855
    * @param {string=} name Property name of the form under which the control is published.                            // 20856
    * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`.                // 20857
    *   This must be a valid ISO datetime format (yyyy-MM-ddTHH:mm:ss). You can also use interpolation                 // 20858
    *   inside this attribute (e.g. `min="{{minDatetimeLocal | date:'yyyy-MM-ddTHH:mm:ss'}}"`).                        // 20859
    *   Note that `min` will also add native HTML5 constraint validation.                                              // 20860
    * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`.             // 20861
    *   This must be a valid ISO datetime format (yyyy-MM-ddTHH:mm:ss). You can also use interpolation                 // 20862
    *   inside this attribute (e.g. `max="{{maxDatetimeLocal | date:'yyyy-MM-ddTHH:mm:ss'}}"`).                        // 20863
    *   Note that `max` will also add native HTML5 constraint validation.                                              // 20864
    * @param {(date|string)=} ngMin Sets the `min` validation error key to the Date / ISO datetime string              // 20865
    *   the `ngMin` expression evaluates to. Note that it does not set the `min` attribute.                            // 20866
    * @param {(date|string)=} ngMax Sets the `max` validation error key to the Date / ISO datetime string              // 20867
    *   the `ngMax` expression evaluates to. Note that it does not set the `max` attribute.                            // 20868
    * @param {string=} required Sets `required` validation error key if the value is not entered.                      // 20869
    * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to                    // 20870
    *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of                     // 20871
    *    `required` when you want to data-bind to the `required` attribute.                                            // 20872
    * @param {string=} ngChange Angular expression to be executed when input changes due to user                       // 20873
    *    interaction with the input element.                                                                           // 20874
    *                                                                                                                  // 20875
    * @example                                                                                                         // 20876
    <example name="datetimelocal-input-directive" module="dateExample">                                                // 20877
    <file name="index.html">                                                                                           // 20878
      <script>                                                                                                         // 20879
        angular.module('dateExample', [])                                                                              // 20880
          .controller('DateController', ['$scope', function($scope) {                                                  // 20881
            $scope.example = {                                                                                         // 20882
              value: new Date(2010, 11, 28, 14, 57)                                                                    // 20883
            };                                                                                                         // 20884
          }]);                                                                                                         // 20885
      </script>                                                                                                        // 20886
      <form name="myForm" ng-controller="DateController as dateCtrl">                                                  // 20887
        <label for="exampleInput">Pick a date between in 2013:</label>                                                 // 20888
        <input type="datetime-local" id="exampleInput" name="input" ng-model="example.value"                           // 20889
            placeholder="yyyy-MM-ddTHH:mm:ss" min="2001-01-01T00:00:00" max="2013-12-31T00:00:00" required />          // 20890
        <div role="alert">                                                                                             // 20891
          <span class="error" ng-show="myForm.input.$error.required">                                                  // 20892
              Required!</span>                                                                                         // 20893
          <span class="error" ng-show="myForm.input.$error.datetimelocal">                                             // 20894
              Not a valid date!</span>                                                                                 // 20895
        </div>                                                                                                         // 20896
        <tt>value = {{example.value | date: "yyyy-MM-ddTHH:mm:ss"}}</tt><br/>                                          // 20897
        <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>                                                    // 20898
        <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>                                                    // 20899
        <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>                                                                // 20900
        <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>                                            // 20901
      </form>                                                                                                          // 20902
    </file>                                                                                                            // 20903
    <file name="protractor.js" type="protractor">                                                                      // 20904
      var value = element(by.binding('example.value | date: "yyyy-MM-ddTHH:mm:ss"'));                                  // 20905
      var valid = element(by.binding('myForm.input.$valid'));                                                          // 20906
      var input = element(by.model('example.value'));                                                                  // 20907
                                                                                                                       // 20908
      // currently protractor/webdriver does not support                                                               // 20909
      // sending keys to all known HTML5 input controls                                                                // 20910
      // for various browsers (https://github.com/angular/protractor/issues/562).                                      // 20911
      function setInput(val) {                                                                                         // 20912
        // set the value of the element and force validation.                                                          // 20913
        var scr = "var ipt = document.getElementById('exampleInput'); " +                                              // 20914
        "ipt.value = '" + val + "';" +                                                                                 // 20915
        "angular.element(ipt).scope().$apply(function(s) { s.myForm[ipt.name].$setViewValue('" + val + "'); });";      // 20916
        browser.executeScript(scr);                                                                                    // 20917
      }                                                                                                                // 20918
                                                                                                                       // 20919
      it('should initialize to model', function() {                                                                    // 20920
        expect(value.getText()).toContain('2010-12-28T14:57:00');                                                      // 20921
        expect(valid.getText()).toContain('myForm.input.$valid = true');                                               // 20922
      });                                                                                                              // 20923
                                                                                                                       // 20924
      it('should be invalid if empty', function() {                                                                    // 20925
        setInput('');                                                                                                  // 20926
        expect(value.getText()).toEqual('value =');                                                                    // 20927
        expect(valid.getText()).toContain('myForm.input.$valid = false');                                              // 20928
      });                                                                                                              // 20929
                                                                                                                       // 20930
      it('should be invalid if over max', function() {                                                                 // 20931
        setInput('2015-01-01T23:59:00');                                                                               // 20932
        expect(value.getText()).toContain('');                                                                         // 20933
        expect(valid.getText()).toContain('myForm.input.$valid = false');                                              // 20934
      });                                                                                                              // 20935
    </file>                                                                                                            // 20936
    </example>                                                                                                         // 20937
    */                                                                                                                 // 20938
  'datetime-local': createDateInputType('datetimelocal', DATETIMELOCAL_REGEXP,                                         // 20939
      createDateParser(DATETIMELOCAL_REGEXP, ['yyyy', 'MM', 'dd', 'HH', 'mm', 'ss', 'sss']),                           // 20940
      'yyyy-MM-ddTHH:mm:ss.sss'),                                                                                      // 20941
                                                                                                                       // 20942
  /**                                                                                                                  // 20943
   * @ngdoc input                                                                                                      // 20944
   * @name input[time]                                                                                                 // 20945
   *                                                                                                                   // 20946
   * @description                                                                                                      // 20947
   * Input with time validation and transformation. In browsers that do not yet support                                // 20948
   * the HTML5 date input, a text element will be used. In that case, the text must be entered in a valid ISO-8601     // 20949
   * local time format (HH:mm:ss), for example: `14:57:00`. Model must be a Date object. This binding will always output a
   * Date object to the model of January 1, 1970, or local date `new Date(1970, 0, 1, HH, mm, ss)`.                    // 20951
   *                                                                                                                   // 20952
   * The model must always be a Date object, otherwise Angular will throw an error.                                    // 20953
   * Invalid `Date` objects (dates whose `getTime()` is `NaN`) will be rendered as an empty string.                    // 20954
   *                                                                                                                   // 20955
   * The timezone to be used to read/write the `Date` instance in the model can be defined using                       // 20956
   * {@link ng.directive:ngModelOptions ngModelOptions}. By default, this is the timezone of the browser.              // 20957
   *                                                                                                                   // 20958
   * @param {string} ngModel Assignable angular expression to data-bind to.                                            // 20959
   * @param {string=} name Property name of the form under which the control is published.                             // 20960
   * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`.                 // 20961
   *   This must be a valid ISO time format (HH:mm:ss). You can also use interpolation inside this                     // 20962
   *   attribute (e.g. `min="{{minTime | date:'HH:mm:ss'}}"`). Note that `min` will also add                           // 20963
   *   native HTML5 constraint validation.                                                                             // 20964
   * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`.              // 20965
   *   This must be a valid ISO time format (HH:mm:ss). You can also use interpolation inside this                     // 20966
   *   attribute (e.g. `max="{{maxTime | date:'HH:mm:ss'}}"`). Note that `max` will also add                           // 20967
   *   native HTML5 constraint validation.                                                                             // 20968
   * @param {(date|string)=} ngMin Sets the `min` validation constraint to the Date / ISO time string the              // 20969
   *   `ngMin` expression evaluates to. Note that it does not set the `min` attribute.                                 // 20970
   * @param {(date|string)=} ngMax Sets the `max` validation constraint to the Date / ISO time string the              // 20971
   *   `ngMax` expression evaluates to. Note that it does not set the `max` attribute.                                 // 20972
   * @param {string=} required Sets `required` validation error key if the value is not entered.                       // 20973
   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to                     // 20974
   *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of                      // 20975
   *    `required` when you want to data-bind to the `required` attribute.                                             // 20976
   * @param {string=} ngChange Angular expression to be executed when input changes due to user                        // 20977
   *    interaction with the input element.                                                                            // 20978
   *                                                                                                                   // 20979
   * @example                                                                                                          // 20980
   <example name="time-input-directive" module="timeExample">                                                          // 20981
   <file name="index.html">                                                                                            // 20982
     <script>                                                                                                          // 20983
      angular.module('timeExample', [])                                                                                // 20984
        .controller('DateController', ['$scope', function($scope) {                                                    // 20985
          $scope.example = {                                                                                           // 20986
            value: new Date(1970, 0, 1, 14, 57, 0)                                                                     // 20987
          };                                                                                                           // 20988
        }]);                                                                                                           // 20989
     </script>                                                                                                         // 20990
     <form name="myForm" ng-controller="DateController as dateCtrl">                                                   // 20991
        <label for="exampleInput">Pick a between 8am and 5pm:</label>                                                  // 20992
        <input type="time" id="exampleInput" name="input" ng-model="example.value"                                     // 20993
            placeholder="HH:mm:ss" min="08:00:00" max="17:00:00" required />                                           // 20994
        <div role="alert">                                                                                             // 20995
          <span class="error" ng-show="myForm.input.$error.required">                                                  // 20996
              Required!</span>                                                                                         // 20997
          <span class="error" ng-show="myForm.input.$error.time">                                                      // 20998
              Not a valid date!</span>                                                                                 // 20999
        </div>                                                                                                         // 21000
        <tt>value = {{example.value | date: "HH:mm:ss"}}</tt><br/>                                                     // 21001
        <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>                                                    // 21002
        <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>                                                    // 21003
        <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>                                                                // 21004
        <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>                                            // 21005
     </form>                                                                                                           // 21006
   </file>                                                                                                             // 21007
   <file name="protractor.js" type="protractor">                                                                       // 21008
      var value = element(by.binding('example.value | date: "HH:mm:ss"'));                                             // 21009
      var valid = element(by.binding('myForm.input.$valid'));                                                          // 21010
      var input = element(by.model('example.value'));                                                                  // 21011
                                                                                                                       // 21012
      // currently protractor/webdriver does not support                                                               // 21013
      // sending keys to all known HTML5 input controls                                                                // 21014
      // for various browsers (https://github.com/angular/protractor/issues/562).                                      // 21015
      function setInput(val) {                                                                                         // 21016
        // set the value of the element and force validation.                                                          // 21017
        var scr = "var ipt = document.getElementById('exampleInput'); " +                                              // 21018
        "ipt.value = '" + val + "';" +                                                                                 // 21019
        "angular.element(ipt).scope().$apply(function(s) { s.myForm[ipt.name].$setViewValue('" + val + "'); });";      // 21020
        browser.executeScript(scr);                                                                                    // 21021
      }                                                                                                                // 21022
                                                                                                                       // 21023
      it('should initialize to model', function() {                                                                    // 21024
        expect(value.getText()).toContain('14:57:00');                                                                 // 21025
        expect(valid.getText()).toContain('myForm.input.$valid = true');                                               // 21026
      });                                                                                                              // 21027
                                                                                                                       // 21028
      it('should be invalid if empty', function() {                                                                    // 21029
        setInput('');                                                                                                  // 21030
        expect(value.getText()).toEqual('value =');                                                                    // 21031
        expect(valid.getText()).toContain('myForm.input.$valid = false');                                              // 21032
      });                                                                                                              // 21033
                                                                                                                       // 21034
      it('should be invalid if over max', function() {                                                                 // 21035
        setInput('23:59:00');                                                                                          // 21036
        expect(value.getText()).toContain('');                                                                         // 21037
        expect(valid.getText()).toContain('myForm.input.$valid = false');                                              // 21038
      });                                                                                                              // 21039
   </file>                                                                                                             // 21040
   </example>                                                                                                          // 21041
   */                                                                                                                  // 21042
  'time': createDateInputType('time', TIME_REGEXP,                                                                     // 21043
      createDateParser(TIME_REGEXP, ['HH', 'mm', 'ss', 'sss']),                                                        // 21044
     'HH:mm:ss.sss'),                                                                                                  // 21045
                                                                                                                       // 21046
   /**                                                                                                                 // 21047
    * @ngdoc input                                                                                                     // 21048
    * @name input[week]                                                                                                // 21049
    *                                                                                                                  // 21050
    * @description                                                                                                     // 21051
    * Input with week-of-the-year validation and transformation to Date. In browsers that do not yet support           // 21052
    * the HTML5 week input, a text element will be used. In that case, the text must be entered in a valid ISO-8601    // 21053
    * week format (yyyy-W##), for example: `2013-W02`.                                                                 // 21054
    *                                                                                                                  // 21055
    * The model must always be a Date object, otherwise Angular will throw an error.                                   // 21056
    * Invalid `Date` objects (dates whose `getTime()` is `NaN`) will be rendered as an empty string.                   // 21057
    *                                                                                                                  // 21058
    * The timezone to be used to read/write the `Date` instance in the model can be defined using                      // 21059
    * {@link ng.directive:ngModelOptions ngModelOptions}. By default, this is the timezone of the browser.             // 21060
    *                                                                                                                  // 21061
    * @param {string} ngModel Assignable angular expression to data-bind to.                                           // 21062
    * @param {string=} name Property name of the form under which the control is published.                            // 21063
    * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`.                // 21064
    *   This must be a valid ISO week format (yyyy-W##). You can also use interpolation inside this                    // 21065
    *   attribute (e.g. `min="{{minWeek | date:'yyyy-Www'}}"`). Note that `min` will also add                          // 21066
    *   native HTML5 constraint validation.                                                                            // 21067
    * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`.             // 21068
    *   This must be a valid ISO week format (yyyy-W##). You can also use interpolation inside this                    // 21069
    *   attribute (e.g. `max="{{maxWeek | date:'yyyy-Www'}}"`). Note that `max` will also add                          // 21070
    *   native HTML5 constraint validation.                                                                            // 21071
    * @param {(date|string)=} ngMin Sets the `min` validation constraint to the Date / ISO week string                 // 21072
    *   the `ngMin` expression evaluates to. Note that it does not set the `min` attribute.                            // 21073
    * @param {(date|string)=} ngMax Sets the `max` validation constraint to the Date / ISO week string                 // 21074
    *   the `ngMax` expression evaluates to. Note that it does not set the `max` attribute.                            // 21075
    * @param {string=} required Sets `required` validation error key if the value is not entered.                      // 21076
    * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to                    // 21077
    *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of                     // 21078
    *    `required` when you want to data-bind to the `required` attribute.                                            // 21079
    * @param {string=} ngChange Angular expression to be executed when input changes due to user                       // 21080
    *    interaction with the input element.                                                                           // 21081
    *                                                                                                                  // 21082
    * @example                                                                                                         // 21083
    <example name="week-input-directive" module="weekExample">                                                         // 21084
    <file name="index.html">                                                                                           // 21085
      <script>                                                                                                         // 21086
      angular.module('weekExample', [])                                                                                // 21087
        .controller('DateController', ['$scope', function($scope) {                                                    // 21088
          $scope.example = {                                                                                           // 21089
            value: new Date(2013, 0, 3)                                                                                // 21090
          };                                                                                                           // 21091
        }]);                                                                                                           // 21092
      </script>                                                                                                        // 21093
      <form name="myForm" ng-controller="DateController as dateCtrl">                                                  // 21094
        <label>Pick a date between in 2013:                                                                            // 21095
          <input id="exampleInput" type="week" name="input" ng-model="example.value"                                   // 21096
                 placeholder="YYYY-W##" min="2012-W32"                                                                 // 21097
                 max="2013-W52" required />                                                                            // 21098
        </label>                                                                                                       // 21099
        <div role="alert">                                                                                             // 21100
          <span class="error" ng-show="myForm.input.$error.required">                                                  // 21101
              Required!</span>                                                                                         // 21102
          <span class="error" ng-show="myForm.input.$error.week">                                                      // 21103
              Not a valid date!</span>                                                                                 // 21104
        </div>                                                                                                         // 21105
        <tt>value = {{example.value | date: "yyyy-Www"}}</tt><br/>                                                     // 21106
        <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>                                                    // 21107
        <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>                                                    // 21108
        <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>                                                                // 21109
        <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>                                            // 21110
      </form>                                                                                                          // 21111
    </file>                                                                                                            // 21112
    <file name="protractor.js" type="protractor">                                                                      // 21113
      var value = element(by.binding('example.value | date: "yyyy-Www"'));                                             // 21114
      var valid = element(by.binding('myForm.input.$valid'));                                                          // 21115
      var input = element(by.model('example.value'));                                                                  // 21116
                                                                                                                       // 21117
      // currently protractor/webdriver does not support                                                               // 21118
      // sending keys to all known HTML5 input controls                                                                // 21119
      // for various browsers (https://github.com/angular/protractor/issues/562).                                      // 21120
      function setInput(val) {                                                                                         // 21121
        // set the value of the element and force validation.                                                          // 21122
        var scr = "var ipt = document.getElementById('exampleInput'); " +                                              // 21123
        "ipt.value = '" + val + "';" +                                                                                 // 21124
        "angular.element(ipt).scope().$apply(function(s) { s.myForm[ipt.name].$setViewValue('" + val + "'); });";      // 21125
        browser.executeScript(scr);                                                                                    // 21126
      }                                                                                                                // 21127
                                                                                                                       // 21128
      it('should initialize to model', function() {                                                                    // 21129
        expect(value.getText()).toContain('2013-W01');                                                                 // 21130
        expect(valid.getText()).toContain('myForm.input.$valid = true');                                               // 21131
      });                                                                                                              // 21132
                                                                                                                       // 21133
      it('should be invalid if empty', function() {                                                                    // 21134
        setInput('');                                                                                                  // 21135
        expect(value.getText()).toEqual('value =');                                                                    // 21136
        expect(valid.getText()).toContain('myForm.input.$valid = false');                                              // 21137
      });                                                                                                              // 21138
                                                                                                                       // 21139
      it('should be invalid if over max', function() {                                                                 // 21140
        setInput('2015-W01');                                                                                          // 21141
        expect(value.getText()).toContain('');                                                                         // 21142
        expect(valid.getText()).toContain('myForm.input.$valid = false');                                              // 21143
      });                                                                                                              // 21144
    </file>                                                                                                            // 21145
    </example>                                                                                                         // 21146
    */                                                                                                                 // 21147
  'week': createDateInputType('week', WEEK_REGEXP, weekParser, 'yyyy-Www'),                                            // 21148
                                                                                                                       // 21149
  /**                                                                                                                  // 21150
   * @ngdoc input                                                                                                      // 21151
   * @name input[month]                                                                                                // 21152
   *                                                                                                                   // 21153
   * @description                                                                                                      // 21154
   * Input with month validation and transformation. In browsers that do not yet support                               // 21155
   * the HTML5 month input, a text element will be used. In that case, the text must be entered in a valid ISO-8601    // 21156
   * month format (yyyy-MM), for example: `2009-01`.                                                                   // 21157
   *                                                                                                                   // 21158
   * The model must always be a Date object, otherwise Angular will throw an error.                                    // 21159
   * Invalid `Date` objects (dates whose `getTime()` is `NaN`) will be rendered as an empty string.                    // 21160
   * If the model is not set to the first of the month, the next view to model update will set it                      // 21161
   * to the first of the month.                                                                                        // 21162
   *                                                                                                                   // 21163
   * The timezone to be used to read/write the `Date` instance in the model can be defined using                       // 21164
   * {@link ng.directive:ngModelOptions ngModelOptions}. By default, this is the timezone of the browser.              // 21165
   *                                                                                                                   // 21166
   * @param {string} ngModel Assignable angular expression to data-bind to.                                            // 21167
   * @param {string=} name Property name of the form under which the control is published.                             // 21168
   * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`.                 // 21169
   *   This must be a valid ISO month format (yyyy-MM). You can also use interpolation inside this                     // 21170
   *   attribute (e.g. `min="{{minMonth | date:'yyyy-MM'}}"`). Note that `min` will also add                           // 21171
   *   native HTML5 constraint validation.                                                                             // 21172
   * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`.              // 21173
   *   This must be a valid ISO month format (yyyy-MM). You can also use interpolation inside this                     // 21174
   *   attribute (e.g. `max="{{maxMonth | date:'yyyy-MM'}}"`). Note that `max` will also add                           // 21175
   *   native HTML5 constraint validation.                                                                             // 21176
   * @param {(date|string)=} ngMin Sets the `min` validation constraint to the Date / ISO week string                  // 21177
   *   the `ngMin` expression evaluates to. Note that it does not set the `min` attribute.                             // 21178
   * @param {(date|string)=} ngMax Sets the `max` validation constraint to the Date / ISO week string                  // 21179
   *   the `ngMax` expression evaluates to. Note that it does not set the `max` attribute.                             // 21180
                                                                                                                       // 21181
   * @param {string=} required Sets `required` validation error key if the value is not entered.                       // 21182
   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to                     // 21183
   *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of                      // 21184
   *    `required` when you want to data-bind to the `required` attribute.                                             // 21185
   * @param {string=} ngChange Angular expression to be executed when input changes due to user                        // 21186
   *    interaction with the input element.                                                                            // 21187
   *                                                                                                                   // 21188
   * @example                                                                                                          // 21189
   <example name="month-input-directive" module="monthExample">                                                        // 21190
   <file name="index.html">                                                                                            // 21191
     <script>                                                                                                          // 21192
      angular.module('monthExample', [])                                                                               // 21193
        .controller('DateController', ['$scope', function($scope) {                                                    // 21194
          $scope.example = {                                                                                           // 21195
            value: new Date(2013, 9, 1)                                                                                // 21196
          };                                                                                                           // 21197
        }]);                                                                                                           // 21198
     </script>                                                                                                         // 21199
     <form name="myForm" ng-controller="DateController as dateCtrl">                                                   // 21200
       <label for="exampleInput">Pick a month in 2013:</label>                                                         // 21201
       <input id="exampleInput" type="month" name="input" ng-model="example.value"                                     // 21202
          placeholder="yyyy-MM" min="2013-01" max="2013-12" required />                                                // 21203
       <div role="alert">                                                                                              // 21204
         <span class="error" ng-show="myForm.input.$error.required">                                                   // 21205
            Required!</span>                                                                                           // 21206
         <span class="error" ng-show="myForm.input.$error.month">                                                      // 21207
            Not a valid month!</span>                                                                                  // 21208
       </div>                                                                                                          // 21209
       <tt>value = {{example.value | date: "yyyy-MM"}}</tt><br/>                                                       // 21210
       <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>                                                     // 21211
       <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>                                                     // 21212
       <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>                                                                 // 21213
       <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>                                             // 21214
     </form>                                                                                                           // 21215
   </file>                                                                                                             // 21216
   <file name="protractor.js" type="protractor">                                                                       // 21217
      var value = element(by.binding('example.value | date: "yyyy-MM"'));                                              // 21218
      var valid = element(by.binding('myForm.input.$valid'));                                                          // 21219
      var input = element(by.model('example.value'));                                                                  // 21220
                                                                                                                       // 21221
      // currently protractor/webdriver does not support                                                               // 21222
      // sending keys to all known HTML5 input controls                                                                // 21223
      // for various browsers (https://github.com/angular/protractor/issues/562).                                      // 21224
      function setInput(val) {                                                                                         // 21225
        // set the value of the element and force validation.                                                          // 21226
        var scr = "var ipt = document.getElementById('exampleInput'); " +                                              // 21227
        "ipt.value = '" + val + "';" +                                                                                 // 21228
        "angular.element(ipt).scope().$apply(function(s) { s.myForm[ipt.name].$setViewValue('" + val + "'); });";      // 21229
        browser.executeScript(scr);                                                                                    // 21230
      }                                                                                                                // 21231
                                                                                                                       // 21232
      it('should initialize to model', function() {                                                                    // 21233
        expect(value.getText()).toContain('2013-10');                                                                  // 21234
        expect(valid.getText()).toContain('myForm.input.$valid = true');                                               // 21235
      });                                                                                                              // 21236
                                                                                                                       // 21237
      it('should be invalid if empty', function() {                                                                    // 21238
        setInput('');                                                                                                  // 21239
        expect(value.getText()).toEqual('value =');                                                                    // 21240
        expect(valid.getText()).toContain('myForm.input.$valid = false');                                              // 21241
      });                                                                                                              // 21242
                                                                                                                       // 21243
      it('should be invalid if over max', function() {                                                                 // 21244
        setInput('2015-01');                                                                                           // 21245
        expect(value.getText()).toContain('');                                                                         // 21246
        expect(valid.getText()).toContain('myForm.input.$valid = false');                                              // 21247
      });                                                                                                              // 21248
   </file>                                                                                                             // 21249
   </example>                                                                                                          // 21250
   */                                                                                                                  // 21251
  'month': createDateInputType('month', MONTH_REGEXP,                                                                  // 21252
     createDateParser(MONTH_REGEXP, ['yyyy', 'MM']),                                                                   // 21253
     'yyyy-MM'),                                                                                                       // 21254
                                                                                                                       // 21255
  /**                                                                                                                  // 21256
   * @ngdoc input                                                                                                      // 21257
   * @name input[number]                                                                                               // 21258
   *                                                                                                                   // 21259
   * @description                                                                                                      // 21260
   * Text input with number validation and transformation. Sets the `number` validation                                // 21261
   * error if not a valid number.                                                                                      // 21262
   *                                                                                                                   // 21263
   * <div class="alert alert-warning">                                                                                 // 21264
   * The model must always be of type `number` otherwise Angular will throw an error.                                  // 21265
   * Be aware that a string containing a number is not enough. See the {@link ngModel:numfmt}                          // 21266
   * error docs for more information and an example of how to convert your model if necessary.                         // 21267
   * </div>                                                                                                            // 21268
   *                                                                                                                   // 21269
   * ## Issues with HTML5 constraint validation                                                                        // 21270
   *                                                                                                                   // 21271
   * In browsers that follow the                                                                                       // 21272
   * [HTML5 specification](https://html.spec.whatwg.org/multipage/forms.html#number-state-%28type=number%29),          // 21273
   * `input[number]` does not work as expected with {@link ngModelOptions `ngModelOptions.allowInvalid`}.              // 21274
   * If a non-number is entered in the input, the browser will report the value as an empty string,                    // 21275
   * which means the view / model values in `ngModel` and subsequently the scope value                                 // 21276
   * will also be an empty string.                                                                                     // 21277
   *                                                                                                                   // 21278
   *                                                                                                                   // 21279
   * @param {string} ngModel Assignable angular expression to data-bind to.                                            // 21280
   * @param {string=} name Property name of the form under which the control is published.                             // 21281
   * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`.                 // 21282
   * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`.              // 21283
   * @param {string=} required Sets `required` validation error key if the value is not entered.                       // 21284
   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to                     // 21285
   *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of                      // 21286
   *    `required` when you want to data-bind to the `required` attribute.                                             // 21287
   * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than                   // 21288
   *    minlength.                                                                                                     // 21289
   * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than                    // 21290
   *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of                     // 21291
   *    any length.                                                                                                    // 21292
   * @param {string=} pattern Similar to `ngPattern` except that the attribute value is the actual string              // 21293
   *    that contains the regular expression body that will be converted to a regular expression                       // 21294
   *    as in the ngPattern directive.                                                                                 // 21295
   * @param {string=} ngPattern Sets `pattern` validation error key if the ngModel value does not match                // 21296
   *    a RegExp found by evaluating the Angular expression given in the attribute value.                              // 21297
   *    If the expression evaluates to a RegExp object, then this is used directly.                                    // 21298
   *    If the expression evaluates to a string, then it will be converted to a RegExp                                 // 21299
   *    after wrapping it in `^` and `$` characters. For instance, `"abc"` will be converted to                        // 21300
   *    `new RegExp('^abc$')`.<br />                                                                                   // 21301
   *    **Note:** Avoid using the `g` flag on the RegExp, as it will cause each successive search to                   // 21302
   *    start at the index of the last search's match, thus not taking the whole input value into                      // 21303
   *    account.                                                                                                       // 21304
   * @param {string=} ngChange Angular expression to be executed when input changes due to user                        // 21305
   *    interaction with the input element.                                                                            // 21306
   *                                                                                                                   // 21307
   * @example                                                                                                          // 21308
      <example name="number-input-directive" module="numberExample">                                                   // 21309
        <file name="index.html">                                                                                       // 21310
         <script>                                                                                                      // 21311
           angular.module('numberExample', [])                                                                         // 21312
             .controller('ExampleController', ['$scope', function($scope) {                                            // 21313
               $scope.example = {                                                                                      // 21314
                 value: 12                                                                                             // 21315
               };                                                                                                      // 21316
             }]);                                                                                                      // 21317
         </script>                                                                                                     // 21318
         <form name="myForm" ng-controller="ExampleController">                                                        // 21319
           <label>Number:                                                                                              // 21320
             <input type="number" name="input" ng-model="example.value"                                                // 21321
                    min="0" max="99" required>                                                                         // 21322
          </label>                                                                                                     // 21323
           <div role="alert">                                                                                          // 21324
             <span class="error" ng-show="myForm.input.$error.required">                                               // 21325
               Required!</span>                                                                                        // 21326
             <span class="error" ng-show="myForm.input.$error.number">                                                 // 21327
               Not valid number!</span>                                                                                // 21328
           </div>                                                                                                      // 21329
           <tt>value = {{example.value}}</tt><br/>                                                                     // 21330
           <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>                                                 // 21331
           <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>                                                 // 21332
           <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>                                                             // 21333
           <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>                                         // 21334
          </form>                                                                                                      // 21335
        </file>                                                                                                        // 21336
        <file name="protractor.js" type="protractor">                                                                  // 21337
          var value = element(by.binding('example.value'));                                                            // 21338
          var valid = element(by.binding('myForm.input.$valid'));                                                      // 21339
          var input = element(by.model('example.value'));                                                              // 21340
                                                                                                                       // 21341
          it('should initialize to model', function() {                                                                // 21342
            expect(value.getText()).toContain('12');                                                                   // 21343
            expect(valid.getText()).toContain('true');                                                                 // 21344
          });                                                                                                          // 21345
                                                                                                                       // 21346
          it('should be invalid if empty', function() {                                                                // 21347
            input.clear();                                                                                             // 21348
            input.sendKeys('');                                                                                        // 21349
            expect(value.getText()).toEqual('value =');                                                                // 21350
            expect(valid.getText()).toContain('false');                                                                // 21351
          });                                                                                                          // 21352
                                                                                                                       // 21353
          it('should be invalid if over max', function() {                                                             // 21354
            input.clear();                                                                                             // 21355
            input.sendKeys('123');                                                                                     // 21356
            expect(value.getText()).toEqual('value =');                                                                // 21357
            expect(valid.getText()).toContain('false');                                                                // 21358
          });                                                                                                          // 21359
        </file>                                                                                                        // 21360
      </example>                                                                                                       // 21361
   */                                                                                                                  // 21362
  'number': numberInputType,                                                                                           // 21363
                                                                                                                       // 21364
                                                                                                                       // 21365
  /**                                                                                                                  // 21366
   * @ngdoc input                                                                                                      // 21367
   * @name input[url]                                                                                                  // 21368
   *                                                                                                                   // 21369
   * @description                                                                                                      // 21370
   * Text input with URL validation. Sets the `url` validation error key if the content is not a                       // 21371
   * valid URL.                                                                                                        // 21372
   *                                                                                                                   // 21373
   * <div class="alert alert-warning">                                                                                 // 21374
   * **Note:** `input[url]` uses a regex to validate urls that is derived from the regex                               // 21375
   * used in Chromium. If you need stricter validation, you can use `ng-pattern` or modify                             // 21376
   * the built-in validators (see the {@link guide/forms Forms guide})                                                 // 21377
   * </div>                                                                                                            // 21378
   *                                                                                                                   // 21379
   * @param {string} ngModel Assignable angular expression to data-bind to.                                            // 21380
   * @param {string=} name Property name of the form under which the control is published.                             // 21381
   * @param {string=} required Sets `required` validation error key if the value is not entered.                       // 21382
   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to                     // 21383
   *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of                      // 21384
   *    `required` when you want to data-bind to the `required` attribute.                                             // 21385
   * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than                   // 21386
   *    minlength.                                                                                                     // 21387
   * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than                    // 21388
   *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of                     // 21389
   *    any length.                                                                                                    // 21390
   * @param {string=} pattern Similar to `ngPattern` except that the attribute value is the actual string              // 21391
   *    that contains the regular expression body that will be converted to a regular expression                       // 21392
   *    as in the ngPattern directive.                                                                                 // 21393
   * @param {string=} ngPattern Sets `pattern` validation error key if the ngModel value does not match                // 21394
   *    a RegExp found by evaluating the Angular expression given in the attribute value.                              // 21395
   *    If the expression evaluates to a RegExp object, then this is used directly.                                    // 21396
   *    If the expression evaluates to a string, then it will be converted to a RegExp                                 // 21397
   *    after wrapping it in `^` and `$` characters. For instance, `"abc"` will be converted to                        // 21398
   *    `new RegExp('^abc$')`.<br />                                                                                   // 21399
   *    **Note:** Avoid using the `g` flag on the RegExp, as it will cause each successive search to                   // 21400
   *    start at the index of the last search's match, thus not taking the whole input value into                      // 21401
   *    account.                                                                                                       // 21402
   * @param {string=} ngChange Angular expression to be executed when input changes due to user                        // 21403
   *    interaction with the input element.                                                                            // 21404
   *                                                                                                                   // 21405
   * @example                                                                                                          // 21406
      <example name="url-input-directive" module="urlExample">                                                         // 21407
        <file name="index.html">                                                                                       // 21408
         <script>                                                                                                      // 21409
           angular.module('urlExample', [])                                                                            // 21410
             .controller('ExampleController', ['$scope', function($scope) {                                            // 21411
               $scope.url = {                                                                                          // 21412
                 text: 'http://google.com'                                                                             // 21413
               };                                                                                                      // 21414
             }]);                                                                                                      // 21415
         </script>                                                                                                     // 21416
         <form name="myForm" ng-controller="ExampleController">                                                        // 21417
           <label>URL:                                                                                                 // 21418
             <input type="url" name="input" ng-model="url.text" required>                                              // 21419
           <label>                                                                                                     // 21420
           <div role="alert">                                                                                          // 21421
             <span class="error" ng-show="myForm.input.$error.required">                                               // 21422
               Required!</span>                                                                                        // 21423
             <span class="error" ng-show="myForm.input.$error.url">                                                    // 21424
               Not valid url!</span>                                                                                   // 21425
           </div>                                                                                                      // 21426
           <tt>text = {{url.text}}</tt><br/>                                                                           // 21427
           <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>                                                 // 21428
           <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>                                                 // 21429
           <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>                                                             // 21430
           <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>                                         // 21431
           <tt>myForm.$error.url = {{!!myForm.$error.url}}</tt><br/>                                                   // 21432
          </form>                                                                                                      // 21433
        </file>                                                                                                        // 21434
        <file name="protractor.js" type="protractor">                                                                  // 21435
          var text = element(by.binding('url.text'));                                                                  // 21436
          var valid = element(by.binding('myForm.input.$valid'));                                                      // 21437
          var input = element(by.model('url.text'));                                                                   // 21438
                                                                                                                       // 21439
          it('should initialize to model', function() {                                                                // 21440
            expect(text.getText()).toContain('http://google.com');                                                     // 21441
            expect(valid.getText()).toContain('true');                                                                 // 21442
          });                                                                                                          // 21443
                                                                                                                       // 21444
          it('should be invalid if empty', function() {                                                                // 21445
            input.clear();                                                                                             // 21446
            input.sendKeys('');                                                                                        // 21447
                                                                                                                       // 21448
            expect(text.getText()).toEqual('text =');                                                                  // 21449
            expect(valid.getText()).toContain('false');                                                                // 21450
          });                                                                                                          // 21451
                                                                                                                       // 21452
          it('should be invalid if not url', function() {                                                              // 21453
            input.clear();                                                                                             // 21454
            input.sendKeys('box');                                                                                     // 21455
                                                                                                                       // 21456
            expect(valid.getText()).toContain('false');                                                                // 21457
          });                                                                                                          // 21458
        </file>                                                                                                        // 21459
      </example>                                                                                                       // 21460
   */                                                                                                                  // 21461
  'url': urlInputType,                                                                                                 // 21462
                                                                                                                       // 21463
                                                                                                                       // 21464
  /**                                                                                                                  // 21465
   * @ngdoc input                                                                                                      // 21466
   * @name input[email]                                                                                                // 21467
   *                                                                                                                   // 21468
   * @description                                                                                                      // 21469
   * Text input with email validation. Sets the `email` validation error key if not a valid email                      // 21470
   * address.                                                                                                          // 21471
   *                                                                                                                   // 21472
   * <div class="alert alert-warning">                                                                                 // 21473
   * **Note:** `input[email]` uses a regex to validate email addresses that is derived from the regex                  // 21474
   * used in Chromium. If you need stricter validation (e.g. requiring a top-level domain), you can                    // 21475
   * use `ng-pattern` or modify the built-in validators (see the {@link guide/forms Forms guide})                      // 21476
   * </div>                                                                                                            // 21477
   *                                                                                                                   // 21478
   * @param {string} ngModel Assignable angular expression to data-bind to.                                            // 21479
   * @param {string=} name Property name of the form under which the control is published.                             // 21480
   * @param {string=} required Sets `required` validation error key if the value is not entered.                       // 21481
   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to                     // 21482
   *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of                      // 21483
   *    `required` when you want to data-bind to the `required` attribute.                                             // 21484
   * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than                   // 21485
   *    minlength.                                                                                                     // 21486
   * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than                    // 21487
   *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of                     // 21488
   *    any length.                                                                                                    // 21489
   * @param {string=} pattern Similar to `ngPattern` except that the attribute value is the actual string              // 21490
   *    that contains the regular expression body that will be converted to a regular expression                       // 21491
   *    as in the ngPattern directive.                                                                                 // 21492
   * @param {string=} ngPattern Sets `pattern` validation error key if the ngModel value does not match                // 21493
   *    a RegExp found by evaluating the Angular expression given in the attribute value.                              // 21494
   *    If the expression evaluates to a RegExp object, then this is used directly.                                    // 21495
   *    If the expression evaluates to a string, then it will be converted to a RegExp                                 // 21496
   *    after wrapping it in `^` and `$` characters. For instance, `"abc"` will be converted to                        // 21497
   *    `new RegExp('^abc$')`.<br />                                                                                   // 21498
   *    **Note:** Avoid using the `g` flag on the RegExp, as it will cause each successive search to                   // 21499
   *    start at the index of the last search's match, thus not taking the whole input value into                      // 21500
   *    account.                                                                                                       // 21501
   * @param {string=} ngChange Angular expression to be executed when input changes due to user                        // 21502
   *    interaction with the input element.                                                                            // 21503
   *                                                                                                                   // 21504
   * @example                                                                                                          // 21505
      <example name="email-input-directive" module="emailExample">                                                     // 21506
        <file name="index.html">                                                                                       // 21507
         <script>                                                                                                      // 21508
           angular.module('emailExample', [])                                                                          // 21509
             .controller('ExampleController', ['$scope', function($scope) {                                            // 21510
               $scope.email = {                                                                                        // 21511
                 text: 'me@example.com'                                                                                // 21512
               };                                                                                                      // 21513
             }]);                                                                                                      // 21514
         </script>                                                                                                     // 21515
           <form name="myForm" ng-controller="ExampleController">                                                      // 21516
             <label>Email:                                                                                             // 21517
               <input type="email" name="input" ng-model="email.text" required>                                        // 21518
             </label>                                                                                                  // 21519
             <div role="alert">                                                                                        // 21520
               <span class="error" ng-show="myForm.input.$error.required">                                             // 21521
                 Required!</span>                                                                                      // 21522
               <span class="error" ng-show="myForm.input.$error.email">                                                // 21523
                 Not valid email!</span>                                                                               // 21524
             </div>                                                                                                    // 21525
             <tt>text = {{email.text}}</tt><br/>                                                                       // 21526
             <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>                                               // 21527
             <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>                                               // 21528
             <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>                                                           // 21529
             <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>                                       // 21530
             <tt>myForm.$error.email = {{!!myForm.$error.email}}</tt><br/>                                             // 21531
           </form>                                                                                                     // 21532
         </file>                                                                                                       // 21533
        <file name="protractor.js" type="protractor">                                                                  // 21534
          var text = element(by.binding('email.text'));                                                                // 21535
          var valid = element(by.binding('myForm.input.$valid'));                                                      // 21536
          var input = element(by.model('email.text'));                                                                 // 21537
                                                                                                                       // 21538
          it('should initialize to model', function() {                                                                // 21539
            expect(text.getText()).toContain('me@example.com');                                                        // 21540
            expect(valid.getText()).toContain('true');                                                                 // 21541
          });                                                                                                          // 21542
                                                                                                                       // 21543
          it('should be invalid if empty', function() {                                                                // 21544
            input.clear();                                                                                             // 21545
            input.sendKeys('');                                                                                        // 21546
            expect(text.getText()).toEqual('text =');                                                                  // 21547
            expect(valid.getText()).toContain('false');                                                                // 21548
          });                                                                                                          // 21549
                                                                                                                       // 21550
          it('should be invalid if not email', function() {                                                            // 21551
            input.clear();                                                                                             // 21552
            input.sendKeys('xxx');                                                                                     // 21553
                                                                                                                       // 21554
            expect(valid.getText()).toContain('false');                                                                // 21555
          });                                                                                                          // 21556
        </file>                                                                                                        // 21557
      </example>                                                                                                       // 21558
   */                                                                                                                  // 21559
  'email': emailInputType,                                                                                             // 21560
                                                                                                                       // 21561
                                                                                                                       // 21562
  /**                                                                                                                  // 21563
   * @ngdoc input                                                                                                      // 21564
   * @name input[radio]                                                                                                // 21565
   *                                                                                                                   // 21566
   * @description                                                                                                      // 21567
   * HTML radio button.                                                                                                // 21568
   *                                                                                                                   // 21569
   * @param {string} ngModel Assignable angular expression to data-bind to.                                            // 21570
   * @param {string} value The value to which the `ngModel` expression should be set when selected.                    // 21571
   *    Note that `value` only supports `string` values, i.e. the scope model needs to be a string,                    // 21572
   *    too. Use `ngValue` if you need complex models (`number`, `object`, ...).                                       // 21573
   * @param {string=} name Property name of the form under which the control is published.                             // 21574
   * @param {string=} ngChange Angular expression to be executed when input changes due to user                        // 21575
   *    interaction with the input element.                                                                            // 21576
   * @param {string} ngValue Angular expression to which `ngModel` will be be set when the radio                       // 21577
   *    is selected. Should be used instead of the `value` attribute if you need                                       // 21578
   *    a non-string `ngModel` (`boolean`, `array`, ...).                                                              // 21579
   *                                                                                                                   // 21580
   * @example                                                                                                          // 21581
      <example name="radio-input-directive" module="radioExample">                                                     // 21582
        <file name="index.html">                                                                                       // 21583
         <script>                                                                                                      // 21584
           angular.module('radioExample', [])                                                                          // 21585
             .controller('ExampleController', ['$scope', function($scope) {                                            // 21586
               $scope.color = {                                                                                        // 21587
                 name: 'blue'                                                                                          // 21588
               };                                                                                                      // 21589
               $scope.specialValue = {                                                                                 // 21590
                 "id": "12345",                                                                                        // 21591
                 "value": "green"                                                                                      // 21592
               };                                                                                                      // 21593
             }]);                                                                                                      // 21594
         </script>                                                                                                     // 21595
         <form name="myForm" ng-controller="ExampleController">                                                        // 21596
           <label>                                                                                                     // 21597
             <input type="radio" ng-model="color.name" value="red">                                                    // 21598
             Red                                                                                                       // 21599
           </label><br/>                                                                                               // 21600
           <label>                                                                                                     // 21601
             <input type="radio" ng-model="color.name" ng-value="specialValue">                                        // 21602
             Green                                                                                                     // 21603
           </label><br/>                                                                                               // 21604
           <label>                                                                                                     // 21605
             <input type="radio" ng-model="color.name" value="blue">                                                   // 21606
             Blue                                                                                                      // 21607
           </label><br/>                                                                                               // 21608
           <tt>color = {{color.name | json}}</tt><br/>                                                                 // 21609
          </form>                                                                                                      // 21610
          Note that `ng-value="specialValue"` sets radio item's value to be the value of `$scope.specialValue`.        // 21611
        </file>                                                                                                        // 21612
        <file name="protractor.js" type="protractor">                                                                  // 21613
          it('should change state', function() {                                                                       // 21614
            var color = element(by.binding('color.name'));                                                             // 21615
                                                                                                                       // 21616
            expect(color.getText()).toContain('blue');                                                                 // 21617
                                                                                                                       // 21618
            element.all(by.model('color.name')).get(0).click();                                                        // 21619
                                                                                                                       // 21620
            expect(color.getText()).toContain('red');                                                                  // 21621
          });                                                                                                          // 21622
        </file>                                                                                                        // 21623
      </example>                                                                                                       // 21624
   */                                                                                                                  // 21625
  'radio': radioInputType,                                                                                             // 21626
                                                                                                                       // 21627
                                                                                                                       // 21628
  /**                                                                                                                  // 21629
   * @ngdoc input                                                                                                      // 21630
   * @name input[checkbox]                                                                                             // 21631
   *                                                                                                                   // 21632
   * @description                                                                                                      // 21633
   * HTML checkbox.                                                                                                    // 21634
   *                                                                                                                   // 21635
   * @param {string} ngModel Assignable angular expression to data-bind to.                                            // 21636
   * @param {string=} name Property name of the form under which the control is published.                             // 21637
   * @param {expression=} ngTrueValue The value to which the expression should be set when selected.                   // 21638
   * @param {expression=} ngFalseValue The value to which the expression should be set when not selected.              // 21639
   * @param {string=} ngChange Angular expression to be executed when input changes due to user                        // 21640
   *    interaction with the input element.                                                                            // 21641
   *                                                                                                                   // 21642
   * @example                                                                                                          // 21643
      <example name="checkbox-input-directive" module="checkboxExample">                                               // 21644
        <file name="index.html">                                                                                       // 21645
         <script>                                                                                                      // 21646
           angular.module('checkboxExample', [])                                                                       // 21647
             .controller('ExampleController', ['$scope', function($scope) {                                            // 21648
               $scope.checkboxModel = {                                                                                // 21649
                value1 : true,                                                                                         // 21650
                value2 : 'YES'                                                                                         // 21651
              };                                                                                                       // 21652
             }]);                                                                                                      // 21653
         </script>                                                                                                     // 21654
         <form name="myForm" ng-controller="ExampleController">                                                        // 21655
           <label>Value1:                                                                                              // 21656
             <input type="checkbox" ng-model="checkboxModel.value1">                                                   // 21657
           </label><br/>                                                                                               // 21658
           <label>Value2:                                                                                              // 21659
             <input type="checkbox" ng-model="checkboxModel.value2"                                                    // 21660
                    ng-true-value="'YES'" ng-false-value="'NO'">                                                       // 21661
            </label><br/>                                                                                              // 21662
           <tt>value1 = {{checkboxModel.value1}}</tt><br/>                                                             // 21663
           <tt>value2 = {{checkboxModel.value2}}</tt><br/>                                                             // 21664
          </form>                                                                                                      // 21665
        </file>                                                                                                        // 21666
        <file name="protractor.js" type="protractor">                                                                  // 21667
          it('should change state', function() {                                                                       // 21668
            var value1 = element(by.binding('checkboxModel.value1'));                                                  // 21669
            var value2 = element(by.binding('checkboxModel.value2'));                                                  // 21670
                                                                                                                       // 21671
            expect(value1.getText()).toContain('true');                                                                // 21672
            expect(value2.getText()).toContain('YES');                                                                 // 21673
                                                                                                                       // 21674
            element(by.model('checkboxModel.value1')).click();                                                         // 21675
            element(by.model('checkboxModel.value2')).click();                                                         // 21676
                                                                                                                       // 21677
            expect(value1.getText()).toContain('false');                                                               // 21678
            expect(value2.getText()).toContain('NO');                                                                  // 21679
          });                                                                                                          // 21680
        </file>                                                                                                        // 21681
      </example>                                                                                                       // 21682
   */                                                                                                                  // 21683
  'checkbox': checkboxInputType,                                                                                       // 21684
                                                                                                                       // 21685
  'hidden': noop,                                                                                                      // 21686
  'button': noop,                                                                                                      // 21687
  'submit': noop,                                                                                                      // 21688
  'reset': noop,                                                                                                       // 21689
  'file': noop                                                                                                         // 21690
};                                                                                                                     // 21691
                                                                                                                       // 21692
function stringBasedInputType(ctrl) {                                                                                  // 21693
  ctrl.$formatters.push(function(value) {                                                                              // 21694
    return ctrl.$isEmpty(value) ? value : value.toString();                                                            // 21695
  });                                                                                                                  // 21696
}                                                                                                                      // 21697
                                                                                                                       // 21698
function textInputType(scope, element, attr, ctrl, $sniffer, $browser) {                                               // 21699
  baseInputType(scope, element, attr, ctrl, $sniffer, $browser);                                                       // 21700
  stringBasedInputType(ctrl);                                                                                          // 21701
}                                                                                                                      // 21702
                                                                                                                       // 21703
function baseInputType(scope, element, attr, ctrl, $sniffer, $browser) {                                               // 21704
  var type = lowercase(element[0].type);                                                                               // 21705
                                                                                                                       // 21706
  // In composition mode, users are still inputing intermediate text buffer,                                           // 21707
  // hold the listener until composition is done.                                                                      // 21708
  // More about composition events: https://developer.mozilla.org/en-US/docs/Web/API/CompositionEvent                  // 21709
  if (!$sniffer.android) {                                                                                             // 21710
    var composing = false;                                                                                             // 21711
                                                                                                                       // 21712
    element.on('compositionstart', function(data) {                                                                    // 21713
      composing = true;                                                                                                // 21714
    });                                                                                                                // 21715
                                                                                                                       // 21716
    element.on('compositionend', function() {                                                                          // 21717
      composing = false;                                                                                               // 21718
      listener();                                                                                                      // 21719
    });                                                                                                                // 21720
  }                                                                                                                    // 21721
                                                                                                                       // 21722
  var listener = function(ev) {                                                                                        // 21723
    if (timeout) {                                                                                                     // 21724
      $browser.defer.cancel(timeout);                                                                                  // 21725
      timeout = null;                                                                                                  // 21726
    }                                                                                                                  // 21727
    if (composing) return;                                                                                             // 21728
    var value = element.val(),                                                                                         // 21729
        event = ev && ev.type;                                                                                         // 21730
                                                                                                                       // 21731
    // By default we will trim the value                                                                               // 21732
    // If the attribute ng-trim exists we will avoid trimming                                                          // 21733
    // If input type is 'password', the value is never trimmed                                                         // 21734
    if (type !== 'password' && (!attr.ngTrim || attr.ngTrim !== 'false')) {                                            // 21735
      value = trim(value);                                                                                             // 21736
    }                                                                                                                  // 21737
                                                                                                                       // 21738
    // If a control is suffering from bad input (due to native validators), browsers discard its                       // 21739
    // value, so it may be necessary to revalidate (by calling $setViewValue again) even if the                        // 21740
    // control's value is the same empty value twice in a row.                                                         // 21741
    if (ctrl.$viewValue !== value || (value === '' && ctrl.$$hasNativeValidators)) {                                   // 21742
      ctrl.$setViewValue(value, event);                                                                                // 21743
    }                                                                                                                  // 21744
  };                                                                                                                   // 21745
                                                                                                                       // 21746
  // if the browser does support "input" event, we are fine - except on IE9 which doesn't fire the                     // 21747
  // input event on backspace, delete or cut                                                                           // 21748
  if ($sniffer.hasEvent('input')) {                                                                                    // 21749
    element.on('input', listener);                                                                                     // 21750
  } else {                                                                                                             // 21751
    var timeout;                                                                                                       // 21752
                                                                                                                       // 21753
    var deferListener = function(ev, input, origValue) {                                                               // 21754
      if (!timeout) {                                                                                                  // 21755
        timeout = $browser.defer(function() {                                                                          // 21756
          timeout = null;                                                                                              // 21757
          if (!input || input.value !== origValue) {                                                                   // 21758
            listener(ev);                                                                                              // 21759
          }                                                                                                            // 21760
        });                                                                                                            // 21761
      }                                                                                                                // 21762
    };                                                                                                                 // 21763
                                                                                                                       // 21764
    element.on('keydown', function(event) {                                                                            // 21765
      var key = event.keyCode;                                                                                         // 21766
                                                                                                                       // 21767
      // ignore                                                                                                        // 21768
      //    command            modifiers                   arrows                                                      // 21769
      if (key === 91 || (15 < key && key < 19) || (37 <= key && key <= 40)) return;                                    // 21770
                                                                                                                       // 21771
      deferListener(event, this, this.value);                                                                          // 21772
    });                                                                                                                // 21773
                                                                                                                       // 21774
    // if user modifies input value using context menu in IE, we need "paste" and "cut" events to catch it             // 21775
    if ($sniffer.hasEvent('paste')) {                                                                                  // 21776
      element.on('paste cut', deferListener);                                                                          // 21777
    }                                                                                                                  // 21778
  }                                                                                                                    // 21779
                                                                                                                       // 21780
  // if user paste into input using mouse on older browser                                                             // 21781
  // or form autocomplete on newer browser, we need "change" event to catch it                                         // 21782
  element.on('change', listener);                                                                                      // 21783
                                                                                                                       // 21784
  ctrl.$render = function() {                                                                                          // 21785
    // Workaround for Firefox validation #12102.                                                                       // 21786
    var value = ctrl.$isEmpty(ctrl.$viewValue) ? '' : ctrl.$viewValue;                                                 // 21787
    if (element.val() !== value) {                                                                                     // 21788
      element.val(value);                                                                                              // 21789
    }                                                                                                                  // 21790
  };                                                                                                                   // 21791
}                                                                                                                      // 21792
                                                                                                                       // 21793
function weekParser(isoWeek, existingDate) {                                                                           // 21794
  if (isDate(isoWeek)) {                                                                                               // 21795
    return isoWeek;                                                                                                    // 21796
  }                                                                                                                    // 21797
                                                                                                                       // 21798
  if (isString(isoWeek)) {                                                                                             // 21799
    WEEK_REGEXP.lastIndex = 0;                                                                                         // 21800
    var parts = WEEK_REGEXP.exec(isoWeek);                                                                             // 21801
    if (parts) {                                                                                                       // 21802
      var year = +parts[1],                                                                                            // 21803
          week = +parts[2],                                                                                            // 21804
          hours = 0,                                                                                                   // 21805
          minutes = 0,                                                                                                 // 21806
          seconds = 0,                                                                                                 // 21807
          milliseconds = 0,                                                                                            // 21808
          firstThurs = getFirstThursdayOfYear(year),                                                                   // 21809
          addDays = (week - 1) * 7;                                                                                    // 21810
                                                                                                                       // 21811
      if (existingDate) {                                                                                              // 21812
        hours = existingDate.getHours();                                                                               // 21813
        minutes = existingDate.getMinutes();                                                                           // 21814
        seconds = existingDate.getSeconds();                                                                           // 21815
        milliseconds = existingDate.getMilliseconds();                                                                 // 21816
      }                                                                                                                // 21817
                                                                                                                       // 21818
      return new Date(year, 0, firstThurs.getDate() + addDays, hours, minutes, seconds, milliseconds);                 // 21819
    }                                                                                                                  // 21820
  }                                                                                                                    // 21821
                                                                                                                       // 21822
  return NaN;                                                                                                          // 21823
}                                                                                                                      // 21824
                                                                                                                       // 21825
function createDateParser(regexp, mapping) {                                                                           // 21826
  return function(iso, date) {                                                                                         // 21827
    var parts, map;                                                                                                    // 21828
                                                                                                                       // 21829
    if (isDate(iso)) {                                                                                                 // 21830
      return iso;                                                                                                      // 21831
    }                                                                                                                  // 21832
                                                                                                                       // 21833
    if (isString(iso)) {                                                                                               // 21834
      // When a date is JSON'ified to wraps itself inside of an extra                                                  // 21835
      // set of double quotes. This makes the date parsing code unable                                                 // 21836
      // to match the date string and parse it as a date.                                                              // 21837
      if (iso.charAt(0) == '"' && iso.charAt(iso.length - 1) == '"') {                                                 // 21838
        iso = iso.substring(1, iso.length - 1);                                                                        // 21839
      }                                                                                                                // 21840
      if (ISO_DATE_REGEXP.test(iso)) {                                                                                 // 21841
        return new Date(iso);                                                                                          // 21842
      }                                                                                                                // 21843
      regexp.lastIndex = 0;                                                                                            // 21844
      parts = regexp.exec(iso);                                                                                        // 21845
                                                                                                                       // 21846
      if (parts) {                                                                                                     // 21847
        parts.shift();                                                                                                 // 21848
        if (date) {                                                                                                    // 21849
          map = {                                                                                                      // 21850
            yyyy: date.getFullYear(),                                                                                  // 21851
            MM: date.getMonth() + 1,                                                                                   // 21852
            dd: date.getDate(),                                                                                        // 21853
            HH: date.getHours(),                                                                                       // 21854
            mm: date.getMinutes(),                                                                                     // 21855
            ss: date.getSeconds(),                                                                                     // 21856
            sss: date.getMilliseconds() / 1000                                                                         // 21857
          };                                                                                                           // 21858
        } else {                                                                                                       // 21859
          map = { yyyy: 1970, MM: 1, dd: 1, HH: 0, mm: 0, ss: 0, sss: 0 };                                             // 21860
        }                                                                                                              // 21861
                                                                                                                       // 21862
        forEach(parts, function(part, index) {                                                                         // 21863
          if (index < mapping.length) {                                                                                // 21864
            map[mapping[index]] = +part;                                                                               // 21865
          }                                                                                                            // 21866
        });                                                                                                            // 21867
        return new Date(map.yyyy, map.MM - 1, map.dd, map.HH, map.mm, map.ss || 0, map.sss * 1000 || 0);               // 21868
      }                                                                                                                // 21869
    }                                                                                                                  // 21870
                                                                                                                       // 21871
    return NaN;                                                                                                        // 21872
  };                                                                                                                   // 21873
}                                                                                                                      // 21874
                                                                                                                       // 21875
function createDateInputType(type, regexp, parseDate, format) {                                                        // 21876
  return function dynamicDateInputType(scope, element, attr, ctrl, $sniffer, $browser, $filter) {                      // 21877
    badInputChecker(scope, element, attr, ctrl);                                                                       // 21878
    baseInputType(scope, element, attr, ctrl, $sniffer, $browser);                                                     // 21879
    var timezone = ctrl && ctrl.$options && ctrl.$options.timezone;                                                    // 21880
    var previousDate;                                                                                                  // 21881
                                                                                                                       // 21882
    ctrl.$$parserName = type;                                                                                          // 21883
    ctrl.$parsers.push(function(value) {                                                                               // 21884
      if (ctrl.$isEmpty(value)) return null;                                                                           // 21885
      if (regexp.test(value)) {                                                                                        // 21886
        // Note: We cannot read ctrl.$modelValue, as there might be a different                                        // 21887
        // parser/formatter in the processing chain so that the model                                                  // 21888
        // contains some different data format!                                                                        // 21889
        var parsedDate = parseDate(value, previousDate);                                                               // 21890
        if (timezone) {                                                                                                // 21891
          parsedDate = convertTimezoneToLocal(parsedDate, timezone);                                                   // 21892
        }                                                                                                              // 21893
        return parsedDate;                                                                                             // 21894
      }                                                                                                                // 21895
      return undefined;                                                                                                // 21896
    });                                                                                                                // 21897
                                                                                                                       // 21898
    ctrl.$formatters.push(function(value) {                                                                            // 21899
      if (value && !isDate(value)) {                                                                                   // 21900
        throw ngModelMinErr('datefmt', 'Expected `{0}` to be a date', value);                                          // 21901
      }                                                                                                                // 21902
      if (isValidDate(value)) {                                                                                        // 21903
        previousDate = value;                                                                                          // 21904
        if (previousDate && timezone) {                                                                                // 21905
          previousDate = convertTimezoneToLocal(previousDate, timezone, true);                                         // 21906
        }                                                                                                              // 21907
        return $filter('date')(value, format, timezone);                                                               // 21908
      } else {                                                                                                         // 21909
        previousDate = null;                                                                                           // 21910
        return '';                                                                                                     // 21911
      }                                                                                                                // 21912
    });                                                                                                                // 21913
                                                                                                                       // 21914
    if (isDefined(attr.min) || attr.ngMin) {                                                                           // 21915
      var minVal;                                                                                                      // 21916
      ctrl.$validators.min = function(value) {                                                                         // 21917
        return !isValidDate(value) || isUndefined(minVal) || parseDate(value) >= minVal;                               // 21918
      };                                                                                                               // 21919
      attr.$observe('min', function(val) {                                                                             // 21920
        minVal = parseObservedDateValue(val);                                                                          // 21921
        ctrl.$validate();                                                                                              // 21922
      });                                                                                                              // 21923
    }                                                                                                                  // 21924
                                                                                                                       // 21925
    if (isDefined(attr.max) || attr.ngMax) {                                                                           // 21926
      var maxVal;                                                                                                      // 21927
      ctrl.$validators.max = function(value) {                                                                         // 21928
        return !isValidDate(value) || isUndefined(maxVal) || parseDate(value) <= maxVal;                               // 21929
      };                                                                                                               // 21930
      attr.$observe('max', function(val) {                                                                             // 21931
        maxVal = parseObservedDateValue(val);                                                                          // 21932
        ctrl.$validate();                                                                                              // 21933
      });                                                                                                              // 21934
    }                                                                                                                  // 21935
                                                                                                                       // 21936
    function isValidDate(value) {                                                                                      // 21937
      // Invalid Date: getTime() returns NaN                                                                           // 21938
      return value && !(value.getTime && value.getTime() !== value.getTime());                                         // 21939
    }                                                                                                                  // 21940
                                                                                                                       // 21941
    function parseObservedDateValue(val) {                                                                             // 21942
      return isDefined(val) && !isDate(val) ? parseDate(val) || undefined : val;                                       // 21943
    }                                                                                                                  // 21944
  };                                                                                                                   // 21945
}                                                                                                                      // 21946
                                                                                                                       // 21947
function badInputChecker(scope, element, attr, ctrl) {                                                                 // 21948
  var node = element[0];                                                                                               // 21949
  var nativeValidation = ctrl.$$hasNativeValidators = isObject(node.validity);                                         // 21950
  if (nativeValidation) {                                                                                              // 21951
    ctrl.$parsers.push(function(value) {                                                                               // 21952
      var validity = element.prop(VALIDITY_STATE_PROPERTY) || {};                                                      // 21953
      // Detect bug in FF35 for input[email] (https://bugzilla.mozilla.org/show_bug.cgi?id=1064430):                   // 21954
      // - also sets validity.badInput (should only be validity.typeMismatch).                                         // 21955
      // - see http://www.whatwg.org/specs/web-apps/current-work/multipage/forms.html#e-mail-state-(type=email)        // 21956
      // - can ignore this case as we can still read out the erroneous email...                                        // 21957
      return validity.badInput && !validity.typeMismatch ? undefined : value;                                          // 21958
    });                                                                                                                // 21959
  }                                                                                                                    // 21960
}                                                                                                                      // 21961
                                                                                                                       // 21962
function numberInputType(scope, element, attr, ctrl, $sniffer, $browser) {                                             // 21963
  badInputChecker(scope, element, attr, ctrl);                                                                         // 21964
  baseInputType(scope, element, attr, ctrl, $sniffer, $browser);                                                       // 21965
                                                                                                                       // 21966
  ctrl.$$parserName = 'number';                                                                                        // 21967
  ctrl.$parsers.push(function(value) {                                                                                 // 21968
    if (ctrl.$isEmpty(value))      return null;                                                                        // 21969
    if (NUMBER_REGEXP.test(value)) return parseFloat(value);                                                           // 21970
    return undefined;                                                                                                  // 21971
  });                                                                                                                  // 21972
                                                                                                                       // 21973
  ctrl.$formatters.push(function(value) {                                                                              // 21974
    if (!ctrl.$isEmpty(value)) {                                                                                       // 21975
      if (!isNumber(value)) {                                                                                          // 21976
        throw ngModelMinErr('numfmt', 'Expected `{0}` to be a number', value);                                         // 21977
      }                                                                                                                // 21978
      value = value.toString();                                                                                        // 21979
    }                                                                                                                  // 21980
    return value;                                                                                                      // 21981
  });                                                                                                                  // 21982
                                                                                                                       // 21983
  if (isDefined(attr.min) || attr.ngMin) {                                                                             // 21984
    var minVal;                                                                                                        // 21985
    ctrl.$validators.min = function(value) {                                                                           // 21986
      return ctrl.$isEmpty(value) || isUndefined(minVal) || value >= minVal;                                           // 21987
    };                                                                                                                 // 21988
                                                                                                                       // 21989
    attr.$observe('min', function(val) {                                                                               // 21990
      if (isDefined(val) && !isNumber(val)) {                                                                          // 21991
        val = parseFloat(val, 10);                                                                                     // 21992
      }                                                                                                                // 21993
      minVal = isNumber(val) && !isNaN(val) ? val : undefined;                                                         // 21994
      // TODO(matsko): implement validateLater to reduce number of validations                                         // 21995
      ctrl.$validate();                                                                                                // 21996
    });                                                                                                                // 21997
  }                                                                                                                    // 21998
                                                                                                                       // 21999
  if (isDefined(attr.max) || attr.ngMax) {                                                                             // 22000
    var maxVal;                                                                                                        // 22001
    ctrl.$validators.max = function(value) {                                                                           // 22002
      return ctrl.$isEmpty(value) || isUndefined(maxVal) || value <= maxVal;                                           // 22003
    };                                                                                                                 // 22004
                                                                                                                       // 22005
    attr.$observe('max', function(val) {                                                                               // 22006
      if (isDefined(val) && !isNumber(val)) {                                                                          // 22007
        val = parseFloat(val, 10);                                                                                     // 22008
      }                                                                                                                // 22009
      maxVal = isNumber(val) && !isNaN(val) ? val : undefined;                                                         // 22010
      // TODO(matsko): implement validateLater to reduce number of validations                                         // 22011
      ctrl.$validate();                                                                                                // 22012
    });                                                                                                                // 22013
  }                                                                                                                    // 22014
}                                                                                                                      // 22015
                                                                                                                       // 22016
function urlInputType(scope, element, attr, ctrl, $sniffer, $browser) {                                                // 22017
  // Note: no badInputChecker here by purpose as `url` is only a validation                                            // 22018
  // in browsers, i.e. we can always read out input.value even if it is not valid!                                     // 22019
  baseInputType(scope, element, attr, ctrl, $sniffer, $browser);                                                       // 22020
  stringBasedInputType(ctrl);                                                                                          // 22021
                                                                                                                       // 22022
  ctrl.$$parserName = 'url';                                                                                           // 22023
  ctrl.$validators.url = function(modelValue, viewValue) {                                                             // 22024
    var value = modelValue || viewValue;                                                                               // 22025
    return ctrl.$isEmpty(value) || URL_REGEXP.test(value);                                                             // 22026
  };                                                                                                                   // 22027
}                                                                                                                      // 22028
                                                                                                                       // 22029
function emailInputType(scope, element, attr, ctrl, $sniffer, $browser) {                                              // 22030
  // Note: no badInputChecker here by purpose as `url` is only a validation                                            // 22031
  // in browsers, i.e. we can always read out input.value even if it is not valid!                                     // 22032
  baseInputType(scope, element, attr, ctrl, $sniffer, $browser);                                                       // 22033
  stringBasedInputType(ctrl);                                                                                          // 22034
                                                                                                                       // 22035
  ctrl.$$parserName = 'email';                                                                                         // 22036
  ctrl.$validators.email = function(modelValue, viewValue) {                                                           // 22037
    var value = modelValue || viewValue;                                                                               // 22038
    return ctrl.$isEmpty(value) || EMAIL_REGEXP.test(value);                                                           // 22039
  };                                                                                                                   // 22040
}                                                                                                                      // 22041
                                                                                                                       // 22042
function radioInputType(scope, element, attr, ctrl) {                                                                  // 22043
  // make the name unique, if not defined                                                                              // 22044
  if (isUndefined(attr.name)) {                                                                                        // 22045
    element.attr('name', nextUid());                                                                                   // 22046
  }                                                                                                                    // 22047
                                                                                                                       // 22048
  var listener = function(ev) {                                                                                        // 22049
    if (element[0].checked) {                                                                                          // 22050
      ctrl.$setViewValue(attr.value, ev && ev.type);                                                                   // 22051
    }                                                                                                                  // 22052
  };                                                                                                                   // 22053
                                                                                                                       // 22054
  element.on('click', listener);                                                                                       // 22055
                                                                                                                       // 22056
  ctrl.$render = function() {                                                                                          // 22057
    var value = attr.value;                                                                                            // 22058
    element[0].checked = (value == ctrl.$viewValue);                                                                   // 22059
  };                                                                                                                   // 22060
                                                                                                                       // 22061
  attr.$observe('value', ctrl.$render);                                                                                // 22062
}                                                                                                                      // 22063
                                                                                                                       // 22064
function parseConstantExpr($parse, context, name, expression, fallback) {                                              // 22065
  var parseFn;                                                                                                         // 22066
  if (isDefined(expression)) {                                                                                         // 22067
    parseFn = $parse(expression);                                                                                      // 22068
    if (!parseFn.constant) {                                                                                           // 22069
      throw ngModelMinErr('constexpr', 'Expected constant expression for `{0}`, but saw ' +                            // 22070
                                   '`{1}`.', name, expression);                                                        // 22071
    }                                                                                                                  // 22072
    return parseFn(context);                                                                                           // 22073
  }                                                                                                                    // 22074
  return fallback;                                                                                                     // 22075
}                                                                                                                      // 22076
                                                                                                                       // 22077
function checkboxInputType(scope, element, attr, ctrl, $sniffer, $browser, $filter, $parse) {                          // 22078
  var trueValue = parseConstantExpr($parse, scope, 'ngTrueValue', attr.ngTrueValue, true);                             // 22079
  var falseValue = parseConstantExpr($parse, scope, 'ngFalseValue', attr.ngFalseValue, false);                         // 22080
                                                                                                                       // 22081
  var listener = function(ev) {                                                                                        // 22082
    ctrl.$setViewValue(element[0].checked, ev && ev.type);                                                             // 22083
  };                                                                                                                   // 22084
                                                                                                                       // 22085
  element.on('click', listener);                                                                                       // 22086
                                                                                                                       // 22087
  ctrl.$render = function() {                                                                                          // 22088
    element[0].checked = ctrl.$viewValue;                                                                              // 22089
  };                                                                                                                   // 22090
                                                                                                                       // 22091
  // Override the standard `$isEmpty` because the $viewValue of an empty checkbox is always set to `false`             // 22092
  // This is because of the parser below, which compares the `$modelValue` with `trueValue` to convert                 // 22093
  // it to a boolean.                                                                                                  // 22094
  ctrl.$isEmpty = function(value) {                                                                                    // 22095
    return value === false;                                                                                            // 22096
  };                                                                                                                   // 22097
                                                                                                                       // 22098
  ctrl.$formatters.push(function(value) {                                                                              // 22099
    return equals(value, trueValue);                                                                                   // 22100
  });                                                                                                                  // 22101
                                                                                                                       // 22102
  ctrl.$parsers.push(function(value) {                                                                                 // 22103
    return value ? trueValue : falseValue;                                                                             // 22104
  });                                                                                                                  // 22105
}                                                                                                                      // 22106
                                                                                                                       // 22107
                                                                                                                       // 22108
/**                                                                                                                    // 22109
 * @ngdoc directive                                                                                                    // 22110
 * @name textarea                                                                                                      // 22111
 * @restrict E                                                                                                         // 22112
 *                                                                                                                     // 22113
 * @description                                                                                                        // 22114
 * HTML textarea element control with angular data-binding. The data-binding and validation                            // 22115
 * properties of this element are exactly the same as those of the                                                     // 22116
 * {@link ng.directive:input input element}.                                                                           // 22117
 *                                                                                                                     // 22118
 * @param {string} ngModel Assignable angular expression to data-bind to.                                              // 22119
 * @param {string=} name Property name of the form under which the control is published.                               // 22120
 * @param {string=} required Sets `required` validation error key if the value is not entered.                         // 22121
 * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to                       // 22122
 *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of                        // 22123
 *    `required` when you want to data-bind to the `required` attribute.                                               // 22124
 * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than                     // 22125
 *    minlength.                                                                                                       // 22126
 * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than                      // 22127
 *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of any                   // 22128
 *    length.                                                                                                          // 22129
 * @param {string=} ngPattern Sets `pattern` validation error key if the ngModel value does not match                  // 22130
 *    a RegExp found by evaluating the Angular expression given in the attribute value.                                // 22131
 *    If the expression evaluates to a RegExp object, then this is used directly.                                      // 22132
 *    If the expression evaluates to a string, then it will be converted to a RegExp                                   // 22133
 *    after wrapping it in `^` and `$` characters. For instance, `"abc"` will be converted to                          // 22134
 *    `new RegExp('^abc$')`.<br />                                                                                     // 22135
 *    **Note:** Avoid using the `g` flag on the RegExp, as it will cause each successive search to                     // 22136
 *    start at the index of the last search's match, thus not taking the whole input value into                        // 22137
 *    account.                                                                                                         // 22138
 * @param {string=} ngChange Angular expression to be executed when input changes due to user                          // 22139
 *    interaction with the input element.                                                                              // 22140
 * @param {boolean=} [ngTrim=true] If set to false Angular will not automatically trim the input.                      // 22141
 */                                                                                                                    // 22142
                                                                                                                       // 22143
                                                                                                                       // 22144
/**                                                                                                                    // 22145
 * @ngdoc directive                                                                                                    // 22146
 * @name input                                                                                                         // 22147
 * @restrict E                                                                                                         // 22148
 *                                                                                                                     // 22149
 * @description                                                                                                        // 22150
 * HTML input element control. When used together with {@link ngModel `ngModel`}, it provides data-binding,            // 22151
 * input state control, and validation.                                                                                // 22152
 * Input control follows HTML5 input types and polyfills the HTML5 validation behavior for older browsers.             // 22153
 *                                                                                                                     // 22154
 * <div class="alert alert-warning">                                                                                   // 22155
 * **Note:** Not every feature offered is available for all input types.                                               // 22156
 * Specifically, data binding and event handling via `ng-model` is unsupported for `input[file]`.                      // 22157
 * </div>                                                                                                              // 22158
 *                                                                                                                     // 22159
 * @param {string} ngModel Assignable angular expression to data-bind to.                                              // 22160
 * @param {string=} name Property name of the form under which the control is published.                               // 22161
 * @param {string=} required Sets `required` validation error key if the value is not entered.                         // 22162
 * @param {boolean=} ngRequired Sets `required` attribute if set to true                                               // 22163
 * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than                     // 22164
 *    minlength.                                                                                                       // 22165
 * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than                      // 22166
 *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of any                   // 22167
 *    length.                                                                                                          // 22168
 * @param {string=} ngPattern Sets `pattern` validation error key if the ngModel value does not match                  // 22169
 *    a RegExp found by evaluating the Angular expression given in the attribute value.                                // 22170
 *    If the expression evaluates to a RegExp object, then this is used directly.                                      // 22171
 *    If the expression evaluates to a string, then it will be converted to a RegExp                                   // 22172
 *    after wrapping it in `^` and `$` characters. For instance, `"abc"` will be converted to                          // 22173
 *    `new RegExp('^abc$')`.<br />                                                                                     // 22174
 *    **Note:** Avoid using the `g` flag on the RegExp, as it will cause each successive search to                     // 22175
 *    start at the index of the last search's match, thus not taking the whole input value into                        // 22176
 *    account.                                                                                                         // 22177
 * @param {string=} ngChange Angular expression to be executed when input changes due to user                          // 22178
 *    interaction with the input element.                                                                              // 22179
 * @param {boolean=} [ngTrim=true] If set to false Angular will not automatically trim the input.                      // 22180
 *    This parameter is ignored for input[type=password] controls, which will never trim the                           // 22181
 *    input.                                                                                                           // 22182
 *                                                                                                                     // 22183
 * @example                                                                                                            // 22184
    <example name="input-directive" module="inputExample">                                                             // 22185
      <file name="index.html">                                                                                         // 22186
       <script>                                                                                                        // 22187
          angular.module('inputExample', [])                                                                           // 22188
            .controller('ExampleController', ['$scope', function($scope) {                                             // 22189
              $scope.user = {name: 'guest', last: 'visitor'};                                                          // 22190
            }]);                                                                                                       // 22191
       </script>                                                                                                       // 22192
       <div ng-controller="ExampleController">                                                                         // 22193
         <form name="myForm">                                                                                          // 22194
           <label>                                                                                                     // 22195
              User name:                                                                                               // 22196
              <input type="text" name="userName" ng-model="user.name" required>                                        // 22197
           </label>                                                                                                    // 22198
           <div role="alert">                                                                                          // 22199
             <span class="error" ng-show="myForm.userName.$error.required">                                            // 22200
              Required!</span>                                                                                         // 22201
           </div>                                                                                                      // 22202
           <label>                                                                                                     // 22203
              Last name:                                                                                               // 22204
              <input type="text" name="lastName" ng-model="user.last"                                                  // 22205
              ng-minlength="3" ng-maxlength="10">                                                                      // 22206
           </label>                                                                                                    // 22207
           <div role="alert">                                                                                          // 22208
             <span class="error" ng-show="myForm.lastName.$error.minlength">                                           // 22209
               Too short!</span>                                                                                       // 22210
             <span class="error" ng-show="myForm.lastName.$error.maxlength">                                           // 22211
               Too long!</span>                                                                                        // 22212
           </div>                                                                                                      // 22213
         </form>                                                                                                       // 22214
         <hr>                                                                                                          // 22215
         <tt>user = {{user}}</tt><br/>                                                                                 // 22216
         <tt>myForm.userName.$valid = {{myForm.userName.$valid}}</tt><br/>                                             // 22217
         <tt>myForm.userName.$error = {{myForm.userName.$error}}</tt><br/>                                             // 22218
         <tt>myForm.lastName.$valid = {{myForm.lastName.$valid}}</tt><br/>                                             // 22219
         <tt>myForm.lastName.$error = {{myForm.lastName.$error}}</tt><br/>                                             // 22220
         <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>                                                               // 22221
         <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>                                           // 22222
         <tt>myForm.$error.minlength = {{!!myForm.$error.minlength}}</tt><br/>                                         // 22223
         <tt>myForm.$error.maxlength = {{!!myForm.$error.maxlength}}</tt><br/>                                         // 22224
       </div>                                                                                                          // 22225
      </file>                                                                                                          // 22226
      <file name="protractor.js" type="protractor">                                                                    // 22227
        var user = element(by.exactBinding('user'));                                                                   // 22228
        var userNameValid = element(by.binding('myForm.userName.$valid'));                                             // 22229
        var lastNameValid = element(by.binding('myForm.lastName.$valid'));                                             // 22230
        var lastNameError = element(by.binding('myForm.lastName.$error'));                                             // 22231
        var formValid = element(by.binding('myForm.$valid'));                                                          // 22232
        var userNameInput = element(by.model('user.name'));                                                            // 22233
        var userLastInput = element(by.model('user.last'));                                                            // 22234
                                                                                                                       // 22235
        it('should initialize to model', function() {                                                                  // 22236
          expect(user.getText()).toContain('{"name":"guest","last":"visitor"}');                                       // 22237
          expect(userNameValid.getText()).toContain('true');                                                           // 22238
          expect(formValid.getText()).toContain('true');                                                               // 22239
        });                                                                                                            // 22240
                                                                                                                       // 22241
        it('should be invalid if empty when required', function() {                                                    // 22242
          userNameInput.clear();                                                                                       // 22243
          userNameInput.sendKeys('');                                                                                  // 22244
                                                                                                                       // 22245
          expect(user.getText()).toContain('{"last":"visitor"}');                                                      // 22246
          expect(userNameValid.getText()).toContain('false');                                                          // 22247
          expect(formValid.getText()).toContain('false');                                                              // 22248
        });                                                                                                            // 22249
                                                                                                                       // 22250
        it('should be valid if empty when min length is set', function() {                                             // 22251
          userLastInput.clear();                                                                                       // 22252
          userLastInput.sendKeys('');                                                                                  // 22253
                                                                                                                       // 22254
          expect(user.getText()).toContain('{"name":"guest","last":""}');                                              // 22255
          expect(lastNameValid.getText()).toContain('true');                                                           // 22256
          expect(formValid.getText()).toContain('true');                                                               // 22257
        });                                                                                                            // 22258
                                                                                                                       // 22259
        it('should be invalid if less than required min length', function() {                                          // 22260
          userLastInput.clear();                                                                                       // 22261
          userLastInput.sendKeys('xx');                                                                                // 22262
                                                                                                                       // 22263
          expect(user.getText()).toContain('{"name":"guest"}');                                                        // 22264
          expect(lastNameValid.getText()).toContain('false');                                                          // 22265
          expect(lastNameError.getText()).toContain('minlength');                                                      // 22266
          expect(formValid.getText()).toContain('false');                                                              // 22267
        });                                                                                                            // 22268
                                                                                                                       // 22269
        it('should be invalid if longer than max length', function() {                                                 // 22270
          userLastInput.clear();                                                                                       // 22271
          userLastInput.sendKeys('some ridiculously long name');                                                       // 22272
                                                                                                                       // 22273
          expect(user.getText()).toContain('{"name":"guest"}');                                                        // 22274
          expect(lastNameValid.getText()).toContain('false');                                                          // 22275
          expect(lastNameError.getText()).toContain('maxlength');                                                      // 22276
          expect(formValid.getText()).toContain('false');                                                              // 22277
        });                                                                                                            // 22278
      </file>                                                                                                          // 22279
    </example>                                                                                                         // 22280
 */                                                                                                                    // 22281
var inputDirective = ['$browser', '$sniffer', '$filter', '$parse',                                                     // 22282
    function($browser, $sniffer, $filter, $parse) {                                                                    // 22283
  return {                                                                                                             // 22284
    restrict: 'E',                                                                                                     // 22285
    require: ['?ngModel'],                                                                                             // 22286
    link: {                                                                                                            // 22287
      pre: function(scope, element, attr, ctrls) {                                                                     // 22288
        if (ctrls[0]) {                                                                                                // 22289
          (inputType[lowercase(attr.type)] || inputType.text)(scope, element, attr, ctrls[0], $sniffer,                // 22290
                                                              $browser, $filter, $parse);                              // 22291
        }                                                                                                              // 22292
      }                                                                                                                // 22293
    }                                                                                                                  // 22294
  };                                                                                                                   // 22295
}];                                                                                                                    // 22296
                                                                                                                       // 22297
                                                                                                                       // 22298
                                                                                                                       // 22299
var CONSTANT_VALUE_REGEXP = /^(true|false|\d+)$/;                                                                      // 22300
/**                                                                                                                    // 22301
 * @ngdoc directive                                                                                                    // 22302
 * @name ngValue                                                                                                       // 22303
 *                                                                                                                     // 22304
 * @description                                                                                                        // 22305
 * Binds the given expression to the value of `<option>` or {@link input[radio] `input[radio]`},                       // 22306
 * so that when the element is selected, the {@link ngModel `ngModel`} of that element is set to                       // 22307
 * the bound value.                                                                                                    // 22308
 *                                                                                                                     // 22309
 * `ngValue` is useful when dynamically generating lists of radio buttons using                                        // 22310
 * {@link ngRepeat `ngRepeat`}, as shown below.                                                                        // 22311
 *                                                                                                                     // 22312
 * Likewise, `ngValue` can be used to generate `<option>` elements for                                                 // 22313
 * the {@link select `select`} element. In that case however, only strings are supported                               // 22314
 * for the `value `attribute, so the resulting `ngModel` will always be a string.                                      // 22315
 * Support for `select` models with non-string values is available via `ngOptions`.                                    // 22316
 *                                                                                                                     // 22317
 * @element input                                                                                                      // 22318
 * @param {string=} ngValue angular expression, whose value will be bound to the `value` attribute                     // 22319
 *   of the `input` element                                                                                            // 22320
 *                                                                                                                     // 22321
 * @example                                                                                                            // 22322
    <example name="ngValue-directive" module="valueExample">                                                           // 22323
      <file name="index.html">                                                                                         // 22324
       <script>                                                                                                        // 22325
          angular.module('valueExample', [])                                                                           // 22326
            .controller('ExampleController', ['$scope', function($scope) {                                             // 22327
              $scope.names = ['pizza', 'unicorns', 'robots'];                                                          // 22328
              $scope.my = { favorite: 'unicorns' };                                                                    // 22329
            }]);                                                                                                       // 22330
       </script>                                                                                                       // 22331
        <form ng-controller="ExampleController">                                                                       // 22332
          <h2>Which is your favorite?</h2>                                                                             // 22333
            <label ng-repeat="name in names" for="{{name}}">                                                           // 22334
              {{name}}                                                                                                 // 22335
              <input type="radio"                                                                                      // 22336
                     ng-model="my.favorite"                                                                            // 22337
                     ng-value="name"                                                                                   // 22338
                     id="{{name}}"                                                                                     // 22339
                     name="favorite">                                                                                  // 22340
            </label>                                                                                                   // 22341
          <div>You chose {{my.favorite}}</div>                                                                         // 22342
        </form>                                                                                                        // 22343
      </file>                                                                                                          // 22344
      <file name="protractor.js" type="protractor">                                                                    // 22345
        var favorite = element(by.binding('my.favorite'));                                                             // 22346
                                                                                                                       // 22347
        it('should initialize to model', function() {                                                                  // 22348
          expect(favorite.getText()).toContain('unicorns');                                                            // 22349
        });                                                                                                            // 22350
        it('should bind the values to the inputs', function() {                                                        // 22351
          element.all(by.model('my.favorite')).get(0).click();                                                         // 22352
          expect(favorite.getText()).toContain('pizza');                                                               // 22353
        });                                                                                                            // 22354
      </file>                                                                                                          // 22355
    </example>                                                                                                         // 22356
 */                                                                                                                    // 22357
var ngValueDirective = function() {                                                                                    // 22358
  return {                                                                                                             // 22359
    restrict: 'A',                                                                                                     // 22360
    priority: 100,                                                                                                     // 22361
    compile: function(tpl, tplAttr) {                                                                                  // 22362
      if (CONSTANT_VALUE_REGEXP.test(tplAttr.ngValue)) {                                                               // 22363
        return function ngValueConstantLink(scope, elm, attr) {                                                        // 22364
          attr.$set('value', scope.$eval(attr.ngValue));                                                               // 22365
        };                                                                                                             // 22366
      } else {                                                                                                         // 22367
        return function ngValueLink(scope, elm, attr) {                                                                // 22368
          scope.$watch(attr.ngValue, function valueWatchAction(value) {                                                // 22369
            attr.$set('value', value);                                                                                 // 22370
          });                                                                                                          // 22371
        };                                                                                                             // 22372
      }                                                                                                                // 22373
    }                                                                                                                  // 22374
  };                                                                                                                   // 22375
};                                                                                                                     // 22376
                                                                                                                       // 22377
/**                                                                                                                    // 22378
 * @ngdoc directive                                                                                                    // 22379
 * @name ngBind                                                                                                        // 22380
 * @restrict AC                                                                                                        // 22381
 *                                                                                                                     // 22382
 * @description                                                                                                        // 22383
 * The `ngBind` attribute tells Angular to replace the text content of the specified HTML element                      // 22384
 * with the value of a given expression, and to update the text content when the value of that                         // 22385
 * expression changes.                                                                                                 // 22386
 *                                                                                                                     // 22387
 * Typically, you don't use `ngBind` directly, but instead you use the double curly markup like                        // 22388
 * `{{ expression }}` which is similar but less verbose.                                                               // 22389
 *                                                                                                                     // 22390
 * It is preferable to use `ngBind` instead of `{{ expression }}` if a template is momentarily                         // 22391
 * displayed by the browser in its raw state before Angular compiles it. Since `ngBind` is an                          // 22392
 * element attribute, it makes the bindings invisible to the user while the page is loading.                           // 22393
 *                                                                                                                     // 22394
 * An alternative solution to this problem would be using the                                                          // 22395
 * {@link ng.directive:ngCloak ngCloak} directive.                                                                     // 22396
 *                                                                                                                     // 22397
 *                                                                                                                     // 22398
 * @element ANY                                                                                                        // 22399
 * @param {expression} ngBind {@link guide/expression Expression} to evaluate.                                         // 22400
 *                                                                                                                     // 22401
 * @example                                                                                                            // 22402
 * Enter a name in the Live Preview text box; the greeting below the text box changes instantly.                       // 22403
   <example module="bindExample">                                                                                      // 22404
     <file name="index.html">                                                                                          // 22405
       <script>                                                                                                        // 22406
         angular.module('bindExample', [])                                                                             // 22407
           .controller('ExampleController', ['$scope', function($scope) {                                              // 22408
             $scope.name = 'Whirled';                                                                                  // 22409
           }]);                                                                                                        // 22410
       </script>                                                                                                       // 22411
       <div ng-controller="ExampleController">                                                                         // 22412
         <label>Enter name: <input type="text" ng-model="name"></label><br>                                            // 22413
         Hello <span ng-bind="name"></span>!                                                                           // 22414
       </div>                                                                                                          // 22415
     </file>                                                                                                           // 22416
     <file name="protractor.js" type="protractor">                                                                     // 22417
       it('should check ng-bind', function() {                                                                         // 22418
         var nameInput = element(by.model('name'));                                                                    // 22419
                                                                                                                       // 22420
         expect(element(by.binding('name')).getText()).toBe('Whirled');                                                // 22421
         nameInput.clear();                                                                                            // 22422
         nameInput.sendKeys('world');                                                                                  // 22423
         expect(element(by.binding('name')).getText()).toBe('world');                                                  // 22424
       });                                                                                                             // 22425
     </file>                                                                                                           // 22426
   </example>                                                                                                          // 22427
 */                                                                                                                    // 22428
var ngBindDirective = ['$compile', function($compile) {                                                                // 22429
  return {                                                                                                             // 22430
    restrict: 'AC',                                                                                                    // 22431
    compile: function ngBindCompile(templateElement) {                                                                 // 22432
      $compile.$$addBindingClass(templateElement);                                                                     // 22433
      return function ngBindLink(scope, element, attr) {                                                               // 22434
        $compile.$$addBindingInfo(element, attr.ngBind);                                                               // 22435
        element = element[0];                                                                                          // 22436
        scope.$watch(attr.ngBind, function ngBindWatchAction(value) {                                                  // 22437
          element.textContent = isUndefined(value) ? '' : value;                                                       // 22438
        });                                                                                                            // 22439
      };                                                                                                               // 22440
    }                                                                                                                  // 22441
  };                                                                                                                   // 22442
}];                                                                                                                    // 22443
                                                                                                                       // 22444
                                                                                                                       // 22445
/**                                                                                                                    // 22446
 * @ngdoc directive                                                                                                    // 22447
 * @name ngBindTemplate                                                                                                // 22448
 *                                                                                                                     // 22449
 * @description                                                                                                        // 22450
 * The `ngBindTemplate` directive specifies that the element                                                           // 22451
 * text content should be replaced with the interpolation of the template                                              // 22452
 * in the `ngBindTemplate` attribute.                                                                                  // 22453
 * Unlike `ngBind`, the `ngBindTemplate` can contain multiple `{{` `}}`                                                // 22454
 * expressions. This directive is needed since some HTML elements                                                      // 22455
 * (such as TITLE and OPTION) cannot contain SPAN elements.                                                            // 22456
 *                                                                                                                     // 22457
 * @element ANY                                                                                                        // 22458
 * @param {string} ngBindTemplate template of form                                                                     // 22459
 *   <tt>{{</tt> <tt>expression</tt> <tt>}}</tt> to eval.                                                              // 22460
 *                                                                                                                     // 22461
 * @example                                                                                                            // 22462
 * Try it here: enter text in text box and watch the greeting change.                                                  // 22463
   <example module="bindExample">                                                                                      // 22464
     <file name="index.html">                                                                                          // 22465
       <script>                                                                                                        // 22466
         angular.module('bindExample', [])                                                                             // 22467
           .controller('ExampleController', ['$scope', function($scope) {                                              // 22468
             $scope.salutation = 'Hello';                                                                              // 22469
             $scope.name = 'World';                                                                                    // 22470
           }]);                                                                                                        // 22471
       </script>                                                                                                       // 22472
       <div ng-controller="ExampleController">                                                                         // 22473
        <label>Salutation: <input type="text" ng-model="salutation"></label><br>                                       // 22474
        <label>Name: <input type="text" ng-model="name"></label><br>                                                   // 22475
        <pre ng-bind-template="{{salutation}} {{name}}!"></pre>                                                        // 22476
       </div>                                                                                                          // 22477
     </file>                                                                                                           // 22478
     <file name="protractor.js" type="protractor">                                                                     // 22479
       it('should check ng-bind', function() {                                                                         // 22480
         var salutationElem = element(by.binding('salutation'));                                                       // 22481
         var salutationInput = element(by.model('salutation'));                                                        // 22482
         var nameInput = element(by.model('name'));                                                                    // 22483
                                                                                                                       // 22484
         expect(salutationElem.getText()).toBe('Hello World!');                                                        // 22485
                                                                                                                       // 22486
         salutationInput.clear();                                                                                      // 22487
         salutationInput.sendKeys('Greetings');                                                                        // 22488
         nameInput.clear();                                                                                            // 22489
         nameInput.sendKeys('user');                                                                                   // 22490
                                                                                                                       // 22491
         expect(salutationElem.getText()).toBe('Greetings user!');                                                     // 22492
       });                                                                                                             // 22493
     </file>                                                                                                           // 22494
   </example>                                                                                                          // 22495
 */                                                                                                                    // 22496
var ngBindTemplateDirective = ['$interpolate', '$compile', function($interpolate, $compile) {                          // 22497
  return {                                                                                                             // 22498
    compile: function ngBindTemplateCompile(templateElement) {                                                         // 22499
      $compile.$$addBindingClass(templateElement);                                                                     // 22500
      return function ngBindTemplateLink(scope, element, attr) {                                                       // 22501
        var interpolateFn = $interpolate(element.attr(attr.$attr.ngBindTemplate));                                     // 22502
        $compile.$$addBindingInfo(element, interpolateFn.expressions);                                                 // 22503
        element = element[0];                                                                                          // 22504
        attr.$observe('ngBindTemplate', function(value) {                                                              // 22505
          element.textContent = isUndefined(value) ? '' : value;                                                       // 22506
        });                                                                                                            // 22507
      };                                                                                                               // 22508
    }                                                                                                                  // 22509
  };                                                                                                                   // 22510
}];                                                                                                                    // 22511
                                                                                                                       // 22512
                                                                                                                       // 22513
/**                                                                                                                    // 22514
 * @ngdoc directive                                                                                                    // 22515
 * @name ngBindHtml                                                                                                    // 22516
 *                                                                                                                     // 22517
 * @description                                                                                                        // 22518
 * Evaluates the expression and inserts the resulting HTML into the element in a secure way. By default,               // 22519
 * the resulting HTML content will be sanitized using the {@link ngSanitize.$sanitize $sanitize} service.              // 22520
 * To utilize this functionality, ensure that `$sanitize` is available, for example, by including {@link               // 22521
 * ngSanitize} in your module's dependencies (not in core Angular). In order to use {@link ngSanitize}                 // 22522
 * in your module's dependencies, you need to include "angular-sanitize.js" in your application.                       // 22523
 *                                                                                                                     // 22524
 * You may also bypass sanitization for values you know are safe. To do so, bind to                                    // 22525
 * an explicitly trusted value via {@link ng.$sce#trustAsHtml $sce.trustAsHtml}.  See the example                      // 22526
 * under {@link ng.$sce#show-me-an-example-using-sce- Strict Contextual Escaping (SCE)}.                               // 22527
 *                                                                                                                     // 22528
 * Note: If a `$sanitize` service is unavailable and the bound value isn't explicitly trusted, you                     // 22529
 * will have an exception (instead of an exploit.)                                                                     // 22530
 *                                                                                                                     // 22531
 * @element ANY                                                                                                        // 22532
 * @param {expression} ngBindHtml {@link guide/expression Expression} to evaluate.                                     // 22533
 *                                                                                                                     // 22534
 * @example                                                                                                            // 22535
                                                                                                                       // 22536
   <example module="bindHtmlExample" deps="angular-sanitize.js">                                                       // 22537
     <file name="index.html">                                                                                          // 22538
       <div ng-controller="ExampleController">                                                                         // 22539
        <p ng-bind-html="myHTML"></p>                                                                                  // 22540
       </div>                                                                                                          // 22541
     </file>                                                                                                           // 22542
                                                                                                                       // 22543
     <file name="script.js">                                                                                           // 22544
       angular.module('bindHtmlExample', ['ngSanitize'])                                                               // 22545
         .controller('ExampleController', ['$scope', function($scope) {                                                // 22546
           $scope.myHTML =                                                                                             // 22547
              'I am an <code>HTML</code>string with ' +                                                                // 22548
              '<a href="#">links!</a> and other <em>stuff</em>';                                                       // 22549
         }]);                                                                                                          // 22550
     </file>                                                                                                           // 22551
                                                                                                                       // 22552
     <file name="protractor.js" type="protractor">                                                                     // 22553
       it('should check ng-bind-html', function() {                                                                    // 22554
         expect(element(by.binding('myHTML')).getText()).toBe(                                                         // 22555
             'I am an HTMLstring with links! and other stuff');                                                        // 22556
       });                                                                                                             // 22557
     </file>                                                                                                           // 22558
   </example>                                                                                                          // 22559
 */                                                                                                                    // 22560
var ngBindHtmlDirective = ['$sce', '$parse', '$compile', function($sce, $parse, $compile) {                            // 22561
  return {                                                                                                             // 22562
    restrict: 'A',                                                                                                     // 22563
    compile: function ngBindHtmlCompile(tElement, tAttrs) {                                                            // 22564
      var ngBindHtmlGetter = $parse(tAttrs.ngBindHtml);                                                                // 22565
      var ngBindHtmlWatch = $parse(tAttrs.ngBindHtml, function getStringValue(value) {                                 // 22566
        return (value || '').toString();                                                                               // 22567
      });                                                                                                              // 22568
      $compile.$$addBindingClass(tElement);                                                                            // 22569
                                                                                                                       // 22570
      return function ngBindHtmlLink(scope, element, attr) {                                                           // 22571
        $compile.$$addBindingInfo(element, attr.ngBindHtml);                                                           // 22572
                                                                                                                       // 22573
        scope.$watch(ngBindHtmlWatch, function ngBindHtmlWatchAction() {                                               // 22574
          // we re-evaluate the expr because we want a TrustedValueHolderType                                          // 22575
          // for $sce, not a string                                                                                    // 22576
          element.html($sce.getTrustedHtml(ngBindHtmlGetter(scope)) || '');                                            // 22577
        });                                                                                                            // 22578
      };                                                                                                               // 22579
    }                                                                                                                  // 22580
  };                                                                                                                   // 22581
}];                                                                                                                    // 22582
                                                                                                                       // 22583
/**                                                                                                                    // 22584
 * @ngdoc directive                                                                                                    // 22585
 * @name ngChange                                                                                                      // 22586
 *                                                                                                                     // 22587
 * @description                                                                                                        // 22588
 * Evaluate the given expression when the user changes the input.                                                      // 22589
 * The expression is evaluated immediately, unlike the JavaScript onchange event                                       // 22590
 * which only triggers at the end of a change (usually, when the user leaves the                                       // 22591
 * form element or presses the return key).                                                                            // 22592
 *                                                                                                                     // 22593
 * The `ngChange` expression is only evaluated when a change in the input value causes                                 // 22594
 * a new value to be committed to the model.                                                                           // 22595
 *                                                                                                                     // 22596
 * It will not be evaluated:                                                                                           // 22597
 * * if the value returned from the `$parsers` transformation pipeline has not changed                                 // 22598
 * * if the input has continued to be invalid since the model will stay `null`                                         // 22599
 * * if the model is changed programmatically and not by a change to the input value                                   // 22600
 *                                                                                                                     // 22601
 *                                                                                                                     // 22602
 * Note, this directive requires `ngModel` to be present.                                                              // 22603
 *                                                                                                                     // 22604
 * @element input                                                                                                      // 22605
 * @param {expression} ngChange {@link guide/expression Expression} to evaluate upon change                            // 22606
 * in input value.                                                                                                     // 22607
 *                                                                                                                     // 22608
 * @example                                                                                                            // 22609
 * <example name="ngChange-directive" module="changeExample">                                                          // 22610
 *   <file name="index.html">                                                                                          // 22611
 *     <script>                                                                                                        // 22612
 *       angular.module('changeExample', [])                                                                           // 22613
 *         .controller('ExampleController', ['$scope', function($scope) {                                              // 22614
 *           $scope.counter = 0;                                                                                       // 22615
 *           $scope.change = function() {                                                                              // 22616
 *             $scope.counter++;                                                                                       // 22617
 *           };                                                                                                        // 22618
 *         }]);                                                                                                        // 22619
 *     </script>                                                                                                       // 22620
 *     <div ng-controller="ExampleController">                                                                         // 22621
 *       <input type="checkbox" ng-model="confirmed" ng-change="change()" id="ng-change-example1" />                   // 22622
 *       <input type="checkbox" ng-model="confirmed" id="ng-change-example2" />                                        // 22623
 *       <label for="ng-change-example2">Confirmed</label><br />                                                       // 22624
 *       <tt>debug = {{confirmed}}</tt><br/>                                                                           // 22625
 *       <tt>counter = {{counter}}</tt><br/>                                                                           // 22626
 *     </div>                                                                                                          // 22627
 *   </file>                                                                                                           // 22628
 *   <file name="protractor.js" type="protractor">                                                                     // 22629
 *     var counter = element(by.binding('counter'));                                                                   // 22630
 *     var debug = element(by.binding('confirmed'));                                                                   // 22631
 *                                                                                                                     // 22632
 *     it('should evaluate the expression if changing from view', function() {                                         // 22633
 *       expect(counter.getText()).toContain('0');                                                                     // 22634
 *                                                                                                                     // 22635
 *       element(by.id('ng-change-example1')).click();                                                                 // 22636
 *                                                                                                                     // 22637
 *       expect(counter.getText()).toContain('1');                                                                     // 22638
 *       expect(debug.getText()).toContain('true');                                                                    // 22639
 *     });                                                                                                             // 22640
 *                                                                                                                     // 22641
 *     it('should not evaluate the expression if changing from model', function() {                                    // 22642
 *       element(by.id('ng-change-example2')).click();                                                                 // 22643
                                                                                                                       // 22644
 *       expect(counter.getText()).toContain('0');                                                                     // 22645
 *       expect(debug.getText()).toContain('true');                                                                    // 22646
 *     });                                                                                                             // 22647
 *   </file>                                                                                                           // 22648
 * </example>                                                                                                          // 22649
 */                                                                                                                    // 22650
var ngChangeDirective = valueFn({                                                                                      // 22651
  restrict: 'A',                                                                                                       // 22652
  require: 'ngModel',                                                                                                  // 22653
  link: function(scope, element, attr, ctrl) {                                                                         // 22654
    ctrl.$viewChangeListeners.push(function() {                                                                        // 22655
      scope.$eval(attr.ngChange);                                                                                      // 22656
    });                                                                                                                // 22657
  }                                                                                                                    // 22658
});                                                                                                                    // 22659
                                                                                                                       // 22660
function classDirective(name, selector) {                                                                              // 22661
  name = 'ngClass' + name;                                                                                             // 22662
  return ['$animate', function($animate) {                                                                             // 22663
    return {                                                                                                           // 22664
      restrict: 'AC',                                                                                                  // 22665
      link: function(scope, element, attr) {                                                                           // 22666
        var oldVal;                                                                                                    // 22667
                                                                                                                       // 22668
        scope.$watch(attr[name], ngClassWatchAction, true);                                                            // 22669
                                                                                                                       // 22670
        attr.$observe('class', function(value) {                                                                       // 22671
          ngClassWatchAction(scope.$eval(attr[name]));                                                                 // 22672
        });                                                                                                            // 22673
                                                                                                                       // 22674
                                                                                                                       // 22675
        if (name !== 'ngClass') {                                                                                      // 22676
          scope.$watch('$index', function($index, old$index) {                                                         // 22677
            // jshint bitwise: false                                                                                   // 22678
            var mod = $index & 1;                                                                                      // 22679
            if (mod !== (old$index & 1)) {                                                                             // 22680
              var classes = arrayClasses(scope.$eval(attr[name]));                                                     // 22681
              mod === selector ?                                                                                       // 22682
                addClasses(classes) :                                                                                  // 22683
                removeClasses(classes);                                                                                // 22684
            }                                                                                                          // 22685
          });                                                                                                          // 22686
        }                                                                                                              // 22687
                                                                                                                       // 22688
        function addClasses(classes) {                                                                                 // 22689
          var newClasses = digestClassCounts(classes, 1);                                                              // 22690
          attr.$addClass(newClasses);                                                                                  // 22691
        }                                                                                                              // 22692
                                                                                                                       // 22693
        function removeClasses(classes) {                                                                              // 22694
          var newClasses = digestClassCounts(classes, -1);                                                             // 22695
          attr.$removeClass(newClasses);                                                                               // 22696
        }                                                                                                              // 22697
                                                                                                                       // 22698
        function digestClassCounts(classes, count) {                                                                   // 22699
          // Use createMap() to prevent class assumptions involving property                                           // 22700
          // names in Object.prototype                                                                                 // 22701
          var classCounts = element.data('$classCounts') || createMap();                                               // 22702
          var classesToUpdate = [];                                                                                    // 22703
          forEach(classes, function(className) {                                                                       // 22704
            if (count > 0 || classCounts[className]) {                                                                 // 22705
              classCounts[className] = (classCounts[className] || 0) + count;                                          // 22706
              if (classCounts[className] === +(count > 0)) {                                                           // 22707
                classesToUpdate.push(className);                                                                       // 22708
              }                                                                                                        // 22709
            }                                                                                                          // 22710
          });                                                                                                          // 22711
          element.data('$classCounts', classCounts);                                                                   // 22712
          return classesToUpdate.join(' ');                                                                            // 22713
        }                                                                                                              // 22714
                                                                                                                       // 22715
        function updateClasses(oldClasses, newClasses) {                                                               // 22716
          var toAdd = arrayDifference(newClasses, oldClasses);                                                         // 22717
          var toRemove = arrayDifference(oldClasses, newClasses);                                                      // 22718
          toAdd = digestClassCounts(toAdd, 1);                                                                         // 22719
          toRemove = digestClassCounts(toRemove, -1);                                                                  // 22720
          if (toAdd && toAdd.length) {                                                                                 // 22721
            $animate.addClass(element, toAdd);                                                                         // 22722
          }                                                                                                            // 22723
          if (toRemove && toRemove.length) {                                                                           // 22724
            $animate.removeClass(element, toRemove);                                                                   // 22725
          }                                                                                                            // 22726
        }                                                                                                              // 22727
                                                                                                                       // 22728
        function ngClassWatchAction(newVal) {                                                                          // 22729
          if (selector === true || scope.$index % 2 === selector) {                                                    // 22730
            var newClasses = arrayClasses(newVal || []);                                                               // 22731
            if (!oldVal) {                                                                                             // 22732
              addClasses(newClasses);                                                                                  // 22733
            } else if (!equals(newVal,oldVal)) {                                                                       // 22734
              var oldClasses = arrayClasses(oldVal);                                                                   // 22735
              updateClasses(oldClasses, newClasses);                                                                   // 22736
            }                                                                                                          // 22737
          }                                                                                                            // 22738
          oldVal = shallowCopy(newVal);                                                                                // 22739
        }                                                                                                              // 22740
      }                                                                                                                // 22741
    };                                                                                                                 // 22742
                                                                                                                       // 22743
    function arrayDifference(tokens1, tokens2) {                                                                       // 22744
      var values = [];                                                                                                 // 22745
                                                                                                                       // 22746
      outer:                                                                                                           // 22747
      for (var i = 0; i < tokens1.length; i++) {                                                                       // 22748
        var token = tokens1[i];                                                                                        // 22749
        for (var j = 0; j < tokens2.length; j++) {                                                                     // 22750
          if (token == tokens2[j]) continue outer;                                                                     // 22751
        }                                                                                                              // 22752
        values.push(token);                                                                                            // 22753
      }                                                                                                                // 22754
      return values;                                                                                                   // 22755
    }                                                                                                                  // 22756
                                                                                                                       // 22757
    function arrayClasses(classVal) {                                                                                  // 22758
      var classes = [];                                                                                                // 22759
      if (isArray(classVal)) {                                                                                         // 22760
        forEach(classVal, function(v) {                                                                                // 22761
          classes = classes.concat(arrayClasses(v));                                                                   // 22762
        });                                                                                                            // 22763
        return classes;                                                                                                // 22764
      } else if (isString(classVal)) {                                                                                 // 22765
        return classVal.split(' ');                                                                                    // 22766
      } else if (isObject(classVal)) {                                                                                 // 22767
        forEach(classVal, function(v, k) {                                                                             // 22768
          if (v) {                                                                                                     // 22769
            classes = classes.concat(k.split(' '));                                                                    // 22770
          }                                                                                                            // 22771
        });                                                                                                            // 22772
        return classes;                                                                                                // 22773
      }                                                                                                                // 22774
      return classVal;                                                                                                 // 22775
    }                                                                                                                  // 22776
  }];                                                                                                                  // 22777
}                                                                                                                      // 22778
                                                                                                                       // 22779
/**                                                                                                                    // 22780
 * @ngdoc directive                                                                                                    // 22781
 * @name ngClass                                                                                                       // 22782
 * @restrict AC                                                                                                        // 22783
 *                                                                                                                     // 22784
 * @description                                                                                                        // 22785
 * The `ngClass` directive allows you to dynamically set CSS classes on an HTML element by databinding                 // 22786
 * an expression that represents all classes to be added.                                                              // 22787
 *                                                                                                                     // 22788
 * The directive operates in three different ways, depending on which of three types the expression                    // 22789
 * evaluates to:                                                                                                       // 22790
 *                                                                                                                     // 22791
 * 1. If the expression evaluates to a string, the string should be one or more space-delimited class                  // 22792
 * names.                                                                                                              // 22793
 *                                                                                                                     // 22794
 * 2. If the expression evaluates to an object, then for each key-value pair of the                                    // 22795
 * object with a truthy value the corresponding key is used as a class name.                                           // 22796
 *                                                                                                                     // 22797
 * 3. If the expression evaluates to an array, each element of the array should either be a string as in               // 22798
 * type 1 or an object as in type 2. This means that you can mix strings and objects together in an array              // 22799
 * to give you more control over what CSS classes appear. See the code below for an example of this.                   // 22800
 *                                                                                                                     // 22801
 *                                                                                                                     // 22802
 * The directive won't add duplicate classes if a particular class was already set.                                    // 22803
 *                                                                                                                     // 22804
 * When the expression changes, the previously added classes are removed and only then are the                         // 22805
 * new classes added.                                                                                                  // 22806
 *                                                                                                                     // 22807
 * @animations                                                                                                         // 22808
 * **add** - happens just before the class is applied to the elements                                                  // 22809
 *                                                                                                                     // 22810
 * **remove** - happens just before the class is removed from the element                                              // 22811
 *                                                                                                                     // 22812
 * @element ANY                                                                                                        // 22813
 * @param {expression} ngClass {@link guide/expression Expression} to eval. The result                                 // 22814
 *   of the evaluation can be a string representing space delimited class                                              // 22815
 *   names, an array, or a map of class names to boolean values. In the case of a map, the                             // 22816
 *   names of the properties whose values are truthy will be added as css classes to the                               // 22817
 *   element.                                                                                                          // 22818
 *                                                                                                                     // 22819
 * @example Example that demonstrates basic bindings via ngClass directive.                                            // 22820
   <example>                                                                                                           // 22821
     <file name="index.html">                                                                                          // 22822
       <p ng-class="{strike: deleted, bold: important, 'has-error': error}">Map Syntax Example</p>                     // 22823
       <label>                                                                                                         // 22824
          <input type="checkbox" ng-model="deleted">                                                                   // 22825
          deleted (apply "strike" class)                                                                               // 22826
       </label><br>                                                                                                    // 22827
       <label>                                                                                                         // 22828
          <input type="checkbox" ng-model="important">                                                                 // 22829
          important (apply "bold" class)                                                                               // 22830
       </label><br>                                                                                                    // 22831
       <label>                                                                                                         // 22832
          <input type="checkbox" ng-model="error">                                                                     // 22833
          error (apply "has-error" class)                                                                              // 22834
       </label>                                                                                                        // 22835
       <hr>                                                                                                            // 22836
       <p ng-class="style">Using String Syntax</p>                                                                     // 22837
       <input type="text" ng-model="style"                                                                             // 22838
              placeholder="Type: bold strike red" aria-label="Type: bold strike red">                                  // 22839
       <hr>                                                                                                            // 22840
       <p ng-class="[style1, style2, style3]">Using Array Syntax</p>                                                   // 22841
       <input ng-model="style1"                                                                                        // 22842
              placeholder="Type: bold, strike or red" aria-label="Type: bold, strike or red"><br>                      // 22843
       <input ng-model="style2"                                                                                        // 22844
              placeholder="Type: bold, strike or red" aria-label="Type: bold, strike or red 2"><br>                    // 22845
       <input ng-model="style3"                                                                                        // 22846
              placeholder="Type: bold, strike or red" aria-label="Type: bold, strike or red 3"><br>                    // 22847
       <hr>                                                                                                            // 22848
       <p ng-class="[style4, {orange: warning}]">Using Array and Map Syntax</p>                                        // 22849
       <input ng-model="style4" placeholder="Type: bold, strike" aria-label="Type: bold, strike"><br>                  // 22850
       <label><input type="checkbox" ng-model="warning"> warning (apply "orange" class)</label>                        // 22851
     </file>                                                                                                           // 22852
     <file name="style.css">                                                                                           // 22853
       .strike {                                                                                                       // 22854
           text-decoration: line-through;                                                                              // 22855
       }                                                                                                               // 22856
       .bold {                                                                                                         // 22857
           font-weight: bold;                                                                                          // 22858
       }                                                                                                               // 22859
       .red {                                                                                                          // 22860
           color: red;                                                                                                 // 22861
       }                                                                                                               // 22862
       .has-error {                                                                                                    // 22863
           color: red;                                                                                                 // 22864
           background-color: yellow;                                                                                   // 22865
       }                                                                                                               // 22866
       .orange {                                                                                                       // 22867
           color: orange;                                                                                              // 22868
       }                                                                                                               // 22869
     </file>                                                                                                           // 22870
     <file name="protractor.js" type="protractor">                                                                     // 22871
       var ps = element.all(by.css('p'));                                                                              // 22872
                                                                                                                       // 22873
       it('should let you toggle the class', function() {                                                              // 22874
                                                                                                                       // 22875
         expect(ps.first().getAttribute('class')).not.toMatch(/bold/);                                                 // 22876
         expect(ps.first().getAttribute('class')).not.toMatch(/has-error/);                                            // 22877
                                                                                                                       // 22878
         element(by.model('important')).click();                                                                       // 22879
         expect(ps.first().getAttribute('class')).toMatch(/bold/);                                                     // 22880
                                                                                                                       // 22881
         element(by.model('error')).click();                                                                           // 22882
         expect(ps.first().getAttribute('class')).toMatch(/has-error/);                                                // 22883
       });                                                                                                             // 22884
                                                                                                                       // 22885
       it('should let you toggle string example', function() {                                                         // 22886
         expect(ps.get(1).getAttribute('class')).toBe('');                                                             // 22887
         element(by.model('style')).clear();                                                                           // 22888
         element(by.model('style')).sendKeys('red');                                                                   // 22889
         expect(ps.get(1).getAttribute('class')).toBe('red');                                                          // 22890
       });                                                                                                             // 22891
                                                                                                                       // 22892
       it('array example should have 3 classes', function() {                                                          // 22893
         expect(ps.get(2).getAttribute('class')).toBe('');                                                             // 22894
         element(by.model('style1')).sendKeys('bold');                                                                 // 22895
         element(by.model('style2')).sendKeys('strike');                                                               // 22896
         element(by.model('style3')).sendKeys('red');                                                                  // 22897
         expect(ps.get(2).getAttribute('class')).toBe('bold strike red');                                              // 22898
       });                                                                                                             // 22899
                                                                                                                       // 22900
       it('array with map example should have 2 classes', function() {                                                 // 22901
         expect(ps.last().getAttribute('class')).toBe('');                                                             // 22902
         element(by.model('style4')).sendKeys('bold');                                                                 // 22903
         element(by.model('warning')).click();                                                                         // 22904
         expect(ps.last().getAttribute('class')).toBe('bold orange');                                                  // 22905
       });                                                                                                             // 22906
     </file>                                                                                                           // 22907
   </example>                                                                                                          // 22908
                                                                                                                       // 22909
   ## Animations                                                                                                       // 22910
                                                                                                                       // 22911
   The example below demonstrates how to perform animations using ngClass.                                             // 22912
                                                                                                                       // 22913
   <example module="ngAnimate" deps="angular-animate.js" animations="true">                                            // 22914
     <file name="index.html">                                                                                          // 22915
      <input id="setbtn" type="button" value="set" ng-click="myVar='my-class'">                                        // 22916
      <input id="clearbtn" type="button" value="clear" ng-click="myVar=''">                                            // 22917
      <br>                                                                                                             // 22918
      <span class="base-class" ng-class="myVar">Sample Text</span>                                                     // 22919
     </file>                                                                                                           // 22920
     <file name="style.css">                                                                                           // 22921
       .base-class {                                                                                                   // 22922
         transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;                                                 // 22923
       }                                                                                                               // 22924
                                                                                                                       // 22925
       .base-class.my-class {                                                                                          // 22926
         color: red;                                                                                                   // 22927
         font-size:3em;                                                                                                // 22928
       }                                                                                                               // 22929
     </file>                                                                                                           // 22930
     <file name="protractor.js" type="protractor">                                                                     // 22931
       it('should check ng-class', function() {                                                                        // 22932
         expect(element(by.css('.base-class')).getAttribute('class')).not.                                             // 22933
           toMatch(/my-class/);                                                                                        // 22934
                                                                                                                       // 22935
         element(by.id('setbtn')).click();                                                                             // 22936
                                                                                                                       // 22937
         expect(element(by.css('.base-class')).getAttribute('class')).                                                 // 22938
           toMatch(/my-class/);                                                                                        // 22939
                                                                                                                       // 22940
         element(by.id('clearbtn')).click();                                                                           // 22941
                                                                                                                       // 22942
         expect(element(by.css('.base-class')).getAttribute('class')).not.                                             // 22943
           toMatch(/my-class/);                                                                                        // 22944
       });                                                                                                             // 22945
     </file>                                                                                                           // 22946
   </example>                                                                                                          // 22947
                                                                                                                       // 22948
                                                                                                                       // 22949
   ## ngClass and pre-existing CSS3 Transitions/Animations                                                             // 22950
   The ngClass directive still supports CSS3 Transitions/Animations even if they do not follow the ngAnimate CSS naming structure.
   Upon animation ngAnimate will apply supplementary CSS classes to track the start and end of an animation, but this will not hinder
   any pre-existing CSS transitions already on the element. To get an idea of what happens during a class-based animation, be sure
   to view the step by step details of {@link $animate#addClass $animate.addClass} and                                 // 22954
   {@link $animate#removeClass $animate.removeClass}.                                                                  // 22955
 */                                                                                                                    // 22956
var ngClassDirective = classDirective('', true);                                                                       // 22957
                                                                                                                       // 22958
/**                                                                                                                    // 22959
 * @ngdoc directive                                                                                                    // 22960
 * @name ngClassOdd                                                                                                    // 22961
 * @restrict AC                                                                                                        // 22962
 *                                                                                                                     // 22963
 * @description                                                                                                        // 22964
 * The `ngClassOdd` and `ngClassEven` directives work exactly as                                                       // 22965
 * {@link ng.directive:ngClass ngClass}, except they work in                                                           // 22966
 * conjunction with `ngRepeat` and take effect only on odd (even) rows.                                                // 22967
 *                                                                                                                     // 22968
 * This directive can be applied only within the scope of an                                                           // 22969
 * {@link ng.directive:ngRepeat ngRepeat}.                                                                             // 22970
 *                                                                                                                     // 22971
 * @element ANY                                                                                                        // 22972
 * @param {expression} ngClassOdd {@link guide/expression Expression} to eval. The result                              // 22973
 *   of the evaluation can be a string representing space delimited class names or an array.                           // 22974
 *                                                                                                                     // 22975
 * @example                                                                                                            // 22976
   <example>                                                                                                           // 22977
     <file name="index.html">                                                                                          // 22978
        <ol ng-init="names=['John', 'Mary', 'Cate', 'Suz']">                                                           // 22979
          <li ng-repeat="name in names">                                                                               // 22980
           <span ng-class-odd="'odd'" ng-class-even="'even'">                                                          // 22981
             {{name}}                                                                                                  // 22982
           </span>                                                                                                     // 22983
          </li>                                                                                                        // 22984
        </ol>                                                                                                          // 22985
     </file>                                                                                                           // 22986
     <file name="style.css">                                                                                           // 22987
       .odd {                                                                                                          // 22988
         color: red;                                                                                                   // 22989
       }                                                                                                               // 22990
       .even {                                                                                                         // 22991
         color: blue;                                                                                                  // 22992
       }                                                                                                               // 22993
     </file>                                                                                                           // 22994
     <file name="protractor.js" type="protractor">                                                                     // 22995
       it('should check ng-class-odd and ng-class-even', function() {                                                  // 22996
         expect(element(by.repeater('name in names').row(0).column('name')).getAttribute('class')).                    // 22997
           toMatch(/odd/);                                                                                             // 22998
         expect(element(by.repeater('name in names').row(1).column('name')).getAttribute('class')).                    // 22999
           toMatch(/even/);                                                                                            // 23000
       });                                                                                                             // 23001
     </file>                                                                                                           // 23002
   </example>                                                                                                          // 23003
 */                                                                                                                    // 23004
var ngClassOddDirective = classDirective('Odd', 0);                                                                    // 23005
                                                                                                                       // 23006
/**                                                                                                                    // 23007
 * @ngdoc directive                                                                                                    // 23008
 * @name ngClassEven                                                                                                   // 23009
 * @restrict AC                                                                                                        // 23010
 *                                                                                                                     // 23011
 * @description                                                                                                        // 23012
 * The `ngClassOdd` and `ngClassEven` directives work exactly as                                                       // 23013
 * {@link ng.directive:ngClass ngClass}, except they work in                                                           // 23014
 * conjunction with `ngRepeat` and take effect only on odd (even) rows.                                                // 23015
 *                                                                                                                     // 23016
 * This directive can be applied only within the scope of an                                                           // 23017
 * {@link ng.directive:ngRepeat ngRepeat}.                                                                             // 23018
 *                                                                                                                     // 23019
 * @element ANY                                                                                                        // 23020
 * @param {expression} ngClassEven {@link guide/expression Expression} to eval. The                                    // 23021
 *   result of the evaluation can be a string representing space delimited class names or an array.                    // 23022
 *                                                                                                                     // 23023
 * @example                                                                                                            // 23024
   <example>                                                                                                           // 23025
     <file name="index.html">                                                                                          // 23026
        <ol ng-init="names=['John', 'Mary', 'Cate', 'Suz']">                                                           // 23027
          <li ng-repeat="name in names">                                                                               // 23028
           <span ng-class-odd="'odd'" ng-class-even="'even'">                                                          // 23029
             {{name}} &nbsp; &nbsp; &nbsp;                                                                             // 23030
           </span>                                                                                                     // 23031
          </li>                                                                                                        // 23032
        </ol>                                                                                                          // 23033
     </file>                                                                                                           // 23034
     <file name="style.css">                                                                                           // 23035
       .odd {                                                                                                          // 23036
         color: red;                                                                                                   // 23037
       }                                                                                                               // 23038
       .even {                                                                                                         // 23039
         color: blue;                                                                                                  // 23040
       }                                                                                                               // 23041
     </file>                                                                                                           // 23042
     <file name="protractor.js" type="protractor">                                                                     // 23043
       it('should check ng-class-odd and ng-class-even', function() {                                                  // 23044
         expect(element(by.repeater('name in names').row(0).column('name')).getAttribute('class')).                    // 23045
           toMatch(/odd/);                                                                                             // 23046
         expect(element(by.repeater('name in names').row(1).column('name')).getAttribute('class')).                    // 23047
           toMatch(/even/);                                                                                            // 23048
       });                                                                                                             // 23049
     </file>                                                                                                           // 23050
   </example>                                                                                                          // 23051
 */                                                                                                                    // 23052
var ngClassEvenDirective = classDirective('Even', 1);                                                                  // 23053
                                                                                                                       // 23054
/**                                                                                                                    // 23055
 * @ngdoc directive                                                                                                    // 23056
 * @name ngCloak                                                                                                       // 23057
 * @restrict AC                                                                                                        // 23058
 *                                                                                                                     // 23059
 * @description                                                                                                        // 23060
 * The `ngCloak` directive is used to prevent the Angular html template from being briefly                             // 23061
 * displayed by the browser in its raw (uncompiled) form while your application is loading. Use this                   // 23062
 * directive to avoid the undesirable flicker effect caused by the html template display.                              // 23063
 *                                                                                                                     // 23064
 * The directive can be applied to the `<body>` element, but the preferred usage is to apply                           // 23065
 * multiple `ngCloak` directives to small portions of the page to permit progressive rendering                         // 23066
 * of the browser view.                                                                                                // 23067
 *                                                                                                                     // 23068
 * `ngCloak` works in cooperation with the following css rule embedded within `angular.js` and                         // 23069
 * `angular.min.js`.                                                                                                   // 23070
 * For CSP mode please add `angular-csp.css` to your html file (see {@link ng.directive:ngCsp ngCsp}).                 // 23071
 *                                                                                                                     // 23072
 * ```css                                                                                                              // 23073
 * [ng\:cloak], [ng-cloak], [data-ng-cloak], [x-ng-cloak], .ng-cloak, .x-ng-cloak {                                    // 23074
 *   display: none !important;                                                                                         // 23075
 * }                                                                                                                   // 23076
 * ```                                                                                                                 // 23077
 *                                                                                                                     // 23078
 * When this css rule is loaded by the browser, all html elements (including their children) that                      // 23079
 * are tagged with the `ngCloak` directive are hidden. When Angular encounters this directive                          // 23080
 * during the compilation of the template it deletes the `ngCloak` element attribute, making                           // 23081
 * the compiled element visible.                                                                                       // 23082
 *                                                                                                                     // 23083
 * For the best result, the `angular.js` script must be loaded in the head section of the html                         // 23084
 * document; alternatively, the css rule above must be included in the external stylesheet of the                      // 23085
 * application.                                                                                                        // 23086
 *                                                                                                                     // 23087
 * @element ANY                                                                                                        // 23088
 *                                                                                                                     // 23089
 * @example                                                                                                            // 23090
   <example>                                                                                                           // 23091
     <file name="index.html">                                                                                          // 23092
        <div id="template1" ng-cloak>{{ 'hello' }}</div>                                                               // 23093
        <div id="template2" class="ng-cloak">{{ 'world' }}</div>                                                       // 23094
     </file>                                                                                                           // 23095
     <file name="protractor.js" type="protractor">                                                                     // 23096
       it('should remove the template directive and css class', function() {                                           // 23097
         expect($('#template1').getAttribute('ng-cloak')).                                                             // 23098
           toBeNull();                                                                                                 // 23099
         expect($('#template2').getAttribute('ng-cloak')).                                                             // 23100
           toBeNull();                                                                                                 // 23101
       });                                                                                                             // 23102
     </file>                                                                                                           // 23103
   </example>                                                                                                          // 23104
 *                                                                                                                     // 23105
 */                                                                                                                    // 23106
var ngCloakDirective = ngDirective({                                                                                   // 23107
  compile: function(element, attr) {                                                                                   // 23108
    attr.$set('ngCloak', undefined);                                                                                   // 23109
    element.removeClass('ng-cloak');                                                                                   // 23110
  }                                                                                                                    // 23111
});                                                                                                                    // 23112
                                                                                                                       // 23113
/**                                                                                                                    // 23114
 * @ngdoc directive                                                                                                    // 23115
 * @name ngController                                                                                                  // 23116
 *                                                                                                                     // 23117
 * @description                                                                                                        // 23118
 * The `ngController` directive attaches a controller class to the view. This is a key aspect of how angular           // 23119
 * supports the principles behind the Model-View-Controller design pattern.                                            // 23120
 *                                                                                                                     // 23121
 * MVC components in angular:                                                                                          // 23122
 *                                                                                                                     // 23123
 * * Model — Models are the properties of a scope; scopes are attached to the DOM where scope properties               // 23124
 *   are accessed through bindings.                                                                                    // 23125
 * * View — The template (HTML with data bindings) that is rendered into the View.                                     // 23126
 * * Controller — The `ngController` directive specifies a Controller class; the class contains business               // 23127
 *   logic behind the application to decorate the scope with functions and values                                      // 23128
 *                                                                                                                     // 23129
 * Note that you can also attach controllers to the DOM by declaring it in a route definition                          // 23130
 * via the {@link ngRoute.$route $route} service. A common mistake is to declare the controller                        // 23131
 * again using `ng-controller` in the template itself.  This will cause the controller to be attached                  // 23132
 * and executed twice.                                                                                                 // 23133
 *                                                                                                                     // 23134
 * @element ANY                                                                                                        // 23135
 * @scope                                                                                                              // 23136
 * @priority 500                                                                                                       // 23137
 * @param {expression} ngController Name of a constructor function registered with the current                         // 23138
 * {@link ng.$controllerProvider $controllerProvider} or an {@link guide/expression expression}                        // 23139
 * that on the current scope evaluates to a constructor function.                                                      // 23140
 *                                                                                                                     // 23141
 * The controller instance can be published into a scope property by specifying                                        // 23142
 * `ng-controller="as propertyName"`.                                                                                  // 23143
 *                                                                                                                     // 23144
 * If the current `$controllerProvider` is configured to use globals (via                                              // 23145
 * {@link ng.$controllerProvider#allowGlobals `$controllerProvider.allowGlobals()` }), this may                        // 23146
 * also be the name of a globally accessible constructor function (not recommended).                                   // 23147
 *                                                                                                                     // 23148
 * @example                                                                                                            // 23149
 * Here is a simple form for editing user contact information. Adding, removing, clearing, and                         // 23150
 * greeting are methods declared on the controller (see source tab). These methods can                                 // 23151
 * easily be called from the angular markup. Any changes to the data are automatically reflected                       // 23152
 * in the View without the need for a manual update.                                                                   // 23153
 *                                                                                                                     // 23154
 * Two different declaration styles are included below:                                                                // 23155
 *                                                                                                                     // 23156
 * * one binds methods and properties directly onto the controller using `this`:                                       // 23157
 * `ng-controller="SettingsController1 as settings"`                                                                   // 23158
 * * one injects `$scope` into the controller:                                                                         // 23159
 * `ng-controller="SettingsController2"`                                                                               // 23160
 *                                                                                                                     // 23161
 * The second option is more common in the Angular community, and is generally used in boilerplates                    // 23162
 * and in this guide. However, there are advantages to binding properties directly to the controller                   // 23163
 * and avoiding scope.                                                                                                 // 23164
 *                                                                                                                     // 23165
 * * Using `controller as` makes it obvious which controller you are accessing in the template when                    // 23166
 * multiple controllers apply to an element.                                                                           // 23167
 * * If you are writing your controllers as classes you have easier access to the properties and                       // 23168
 * methods, which will appear on the scope, from inside the controller code.                                           // 23169
 * * Since there is always a `.` in the bindings, you don't have to worry about prototypal                             // 23170
 * inheritance masking primitives.                                                                                     // 23171
 *                                                                                                                     // 23172
 * This example demonstrates the `controller as` syntax.                                                               // 23173
 *                                                                                                                     // 23174
 * <example name="ngControllerAs" module="controllerAsExample">                                                        // 23175
 *   <file name="index.html">                                                                                          // 23176
 *    <div id="ctrl-as-exmpl" ng-controller="SettingsController1 as settings">                                         // 23177
 *      <label>Name: <input type="text" ng-model="settings.name"/></label>                                             // 23178
 *      <button ng-click="settings.greet()">greet</button><br/>                                                        // 23179
 *      Contact:                                                                                                       // 23180
 *      <ul>                                                                                                           // 23181
 *        <li ng-repeat="contact in settings.contacts">                                                                // 23182
 *          <select ng-model="contact.type" aria-label="Contact method" id="select_{{$index}}">                        // 23183
 *             <option>phone</option>                                                                                  // 23184
 *             <option>email</option>                                                                                  // 23185
 *          </select>                                                                                                  // 23186
 *          <input type="text" ng-model="contact.value" aria-labelledby="select_{{$index}}" />                         // 23187
 *          <button ng-click="settings.clearContact(contact)">clear</button>                                           // 23188
 *          <button ng-click="settings.removeContact(contact)" aria-label="Remove">X</button>                          // 23189
 *        </li>                                                                                                        // 23190
 *        <li><button ng-click="settings.addContact()">add</button></li>                                               // 23191
 *     </ul>                                                                                                           // 23192
 *    </div>                                                                                                           // 23193
 *   </file>                                                                                                           // 23194
 *   <file name="app.js">                                                                                              // 23195
 *    angular.module('controllerAsExample', [])                                                                        // 23196
 *      .controller('SettingsController1', SettingsController1);                                                       // 23197
 *                                                                                                                     // 23198
 *    function SettingsController1() {                                                                                 // 23199
 *      this.name = "John Smith";                                                                                      // 23200
 *      this.contacts = [                                                                                              // 23201
 *        {type: 'phone', value: '408 555 1212'},                                                                      // 23202
 *        {type: 'email', value: 'john.smith@example.org'} ];                                                          // 23203
 *    }                                                                                                                // 23204
 *                                                                                                                     // 23205
 *    SettingsController1.prototype.greet = function() {                                                               // 23206
 *      alert(this.name);                                                                                              // 23207
 *    };                                                                                                               // 23208
 *                                                                                                                     // 23209
 *    SettingsController1.prototype.addContact = function() {                                                          // 23210
 *      this.contacts.push({type: 'email', value: 'yourname@example.org'});                                            // 23211
 *    };                                                                                                               // 23212
 *                                                                                                                     // 23213
 *    SettingsController1.prototype.removeContact = function(contactToRemove) {                                        // 23214
 *     var index = this.contacts.indexOf(contactToRemove);                                                             // 23215
 *      this.contacts.splice(index, 1);                                                                                // 23216
 *    };                                                                                                               // 23217
 *                                                                                                                     // 23218
 *    SettingsController1.prototype.clearContact = function(contact) {                                                 // 23219
 *      contact.type = 'phone';                                                                                        // 23220
 *      contact.value = '';                                                                                            // 23221
 *    };                                                                                                               // 23222
 *   </file>                                                                                                           // 23223
 *   <file name="protractor.js" type="protractor">                                                                     // 23224
 *     it('should check controller as', function() {                                                                   // 23225
 *       var container = element(by.id('ctrl-as-exmpl'));                                                              // 23226
 *         expect(container.element(by.model('settings.name'))                                                         // 23227
 *           .getAttribute('value')).toBe('John Smith');                                                               // 23228
 *                                                                                                                     // 23229
 *       var firstRepeat =                                                                                             // 23230
 *           container.element(by.repeater('contact in settings.contacts').row(0));                                    // 23231
 *       var secondRepeat =                                                                                            // 23232
 *           container.element(by.repeater('contact in settings.contacts').row(1));                                    // 23233
 *                                                                                                                     // 23234
 *       expect(firstRepeat.element(by.model('contact.value')).getAttribute('value'))                                  // 23235
 *           .toBe('408 555 1212');                                                                                    // 23236
 *                                                                                                                     // 23237
 *       expect(secondRepeat.element(by.model('contact.value')).getAttribute('value'))                                 // 23238
 *           .toBe('john.smith@example.org');                                                                          // 23239
 *                                                                                                                     // 23240
 *       firstRepeat.element(by.buttonText('clear')).click();                                                          // 23241
 *                                                                                                                     // 23242
 *       expect(firstRepeat.element(by.model('contact.value')).getAttribute('value'))                                  // 23243
 *           .toBe('');                                                                                                // 23244
 *                                                                                                                     // 23245
 *       container.element(by.buttonText('add')).click();                                                              // 23246
 *                                                                                                                     // 23247
 *       expect(container.element(by.repeater('contact in settings.contacts').row(2))                                  // 23248
 *           .element(by.model('contact.value'))                                                                       // 23249
 *           .getAttribute('value'))                                                                                   // 23250
 *           .toBe('yourname@example.org');                                                                            // 23251
 *     });                                                                                                             // 23252
 *   </file>                                                                                                           // 23253
 * </example>                                                                                                          // 23254
 *                                                                                                                     // 23255
 * This example demonstrates the "attach to `$scope`" style of controller.                                             // 23256
 *                                                                                                                     // 23257
 * <example name="ngController" module="controllerExample">                                                            // 23258
 *  <file name="index.html">                                                                                           // 23259
 *   <div id="ctrl-exmpl" ng-controller="SettingsController2">                                                         // 23260
 *     <label>Name: <input type="text" ng-model="name"/></label>                                                       // 23261
 *     <button ng-click="greet()">greet</button><br/>                                                                  // 23262
 *     Contact:                                                                                                        // 23263
 *     <ul>                                                                                                            // 23264
 *       <li ng-repeat="contact in contacts">                                                                          // 23265
 *         <select ng-model="contact.type" id="select_{{$index}}">                                                     // 23266
 *            <option>phone</option>                                                                                   // 23267
 *            <option>email</option>                                                                                   // 23268
 *         </select>                                                                                                   // 23269
 *         <input type="text" ng-model="contact.value" aria-labelledby="select_{{$index}}" />                          // 23270
 *         <button ng-click="clearContact(contact)">clear</button>                                                     // 23271
 *         <button ng-click="removeContact(contact)">X</button>                                                        // 23272
 *       </li>                                                                                                         // 23273
 *       <li>[ <button ng-click="addContact()">add</button> ]</li>                                                     // 23274
 *    </ul>                                                                                                            // 23275
 *   </div>                                                                                                            // 23276
 *  </file>                                                                                                            // 23277
 *  <file name="app.js">                                                                                               // 23278
 *   angular.module('controllerExample', [])                                                                           // 23279
 *     .controller('SettingsController2', ['$scope', SettingsController2]);                                            // 23280
 *                                                                                                                     // 23281
 *   function SettingsController2($scope) {                                                                            // 23282
 *     $scope.name = "John Smith";                                                                                     // 23283
 *     $scope.contacts = [                                                                                             // 23284
 *       {type:'phone', value:'408 555 1212'},                                                                         // 23285
 *       {type:'email', value:'john.smith@example.org'} ];                                                             // 23286
 *                                                                                                                     // 23287
 *     $scope.greet = function() {                                                                                     // 23288
 *       alert($scope.name);                                                                                           // 23289
 *     };                                                                                                              // 23290
 *                                                                                                                     // 23291
 *     $scope.addContact = function() {                                                                                // 23292
 *       $scope.contacts.push({type:'email', value:'yourname@example.org'});                                           // 23293
 *     };                                                                                                              // 23294
 *                                                                                                                     // 23295
 *     $scope.removeContact = function(contactToRemove) {                                                              // 23296
 *       var index = $scope.contacts.indexOf(contactToRemove);                                                         // 23297
 *       $scope.contacts.splice(index, 1);                                                                             // 23298
 *     };                                                                                                              // 23299
 *                                                                                                                     // 23300
 *     $scope.clearContact = function(contact) {                                                                       // 23301
 *       contact.type = 'phone';                                                                                       // 23302
 *       contact.value = '';                                                                                           // 23303
 *     };                                                                                                              // 23304
 *   }                                                                                                                 // 23305
 *  </file>                                                                                                            // 23306
 *  <file name="protractor.js" type="protractor">                                                                      // 23307
 *    it('should check controller', function() {                                                                       // 23308
 *      var container = element(by.id('ctrl-exmpl'));                                                                  // 23309
 *                                                                                                                     // 23310
 *      expect(container.element(by.model('name'))                                                                     // 23311
 *          .getAttribute('value')).toBe('John Smith');                                                                // 23312
 *                                                                                                                     // 23313
 *      var firstRepeat =                                                                                              // 23314
 *          container.element(by.repeater('contact in contacts').row(0));                                              // 23315
 *      var secondRepeat =                                                                                             // 23316
 *          container.element(by.repeater('contact in contacts').row(1));                                              // 23317
 *                                                                                                                     // 23318
 *      expect(firstRepeat.element(by.model('contact.value')).getAttribute('value'))                                   // 23319
 *          .toBe('408 555 1212');                                                                                     // 23320
 *      expect(secondRepeat.element(by.model('contact.value')).getAttribute('value'))                                  // 23321
 *          .toBe('john.smith@example.org');                                                                           // 23322
 *                                                                                                                     // 23323
 *      firstRepeat.element(by.buttonText('clear')).click();                                                           // 23324
 *                                                                                                                     // 23325
 *      expect(firstRepeat.element(by.model('contact.value')).getAttribute('value'))                                   // 23326
 *          .toBe('');                                                                                                 // 23327
 *                                                                                                                     // 23328
 *      container.element(by.buttonText('add')).click();                                                               // 23329
 *                                                                                                                     // 23330
 *      expect(container.element(by.repeater('contact in contacts').row(2))                                            // 23331
 *          .element(by.model('contact.value'))                                                                        // 23332
 *          .getAttribute('value'))                                                                                    // 23333
 *          .toBe('yourname@example.org');                                                                             // 23334
 *    });                                                                                                              // 23335
 *  </file>                                                                                                            // 23336
 *</example>                                                                                                           // 23337
                                                                                                                       // 23338
 */                                                                                                                    // 23339
var ngControllerDirective = [function() {                                                                              // 23340
  return {                                                                                                             // 23341
    restrict: 'A',                                                                                                     // 23342
    scope: true,                                                                                                       // 23343
    controller: '@',                                                                                                   // 23344
    priority: 500                                                                                                      // 23345
  };                                                                                                                   // 23346
}];                                                                                                                    // 23347
                                                                                                                       // 23348
/**                                                                                                                    // 23349
 * @ngdoc directive                                                                                                    // 23350
 * @name ngCsp                                                                                                         // 23351
 *                                                                                                                     // 23352
 * @element html                                                                                                       // 23353
 * @description                                                                                                        // 23354
 *                                                                                                                     // 23355
 * Angular has some features that can break certain                                                                    // 23356
 * [CSP (Content Security Policy)](https://developer.mozilla.org/en/Security/CSP) rules.                               // 23357
 *                                                                                                                     // 23358
 * If you intend to implement these rules then you must tell Angular not to use these features.                        // 23359
 *                                                                                                                     // 23360
 * This is necessary when developing things like Google Chrome Extensions or Universal Windows Apps.                   // 23361
 *                                                                                                                     // 23362
 *                                                                                                                     // 23363
 * The following rules affect Angular:                                                                                 // 23364
 *                                                                                                                     // 23365
 * * `unsafe-eval`: this rule forbids apps to use `eval` or `Function(string)` generated functions                     // 23366
 * (among other things). Angular makes use of this in the {@link $parse} service to provide a 30%                      // 23367
 * increase in the speed of evaluating Angular expressions.                                                            // 23368
 *                                                                                                                     // 23369
 * * `unsafe-inline`: this rule forbids apps from inject custom styles into the document. Angular                      // 23370
 * makes use of this to include some CSS rules (e.g. {@link ngCloak} and {@link ngHide}).                              // 23371
 * To make these directives work when a CSP rule is blocking inline styles, you must link to the                       // 23372
 * `angular-csp.css` in your HTML manually.                                                                            // 23373
 *                                                                                                                     // 23374
 * If you do not provide `ngCsp` then Angular tries to autodetect if CSP is blocking unsafe-eval                       // 23375
 * and automatically deactivates this feature in the {@link $parse} service. This autodetection,                       // 23376
 * however, triggers a CSP error to be logged in the console:                                                          // 23377
 *                                                                                                                     // 23378
 * ```                                                                                                                 // 23379
 * Refused to evaluate a string as JavaScript because 'unsafe-eval' is not an allowed source of                        // 23380
 * script in the following Content Security Policy directive: "default-src 'self'". Note that                          // 23381
 * 'script-src' was not explicitly set, so 'default-src' is used as a fallback.                                        // 23382
 * ```                                                                                                                 // 23383
 *                                                                                                                     // 23384
 * This error is harmless but annoying. To prevent the error from showing up, put the `ngCsp`                          // 23385
 * directive on an element of the HTML document that appears before the `<script>` tag that loads                      // 23386
 * the `angular.js` file.                                                                                              // 23387
 *                                                                                                                     // 23388
 * *Note: This directive is only available in the `ng-csp` and `data-ng-csp` attribute form.*                          // 23389
 *                                                                                                                     // 23390
 * You can specify which of the CSP related Angular features should be deactivated by providing                        // 23391
 * a value for the `ng-csp` attribute. The options are as follows:                                                     // 23392
 *                                                                                                                     // 23393
 * * no-inline-style: this stops Angular from injecting CSS styles into the DOM                                        // 23394
 *                                                                                                                     // 23395
 * * no-unsafe-eval: this stops Angular from optimising $parse with unsafe eval of strings                             // 23396
 *                                                                                                                     // 23397
 * You can use these values in the following combinations:                                                             // 23398
 *                                                                                                                     // 23399
 *                                                                                                                     // 23400
 * * No declaration means that Angular will assume that you can do inline styles, but it will do                       // 23401
 * a runtime check for unsafe-eval. E.g. `<body>`. This is backwardly compatible with previous versions                // 23402
 * of Angular.                                                                                                         // 23403
 *                                                                                                                     // 23404
 * * A simple `ng-csp` (or `data-ng-csp`) attribute will tell Angular to deactivate both inline                        // 23405
 * styles and unsafe eval. E.g. `<body ng-csp>`. This is backwardly compatible with previous versions                  // 23406
 * of Angular.                                                                                                         // 23407
 *                                                                                                                     // 23408
 * * Specifying only `no-unsafe-eval` tells Angular that we must not use eval, but that we can inject                  // 23409
 * inline styles. E.g. `<body ng-csp="no-unsafe-eval">`.                                                               // 23410
 *                                                                                                                     // 23411
 * * Specifying only `no-inline-style` tells Angular that we must not inject styles, but that we can                   // 23412
 * run eval - no automcatic check for unsafe eval will occur. E.g. `<body ng-csp="no-inline-style">`                   // 23413
 *                                                                                                                     // 23414
 * * Specifying both `no-unsafe-eval` and `no-inline-style` tells Angular that we must not inject                      // 23415
 * styles nor use eval, which is the same as an empty: ng-csp.                                                         // 23416
 * E.g.`<body ng-csp="no-inline-style;no-unsafe-eval">`                                                                // 23417
 *                                                                                                                     // 23418
 * @example                                                                                                            // 23419
 * This example shows how to apply the `ngCsp` directive to the `html` tag.                                            // 23420
   ```html                                                                                                             // 23421
     <!doctype html>                                                                                                   // 23422
     <html ng-app ng-csp>                                                                                              // 23423
     ...                                                                                                               // 23424
     ...                                                                                                               // 23425
     </html>                                                                                                           // 23426
   ```                                                                                                                 // 23427
  * @example                                                                                                           // 23428
      // Note: the suffix `.csp` in the example name triggers                                                          // 23429
      // csp mode in our http server!                                                                                  // 23430
      <example name="example.csp" module="cspExample" ng-csp="true">                                                   // 23431
        <file name="index.html">                                                                                       // 23432
          <div ng-controller="MainController as ctrl">                                                                 // 23433
            <div>                                                                                                      // 23434
              <button ng-click="ctrl.inc()" id="inc">Increment</button>                                                // 23435
              <span id="counter">                                                                                      // 23436
                {{ctrl.counter}}                                                                                       // 23437
              </span>                                                                                                  // 23438
            </div>                                                                                                     // 23439
                                                                                                                       // 23440
            <div>                                                                                                      // 23441
              <button ng-click="ctrl.evil()" id="evil">Evil</button>                                                   // 23442
              <span id="evilError">                                                                                    // 23443
                {{ctrl.evilError}}                                                                                     // 23444
              </span>                                                                                                  // 23445
            </div>                                                                                                     // 23446
          </div>                                                                                                       // 23447
        </file>                                                                                                        // 23448
        <file name="script.js">                                                                                        // 23449
           angular.module('cspExample', [])                                                                            // 23450
             .controller('MainController', function() {                                                                // 23451
                this.counter = 0;                                                                                      // 23452
                this.inc = function() {                                                                                // 23453
                  this.counter++;                                                                                      // 23454
                };                                                                                                     // 23455
                this.evil = function() {                                                                               // 23456
                  // jshint evil:true                                                                                  // 23457
                  try {                                                                                                // 23458
                    eval('1+2');                                                                                       // 23459
                  } catch (e) {                                                                                        // 23460
                    this.evilError = e.message;                                                                        // 23461
                  }                                                                                                    // 23462
                };                                                                                                     // 23463
              });                                                                                                      // 23464
        </file>                                                                                                        // 23465
        <file name="protractor.js" type="protractor">                                                                  // 23466
          var util, webdriver;                                                                                         // 23467
                                                                                                                       // 23468
          var incBtn = element(by.id('inc'));                                                                          // 23469
          var counter = element(by.id('counter'));                                                                     // 23470
          var evilBtn = element(by.id('evil'));                                                                        // 23471
          var evilError = element(by.id('evilError'));                                                                 // 23472
                                                                                                                       // 23473
          function getAndClearSevereErrors() {                                                                         // 23474
            return browser.manage().logs().get('browser').then(function(browserLog) {                                  // 23475
              return browserLog.filter(function(logEntry) {                                                            // 23476
                return logEntry.level.value > webdriver.logging.Level.WARNING.value;                                   // 23477
              });                                                                                                      // 23478
            });                                                                                                        // 23479
          }                                                                                                            // 23480
                                                                                                                       // 23481
          function clearErrors() {                                                                                     // 23482
            getAndClearSevereErrors();                                                                                 // 23483
          }                                                                                                            // 23484
                                                                                                                       // 23485
          function expectNoErrors() {                                                                                  // 23486
            getAndClearSevereErrors().then(function(filteredLog) {                                                     // 23487
              expect(filteredLog.length).toEqual(0);                                                                   // 23488
              if (filteredLog.length) {                                                                                // 23489
                console.log('browser console errors: ' + util.inspect(filteredLog));                                   // 23490
              }                                                                                                        // 23491
            });                                                                                                        // 23492
          }                                                                                                            // 23493
                                                                                                                       // 23494
          function expectError(regex) {                                                                                // 23495
            getAndClearSevereErrors().then(function(filteredLog) {                                                     // 23496
              var found = false;                                                                                       // 23497
              filteredLog.forEach(function(log) {                                                                      // 23498
                if (log.message.match(regex)) {                                                                        // 23499
                  found = true;                                                                                        // 23500
                }                                                                                                      // 23501
              });                                                                                                      // 23502
              if (!found) {                                                                                            // 23503
                throw new Error('expected an error that matches ' + regex);                                            // 23504
              }                                                                                                        // 23505
            });                                                                                                        // 23506
          }                                                                                                            // 23507
                                                                                                                       // 23508
          beforeEach(function() {                                                                                      // 23509
            util = require('util');                                                                                    // 23510
            webdriver = require('protractor/node_modules/selenium-webdriver');                                         // 23511
          });                                                                                                          // 23512
                                                                                                                       // 23513
          // For now, we only test on Chrome,                                                                          // 23514
          // as Safari does not load the page with Protractor's injected scripts,                                      // 23515
          // and Firefox webdriver always disables content security policy (#6358)                                     // 23516
          if (browser.params.browser !== 'chrome') {                                                                   // 23517
            return;                                                                                                    // 23518
          }                                                                                                            // 23519
                                                                                                                       // 23520
          it('should not report errors when the page is loaded', function() {                                          // 23521
            // clear errors so we are not dependent on previous tests                                                  // 23522
            clearErrors();                                                                                             // 23523
            // Need to reload the page as the page is already loaded when                                              // 23524
            // we come here                                                                                            // 23525
            browser.driver.getCurrentUrl().then(function(url) {                                                        // 23526
              browser.get(url);                                                                                        // 23527
            });                                                                                                        // 23528
            expectNoErrors();                                                                                          // 23529
          });                                                                                                          // 23530
                                                                                                                       // 23531
          it('should evaluate expressions', function() {                                                               // 23532
            expect(counter.getText()).toEqual('0');                                                                    // 23533
            incBtn.click();                                                                                            // 23534
            expect(counter.getText()).toEqual('1');                                                                    // 23535
            expectNoErrors();                                                                                          // 23536
          });                                                                                                          // 23537
                                                                                                                       // 23538
          it('should throw and report an error when using "eval"', function() {                                        // 23539
            evilBtn.click();                                                                                           // 23540
            expect(evilError.getText()).toMatch(/Content Security Policy/);                                            // 23541
            expectError(/Content Security Policy/);                                                                    // 23542
          });                                                                                                          // 23543
        </file>                                                                                                        // 23544
      </example>                                                                                                       // 23545
  */                                                                                                                   // 23546
                                                                                                                       // 23547
// ngCsp is not implemented as a proper directive any more, because we need it be processed while we                   // 23548
// bootstrap the system (before $parse is instantiated), for this reason we just have                                  // 23549
// the csp() fn that looks for the `ng-csp` attribute anywhere in the current doc                                      // 23550
                                                                                                                       // 23551
/**                                                                                                                    // 23552
 * @ngdoc directive                                                                                                    // 23553
 * @name ngClick                                                                                                       // 23554
 *                                                                                                                     // 23555
 * @description                                                                                                        // 23556
 * The ngClick directive allows you to specify custom behavior when                                                    // 23557
 * an element is clicked.                                                                                              // 23558
 *                                                                                                                     // 23559
 * @element ANY                                                                                                        // 23560
 * @priority 0                                                                                                         // 23561
 * @param {expression} ngClick {@link guide/expression Expression} to evaluate upon                                    // 23562
 * click. ({@link guide/expression#-event- Event object is available as `$event`})                                     // 23563
 *                                                                                                                     // 23564
 * @example                                                                                                            // 23565
   <example>                                                                                                           // 23566
     <file name="index.html">                                                                                          // 23567
      <button ng-click="count = count + 1" ng-init="count=0">                                                          // 23568
        Increment                                                                                                      // 23569
      </button>                                                                                                        // 23570
      <span>                                                                                                           // 23571
        count: {{count}}                                                                                               // 23572
      </span>                                                                                                          // 23573
     </file>                                                                                                           // 23574
     <file name="protractor.js" type="protractor">                                                                     // 23575
       it('should check ng-click', function() {                                                                        // 23576
         expect(element(by.binding('count')).getText()).toMatch('0');                                                  // 23577
         element(by.css('button')).click();                                                                            // 23578
         expect(element(by.binding('count')).getText()).toMatch('1');                                                  // 23579
       });                                                                                                             // 23580
     </file>                                                                                                           // 23581
   </example>                                                                                                          // 23582
 */                                                                                                                    // 23583
/*                                                                                                                     // 23584
 * A collection of directives that allows creation of custom event handlers that are defined as                        // 23585
 * angular expressions and are compiled and executed within the current scope.                                         // 23586
 */                                                                                                                    // 23587
var ngEventDirectives = {};                                                                                            // 23588
                                                                                                                       // 23589
// For events that might fire synchronously during DOM manipulation                                                    // 23590
// we need to execute their event handlers asynchronously using $evalAsync,                                            // 23591
// so that they are not executed in an inconsistent state.                                                             // 23592
var forceAsyncEvents = {                                                                                               // 23593
  'blur': true,                                                                                                        // 23594
  'focus': true                                                                                                        // 23595
};                                                                                                                     // 23596
forEach(                                                                                                               // 23597
  'click dblclick mousedown mouseup mouseover mouseout mousemove mouseenter mouseleave keydown keyup keypress submit focus blur copy cut paste'.split(' '),
  function(eventName) {                                                                                                // 23599
    var directiveName = directiveNormalize('ng-' + eventName);                                                         // 23600
    ngEventDirectives[directiveName] = ['$parse', '$rootScope', function($parse, $rootScope) {                         // 23601
      return {                                                                                                         // 23602
        restrict: 'A',                                                                                                 // 23603
        compile: function($element, attr) {                                                                            // 23604
          // We expose the powerful $event object on the scope that provides access to the Window,                     // 23605
          // etc. that isn't protected by the fast paths in $parse.  We explicitly request better                      // 23606
          // checks at the cost of speed since event handler expressions are not executed as                           // 23607
          // frequently as regular change detection.                                                                   // 23608
          var fn = $parse(attr[directiveName], /* interceptorFn */ null, /* expensiveChecks */ true);                  // 23609
          return function ngEventHandler(scope, element) {                                                             // 23610
            element.on(eventName, function(event) {                                                                    // 23611
              var callback = function() {                                                                              // 23612
                fn(scope, {$event:event});                                                                             // 23613
              };                                                                                                       // 23614
              if (forceAsyncEvents[eventName] && $rootScope.$$phase) {                                                 // 23615
                scope.$evalAsync(callback);                                                                            // 23616
              } else {                                                                                                 // 23617
                scope.$apply(callback);                                                                                // 23618
              }                                                                                                        // 23619
            });                                                                                                        // 23620
          };                                                                                                           // 23621
        }                                                                                                              // 23622
      };                                                                                                               // 23623
    }];                                                                                                                // 23624
  }                                                                                                                    // 23625
);                                                                                                                     // 23626
                                                                                                                       // 23627
/**                                                                                                                    // 23628
 * @ngdoc directive                                                                                                    // 23629
 * @name ngDblclick                                                                                                    // 23630
 *                                                                                                                     // 23631
 * @description                                                                                                        // 23632
 * The `ngDblclick` directive allows you to specify custom behavior on a dblclick event.                               // 23633
 *                                                                                                                     // 23634
 * @element ANY                                                                                                        // 23635
 * @priority 0                                                                                                         // 23636
 * @param {expression} ngDblclick {@link guide/expression Expression} to evaluate upon                                 // 23637
 * a dblclick. (The Event object is available as `$event`)                                                             // 23638
 *                                                                                                                     // 23639
 * @example                                                                                                            // 23640
   <example>                                                                                                           // 23641
     <file name="index.html">                                                                                          // 23642
      <button ng-dblclick="count = count + 1" ng-init="count=0">                                                       // 23643
        Increment (on double click)                                                                                    // 23644
      </button>                                                                                                        // 23645
      count: {{count}}                                                                                                 // 23646
     </file>                                                                                                           // 23647
   </example>                                                                                                          // 23648
 */                                                                                                                    // 23649
                                                                                                                       // 23650
                                                                                                                       // 23651
/**                                                                                                                    // 23652
 * @ngdoc directive                                                                                                    // 23653
 * @name ngMousedown                                                                                                   // 23654
 *                                                                                                                     // 23655
 * @description                                                                                                        // 23656
 * The ngMousedown directive allows you to specify custom behavior on mousedown event.                                 // 23657
 *                                                                                                                     // 23658
 * @element ANY                                                                                                        // 23659
 * @priority 0                                                                                                         // 23660
 * @param {expression} ngMousedown {@link guide/expression Expression} to evaluate upon                                // 23661
 * mousedown. ({@link guide/expression#-event- Event object is available as `$event`})                                 // 23662
 *                                                                                                                     // 23663
 * @example                                                                                                            // 23664
   <example>                                                                                                           // 23665
     <file name="index.html">                                                                                          // 23666
      <button ng-mousedown="count = count + 1" ng-init="count=0">                                                      // 23667
        Increment (on mouse down)                                                                                      // 23668
      </button>                                                                                                        // 23669
      count: {{count}}                                                                                                 // 23670
     </file>                                                                                                           // 23671
   </example>                                                                                                          // 23672
 */                                                                                                                    // 23673
                                                                                                                       // 23674
                                                                                                                       // 23675
/**                                                                                                                    // 23676
 * @ngdoc directive                                                                                                    // 23677
 * @name ngMouseup                                                                                                     // 23678
 *                                                                                                                     // 23679
 * @description                                                                                                        // 23680
 * Specify custom behavior on mouseup event.                                                                           // 23681
 *                                                                                                                     // 23682
 * @element ANY                                                                                                        // 23683
 * @priority 0                                                                                                         // 23684
 * @param {expression} ngMouseup {@link guide/expression Expression} to evaluate upon                                  // 23685
 * mouseup. ({@link guide/expression#-event- Event object is available as `$event`})                                   // 23686
 *                                                                                                                     // 23687
 * @example                                                                                                            // 23688
   <example>                                                                                                           // 23689
     <file name="index.html">                                                                                          // 23690
      <button ng-mouseup="count = count + 1" ng-init="count=0">                                                        // 23691
        Increment (on mouse up)                                                                                        // 23692
      </button>                                                                                                        // 23693
      count: {{count}}                                                                                                 // 23694
     </file>                                                                                                           // 23695
   </example>                                                                                                          // 23696
 */                                                                                                                    // 23697
                                                                                                                       // 23698
/**                                                                                                                    // 23699
 * @ngdoc directive                                                                                                    // 23700
 * @name ngMouseover                                                                                                   // 23701
 *                                                                                                                     // 23702
 * @description                                                                                                        // 23703
 * Specify custom behavior on mouseover event.                                                                         // 23704
 *                                                                                                                     // 23705
 * @element ANY                                                                                                        // 23706
 * @priority 0                                                                                                         // 23707
 * @param {expression} ngMouseover {@link guide/expression Expression} to evaluate upon                                // 23708
 * mouseover. ({@link guide/expression#-event- Event object is available as `$event`})                                 // 23709
 *                                                                                                                     // 23710
 * @example                                                                                                            // 23711
   <example>                                                                                                           // 23712
     <file name="index.html">                                                                                          // 23713
      <button ng-mouseover="count = count + 1" ng-init="count=0">                                                      // 23714
        Increment (when mouse is over)                                                                                 // 23715
      </button>                                                                                                        // 23716
      count: {{count}}                                                                                                 // 23717
     </file>                                                                                                           // 23718
   </example>                                                                                                          // 23719
 */                                                                                                                    // 23720
                                                                                                                       // 23721
                                                                                                                       // 23722
/**                                                                                                                    // 23723
 * @ngdoc directive                                                                                                    // 23724
 * @name ngMouseenter                                                                                                  // 23725
 *                                                                                                                     // 23726
 * @description                                                                                                        // 23727
 * Specify custom behavior on mouseenter event.                                                                        // 23728
 *                                                                                                                     // 23729
 * @element ANY                                                                                                        // 23730
 * @priority 0                                                                                                         // 23731
 * @param {expression} ngMouseenter {@link guide/expression Expression} to evaluate upon                               // 23732
 * mouseenter. ({@link guide/expression#-event- Event object is available as `$event`})                                // 23733
 *                                                                                                                     // 23734
 * @example                                                                                                            // 23735
   <example>                                                                                                           // 23736
     <file name="index.html">                                                                                          // 23737
      <button ng-mouseenter="count = count + 1" ng-init="count=0">                                                     // 23738
        Increment (when mouse enters)                                                                                  // 23739
      </button>                                                                                                        // 23740
      count: {{count}}                                                                                                 // 23741
     </file>                                                                                                           // 23742
   </example>                                                                                                          // 23743
 */                                                                                                                    // 23744
                                                                                                                       // 23745
                                                                                                                       // 23746
/**                                                                                                                    // 23747
 * @ngdoc directive                                                                                                    // 23748
 * @name ngMouseleave                                                                                                  // 23749
 *                                                                                                                     // 23750
 * @description                                                                                                        // 23751
 * Specify custom behavior on mouseleave event.                                                                        // 23752
 *                                                                                                                     // 23753
 * @element ANY                                                                                                        // 23754
 * @priority 0                                                                                                         // 23755
 * @param {expression} ngMouseleave {@link guide/expression Expression} to evaluate upon                               // 23756
 * mouseleave. ({@link guide/expression#-event- Event object is available as `$event`})                                // 23757
 *                                                                                                                     // 23758
 * @example                                                                                                            // 23759
   <example>                                                                                                           // 23760
     <file name="index.html">                                                                                          // 23761
      <button ng-mouseleave="count = count + 1" ng-init="count=0">                                                     // 23762
        Increment (when mouse leaves)                                                                                  // 23763
      </button>                                                                                                        // 23764
      count: {{count}}                                                                                                 // 23765
     </file>                                                                                                           // 23766
   </example>                                                                                                          // 23767
 */                                                                                                                    // 23768
                                                                                                                       // 23769
                                                                                                                       // 23770
/**                                                                                                                    // 23771
 * @ngdoc directive                                                                                                    // 23772
 * @name ngMousemove                                                                                                   // 23773
 *                                                                                                                     // 23774
 * @description                                                                                                        // 23775
 * Specify custom behavior on mousemove event.                                                                         // 23776
 *                                                                                                                     // 23777
 * @element ANY                                                                                                        // 23778
 * @priority 0                                                                                                         // 23779
 * @param {expression} ngMousemove {@link guide/expression Expression} to evaluate upon                                // 23780
 * mousemove. ({@link guide/expression#-event- Event object is available as `$event`})                                 // 23781
 *                                                                                                                     // 23782
 * @example                                                                                                            // 23783
   <example>                                                                                                           // 23784
     <file name="index.html">                                                                                          // 23785
      <button ng-mousemove="count = count + 1" ng-init="count=0">                                                      // 23786
        Increment (when mouse moves)                                                                                   // 23787
      </button>                                                                                                        // 23788
      count: {{count}}                                                                                                 // 23789
     </file>                                                                                                           // 23790
   </example>                                                                                                          // 23791
 */                                                                                                                    // 23792
                                                                                                                       // 23793
                                                                                                                       // 23794
/**                                                                                                                    // 23795
 * @ngdoc directive                                                                                                    // 23796
 * @name ngKeydown                                                                                                     // 23797
 *                                                                                                                     // 23798
 * @description                                                                                                        // 23799
 * Specify custom behavior on keydown event.                                                                           // 23800
 *                                                                                                                     // 23801
 * @element ANY                                                                                                        // 23802
 * @priority 0                                                                                                         // 23803
 * @param {expression} ngKeydown {@link guide/expression Expression} to evaluate upon                                  // 23804
 * keydown. (Event object is available as `$event` and can be interrogated for keyCode, altKey, etc.)                  // 23805
 *                                                                                                                     // 23806
 * @example                                                                                                            // 23807
   <example>                                                                                                           // 23808
     <file name="index.html">                                                                                          // 23809
      <input ng-keydown="count = count + 1" ng-init="count=0">                                                         // 23810
      key down count: {{count}}                                                                                        // 23811
     </file>                                                                                                           // 23812
   </example>                                                                                                          // 23813
 */                                                                                                                    // 23814
                                                                                                                       // 23815
                                                                                                                       // 23816
/**                                                                                                                    // 23817
 * @ngdoc directive                                                                                                    // 23818
 * @name ngKeyup                                                                                                       // 23819
 *                                                                                                                     // 23820
 * @description                                                                                                        // 23821
 * Specify custom behavior on keyup event.                                                                             // 23822
 *                                                                                                                     // 23823
 * @element ANY                                                                                                        // 23824
 * @priority 0                                                                                                         // 23825
 * @param {expression} ngKeyup {@link guide/expression Expression} to evaluate upon                                    // 23826
 * keyup. (Event object is available as `$event` and can be interrogated for keyCode, altKey, etc.)                    // 23827
 *                                                                                                                     // 23828
 * @example                                                                                                            // 23829
   <example>                                                                                                           // 23830
     <file name="index.html">                                                                                          // 23831
       <p>Typing in the input box below updates the key count</p>                                                      // 23832
       <input ng-keyup="count = count + 1" ng-init="count=0"> key up count: {{count}}                                  // 23833
                                                                                                                       // 23834
       <p>Typing in the input box below updates the keycode</p>                                                        // 23835
       <input ng-keyup="event=$event">                                                                                 // 23836
       <p>event keyCode: {{ event.keyCode }}</p>                                                                       // 23837
       <p>event altKey: {{ event.altKey }}</p>                                                                         // 23838
     </file>                                                                                                           // 23839
   </example>                                                                                                          // 23840
 */                                                                                                                    // 23841
                                                                                                                       // 23842
                                                                                                                       // 23843
/**                                                                                                                    // 23844
 * @ngdoc directive                                                                                                    // 23845
 * @name ngKeypress                                                                                                    // 23846
 *                                                                                                                     // 23847
 * @description                                                                                                        // 23848
 * Specify custom behavior on keypress event.                                                                          // 23849
 *                                                                                                                     // 23850
 * @element ANY                                                                                                        // 23851
 * @param {expression} ngKeypress {@link guide/expression Expression} to evaluate upon                                 // 23852
 * keypress. ({@link guide/expression#-event- Event object is available as `$event`}                                   // 23853
 * and can be interrogated for keyCode, altKey, etc.)                                                                  // 23854
 *                                                                                                                     // 23855
 * @example                                                                                                            // 23856
   <example>                                                                                                           // 23857
     <file name="index.html">                                                                                          // 23858
      <input ng-keypress="count = count + 1" ng-init="count=0">                                                        // 23859
      key press count: {{count}}                                                                                       // 23860
     </file>                                                                                                           // 23861
   </example>                                                                                                          // 23862
 */                                                                                                                    // 23863
                                                                                                                       // 23864
                                                                                                                       // 23865
/**                                                                                                                    // 23866
 * @ngdoc directive                                                                                                    // 23867
 * @name ngSubmit                                                                                                      // 23868
 *                                                                                                                     // 23869
 * @description                                                                                                        // 23870
 * Enables binding angular expressions to onsubmit events.                                                             // 23871
 *                                                                                                                     // 23872
 * Additionally it prevents the default action (which for form means sending the request to the                        // 23873
 * server and reloading the current page), but only if the form does not contain `action`,                             // 23874
 * `data-action`, or `x-action` attributes.                                                                            // 23875
 *                                                                                                                     // 23876
 * <div class="alert alert-warning">                                                                                   // 23877
 * **Warning:** Be careful not to cause "double-submission" by using both the `ngClick` and                            // 23878
 * `ngSubmit` handlers together. See the                                                                               // 23879
 * {@link form#submitting-a-form-and-preventing-the-default-action `form` directive documentation}                     // 23880
 * for a detailed discussion of when `ngSubmit` may be triggered.                                                      // 23881
 * </div>                                                                                                              // 23882
 *                                                                                                                     // 23883
 * @element form                                                                                                       // 23884
 * @priority 0                                                                                                         // 23885
 * @param {expression} ngSubmit {@link guide/expression Expression} to eval.                                           // 23886
 * ({@link guide/expression#-event- Event object is available as `$event`})                                            // 23887
 *                                                                                                                     // 23888
 * @example                                                                                                            // 23889
   <example module="submitExample">                                                                                    // 23890
     <file name="index.html">                                                                                          // 23891
      <script>                                                                                                         // 23892
        angular.module('submitExample', [])                                                                            // 23893
          .controller('ExampleController', ['$scope', function($scope) {                                               // 23894
            $scope.list = [];                                                                                          // 23895
            $scope.text = 'hello';                                                                                     // 23896
            $scope.submit = function() {                                                                               // 23897
              if ($scope.text) {                                                                                       // 23898
                $scope.list.push(this.text);                                                                           // 23899
                $scope.text = '';                                                                                      // 23900
              }                                                                                                        // 23901
            };                                                                                                         // 23902
          }]);                                                                                                         // 23903
      </script>                                                                                                        // 23904
      <form ng-submit="submit()" ng-controller="ExampleController">                                                    // 23905
        Enter text and hit enter:                                                                                      // 23906
        <input type="text" ng-model="text" name="text" />                                                              // 23907
        <input type="submit" id="submit" value="Submit" />                                                             // 23908
        <pre>list={{list}}</pre>                                                                                       // 23909
      </form>                                                                                                          // 23910
     </file>                                                                                                           // 23911
     <file name="protractor.js" type="protractor">                                                                     // 23912
       it('should check ng-submit', function() {                                                                       // 23913
         expect(element(by.binding('list')).getText()).toBe('list=[]');                                                // 23914
         element(by.css('#submit')).click();                                                                           // 23915
         expect(element(by.binding('list')).getText()).toContain('hello');                                             // 23916
         expect(element(by.model('text')).getAttribute('value')).toBe('');                                             // 23917
       });                                                                                                             // 23918
       it('should ignore empty strings', function() {                                                                  // 23919
         expect(element(by.binding('list')).getText()).toBe('list=[]');                                                // 23920
         element(by.css('#submit')).click();                                                                           // 23921
         element(by.css('#submit')).click();                                                                           // 23922
         expect(element(by.binding('list')).getText()).toContain('hello');                                             // 23923
        });                                                                                                            // 23924
     </file>                                                                                                           // 23925
   </example>                                                                                                          // 23926
 */                                                                                                                    // 23927
                                                                                                                       // 23928
/**                                                                                                                    // 23929
 * @ngdoc directive                                                                                                    // 23930
 * @name ngFocus                                                                                                       // 23931
 *                                                                                                                     // 23932
 * @description                                                                                                        // 23933
 * Specify custom behavior on focus event.                                                                             // 23934
 *                                                                                                                     // 23935
 * Note: As the `focus` event is executed synchronously when calling `input.focus()`                                   // 23936
 * AngularJS executes the expression using `scope.$evalAsync` if the event is fired                                    // 23937
 * during an `$apply` to ensure a consistent state.                                                                    // 23938
 *                                                                                                                     // 23939
 * @element window, input, select, textarea, a                                                                         // 23940
 * @priority 0                                                                                                         // 23941
 * @param {expression} ngFocus {@link guide/expression Expression} to evaluate upon                                    // 23942
 * focus. ({@link guide/expression#-event- Event object is available as `$event`})                                     // 23943
 *                                                                                                                     // 23944
 * @example                                                                                                            // 23945
 * See {@link ng.directive:ngClick ngClick}                                                                            // 23946
 */                                                                                                                    // 23947
                                                                                                                       // 23948
/**                                                                                                                    // 23949
 * @ngdoc directive                                                                                                    // 23950
 * @name ngBlur                                                                                                        // 23951
 *                                                                                                                     // 23952
 * @description                                                                                                        // 23953
 * Specify custom behavior on blur event.                                                                              // 23954
 *                                                                                                                     // 23955
 * A [blur event](https://developer.mozilla.org/en-US/docs/Web/Events/blur) fires when                                 // 23956
 * an element has lost focus.                                                                                          // 23957
 *                                                                                                                     // 23958
 * Note: As the `blur` event is executed synchronously also during DOM manipulations                                   // 23959
 * (e.g. removing a focussed input),                                                                                   // 23960
 * AngularJS executes the expression using `scope.$evalAsync` if the event is fired                                    // 23961
 * during an `$apply` to ensure a consistent state.                                                                    // 23962
 *                                                                                                                     // 23963
 * @element window, input, select, textarea, a                                                                         // 23964
 * @priority 0                                                                                                         // 23965
 * @param {expression} ngBlur {@link guide/expression Expression} to evaluate upon                                     // 23966
 * blur. ({@link guide/expression#-event- Event object is available as `$event`})                                      // 23967
 *                                                                                                                     // 23968
 * @example                                                                                                            // 23969
 * See {@link ng.directive:ngClick ngClick}                                                                            // 23970
 */                                                                                                                    // 23971
                                                                                                                       // 23972
/**                                                                                                                    // 23973
 * @ngdoc directive                                                                                                    // 23974
 * @name ngCopy                                                                                                        // 23975
 *                                                                                                                     // 23976
 * @description                                                                                                        // 23977
 * Specify custom behavior on copy event.                                                                              // 23978
 *                                                                                                                     // 23979
 * @element window, input, select, textarea, a                                                                         // 23980
 * @priority 0                                                                                                         // 23981
 * @param {expression} ngCopy {@link guide/expression Expression} to evaluate upon                                     // 23982
 * copy. ({@link guide/expression#-event- Event object is available as `$event`})                                      // 23983
 *                                                                                                                     // 23984
 * @example                                                                                                            // 23985
   <example>                                                                                                           // 23986
     <file name="index.html">                                                                                          // 23987
      <input ng-copy="copied=true" ng-init="copied=false; value='copy me'" ng-model="value">                           // 23988
      copied: {{copied}}                                                                                               // 23989
     </file>                                                                                                           // 23990
   </example>                                                                                                          // 23991
 */                                                                                                                    // 23992
                                                                                                                       // 23993
/**                                                                                                                    // 23994
 * @ngdoc directive                                                                                                    // 23995
 * @name ngCut                                                                                                         // 23996
 *                                                                                                                     // 23997
 * @description                                                                                                        // 23998
 * Specify custom behavior on cut event.                                                                               // 23999
 *                                                                                                                     // 24000
 * @element window, input, select, textarea, a                                                                         // 24001
 * @priority 0                                                                                                         // 24002
 * @param {expression} ngCut {@link guide/expression Expression} to evaluate upon                                      // 24003
 * cut. ({@link guide/expression#-event- Event object is available as `$event`})                                       // 24004
 *                                                                                                                     // 24005
 * @example                                                                                                            // 24006
   <example>                                                                                                           // 24007
     <file name="index.html">                                                                                          // 24008
      <input ng-cut="cut=true" ng-init="cut=false; value='cut me'" ng-model="value">                                   // 24009
      cut: {{cut}}                                                                                                     // 24010
     </file>                                                                                                           // 24011
   </example>                                                                                                          // 24012
 */                                                                                                                    // 24013
                                                                                                                       // 24014
/**                                                                                                                    // 24015
 * @ngdoc directive                                                                                                    // 24016
 * @name ngPaste                                                                                                       // 24017
 *                                                                                                                     // 24018
 * @description                                                                                                        // 24019
 * Specify custom behavior on paste event.                                                                             // 24020
 *                                                                                                                     // 24021
 * @element window, input, select, textarea, a                                                                         // 24022
 * @priority 0                                                                                                         // 24023
 * @param {expression} ngPaste {@link guide/expression Expression} to evaluate upon                                    // 24024
 * paste. ({@link guide/expression#-event- Event object is available as `$event`})                                     // 24025
 *                                                                                                                     // 24026
 * @example                                                                                                            // 24027
   <example>                                                                                                           // 24028
     <file name="index.html">                                                                                          // 24029
      <input ng-paste="paste=true" ng-init="paste=false" placeholder='paste here'>                                     // 24030
      pasted: {{paste}}                                                                                                // 24031
     </file>                                                                                                           // 24032
   </example>                                                                                                          // 24033
 */                                                                                                                    // 24034
                                                                                                                       // 24035
/**                                                                                                                    // 24036
 * @ngdoc directive                                                                                                    // 24037
 * @name ngIf                                                                                                          // 24038
 * @restrict A                                                                                                         // 24039
 * @multiElement                                                                                                       // 24040
 *                                                                                                                     // 24041
 * @description                                                                                                        // 24042
 * The `ngIf` directive removes or recreates a portion of the DOM tree based on an                                     // 24043
 * {expression}. If the expression assigned to `ngIf` evaluates to a false                                             // 24044
 * value then the element is removed from the DOM, otherwise a clone of the                                            // 24045
 * element is reinserted into the DOM.                                                                                 // 24046
 *                                                                                                                     // 24047
 * `ngIf` differs from `ngShow` and `ngHide` in that `ngIf` completely removes and recreates the                       // 24048
 * element in the DOM rather than changing its visibility via the `display` css property.  A common                    // 24049
 * case when this difference is significant is when using css selectors that rely on an element's                      // 24050
 * position within the DOM, such as the `:first-child` or `:last-child` pseudo-classes.                                // 24051
 *                                                                                                                     // 24052
 * Note that when an element is removed using `ngIf` its scope is destroyed and a new scope                            // 24053
 * is created when the element is restored.  The scope created within `ngIf` inherits from                             // 24054
 * its parent scope using                                                                                              // 24055
 * [prototypal inheritance](https://github.com/angular/angular.js/wiki/Understanding-Scopes#javascript-prototypal-inheritance).
 * An important implication of this is if `ngModel` is used within `ngIf` to bind to                                   // 24057
 * a javascript primitive defined in the parent scope. In this case any modifications made to the                      // 24058
 * variable within the child scope will override (hide) the value in the parent scope.                                 // 24059
 *                                                                                                                     // 24060
 * Also, `ngIf` recreates elements using their compiled state. An example of this behavior                             // 24061
 * is if an element's class attribute is directly modified after it's compiled, using something like                   // 24062
 * jQuery's `.addClass()` method, and the element is later removed. When `ngIf` recreates the element                  // 24063
 * the added class will be lost because the original compiled state is used to regenerate the element.                 // 24064
 *                                                                                                                     // 24065
 * Additionally, you can provide animations via the `ngAnimate` module to animate the `enter`                          // 24066
 * and `leave` effects.                                                                                                // 24067
 *                                                                                                                     // 24068
 * @animations                                                                                                         // 24069
 * enter - happens just after the `ngIf` contents change and a new DOM element is created and injected into the `ngIf` container
 * leave - happens just before the `ngIf` contents are removed from the DOM                                            // 24071
 *                                                                                                                     // 24072
 * @element ANY                                                                                                        // 24073
 * @scope                                                                                                              // 24074
 * @priority 600                                                                                                       // 24075
 * @param {expression} ngIf If the {@link guide/expression expression} is falsy then                                   // 24076
 *     the element is removed from the DOM tree. If it is truthy a copy of the compiled                                // 24077
 *     element is added to the DOM tree.                                                                               // 24078
 *                                                                                                                     // 24079
 * @example                                                                                                            // 24080
  <example module="ngAnimate" deps="angular-animate.js" animations="true">                                             // 24081
    <file name="index.html">                                                                                           // 24082
      <label>Click me: <input type="checkbox" ng-model="checked" ng-init="checked=true" /></label><br/>                // 24083
      Show when checked:                                                                                               // 24084
      <span ng-if="checked" class="animate-if">                                                                        // 24085
        This is removed when the checkbox is unchecked.                                                                // 24086
      </span>                                                                                                          // 24087
    </file>                                                                                                            // 24088
    <file name="animations.css">                                                                                       // 24089
      .animate-if {                                                                                                    // 24090
        background:white;                                                                                              // 24091
        border:1px solid black;                                                                                        // 24092
        padding:10px;                                                                                                  // 24093
      }                                                                                                                // 24094
                                                                                                                       // 24095
      .animate-if.ng-enter, .animate-if.ng-leave {                                                                     // 24096
        transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;                                                  // 24097
      }                                                                                                                // 24098
                                                                                                                       // 24099
      .animate-if.ng-enter,                                                                                            // 24100
      .animate-if.ng-leave.ng-leave-active {                                                                           // 24101
        opacity:0;                                                                                                     // 24102
      }                                                                                                                // 24103
                                                                                                                       // 24104
      .animate-if.ng-leave,                                                                                            // 24105
      .animate-if.ng-enter.ng-enter-active {                                                                           // 24106
        opacity:1;                                                                                                     // 24107
      }                                                                                                                // 24108
    </file>                                                                                                            // 24109
  </example>                                                                                                           // 24110
 */                                                                                                                    // 24111
var ngIfDirective = ['$animate', function($animate) {                                                                  // 24112
  return {                                                                                                             // 24113
    multiElement: true,                                                                                                // 24114
    transclude: 'element',                                                                                             // 24115
    priority: 600,                                                                                                     // 24116
    terminal: true,                                                                                                    // 24117
    restrict: 'A',                                                                                                     // 24118
    $$tlb: true,                                                                                                       // 24119
    link: function($scope, $element, $attr, ctrl, $transclude) {                                                       // 24120
        var block, childScope, previousElements;                                                                       // 24121
        $scope.$watch($attr.ngIf, function ngIfWatchAction(value) {                                                    // 24122
                                                                                                                       // 24123
          if (value) {                                                                                                 // 24124
            if (!childScope) {                                                                                         // 24125
              $transclude(function(clone, newScope) {                                                                  // 24126
                childScope = newScope;                                                                                 // 24127
                clone[clone.length++] = document.createComment(' end ngIf: ' + $attr.ngIf + ' ');                      // 24128
                // Note: We only need the first/last node of the cloned nodes.                                         // 24129
                // However, we need to keep the reference to the jqlite wrapper as it might be changed later           // 24130
                // by a directive with templateUrl when its template arrives.                                          // 24131
                block = {                                                                                              // 24132
                  clone: clone                                                                                         // 24133
                };                                                                                                     // 24134
                $animate.enter(clone, $element.parent(), $element);                                                    // 24135
              });                                                                                                      // 24136
            }                                                                                                          // 24137
          } else {                                                                                                     // 24138
            if (previousElements) {                                                                                    // 24139
              previousElements.remove();                                                                               // 24140
              previousElements = null;                                                                                 // 24141
            }                                                                                                          // 24142
            if (childScope) {                                                                                          // 24143
              childScope.$destroy();                                                                                   // 24144
              childScope = null;                                                                                       // 24145
            }                                                                                                          // 24146
            if (block) {                                                                                               // 24147
              previousElements = getBlockNodes(block.clone);                                                           // 24148
              $animate.leave(previousElements).then(function() {                                                       // 24149
                previousElements = null;                                                                               // 24150
              });                                                                                                      // 24151
              block = null;                                                                                            // 24152
            }                                                                                                          // 24153
          }                                                                                                            // 24154
        });                                                                                                            // 24155
    }                                                                                                                  // 24156
  };                                                                                                                   // 24157
}];                                                                                                                    // 24158
                                                                                                                       // 24159
/**                                                                                                                    // 24160
 * @ngdoc directive                                                                                                    // 24161
 * @name ngInclude                                                                                                     // 24162
 * @restrict ECA                                                                                                       // 24163
 *                                                                                                                     // 24164
 * @description                                                                                                        // 24165
 * Fetches, compiles and includes an external HTML fragment.                                                           // 24166
 *                                                                                                                     // 24167
 * By default, the template URL is restricted to the same domain and protocol as the                                   // 24168
 * application document. This is done by calling {@link $sce#getTrustedResourceUrl                                     // 24169
 * $sce.getTrustedResourceUrl} on it. To load templates from other domains or protocols                                // 24170
 * you may either {@link ng.$sceDelegateProvider#resourceUrlWhitelist whitelist them} or                               // 24171
 * {@link $sce#trustAsResourceUrl wrap them} as trusted values. Refer to Angular's {@link                              // 24172
 * ng.$sce Strict Contextual Escaping}.                                                                                // 24173
 *                                                                                                                     // 24174
 * In addition, the browser's                                                                                          // 24175
 * [Same Origin Policy](https://code.google.com/p/browsersec/wiki/Part2#Same-origin_policy_for_XMLHttpRequest)         // 24176
 * and [Cross-Origin Resource Sharing (CORS)](http://www.w3.org/TR/cors/)                                              // 24177
 * policy may further restrict whether the template is successfully loaded.                                            // 24178
 * For example, `ngInclude` won't work for cross-domain requests on all browsers and for `file://`                     // 24179
 * access on some browsers.                                                                                            // 24180
 *                                                                                                                     // 24181
 * @animations                                                                                                         // 24182
 * enter - animation is used to bring new content into the browser.                                                    // 24183
 * leave - animation is used to animate existing content away.                                                         // 24184
 *                                                                                                                     // 24185
 * The enter and leave animation occur concurrently.                                                                   // 24186
 *                                                                                                                     // 24187
 * @scope                                                                                                              // 24188
 * @priority 400                                                                                                       // 24189
 *                                                                                                                     // 24190
 * @param {string} ngInclude|src angular expression evaluating to URL. If the source is a string constant,             // 24191
 *                 make sure you wrap it in **single** quotes, e.g. `src="'myPartialTemplate.html'"`.                  // 24192
 * @param {string=} onload Expression to evaluate when a new partial is loaded.                                        // 24193
 *                  <div class="alert alert-warning">                                                                  // 24194
 *                  **Note:** When using onload on SVG elements in IE11, the browser will try to call                  // 24195
 *                  a function with the name on the window element, which will usually throw a                         // 24196
 *                  "function is undefined" error. To fix this, you can instead use `data-onload` or a                 // 24197
 *                  different form that {@link guide/directive#normalization matches} `onload`.                        // 24198
 *                  </div>                                                                                             // 24199
   *                                                                                                                   // 24200
 * @param {string=} autoscroll Whether `ngInclude` should call {@link ng.$anchorScroll                                 // 24201
 *                  $anchorScroll} to scroll the viewport after the content is loaded.                                 // 24202
 *                                                                                                                     // 24203
 *                  - If the attribute is not set, disable scrolling.                                                  // 24204
 *                  - If the attribute is set without value, enable scrolling.                                         // 24205
 *                  - Otherwise enable scrolling only if the expression evaluates to truthy value.                     // 24206
 *                                                                                                                     // 24207
 * @example                                                                                                            // 24208
  <example module="includeExample" deps="angular-animate.js" animations="true">                                        // 24209
    <file name="index.html">                                                                                           // 24210
     <div ng-controller="ExampleController">                                                                           // 24211
       <select ng-model="template" ng-options="t.name for t in templates">                                             // 24212
        <option value="">(blank)</option>                                                                              // 24213
       </select>                                                                                                       // 24214
       url of the template: <code>{{template.url}}</code>                                                              // 24215
       <hr/>                                                                                                           // 24216
       <div class="slide-animate-container">                                                                           // 24217
         <div class="slide-animate" ng-include="template.url"></div>                                                   // 24218
       </div>                                                                                                          // 24219
     </div>                                                                                                            // 24220
    </file>                                                                                                            // 24221
    <file name="script.js">                                                                                            // 24222
      angular.module('includeExample', ['ngAnimate'])                                                                  // 24223
        .controller('ExampleController', ['$scope', function($scope) {                                                 // 24224
          $scope.templates =                                                                                           // 24225
            [ { name: 'template1.html', url: 'template1.html'},                                                        // 24226
              { name: 'template2.html', url: 'template2.html'} ];                                                      // 24227
          $scope.template = $scope.templates[0];                                                                       // 24228
        }]);                                                                                                           // 24229
     </file>                                                                                                           // 24230
    <file name="template1.html">                                                                                       // 24231
      Content of template1.html                                                                                        // 24232
    </file>                                                                                                            // 24233
    <file name="template2.html">                                                                                       // 24234
      Content of template2.html                                                                                        // 24235
    </file>                                                                                                            // 24236
    <file name="animations.css">                                                                                       // 24237
      .slide-animate-container {                                                                                       // 24238
        position:relative;                                                                                             // 24239
        background:white;                                                                                              // 24240
        border:1px solid black;                                                                                        // 24241
        height:40px;                                                                                                   // 24242
        overflow:hidden;                                                                                               // 24243
      }                                                                                                                // 24244
                                                                                                                       // 24245
      .slide-animate {                                                                                                 // 24246
        padding:10px;                                                                                                  // 24247
      }                                                                                                                // 24248
                                                                                                                       // 24249
      .slide-animate.ng-enter, .slide-animate.ng-leave {                                                               // 24250
        transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;                                                  // 24251
                                                                                                                       // 24252
        position:absolute;                                                                                             // 24253
        top:0;                                                                                                         // 24254
        left:0;                                                                                                        // 24255
        right:0;                                                                                                       // 24256
        bottom:0;                                                                                                      // 24257
        display:block;                                                                                                 // 24258
        padding:10px;                                                                                                  // 24259
      }                                                                                                                // 24260
                                                                                                                       // 24261
      .slide-animate.ng-enter {                                                                                        // 24262
        top:-50px;                                                                                                     // 24263
      }                                                                                                                // 24264
      .slide-animate.ng-enter.ng-enter-active {                                                                        // 24265
        top:0;                                                                                                         // 24266
      }                                                                                                                // 24267
                                                                                                                       // 24268
      .slide-animate.ng-leave {                                                                                        // 24269
        top:0;                                                                                                         // 24270
      }                                                                                                                // 24271
      .slide-animate.ng-leave.ng-leave-active {                                                                        // 24272
        top:50px;                                                                                                      // 24273
      }                                                                                                                // 24274
    </file>                                                                                                            // 24275
    <file name="protractor.js" type="protractor">                                                                      // 24276
      var templateSelect = element(by.model('template'));                                                              // 24277
      var includeElem = element(by.css('[ng-include]'));                                                               // 24278
                                                                                                                       // 24279
      it('should load template1.html', function() {                                                                    // 24280
        expect(includeElem.getText()).toMatch(/Content of template1.html/);                                            // 24281
      });                                                                                                              // 24282
                                                                                                                       // 24283
      it('should load template2.html', function() {                                                                    // 24284
        if (browser.params.browser == 'firefox') {                                                                     // 24285
          // Firefox can't handle using selects                                                                        // 24286
          // See https://github.com/angular/protractor/issues/480                                                      // 24287
          return;                                                                                                      // 24288
        }                                                                                                              // 24289
        templateSelect.click();                                                                                        // 24290
        templateSelect.all(by.css('option')).get(2).click();                                                           // 24291
        expect(includeElem.getText()).toMatch(/Content of template2.html/);                                            // 24292
      });                                                                                                              // 24293
                                                                                                                       // 24294
      it('should change to blank', function() {                                                                        // 24295
        if (browser.params.browser == 'firefox') {                                                                     // 24296
          // Firefox can't handle using selects                                                                        // 24297
          return;                                                                                                      // 24298
        }                                                                                                              // 24299
        templateSelect.click();                                                                                        // 24300
        templateSelect.all(by.css('option')).get(0).click();                                                           // 24301
        expect(includeElem.isPresent()).toBe(false);                                                                   // 24302
      });                                                                                                              // 24303
    </file>                                                                                                            // 24304
  </example>                                                                                                           // 24305
 */                                                                                                                    // 24306
                                                                                                                       // 24307
                                                                                                                       // 24308
/**                                                                                                                    // 24309
 * @ngdoc event                                                                                                        // 24310
 * @name ngInclude#$includeContentRequested                                                                            // 24311
 * @eventType emit on the scope ngInclude was declared in                                                              // 24312
 * @description                                                                                                        // 24313
 * Emitted every time the ngInclude content is requested.                                                              // 24314
 *                                                                                                                     // 24315
 * @param {Object} angularEvent Synthetic event object.                                                                // 24316
 * @param {String} src URL of content to load.                                                                         // 24317
 */                                                                                                                    // 24318
                                                                                                                       // 24319
                                                                                                                       // 24320
/**                                                                                                                    // 24321
 * @ngdoc event                                                                                                        // 24322
 * @name ngInclude#$includeContentLoaded                                                                               // 24323
 * @eventType emit on the current ngInclude scope                                                                      // 24324
 * @description                                                                                                        // 24325
 * Emitted every time the ngInclude content is reloaded.                                                               // 24326
 *                                                                                                                     // 24327
 * @param {Object} angularEvent Synthetic event object.                                                                // 24328
 * @param {String} src URL of content to load.                                                                         // 24329
 */                                                                                                                    // 24330
                                                                                                                       // 24331
                                                                                                                       // 24332
/**                                                                                                                    // 24333
 * @ngdoc event                                                                                                        // 24334
 * @name ngInclude#$includeContentError                                                                                // 24335
 * @eventType emit on the scope ngInclude was declared in                                                              // 24336
 * @description                                                                                                        // 24337
 * Emitted when a template HTTP request yields an erroneous response (status < 200 || status > 299)                    // 24338
 *                                                                                                                     // 24339
 * @param {Object} angularEvent Synthetic event object.                                                                // 24340
 * @param {String} src URL of content to load.                                                                         // 24341
 */                                                                                                                    // 24342
var ngIncludeDirective = ['$templateRequest', '$anchorScroll', '$animate',                                             // 24343
                  function($templateRequest,   $anchorScroll,   $animate) {                                            // 24344
  return {                                                                                                             // 24345
    restrict: 'ECA',                                                                                                   // 24346
    priority: 400,                                                                                                     // 24347
    terminal: true,                                                                                                    // 24348
    transclude: 'element',                                                                                             // 24349
    controller: angular.noop,                                                                                          // 24350
    compile: function(element, attr) {                                                                                 // 24351
      var srcExp = attr.ngInclude || attr.src,                                                                         // 24352
          onloadExp = attr.onload || '',                                                                               // 24353
          autoScrollExp = attr.autoscroll;                                                                             // 24354
                                                                                                                       // 24355
      return function(scope, $element, $attr, ctrl, $transclude) {                                                     // 24356
        var changeCounter = 0,                                                                                         // 24357
            currentScope,                                                                                              // 24358
            previousElement,                                                                                           // 24359
            currentElement;                                                                                            // 24360
                                                                                                                       // 24361
        var cleanupLastIncludeContent = function() {                                                                   // 24362
          if (previousElement) {                                                                                       // 24363
            previousElement.remove();                                                                                  // 24364
            previousElement = null;                                                                                    // 24365
          }                                                                                                            // 24366
          if (currentScope) {                                                                                          // 24367
            currentScope.$destroy();                                                                                   // 24368
            currentScope = null;                                                                                       // 24369
          }                                                                                                            // 24370
          if (currentElement) {                                                                                        // 24371
            $animate.leave(currentElement).then(function() {                                                           // 24372
              previousElement = null;                                                                                  // 24373
            });                                                                                                        // 24374
            previousElement = currentElement;                                                                          // 24375
            currentElement = null;                                                                                     // 24376
          }                                                                                                            // 24377
        };                                                                                                             // 24378
                                                                                                                       // 24379
        scope.$watch(srcExp, function ngIncludeWatchAction(src) {                                                      // 24380
          var afterAnimation = function() {                                                                            // 24381
            if (isDefined(autoScrollExp) && (!autoScrollExp || scope.$eval(autoScrollExp))) {                          // 24382
              $anchorScroll();                                                                                         // 24383
            }                                                                                                          // 24384
          };                                                                                                           // 24385
          var thisChangeId = ++changeCounter;                                                                          // 24386
                                                                                                                       // 24387
          if (src) {                                                                                                   // 24388
            //set the 2nd param to true to ignore the template request error so that the inner                         // 24389
            //contents and scope can be cleaned up.                                                                    // 24390
            $templateRequest(src, true).then(function(response) {                                                      // 24391
              if (thisChangeId !== changeCounter) return;                                                              // 24392
              var newScope = scope.$new();                                                                             // 24393
              ctrl.template = response;                                                                                // 24394
                                                                                                                       // 24395
              // Note: This will also link all children of ng-include that were contained in the original              // 24396
              // html. If that content contains controllers, ... they could pollute/change the scope.                  // 24397
              // However, using ng-include on an element with additional content does not make sense...                // 24398
              // Note: We can't remove them in the cloneAttchFn of $transclude as that                                 // 24399
              // function is called before linking the content, which would apply child                                // 24400
              // directives to non existing elements.                                                                  // 24401
              var clone = $transclude(newScope, function(clone) {                                                      // 24402
                cleanupLastIncludeContent();                                                                           // 24403
                $animate.enter(clone, null, $element).then(afterAnimation);                                            // 24404
              });                                                                                                      // 24405
                                                                                                                       // 24406
              currentScope = newScope;                                                                                 // 24407
              currentElement = clone;                                                                                  // 24408
                                                                                                                       // 24409
              currentScope.$emit('$includeContentLoaded', src);                                                        // 24410
              scope.$eval(onloadExp);                                                                                  // 24411
            }, function() {                                                                                            // 24412
              if (thisChangeId === changeCounter) {                                                                    // 24413
                cleanupLastIncludeContent();                                                                           // 24414
                scope.$emit('$includeContentError', src);                                                              // 24415
              }                                                                                                        // 24416
            });                                                                                                        // 24417
            scope.$emit('$includeContentRequested', src);                                                              // 24418
          } else {                                                                                                     // 24419
            cleanupLastIncludeContent();                                                                               // 24420
            ctrl.template = null;                                                                                      // 24421
          }                                                                                                            // 24422
        });                                                                                                            // 24423
      };                                                                                                               // 24424
    }                                                                                                                  // 24425
  };                                                                                                                   // 24426
}];                                                                                                                    // 24427
                                                                                                                       // 24428
// This directive is called during the $transclude call of the first `ngInclude` directive.                            // 24429
// It will replace and compile the content of the element with the loaded template.                                    // 24430
// We need this directive so that the element content is already filled when                                           // 24431
// the link function of another directive on the same element as ngInclude                                             // 24432
// is called.                                                                                                          // 24433
var ngIncludeFillContentDirective = ['$compile',                                                                       // 24434
  function($compile) {                                                                                                 // 24435
    return {                                                                                                           // 24436
      restrict: 'ECA',                                                                                                 // 24437
      priority: -400,                                                                                                  // 24438
      require: 'ngInclude',                                                                                            // 24439
      link: function(scope, $element, $attr, ctrl) {                                                                   // 24440
        if (/SVG/.test($element[0].toString())) {                                                                      // 24441
          // WebKit: https://bugs.webkit.org/show_bug.cgi?id=135698 --- SVG elements do not                            // 24442
          // support innerHTML, so detect this here and try to generate the contents                                   // 24443
          // specially.                                                                                                // 24444
          $element.empty();                                                                                            // 24445
          $compile(jqLiteBuildFragment(ctrl.template, document).childNodes)(scope,                                     // 24446
              function namespaceAdaptedClone(clone) {                                                                  // 24447
            $element.append(clone);                                                                                    // 24448
          }, {futureParentElement: $element});                                                                         // 24449
          return;                                                                                                      // 24450
        }                                                                                                              // 24451
                                                                                                                       // 24452
        $element.html(ctrl.template);                                                                                  // 24453
        $compile($element.contents())(scope);                                                                          // 24454
      }                                                                                                                // 24455
    };                                                                                                                 // 24456
  }];                                                                                                                  // 24457
                                                                                                                       // 24458
/**                                                                                                                    // 24459
 * @ngdoc directive                                                                                                    // 24460
 * @name ngInit                                                                                                        // 24461
 * @restrict AC                                                                                                        // 24462
 *                                                                                                                     // 24463
 * @description                                                                                                        // 24464
 * The `ngInit` directive allows you to evaluate an expression in the                                                  // 24465
 * current scope.                                                                                                      // 24466
 *                                                                                                                     // 24467
 * <div class="alert alert-danger">                                                                                    // 24468
 * This directive can be abused to add unnecessary amounts of logic into your templates.                               // 24469
 * There are only a few appropriate uses of `ngInit`, such as for aliasing special properties of                       // 24470
 * {@link ng.directive:ngRepeat `ngRepeat`}, as seen in the demo below; and for injecting data via                     // 24471
 * server side scripting. Besides these few cases, you should use {@link guide/controller controllers}                 // 24472
 * rather than `ngInit` to initialize values on a scope.                                                               // 24473
 * </div>                                                                                                              // 24474
 *                                                                                                                     // 24475
 * <div class="alert alert-warning">                                                                                   // 24476
 * **Note**: If you have assignment in `ngInit` along with a {@link ng.$filter `filter`}, make                         // 24477
 * sure you have parentheses to ensure correct operator precedence:                                                    // 24478
 * <pre class="prettyprint">                                                                                           // 24479
 * `<div ng-init="test1 = ($index | toString)"></div>`                                                                 // 24480
 * </pre>                                                                                                              // 24481
 * </div>                                                                                                              // 24482
 *                                                                                                                     // 24483
 * @priority 450                                                                                                       // 24484
 *                                                                                                                     // 24485
 * @element ANY                                                                                                        // 24486
 * @param {expression} ngInit {@link guide/expression Expression} to eval.                                             // 24487
 *                                                                                                                     // 24488
 * @example                                                                                                            // 24489
   <example module="initExample">                                                                                      // 24490
     <file name="index.html">                                                                                          // 24491
   <script>                                                                                                            // 24492
     angular.module('initExample', [])                                                                                 // 24493
       .controller('ExampleController', ['$scope', function($scope) {                                                  // 24494
         $scope.list = [['a', 'b'], ['c', 'd']];                                                                       // 24495
       }]);                                                                                                            // 24496
   </script>                                                                                                           // 24497
   <div ng-controller="ExampleController">                                                                             // 24498
     <div ng-repeat="innerList in list" ng-init="outerIndex = $index">                                                 // 24499
       <div ng-repeat="value in innerList" ng-init="innerIndex = $index">                                              // 24500
          <span class="example-init">list[ {{outerIndex}} ][ {{innerIndex}} ] = {{value}};</span>                      // 24501
       </div>                                                                                                          // 24502
     </div>                                                                                                            // 24503
   </div>                                                                                                              // 24504
     </file>                                                                                                           // 24505
     <file name="protractor.js" type="protractor">                                                                     // 24506
       it('should alias index positions', function() {                                                                 // 24507
         var elements = element.all(by.css('.example-init'));                                                          // 24508
         expect(elements.get(0).getText()).toBe('list[ 0 ][ 0 ] = a;');                                                // 24509
         expect(elements.get(1).getText()).toBe('list[ 0 ][ 1 ] = b;');                                                // 24510
         expect(elements.get(2).getText()).toBe('list[ 1 ][ 0 ] = c;');                                                // 24511
         expect(elements.get(3).getText()).toBe('list[ 1 ][ 1 ] = d;');                                                // 24512
       });                                                                                                             // 24513
     </file>                                                                                                           // 24514
   </example>                                                                                                          // 24515
 */                                                                                                                    // 24516
var ngInitDirective = ngDirective({                                                                                    // 24517
  priority: 450,                                                                                                       // 24518
  compile: function() {                                                                                                // 24519
    return {                                                                                                           // 24520
      pre: function(scope, element, attrs) {                                                                           // 24521
        scope.$eval(attrs.ngInit);                                                                                     // 24522
      }                                                                                                                // 24523
    };                                                                                                                 // 24524
  }                                                                                                                    // 24525
});                                                                                                                    // 24526
                                                                                                                       // 24527
/**                                                                                                                    // 24528
 * @ngdoc directive                                                                                                    // 24529
 * @name ngList                                                                                                        // 24530
 *                                                                                                                     // 24531
 * @description                                                                                                        // 24532
 * Text input that converts between a delimited string and an array of strings. The default                            // 24533
 * delimiter is a comma followed by a space - equivalent to `ng-list=", "`. You can specify a custom                   // 24534
 * delimiter as the value of the `ngList` attribute - for example, `ng-list=" | "`.                                    // 24535
 *                                                                                                                     // 24536
 * The behaviour of the directive is affected by the use of the `ngTrim` attribute.                                    // 24537
 * * If `ngTrim` is set to `"false"` then whitespace around both the separator and each                                // 24538
 *   list item is respected. This implies that the user of the directive is responsible for                            // 24539
 *   dealing with whitespace but also allows you to use whitespace as a delimiter, such as a                           // 24540
 *   tab or newline character.                                                                                         // 24541
 * * Otherwise whitespace around the delimiter is ignored when splitting (although it is respected                     // 24542
 *   when joining the list items back together) and whitespace around each list item is stripped                       // 24543
 *   before it is added to the model.                                                                                  // 24544
 *                                                                                                                     // 24545
 * ### Example with Validation                                                                                         // 24546
 *                                                                                                                     // 24547
 * <example name="ngList-directive" module="listExample">                                                              // 24548
 *   <file name="app.js">                                                                                              // 24549
 *      angular.module('listExample', [])                                                                              // 24550
 *        .controller('ExampleController', ['$scope', function($scope) {                                               // 24551
 *          $scope.names = ['morpheus', 'neo', 'trinity'];                                                             // 24552
 *        }]);                                                                                                         // 24553
 *   </file>                                                                                                           // 24554
 *   <file name="index.html">                                                                                          // 24555
 *    <form name="myForm" ng-controller="ExampleController">                                                           // 24556
 *      <label>List: <input name="namesInput" ng-model="names" ng-list required></label>                               // 24557
 *      <span role="alert">                                                                                            // 24558
 *        <span class="error" ng-show="myForm.namesInput.$error.required">                                             // 24559
 *        Required!</span>                                                                                             // 24560
 *      </span>                                                                                                        // 24561
 *      <br>                                                                                                           // 24562
 *      <tt>names = {{names}}</tt><br/>                                                                                // 24563
 *      <tt>myForm.namesInput.$valid = {{myForm.namesInput.$valid}}</tt><br/>                                          // 24564
 *      <tt>myForm.namesInput.$error = {{myForm.namesInput.$error}}</tt><br/>                                          // 24565
 *      <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>                                                                // 24566
 *      <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>                                            // 24567
 *     </form>                                                                                                         // 24568
 *   </file>                                                                                                           // 24569
 *   <file name="protractor.js" type="protractor">                                                                     // 24570
 *     var listInput = element(by.model('names'));                                                                     // 24571
 *     var names = element(by.exactBinding('names'));                                                                  // 24572
 *     var valid = element(by.binding('myForm.namesInput.$valid'));                                                    // 24573
 *     var error = element(by.css('span.error'));                                                                      // 24574
 *                                                                                                                     // 24575
 *     it('should initialize to model', function() {                                                                   // 24576
 *       expect(names.getText()).toContain('["morpheus","neo","trinity"]');                                            // 24577
 *       expect(valid.getText()).toContain('true');                                                                    // 24578
 *       expect(error.getCssValue('display')).toBe('none');                                                            // 24579
 *     });                                                                                                             // 24580
 *                                                                                                                     // 24581
 *     it('should be invalid if empty', function() {                                                                   // 24582
 *       listInput.clear();                                                                                            // 24583
 *       listInput.sendKeys('');                                                                                       // 24584
 *                                                                                                                     // 24585
 *       expect(names.getText()).toContain('');                                                                        // 24586
 *       expect(valid.getText()).toContain('false');                                                                   // 24587
 *       expect(error.getCssValue('display')).not.toBe('none');                                                        // 24588
 *     });                                                                                                             // 24589
 *   </file>                                                                                                           // 24590
 * </example>                                                                                                          // 24591
 *                                                                                                                     // 24592
 * ### Example - splitting on newline                                                                                  // 24593
 * <example name="ngList-directive-newlines">                                                                          // 24594
 *   <file name="index.html">                                                                                          // 24595
 *    <textarea ng-model="list" ng-list="&#10;" ng-trim="false"></textarea>                                            // 24596
 *    <pre>{{ list | json }}</pre>                                                                                     // 24597
 *   </file>                                                                                                           // 24598
 *   <file name="protractor.js" type="protractor">                                                                     // 24599
 *     it("should split the text by newlines", function() {                                                            // 24600
 *       var listInput = element(by.model('list'));                                                                    // 24601
 *       var output = element(by.binding('list | json'));                                                              // 24602
 *       listInput.sendKeys('abc\ndef\nghi');                                                                          // 24603
 *       expect(output.getText()).toContain('[\n  "abc",\n  "def",\n  "ghi"\n]');                                      // 24604
 *     });                                                                                                             // 24605
 *   </file>                                                                                                           // 24606
 * </example>                                                                                                          // 24607
 *                                                                                                                     // 24608
 * @element input                                                                                                      // 24609
 * @param {string=} ngList optional delimiter that should be used to split the value.                                  // 24610
 */                                                                                                                    // 24611
var ngListDirective = function() {                                                                                     // 24612
  return {                                                                                                             // 24613
    restrict: 'A',                                                                                                     // 24614
    priority: 100,                                                                                                     // 24615
    require: 'ngModel',                                                                                                // 24616
    link: function(scope, element, attr, ctrl) {                                                                       // 24617
      // We want to control whitespace trimming so we use this convoluted approach                                     // 24618
      // to access the ngList attribute, which doesn't pre-trim the attribute                                          // 24619
      var ngList = element.attr(attr.$attr.ngList) || ', ';                                                            // 24620
      var trimValues = attr.ngTrim !== 'false';                                                                        // 24621
      var separator = trimValues ? trim(ngList) : ngList;                                                              // 24622
                                                                                                                       // 24623
      var parse = function(viewValue) {                                                                                // 24624
        // If the viewValue is invalid (say required but empty) it will be `undefined`                                 // 24625
        if (isUndefined(viewValue)) return;                                                                            // 24626
                                                                                                                       // 24627
        var list = [];                                                                                                 // 24628
                                                                                                                       // 24629
        if (viewValue) {                                                                                               // 24630
          forEach(viewValue.split(separator), function(value) {                                                        // 24631
            if (value) list.push(trimValues ? trim(value) : value);                                                    // 24632
          });                                                                                                          // 24633
        }                                                                                                              // 24634
                                                                                                                       // 24635
        return list;                                                                                                   // 24636
      };                                                                                                               // 24637
                                                                                                                       // 24638
      ctrl.$parsers.push(parse);                                                                                       // 24639
      ctrl.$formatters.push(function(value) {                                                                          // 24640
        if (isArray(value)) {                                                                                          // 24641
          return value.join(ngList);                                                                                   // 24642
        }                                                                                                              // 24643
                                                                                                                       // 24644
        return undefined;                                                                                              // 24645
      });                                                                                                              // 24646
                                                                                                                       // 24647
      // Override the standard $isEmpty because an empty array means the input is empty.                               // 24648
      ctrl.$isEmpty = function(value) {                                                                                // 24649
        return !value || !value.length;                                                                                // 24650
      };                                                                                                               // 24651
    }                                                                                                                  // 24652
  };                                                                                                                   // 24653
};                                                                                                                     // 24654
                                                                                                                       // 24655
/* global VALID_CLASS: true,                                                                                           // 24656
  INVALID_CLASS: true,                                                                                                 // 24657
  PRISTINE_CLASS: true,                                                                                                // 24658
  DIRTY_CLASS: true,                                                                                                   // 24659
  UNTOUCHED_CLASS: true,                                                                                               // 24660
  TOUCHED_CLASS: true,                                                                                                 // 24661
*/                                                                                                                     // 24662
                                                                                                                       // 24663
var VALID_CLASS = 'ng-valid',                                                                                          // 24664
    INVALID_CLASS = 'ng-invalid',                                                                                      // 24665
    PRISTINE_CLASS = 'ng-pristine',                                                                                    // 24666
    DIRTY_CLASS = 'ng-dirty',                                                                                          // 24667
    UNTOUCHED_CLASS = 'ng-untouched',                                                                                  // 24668
    TOUCHED_CLASS = 'ng-touched',                                                                                      // 24669
    PENDING_CLASS = 'ng-pending';                                                                                      // 24670
                                                                                                                       // 24671
var ngModelMinErr = minErr('ngModel');                                                                                 // 24672
                                                                                                                       // 24673
/**                                                                                                                    // 24674
 * @ngdoc type                                                                                                         // 24675
 * @name ngModel.NgModelController                                                                                     // 24676
 *                                                                                                                     // 24677
 * @property {*} $viewValue The actual value from the control's view. For `input` elements, this is a                  // 24678
 * String. See {@link ngModel.NgModelController#$setViewValue} for information about when the $viewValue               // 24679
 * is set.                                                                                                             // 24680
 * @property {*} $modelValue The value in the model that the control is bound to.                                      // 24681
 * @property {Array.<Function>} $parsers Array of functions to execute, as a pipeline, whenever                        // 24682
       the control reads value from the DOM. The functions are called in array order, each passing                     // 24683
       its return value through to the next. The last return value is forwarded to the                                 // 24684
       {@link ngModel.NgModelController#$validators `$validators`} collection.                                         // 24685
                                                                                                                       // 24686
Parsers are used to sanitize / convert the {@link ngModel.NgModelController#$viewValue                                 // 24687
`$viewValue`}.                                                                                                         // 24688
                                                                                                                       // 24689
Returning `undefined` from a parser means a parse error occurred. In that case,                                        // 24690
no {@link ngModel.NgModelController#$validators `$validators`} will run and the `ngModel`                              // 24691
will be set to `undefined` unless {@link ngModelOptions `ngModelOptions.allowInvalid`}                                 // 24692
is set to `true`. The parse error is stored in `ngModel.$error.parse`.                                                 // 24693
                                                                                                                       // 24694
 *                                                                                                                     // 24695
 * @property {Array.<Function>} $formatters Array of functions to execute, as a pipeline, whenever                     // 24696
       the model value changes. The functions are called in reverse array order, each passing the value through to the
       next. The last return value is used as the actual DOM value.                                                    // 24698
       Used to format / convert values for display in the control.                                                     // 24699
 * ```js                                                                                                               // 24700
 * function formatter(value) {                                                                                         // 24701
 *   if (value) {                                                                                                      // 24702
 *     return value.toUpperCase();                                                                                     // 24703
 *   }                                                                                                                 // 24704
 * }                                                                                                                   // 24705
 * ngModel.$formatters.push(formatter);                                                                                // 24706
 * ```                                                                                                                 // 24707
 *                                                                                                                     // 24708
 * @property {Object.<string, function>} $validators A collection of validators that are applied                       // 24709
 *      whenever the model value changes. The key value within the object refers to the name of the                    // 24710
 *      validator while the function refers to the validation operation. The validation operation is                   // 24711
 *      provided with the model value as an argument and must return a true or false value depending                   // 24712
 *      on the response of that validation.                                                                            // 24713
 *                                                                                                                     // 24714
 * ```js                                                                                                               // 24715
 * ngModel.$validators.validCharacters = function(modelValue, viewValue) {                                             // 24716
 *   var value = modelValue || viewValue;                                                                              // 24717
 *   return /[0-9]+/.test(value) &&                                                                                    // 24718
 *          /[a-z]+/.test(value) &&                                                                                    // 24719
 *          /[A-Z]+/.test(value) &&                                                                                    // 24720
 *          /\W+/.test(value);                                                                                         // 24721
 * };                                                                                                                  // 24722
 * ```                                                                                                                 // 24723
 *                                                                                                                     // 24724
 * @property {Object.<string, function>} $asyncValidators A collection of validations that are expected to             // 24725
 *      perform an asynchronous validation (e.g. a HTTP request). The validation function that is provided             // 24726
 *      is expected to return a promise when it is run during the model validation process. Once the promise           // 24727
 *      is delivered then the validation status will be set to true when fulfilled and false when rejected.            // 24728
 *      When the asynchronous validators are triggered, each of the validators will run in parallel and the model      // 24729
 *      value will only be updated once all validators have been fulfilled. As long as an asynchronous validator       // 24730
 *      is unfulfilled, its key will be added to the controllers `$pending` property. Also, all asynchronous validators
 *      will only run once all synchronous validators have passed.                                                     // 24732
 *                                                                                                                     // 24733
 * Please note that if $http is used then it is important that the server returns a success HTTP response code         // 24734
 * in order to fulfill the validation and a status level of `4xx` in order to reject the validation.                   // 24735
 *                                                                                                                     // 24736
 * ```js                                                                                                               // 24737
 * ngModel.$asyncValidators.uniqueUsername = function(modelValue, viewValue) {                                         // 24738
 *   var value = modelValue || viewValue;                                                                              // 24739
 *                                                                                                                     // 24740
 *   // Lookup user by username                                                                                        // 24741
 *   return $http.get('/api/users/' + value).                                                                          // 24742
 *      then(function resolved() {                                                                                     // 24743
 *        //username exists, this means validation fails                                                               // 24744
 *        return $q.reject('exists');                                                                                  // 24745
 *      }, function rejected() {                                                                                       // 24746
 *        //username does not exist, therefore this validation passes                                                  // 24747
 *        return true;                                                                                                 // 24748
 *      });                                                                                                            // 24749
 * };                                                                                                                  // 24750
 * ```                                                                                                                 // 24751
 *                                                                                                                     // 24752
 * @property {Array.<Function>} $viewChangeListeners Array of functions to execute whenever the                        // 24753
 *     view value has changed. It is called with no arguments, and its return value is ignored.                        // 24754
 *     This can be used in place of additional $watches against the model value.                                       // 24755
 *                                                                                                                     // 24756
 * @property {Object} $error An object hash with all failing validator ids as keys.                                    // 24757
 * @property {Object} $pending An object hash with all pending validator ids as keys.                                  // 24758
 *                                                                                                                     // 24759
 * @property {boolean} $untouched True if control has not lost focus yet.                                              // 24760
 * @property {boolean} $touched True if control has lost focus.                                                        // 24761
 * @property {boolean} $pristine True if user has not interacted with the control yet.                                 // 24762
 * @property {boolean} $dirty True if user has already interacted with the control.                                    // 24763
 * @property {boolean} $valid True if there is no error.                                                               // 24764
 * @property {boolean} $invalid True if at least one error on the control.                                             // 24765
 * @property {string} $name The name attribute of the control.                                                         // 24766
 *                                                                                                                     // 24767
 * @description                                                                                                        // 24768
 *                                                                                                                     // 24769
 * `NgModelController` provides API for the {@link ngModel `ngModel`} directive.                                       // 24770
 * The controller contains services for data-binding, validation, CSS updates, and value formatting                    // 24771
 * and parsing. It purposefully does not contain any logic which deals with DOM rendering or                           // 24772
 * listening to DOM events.                                                                                            // 24773
 * Such DOM related logic should be provided by other directives which make use of                                     // 24774
 * `NgModelController` for data-binding to control elements.                                                           // 24775
 * Angular provides this DOM logic for most {@link input `input`} elements.                                            // 24776
 * At the end of this page you can find a {@link ngModel.NgModelController#custom-control-example                      // 24777
 * custom control example} that uses `ngModelController` to bind to `contenteditable` elements.                        // 24778
 *                                                                                                                     // 24779
 * @example                                                                                                            // 24780
 * ### Custom Control Example                                                                                          // 24781
 * This example shows how to use `NgModelController` with a custom control to achieve                                  // 24782
 * data-binding. Notice how different directives (`contenteditable`, `ng-model`, and `required`)                       // 24783
 * collaborate together to achieve the desired result.                                                                 // 24784
 *                                                                                                                     // 24785
 * `contenteditable` is an HTML5 attribute, which tells the browser to let the element                                 // 24786
 * contents be edited in place by the user.                                                                            // 24787
 *                                                                                                                     // 24788
 * We are using the {@link ng.service:$sce $sce} service here and include the {@link ngSanitize $sanitize}             // 24789
 * module to automatically remove "bad" content like inline event listener (e.g. `<span onclick="...">`).              // 24790
 * However, as we are using `$sce` the model can still decide to provide unsafe content if it marks                    // 24791
 * that content using the `$sce` service.                                                                              // 24792
 *                                                                                                                     // 24793
 * <example name="NgModelController" module="customControl" deps="angular-sanitize.js">                                // 24794
    <file name="style.css">                                                                                            // 24795
      [contenteditable] {                                                                                              // 24796
        border: 1px solid black;                                                                                       // 24797
        background-color: white;                                                                                       // 24798
        min-height: 20px;                                                                                              // 24799
      }                                                                                                                // 24800
                                                                                                                       // 24801
      .ng-invalid {                                                                                                    // 24802
        border: 1px solid red;                                                                                         // 24803
      }                                                                                                                // 24804
                                                                                                                       // 24805
    </file>                                                                                                            // 24806
    <file name="script.js">                                                                                            // 24807
      angular.module('customControl', ['ngSanitize']).                                                                 // 24808
        directive('contenteditable', ['$sce', function($sce) {                                                         // 24809
          return {                                                                                                     // 24810
            restrict: 'A', // only activate on element attribute                                                       // 24811
            require: '?ngModel', // get a hold of NgModelController                                                    // 24812
            link: function(scope, element, attrs, ngModel) {                                                           // 24813
              if (!ngModel) return; // do nothing if no ng-model                                                       // 24814
                                                                                                                       // 24815
              // Specify how UI should be updated                                                                      // 24816
              ngModel.$render = function() {                                                                           // 24817
                element.html($sce.getTrustedHtml(ngModel.$viewValue || ''));                                           // 24818
              };                                                                                                       // 24819
                                                                                                                       // 24820
              // Listen for change events to enable binding                                                            // 24821
              element.on('blur keyup change', function() {                                                             // 24822
                scope.$evalAsync(read);                                                                                // 24823
              });                                                                                                      // 24824
              read(); // initialize                                                                                    // 24825
                                                                                                                       // 24826
              // Write data to the model                                                                               // 24827
              function read() {                                                                                        // 24828
                var html = element.html();                                                                             // 24829
                // When we clear the content editable the browser leaves a <br> behind                                 // 24830
                // If strip-br attribute is provided then we strip this out                                            // 24831
                if ( attrs.stripBr && html == '<br>' ) {                                                               // 24832
                  html = '';                                                                                           // 24833
                }                                                                                                      // 24834
                ngModel.$setViewValue(html);                                                                           // 24835
              }                                                                                                        // 24836
            }                                                                                                          // 24837
          };                                                                                                           // 24838
        }]);                                                                                                           // 24839
    </file>                                                                                                            // 24840
    <file name="index.html">                                                                                           // 24841
      <form name="myForm">                                                                                             // 24842
       <div contenteditable                                                                                            // 24843
            name="myWidget" ng-model="userContent"                                                                     // 24844
            strip-br="true"                                                                                            // 24845
            required>Change me!</div>                                                                                  // 24846
        <span ng-show="myForm.myWidget.$error.required">Required!</span>                                               // 24847
       <hr>                                                                                                            // 24848
       <textarea ng-model="userContent" aria-label="Dynamic textarea"></textarea>                                      // 24849
      </form>                                                                                                          // 24850
    </file>                                                                                                            // 24851
    <file name="protractor.js" type="protractor">                                                                      // 24852
    it('should data-bind and become invalid', function() {                                                             // 24853
      if (browser.params.browser == 'safari' || browser.params.browser == 'firefox') {                                 // 24854
        // SafariDriver can't handle contenteditable                                                                   // 24855
        // and Firefox driver can't clear contenteditables very well                                                   // 24856
        return;                                                                                                        // 24857
      }                                                                                                                // 24858
      var contentEditable = element(by.css('[contenteditable]'));                                                      // 24859
      var content = 'Change me!';                                                                                      // 24860
                                                                                                                       // 24861
      expect(contentEditable.getText()).toEqual(content);                                                              // 24862
                                                                                                                       // 24863
      contentEditable.clear();                                                                                         // 24864
      contentEditable.sendKeys(protractor.Key.BACK_SPACE);                                                             // 24865
      expect(contentEditable.getText()).toEqual('');                                                                   // 24866
      expect(contentEditable.getAttribute('class')).toMatch(/ng-invalid-required/);                                    // 24867
    });                                                                                                                // 24868
    </file>                                                                                                            // 24869
 * </example>                                                                                                          // 24870
 *                                                                                                                     // 24871
 *                                                                                                                     // 24872
 */                                                                                                                    // 24873
var NgModelController = ['$scope', '$exceptionHandler', '$attrs', '$element', '$parse', '$animate', '$timeout', '$rootScope', '$q', '$interpolate',
    function($scope, $exceptionHandler, $attr, $element, $parse, $animate, $timeout, $rootScope, $q, $interpolate) {   // 24875
  this.$viewValue = Number.NaN;                                                                                        // 24876
  this.$modelValue = Number.NaN;                                                                                       // 24877
  this.$$rawModelValue = undefined; // stores the parsed modelValue / model set from scope regardless of validity.     // 24878
  this.$validators = {};                                                                                               // 24879
  this.$asyncValidators = {};                                                                                          // 24880
  this.$parsers = [];                                                                                                  // 24881
  this.$formatters = [];                                                                                               // 24882
  this.$viewChangeListeners = [];                                                                                      // 24883
  this.$untouched = true;                                                                                              // 24884
  this.$touched = false;                                                                                               // 24885
  this.$pristine = true;                                                                                               // 24886
  this.$dirty = false;                                                                                                 // 24887
  this.$valid = true;                                                                                                  // 24888
  this.$invalid = false;                                                                                               // 24889
  this.$error = {}; // keep invalid keys here                                                                          // 24890
  this.$$success = {}; // keep valid keys here                                                                         // 24891
  this.$pending = undefined; // keep pending keys here                                                                 // 24892
  this.$name = $interpolate($attr.name || '', false)($scope);                                                          // 24893
  this.$$parentForm = nullFormCtrl;                                                                                    // 24894
                                                                                                                       // 24895
  var parsedNgModel = $parse($attr.ngModel),                                                                           // 24896
      parsedNgModelAssign = parsedNgModel.assign,                                                                      // 24897
      ngModelGet = parsedNgModel,                                                                                      // 24898
      ngModelSet = parsedNgModelAssign,                                                                                // 24899
      pendingDebounce = null,                                                                                          // 24900
      parserValid,                                                                                                     // 24901
      ctrl = this;                                                                                                     // 24902
                                                                                                                       // 24903
  this.$$setOptions = function(options) {                                                                              // 24904
    ctrl.$options = options;                                                                                           // 24905
    if (options && options.getterSetter) {                                                                             // 24906
      var invokeModelGetter = $parse($attr.ngModel + '()'),                                                            // 24907
          invokeModelSetter = $parse($attr.ngModel + '($$$p)');                                                        // 24908
                                                                                                                       // 24909
      ngModelGet = function($scope) {                                                                                  // 24910
        var modelValue = parsedNgModel($scope);                                                                        // 24911
        if (isFunction(modelValue)) {                                                                                  // 24912
          modelValue = invokeModelGetter($scope);                                                                      // 24913
        }                                                                                                              // 24914
        return modelValue;                                                                                             // 24915
      };                                                                                                               // 24916
      ngModelSet = function($scope, newValue) {                                                                        // 24917
        if (isFunction(parsedNgModel($scope))) {                                                                       // 24918
          invokeModelSetter($scope, {$$$p: ctrl.$modelValue});                                                         // 24919
        } else {                                                                                                       // 24920
          parsedNgModelAssign($scope, ctrl.$modelValue);                                                               // 24921
        }                                                                                                              // 24922
      };                                                                                                               // 24923
    } else if (!parsedNgModel.assign) {                                                                                // 24924
      throw ngModelMinErr('nonassign', "Expression '{0}' is non-assignable. Element: {1}",                             // 24925
          $attr.ngModel, startingTag($element));                                                                       // 24926
    }                                                                                                                  // 24927
  };                                                                                                                   // 24928
                                                                                                                       // 24929
  /**                                                                                                                  // 24930
   * @ngdoc method                                                                                                     // 24931
   * @name ngModel.NgModelController#$render                                                                           // 24932
   *                                                                                                                   // 24933
   * @description                                                                                                      // 24934
   * Called when the view needs to be updated. It is expected that the user of the ng-model                            // 24935
   * directive will implement this method.                                                                             // 24936
   *                                                                                                                   // 24937
   * The `$render()` method is invoked in the following situations:                                                    // 24938
   *                                                                                                                   // 24939
   * * `$rollbackViewValue()` is called.  If we are rolling back the view value to the last                            // 24940
   *   committed value then `$render()` is called to update the input control.                                         // 24941
   * * The value referenced by `ng-model` is changed programmatically and both the `$modelValue` and                   // 24942
   *   the `$viewValue` are different from last time.                                                                  // 24943
   *                                                                                                                   // 24944
   * Since `ng-model` does not do a deep watch, `$render()` is only invoked if the values of                           // 24945
   * `$modelValue` and `$viewValue` are actually different from their previous value. If `$modelValue`                 // 24946
   * or `$viewValue` are objects (rather than a string or number) then `$render()` will not be                         // 24947
   * invoked if you only change a property on the objects.                                                             // 24948
   */                                                                                                                  // 24949
  this.$render = noop;                                                                                                 // 24950
                                                                                                                       // 24951
  /**                                                                                                                  // 24952
   * @ngdoc method                                                                                                     // 24953
   * @name ngModel.NgModelController#$isEmpty                                                                          // 24954
   *                                                                                                                   // 24955
   * @description                                                                                                      // 24956
   * This is called when we need to determine if the value of an input is empty.                                       // 24957
   *                                                                                                                   // 24958
   * For instance, the required directive does this to work out if the input has data or not.                          // 24959
   *                                                                                                                   // 24960
   * The default `$isEmpty` function checks whether the value is `undefined`, `''`, `null` or `NaN`.                   // 24961
   *                                                                                                                   // 24962
   * You can override this for input directives whose concept of being empty is different from the                     // 24963
   * default. The `checkboxInputType` directive does this because in its case a value of `false`                       // 24964
   * implies empty.                                                                                                    // 24965
   *                                                                                                                   // 24966
   * @param {*} value The value of the input to check for emptiness.                                                   // 24967
   * @returns {boolean} True if `value` is "empty".                                                                    // 24968
   */                                                                                                                  // 24969
  this.$isEmpty = function(value) {                                                                                    // 24970
    return isUndefined(value) || value === '' || value === null || value !== value;                                    // 24971
  };                                                                                                                   // 24972
                                                                                                                       // 24973
  var currentValidationRunId = 0;                                                                                      // 24974
                                                                                                                       // 24975
  /**                                                                                                                  // 24976
   * @ngdoc method                                                                                                     // 24977
   * @name ngModel.NgModelController#$setValidity                                                                      // 24978
   *                                                                                                                   // 24979
   * @description                                                                                                      // 24980
   * Change the validity state, and notify the form.                                                                   // 24981
   *                                                                                                                   // 24982
   * This method can be called within $parsers/$formatters or a custom validation implementation.                      // 24983
   * However, in most cases it should be sufficient to use the `ngModel.$validators` and                               // 24984
   * `ngModel.$asyncValidators` collections which will call `$setValidity` automatically.                              // 24985
   *                                                                                                                   // 24986
   * @param {string} validationErrorKey Name of the validator. The `validationErrorKey` will be assigned               // 24987
   *        to either `$error[validationErrorKey]` or `$pending[validationErrorKey]`                                   // 24988
   *        (for unfulfilled `$asyncValidators`), so that it is available for data-binding.                            // 24989
   *        The `validationErrorKey` should be in camelCase and will get converted into dash-case                      // 24990
   *        for class name. Example: `myError` will result in `ng-valid-my-error` and `ng-invalid-my-error`            // 24991
   *        class and can be bound to as  `{{someForm.someControl.$error.myError}}` .                                  // 24992
   * @param {boolean} isValid Whether the current state is valid (true), invalid (false), pending (undefined),         // 24993
   *                          or skipped (null). Pending is used for unfulfilled `$asyncValidators`.                   // 24994
   *                          Skipped is used by Angular when validators do not run because of parse errors and        // 24995
   *                          when `$asyncValidators` do not run because any of the `$validators` failed.              // 24996
   */                                                                                                                  // 24997
  addSetValidityMethod({                                                                                               // 24998
    ctrl: this,                                                                                                        // 24999
    $element: $element,                                                                                                // 25000
    set: function(object, property) {                                                                                  // 25001
      object[property] = true;                                                                                         // 25002
    },                                                                                                                 // 25003
    unset: function(object, property) {                                                                                // 25004
      delete object[property];                                                                                         // 25005
    },                                                                                                                 // 25006
    $animate: $animate                                                                                                 // 25007
  });                                                                                                                  // 25008
                                                                                                                       // 25009
  /**                                                                                                                  // 25010
   * @ngdoc method                                                                                                     // 25011
   * @name ngModel.NgModelController#$setPristine                                                                      // 25012
   *                                                                                                                   // 25013
   * @description                                                                                                      // 25014
   * Sets the control to its pristine state.                                                                           // 25015
   *                                                                                                                   // 25016
   * This method can be called to remove the `ng-dirty` class and set the control to its pristine                      // 25017
   * state (`ng-pristine` class). A model is considered to be pristine when the control                                // 25018
   * has not been changed from when first compiled.                                                                    // 25019
   */                                                                                                                  // 25020
  this.$setPristine = function() {                                                                                     // 25021
    ctrl.$dirty = false;                                                                                               // 25022
    ctrl.$pristine = true;                                                                                             // 25023
    $animate.removeClass($element, DIRTY_CLASS);                                                                       // 25024
    $animate.addClass($element, PRISTINE_CLASS);                                                                       // 25025
  };                                                                                                                   // 25026
                                                                                                                       // 25027
  /**                                                                                                                  // 25028
   * @ngdoc method                                                                                                     // 25029
   * @name ngModel.NgModelController#$setDirty                                                                         // 25030
   *                                                                                                                   // 25031
   * @description                                                                                                      // 25032
   * Sets the control to its dirty state.                                                                              // 25033
   *                                                                                                                   // 25034
   * This method can be called to remove the `ng-pristine` class and set the control to its dirty                      // 25035
   * state (`ng-dirty` class). A model is considered to be dirty when the control has been changed                     // 25036
   * from when first compiled.                                                                                         // 25037
   */                                                                                                                  // 25038
  this.$setDirty = function() {                                                                                        // 25039
    ctrl.$dirty = true;                                                                                                // 25040
    ctrl.$pristine = false;                                                                                            // 25041
    $animate.removeClass($element, PRISTINE_CLASS);                                                                    // 25042
    $animate.addClass($element, DIRTY_CLASS);                                                                          // 25043
    ctrl.$$parentForm.$setDirty();                                                                                     // 25044
  };                                                                                                                   // 25045
                                                                                                                       // 25046
  /**                                                                                                                  // 25047
   * @ngdoc method                                                                                                     // 25048
   * @name ngModel.NgModelController#$setUntouched                                                                     // 25049
   *                                                                                                                   // 25050
   * @description                                                                                                      // 25051
   * Sets the control to its untouched state.                                                                          // 25052
   *                                                                                                                   // 25053
   * This method can be called to remove the `ng-touched` class and set the control to its                             // 25054
   * untouched state (`ng-untouched` class). Upon compilation, a model is set as untouched                             // 25055
   * by default, however this function can be used to restore that state if the model has                              // 25056
   * already been touched by the user.                                                                                 // 25057
   */                                                                                                                  // 25058
  this.$setUntouched = function() {                                                                                    // 25059
    ctrl.$touched = false;                                                                                             // 25060
    ctrl.$untouched = true;                                                                                            // 25061
    $animate.setClass($element, UNTOUCHED_CLASS, TOUCHED_CLASS);                                                       // 25062
  };                                                                                                                   // 25063
                                                                                                                       // 25064
  /**                                                                                                                  // 25065
   * @ngdoc method                                                                                                     // 25066
   * @name ngModel.NgModelController#$setTouched                                                                       // 25067
   *                                                                                                                   // 25068
   * @description                                                                                                      // 25069
   * Sets the control to its touched state.                                                                            // 25070
   *                                                                                                                   // 25071
   * This method can be called to remove the `ng-untouched` class and set the control to its                           // 25072
   * touched state (`ng-touched` class). A model is considered to be touched when the user has                         // 25073
   * first focused the control element and then shifted focus away from the control (blur event).                      // 25074
   */                                                                                                                  // 25075
  this.$setTouched = function() {                                                                                      // 25076
    ctrl.$touched = true;                                                                                              // 25077
    ctrl.$untouched = false;                                                                                           // 25078
    $animate.setClass($element, TOUCHED_CLASS, UNTOUCHED_CLASS);                                                       // 25079
  };                                                                                                                   // 25080
                                                                                                                       // 25081
  /**                                                                                                                  // 25082
   * @ngdoc method                                                                                                     // 25083
   * @name ngModel.NgModelController#$rollbackViewValue                                                                // 25084
   *                                                                                                                   // 25085
   * @description                                                                                                      // 25086
   * Cancel an update and reset the input element's value to prevent an update to the `$modelValue`,                   // 25087
   * which may be caused by a pending debounced event or because the input is waiting for a some                       // 25088
   * future event.                                                                                                     // 25089
   *                                                                                                                   // 25090
   * If you have an input that uses `ng-model-options` to set up debounced events or events such                       // 25091
   * as blur you can have a situation where there is a period when the `$viewValue`                                    // 25092
   * is out of synch with the ngModel's `$modelValue`.                                                                 // 25093
   *                                                                                                                   // 25094
   * In this case, you can run into difficulties if you try to update the ngModel's `$modelValue`                      // 25095
   * programmatically before these debounced/future events have resolved/occurred, because Angular's                   // 25096
   * dirty checking mechanism is not able to tell whether the model has actually changed or not.                       // 25097
   *                                                                                                                   // 25098
   * The `$rollbackViewValue()` method should be called before programmatically changing the model of an               // 25099
   * input which may have such events pending. This is important in order to make sure that the                        // 25100
   * input field will be updated with the new model value and any pending operations are cancelled.                    // 25101
   *                                                                                                                   // 25102
   * <example name="ng-model-cancel-update" module="cancel-update-example">                                            // 25103
   *   <file name="app.js">                                                                                            // 25104
   *     angular.module('cancel-update-example', [])                                                                   // 25105
   *                                                                                                                   // 25106
   *     .controller('CancelUpdateController', ['$scope', function($scope) {                                           // 25107
   *       $scope.resetWithCancel = function(e) {                                                                      // 25108
   *         if (e.keyCode == 27) {                                                                                    // 25109
   *           $scope.myForm.myInput1.$rollbackViewValue();                                                            // 25110
   *           $scope.myValue = '';                                                                                    // 25111
   *         }                                                                                                         // 25112
   *       };                                                                                                          // 25113
   *       $scope.resetWithoutCancel = function(e) {                                                                   // 25114
   *         if (e.keyCode == 27) {                                                                                    // 25115
   *           $scope.myValue = '';                                                                                    // 25116
   *         }                                                                                                         // 25117
   *       };                                                                                                          // 25118
   *     }]);                                                                                                          // 25119
   *   </file>                                                                                                         // 25120
   *   <file name="index.html">                                                                                        // 25121
   *     <div ng-controller="CancelUpdateController">                                                                  // 25122
   *       <p>Try typing something in each input.  See that the model only updates when you                            // 25123
   *          blur off the input.                                                                                      // 25124
   *        </p>                                                                                                       // 25125
   *        <p>Now see what happens if you start typing then press the Escape key</p>                                  // 25126
   *                                                                                                                   // 25127
   *       <form name="myForm" ng-model-options="{ updateOn: 'blur' }">                                                // 25128
   *         <p id="inputDescription1">With $rollbackViewValue()</p>                                                   // 25129
   *         <input name="myInput1" aria-describedby="inputDescription1" ng-model="myValue"                            // 25130
   *                ng-keydown="resetWithCancel($event)"><br/>                                                         // 25131
   *         myValue: "{{ myValue }}"                                                                                  // 25132
   *                                                                                                                   // 25133
   *         <p id="inputDescription2">Without $rollbackViewValue()</p>                                                // 25134
   *         <input name="myInput2" aria-describedby="inputDescription2" ng-model="myValue"                            // 25135
   *                ng-keydown="resetWithoutCancel($event)"><br/>                                                      // 25136
   *         myValue: "{{ myValue }}"                                                                                  // 25137
   *       </form>                                                                                                     // 25138
   *     </div>                                                                                                        // 25139
   *   </file>                                                                                                         // 25140
   * </example>                                                                                                        // 25141
   */                                                                                                                  // 25142
  this.$rollbackViewValue = function() {                                                                               // 25143
    $timeout.cancel(pendingDebounce);                                                                                  // 25144
    ctrl.$viewValue = ctrl.$$lastCommittedViewValue;                                                                   // 25145
    ctrl.$render();                                                                                                    // 25146
  };                                                                                                                   // 25147
                                                                                                                       // 25148
  /**                                                                                                                  // 25149
   * @ngdoc method                                                                                                     // 25150
   * @name ngModel.NgModelController#$validate                                                                         // 25151
   *                                                                                                                   // 25152
   * @description                                                                                                      // 25153
   * Runs each of the registered validators (first synchronous validators and then                                     // 25154
   * asynchronous validators).                                                                                         // 25155
   * If the validity changes to invalid, the model will be set to `undefined`,                                         // 25156
   * unless {@link ngModelOptions `ngModelOptions.allowInvalid`} is `true`.                                            // 25157
   * If the validity changes to valid, it will set the model to the last available valid                               // 25158
   * `$modelValue`, i.e. either the last parsed value or the last value set from the scope.                            // 25159
   */                                                                                                                  // 25160
  this.$validate = function() {                                                                                        // 25161
    // ignore $validate before model is initialized                                                                    // 25162
    if (isNumber(ctrl.$modelValue) && isNaN(ctrl.$modelValue)) {                                                       // 25163
      return;                                                                                                          // 25164
    }                                                                                                                  // 25165
                                                                                                                       // 25166
    var viewValue = ctrl.$$lastCommittedViewValue;                                                                     // 25167
    // Note: we use the $$rawModelValue as $modelValue might have been                                                 // 25168
    // set to undefined during a view -> model update that found validation                                            // 25169
    // errors. We can't parse the view here, since that could change                                                   // 25170
    // the model although neither viewValue nor the model on the scope changed                                         // 25171
    var modelValue = ctrl.$$rawModelValue;                                                                             // 25172
                                                                                                                       // 25173
    var prevValid = ctrl.$valid;                                                                                       // 25174
    var prevModelValue = ctrl.$modelValue;                                                                             // 25175
                                                                                                                       // 25176
    var allowInvalid = ctrl.$options && ctrl.$options.allowInvalid;                                                    // 25177
                                                                                                                       // 25178
    ctrl.$$runValidators(modelValue, viewValue, function(allValid) {                                                   // 25179
      // If there was no change in validity, don't update the model                                                    // 25180
      // This prevents changing an invalid modelValue to undefined                                                     // 25181
      if (!allowInvalid && prevValid !== allValid) {                                                                   // 25182
        // Note: Don't check ctrl.$valid here, as we could have                                                        // 25183
        // external validators (e.g. calculated on the server),                                                        // 25184
        // that just call $setValidity and need the model value                                                        // 25185
        // to calculate their validity.                                                                                // 25186
        ctrl.$modelValue = allValid ? modelValue : undefined;                                                          // 25187
                                                                                                                       // 25188
        if (ctrl.$modelValue !== prevModelValue) {                                                                     // 25189
          ctrl.$$writeModelToScope();                                                                                  // 25190
        }                                                                                                              // 25191
      }                                                                                                                // 25192
    });                                                                                                                // 25193
                                                                                                                       // 25194
  };                                                                                                                   // 25195
                                                                                                                       // 25196
  this.$$runValidators = function(modelValue, viewValue, doneCallback) {                                               // 25197
    currentValidationRunId++;                                                                                          // 25198
    var localValidationRunId = currentValidationRunId;                                                                 // 25199
                                                                                                                       // 25200
    // check parser error                                                                                              // 25201
    if (!processParseErrors()) {                                                                                       // 25202
      validationDone(false);                                                                                           // 25203
      return;                                                                                                          // 25204
    }                                                                                                                  // 25205
    if (!processSyncValidators()) {                                                                                    // 25206
      validationDone(false);                                                                                           // 25207
      return;                                                                                                          // 25208
    }                                                                                                                  // 25209
    processAsyncValidators();                                                                                          // 25210
                                                                                                                       // 25211
    function processParseErrors() {                                                                                    // 25212
      var errorKey = ctrl.$$parserName || 'parse';                                                                     // 25213
      if (isUndefined(parserValid)) {                                                                                  // 25214
        setValidity(errorKey, null);                                                                                   // 25215
      } else {                                                                                                         // 25216
        if (!parserValid) {                                                                                            // 25217
          forEach(ctrl.$validators, function(v, name) {                                                                // 25218
            setValidity(name, null);                                                                                   // 25219
          });                                                                                                          // 25220
          forEach(ctrl.$asyncValidators, function(v, name) {                                                           // 25221
            setValidity(name, null);                                                                                   // 25222
          });                                                                                                          // 25223
        }                                                                                                              // 25224
        // Set the parse error last, to prevent unsetting it, should a $validators key == parserName                   // 25225
        setValidity(errorKey, parserValid);                                                                            // 25226
        return parserValid;                                                                                            // 25227
      }                                                                                                                // 25228
      return true;                                                                                                     // 25229
    }                                                                                                                  // 25230
                                                                                                                       // 25231
    function processSyncValidators() {                                                                                 // 25232
      var syncValidatorsValid = true;                                                                                  // 25233
      forEach(ctrl.$validators, function(validator, name) {                                                            // 25234
        var result = validator(modelValue, viewValue);                                                                 // 25235
        syncValidatorsValid = syncValidatorsValid && result;                                                           // 25236
        setValidity(name, result);                                                                                     // 25237
      });                                                                                                              // 25238
      if (!syncValidatorsValid) {                                                                                      // 25239
        forEach(ctrl.$asyncValidators, function(v, name) {                                                             // 25240
          setValidity(name, null);                                                                                     // 25241
        });                                                                                                            // 25242
        return false;                                                                                                  // 25243
      }                                                                                                                // 25244
      return true;                                                                                                     // 25245
    }                                                                                                                  // 25246
                                                                                                                       // 25247
    function processAsyncValidators() {                                                                                // 25248
      var validatorPromises = [];                                                                                      // 25249
      var allValid = true;                                                                                             // 25250
      forEach(ctrl.$asyncValidators, function(validator, name) {                                                       // 25251
        var promise = validator(modelValue, viewValue);                                                                // 25252
        if (!isPromiseLike(promise)) {                                                                                 // 25253
          throw ngModelMinErr("$asyncValidators",                                                                      // 25254
            "Expected asynchronous validator to return a promise but got '{0}' instead.", promise);                    // 25255
        }                                                                                                              // 25256
        setValidity(name, undefined);                                                                                  // 25257
        validatorPromises.push(promise.then(function() {                                                               // 25258
          setValidity(name, true);                                                                                     // 25259
        }, function(error) {                                                                                           // 25260
          allValid = false;                                                                                            // 25261
          setValidity(name, false);                                                                                    // 25262
        }));                                                                                                           // 25263
      });                                                                                                              // 25264
      if (!validatorPromises.length) {                                                                                 // 25265
        validationDone(true);                                                                                          // 25266
      } else {                                                                                                         // 25267
        $q.all(validatorPromises).then(function() {                                                                    // 25268
          validationDone(allValid);                                                                                    // 25269
        }, noop);                                                                                                      // 25270
      }                                                                                                                // 25271
    }                                                                                                                  // 25272
                                                                                                                       // 25273
    function setValidity(name, isValid) {                                                                              // 25274
      if (localValidationRunId === currentValidationRunId) {                                                           // 25275
        ctrl.$setValidity(name, isValid);                                                                              // 25276
      }                                                                                                                // 25277
    }                                                                                                                  // 25278
                                                                                                                       // 25279
    function validationDone(allValid) {                                                                                // 25280
      if (localValidationRunId === currentValidationRunId) {                                                           // 25281
                                                                                                                       // 25282
        doneCallback(allValid);                                                                                        // 25283
      }                                                                                                                // 25284
    }                                                                                                                  // 25285
  };                                                                                                                   // 25286
                                                                                                                       // 25287
  /**                                                                                                                  // 25288
   * @ngdoc method                                                                                                     // 25289
   * @name ngModel.NgModelController#$commitViewValue                                                                  // 25290
   *                                                                                                                   // 25291
   * @description                                                                                                      // 25292
   * Commit a pending update to the `$modelValue`.                                                                     // 25293
   *                                                                                                                   // 25294
   * Updates may be pending by a debounced event or because the input is waiting for a some future                     // 25295
   * event defined in `ng-model-options`. this method is rarely needed as `NgModelController`                          // 25296
   * usually handles calling this in response to input events.                                                         // 25297
   */                                                                                                                  // 25298
  this.$commitViewValue = function() {                                                                                 // 25299
    var viewValue = ctrl.$viewValue;                                                                                   // 25300
                                                                                                                       // 25301
    $timeout.cancel(pendingDebounce);                                                                                  // 25302
                                                                                                                       // 25303
    // If the view value has not changed then we should just exit, except in the case where there is                   // 25304
    // a native validator on the element. In this case the validation state may have changed even though               // 25305
    // the viewValue has stayed empty.                                                                                 // 25306
    if (ctrl.$$lastCommittedViewValue === viewValue && (viewValue !== '' || !ctrl.$$hasNativeValidators)) {            // 25307
      return;                                                                                                          // 25308
    }                                                                                                                  // 25309
    ctrl.$$lastCommittedViewValue = viewValue;                                                                         // 25310
                                                                                                                       // 25311
    // change to dirty                                                                                                 // 25312
    if (ctrl.$pristine) {                                                                                              // 25313
      this.$setDirty();                                                                                                // 25314
    }                                                                                                                  // 25315
    this.$$parseAndValidate();                                                                                         // 25316
  };                                                                                                                   // 25317
                                                                                                                       // 25318
  this.$$parseAndValidate = function() {                                                                               // 25319
    var viewValue = ctrl.$$lastCommittedViewValue;                                                                     // 25320
    var modelValue = viewValue;                                                                                        // 25321
    parserValid = isUndefined(modelValue) ? undefined : true;                                                          // 25322
                                                                                                                       // 25323
    if (parserValid) {                                                                                                 // 25324
      for (var i = 0; i < ctrl.$parsers.length; i++) {                                                                 // 25325
        modelValue = ctrl.$parsers[i](modelValue);                                                                     // 25326
        if (isUndefined(modelValue)) {                                                                                 // 25327
          parserValid = false;                                                                                         // 25328
          break;                                                                                                       // 25329
        }                                                                                                              // 25330
      }                                                                                                                // 25331
    }                                                                                                                  // 25332
    if (isNumber(ctrl.$modelValue) && isNaN(ctrl.$modelValue)) {                                                       // 25333
      // ctrl.$modelValue has not been touched yet...                                                                  // 25334
      ctrl.$modelValue = ngModelGet($scope);                                                                           // 25335
    }                                                                                                                  // 25336
    var prevModelValue = ctrl.$modelValue;                                                                             // 25337
    var allowInvalid = ctrl.$options && ctrl.$options.allowInvalid;                                                    // 25338
    ctrl.$$rawModelValue = modelValue;                                                                                 // 25339
                                                                                                                       // 25340
    if (allowInvalid) {                                                                                                // 25341
      ctrl.$modelValue = modelValue;                                                                                   // 25342
      writeToModelIfNeeded();                                                                                          // 25343
    }                                                                                                                  // 25344
                                                                                                                       // 25345
    // Pass the $$lastCommittedViewValue here, because the cached viewValue might be out of date.                      // 25346
    // This can happen if e.g. $setViewValue is called from inside a parser                                            // 25347
    ctrl.$$runValidators(modelValue, ctrl.$$lastCommittedViewValue, function(allValid) {                               // 25348
      if (!allowInvalid) {                                                                                             // 25349
        // Note: Don't check ctrl.$valid here, as we could have                                                        // 25350
        // external validators (e.g. calculated on the server),                                                        // 25351
        // that just call $setValidity and need the model value                                                        // 25352
        // to calculate their validity.                                                                                // 25353
        ctrl.$modelValue = allValid ? modelValue : undefined;                                                          // 25354
        writeToModelIfNeeded();                                                                                        // 25355
      }                                                                                                                // 25356
    });                                                                                                                // 25357
                                                                                                                       // 25358
    function writeToModelIfNeeded() {                                                                                  // 25359
      if (ctrl.$modelValue !== prevModelValue) {                                                                       // 25360
        ctrl.$$writeModelToScope();                                                                                    // 25361
      }                                                                                                                // 25362
    }                                                                                                                  // 25363
  };                                                                                                                   // 25364
                                                                                                                       // 25365
  this.$$writeModelToScope = function() {                                                                              // 25366
    ngModelSet($scope, ctrl.$modelValue);                                                                              // 25367
    forEach(ctrl.$viewChangeListeners, function(listener) {                                                            // 25368
      try {                                                                                                            // 25369
        listener();                                                                                                    // 25370
      } catch (e) {                                                                                                    // 25371
        $exceptionHandler(e);                                                                                          // 25372
      }                                                                                                                // 25373
    });                                                                                                                // 25374
  };                                                                                                                   // 25375
                                                                                                                       // 25376
  /**                                                                                                                  // 25377
   * @ngdoc method                                                                                                     // 25378
   * @name ngModel.NgModelController#$setViewValue                                                                     // 25379
   *                                                                                                                   // 25380
   * @description                                                                                                      // 25381
   * Update the view value.                                                                                            // 25382
   *                                                                                                                   // 25383
   * This method should be called when a control wants to change the view value; typically,                            // 25384
   * this is done from within a DOM event handler. For example, the {@link ng.directive:input input}                   // 25385
   * directive calls it when the value of the input changes and {@link ng.directive:select select}                     // 25386
   * calls it when an option is selected.                                                                              // 25387
   *                                                                                                                   // 25388
   * When `$setViewValue` is called, the new `value` will be staged for committing through the `$parsers`              // 25389
   * and `$validators` pipelines. If there are no special {@link ngModelOptions} specified then the staged             // 25390
   * value sent directly for processing, finally to be applied to `$modelValue` and then the                           // 25391
   * **expression** specified in the `ng-model` attribute. Lastly, all the registered change listeners,                // 25392
   * in the `$viewChangeListeners` list, are called.                                                                   // 25393
   *                                                                                                                   // 25394
   * In case the {@link ng.directive:ngModelOptions ngModelOptions} directive is used with `updateOn`                  // 25395
   * and the `default` trigger is not listed, all those actions will remain pending until one of the                   // 25396
   * `updateOn` events is triggered on the DOM element.                                                                // 25397
   * All these actions will be debounced if the {@link ng.directive:ngModelOptions ngModelOptions}                     // 25398
   * directive is used with a custom debounce for this particular event.                                               // 25399
   * Note that a `$digest` is only triggered once the `updateOn` events are fired, or if `debounce`                    // 25400
   * is specified, once the timer runs out.                                                                            // 25401
   *                                                                                                                   // 25402
   * When used with standard inputs, the view value will always be a string (which is in some cases                    // 25403
   * parsed into another type, such as a `Date` object for `input[date]`.)                                             // 25404
   * However, custom controls might also pass objects to this method. In this case, we should make                     // 25405
   * a copy of the object before passing it to `$setViewValue`. This is because `ngModel` does not                     // 25406
   * perform a deep watch of objects, it only looks for a change of identity. If you only change                       // 25407
   * the property of the object then ngModel will not realise that the object has changed and                          // 25408
   * will not invoke the `$parsers` and `$validators` pipelines. For this reason, you should                           // 25409
   * not change properties of the copy once it has been passed to `$setViewValue`.                                     // 25410
   * Otherwise you may cause the model value on the scope to change incorrectly.                                       // 25411
   *                                                                                                                   // 25412
   * <div class="alert alert-info">                                                                                    // 25413
   * In any case, the value passed to the method should always reflect the current value                               // 25414
   * of the control. For example, if you are calling `$setViewValue` for an input element,                             // 25415
   * you should pass the input DOM value. Otherwise, the control and the scope model become                            // 25416
   * out of sync. It's also important to note that `$setViewValue` does not call `$render` or change                   // 25417
   * the control's DOM value in any way. If we want to change the control's DOM value                                  // 25418
   * programmatically, we should update the `ngModel` scope expression. Its new value will be                          // 25419
   * picked up by the model controller, which will run it through the `$formatters`, `$render` it                      // 25420
   * to update the DOM, and finally call `$validate` on it.                                                            // 25421
   * </div>                                                                                                            // 25422
   *                                                                                                                   // 25423
   * @param {*} value value from the view.                                                                             // 25424
   * @param {string} trigger Event that triggered the update.                                                          // 25425
   */                                                                                                                  // 25426
  this.$setViewValue = function(value, trigger) {                                                                      // 25427
    ctrl.$viewValue = value;                                                                                           // 25428
    if (!ctrl.$options || ctrl.$options.updateOnDefault) {                                                             // 25429
      ctrl.$$debounceViewValueCommit(trigger);                                                                         // 25430
    }                                                                                                                  // 25431
  };                                                                                                                   // 25432
                                                                                                                       // 25433
  this.$$debounceViewValueCommit = function(trigger) {                                                                 // 25434
    var debounceDelay = 0,                                                                                             // 25435
        options = ctrl.$options,                                                                                       // 25436
        debounce;                                                                                                      // 25437
                                                                                                                       // 25438
    if (options && isDefined(options.debounce)) {                                                                      // 25439
      debounce = options.debounce;                                                                                     // 25440
      if (isNumber(debounce)) {                                                                                        // 25441
        debounceDelay = debounce;                                                                                      // 25442
      } else if (isNumber(debounce[trigger])) {                                                                        // 25443
        debounceDelay = debounce[trigger];                                                                             // 25444
      } else if (isNumber(debounce['default'])) {                                                                      // 25445
        debounceDelay = debounce['default'];                                                                           // 25446
      }                                                                                                                // 25447
    }                                                                                                                  // 25448
                                                                                                                       // 25449
    $timeout.cancel(pendingDebounce);                                                                                  // 25450
    if (debounceDelay) {                                                                                               // 25451
      pendingDebounce = $timeout(function() {                                                                          // 25452
        ctrl.$commitViewValue();                                                                                       // 25453
      }, debounceDelay);                                                                                               // 25454
    } else if ($rootScope.$$phase) {                                                                                   // 25455
      ctrl.$commitViewValue();                                                                                         // 25456
    } else {                                                                                                           // 25457
      $scope.$apply(function() {                                                                                       // 25458
        ctrl.$commitViewValue();                                                                                       // 25459
      });                                                                                                              // 25460
    }                                                                                                                  // 25461
  };                                                                                                                   // 25462
                                                                                                                       // 25463
  // model -> value                                                                                                    // 25464
  // Note: we cannot use a normal scope.$watch as we want to detect the following:                                     // 25465
  // 1. scope value is 'a'                                                                                             // 25466
  // 2. user enters 'b'                                                                                                // 25467
  // 3. ng-change kicks in and reverts scope value to 'a'                                                              // 25468
  //    -> scope value did not change since the last digest as                                                         // 25469
  //       ng-change executes in apply phase                                                                           // 25470
  // 4. view should be changed back to 'a'                                                                             // 25471
  $scope.$watch(function ngModelWatch() {                                                                              // 25472
    var modelValue = ngModelGet($scope);                                                                               // 25473
                                                                                                                       // 25474
    // if scope model value and ngModel value are out of sync                                                          // 25475
    // TODO(perf): why not move this to the action fn?                                                                 // 25476
    if (modelValue !== ctrl.$modelValue &&                                                                             // 25477
       // checks for NaN is needed to allow setting the model to NaN when there's an asyncValidator                    // 25478
       (ctrl.$modelValue === ctrl.$modelValue || modelValue === modelValue)                                            // 25479
    ) {                                                                                                                // 25480
      ctrl.$modelValue = ctrl.$$rawModelValue = modelValue;                                                            // 25481
      parserValid = undefined;                                                                                         // 25482
                                                                                                                       // 25483
      var formatters = ctrl.$formatters,                                                                               // 25484
          idx = formatters.length;                                                                                     // 25485
                                                                                                                       // 25486
      var viewValue = modelValue;                                                                                      // 25487
      while (idx--) {                                                                                                  // 25488
        viewValue = formatters[idx](viewValue);                                                                        // 25489
      }                                                                                                                // 25490
      if (ctrl.$viewValue !== viewValue) {                                                                             // 25491
        ctrl.$viewValue = ctrl.$$lastCommittedViewValue = viewValue;                                                   // 25492
        ctrl.$render();                                                                                                // 25493
                                                                                                                       // 25494
        ctrl.$$runValidators(modelValue, viewValue, noop);                                                             // 25495
      }                                                                                                                // 25496
    }                                                                                                                  // 25497
                                                                                                                       // 25498
    return modelValue;                                                                                                 // 25499
  });                                                                                                                  // 25500
}];                                                                                                                    // 25501
                                                                                                                       // 25502
                                                                                                                       // 25503
/**                                                                                                                    // 25504
 * @ngdoc directive                                                                                                    // 25505
 * @name ngModel                                                                                                       // 25506
 *                                                                                                                     // 25507
 * @element input                                                                                                      // 25508
 * @priority 1                                                                                                         // 25509
 *                                                                                                                     // 25510
 * @description                                                                                                        // 25511
 * The `ngModel` directive binds an `input`,`select`, `textarea` (or custom form control) to a                         // 25512
 * property on the scope using {@link ngModel.NgModelController NgModelController},                                    // 25513
 * which is created and exposed by this directive.                                                                     // 25514
 *                                                                                                                     // 25515
 * `ngModel` is responsible for:                                                                                       // 25516
 *                                                                                                                     // 25517
 * - Binding the view into the model, which other directives such as `input`, `textarea` or `select`                   // 25518
 *   require.                                                                                                          // 25519
 * - Providing validation behavior (i.e. required, number, email, url).                                                // 25520
 * - Keeping the state of the control (valid/invalid, dirty/pristine, touched/untouched, validation errors).           // 25521
 * - Setting related css classes on the element (`ng-valid`, `ng-invalid`, `ng-dirty`, `ng-pristine`, `ng-touched`, `ng-untouched`) including animations.
 * - Registering the control with its parent {@link ng.directive:form form}.                                           // 25523
 *                                                                                                                     // 25524
 * Note: `ngModel` will try to bind to the property given by evaluating the expression on the                          // 25525
 * current scope. If the property doesn't already exist on this scope, it will be created                              // 25526
 * implicitly and added to the scope.                                                                                  // 25527
 *                                                                                                                     // 25528
 * For best practices on using `ngModel`, see:                                                                         // 25529
 *                                                                                                                     // 25530
 *  - [Understanding Scopes](https://github.com/angular/angular.js/wiki/Understanding-Scopes)                          // 25531
 *                                                                                                                     // 25532
 * For basic examples, how to use `ngModel`, see:                                                                      // 25533
 *                                                                                                                     // 25534
 *  - {@link ng.directive:input input}                                                                                 // 25535
 *    - {@link input[text] text}                                                                                       // 25536
 *    - {@link input[checkbox] checkbox}                                                                               // 25537
 *    - {@link input[radio] radio}                                                                                     // 25538
 *    - {@link input[number] number}                                                                                   // 25539
 *    - {@link input[email] email}                                                                                     // 25540
 *    - {@link input[url] url}                                                                                         // 25541
 *    - {@link input[date] date}                                                                                       // 25542
 *    - {@link input[datetime-local] datetime-local}                                                                   // 25543
 *    - {@link input[time] time}                                                                                       // 25544
 *    - {@link input[month] month}                                                                                     // 25545
 *    - {@link input[week] week}                                                                                       // 25546
 *  - {@link ng.directive:select select}                                                                               // 25547
 *  - {@link ng.directive:textarea textarea}                                                                           // 25548
 *                                                                                                                     // 25549
 * # CSS classes                                                                                                       // 25550
 * The following CSS classes are added and removed on the associated input/select/textarea element                     // 25551
 * depending on the validity of the model.                                                                             // 25552
 *                                                                                                                     // 25553
 *  - `ng-valid`: the model is valid                                                                                   // 25554
 *  - `ng-invalid`: the model is invalid                                                                               // 25555
 *  - `ng-valid-[key]`: for each valid key added by `$setValidity`                                                     // 25556
 *  - `ng-invalid-[key]`: for each invalid key added by `$setValidity`                                                 // 25557
 *  - `ng-pristine`: the control hasn't been interacted with yet                                                       // 25558
 *  - `ng-dirty`: the control has been interacted with                                                                 // 25559
 *  - `ng-touched`: the control has been blurred                                                                       // 25560
 *  - `ng-untouched`: the control hasn't been blurred                                                                  // 25561
 *  - `ng-pending`: any `$asyncValidators` are unfulfilled                                                             // 25562
 *                                                                                                                     // 25563
 * Keep in mind that ngAnimate can detect each of these classes when added and removed.                                // 25564
 *                                                                                                                     // 25565
 * ## Animation Hooks                                                                                                  // 25566
 *                                                                                                                     // 25567
 * Animations within models are triggered when any of the associated CSS classes are added and removed                 // 25568
 * on the input element which is attached to the model. These classes are: `.ng-pristine`, `.ng-dirty`,                // 25569
 * `.ng-invalid` and `.ng-valid` as well as any other validations that are performed on the model itself.              // 25570
 * The animations that are triggered within ngModel are similar to how they work in ngClass and                        // 25571
 * animations can be hooked into using CSS transitions, keyframes as well as JS animations.                            // 25572
 *                                                                                                                     // 25573
 * The following example shows a simple way to utilize CSS transitions to style an input element                       // 25574
 * that has been rendered as invalid after it has been validated:                                                      // 25575
 *                                                                                                                     // 25576
 * <pre>                                                                                                               // 25577
 * //be sure to include ngAnimate as a module to hook into more                                                        // 25578
 * //advanced animations                                                                                               // 25579
 * .my-input {                                                                                                         // 25580
 *   transition:0.5s linear all;                                                                                       // 25581
 *   background: white;                                                                                                // 25582
 * }                                                                                                                   // 25583
 * .my-input.ng-invalid {                                                                                              // 25584
 *   background: red;                                                                                                  // 25585
 *   color:white;                                                                                                      // 25586
 * }                                                                                                                   // 25587
 * </pre>                                                                                                              // 25588
 *                                                                                                                     // 25589
 * @example                                                                                                            // 25590
 * <example deps="angular-animate.js" animations="true" fixBase="true" module="inputExample">                          // 25591
     <file name="index.html">                                                                                          // 25592
       <script>                                                                                                        // 25593
        angular.module('inputExample', [])                                                                             // 25594
          .controller('ExampleController', ['$scope', function($scope) {                                               // 25595
            $scope.val = '1';                                                                                          // 25596
          }]);                                                                                                         // 25597
       </script>                                                                                                       // 25598
       <style>                                                                                                         // 25599
         .my-input {                                                                                                   // 25600
           transition:all linear 0.5s;                                                                                 // 25601
           background: transparent;                                                                                    // 25602
         }                                                                                                             // 25603
         .my-input.ng-invalid {                                                                                        // 25604
           color:white;                                                                                                // 25605
           background: red;                                                                                            // 25606
         }                                                                                                             // 25607
       </style>                                                                                                        // 25608
       <p id="inputDescription">                                                                                       // 25609
        Update input to see transitions when valid/invalid.                                                            // 25610
        Integer is a valid value.                                                                                      // 25611
       </p>                                                                                                            // 25612
       <form name="testForm" ng-controller="ExampleController">                                                        // 25613
         <input ng-model="val" ng-pattern="/^\d+$/" name="anim" class="my-input"                                       // 25614
                aria-describedby="inputDescription" />                                                                 // 25615
       </form>                                                                                                         // 25616
     </file>                                                                                                           // 25617
 * </example>                                                                                                          // 25618
 *                                                                                                                     // 25619
 * ## Binding to a getter/setter                                                                                       // 25620
 *                                                                                                                     // 25621
 * Sometimes it's helpful to bind `ngModel` to a getter/setter function.  A getter/setter is a                         // 25622
 * function that returns a representation of the model when called with zero arguments, and sets                       // 25623
 * the internal state of a model when called with an argument. It's sometimes useful to use this                       // 25624
 * for models that have an internal representation that's different from what the model exposes                        // 25625
 * to the view.                                                                                                        // 25626
 *                                                                                                                     // 25627
 * <div class="alert alert-success">                                                                                   // 25628
 * **Best Practice:** It's best to keep getters fast because Angular is likely to call them more                       // 25629
 * frequently than other parts of your code.                                                                           // 25630
 * </div>                                                                                                              // 25631
 *                                                                                                                     // 25632
 * You use this behavior by adding `ng-model-options="{ getterSetter: true }"` to an element that                      // 25633
 * has `ng-model` attached to it. You can also add `ng-model-options="{ getterSetter: true }"` to                      // 25634
 * a `<form>`, which will enable this behavior for all `<input>`s within it. See                                       // 25635
 * {@link ng.directive:ngModelOptions `ngModelOptions`} for more.                                                      // 25636
 *                                                                                                                     // 25637
 * The following example shows how to use `ngModel` with a getter/setter:                                              // 25638
 *                                                                                                                     // 25639
 * @example                                                                                                            // 25640
 * <example name="ngModel-getter-setter" module="getterSetterExample">                                                 // 25641
     <file name="index.html">                                                                                          // 25642
       <div ng-controller="ExampleController">                                                                         // 25643
         <form name="userForm">                                                                                        // 25644
           <label>Name:                                                                                                // 25645
             <input type="text" name="userName"                                                                        // 25646
                    ng-model="user.name"                                                                               // 25647
                    ng-model-options="{ getterSetter: true }" />                                                       // 25648
           </label>                                                                                                    // 25649
         </form>                                                                                                       // 25650
         <pre>user.name = <span ng-bind="user.name()"></span></pre>                                                    // 25651
       </div>                                                                                                          // 25652
     </file>                                                                                                           // 25653
     <file name="app.js">                                                                                              // 25654
       angular.module('getterSetterExample', [])                                                                       // 25655
         .controller('ExampleController', ['$scope', function($scope) {                                                // 25656
           var _name = 'Brian';                                                                                        // 25657
           $scope.user = {                                                                                             // 25658
             name: function(newName) {                                                                                 // 25659
              // Note that newName can be undefined for two reasons:                                                   // 25660
              // 1. Because it is called as a getter and thus called with no arguments                                 // 25661
              // 2. Because the property should actually be set to undefined. This happens e.g. if the                 // 25662
              //    input is invalid                                                                                   // 25663
              return arguments.length ? (_name = newName) : _name;                                                     // 25664
             }                                                                                                         // 25665
           };                                                                                                          // 25666
         }]);                                                                                                          // 25667
     </file>                                                                                                           // 25668
 * </example>                                                                                                          // 25669
 */                                                                                                                    // 25670
var ngModelDirective = ['$rootScope', function($rootScope) {                                                           // 25671
  return {                                                                                                             // 25672
    restrict: 'A',                                                                                                     // 25673
    require: ['ngModel', '^?form', '^?ngModelOptions'],                                                                // 25674
    controller: NgModelController,                                                                                     // 25675
    // Prelink needs to run before any input directive                                                                 // 25676
    // so that we can set the NgModelOptions in NgModelController                                                      // 25677
    // before anyone else uses it.                                                                                     // 25678
    priority: 1,                                                                                                       // 25679
    compile: function ngModelCompile(element) {                                                                        // 25680
      // Setup initial state of the control                                                                            // 25681
      element.addClass(PRISTINE_CLASS).addClass(UNTOUCHED_CLASS).addClass(VALID_CLASS);                                // 25682
                                                                                                                       // 25683
      return {                                                                                                         // 25684
        pre: function ngModelPreLink(scope, element, attr, ctrls) {                                                    // 25685
          var modelCtrl = ctrls[0],                                                                                    // 25686
              formCtrl = ctrls[1] || modelCtrl.$$parentForm;                                                           // 25687
                                                                                                                       // 25688
          modelCtrl.$$setOptions(ctrls[2] && ctrls[2].$options);                                                       // 25689
                                                                                                                       // 25690
          // notify others, especially parent forms                                                                    // 25691
          formCtrl.$addControl(modelCtrl);                                                                             // 25692
                                                                                                                       // 25693
          attr.$observe('name', function(newValue) {                                                                   // 25694
            if (modelCtrl.$name !== newValue) {                                                                        // 25695
              modelCtrl.$$parentForm.$$renameControl(modelCtrl, newValue);                                             // 25696
            }                                                                                                          // 25697
          });                                                                                                          // 25698
                                                                                                                       // 25699
          scope.$on('$destroy', function() {                                                                           // 25700
            modelCtrl.$$parentForm.$removeControl(modelCtrl);                                                          // 25701
          });                                                                                                          // 25702
        },                                                                                                             // 25703
        post: function ngModelPostLink(scope, element, attr, ctrls) {                                                  // 25704
          var modelCtrl = ctrls[0];                                                                                    // 25705
          if (modelCtrl.$options && modelCtrl.$options.updateOn) {                                                     // 25706
            element.on(modelCtrl.$options.updateOn, function(ev) {                                                     // 25707
              modelCtrl.$$debounceViewValueCommit(ev && ev.type);                                                      // 25708
            });                                                                                                        // 25709
          }                                                                                                            // 25710
                                                                                                                       // 25711
          element.on('blur', function(ev) {                                                                            // 25712
            if (modelCtrl.$touched) return;                                                                            // 25713
                                                                                                                       // 25714
            if ($rootScope.$$phase) {                                                                                  // 25715
              scope.$evalAsync(modelCtrl.$setTouched);                                                                 // 25716
            } else {                                                                                                   // 25717
              scope.$apply(modelCtrl.$setTouched);                                                                     // 25718
            }                                                                                                          // 25719
          });                                                                                                          // 25720
        }                                                                                                              // 25721
      };                                                                                                               // 25722
    }                                                                                                                  // 25723
  };                                                                                                                   // 25724
}];                                                                                                                    // 25725
                                                                                                                       // 25726
var DEFAULT_REGEXP = /(\s+|^)default(\s+|$)/;                                                                          // 25727
                                                                                                                       // 25728
/**                                                                                                                    // 25729
 * @ngdoc directive                                                                                                    // 25730
 * @name ngModelOptions                                                                                                // 25731
 *                                                                                                                     // 25732
 * @description                                                                                                        // 25733
 * Allows tuning how model updates are done. Using `ngModelOptions` you can specify a custom list of                   // 25734
 * events that will trigger a model update and/or a debouncing delay so that the actual update only                    // 25735
 * takes place when a timer expires; this timer will be reset after another change takes place.                        // 25736
 *                                                                                                                     // 25737
 * Given the nature of `ngModelOptions`, the value displayed inside input fields in the view might                     // 25738
 * be different from the value in the actual model. This means that if you update the model you                        // 25739
 * should also invoke {@link ngModel.NgModelController `$rollbackViewValue`} on the relevant input field in            // 25740
 * order to make sure it is synchronized with the model and that any debounced action is canceled.                     // 25741
 *                                                                                                                     // 25742
 * The easiest way to reference the control's {@link ngModel.NgModelController `$rollbackViewValue`}                   // 25743
 * method is by making sure the input is placed inside a form that has a `name` attribute. This is                     // 25744
 * important because `form` controllers are published to the related scope under the name in their                     // 25745
 * `name` attribute.                                                                                                   // 25746
 *                                                                                                                     // 25747
 * Any pending changes will take place immediately when an enclosing form is submitted via the                         // 25748
 * `submit` event. Note that `ngClick` events will occur before the model is updated. Use `ngSubmit`                   // 25749
 * to have access to the updated model.                                                                                // 25750
 *                                                                                                                     // 25751
 * `ngModelOptions` has an effect on the element it's declared on and its descendants.                                 // 25752
 *                                                                                                                     // 25753
 * @param {Object} ngModelOptions options to apply to the current model. Valid keys are:                               // 25754
 *   - `updateOn`: string specifying which event should the input be bound to. You can set several                     // 25755
 *     events using an space delimited list. There is a special event called `default` that                            // 25756
 *     matches the default events belonging of the control.                                                            // 25757
 *   - `debounce`: integer value which contains the debounce model update value in milliseconds. A                     // 25758
 *     value of 0 triggers an immediate update. If an object is supplied instead, you can specify a                    // 25759
 *     custom value for each event. For example:                                                                       // 25760
 *     `ng-model-options="{ updateOn: 'default blur', debounce: { 'default': 500, 'blur': 0 } }"`                      // 25761
 *   - `allowInvalid`: boolean value which indicates that the model can be set with values that did                    // 25762
 *     not validate correctly instead of the default behavior of setting the model to undefined.                       // 25763
 *   - `getterSetter`: boolean value which determines whether or not to treat functions bound to                       // 25764
       `ngModel` as getters/setters.                                                                                   // 25765
 *   - `timezone`: Defines the timezone to be used to read/write the `Date` instance in the model for                  // 25766
 *     `<input type="date">`, `<input type="time">`, ... . It understands UTC/GMT and the                              // 25767
 *     continental US time zone abbreviations, but for general use, use a time zone offset, for                        // 25768
 *     example, `'+0430'` (4 hours, 30 minutes east of the Greenwich meridian)                                         // 25769
 *     If not specified, the timezone of the browser will be used.                                                     // 25770
 *                                                                                                                     // 25771
 * @example                                                                                                            // 25772
                                                                                                                       // 25773
  The following example shows how to override immediate updates. Changes on the inputs within the                      // 25774
  form will update the model only when the control loses focus (blur event). If `escape` key is                        // 25775
  pressed while the input field is focused, the value is reset to the value in the current model.                      // 25776
                                                                                                                       // 25777
  <example name="ngModelOptions-directive-blur" module="optionsExample">                                               // 25778
    <file name="index.html">                                                                                           // 25779
      <div ng-controller="ExampleController">                                                                          // 25780
        <form name="userForm">                                                                                         // 25781
          <label>Name:                                                                                                 // 25782
            <input type="text" name="userName"                                                                         // 25783
                   ng-model="user.name"                                                                                // 25784
                   ng-model-options="{ updateOn: 'blur' }"                                                             // 25785
                   ng-keyup="cancel($event)" />                                                                        // 25786
          </label><br />                                                                                               // 25787
          <label>Other data:                                                                                           // 25788
            <input type="text" ng-model="user.data" />                                                                 // 25789
          </label><br />                                                                                               // 25790
        </form>                                                                                                        // 25791
        <pre>user.name = <span ng-bind="user.name"></span></pre>                                                       // 25792
        <pre>user.data = <span ng-bind="user.data"></span></pre>                                                       // 25793
      </div>                                                                                                           // 25794
    </file>                                                                                                            // 25795
    <file name="app.js">                                                                                               // 25796
      angular.module('optionsExample', [])                                                                             // 25797
        .controller('ExampleController', ['$scope', function($scope) {                                                 // 25798
          $scope.user = { name: 'John', data: '' };                                                                    // 25799
                                                                                                                       // 25800
          $scope.cancel = function(e) {                                                                                // 25801
            if (e.keyCode == 27) {                                                                                     // 25802
              $scope.userForm.userName.$rollbackViewValue();                                                           // 25803
            }                                                                                                          // 25804
          };                                                                                                           // 25805
        }]);                                                                                                           // 25806
    </file>                                                                                                            // 25807
    <file name="protractor.js" type="protractor">                                                                      // 25808
      var model = element(by.binding('user.name'));                                                                    // 25809
      var input = element(by.model('user.name'));                                                                      // 25810
      var other = element(by.model('user.data'));                                                                      // 25811
                                                                                                                       // 25812
      it('should allow custom events', function() {                                                                    // 25813
        input.sendKeys(' Doe');                                                                                        // 25814
        input.click();                                                                                                 // 25815
        expect(model.getText()).toEqual('John');                                                                       // 25816
        other.click();                                                                                                 // 25817
        expect(model.getText()).toEqual('John Doe');                                                                   // 25818
      });                                                                                                              // 25819
                                                                                                                       // 25820
      it('should $rollbackViewValue when model changes', function() {                                                  // 25821
        input.sendKeys(' Doe');                                                                                        // 25822
        expect(input.getAttribute('value')).toEqual('John Doe');                                                       // 25823
        input.sendKeys(protractor.Key.ESCAPE);                                                                         // 25824
        expect(input.getAttribute('value')).toEqual('John');                                                           // 25825
        other.click();                                                                                                 // 25826
        expect(model.getText()).toEqual('John');                                                                       // 25827
      });                                                                                                              // 25828
    </file>                                                                                                            // 25829
  </example>                                                                                                           // 25830
                                                                                                                       // 25831
  This one shows how to debounce model changes. Model will be updated only 1 sec after last change.                    // 25832
  If the `Clear` button is pressed, any debounced action is canceled and the value becomes empty.                      // 25833
                                                                                                                       // 25834
  <example name="ngModelOptions-directive-debounce" module="optionsExample">                                           // 25835
    <file name="index.html">                                                                                           // 25836
      <div ng-controller="ExampleController">                                                                          // 25837
        <form name="userForm">                                                                                         // 25838
          <label>Name:                                                                                                 // 25839
            <input type="text" name="userName"                                                                         // 25840
                   ng-model="user.name"                                                                                // 25841
                   ng-model-options="{ debounce: 1000 }" />                                                            // 25842
          </label>                                                                                                     // 25843
          <button ng-click="userForm.userName.$rollbackViewValue(); user.name=''">Clear</button>                       // 25844
          <br />                                                                                                       // 25845
        </form>                                                                                                        // 25846
        <pre>user.name = <span ng-bind="user.name"></span></pre>                                                       // 25847
      </div>                                                                                                           // 25848
    </file>                                                                                                            // 25849
    <file name="app.js">                                                                                               // 25850
      angular.module('optionsExample', [])                                                                             // 25851
        .controller('ExampleController', ['$scope', function($scope) {                                                 // 25852
          $scope.user = { name: 'Igor' };                                                                              // 25853
        }]);                                                                                                           // 25854
    </file>                                                                                                            // 25855
  </example>                                                                                                           // 25856
                                                                                                                       // 25857
  This one shows how to bind to getter/setters:                                                                        // 25858
                                                                                                                       // 25859
  <example name="ngModelOptions-directive-getter-setter" module="getterSetterExample">                                 // 25860
    <file name="index.html">                                                                                           // 25861
      <div ng-controller="ExampleController">                                                                          // 25862
        <form name="userForm">                                                                                         // 25863
          <label>Name:                                                                                                 // 25864
            <input type="text" name="userName"                                                                         // 25865
                   ng-model="user.name"                                                                                // 25866
                   ng-model-options="{ getterSetter: true }" />                                                        // 25867
          </label>                                                                                                     // 25868
        </form>                                                                                                        // 25869
        <pre>user.name = <span ng-bind="user.name()"></span></pre>                                                     // 25870
      </div>                                                                                                           // 25871
    </file>                                                                                                            // 25872
    <file name="app.js">                                                                                               // 25873
      angular.module('getterSetterExample', [])                                                                        // 25874
        .controller('ExampleController', ['$scope', function($scope) {                                                 // 25875
          var _name = 'Brian';                                                                                         // 25876
          $scope.user = {                                                                                              // 25877
            name: function(newName) {                                                                                  // 25878
              // Note that newName can be undefined for two reasons:                                                   // 25879
              // 1. Because it is called as a getter and thus called with no arguments                                 // 25880
              // 2. Because the property should actually be set to undefined. This happens e.g. if the                 // 25881
              //    input is invalid                                                                                   // 25882
              return arguments.length ? (_name = newName) : _name;                                                     // 25883
            }                                                                                                          // 25884
          };                                                                                                           // 25885
        }]);                                                                                                           // 25886
    </file>                                                                                                            // 25887
  </example>                                                                                                           // 25888
 */                                                                                                                    // 25889
var ngModelOptionsDirective = function() {                                                                             // 25890
  return {                                                                                                             // 25891
    restrict: 'A',                                                                                                     // 25892
    controller: ['$scope', '$attrs', function($scope, $attrs) {                                                        // 25893
      var that = this;                                                                                                 // 25894
      this.$options = copy($scope.$eval($attrs.ngModelOptions));                                                       // 25895
      // Allow adding/overriding bound events                                                                          // 25896
      if (isDefined(this.$options.updateOn)) {                                                                         // 25897
        this.$options.updateOnDefault = false;                                                                         // 25898
        // extract "default" pseudo-event from list of events that can trigger a model update                          // 25899
        this.$options.updateOn = trim(this.$options.updateOn.replace(DEFAULT_REGEXP, function() {                      // 25900
          that.$options.updateOnDefault = true;                                                                        // 25901
          return ' ';                                                                                                  // 25902
        }));                                                                                                           // 25903
      } else {                                                                                                         // 25904
        this.$options.updateOnDefault = true;                                                                          // 25905
      }                                                                                                                // 25906
    }]                                                                                                                 // 25907
  };                                                                                                                   // 25908
};                                                                                                                     // 25909
                                                                                                                       // 25910
                                                                                                                       // 25911
                                                                                                                       // 25912
// helper methods                                                                                                      // 25913
function addSetValidityMethod(context) {                                                                               // 25914
  var ctrl = context.ctrl,                                                                                             // 25915
      $element = context.$element,                                                                                     // 25916
      classCache = {},                                                                                                 // 25917
      set = context.set,                                                                                               // 25918
      unset = context.unset,                                                                                           // 25919
      $animate = context.$animate;                                                                                     // 25920
                                                                                                                       // 25921
  classCache[INVALID_CLASS] = !(classCache[VALID_CLASS] = $element.hasClass(VALID_CLASS));                             // 25922
                                                                                                                       // 25923
  ctrl.$setValidity = setValidity;                                                                                     // 25924
                                                                                                                       // 25925
  function setValidity(validationErrorKey, state, controller) {                                                        // 25926
    if (isUndefined(state)) {                                                                                          // 25927
      createAndSet('$pending', validationErrorKey, controller);                                                        // 25928
    } else {                                                                                                           // 25929
      unsetAndCleanup('$pending', validationErrorKey, controller);                                                     // 25930
    }                                                                                                                  // 25931
    if (!isBoolean(state)) {                                                                                           // 25932
      unset(ctrl.$error, validationErrorKey, controller);                                                              // 25933
      unset(ctrl.$$success, validationErrorKey, controller);                                                           // 25934
    } else {                                                                                                           // 25935
      if (state) {                                                                                                     // 25936
        unset(ctrl.$error, validationErrorKey, controller);                                                            // 25937
        set(ctrl.$$success, validationErrorKey, controller);                                                           // 25938
      } else {                                                                                                         // 25939
        set(ctrl.$error, validationErrorKey, controller);                                                              // 25940
        unset(ctrl.$$success, validationErrorKey, controller);                                                         // 25941
      }                                                                                                                // 25942
    }                                                                                                                  // 25943
    if (ctrl.$pending) {                                                                                               // 25944
      cachedToggleClass(PENDING_CLASS, true);                                                                          // 25945
      ctrl.$valid = ctrl.$invalid = undefined;                                                                         // 25946
      toggleValidationCss('', null);                                                                                   // 25947
    } else {                                                                                                           // 25948
      cachedToggleClass(PENDING_CLASS, false);                                                                         // 25949
      ctrl.$valid = isObjectEmpty(ctrl.$error);                                                                        // 25950
      ctrl.$invalid = !ctrl.$valid;                                                                                    // 25951
      toggleValidationCss('', ctrl.$valid);                                                                            // 25952
    }                                                                                                                  // 25953
                                                                                                                       // 25954
    // re-read the state as the set/unset methods could have                                                           // 25955
    // combined state in ctrl.$error[validationError] (used for forms),                                                // 25956
    // where setting/unsetting only increments/decrements the value,                                                   // 25957
    // and does not replace it.                                                                                        // 25958
    var combinedState;                                                                                                 // 25959
    if (ctrl.$pending && ctrl.$pending[validationErrorKey]) {                                                          // 25960
      combinedState = undefined;                                                                                       // 25961
    } else if (ctrl.$error[validationErrorKey]) {                                                                      // 25962
      combinedState = false;                                                                                           // 25963
    } else if (ctrl.$$success[validationErrorKey]) {                                                                   // 25964
      combinedState = true;                                                                                            // 25965
    } else {                                                                                                           // 25966
      combinedState = null;                                                                                            // 25967
    }                                                                                                                  // 25968
                                                                                                                       // 25969
    toggleValidationCss(validationErrorKey, combinedState);                                                            // 25970
    ctrl.$$parentForm.$setValidity(validationErrorKey, combinedState, ctrl);                                           // 25971
  }                                                                                                                    // 25972
                                                                                                                       // 25973
  function createAndSet(name, value, controller) {                                                                     // 25974
    if (!ctrl[name]) {                                                                                                 // 25975
      ctrl[name] = {};                                                                                                 // 25976
    }                                                                                                                  // 25977
    set(ctrl[name], value, controller);                                                                                // 25978
  }                                                                                                                    // 25979
                                                                                                                       // 25980
  function unsetAndCleanup(name, value, controller) {                                                                  // 25981
    if (ctrl[name]) {                                                                                                  // 25982
      unset(ctrl[name], value, controller);                                                                            // 25983
    }                                                                                                                  // 25984
    if (isObjectEmpty(ctrl[name])) {                                                                                   // 25985
      ctrl[name] = undefined;                                                                                          // 25986
    }                                                                                                                  // 25987
  }                                                                                                                    // 25988
                                                                                                                       // 25989
  function cachedToggleClass(className, switchValue) {                                                                 // 25990
    if (switchValue && !classCache[className]) {                                                                       // 25991
      $animate.addClass($element, className);                                                                          // 25992
      classCache[className] = true;                                                                                    // 25993
    } else if (!switchValue && classCache[className]) {                                                                // 25994
      $animate.removeClass($element, className);                                                                       // 25995
      classCache[className] = false;                                                                                   // 25996
    }                                                                                                                  // 25997
  }                                                                                                                    // 25998
                                                                                                                       // 25999
  function toggleValidationCss(validationErrorKey, isValid) {                                                          // 26000
    validationErrorKey = validationErrorKey ? '-' + snake_case(validationErrorKey, '-') : '';                          // 26001
                                                                                                                       // 26002
    cachedToggleClass(VALID_CLASS + validationErrorKey, isValid === true);                                             // 26003
    cachedToggleClass(INVALID_CLASS + validationErrorKey, isValid === false);                                          // 26004
  }                                                                                                                    // 26005
}                                                                                                                      // 26006
                                                                                                                       // 26007
function isObjectEmpty(obj) {                                                                                          // 26008
  if (obj) {                                                                                                           // 26009
    for (var prop in obj) {                                                                                            // 26010
      if (obj.hasOwnProperty(prop)) {                                                                                  // 26011
        return false;                                                                                                  // 26012
      }                                                                                                                // 26013
    }                                                                                                                  // 26014
  }                                                                                                                    // 26015
  return true;                                                                                                         // 26016
}                                                                                                                      // 26017
                                                                                                                       // 26018
/**                                                                                                                    // 26019
 * @ngdoc directive                                                                                                    // 26020
 * @name ngNonBindable                                                                                                 // 26021
 * @restrict AC                                                                                                        // 26022
 * @priority 1000                                                                                                      // 26023
 *                                                                                                                     // 26024
 * @description                                                                                                        // 26025
 * The `ngNonBindable` directive tells Angular not to compile or bind the contents of the current                      // 26026
 * DOM element. This is useful if the element contains what appears to be Angular directives and                       // 26027
 * bindings but which should be ignored by Angular. This could be the case if you have a site that                     // 26028
 * displays snippets of code, for instance.                                                                            // 26029
 *                                                                                                                     // 26030
 * @element ANY                                                                                                        // 26031
 *                                                                                                                     // 26032
 * @example                                                                                                            // 26033
 * In this example there are two locations where a simple interpolation binding (`{{}}`) is present,                   // 26034
 * but the one wrapped in `ngNonBindable` is left alone.                                                               // 26035
 *                                                                                                                     // 26036
 * @example                                                                                                            // 26037
    <example>                                                                                                          // 26038
      <file name="index.html">                                                                                         // 26039
        <div>Normal: {{1 + 2}}</div>                                                                                   // 26040
        <div ng-non-bindable>Ignored: {{1 + 2}}</div>                                                                  // 26041
      </file>                                                                                                          // 26042
      <file name="protractor.js" type="protractor">                                                                    // 26043
       it('should check ng-non-bindable', function() {                                                                 // 26044
         expect(element(by.binding('1 + 2')).getText()).toContain('3');                                                // 26045
         expect(element.all(by.css('div')).last().getText()).toMatch(/1 \+ 2/);                                        // 26046
       });                                                                                                             // 26047
      </file>                                                                                                          // 26048
    </example>                                                                                                         // 26049
 */                                                                                                                    // 26050
var ngNonBindableDirective = ngDirective({ terminal: true, priority: 1000 });                                          // 26051
                                                                                                                       // 26052
/* global jqLiteRemove */                                                                                              // 26053
                                                                                                                       // 26054
var ngOptionsMinErr = minErr('ngOptions');                                                                             // 26055
                                                                                                                       // 26056
/**                                                                                                                    // 26057
 * @ngdoc directive                                                                                                    // 26058
 * @name ngOptions                                                                                                     // 26059
 * @restrict A                                                                                                         // 26060
 *                                                                                                                     // 26061
 * @description                                                                                                        // 26062
 *                                                                                                                     // 26063
 * The `ngOptions` attribute can be used to dynamically generate a list of `<option>`                                  // 26064
 * elements for the `<select>` element using the array or object obtained by evaluating the                            // 26065
 * `ngOptions` comprehension expression.                                                                               // 26066
 *                                                                                                                     // 26067
 * In many cases, `ngRepeat` can be used on `<option>` elements instead of `ngOptions` to achieve a                    // 26068
 * similar result. However, `ngOptions` provides some benefits such as reducing memory and                             // 26069
 * increasing speed by not creating a new scope for each repeated instance, as well as providing                       // 26070
 * more flexibility in how the `<select>`'s model is assigned via the `select` **`as`** part of the                    // 26071
 * comprehension expression. `ngOptions` should be used when the `<select>` model needs to be bound                    // 26072
 *  to a non-string value. This is because an option element can only be bound to string values at                     // 26073
 * present.                                                                                                            // 26074
 *                                                                                                                     // 26075
 * When an item in the `<select>` menu is selected, the array element or object property                               // 26076
 * represented by the selected option will be bound to the model identified by the `ngModel`                           // 26077
 * directive.                                                                                                          // 26078
 *                                                                                                                     // 26079
 * Optionally, a single hard-coded `<option>` element, with the value set to an empty string, can                      // 26080
 * be nested into the `<select>` element. This element will then represent the `null` or "not selected"                // 26081
 * option. See example below for demonstration.                                                                        // 26082
 *                                                                                                                     // 26083
 * ## Complex Models (objects or collections)                                                                          // 26084
 *                                                                                                                     // 26085
 * By default, `ngModel` watches the model by reference, not value. This is important to know when                     // 26086
 * binding the select to a model that is an object or a collection.                                                    // 26087
 *                                                                                                                     // 26088
 * One issue occurs if you want to preselect an option. For example, if you set                                        // 26089
 * the model to an object that is equal to an object in your collection, `ngOptions` won't be able to set the selection,
 * because the objects are not identical. So by default, you should always reference the item in your collection       // 26091
 * for preselections, e.g.: `$scope.selected = $scope.collection[3]`.                                                  // 26092
 *                                                                                                                     // 26093
 * Another solution is to use a `track by` clause, because then `ngOptions` will track the identity                    // 26094
 * of the item not by reference, but by the result of the `track by` expression. For example, if your                  // 26095
 * collection items have an id property, you would `track by item.id`.                                                 // 26096
 *                                                                                                                     // 26097
 * A different issue with objects or collections is that ngModel won't detect if an object property or                 // 26098
 * a collection item changes. For that reason, `ngOptions` additionally watches the model using                        // 26099
 * `$watchCollection`, when the expression contains a `track by` clause or the the select has the `multiple` attribute.
 * This allows ngOptions to trigger a re-rendering of the options even if the actual object/collection                 // 26101
 * has not changed identity, but only a property on the object or an item in the collection changes.                   // 26102
 *                                                                                                                     // 26103
 * Note that `$watchCollection` does a shallow comparison of the properties of the object (or the items in the collection
 * if the model is an array). This means that changing a property deeper than the first level inside the               // 26105
 * object/collection will not trigger a re-rendering.                                                                  // 26106
 *                                                                                                                     // 26107
 * ## `select` **`as`**                                                                                                // 26108
 *                                                                                                                     // 26109
 * Using `select` **`as`** will bind the result of the `select` expression to the model, but                           // 26110
 * the value of the `<select>` and `<option>` html elements will be either the index (for array data sources)          // 26111
 * or property name (for object data sources) of the value within the collection. If a **`track by`** expression       // 26112
 * is used, the result of that expression will be set as the value of the `option` and `select` elements.              // 26113
 *                                                                                                                     // 26114
 *                                                                                                                     // 26115
 * ### `select` **`as`** and **`track by`**                                                                            // 26116
 *                                                                                                                     // 26117
 * <div class="alert alert-warning">                                                                                   // 26118
 * Be careful when using `select` **`as`** and **`track by`** in the same expression.                                  // 26119
 * </div>                                                                                                              // 26120
 *                                                                                                                     // 26121
 * Given this array of items on the $scope:                                                                            // 26122
 *                                                                                                                     // 26123
 * ```js                                                                                                               // 26124
 * $scope.items = [{                                                                                                   // 26125
 *   id: 1,                                                                                                            // 26126
 *   label: 'aLabel',                                                                                                  // 26127
 *   subItem: { name: 'aSubItem' }                                                                                     // 26128
 * }, {                                                                                                                // 26129
 *   id: 2,                                                                                                            // 26130
 *   label: 'bLabel',                                                                                                  // 26131
 *   subItem: { name: 'bSubItem' }                                                                                     // 26132
 * }];                                                                                                                 // 26133
 * ```                                                                                                                 // 26134
 *                                                                                                                     // 26135
 * This will work:                                                                                                     // 26136
 *                                                                                                                     // 26137
 * ```html                                                                                                             // 26138
 * <select ng-options="item as item.label for item in items track by item.id" ng-model="selected"></select>            // 26139
 * ```                                                                                                                 // 26140
 * ```js                                                                                                               // 26141
 * $scope.selected = $scope.items[0];                                                                                  // 26142
 * ```                                                                                                                 // 26143
 *                                                                                                                     // 26144
 * but this will not work:                                                                                             // 26145
 *                                                                                                                     // 26146
 * ```html                                                                                                             // 26147
 * <select ng-options="item.subItem as item.label for item in items track by item.id" ng-model="selected"></select>    // 26148
 * ```                                                                                                                 // 26149
 * ```js                                                                                                               // 26150
 * $scope.selected = $scope.items[0].subItem;                                                                          // 26151
 * ```                                                                                                                 // 26152
 *                                                                                                                     // 26153
 * In both examples, the **`track by`** expression is applied successfully to each `item` in the                       // 26154
 * `items` array. Because the selected option has been set programmatically in the controller, the                     // 26155
 * **`track by`** expression is also applied to the `ngModel` value. In the first example, the                         // 26156
 * `ngModel` value is `items[0]` and the **`track by`** expression evaluates to `items[0].id` with                     // 26157
 * no issue. In the second example, the `ngModel` value is `items[0].subItem` and the **`track by`**                   // 26158
 * expression evaluates to `items[0].subItem.id` (which is undefined). As a result, the model value                    // 26159
 * is not matched against any `<option>` and the `<select>` appears as having no selected value.                       // 26160
 *                                                                                                                     // 26161
 *                                                                                                                     // 26162
 * @param {string} ngModel Assignable angular expression to data-bind to.                                              // 26163
 * @param {string=} name Property name of the form under which the control is published.                               // 26164
 * @param {string=} required The control is considered valid only if value is entered.                                 // 26165
 * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to                       // 26166
 *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of                        // 26167
 *    `required` when you want to data-bind to the `required` attribute.                                               // 26168
 * @param {comprehension_expression=} ngOptions in one of the following forms:                                         // 26169
 *                                                                                                                     // 26170
 *   * for array data sources:                                                                                         // 26171
 *     * `label` **`for`** `value` **`in`** `array`                                                                    // 26172
 *     * `select` **`as`** `label` **`for`** `value` **`in`** `array`                                                  // 26173
 *     * `label` **`group by`** `group` **`for`** `value` **`in`** `array`                                             // 26174
 *     * `label` **`disable when`** `disable` **`for`** `value` **`in`** `array`                                       // 26175
 *     * `label` **`group by`** `group` **`for`** `value` **`in`** `array` **`track by`** `trackexpr`                  // 26176
 *     * `label` **`disable when`** `disable` **`for`** `value` **`in`** `array` **`track by`** `trackexpr`            // 26177
 *     * `label` **`for`** `value` **`in`** `array` | orderBy:`orderexpr` **`track by`** `trackexpr`                   // 26178
 *        (for including a filter with `track by`)                                                                     // 26179
 *   * for object data sources:                                                                                        // 26180
 *     * `label` **`for (`**`key` **`,`** `value`**`) in`** `object`                                                   // 26181
 *     * `select` **`as`** `label` **`for (`**`key` **`,`** `value`**`) in`** `object`                                 // 26182
 *     * `label` **`group by`** `group` **`for (`**`key`**`,`** `value`**`) in`** `object`                             // 26183
 *     * `label` **`disable when`** `disable` **`for (`**`key`**`,`** `value`**`) in`** `object`                       // 26184
 *     * `select` **`as`** `label` **`group by`** `group`                                                              // 26185
 *         **`for` `(`**`key`**`,`** `value`**`) in`** `object`                                                        // 26186
 *     * `select` **`as`** `label` **`disable when`** `disable`                                                        // 26187
 *         **`for` `(`**`key`**`,`** `value`**`) in`** `object`                                                        // 26188
 *                                                                                                                     // 26189
 * Where:                                                                                                              // 26190
 *                                                                                                                     // 26191
 *   * `array` / `object`: an expression which evaluates to an array / object to iterate over.                         // 26192
 *   * `value`: local variable which will refer to each item in the `array` or each property value                     // 26193
 *      of `object` during iteration.                                                                                  // 26194
 *   * `key`: local variable which will refer to a property name in `object` during iteration.                         // 26195
 *   * `label`: The result of this expression will be the label for `<option>` element. The                            // 26196
 *     `expression` will most likely refer to the `value` variable (e.g. `value.propertyName`).                        // 26197
 *   * `select`: The result of this expression will be bound to the model of the parent `<select>`                     // 26198
 *      element. If not specified, `select` expression will default to `value`.                                        // 26199
 *   * `group`: The result of this expression will be used to group options using the `<optgroup>`                     // 26200
 *      DOM element.                                                                                                   // 26201
 *   * `disable`: The result of this expression will be used to disable the rendered `<option>`                        // 26202
 *      element. Return `true` to disable.                                                                             // 26203
 *   * `trackexpr`: Used when working with an array of objects. The result of this expression will be                  // 26204
 *      used to identify the objects in the array. The `trackexpr` will most likely refer to the                       // 26205
 *     `value` variable (e.g. `value.propertyName`). With this the selection is preserved                              // 26206
 *      even when the options are recreated (e.g. reloaded from the server).                                           // 26207
 *                                                                                                                     // 26208
 * @example                                                                                                            // 26209
    <example module="selectExample">                                                                                   // 26210
      <file name="index.html">                                                                                         // 26211
        <script>                                                                                                       // 26212
        angular.module('selectExample', [])                                                                            // 26213
          .controller('ExampleController', ['$scope', function($scope) {                                               // 26214
            $scope.colors = [                                                                                          // 26215
              {name:'black', shade:'dark'},                                                                            // 26216
              {name:'white', shade:'light', notAnOption: true},                                                        // 26217
              {name:'red', shade:'dark'},                                                                              // 26218
              {name:'blue', shade:'dark', notAnOption: true},                                                          // 26219
              {name:'yellow', shade:'light', notAnOption: false}                                                       // 26220
            ];                                                                                                         // 26221
            $scope.myColor = $scope.colors[2]; // red                                                                  // 26222
          }]);                                                                                                         // 26223
        </script>                                                                                                      // 26224
        <div ng-controller="ExampleController">                                                                        // 26225
          <ul>                                                                                                         // 26226
            <li ng-repeat="color in colors">                                                                           // 26227
              <label>Name: <input ng-model="color.name"></label>                                                       // 26228
              <label><input type="checkbox" ng-model="color.notAnOption"> Disabled?</label>                            // 26229
              <button ng-click="colors.splice($index, 1)" aria-label="Remove">X</button>                               // 26230
            </li>                                                                                                      // 26231
            <li>                                                                                                       // 26232
              <button ng-click="colors.push({})">add</button>                                                          // 26233
            </li>                                                                                                      // 26234
          </ul>                                                                                                        // 26235
          <hr/>                                                                                                        // 26236
          <label>Color (null not allowed):                                                                             // 26237
            <select ng-model="myColor" ng-options="color.name for color in colors"></select>                           // 26238
          </label><br/>                                                                                                // 26239
          <label>Color (null allowed):                                                                                 // 26240
          <span  class="nullable">                                                                                     // 26241
            <select ng-model="myColor" ng-options="color.name for color in colors">                                    // 26242
              <option value="">-- choose color --</option>                                                             // 26243
            </select>                                                                                                  // 26244
          </span></label><br/>                                                                                         // 26245
                                                                                                                       // 26246
          <label>Color grouped by shade:                                                                               // 26247
            <select ng-model="myColor" ng-options="color.name group by color.shade for color in colors">               // 26248
            </select>                                                                                                  // 26249
          </label><br/>                                                                                                // 26250
                                                                                                                       // 26251
          <label>Color grouped by shade, with some disabled:                                                           // 26252
            <select ng-model="myColor"                                                                                 // 26253
                  ng-options="color.name group by color.shade disable when color.notAnOption for color in colors">     // 26254
            </select>                                                                                                  // 26255
          </label><br/>                                                                                                // 26256
                                                                                                                       // 26257
                                                                                                                       // 26258
                                                                                                                       // 26259
          Select <button ng-click="myColor = { name:'not in list', shade: 'other' }">bogus</button>.                   // 26260
          <br/>                                                                                                        // 26261
          <hr/>                                                                                                        // 26262
          Currently selected: {{ {selected_color:myColor} }}                                                           // 26263
          <div style="border:solid 1px black; height:20px"                                                             // 26264
               ng-style="{'background-color':myColor.name}">                                                           // 26265
          </div>                                                                                                       // 26266
        </div>                                                                                                         // 26267
      </file>                                                                                                          // 26268
      <file name="protractor.js" type="protractor">                                                                    // 26269
         it('should check ng-options', function() {                                                                    // 26270
           expect(element(by.binding('{selected_color:myColor}')).getText()).toMatch('red');                           // 26271
           element.all(by.model('myColor')).first().click();                                                           // 26272
           element.all(by.css('select[ng-model="myColor"] option')).first().click();                                   // 26273
           expect(element(by.binding('{selected_color:myColor}')).getText()).toMatch('black');                         // 26274
           element(by.css('.nullable select[ng-model="myColor"]')).click();                                            // 26275
           element.all(by.css('.nullable select[ng-model="myColor"] option')).first().click();                         // 26276
           expect(element(by.binding('{selected_color:myColor}')).getText()).toMatch('null');                          // 26277
         });                                                                                                           // 26278
      </file>                                                                                                          // 26279
    </example>                                                                                                         // 26280
 */                                                                                                                    // 26281
                                                                                                                       // 26282
// jshint maxlen: false                                                                                                // 26283
//                     //00001111111111000000000002222222222000000000000000000000333333333300000000000000000000000004444444444400000000000005555555555555550000000006666666666666660000000777777777777777000000000000000888888888800000000000000000009999999999
var NG_OPTIONS_REGEXP = /^\s*([\s\S]+?)(?:\s+as\s+([\s\S]+?))?(?:\s+group\s+by\s+([\s\S]+?))?(?:\s+disable\s+when\s+([\s\S]+?))?\s+for\s+(?:([\$\w][\$\w]*)|(?:\(\s*([\$\w][\$\w]*)\s*,\s*([\$\w][\$\w]*)\s*\)))\s+in\s+([\s\S]+?)(?:\s+track\s+by\s+([\s\S]+?))?$/;
                        // 1: value expression (valueFn)                                                               // 26286
                        // 2: label expression (displayFn)                                                             // 26287
                        // 3: group by expression (groupByFn)                                                          // 26288
                        // 4: disable when expression (disableWhenFn)                                                  // 26289
                        // 5: array item variable name                                                                 // 26290
                        // 6: object item key variable name                                                            // 26291
                        // 7: object item value variable name                                                          // 26292
                        // 8: collection expression                                                                    // 26293
                        // 9: track by expression                                                                      // 26294
// jshint maxlen: 100                                                                                                  // 26295
                                                                                                                       // 26296
                                                                                                                       // 26297
var ngOptionsDirective = ['$compile', '$parse', function($compile, $parse) {                                           // 26298
                                                                                                                       // 26299
  function parseOptionsExpression(optionsExp, selectElement, scope) {                                                  // 26300
                                                                                                                       // 26301
    var match = optionsExp.match(NG_OPTIONS_REGEXP);                                                                   // 26302
    if (!(match)) {                                                                                                    // 26303
      throw ngOptionsMinErr('iexp',                                                                                    // 26304
        "Expected expression in form of " +                                                                            // 26305
        "'_select_ (as _label_)? for (_key_,)?_value_ in _collection_'" +                                              // 26306
        " but got '{0}'. Element: {1}",                                                                                // 26307
        optionsExp, startingTag(selectElement));                                                                       // 26308
    }                                                                                                                  // 26309
                                                                                                                       // 26310
    // Extract the parts from the ngOptions expression                                                                 // 26311
                                                                                                                       // 26312
    // The variable name for the value of the item in the collection                                                   // 26313
    var valueName = match[5] || match[7];                                                                              // 26314
    // The variable name for the key of the item in the collection                                                     // 26315
    var keyName = match[6];                                                                                            // 26316
                                                                                                                       // 26317
    // An expression that generates the viewValue for an option if there is a label expression                         // 26318
    var selectAs = / as /.test(match[0]) && match[1];                                                                  // 26319
    // An expression that is used to track the id of each object in the options collection                             // 26320
    var trackBy = match[9];                                                                                            // 26321
    // An expression that generates the viewValue for an option if there is no label expression                        // 26322
    var valueFn = $parse(match[2] ? match[1] : valueName);                                                             // 26323
    var selectAsFn = selectAs && $parse(selectAs);                                                                     // 26324
    var viewValueFn = selectAsFn || valueFn;                                                                           // 26325
    var trackByFn = trackBy && $parse(trackBy);                                                                        // 26326
                                                                                                                       // 26327
    // Get the value by which we are going to track the option                                                         // 26328
    // if we have a trackFn then use that (passing scope and locals)                                                   // 26329
    // otherwise just hash the given viewValue                                                                         // 26330
    var getTrackByValueFn = trackBy ?                                                                                  // 26331
                              function(value, locals) { return trackByFn(scope, locals); } :                           // 26332
                              function getHashOfValue(value) { return hashKey(value); };                               // 26333
    var getTrackByValue = function(value, key) {                                                                       // 26334
      return getTrackByValueFn(value, getLocals(value, key));                                                          // 26335
    };                                                                                                                 // 26336
                                                                                                                       // 26337
    var displayFn = $parse(match[2] || match[1]);                                                                      // 26338
    var groupByFn = $parse(match[3] || '');                                                                            // 26339
    var disableWhenFn = $parse(match[4] || '');                                                                        // 26340
    var valuesFn = $parse(match[8]);                                                                                   // 26341
                                                                                                                       // 26342
    var locals = {};                                                                                                   // 26343
    var getLocals = keyName ? function(value, key) {                                                                   // 26344
      locals[keyName] = key;                                                                                           // 26345
      locals[valueName] = value;                                                                                       // 26346
      return locals;                                                                                                   // 26347
    } : function(value) {                                                                                              // 26348
      locals[valueName] = value;                                                                                       // 26349
      return locals;                                                                                                   // 26350
    };                                                                                                                 // 26351
                                                                                                                       // 26352
                                                                                                                       // 26353
    function Option(selectValue, viewValue, label, group, disabled) {                                                  // 26354
      this.selectValue = selectValue;                                                                                  // 26355
      this.viewValue = viewValue;                                                                                      // 26356
      this.label = label;                                                                                              // 26357
      this.group = group;                                                                                              // 26358
      this.disabled = disabled;                                                                                        // 26359
    }                                                                                                                  // 26360
                                                                                                                       // 26361
    function getOptionValuesKeys(optionValues) {                                                                       // 26362
      var optionValuesKeys;                                                                                            // 26363
                                                                                                                       // 26364
      if (!keyName && isArrayLike(optionValues)) {                                                                     // 26365
        optionValuesKeys = optionValues;                                                                               // 26366
      } else {                                                                                                         // 26367
        // if object, extract keys, in enumeration order, unsorted                                                     // 26368
        optionValuesKeys = [];                                                                                         // 26369
        for (var itemKey in optionValues) {                                                                            // 26370
          if (optionValues.hasOwnProperty(itemKey) && itemKey.charAt(0) !== '$') {                                     // 26371
            optionValuesKeys.push(itemKey);                                                                            // 26372
          }                                                                                                            // 26373
        }                                                                                                              // 26374
      }                                                                                                                // 26375
      return optionValuesKeys;                                                                                         // 26376
    }                                                                                                                  // 26377
                                                                                                                       // 26378
    return {                                                                                                           // 26379
      trackBy: trackBy,                                                                                                // 26380
      getTrackByValue: getTrackByValue,                                                                                // 26381
      getWatchables: $parse(valuesFn, function(optionValues) {                                                         // 26382
        // Create a collection of things that we would like to watch (watchedArray)                                    // 26383
        // so that they can all be watched using a single $watchCollection                                             // 26384
        // that only runs the handler once if anything changes                                                         // 26385
        var watchedArray = [];                                                                                         // 26386
        optionValues = optionValues || [];                                                                             // 26387
                                                                                                                       // 26388
        var optionValuesKeys = getOptionValuesKeys(optionValues);                                                      // 26389
        var optionValuesLength = optionValuesKeys.length;                                                              // 26390
        for (var index = 0; index < optionValuesLength; index++) {                                                     // 26391
          var key = (optionValues === optionValuesKeys) ? index : optionValuesKeys[index];                             // 26392
          var value = optionValues[key];                                                                               // 26393
                                                                                                                       // 26394
          var locals = getLocals(optionValues[key], key);                                                              // 26395
          var selectValue = getTrackByValueFn(optionValues[key], locals);                                              // 26396
          watchedArray.push(selectValue);                                                                              // 26397
                                                                                                                       // 26398
          // Only need to watch the displayFn if there is a specific label expression                                  // 26399
          if (match[2] || match[1]) {                                                                                  // 26400
            var label = displayFn(scope, locals);                                                                      // 26401
            watchedArray.push(label);                                                                                  // 26402
          }                                                                                                            // 26403
                                                                                                                       // 26404
          // Only need to watch the disableWhenFn if there is a specific disable expression                            // 26405
          if (match[4]) {                                                                                              // 26406
            var disableWhen = disableWhenFn(scope, locals);                                                            // 26407
            watchedArray.push(disableWhen);                                                                            // 26408
          }                                                                                                            // 26409
        }                                                                                                              // 26410
        return watchedArray;                                                                                           // 26411
      }),                                                                                                              // 26412
                                                                                                                       // 26413
      getOptions: function() {                                                                                         // 26414
                                                                                                                       // 26415
        var optionItems = [];                                                                                          // 26416
        var selectValueMap = {};                                                                                       // 26417
                                                                                                                       // 26418
        // The option values were already computed in the `getWatchables` fn,                                          // 26419
        // which must have been called to trigger `getOptions`                                                         // 26420
        var optionValues = valuesFn(scope) || [];                                                                      // 26421
        var optionValuesKeys = getOptionValuesKeys(optionValues);                                                      // 26422
        var optionValuesLength = optionValuesKeys.length;                                                              // 26423
                                                                                                                       // 26424
        for (var index = 0; index < optionValuesLength; index++) {                                                     // 26425
          var key = (optionValues === optionValuesKeys) ? index : optionValuesKeys[index];                             // 26426
          var value = optionValues[key];                                                                               // 26427
          var locals = getLocals(value, key);                                                                          // 26428
          var viewValue = viewValueFn(scope, locals);                                                                  // 26429
          var selectValue = getTrackByValueFn(viewValue, locals);                                                      // 26430
          var label = displayFn(scope, locals);                                                                        // 26431
          var group = groupByFn(scope, locals);                                                                        // 26432
          var disabled = disableWhenFn(scope, locals);                                                                 // 26433
          var optionItem = new Option(selectValue, viewValue, label, group, disabled);                                 // 26434
                                                                                                                       // 26435
          optionItems.push(optionItem);                                                                                // 26436
          selectValueMap[selectValue] = optionItem;                                                                    // 26437
        }                                                                                                              // 26438
                                                                                                                       // 26439
        return {                                                                                                       // 26440
          items: optionItems,                                                                                          // 26441
          selectValueMap: selectValueMap,                                                                              // 26442
          getOptionFromViewValue: function(value) {                                                                    // 26443
            return selectValueMap[getTrackByValue(value)];                                                             // 26444
          },                                                                                                           // 26445
          getViewValueFromOption: function(option) {                                                                   // 26446
            // If the viewValue could be an object that may be mutated by the application,                             // 26447
            // we need to make a copy and not return the reference to the value on the option.                         // 26448
            return trackBy ? angular.copy(option.viewValue) : option.viewValue;                                        // 26449
          }                                                                                                            // 26450
        };                                                                                                             // 26451
      }                                                                                                                // 26452
    };                                                                                                                 // 26453
  }                                                                                                                    // 26454
                                                                                                                       // 26455
                                                                                                                       // 26456
  // we can't just jqLite('<option>') since jqLite is not smart enough                                                 // 26457
  // to create it in <select> and IE barfs otherwise.                                                                  // 26458
  var optionTemplate = document.createElement('option'),                                                               // 26459
      optGroupTemplate = document.createElement('optgroup');                                                           // 26460
                                                                                                                       // 26461
                                                                                                                       // 26462
    function ngOptionsPostLink(scope, selectElement, attr, ctrls) {                                                    // 26463
                                                                                                                       // 26464
      // if ngModel is not defined, we don't need to do anything                                                       // 26465
      var ngModelCtrl = ctrls[1];                                                                                      // 26466
      if (!ngModelCtrl) return;                                                                                        // 26467
                                                                                                                       // 26468
      var selectCtrl = ctrls[0];                                                                                       // 26469
      var multiple = attr.multiple;                                                                                    // 26470
                                                                                                                       // 26471
      // The emptyOption allows the application developer to provide their own custom "empty"                          // 26472
      // option when the viewValue does not match any of the option values.                                            // 26473
      var emptyOption;                                                                                                 // 26474
      for (var i = 0, children = selectElement.children(), ii = children.length; i < ii; i++) {                        // 26475
        if (children[i].value === '') {                                                                                // 26476
          emptyOption = children.eq(i);                                                                                // 26477
          break;                                                                                                       // 26478
        }                                                                                                              // 26479
      }                                                                                                                // 26480
                                                                                                                       // 26481
      var providedEmptyOption = !!emptyOption;                                                                         // 26482
                                                                                                                       // 26483
      var unknownOption = jqLite(optionTemplate.cloneNode(false));                                                     // 26484
      unknownOption.val('?');                                                                                          // 26485
                                                                                                                       // 26486
      var options;                                                                                                     // 26487
      var ngOptions = parseOptionsExpression(attr.ngOptions, selectElement, scope);                                    // 26488
                                                                                                                       // 26489
                                                                                                                       // 26490
      var renderEmptyOption = function() {                                                                             // 26491
        if (!providedEmptyOption) {                                                                                    // 26492
          selectElement.prepend(emptyOption);                                                                          // 26493
        }                                                                                                              // 26494
        selectElement.val('');                                                                                         // 26495
        emptyOption.prop('selected', true); // needed for IE                                                           // 26496
        emptyOption.attr('selected', true);                                                                            // 26497
      };                                                                                                               // 26498
                                                                                                                       // 26499
      var removeEmptyOption = function() {                                                                             // 26500
        if (!providedEmptyOption) {                                                                                    // 26501
          emptyOption.remove();                                                                                        // 26502
        }                                                                                                              // 26503
      };                                                                                                               // 26504
                                                                                                                       // 26505
                                                                                                                       // 26506
      var renderUnknownOption = function() {                                                                           // 26507
        selectElement.prepend(unknownOption);                                                                          // 26508
        selectElement.val('?');                                                                                        // 26509
        unknownOption.prop('selected', true); // needed for IE                                                         // 26510
        unknownOption.attr('selected', true);                                                                          // 26511
      };                                                                                                               // 26512
                                                                                                                       // 26513
      var removeUnknownOption = function() {                                                                           // 26514
        unknownOption.remove();                                                                                        // 26515
      };                                                                                                               // 26516
                                                                                                                       // 26517
      // Update the controller methods for multiple selectable options                                                 // 26518
      if (!multiple) {                                                                                                 // 26519
                                                                                                                       // 26520
        selectCtrl.writeValue = function writeNgOptionsValue(value) {                                                  // 26521
          var option = options.getOptionFromViewValue(value);                                                          // 26522
                                                                                                                       // 26523
          if (option && !option.disabled) {                                                                            // 26524
            if (selectElement[0].value !== option.selectValue) {                                                       // 26525
              removeUnknownOption();                                                                                   // 26526
              removeEmptyOption();                                                                                     // 26527
                                                                                                                       // 26528
              selectElement[0].value = option.selectValue;                                                             // 26529
              option.element.selected = true;                                                                          // 26530
              option.element.setAttribute('selected', 'selected');                                                     // 26531
            }                                                                                                          // 26532
          } else {                                                                                                     // 26533
            if (value === null || providedEmptyOption) {                                                               // 26534
              removeUnknownOption();                                                                                   // 26535
              renderEmptyOption();                                                                                     // 26536
            } else {                                                                                                   // 26537
              removeEmptyOption();                                                                                     // 26538
              renderUnknownOption();                                                                                   // 26539
            }                                                                                                          // 26540
          }                                                                                                            // 26541
        };                                                                                                             // 26542
                                                                                                                       // 26543
        selectCtrl.readValue = function readNgOptionsValue() {                                                         // 26544
                                                                                                                       // 26545
          var selectedOption = options.selectValueMap[selectElement.val()];                                            // 26546
                                                                                                                       // 26547
          if (selectedOption && !selectedOption.disabled) {                                                            // 26548
            removeEmptyOption();                                                                                       // 26549
            removeUnknownOption();                                                                                     // 26550
            return options.getViewValueFromOption(selectedOption);                                                     // 26551
          }                                                                                                            // 26552
          return null;                                                                                                 // 26553
        };                                                                                                             // 26554
                                                                                                                       // 26555
        // If we are using `track by` then we must watch the tracked value on the model                                // 26556
        // since ngModel only watches for object identity change                                                       // 26557
        if (ngOptions.trackBy) {                                                                                       // 26558
          scope.$watch(                                                                                                // 26559
            function() { return ngOptions.getTrackByValue(ngModelCtrl.$viewValue); },                                  // 26560
            function() { ngModelCtrl.$render(); }                                                                      // 26561
          );                                                                                                           // 26562
        }                                                                                                              // 26563
                                                                                                                       // 26564
      } else {                                                                                                         // 26565
                                                                                                                       // 26566
        ngModelCtrl.$isEmpty = function(value) {                                                                       // 26567
          return !value || value.length === 0;                                                                         // 26568
        };                                                                                                             // 26569
                                                                                                                       // 26570
                                                                                                                       // 26571
        selectCtrl.writeValue = function writeNgOptionsMultiple(value) {                                               // 26572
          options.items.forEach(function(option) {                                                                     // 26573
            option.element.selected = false;                                                                           // 26574
          });                                                                                                          // 26575
                                                                                                                       // 26576
          if (value) {                                                                                                 // 26577
            value.forEach(function(item) {                                                                             // 26578
              var option = options.getOptionFromViewValue(item);                                                       // 26579
              if (option && !option.disabled) option.element.selected = true;                                          // 26580
            });                                                                                                        // 26581
          }                                                                                                            // 26582
        };                                                                                                             // 26583
                                                                                                                       // 26584
                                                                                                                       // 26585
        selectCtrl.readValue = function readNgOptionsMultiple() {                                                      // 26586
          var selectedValues = selectElement.val() || [],                                                              // 26587
              selections = [];                                                                                         // 26588
                                                                                                                       // 26589
          forEach(selectedValues, function(value) {                                                                    // 26590
            var option = options.selectValueMap[value];                                                                // 26591
            if (option && !option.disabled) selections.push(options.getViewValueFromOption(option));                   // 26592
          });                                                                                                          // 26593
                                                                                                                       // 26594
          return selections;                                                                                           // 26595
        };                                                                                                             // 26596
                                                                                                                       // 26597
        // If we are using `track by` then we must watch these tracked values on the model                             // 26598
        // since ngModel only watches for object identity change                                                       // 26599
        if (ngOptions.trackBy) {                                                                                       // 26600
                                                                                                                       // 26601
          scope.$watchCollection(function() {                                                                          // 26602
            if (isArray(ngModelCtrl.$viewValue)) {                                                                     // 26603
              return ngModelCtrl.$viewValue.map(function(value) {                                                      // 26604
                return ngOptions.getTrackByValue(value);                                                               // 26605
              });                                                                                                      // 26606
            }                                                                                                          // 26607
          }, function() {                                                                                              // 26608
            ngModelCtrl.$render();                                                                                     // 26609
          });                                                                                                          // 26610
                                                                                                                       // 26611
        }                                                                                                              // 26612
      }                                                                                                                // 26613
                                                                                                                       // 26614
                                                                                                                       // 26615
      if (providedEmptyOption) {                                                                                       // 26616
                                                                                                                       // 26617
        // we need to remove it before calling selectElement.empty() because otherwise IE will                         // 26618
        // remove the label from the element. wtf?                                                                     // 26619
        emptyOption.remove();                                                                                          // 26620
                                                                                                                       // 26621
        // compile the element since there might be bindings in it                                                     // 26622
        $compile(emptyOption)(scope);                                                                                  // 26623
                                                                                                                       // 26624
        // remove the class, which is added automatically because we recompile the element and it                      // 26625
        // becomes the compilation root                                                                                // 26626
        emptyOption.removeClass('ng-scope');                                                                           // 26627
      } else {                                                                                                         // 26628
        emptyOption = jqLite(optionTemplate.cloneNode(false));                                                         // 26629
      }                                                                                                                // 26630
                                                                                                                       // 26631
      // We need to do this here to ensure that the options object is defined                                          // 26632
      // when we first hit it in writeNgOptionsValue                                                                   // 26633
      updateOptions();                                                                                                 // 26634
                                                                                                                       // 26635
      // We will re-render the option elements if the option values or labels change                                   // 26636
      scope.$watchCollection(ngOptions.getWatchables, updateOptions);                                                  // 26637
                                                                                                                       // 26638
      // ------------------------------------------------------------------ //                                         // 26639
                                                                                                                       // 26640
                                                                                                                       // 26641
      function updateOptionElement(option, element) {                                                                  // 26642
        option.element = element;                                                                                      // 26643
        element.disabled = option.disabled;                                                                            // 26644
        // NOTE: The label must be set before the value, otherwise IE10/11/EDGE create unresponsive                    // 26645
        // selects in certain circumstances when multiple selects are next to each other and display                   // 26646
        // the option list in listbox style, i.e. the select is [multiple], or specifies a [size].                     // 26647
        // See https://github.com/angular/angular.js/issues/11314 for more info.                                       // 26648
        // This is unfortunately untestable with unit / e2e tests                                                      // 26649
        if (option.label !== element.label) {                                                                          // 26650
          element.label = option.label;                                                                                // 26651
          element.textContent = option.label;                                                                          // 26652
        }                                                                                                              // 26653
        if (option.value !== element.value) element.value = option.selectValue;                                        // 26654
      }                                                                                                                // 26655
                                                                                                                       // 26656
      function addOrReuseElement(parent, current, type, templateElement) {                                             // 26657
        var element;                                                                                                   // 26658
        // Check whether we can reuse the next element                                                                 // 26659
        if (current && lowercase(current.nodeName) === type) {                                                         // 26660
          // The next element is the right type so reuse it                                                            // 26661
          element = current;                                                                                           // 26662
        } else {                                                                                                       // 26663
          // The next element is not the right type so create a new one                                                // 26664
          element = templateElement.cloneNode(false);                                                                  // 26665
          if (!current) {                                                                                              // 26666
            // There are no more elements so just append it to the select                                              // 26667
            parent.appendChild(element);                                                                               // 26668
          } else {                                                                                                     // 26669
            // The next element is not a group so insert the new one                                                   // 26670
            parent.insertBefore(element, current);                                                                     // 26671
          }                                                                                                            // 26672
        }                                                                                                              // 26673
        return element;                                                                                                // 26674
      }                                                                                                                // 26675
                                                                                                                       // 26676
                                                                                                                       // 26677
      function removeExcessElements(current) {                                                                         // 26678
        var next;                                                                                                      // 26679
        while (current) {                                                                                              // 26680
          next = current.nextSibling;                                                                                  // 26681
          jqLiteRemove(current);                                                                                       // 26682
          current = next;                                                                                              // 26683
        }                                                                                                              // 26684
      }                                                                                                                // 26685
                                                                                                                       // 26686
                                                                                                                       // 26687
      function skipEmptyAndUnknownOptions(current) {                                                                   // 26688
        var emptyOption_ = emptyOption && emptyOption[0];                                                              // 26689
        var unknownOption_ = unknownOption && unknownOption[0];                                                        // 26690
                                                                                                                       // 26691
        // We cannot rely on the extracted empty option being the same as the compiled empty option,                   // 26692
        // because the compiled empty option might have been replaced by a comment because                             // 26693
        // it had an "element" transclusion directive on it (such as ngIf)                                             // 26694
        if (emptyOption_ || unknownOption_) {                                                                          // 26695
          while (current &&                                                                                            // 26696
                (current === emptyOption_ ||                                                                           // 26697
                current === unknownOption_ ||                                                                          // 26698
                current.nodeType === NODE_TYPE_COMMENT ||                                                              // 26699
                current.value === '')) {                                                                               // 26700
            current = current.nextSibling;                                                                             // 26701
          }                                                                                                            // 26702
        }                                                                                                              // 26703
        return current;                                                                                                // 26704
      }                                                                                                                // 26705
                                                                                                                       // 26706
                                                                                                                       // 26707
      function updateOptions() {                                                                                       // 26708
                                                                                                                       // 26709
        var previousValue = options && selectCtrl.readValue();                                                         // 26710
                                                                                                                       // 26711
        options = ngOptions.getOptions();                                                                              // 26712
                                                                                                                       // 26713
        var groupMap = {};                                                                                             // 26714
        var currentElement = selectElement[0].firstChild;                                                              // 26715
                                                                                                                       // 26716
        // Ensure that the empty option is always there if it was explicitly provided                                  // 26717
        if (providedEmptyOption) {                                                                                     // 26718
          selectElement.prepend(emptyOption);                                                                          // 26719
        }                                                                                                              // 26720
                                                                                                                       // 26721
        currentElement = skipEmptyAndUnknownOptions(currentElement);                                                   // 26722
                                                                                                                       // 26723
        options.items.forEach(function updateOption(option) {                                                          // 26724
          var group;                                                                                                   // 26725
          var groupElement;                                                                                            // 26726
          var optionElement;                                                                                           // 26727
                                                                                                                       // 26728
          if (option.group) {                                                                                          // 26729
                                                                                                                       // 26730
            // This option is to live in a group                                                                       // 26731
            // See if we have already created this group                                                               // 26732
            group = groupMap[option.group];                                                                            // 26733
                                                                                                                       // 26734
            if (!group) {                                                                                              // 26735
                                                                                                                       // 26736
              // We have not already created this group                                                                // 26737
              groupElement = addOrReuseElement(selectElement[0],                                                       // 26738
                                               currentElement,                                                         // 26739
                                               'optgroup',                                                             // 26740
                                               optGroupTemplate);                                                      // 26741
              // Move to the next element                                                                              // 26742
              currentElement = groupElement.nextSibling;                                                               // 26743
                                                                                                                       // 26744
              // Update the label on the group element                                                                 // 26745
              groupElement.label = option.group;                                                                       // 26746
                                                                                                                       // 26747
              // Store it for use later                                                                                // 26748
              group = groupMap[option.group] = {                                                                       // 26749
                groupElement: groupElement,                                                                            // 26750
                currentOptionElement: groupElement.firstChild                                                          // 26751
              };                                                                                                       // 26752
                                                                                                                       // 26753
            }                                                                                                          // 26754
                                                                                                                       // 26755
            // So now we have a group for this option we add the option to the group                                   // 26756
            optionElement = addOrReuseElement(group.groupElement,                                                      // 26757
                                              group.currentOptionElement,                                              // 26758
                                              'option',                                                                // 26759
                                              optionTemplate);                                                         // 26760
            updateOptionElement(option, optionElement);                                                                // 26761
            // Move to the next element                                                                                // 26762
            group.currentOptionElement = optionElement.nextSibling;                                                    // 26763
                                                                                                                       // 26764
          } else {                                                                                                     // 26765
                                                                                                                       // 26766
            // This option is not in a group                                                                           // 26767
            optionElement = addOrReuseElement(selectElement[0],                                                        // 26768
                                              currentElement,                                                          // 26769
                                              'option',                                                                // 26770
                                              optionTemplate);                                                         // 26771
            updateOptionElement(option, optionElement);                                                                // 26772
            // Move to the next element                                                                                // 26773
            currentElement = optionElement.nextSibling;                                                                // 26774
          }                                                                                                            // 26775
        });                                                                                                            // 26776
                                                                                                                       // 26777
                                                                                                                       // 26778
        // Now remove all excess options and group                                                                     // 26779
        Object.keys(groupMap).forEach(function(key) {                                                                  // 26780
          removeExcessElements(groupMap[key].currentOptionElement);                                                    // 26781
        });                                                                                                            // 26782
        removeExcessElements(currentElement);                                                                          // 26783
                                                                                                                       // 26784
        ngModelCtrl.$render();                                                                                         // 26785
                                                                                                                       // 26786
        // Check to see if the value has changed due to the update to the options                                      // 26787
        if (!ngModelCtrl.$isEmpty(previousValue)) {                                                                    // 26788
          var nextValue = selectCtrl.readValue();                                                                      // 26789
          if (ngOptions.trackBy ? !equals(previousValue, nextValue) : previousValue !== nextValue) {                   // 26790
            ngModelCtrl.$setViewValue(nextValue);                                                                      // 26791
            ngModelCtrl.$render();                                                                                     // 26792
          }                                                                                                            // 26793
        }                                                                                                              // 26794
                                                                                                                       // 26795
      }                                                                                                                // 26796
  }                                                                                                                    // 26797
                                                                                                                       // 26798
  return {                                                                                                             // 26799
    restrict: 'A',                                                                                                     // 26800
    terminal: true,                                                                                                    // 26801
    require: ['select', '?ngModel'],                                                                                   // 26802
    link: {                                                                                                            // 26803
      pre: function ngOptionsPreLink(scope, selectElement, attr, ctrls) {                                              // 26804
        // Deactivate the SelectController.register method to prevent                                                  // 26805
        // option directives from accidentally registering themselves                                                  // 26806
        // (and unwanted $destroy handlers etc.)                                                                       // 26807
        ctrls[0].registerOption = noop;                                                                                // 26808
      },                                                                                                               // 26809
      post: ngOptionsPostLink                                                                                          // 26810
    }                                                                                                                  // 26811
  };                                                                                                                   // 26812
}];                                                                                                                    // 26813
                                                                                                                       // 26814
/**                                                                                                                    // 26815
 * @ngdoc directive                                                                                                    // 26816
 * @name ngPluralize                                                                                                   // 26817
 * @restrict EA                                                                                                        // 26818
 *                                                                                                                     // 26819
 * @description                                                                                                        // 26820
 * `ngPluralize` is a directive that displays messages according to en-US localization rules.                          // 26821
 * These rules are bundled with angular.js, but can be overridden                                                      // 26822
 * (see {@link guide/i18n Angular i18n} dev guide). You configure ngPluralize directive                                // 26823
 * by specifying the mappings between                                                                                  // 26824
 * [plural categories](http://unicode.org/repos/cldr-tmp/trunk/diff/supplemental/language_plural_rules.html)           // 26825
 * and the strings to be displayed.                                                                                    // 26826
 *                                                                                                                     // 26827
 * # Plural categories and explicit number rules                                                                       // 26828
 * There are two                                                                                                       // 26829
 * [plural categories](http://unicode.org/repos/cldr-tmp/trunk/diff/supplemental/language_plural_rules.html)           // 26830
 * in Angular's default en-US locale: "one" and "other".                                                               // 26831
 *                                                                                                                     // 26832
 * While a plural category may match many numbers (for example, in en-US locale, "other" can match                     // 26833
 * any number that is not 1), an explicit number rule can only match one number. For example, the                      // 26834
 * explicit number rule for "3" matches the number 3. There are examples of plural categories                          // 26835
 * and explicit number rules throughout the rest of this documentation.                                                // 26836
 *                                                                                                                     // 26837
 * # Configuring ngPluralize                                                                                           // 26838
 * You configure ngPluralize by providing 2 attributes: `count` and `when`.                                            // 26839
 * You can also provide an optional attribute, `offset`.                                                               // 26840
 *                                                                                                                     // 26841
 * The value of the `count` attribute can be either a string or an {@link guide/expression                             // 26842
 * Angular expression}; these are evaluated on the current scope for its bound value.                                  // 26843
 *                                                                                                                     // 26844
 * The `when` attribute specifies the mappings between plural categories and the actual                                // 26845
 * string to be displayed. The value of the attribute should be a JSON object.                                         // 26846
 *                                                                                                                     // 26847
 * The following example shows how to configure ngPluralize:                                                           // 26848
 *                                                                                                                     // 26849
 * ```html                                                                                                             // 26850
 * <ng-pluralize count="personCount"                                                                                   // 26851
                 when="{'0': 'Nobody is viewing.',                                                                     // 26852
 *                      'one': '1 person is viewing.',                                                                 // 26853
 *                      'other': '{} people are viewing.'}">                                                           // 26854
 * </ng-pluralize>                                                                                                     // 26855
 *```                                                                                                                  // 26856
 *                                                                                                                     // 26857
 * In the example, `"0: Nobody is viewing."` is an explicit number rule. If you did not                                // 26858
 * specify this rule, 0 would be matched to the "other" category and "0 people are viewing"                            // 26859
 * would be shown instead of "Nobody is viewing". You can specify an explicit number rule for                          // 26860
 * other numbers, for example 12, so that instead of showing "12 people are viewing", you can                          // 26861
 * show "a dozen people are viewing".                                                                                  // 26862
 *                                                                                                                     // 26863
 * You can use a set of closed braces (`{}`) as a placeholder for the number that you want substituted                 // 26864
 * into pluralized strings. In the previous example, Angular will replace `{}` with                                    // 26865
 * <span ng-non-bindable>`{{personCount}}`</span>. The closed braces `{}` is a placeholder                             // 26866
 * for <span ng-non-bindable>{{numberExpression}}</span>.                                                              // 26867
 *                                                                                                                     // 26868
 * If no rule is defined for a category, then an empty string is displayed and a warning is generated.                 // 26869
 * Note that some locales define more categories than `one` and `other`. For example, fr-fr defines `few` and `many`.  // 26870
 *                                                                                                                     // 26871
 * # Configuring ngPluralize with offset                                                                               // 26872
 * The `offset` attribute allows further customization of pluralized text, which can result in                         // 26873
 * a better user experience. For example, instead of the message "4 people are viewing this document",                 // 26874
 * you might display "John, Kate and 2 others are viewing this document".                                              // 26875
 * The offset attribute allows you to offset a number by any desired value.                                            // 26876
 * Let's take a look at an example:                                                                                    // 26877
 *                                                                                                                     // 26878
 * ```html                                                                                                             // 26879
 * <ng-pluralize count="personCount" offset=2                                                                          // 26880
 *               when="{'0': 'Nobody is viewing.',                                                                     // 26881
 *                      '1': '{{person1}} is viewing.',                                                                // 26882
 *                      '2': '{{person1}} and {{person2}} are viewing.',                                               // 26883
 *                      'one': '{{person1}}, {{person2}} and one other person are viewing.',                           // 26884
 *                      'other': '{{person1}}, {{person2}} and {} other people are viewing.'}">                        // 26885
 * </ng-pluralize>                                                                                                     // 26886
 * ```                                                                                                                 // 26887
 *                                                                                                                     // 26888
 * Notice that we are still using two plural categories(one, other), but we added                                      // 26889
 * three explicit number rules 0, 1 and 2.                                                                             // 26890
 * When one person, perhaps John, views the document, "John is viewing" will be shown.                                 // 26891
 * When three people view the document, no explicit number rule is found, so                                           // 26892
 * an offset of 2 is taken off 3, and Angular uses 1 to decide the plural category.                                    // 26893
 * In this case, plural category 'one' is matched and "John, Mary and one other person are viewing"                    // 26894
 * is shown.                                                                                                           // 26895
 *                                                                                                                     // 26896
 * Note that when you specify offsets, you must provide explicit number rules for                                      // 26897
 * numbers from 0 up to and including the offset. If you use an offset of 3, for example,                              // 26898
 * you must provide explicit number rules for 0, 1, 2 and 3. You must also provide plural strings for                  // 26899
 * plural categories "one" and "other".                                                                                // 26900
 *                                                                                                                     // 26901
 * @param {string|expression} count The variable to be bound to.                                                       // 26902
 * @param {string} when The mapping between plural category to its corresponding strings.                              // 26903
 * @param {number=} offset Offset to deduct from the total number.                                                     // 26904
 *                                                                                                                     // 26905
 * @example                                                                                                            // 26906
    <example module="pluralizeExample">                                                                                // 26907
      <file name="index.html">                                                                                         // 26908
        <script>                                                                                                       // 26909
          angular.module('pluralizeExample', [])                                                                       // 26910
            .controller('ExampleController', ['$scope', function($scope) {                                             // 26911
              $scope.person1 = 'Igor';                                                                                 // 26912
              $scope.person2 = 'Misko';                                                                                // 26913
              $scope.personCount = 1;                                                                                  // 26914
            }]);                                                                                                       // 26915
        </script>                                                                                                      // 26916
        <div ng-controller="ExampleController">                                                                        // 26917
          <label>Person 1:<input type="text" ng-model="person1" value="Igor" /></label><br/>                           // 26918
          <label>Person 2:<input type="text" ng-model="person2" value="Misko" /></label><br/>                          // 26919
          <label>Number of People:<input type="text" ng-model="personCount" value="1" /></label><br/>                  // 26920
                                                                                                                       // 26921
          <!--- Example with simple pluralization rules for en locale --->                                             // 26922
          Without Offset:                                                                                              // 26923
          <ng-pluralize count="personCount"                                                                            // 26924
                        when="{'0': 'Nobody is viewing.',                                                              // 26925
                               'one': '1 person is viewing.',                                                          // 26926
                               'other': '{} people are viewing.'}">                                                    // 26927
          </ng-pluralize><br>                                                                                          // 26928
                                                                                                                       // 26929
          <!--- Example with offset --->                                                                               // 26930
          With Offset(2):                                                                                              // 26931
          <ng-pluralize count="personCount" offset=2                                                                   // 26932
                        when="{'0': 'Nobody is viewing.',                                                              // 26933
                               '1': '{{person1}} is viewing.',                                                         // 26934
                               '2': '{{person1}} and {{person2}} are viewing.',                                        // 26935
                               'one': '{{person1}}, {{person2}} and one other person are viewing.',                    // 26936
                               'other': '{{person1}}, {{person2}} and {} other people are viewing.'}">                 // 26937
          </ng-pluralize>                                                                                              // 26938
        </div>                                                                                                         // 26939
      </file>                                                                                                          // 26940
      <file name="protractor.js" type="protractor">                                                                    // 26941
        it('should show correct pluralized string', function() {                                                       // 26942
          var withoutOffset = element.all(by.css('ng-pluralize')).get(0);                                              // 26943
          var withOffset = element.all(by.css('ng-pluralize')).get(1);                                                 // 26944
          var countInput = element(by.model('personCount'));                                                           // 26945
                                                                                                                       // 26946
          expect(withoutOffset.getText()).toEqual('1 person is viewing.');                                             // 26947
          expect(withOffset.getText()).toEqual('Igor is viewing.');                                                    // 26948
                                                                                                                       // 26949
          countInput.clear();                                                                                          // 26950
          countInput.sendKeys('0');                                                                                    // 26951
                                                                                                                       // 26952
          expect(withoutOffset.getText()).toEqual('Nobody is viewing.');                                               // 26953
          expect(withOffset.getText()).toEqual('Nobody is viewing.');                                                  // 26954
                                                                                                                       // 26955
          countInput.clear();                                                                                          // 26956
          countInput.sendKeys('2');                                                                                    // 26957
                                                                                                                       // 26958
          expect(withoutOffset.getText()).toEqual('2 people are viewing.');                                            // 26959
          expect(withOffset.getText()).toEqual('Igor and Misko are viewing.');                                         // 26960
                                                                                                                       // 26961
          countInput.clear();                                                                                          // 26962
          countInput.sendKeys('3');                                                                                    // 26963
                                                                                                                       // 26964
          expect(withoutOffset.getText()).toEqual('3 people are viewing.');                                            // 26965
          expect(withOffset.getText()).toEqual('Igor, Misko and one other person are viewing.');                       // 26966
                                                                                                                       // 26967
          countInput.clear();                                                                                          // 26968
          countInput.sendKeys('4');                                                                                    // 26969
                                                                                                                       // 26970
          expect(withoutOffset.getText()).toEqual('4 people are viewing.');                                            // 26971
          expect(withOffset.getText()).toEqual('Igor, Misko and 2 other people are viewing.');                         // 26972
        });                                                                                                            // 26973
        it('should show data-bound names', function() {                                                                // 26974
          var withOffset = element.all(by.css('ng-pluralize')).get(1);                                                 // 26975
          var personCount = element(by.model('personCount'));                                                          // 26976
          var person1 = element(by.model('person1'));                                                                  // 26977
          var person2 = element(by.model('person2'));                                                                  // 26978
          personCount.clear();                                                                                         // 26979
          personCount.sendKeys('4');                                                                                   // 26980
          person1.clear();                                                                                             // 26981
          person1.sendKeys('Di');                                                                                      // 26982
          person2.clear();                                                                                             // 26983
          person2.sendKeys('Vojta');                                                                                   // 26984
          expect(withOffset.getText()).toEqual('Di, Vojta and 2 other people are viewing.');                           // 26985
        });                                                                                                            // 26986
      </file>                                                                                                          // 26987
    </example>                                                                                                         // 26988
 */                                                                                                                    // 26989
var ngPluralizeDirective = ['$locale', '$interpolate', '$log', function($locale, $interpolate, $log) {                 // 26990
  var BRACE = /{}/g,                                                                                                   // 26991
      IS_WHEN = /^when(Minus)?(.+)$/;                                                                                  // 26992
                                                                                                                       // 26993
  return {                                                                                                             // 26994
    link: function(scope, element, attr) {                                                                             // 26995
      var numberExp = attr.count,                                                                                      // 26996
          whenExp = attr.$attr.when && element.attr(attr.$attr.when), // we have {{}} in attrs                         // 26997
          offset = attr.offset || 0,                                                                                   // 26998
          whens = scope.$eval(whenExp) || {},                                                                          // 26999
          whensExpFns = {},                                                                                            // 27000
          startSymbol = $interpolate.startSymbol(),                                                                    // 27001
          endSymbol = $interpolate.endSymbol(),                                                                        // 27002
          braceReplacement = startSymbol + numberExp + '-' + offset + endSymbol,                                       // 27003
          watchRemover = angular.noop,                                                                                 // 27004
          lastCount;                                                                                                   // 27005
                                                                                                                       // 27006
      forEach(attr, function(expression, attributeName) {                                                              // 27007
        var tmpMatch = IS_WHEN.exec(attributeName);                                                                    // 27008
        if (tmpMatch) {                                                                                                // 27009
          var whenKey = (tmpMatch[1] ? '-' : '') + lowercase(tmpMatch[2]);                                             // 27010
          whens[whenKey] = element.attr(attr.$attr[attributeName]);                                                    // 27011
        }                                                                                                              // 27012
      });                                                                                                              // 27013
      forEach(whens, function(expression, key) {                                                                       // 27014
        whensExpFns[key] = $interpolate(expression.replace(BRACE, braceReplacement));                                  // 27015
                                                                                                                       // 27016
      });                                                                                                              // 27017
                                                                                                                       // 27018
      scope.$watch(numberExp, function ngPluralizeWatchAction(newVal) {                                                // 27019
        var count = parseFloat(newVal);                                                                                // 27020
        var countIsNaN = isNaN(count);                                                                                 // 27021
                                                                                                                       // 27022
        if (!countIsNaN && !(count in whens)) {                                                                        // 27023
          // If an explicit number rule such as 1, 2, 3... is defined, just use it.                                    // 27024
          // Otherwise, check it against pluralization rules in $locale service.                                       // 27025
          count = $locale.pluralCat(count - offset);                                                                   // 27026
        }                                                                                                              // 27027
                                                                                                                       // 27028
        // If both `count` and `lastCount` are NaN, we don't need to re-register a watch.                              // 27029
        // In JS `NaN !== NaN`, so we have to exlicitly check.                                                         // 27030
        if ((count !== lastCount) && !(countIsNaN && isNumber(lastCount) && isNaN(lastCount))) {                       // 27031
          watchRemover();                                                                                              // 27032
          var whenExpFn = whensExpFns[count];                                                                          // 27033
          if (isUndefined(whenExpFn)) {                                                                                // 27034
            if (newVal != null) {                                                                                      // 27035
              $log.debug("ngPluralize: no rule defined for '" + count + "' in " + whenExp);                            // 27036
            }                                                                                                          // 27037
            watchRemover = noop;                                                                                       // 27038
            updateElementText();                                                                                       // 27039
          } else {                                                                                                     // 27040
            watchRemover = scope.$watch(whenExpFn, updateElementText);                                                 // 27041
          }                                                                                                            // 27042
          lastCount = count;                                                                                           // 27043
        }                                                                                                              // 27044
      });                                                                                                              // 27045
                                                                                                                       // 27046
      function updateElementText(newText) {                                                                            // 27047
        element.text(newText || '');                                                                                   // 27048
      }                                                                                                                // 27049
    }                                                                                                                  // 27050
  };                                                                                                                   // 27051
}];                                                                                                                    // 27052
                                                                                                                       // 27053
/**                                                                                                                    // 27054
 * @ngdoc directive                                                                                                    // 27055
 * @name ngRepeat                                                                                                      // 27056
 * @multiElement                                                                                                       // 27057
 *                                                                                                                     // 27058
 * @description                                                                                                        // 27059
 * The `ngRepeat` directive instantiates a template once per item from a collection. Each template                     // 27060
 * instance gets its own scope, where the given loop variable is set to the current collection item,                   // 27061
 * and `$index` is set to the item index or key.                                                                       // 27062
 *                                                                                                                     // 27063
 * Special properties are exposed on the local scope of each template instance, including:                             // 27064
 *                                                                                                                     // 27065
 * | Variable  | Type            | Details                                                                     |       // 27066
 * |-----------|-----------------|-----------------------------------------------------------------------------|       // 27067
 * | `$index`  | {@type number}  | iterator offset of the repeated element (0..length-1)                       |       // 27068
 * | `$first`  | {@type boolean} | true if the repeated element is first in the iterator.                      |       // 27069
 * | `$middle` | {@type boolean} | true if the repeated element is between the first and last in the iterator. |       // 27070
 * | `$last`   | {@type boolean} | true if the repeated element is last in the iterator.                       |       // 27071
 * | `$even`   | {@type boolean} | true if the iterator position `$index` is even (otherwise false).           |       // 27072
 * | `$odd`    | {@type boolean} | true if the iterator position `$index` is odd (otherwise false).            |       // 27073
 *                                                                                                                     // 27074
 * <div class="alert alert-info">                                                                                      // 27075
 *   Creating aliases for these properties is possible with {@link ng.directive:ngInit `ngInit`}.                      // 27076
 *   This may be useful when, for instance, nesting ngRepeats.                                                         // 27077
 * </div>                                                                                                              // 27078
 *                                                                                                                     // 27079
 *                                                                                                                     // 27080
 * # Iterating over object properties                                                                                  // 27081
 *                                                                                                                     // 27082
 * It is possible to get `ngRepeat` to iterate over the properties of an object using the following                    // 27083
 * syntax:                                                                                                             // 27084
 *                                                                                                                     // 27085
 * ```js                                                                                                               // 27086
 * <div ng-repeat="(key, value) in myObj"> ... </div>                                                                  // 27087
 * ```                                                                                                                 // 27088
 *                                                                                                                     // 27089
 * You need to be aware that the JavaScript specification does not define the order of keys                            // 27090
 * returned for an object. (To mitigate this in Angular 1.3 the `ngRepeat` directive                                   // 27091
 * used to sort the keys alphabetically.)                                                                              // 27092
 *                                                                                                                     // 27093
 * Version 1.4 removed the alphabetic sorting. We now rely on the order returned by the browser                        // 27094
 * when running `for key in myObj`. It seems that browsers generally follow the strategy of providing                  // 27095
 * keys in the order in which they were defined, although there are exceptions when keys are deleted                   // 27096
 * and reinstated. See the [MDN page on `delete` for more info](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/delete#Cross-browser_notes).
 *                                                                                                                     // 27098
 * If this is not desired, the recommended workaround is to convert your object into an array                          // 27099
 * that is sorted into the order that you prefer before providing it to `ngRepeat`.  You could                         // 27100
 * do this with a filter such as [toArrayFilter](http://ngmodules.org/modules/angular-toArrayFilter)                   // 27101
 * or implement a `$watch` on the object yourself.                                                                     // 27102
 *                                                                                                                     // 27103
 *                                                                                                                     // 27104
 * # Tracking and Duplicates                                                                                           // 27105
 *                                                                                                                     // 27106
 * `ngRepeat` uses {@link $rootScope.Scope#$watchCollection $watchCollection} to detect changes in                     // 27107
 * the collection. When a change happens, ngRepeat then makes the corresponding changes to the DOM:                    // 27108
 *                                                                                                                     // 27109
 * * When an item is added, a new instance of the template is added to the DOM.                                        // 27110
 * * When an item is removed, its template instance is removed from the DOM.                                           // 27111
 * * When items are reordered, their respective templates are reordered in the DOM.                                    // 27112
 *                                                                                                                     // 27113
 * To minimize creation of DOM elements, `ngRepeat` uses a function                                                    // 27114
 * to "keep track" of all items in the collection and their corresponding DOM elements.                                // 27115
 * For example, if an item is added to the collection, ngRepeat will know that all other items                         // 27116
 * already have DOM elements, and will not re-render them.                                                             // 27117
 *                                                                                                                     // 27118
 * The default tracking function (which tracks items by their identity) does not allow                                 // 27119
 * duplicate items in arrays. This is because when there are duplicates, it is not possible                            // 27120
 * to maintain a one-to-one mapping between collection items and DOM elements.                                         // 27121
 *                                                                                                                     // 27122
 * If you do need to repeat duplicate items, you can substitute the default tracking behavior                          // 27123
 * with your own using the `track by` expression.                                                                      // 27124
 *                                                                                                                     // 27125
 * For example, you may track items by the index of each item in the collection, using the                             // 27126
 * special scope property `$index`:                                                                                    // 27127
 * ```html                                                                                                             // 27128
 *    <div ng-repeat="n in [42, 42, 43, 43] track by $index">                                                          // 27129
 *      {{n}}                                                                                                          // 27130
 *    </div>                                                                                                           // 27131
 * ```                                                                                                                 // 27132
 *                                                                                                                     // 27133
 * You may also use arbitrary expressions in `track by`, including references to custom functions                      // 27134
 * on the scope:                                                                                                       // 27135
 * ```html                                                                                                             // 27136
 *    <div ng-repeat="n in [42, 42, 43, 43] track by myTrackingFunction(n)">                                           // 27137
 *      {{n}}                                                                                                          // 27138
 *    </div>                                                                                                           // 27139
 * ```                                                                                                                 // 27140
 *                                                                                                                     // 27141
 * <div class="alert alert-success">                                                                                   // 27142
 * If you are working with objects that have an identifier property, you should track                                  // 27143
 * by the identifier instead of the whole object. Should you reload your data later, `ngRepeat`                        // 27144
 * will not have to rebuild the DOM elements for items it has already rendered, even if the                            // 27145
 * JavaScript objects in the collection have been substituted for new ones. For large collections,                     // 27146
 * this signifincantly improves rendering performance. If you don't have a unique identifier,                          // 27147
 * `track by $index` can also provide a performance boost.                                                             // 27148
 * </div>                                                                                                              // 27149
 * ```html                                                                                                             // 27150
 *    <div ng-repeat="model in collection track by model.id">                                                          // 27151
 *      {{model.name}}                                                                                                 // 27152
 *    </div>                                                                                                           // 27153
 * ```                                                                                                                 // 27154
 *                                                                                                                     // 27155
 * When no `track by` expression is provided, it is equivalent to tracking by the built-in                             // 27156
 * `$id` function, which tracks items by their identity:                                                               // 27157
 * ```html                                                                                                             // 27158
 *    <div ng-repeat="obj in collection track by $id(obj)">                                                            // 27159
 *      {{obj.prop}}                                                                                                   // 27160
 *    </div>                                                                                                           // 27161
 * ```                                                                                                                 // 27162
 *                                                                                                                     // 27163
 * <div class="alert alert-warning">                                                                                   // 27164
 * **Note:** `track by` must always be the last expression:                                                            // 27165
 * </div>                                                                                                              // 27166
 * ```                                                                                                                 // 27167
 * <div ng-repeat="model in collection | orderBy: 'id' as filtered_result track by model.id">                          // 27168
 *     {{model.name}}                                                                                                  // 27169
 * </div>                                                                                                              // 27170
 * ```                                                                                                                 // 27171
 *                                                                                                                     // 27172
 * # Special repeat start and end points                                                                               // 27173
 * To repeat a series of elements instead of just one parent element, ngRepeat (as well as other ng directives) supports extending
 * the range of the repeater by defining explicit start and end points by using **ng-repeat-start** and **ng-repeat-end** respectively.
 * The **ng-repeat-start** directive works the same as **ng-repeat**, but will repeat all the HTML code (including the tag it's defined on)
 * up to and including the ending HTML tag where **ng-repeat-end** is placed.                                          // 27177
 *                                                                                                                     // 27178
 * The example below makes use of this feature:                                                                        // 27179
 * ```html                                                                                                             // 27180
 *   <header ng-repeat-start="item in items">                                                                          // 27181
 *     Header {{ item }}                                                                                               // 27182
 *   </header>                                                                                                         // 27183
 *   <div class="body">                                                                                                // 27184
 *     Body {{ item }}                                                                                                 // 27185
 *   </div>                                                                                                            // 27186
 *   <footer ng-repeat-end>                                                                                            // 27187
 *     Footer {{ item }}                                                                                               // 27188
 *   </footer>                                                                                                         // 27189
 * ```                                                                                                                 // 27190
 *                                                                                                                     // 27191
 * And with an input of {@type ['A','B']} for the items variable in the example above, the output will evaluate to:    // 27192
 * ```html                                                                                                             // 27193
 *   <header>                                                                                                          // 27194
 *     Header A                                                                                                        // 27195
 *   </header>                                                                                                         // 27196
 *   <div class="body">                                                                                                // 27197
 *     Body A                                                                                                          // 27198
 *   </div>                                                                                                            // 27199
 *   <footer>                                                                                                          // 27200
 *     Footer A                                                                                                        // 27201
 *   </footer>                                                                                                         // 27202
 *   <header>                                                                                                          // 27203
 *     Header B                                                                                                        // 27204
 *   </header>                                                                                                         // 27205
 *   <div class="body">                                                                                                // 27206
 *     Body B                                                                                                          // 27207
 *   </div>                                                                                                            // 27208
 *   <footer>                                                                                                          // 27209
 *     Footer B                                                                                                        // 27210
 *   </footer>                                                                                                         // 27211
 * ```                                                                                                                 // 27212
 *                                                                                                                     // 27213
 * The custom start and end points for ngRepeat also support all other HTML directive syntax flavors provided in AngularJS (such
 * as **data-ng-repeat-start**, **x-ng-repeat-start** and **ng:repeat-start**).                                        // 27215
 *                                                                                                                     // 27216
 * @animations                                                                                                         // 27217
 * **.enter** - when a new item is added to the list or when an item is revealed after a filter                        // 27218
 *                                                                                                                     // 27219
 * **.leave** - when an item is removed from the list or when an item is filtered out                                  // 27220
 *                                                                                                                     // 27221
 * **.move** - when an adjacent item is filtered out causing a reorder or when the item contents are reordered         // 27222
 *                                                                                                                     // 27223
 * @element ANY                                                                                                        // 27224
 * @scope                                                                                                              // 27225
 * @priority 1000                                                                                                      // 27226
 * @param {repeat_expression} ngRepeat The expression indicating how to enumerate a collection. These                  // 27227
 *   formats are currently supported:                                                                                  // 27228
 *                                                                                                                     // 27229
 *   * `variable in expression` – where variable is the user defined loop variable and `expression`                    // 27230
 *     is a scope expression giving the collection to enumerate.                                                       // 27231
 *                                                                                                                     // 27232
 *     For example: `album in artist.albums`.                                                                          // 27233
 *                                                                                                                     // 27234
 *   * `(key, value) in expression` – where `key` and `value` can be any user defined identifiers,                     // 27235
 *     and `expression` is the scope expression giving the collection to enumerate.                                    // 27236
 *                                                                                                                     // 27237
 *     For example: `(name, age) in {'adam':10, 'amalie':12}`.                                                         // 27238
 *                                                                                                                     // 27239
 *   * `variable in expression track by tracking_expression` – You can also provide an optional tracking expression    // 27240
 *     which can be used to associate the objects in the collection with the DOM elements. If no tracking expression   // 27241
 *     is specified, ng-repeat associates elements by identity. It is an error to have                                 // 27242
 *     more than one tracking expression value resolve to the same key. (This would mean that two distinct objects are
 *     mapped to the same DOM element, which is not possible.)                                                         // 27244
 *                                                                                                                     // 27245
 *     Note that the tracking expression must come last, after any filters, and the alias expression.                  // 27246
 *                                                                                                                     // 27247
 *     For example: `item in items` is equivalent to `item in items track by $id(item)`. This implies that the DOM elements
 *     will be associated by item identity in the array.                                                               // 27249
 *                                                                                                                     // 27250
 *     For example: `item in items track by $id(item)`. A built in `$id()` function can be used to assign a unique     // 27251
 *     `$$hashKey` property to each item in the array. This property is then used as a key to associated DOM elements  // 27252
 *     with the corresponding item in the array by identity. Moving the same object in array would move the DOM        // 27253
 *     element in the same way in the DOM.                                                                             // 27254
 *                                                                                                                     // 27255
 *     For example: `item in items track by item.id` is a typical pattern when the items come from the database. In this
 *     case the object identity does not matter. Two objects are considered equivalent as long as their `id`           // 27257
 *     property is same.                                                                                               // 27258
 *                                                                                                                     // 27259
 *     For example: `item in items | filter:searchText track by item.id` is a pattern that might be used to apply a filter
 *     to items in conjunction with a tracking expression.                                                             // 27261
 *                                                                                                                     // 27262
 *   * `variable in expression as alias_expression` – You can also provide an optional alias expression which will then store the
 *     intermediate results of the repeater after the filters have been applied. Typically this is used to render a special message
 *     when a filter is active on the repeater, but the filtered result set is empty.                                  // 27265
 *                                                                                                                     // 27266
 *     For example: `item in items | filter:x as results` will store the fragment of the repeated items as `results`, but only after
 *     the items have been processed through the filter.                                                               // 27268
 *                                                                                                                     // 27269
 *     Please note that `as [variable name] is not an operator but rather a part of ngRepeat micro-syntax so it can be used only at the end
 *     (and not as operator, inside an expression).                                                                    // 27271
 *                                                                                                                     // 27272
 *     For example: `item in items | filter : x | orderBy : order | limitTo : limit as results` .                      // 27273
 *                                                                                                                     // 27274
 * @example                                                                                                            // 27275
 * This example initializes the scope to a list of names and                                                           // 27276
 * then uses `ngRepeat` to display every person:                                                                       // 27277
  <example module="ngAnimate" deps="angular-animate.js" animations="true">                                             // 27278
    <file name="index.html">                                                                                           // 27279
      <div ng-init="friends = [                                                                                        // 27280
        {name:'John', age:25, gender:'boy'},                                                                           // 27281
        {name:'Jessie', age:30, gender:'girl'},                                                                        // 27282
        {name:'Johanna', age:28, gender:'girl'},                                                                       // 27283
        {name:'Joy', age:15, gender:'girl'},                                                                           // 27284
        {name:'Mary', age:28, gender:'girl'},                                                                          // 27285
        {name:'Peter', age:95, gender:'boy'},                                                                          // 27286
        {name:'Sebastian', age:50, gender:'boy'},                                                                      // 27287
        {name:'Erika', age:27, gender:'girl'},                                                                         // 27288
        {name:'Patrick', age:40, gender:'boy'},                                                                        // 27289
        {name:'Samantha', age:60, gender:'girl'}                                                                       // 27290
      ]">                                                                                                              // 27291
        I have {{friends.length}} friends. They are:                                                                   // 27292
        <input type="search" ng-model="q" placeholder="filter friends..." aria-label="filter friends" />               // 27293
        <ul class="example-animate-container">                                                                         // 27294
          <li class="animate-repeat" ng-repeat="friend in friends | filter:q as results">                              // 27295
            [{{$index + 1}}] {{friend.name}} who is {{friend.age}} years old.                                          // 27296
          </li>                                                                                                        // 27297
          <li class="animate-repeat" ng-if="results.length == 0">                                                      // 27298
            <strong>No results found...</strong>                                                                       // 27299
          </li>                                                                                                        // 27300
        </ul>                                                                                                          // 27301
      </div>                                                                                                           // 27302
    </file>                                                                                                            // 27303
    <file name="animations.css">                                                                                       // 27304
      .example-animate-container {                                                                                     // 27305
        background:white;                                                                                              // 27306
        border:1px solid black;                                                                                        // 27307
        list-style:none;                                                                                               // 27308
        margin:0;                                                                                                      // 27309
        padding:0 10px;                                                                                                // 27310
      }                                                                                                                // 27311
                                                                                                                       // 27312
      .animate-repeat {                                                                                                // 27313
        line-height:40px;                                                                                              // 27314
        list-style:none;                                                                                               // 27315
        box-sizing:border-box;                                                                                         // 27316
      }                                                                                                                // 27317
                                                                                                                       // 27318
      .animate-repeat.ng-move,                                                                                         // 27319
      .animate-repeat.ng-enter,                                                                                        // 27320
      .animate-repeat.ng-leave {                                                                                       // 27321
        transition:all linear 0.5s;                                                                                    // 27322
      }                                                                                                                // 27323
                                                                                                                       // 27324
      .animate-repeat.ng-leave.ng-leave-active,                                                                        // 27325
      .animate-repeat.ng-move,                                                                                         // 27326
      .animate-repeat.ng-enter {                                                                                       // 27327
        opacity:0;                                                                                                     // 27328
        max-height:0;                                                                                                  // 27329
      }                                                                                                                // 27330
                                                                                                                       // 27331
      .animate-repeat.ng-leave,                                                                                        // 27332
      .animate-repeat.ng-move.ng-move-active,                                                                          // 27333
      .animate-repeat.ng-enter.ng-enter-active {                                                                       // 27334
        opacity:1;                                                                                                     // 27335
        max-height:40px;                                                                                               // 27336
      }                                                                                                                // 27337
    </file>                                                                                                            // 27338
    <file name="protractor.js" type="protractor">                                                                      // 27339
      var friends = element.all(by.repeater('friend in friends'));                                                     // 27340
                                                                                                                       // 27341
      it('should render initial data set', function() {                                                                // 27342
        expect(friends.count()).toBe(10);                                                                              // 27343
        expect(friends.get(0).getText()).toEqual('[1] John who is 25 years old.');                                     // 27344
        expect(friends.get(1).getText()).toEqual('[2] Jessie who is 30 years old.');                                   // 27345
        expect(friends.last().getText()).toEqual('[10] Samantha who is 60 years old.');                                // 27346
        expect(element(by.binding('friends.length')).getText())                                                        // 27347
            .toMatch("I have 10 friends. They are:");                                                                  // 27348
      });                                                                                                              // 27349
                                                                                                                       // 27350
       it('should update repeater when filter predicate changes', function() {                                         // 27351
         expect(friends.count()).toBe(10);                                                                             // 27352
                                                                                                                       // 27353
         element(by.model('q')).sendKeys('ma');                                                                        // 27354
                                                                                                                       // 27355
         expect(friends.count()).toBe(2);                                                                              // 27356
         expect(friends.get(0).getText()).toEqual('[1] Mary who is 28 years old.');                                    // 27357
         expect(friends.last().getText()).toEqual('[2] Samantha who is 60 years old.');                                // 27358
       });                                                                                                             // 27359
      </file>                                                                                                          // 27360
    </example>                                                                                                         // 27361
 */                                                                                                                    // 27362
var ngRepeatDirective = ['$parse', '$animate', function($parse, $animate) {                                            // 27363
  var NG_REMOVED = '$$NG_REMOVED';                                                                                     // 27364
  var ngRepeatMinErr = minErr('ngRepeat');                                                                             // 27365
                                                                                                                       // 27366
  var updateScope = function(scope, index, valueIdentifier, value, keyIdentifier, key, arrayLength) {                  // 27367
    // TODO(perf): generate setters to shave off ~40ms or 1-1.5%                                                       // 27368
    scope[valueIdentifier] = value;                                                                                    // 27369
    if (keyIdentifier) scope[keyIdentifier] = key;                                                                     // 27370
    scope.$index = index;                                                                                              // 27371
    scope.$first = (index === 0);                                                                                      // 27372
    scope.$last = (index === (arrayLength - 1));                                                                       // 27373
    scope.$middle = !(scope.$first || scope.$last);                                                                    // 27374
    // jshint bitwise: false                                                                                           // 27375
    scope.$odd = !(scope.$even = (index&1) === 0);                                                                     // 27376
    // jshint bitwise: true                                                                                            // 27377
  };                                                                                                                   // 27378
                                                                                                                       // 27379
  var getBlockStart = function(block) {                                                                                // 27380
    return block.clone[0];                                                                                             // 27381
  };                                                                                                                   // 27382
                                                                                                                       // 27383
  var getBlockEnd = function(block) {                                                                                  // 27384
    return block.clone[block.clone.length - 1];                                                                        // 27385
  };                                                                                                                   // 27386
                                                                                                                       // 27387
                                                                                                                       // 27388
  return {                                                                                                             // 27389
    restrict: 'A',                                                                                                     // 27390
    multiElement: true,                                                                                                // 27391
    transclude: 'element',                                                                                             // 27392
    priority: 1000,                                                                                                    // 27393
    terminal: true,                                                                                                    // 27394
    $$tlb: true,                                                                                                       // 27395
    compile: function ngRepeatCompile($element, $attr) {                                                               // 27396
      var expression = $attr.ngRepeat;                                                                                 // 27397
      var ngRepeatEndComment = document.createComment(' end ngRepeat: ' + expression + ' ');                           // 27398
                                                                                                                       // 27399
      var match = expression.match(/^\s*([\s\S]+?)\s+in\s+([\s\S]+?)(?:\s+as\s+([\s\S]+?))?(?:\s+track\s+by\s+([\s\S]+?))?\s*$/);
                                                                                                                       // 27401
      if (!match) {                                                                                                    // 27402
        throw ngRepeatMinErr('iexp', "Expected expression in form of '_item_ in _collection_[ track by _id_]' but got '{0}'.",
            expression);                                                                                               // 27404
      }                                                                                                                // 27405
                                                                                                                       // 27406
      var lhs = match[1];                                                                                              // 27407
      var rhs = match[2];                                                                                              // 27408
      var aliasAs = match[3];                                                                                          // 27409
      var trackByExp = match[4];                                                                                       // 27410
                                                                                                                       // 27411
      match = lhs.match(/^(?:(\s*[\$\w]+)|\(\s*([\$\w]+)\s*,\s*([\$\w]+)\s*\))$/);                                     // 27412
                                                                                                                       // 27413
      if (!match) {                                                                                                    // 27414
        throw ngRepeatMinErr('iidexp', "'_item_' in '_item_ in _collection_' should be an identifier or '(_key_, _value_)' expression, but got '{0}'.",
            lhs);                                                                                                      // 27416
      }                                                                                                                // 27417
      var valueIdentifier = match[3] || match[1];                                                                      // 27418
      var keyIdentifier = match[2];                                                                                    // 27419
                                                                                                                       // 27420
      if (aliasAs && (!/^[$a-zA-Z_][$a-zA-Z0-9_]*$/.test(aliasAs) ||                                                   // 27421
          /^(null|undefined|this|\$index|\$first|\$middle|\$last|\$even|\$odd|\$parent|\$root|\$id)$/.test(aliasAs))) {
        throw ngRepeatMinErr('badident', "alias '{0}' is invalid --- must be a valid JS identifier which is not a reserved name.",
          aliasAs);                                                                                                    // 27424
      }                                                                                                                // 27425
                                                                                                                       // 27426
      var trackByExpGetter, trackByIdExpFn, trackByIdArrayFn, trackByIdObjFn;                                          // 27427
      var hashFnLocals = {$id: hashKey};                                                                               // 27428
                                                                                                                       // 27429
      if (trackByExp) {                                                                                                // 27430
        trackByExpGetter = $parse(trackByExp);                                                                         // 27431
      } else {                                                                                                         // 27432
        trackByIdArrayFn = function(key, value) {                                                                      // 27433
          return hashKey(value);                                                                                       // 27434
        };                                                                                                             // 27435
        trackByIdObjFn = function(key) {                                                                               // 27436
          return key;                                                                                                  // 27437
        };                                                                                                             // 27438
      }                                                                                                                // 27439
                                                                                                                       // 27440
      return function ngRepeatLink($scope, $element, $attr, ctrl, $transclude) {                                       // 27441
                                                                                                                       // 27442
        if (trackByExpGetter) {                                                                                        // 27443
          trackByIdExpFn = function(key, value, index) {                                                               // 27444
            // assign key, value, and $index to the locals so that they can be used in hash functions                  // 27445
            if (keyIdentifier) hashFnLocals[keyIdentifier] = key;                                                      // 27446
            hashFnLocals[valueIdentifier] = value;                                                                     // 27447
            hashFnLocals.$index = index;                                                                               // 27448
            return trackByExpGetter($scope, hashFnLocals);                                                             // 27449
          };                                                                                                           // 27450
        }                                                                                                              // 27451
                                                                                                                       // 27452
        // Store a list of elements from previous run. This is a hash where key is the item from the                   // 27453
        // iterator, and the value is objects with following properties.                                               // 27454
        //   - scope: bound scope                                                                                      // 27455
        //   - element: previous element.                                                                              // 27456
        //   - index: position                                                                                         // 27457
        //                                                                                                             // 27458
        // We are using no-proto object so that we don't need to guard against inherited props via                     // 27459
        // hasOwnProperty.                                                                                             // 27460
        var lastBlockMap = createMap();                                                                                // 27461
                                                                                                                       // 27462
        //watch props                                                                                                  // 27463
        $scope.$watchCollection(rhs, function ngRepeatAction(collection) {                                             // 27464
          var index, length,                                                                                           // 27465
              previousNode = $element[0],     // node that cloned nodes should be inserted after                       // 27466
                                              // initialized to the comment node anchor                                // 27467
              nextNode,                                                                                                // 27468
              // Same as lastBlockMap but it has the current state. It will become the                                 // 27469
              // lastBlockMap on the next iteration.                                                                   // 27470
              nextBlockMap = createMap(),                                                                              // 27471
              collectionLength,                                                                                        // 27472
              key, value, // key/value of iteration                                                                    // 27473
              trackById,                                                                                               // 27474
              trackByIdFn,                                                                                             // 27475
              collectionKeys,                                                                                          // 27476
              block,       // last object information {scope, element, id}                                             // 27477
              nextBlockOrder,                                                                                          // 27478
              elementsToRemove;                                                                                        // 27479
                                                                                                                       // 27480
          if (aliasAs) {                                                                                               // 27481
            $scope[aliasAs] = collection;                                                                              // 27482
          }                                                                                                            // 27483
                                                                                                                       // 27484
          if (isArrayLike(collection)) {                                                                               // 27485
            collectionKeys = collection;                                                                               // 27486
            trackByIdFn = trackByIdExpFn || trackByIdArrayFn;                                                          // 27487
          } else {                                                                                                     // 27488
            trackByIdFn = trackByIdExpFn || trackByIdObjFn;                                                            // 27489
            // if object, extract keys, in enumeration order, unsorted                                                 // 27490
            collectionKeys = [];                                                                                       // 27491
            for (var itemKey in collection) {                                                                          // 27492
              if (hasOwnProperty.call(collection, itemKey) && itemKey.charAt(0) !== '$') {                             // 27493
                collectionKeys.push(itemKey);                                                                          // 27494
              }                                                                                                        // 27495
            }                                                                                                          // 27496
          }                                                                                                            // 27497
                                                                                                                       // 27498
          collectionLength = collectionKeys.length;                                                                    // 27499
          nextBlockOrder = new Array(collectionLength);                                                                // 27500
                                                                                                                       // 27501
          // locate existing items                                                                                     // 27502
          for (index = 0; index < collectionLength; index++) {                                                         // 27503
            key = (collection === collectionKeys) ? index : collectionKeys[index];                                     // 27504
            value = collection[key];                                                                                   // 27505
            trackById = trackByIdFn(key, value, index);                                                                // 27506
            if (lastBlockMap[trackById]) {                                                                             // 27507
              // found previously seen block                                                                           // 27508
              block = lastBlockMap[trackById];                                                                         // 27509
              delete lastBlockMap[trackById];                                                                          // 27510
              nextBlockMap[trackById] = block;                                                                         // 27511
              nextBlockOrder[index] = block;                                                                           // 27512
            } else if (nextBlockMap[trackById]) {                                                                      // 27513
              // if collision detected. restore lastBlockMap and throw an error                                        // 27514
              forEach(nextBlockOrder, function(block) {                                                                // 27515
                if (block && block.scope) lastBlockMap[block.id] = block;                                              // 27516
              });                                                                                                      // 27517
              throw ngRepeatMinErr('dupes',                                                                            // 27518
                  "Duplicates in a repeater are not allowed. Use 'track by' expression to specify unique keys. Repeater: {0}, Duplicate key: {1}, Duplicate value: {2}",
                  expression, trackById, value);                                                                       // 27520
            } else {                                                                                                   // 27521
              // new never before seen block                                                                           // 27522
              nextBlockOrder[index] = {id: trackById, scope: undefined, clone: undefined};                             // 27523
              nextBlockMap[trackById] = true;                                                                          // 27524
            }                                                                                                          // 27525
          }                                                                                                            // 27526
                                                                                                                       // 27527
          // remove leftover items                                                                                     // 27528
          for (var blockKey in lastBlockMap) {                                                                         // 27529
            block = lastBlockMap[blockKey];                                                                            // 27530
            elementsToRemove = getBlockNodes(block.clone);                                                             // 27531
            $animate.leave(elementsToRemove);                                                                          // 27532
            if (elementsToRemove[0].parentNode) {                                                                      // 27533
              // if the element was not removed yet because of pending animation, mark it as deleted                   // 27534
              // so that we can ignore it later                                                                        // 27535
              for (index = 0, length = elementsToRemove.length; index < length; index++) {                             // 27536
                elementsToRemove[index][NG_REMOVED] = true;                                                            // 27537
              }                                                                                                        // 27538
            }                                                                                                          // 27539
            block.scope.$destroy();                                                                                    // 27540
          }                                                                                                            // 27541
                                                                                                                       // 27542
          // we are not using forEach for perf reasons (trying to avoid #call)                                         // 27543
          for (index = 0; index < collectionLength; index++) {                                                         // 27544
            key = (collection === collectionKeys) ? index : collectionKeys[index];                                     // 27545
            value = collection[key];                                                                                   // 27546
            block = nextBlockOrder[index];                                                                             // 27547
                                                                                                                       // 27548
            if (block.scope) {                                                                                         // 27549
              // if we have already seen this object, then we need to reuse the                                        // 27550
              // associated scope/element                                                                              // 27551
                                                                                                                       // 27552
              nextNode = previousNode;                                                                                 // 27553
                                                                                                                       // 27554
              // skip nodes that are already pending removal via leave animation                                       // 27555
              do {                                                                                                     // 27556
                nextNode = nextNode.nextSibling;                                                                       // 27557
              } while (nextNode && nextNode[NG_REMOVED]);                                                              // 27558
                                                                                                                       // 27559
              if (getBlockStart(block) != nextNode) {                                                                  // 27560
                // existing item which got moved                                                                       // 27561
                $animate.move(getBlockNodes(block.clone), null, jqLite(previousNode));                                 // 27562
              }                                                                                                        // 27563
              previousNode = getBlockEnd(block);                                                                       // 27564
              updateScope(block.scope, index, valueIdentifier, value, keyIdentifier, key, collectionLength);           // 27565
            } else {                                                                                                   // 27566
              // new item which we don't know about                                                                    // 27567
              $transclude(function ngRepeatTransclude(clone, scope) {                                                  // 27568
                block.scope = scope;                                                                                   // 27569
                // http://jsperf.com/clone-vs-createcomment                                                            // 27570
                var endNode = ngRepeatEndComment.cloneNode(false);                                                     // 27571
                clone[clone.length++] = endNode;                                                                       // 27572
                                                                                                                       // 27573
                // TODO(perf): support naked previousNode in `enter` to avoid creation of jqLite wrapper?              // 27574
                $animate.enter(clone, null, jqLite(previousNode));                                                     // 27575
                previousNode = endNode;                                                                                // 27576
                // Note: We only need the first/last node of the cloned nodes.                                         // 27577
                // However, we need to keep the reference to the jqlite wrapper as it might be changed later           // 27578
                // by a directive with templateUrl when its template arrives.                                          // 27579
                block.clone = clone;                                                                                   // 27580
                nextBlockMap[block.id] = block;                                                                        // 27581
                updateScope(block.scope, index, valueIdentifier, value, keyIdentifier, key, collectionLength);         // 27582
              });                                                                                                      // 27583
            }                                                                                                          // 27584
          }                                                                                                            // 27585
          lastBlockMap = nextBlockMap;                                                                                 // 27586
        });                                                                                                            // 27587
      };                                                                                                               // 27588
    }                                                                                                                  // 27589
  };                                                                                                                   // 27590
}];                                                                                                                    // 27591
                                                                                                                       // 27592
var NG_HIDE_CLASS = 'ng-hide';                                                                                         // 27593
var NG_HIDE_IN_PROGRESS_CLASS = 'ng-hide-animate';                                                                     // 27594
/**                                                                                                                    // 27595
 * @ngdoc directive                                                                                                    // 27596
 * @name ngShow                                                                                                        // 27597
 * @multiElement                                                                                                       // 27598
 *                                                                                                                     // 27599
 * @description                                                                                                        // 27600
 * The `ngShow` directive shows or hides the given HTML element based on the expression                                // 27601
 * provided to the `ngShow` attribute. The element is shown or hidden by removing or adding                            // 27602
 * the `.ng-hide` CSS class onto the element. The `.ng-hide` CSS class is predefined                                   // 27603
 * in AngularJS and sets the display style to none (using an !important flag).                                         // 27604
 * For CSP mode please add `angular-csp.css` to your html file (see {@link ng.directive:ngCsp ngCsp}).                 // 27605
 *                                                                                                                     // 27606
 * ```html                                                                                                             // 27607
 * <!-- when $scope.myValue is truthy (element is visible) -->                                                         // 27608
 * <div ng-show="myValue"></div>                                                                                       // 27609
 *                                                                                                                     // 27610
 * <!-- when $scope.myValue is falsy (element is hidden) -->                                                           // 27611
 * <div ng-show="myValue" class="ng-hide"></div>                                                                       // 27612
 * ```                                                                                                                 // 27613
 *                                                                                                                     // 27614
 * When the `ngShow` expression evaluates to a falsy value then the `.ng-hide` CSS class is added to the class         // 27615
 * attribute on the element causing it to become hidden. When truthy, the `.ng-hide` CSS class is removed              // 27616
 * from the element causing the element not to appear hidden.                                                          // 27617
 *                                                                                                                     // 27618
 * ## Why is !important used?                                                                                          // 27619
 *                                                                                                                     // 27620
 * You may be wondering why !important is used for the `.ng-hide` CSS class. This is because the `.ng-hide` selector   // 27621
 * can be easily overridden by heavier selectors. For example, something as simple                                     // 27622
 * as changing the display style on a HTML list item would make hidden elements appear visible.                        // 27623
 * This also becomes a bigger issue when dealing with CSS frameworks.                                                  // 27624
 *                                                                                                                     // 27625
 * By using !important, the show and hide behavior will work as expected despite any clash between CSS selector        // 27626
 * specificity (when !important isn't used with any conflicting styles). If a developer chooses to override the        // 27627
 * styling to change how to hide an element then it is just a matter of using !important in their own CSS code.        // 27628
 *                                                                                                                     // 27629
 * ### Overriding `.ng-hide`                                                                                           // 27630
 *                                                                                                                     // 27631
 * By default, the `.ng-hide` class will style the element with `display: none!important`. If you wish to change       // 27632
 * the hide behavior with ngShow/ngHide then this can be achieved by restating the styles for the `.ng-hide`           // 27633
 * class CSS. Note that the selector that needs to be used is actually `.ng-hide:not(.ng-hide-animate)` to cope        // 27634
 * with extra animation classes that can be added.                                                                     // 27635
 *                                                                                                                     // 27636
 * ```css                                                                                                              // 27637
 * .ng-hide:not(.ng-hide-animate) {                                                                                    // 27638
 *   /&#42; this is just another form of hiding an element &#42;/                                                      // 27639
 *   display: block!important;                                                                                         // 27640
 *   position: absolute;                                                                                               // 27641
 *   top: -9999px;                                                                                                     // 27642
 *   left: -9999px;                                                                                                    // 27643
 * }                                                                                                                   // 27644
 * ```                                                                                                                 // 27645
 *                                                                                                                     // 27646
 * By default you don't need to override in CSS anything and the animations will work around the display style.        // 27647
 *                                                                                                                     // 27648
 * ## A note about animations with `ngShow`                                                                            // 27649
 *                                                                                                                     // 27650
 * Animations in ngShow/ngHide work with the show and hide events that are triggered when the directive expression     // 27651
 * is true and false. This system works like the animation system present with ngClass except that                     // 27652
 * you must also include the !important flag to override the display property                                          // 27653
 * so that you can perform an animation when the element is hidden during the time of the animation.                   // 27654
 *                                                                                                                     // 27655
 * ```css                                                                                                              // 27656
 * //                                                                                                                  // 27657
 * //a working example can be found at the bottom of this page                                                         // 27658
 * //                                                                                                                  // 27659
 * .my-element.ng-hide-add, .my-element.ng-hide-remove {                                                               // 27660
 *   /&#42; this is required as of 1.3x to properly                                                                    // 27661
 *      apply all styling in a show/hide animation &#42;/                                                              // 27662
 *   transition: 0s linear all;                                                                                        // 27663
 * }                                                                                                                   // 27664
 *                                                                                                                     // 27665
 * .my-element.ng-hide-add-active,                                                                                     // 27666
 * .my-element.ng-hide-remove-active {                                                                                 // 27667
 *   /&#42; the transition is defined in the active class &#42;/                                                       // 27668
 *   transition: 1s linear all;                                                                                        // 27669
 * }                                                                                                                   // 27670
 *                                                                                                                     // 27671
 * .my-element.ng-hide-add { ... }                                                                                     // 27672
 * .my-element.ng-hide-add.ng-hide-add-active { ... }                                                                  // 27673
 * .my-element.ng-hide-remove { ... }                                                                                  // 27674
 * .my-element.ng-hide-remove.ng-hide-remove-active { ... }                                                            // 27675
 * ```                                                                                                                 // 27676
 *                                                                                                                     // 27677
 * Keep in mind that, as of AngularJS version 1.3.0-beta.11, there is no need to change the display                    // 27678
 * property to block during animation states--ngAnimate will handle the style toggling automatically for you.          // 27679
 *                                                                                                                     // 27680
 * @animations                                                                                                         // 27681
 * addClass: `.ng-hide` - happens after the `ngShow` expression evaluates to a truthy value and the just before contents are set to visible
 * removeClass: `.ng-hide` - happens after the `ngShow` expression evaluates to a non truthy value and just before the contents are set to hidden
 *                                                                                                                     // 27684
 * @element ANY                                                                                                        // 27685
 * @param {expression} ngShow If the {@link guide/expression expression} is truthy                                     // 27686
 *     then the element is shown or hidden respectively.                                                               // 27687
 *                                                                                                                     // 27688
 * @example                                                                                                            // 27689
  <example module="ngAnimate" deps="angular-animate.js" animations="true">                                             // 27690
    <file name="index.html">                                                                                           // 27691
      Click me: <input type="checkbox" ng-model="checked" aria-label="Toggle ngHide"><br/>                             // 27692
      <div>                                                                                                            // 27693
        Show:                                                                                                          // 27694
        <div class="check-element animate-show" ng-show="checked">                                                     // 27695
          <span class="glyphicon glyphicon-thumbs-up"></span> I show up when your checkbox is checked.                 // 27696
        </div>                                                                                                         // 27697
      </div>                                                                                                           // 27698
      <div>                                                                                                            // 27699
        Hide:                                                                                                          // 27700
        <div class="check-element animate-show" ng-hide="checked">                                                     // 27701
          <span class="glyphicon glyphicon-thumbs-down"></span> I hide when your checkbox is checked.                  // 27702
        </div>                                                                                                         // 27703
      </div>                                                                                                           // 27704
    </file>                                                                                                            // 27705
    <file name="glyphicons.css">                                                                                       // 27706
      @import url(../../components/bootstrap-3.1.1/css/bootstrap.css);                                                 // 27707
    </file>                                                                                                            // 27708
    <file name="animations.css">                                                                                       // 27709
      .animate-show {                                                                                                  // 27710
        line-height: 20px;                                                                                             // 27711
        opacity: 1;                                                                                                    // 27712
        padding: 10px;                                                                                                 // 27713
        border: 1px solid black;                                                                                       // 27714
        background: white;                                                                                             // 27715
      }                                                                                                                // 27716
                                                                                                                       // 27717
      .animate-show.ng-hide-add, .animate-show.ng-hide-remove {                                                        // 27718
        transition: all linear 0.5s;                                                                                   // 27719
      }                                                                                                                // 27720
                                                                                                                       // 27721
      .animate-show.ng-hide {                                                                                          // 27722
        line-height: 0;                                                                                                // 27723
        opacity: 0;                                                                                                    // 27724
        padding: 0 10px;                                                                                               // 27725
      }                                                                                                                // 27726
                                                                                                                       // 27727
      .check-element {                                                                                                 // 27728
        padding: 10px;                                                                                                 // 27729
        border: 1px solid black;                                                                                       // 27730
        background: white;                                                                                             // 27731
      }                                                                                                                // 27732
    </file>                                                                                                            // 27733
    <file name="protractor.js" type="protractor">                                                                      // 27734
      var thumbsUp = element(by.css('span.glyphicon-thumbs-up'));                                                      // 27735
      var thumbsDown = element(by.css('span.glyphicon-thumbs-down'));                                                  // 27736
                                                                                                                       // 27737
      it('should check ng-show / ng-hide', function() {                                                                // 27738
        expect(thumbsUp.isDisplayed()).toBeFalsy();                                                                    // 27739
        expect(thumbsDown.isDisplayed()).toBeTruthy();                                                                 // 27740
                                                                                                                       // 27741
        element(by.model('checked')).click();                                                                          // 27742
                                                                                                                       // 27743
        expect(thumbsUp.isDisplayed()).toBeTruthy();                                                                   // 27744
        expect(thumbsDown.isDisplayed()).toBeFalsy();                                                                  // 27745
      });                                                                                                              // 27746
    </file>                                                                                                            // 27747
  </example>                                                                                                           // 27748
 */                                                                                                                    // 27749
var ngShowDirective = ['$animate', function($animate) {                                                                // 27750
  return {                                                                                                             // 27751
    restrict: 'A',                                                                                                     // 27752
    multiElement: true,                                                                                                // 27753
    link: function(scope, element, attr) {                                                                             // 27754
      scope.$watch(attr.ngShow, function ngShowWatchAction(value) {                                                    // 27755
        // we're adding a temporary, animation-specific class for ng-hide since this way                               // 27756
        // we can control when the element is actually displayed on screen without having                              // 27757
        // to have a global/greedy CSS selector that breaks when other animations are run.                             // 27758
        // Read: https://github.com/angular/angular.js/issues/9103#issuecomment-58335845                               // 27759
        $animate[value ? 'removeClass' : 'addClass'](element, NG_HIDE_CLASS, {                                         // 27760
          tempClasses: NG_HIDE_IN_PROGRESS_CLASS                                                                       // 27761
        });                                                                                                            // 27762
      });                                                                                                              // 27763
    }                                                                                                                  // 27764
  };                                                                                                                   // 27765
}];                                                                                                                    // 27766
                                                                                                                       // 27767
                                                                                                                       // 27768
/**                                                                                                                    // 27769
 * @ngdoc directive                                                                                                    // 27770
 * @name ngHide                                                                                                        // 27771
 * @multiElement                                                                                                       // 27772
 *                                                                                                                     // 27773
 * @description                                                                                                        // 27774
 * The `ngHide` directive shows or hides the given HTML element based on the expression                                // 27775
 * provided to the `ngHide` attribute. The element is shown or hidden by removing or adding                            // 27776
 * the `ng-hide` CSS class onto the element. The `.ng-hide` CSS class is predefined                                    // 27777
 * in AngularJS and sets the display style to none (using an !important flag).                                         // 27778
 * For CSP mode please add `angular-csp.css` to your html file (see {@link ng.directive:ngCsp ngCsp}).                 // 27779
 *                                                                                                                     // 27780
 * ```html                                                                                                             // 27781
 * <!-- when $scope.myValue is truthy (element is hidden) -->                                                          // 27782
 * <div ng-hide="myValue" class="ng-hide"></div>                                                                       // 27783
 *                                                                                                                     // 27784
 * <!-- when $scope.myValue is falsy (element is visible) -->                                                          // 27785
 * <div ng-hide="myValue"></div>                                                                                       // 27786
 * ```                                                                                                                 // 27787
 *                                                                                                                     // 27788
 * When the `ngHide` expression evaluates to a truthy value then the `.ng-hide` CSS class is added to the class        // 27789
 * attribute on the element causing it to become hidden. When falsy, the `.ng-hide` CSS class is removed               // 27790
 * from the element causing the element not to appear hidden.                                                          // 27791
 *                                                                                                                     // 27792
 * ## Why is !important used?                                                                                          // 27793
 *                                                                                                                     // 27794
 * You may be wondering why !important is used for the `.ng-hide` CSS class. This is because the `.ng-hide` selector   // 27795
 * can be easily overridden by heavier selectors. For example, something as simple                                     // 27796
 * as changing the display style on a HTML list item would make hidden elements appear visible.                        // 27797
 * This also becomes a bigger issue when dealing with CSS frameworks.                                                  // 27798
 *                                                                                                                     // 27799
 * By using !important, the show and hide behavior will work as expected despite any clash between CSS selector        // 27800
 * specificity (when !important isn't used with any conflicting styles). If a developer chooses to override the        // 27801
 * styling to change how to hide an element then it is just a matter of using !important in their own CSS code.        // 27802
 *                                                                                                                     // 27803
 * ### Overriding `.ng-hide`                                                                                           // 27804
 *                                                                                                                     // 27805
 * By default, the `.ng-hide` class will style the element with `display: none!important`. If you wish to change       // 27806
 * the hide behavior with ngShow/ngHide then this can be achieved by restating the styles for the `.ng-hide`           // 27807
 * class in CSS:                                                                                                       // 27808
 *                                                                                                                     // 27809
 * ```css                                                                                                              // 27810
 * .ng-hide {                                                                                                          // 27811
 *   /&#42; this is just another form of hiding an element &#42;/                                                      // 27812
 *   display: block!important;                                                                                         // 27813
 *   position: absolute;                                                                                               // 27814
 *   top: -9999px;                                                                                                     // 27815
 *   left: -9999px;                                                                                                    // 27816
 * }                                                                                                                   // 27817
 * ```                                                                                                                 // 27818
 *                                                                                                                     // 27819
 * By default you don't need to override in CSS anything and the animations will work around the display style.        // 27820
 *                                                                                                                     // 27821
 * ## A note about animations with `ngHide`                                                                            // 27822
 *                                                                                                                     // 27823
 * Animations in ngShow/ngHide work with the show and hide events that are triggered when the directive expression     // 27824
 * is true and false. This system works like the animation system present with ngClass, except that the `.ng-hide`     // 27825
 * CSS class is added and removed for you instead of your own CSS class.                                               // 27826
 *                                                                                                                     // 27827
 * ```css                                                                                                              // 27828
 * //                                                                                                                  // 27829
 * //a working example can be found at the bottom of this page                                                         // 27830
 * //                                                                                                                  // 27831
 * .my-element.ng-hide-add, .my-element.ng-hide-remove {                                                               // 27832
 *   transition: 0.5s linear all;                                                                                      // 27833
 * }                                                                                                                   // 27834
 *                                                                                                                     // 27835
 * .my-element.ng-hide-add { ... }                                                                                     // 27836
 * .my-element.ng-hide-add.ng-hide-add-active { ... }                                                                  // 27837
 * .my-element.ng-hide-remove { ... }                                                                                  // 27838
 * .my-element.ng-hide-remove.ng-hide-remove-active { ... }                                                            // 27839
 * ```                                                                                                                 // 27840
 *                                                                                                                     // 27841
 * Keep in mind that, as of AngularJS version 1.3.0-beta.11, there is no need to change the display                    // 27842
 * property to block during animation states--ngAnimate will handle the style toggling automatically for you.          // 27843
 *                                                                                                                     // 27844
 * @animations                                                                                                         // 27845
 * removeClass: `.ng-hide` - happens after the `ngHide` expression evaluates to a truthy value and just before the contents are set to hidden
 * addClass: `.ng-hide` - happens after the `ngHide` expression evaluates to a non truthy value and just before the contents are set to visible
 *                                                                                                                     // 27848
 * @element ANY                                                                                                        // 27849
 * @param {expression} ngHide If the {@link guide/expression expression} is truthy then                                // 27850
 *     the element is shown or hidden respectively.                                                                    // 27851
 *                                                                                                                     // 27852
 * @example                                                                                                            // 27853
  <example module="ngAnimate" deps="angular-animate.js" animations="true">                                             // 27854
    <file name="index.html">                                                                                           // 27855
      Click me: <input type="checkbox" ng-model="checked" aria-label="Toggle ngShow"><br/>                             // 27856
      <div>                                                                                                            // 27857
        Show:                                                                                                          // 27858
        <div class="check-element animate-hide" ng-show="checked">                                                     // 27859
          <span class="glyphicon glyphicon-thumbs-up"></span> I show up when your checkbox is checked.                 // 27860
        </div>                                                                                                         // 27861
      </div>                                                                                                           // 27862
      <div>                                                                                                            // 27863
        Hide:                                                                                                          // 27864
        <div class="check-element animate-hide" ng-hide="checked">                                                     // 27865
          <span class="glyphicon glyphicon-thumbs-down"></span> I hide when your checkbox is checked.                  // 27866
        </div>                                                                                                         // 27867
      </div>                                                                                                           // 27868
    </file>                                                                                                            // 27869
    <file name="glyphicons.css">                                                                                       // 27870
      @import url(../../components/bootstrap-3.1.1/css/bootstrap.css);                                                 // 27871
    </file>                                                                                                            // 27872
    <file name="animations.css">                                                                                       // 27873
      .animate-hide {                                                                                                  // 27874
        transition: all linear 0.5s;                                                                                   // 27875
        line-height: 20px;                                                                                             // 27876
        opacity: 1;                                                                                                    // 27877
        padding: 10px;                                                                                                 // 27878
        border: 1px solid black;                                                                                       // 27879
        background: white;                                                                                             // 27880
      }                                                                                                                // 27881
                                                                                                                       // 27882
      .animate-hide.ng-hide {                                                                                          // 27883
        line-height: 0;                                                                                                // 27884
        opacity: 0;                                                                                                    // 27885
        padding: 0 10px;                                                                                               // 27886
      }                                                                                                                // 27887
                                                                                                                       // 27888
      .check-element {                                                                                                 // 27889
        padding: 10px;                                                                                                 // 27890
        border: 1px solid black;                                                                                       // 27891
        background: white;                                                                                             // 27892
      }                                                                                                                // 27893
    </file>                                                                                                            // 27894
    <file name="protractor.js" type="protractor">                                                                      // 27895
      var thumbsUp = element(by.css('span.glyphicon-thumbs-up'));                                                      // 27896
      var thumbsDown = element(by.css('span.glyphicon-thumbs-down'));                                                  // 27897
                                                                                                                       // 27898
      it('should check ng-show / ng-hide', function() {                                                                // 27899
        expect(thumbsUp.isDisplayed()).toBeFalsy();                                                                    // 27900
        expect(thumbsDown.isDisplayed()).toBeTruthy();                                                                 // 27901
                                                                                                                       // 27902
        element(by.model('checked')).click();                                                                          // 27903
                                                                                                                       // 27904
        expect(thumbsUp.isDisplayed()).toBeTruthy();                                                                   // 27905
        expect(thumbsDown.isDisplayed()).toBeFalsy();                                                                  // 27906
      });                                                                                                              // 27907
    </file>                                                                                                            // 27908
  </example>                                                                                                           // 27909
 */                                                                                                                    // 27910
var ngHideDirective = ['$animate', function($animate) {                                                                // 27911
  return {                                                                                                             // 27912
    restrict: 'A',                                                                                                     // 27913
    multiElement: true,                                                                                                // 27914
    link: function(scope, element, attr) {                                                                             // 27915
      scope.$watch(attr.ngHide, function ngHideWatchAction(value) {                                                    // 27916
        // The comment inside of the ngShowDirective explains why we add and                                           // 27917
        // remove a temporary class for the show/hide animation                                                        // 27918
        $animate[value ? 'addClass' : 'removeClass'](element,NG_HIDE_CLASS, {                                          // 27919
          tempClasses: NG_HIDE_IN_PROGRESS_CLASS                                                                       // 27920
        });                                                                                                            // 27921
      });                                                                                                              // 27922
    }                                                                                                                  // 27923
  };                                                                                                                   // 27924
}];                                                                                                                    // 27925
                                                                                                                       // 27926
/**                                                                                                                    // 27927
 * @ngdoc directive                                                                                                    // 27928
 * @name ngStyle                                                                                                       // 27929
 * @restrict AC                                                                                                        // 27930
 *                                                                                                                     // 27931
 * @description                                                                                                        // 27932
 * The `ngStyle` directive allows you to set CSS style on an HTML element conditionally.                               // 27933
 *                                                                                                                     // 27934
 * @element ANY                                                                                                        // 27935
 * @param {expression} ngStyle                                                                                         // 27936
 *                                                                                                                     // 27937
 * {@link guide/expression Expression} which evals to an                                                               // 27938
 * object whose keys are CSS style names and values are corresponding values for those CSS                             // 27939
 * keys.                                                                                                               // 27940
 *                                                                                                                     // 27941
 * Since some CSS style names are not valid keys for an object, they must be quoted.                                   // 27942
 * See the 'background-color' style in the example below.                                                              // 27943
 *                                                                                                                     // 27944
 * @example                                                                                                            // 27945
   <example>                                                                                                           // 27946
     <file name="index.html">                                                                                          // 27947
        <input type="button" value="set color" ng-click="myStyle={color:'red'}">                                       // 27948
        <input type="button" value="set background" ng-click="myStyle={'background-color':'blue'}">                    // 27949
        <input type="button" value="clear" ng-click="myStyle={}">                                                      // 27950
        <br/>                                                                                                          // 27951
        <span ng-style="myStyle">Sample Text</span>                                                                    // 27952
        <pre>myStyle={{myStyle}}</pre>                                                                                 // 27953
     </file>                                                                                                           // 27954
     <file name="style.css">                                                                                           // 27955
       span {                                                                                                          // 27956
         color: black;                                                                                                 // 27957
       }                                                                                                               // 27958
     </file>                                                                                                           // 27959
     <file name="protractor.js" type="protractor">                                                                     // 27960
       var colorSpan = element(by.css('span'));                                                                        // 27961
                                                                                                                       // 27962
       it('should check ng-style', function() {                                                                        // 27963
         expect(colorSpan.getCssValue('color')).toBe('rgba(0, 0, 0, 1)');                                              // 27964
         element(by.css('input[value=\'set color\']')).click();                                                        // 27965
         expect(colorSpan.getCssValue('color')).toBe('rgba(255, 0, 0, 1)');                                            // 27966
         element(by.css('input[value=clear]')).click();                                                                // 27967
         expect(colorSpan.getCssValue('color')).toBe('rgba(0, 0, 0, 1)');                                              // 27968
       });                                                                                                             // 27969
     </file>                                                                                                           // 27970
   </example>                                                                                                          // 27971
 */                                                                                                                    // 27972
var ngStyleDirective = ngDirective(function(scope, element, attr) {                                                    // 27973
  scope.$watch(attr.ngStyle, function ngStyleWatchAction(newStyles, oldStyles) {                                       // 27974
    if (oldStyles && (newStyles !== oldStyles)) {                                                                      // 27975
      forEach(oldStyles, function(val, style) { element.css(style, '');});                                             // 27976
    }                                                                                                                  // 27977
    if (newStyles) element.css(newStyles);                                                                             // 27978
  }, true);                                                                                                            // 27979
});                                                                                                                    // 27980
                                                                                                                       // 27981
/**                                                                                                                    // 27982
 * @ngdoc directive                                                                                                    // 27983
 * @name ngSwitch                                                                                                      // 27984
 * @restrict EA                                                                                                        // 27985
 *                                                                                                                     // 27986
 * @description                                                                                                        // 27987
 * The `ngSwitch` directive is used to conditionally swap DOM structure on your template based on a scope expression.  // 27988
 * Elements within `ngSwitch` but without `ngSwitchWhen` or `ngSwitchDefault` directives will be preserved at the location
 * as specified in the template.                                                                                       // 27990
 *                                                                                                                     // 27991
 * The directive itself works similar to ngInclude, however, instead of downloading template code (or loading it       // 27992
 * from the template cache), `ngSwitch` simply chooses one of the nested elements and makes it visible based on which element
 * matches the value obtained from the evaluated expression. In other words, you define a container element            // 27994
 * (where you place the directive), place an expression on the **`on="..."` attribute**                                // 27995
 * (or the **`ng-switch="..."` attribute**), define any inner elements inside of the directive and place               // 27996
 * a when attribute per element. The when attribute is used to inform ngSwitch which element to display when the on    // 27997
 * expression is evaluated. If a matching expression is not found via a when attribute then an element with the default
 * attribute is displayed.                                                                                             // 27999
 *                                                                                                                     // 28000
 * <div class="alert alert-info">                                                                                      // 28001
 * Be aware that the attribute values to match against cannot be expressions. They are interpreted                     // 28002
 * as literal string values to match against.                                                                          // 28003
 * For example, **`ng-switch-when="someVal"`** will match against the string `"someVal"` not against the               // 28004
 * value of the expression `$scope.someVal`.                                                                           // 28005
 * </div>                                                                                                              // 28006
                                                                                                                       // 28007
 * @animations                                                                                                         // 28008
 * enter - happens after the ngSwitch contents change and the matched child element is placed inside the container     // 28009
 * leave - happens just after the ngSwitch contents change and just before the former contents are removed from the DOM
 *                                                                                                                     // 28011
 * @usage                                                                                                              // 28012
 *                                                                                                                     // 28013
 * ```                                                                                                                 // 28014
 * <ANY ng-switch="expression">                                                                                        // 28015
 *   <ANY ng-switch-when="matchValue1">...</ANY>                                                                       // 28016
 *   <ANY ng-switch-when="matchValue2">...</ANY>                                                                       // 28017
 *   <ANY ng-switch-default>...</ANY>                                                                                  // 28018
 * </ANY>                                                                                                              // 28019
 * ```                                                                                                                 // 28020
 *                                                                                                                     // 28021
 *                                                                                                                     // 28022
 * @scope                                                                                                              // 28023
 * @priority 1200                                                                                                      // 28024
 * @param {*} ngSwitch|on expression to match against <code>ng-switch-when</code>.                                     // 28025
 * On child elements add:                                                                                              // 28026
 *                                                                                                                     // 28027
 * * `ngSwitchWhen`: the case statement to match against. If match then this                                           // 28028
 *   case will be displayed. If the same match appears multiple times, all the                                         // 28029
 *   elements will be displayed.                                                                                       // 28030
 * * `ngSwitchDefault`: the default case when no other case match. If there                                            // 28031
 *   are multiple default cases, all of them will be displayed when no other                                           // 28032
 *   case match.                                                                                                       // 28033
 *                                                                                                                     // 28034
 *                                                                                                                     // 28035
 * @example                                                                                                            // 28036
  <example module="switchExample" deps="angular-animate.js" animations="true">                                         // 28037
    <file name="index.html">                                                                                           // 28038
      <div ng-controller="ExampleController">                                                                          // 28039
        <select ng-model="selection" ng-options="item for item in items">                                              // 28040
        </select>                                                                                                      // 28041
        <code>selection={{selection}}</code>                                                                           // 28042
        <hr/>                                                                                                          // 28043
        <div class="animate-switch-container"                                                                          // 28044
          ng-switch on="selection">                                                                                    // 28045
            <div class="animate-switch" ng-switch-when="settings">Settings Div</div>                                   // 28046
            <div class="animate-switch" ng-switch-when="home">Home Span</div>                                          // 28047
            <div class="animate-switch" ng-switch-default>default</div>                                                // 28048
        </div>                                                                                                         // 28049
      </div>                                                                                                           // 28050
    </file>                                                                                                            // 28051
    <file name="script.js">                                                                                            // 28052
      angular.module('switchExample', ['ngAnimate'])                                                                   // 28053
        .controller('ExampleController', ['$scope', function($scope) {                                                 // 28054
          $scope.items = ['settings', 'home', 'other'];                                                                // 28055
          $scope.selection = $scope.items[0];                                                                          // 28056
        }]);                                                                                                           // 28057
    </file>                                                                                                            // 28058
    <file name="animations.css">                                                                                       // 28059
      .animate-switch-container {                                                                                      // 28060
        position:relative;                                                                                             // 28061
        background:white;                                                                                              // 28062
        border:1px solid black;                                                                                        // 28063
        height:40px;                                                                                                   // 28064
        overflow:hidden;                                                                                               // 28065
      }                                                                                                                // 28066
                                                                                                                       // 28067
      .animate-switch {                                                                                                // 28068
        padding:10px;                                                                                                  // 28069
      }                                                                                                                // 28070
                                                                                                                       // 28071
      .animate-switch.ng-animate {                                                                                     // 28072
        transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;                                                  // 28073
                                                                                                                       // 28074
        position:absolute;                                                                                             // 28075
        top:0;                                                                                                         // 28076
        left:0;                                                                                                        // 28077
        right:0;                                                                                                       // 28078
        bottom:0;                                                                                                      // 28079
      }                                                                                                                // 28080
                                                                                                                       // 28081
      .animate-switch.ng-leave.ng-leave-active,                                                                        // 28082
      .animate-switch.ng-enter {                                                                                       // 28083
        top:-50px;                                                                                                     // 28084
      }                                                                                                                // 28085
      .animate-switch.ng-leave,                                                                                        // 28086
      .animate-switch.ng-enter.ng-enter-active {                                                                       // 28087
        top:0;                                                                                                         // 28088
      }                                                                                                                // 28089
    </file>                                                                                                            // 28090
    <file name="protractor.js" type="protractor">                                                                      // 28091
      var switchElem = element(by.css('[ng-switch]'));                                                                 // 28092
      var select = element(by.model('selection'));                                                                     // 28093
                                                                                                                       // 28094
      it('should start in settings', function() {                                                                      // 28095
        expect(switchElem.getText()).toMatch(/Settings Div/);                                                          // 28096
      });                                                                                                              // 28097
      it('should change to home', function() {                                                                         // 28098
        select.all(by.css('option')).get(1).click();                                                                   // 28099
        expect(switchElem.getText()).toMatch(/Home Span/);                                                             // 28100
      });                                                                                                              // 28101
      it('should select default', function() {                                                                         // 28102
        select.all(by.css('option')).get(2).click();                                                                   // 28103
        expect(switchElem.getText()).toMatch(/default/);                                                               // 28104
      });                                                                                                              // 28105
    </file>                                                                                                            // 28106
  </example>                                                                                                           // 28107
 */                                                                                                                    // 28108
var ngSwitchDirective = ['$animate', function($animate) {                                                              // 28109
  return {                                                                                                             // 28110
    require: 'ngSwitch',                                                                                               // 28111
                                                                                                                       // 28112
    // asks for $scope to fool the BC controller module                                                                // 28113
    controller: ['$scope', function ngSwitchController() {                                                             // 28114
     this.cases = {};                                                                                                  // 28115
    }],                                                                                                                // 28116
    link: function(scope, element, attr, ngSwitchController) {                                                         // 28117
      var watchExpr = attr.ngSwitch || attr.on,                                                                        // 28118
          selectedTranscludes = [],                                                                                    // 28119
          selectedElements = [],                                                                                       // 28120
          previousLeaveAnimations = [],                                                                                // 28121
          selectedScopes = [];                                                                                         // 28122
                                                                                                                       // 28123
      var spliceFactory = function(array, index) {                                                                     // 28124
          return function() { array.splice(index, 1); };                                                               // 28125
      };                                                                                                               // 28126
                                                                                                                       // 28127
      scope.$watch(watchExpr, function ngSwitchWatchAction(value) {                                                    // 28128
        var i, ii;                                                                                                     // 28129
        for (i = 0, ii = previousLeaveAnimations.length; i < ii; ++i) {                                                // 28130
          $animate.cancel(previousLeaveAnimations[i]);                                                                 // 28131
        }                                                                                                              // 28132
        previousLeaveAnimations.length = 0;                                                                            // 28133
                                                                                                                       // 28134
        for (i = 0, ii = selectedScopes.length; i < ii; ++i) {                                                         // 28135
          var selected = getBlockNodes(selectedElements[i].clone);                                                     // 28136
          selectedScopes[i].$destroy();                                                                                // 28137
          var promise = previousLeaveAnimations[i] = $animate.leave(selected);                                         // 28138
          promise.then(spliceFactory(previousLeaveAnimations, i));                                                     // 28139
        }                                                                                                              // 28140
                                                                                                                       // 28141
        selectedElements.length = 0;                                                                                   // 28142
        selectedScopes.length = 0;                                                                                     // 28143
                                                                                                                       // 28144
        if ((selectedTranscludes = ngSwitchController.cases['!' + value] || ngSwitchController.cases['?'])) {          // 28145
          forEach(selectedTranscludes, function(selectedTransclude) {                                                  // 28146
            selectedTransclude.transclude(function(caseElement, selectedScope) {                                       // 28147
              selectedScopes.push(selectedScope);                                                                      // 28148
              var anchor = selectedTransclude.element;                                                                 // 28149
              caseElement[caseElement.length++] = document.createComment(' end ngSwitchWhen: ');                       // 28150
              var block = { clone: caseElement };                                                                      // 28151
                                                                                                                       // 28152
              selectedElements.push(block);                                                                            // 28153
              $animate.enter(caseElement, anchor.parent(), anchor);                                                    // 28154
            });                                                                                                        // 28155
          });                                                                                                          // 28156
        }                                                                                                              // 28157
      });                                                                                                              // 28158
    }                                                                                                                  // 28159
  };                                                                                                                   // 28160
}];                                                                                                                    // 28161
                                                                                                                       // 28162
var ngSwitchWhenDirective = ngDirective({                                                                              // 28163
  transclude: 'element',                                                                                               // 28164
  priority: 1200,                                                                                                      // 28165
  require: '^ngSwitch',                                                                                                // 28166
  multiElement: true,                                                                                                  // 28167
  link: function(scope, element, attrs, ctrl, $transclude) {                                                           // 28168
    ctrl.cases['!' + attrs.ngSwitchWhen] = (ctrl.cases['!' + attrs.ngSwitchWhen] || []);                               // 28169
    ctrl.cases['!' + attrs.ngSwitchWhen].push({ transclude: $transclude, element: element });                          // 28170
  }                                                                                                                    // 28171
});                                                                                                                    // 28172
                                                                                                                       // 28173
var ngSwitchDefaultDirective = ngDirective({                                                                           // 28174
  transclude: 'element',                                                                                               // 28175
  priority: 1200,                                                                                                      // 28176
  require: '^ngSwitch',                                                                                                // 28177
  multiElement: true,                                                                                                  // 28178
  link: function(scope, element, attr, ctrl, $transclude) {                                                            // 28179
    ctrl.cases['?'] = (ctrl.cases['?'] || []);                                                                         // 28180
    ctrl.cases['?'].push({ transclude: $transclude, element: element });                                               // 28181
   }                                                                                                                   // 28182
});                                                                                                                    // 28183
                                                                                                                       // 28184
/**                                                                                                                    // 28185
 * @ngdoc directive                                                                                                    // 28186
 * @name ngTransclude                                                                                                  // 28187
 * @restrict EAC                                                                                                       // 28188
 *                                                                                                                     // 28189
 * @description                                                                                                        // 28190
 * Directive that marks the insertion point for the transcluded DOM of the nearest parent directive that uses transclusion.
 *                                                                                                                     // 28192
 * Any existing content of the element that this directive is placed on will be removed before the transcluded content is inserted.
 *                                                                                                                     // 28194
 * @element ANY                                                                                                        // 28195
 *                                                                                                                     // 28196
 * @example                                                                                                            // 28197
   <example module="transcludeExample">                                                                                // 28198
     <file name="index.html">                                                                                          // 28199
       <script>                                                                                                        // 28200
         angular.module('transcludeExample', [])                                                                       // 28201
          .directive('pane', function(){                                                                               // 28202
             return {                                                                                                  // 28203
               restrict: 'E',                                                                                          // 28204
               transclude: true,                                                                                       // 28205
               scope: { title:'@' },                                                                                   // 28206
               template: '<div style="border: 1px solid black;">' +                                                    // 28207
                           '<div style="background-color: gray">{{title}}</div>' +                                     // 28208
                           '<ng-transclude></ng-transclude>' +                                                         // 28209
                         '</div>'                                                                                      // 28210
             };                                                                                                        // 28211
         })                                                                                                            // 28212
         .controller('ExampleController', ['$scope', function($scope) {                                                // 28213
           $scope.title = 'Lorem Ipsum';                                                                               // 28214
           $scope.text = 'Neque porro quisquam est qui dolorem ipsum quia dolor...';                                   // 28215
         }]);                                                                                                          // 28216
       </script>                                                                                                       // 28217
       <div ng-controller="ExampleController">                                                                         // 28218
         <input ng-model="title" aria-label="title"> <br/>                                                             // 28219
         <textarea ng-model="text" aria-label="text"></textarea> <br/>                                                 // 28220
         <pane title="{{title}}">{{text}}</pane>                                                                       // 28221
       </div>                                                                                                          // 28222
     </file>                                                                                                           // 28223
     <file name="protractor.js" type="protractor">                                                                     // 28224
        it('should have transcluded', function() {                                                                     // 28225
          var titleElement = element(by.model('title'));                                                               // 28226
          titleElement.clear();                                                                                        // 28227
          titleElement.sendKeys('TITLE');                                                                              // 28228
          var textElement = element(by.model('text'));                                                                 // 28229
          textElement.clear();                                                                                         // 28230
          textElement.sendKeys('TEXT');                                                                                // 28231
          expect(element(by.binding('title')).getText()).toEqual('TITLE');                                             // 28232
          expect(element(by.binding('text')).getText()).toEqual('TEXT');                                               // 28233
        });                                                                                                            // 28234
     </file>                                                                                                           // 28235
   </example>                                                                                                          // 28236
 *                                                                                                                     // 28237
 */                                                                                                                    // 28238
var ngTranscludeDirective = ngDirective({                                                                              // 28239
  restrict: 'EAC',                                                                                                     // 28240
  link: function($scope, $element, $attrs, controller, $transclude) {                                                  // 28241
    if (!$transclude) {                                                                                                // 28242
      throw minErr('ngTransclude')('orphan',                                                                           // 28243
       'Illegal use of ngTransclude directive in the template! ' +                                                     // 28244
       'No parent directive that requires a transclusion found. ' +                                                    // 28245
       'Element: {0}',                                                                                                 // 28246
       startingTag($element));                                                                                         // 28247
    }                                                                                                                  // 28248
                                                                                                                       // 28249
    $transclude(function(clone) {                                                                                      // 28250
      $element.empty();                                                                                                // 28251
      $element.append(clone);                                                                                          // 28252
    });                                                                                                                // 28253
  }                                                                                                                    // 28254
});                                                                                                                    // 28255
                                                                                                                       // 28256
/**                                                                                                                    // 28257
 * @ngdoc directive                                                                                                    // 28258
 * @name script                                                                                                        // 28259
 * @restrict E                                                                                                         // 28260
 *                                                                                                                     // 28261
 * @description                                                                                                        // 28262
 * Load the content of a `<script>` element into {@link ng.$templateCache `$templateCache`}, so that the               // 28263
 * template can be used by {@link ng.directive:ngInclude `ngInclude`},                                                 // 28264
 * {@link ngRoute.directive:ngView `ngView`}, or {@link guide/directive directives}. The type of the                   // 28265
 * `<script>` element must be specified as `text/ng-template`, and a cache name for the template must be               // 28266
 * assigned through the element's `id`, which can then be used as a directive's `templateUrl`.                         // 28267
 *                                                                                                                     // 28268
 * @param {string} type Must be set to `'text/ng-template'`.                                                           // 28269
 * @param {string} id Cache name of the template.                                                                      // 28270
 *                                                                                                                     // 28271
 * @example                                                                                                            // 28272
  <example>                                                                                                            // 28273
    <file name="index.html">                                                                                           // 28274
      <script type="text/ng-template" id="/tpl.html">                                                                  // 28275
        Content of the template.                                                                                       // 28276
      </script>                                                                                                        // 28277
                                                                                                                       // 28278
      <a ng-click="currentTpl='/tpl.html'" id="tpl-link">Load inlined template</a>                                     // 28279
      <div id="tpl-content" ng-include src="currentTpl"></div>                                                         // 28280
    </file>                                                                                                            // 28281
    <file name="protractor.js" type="protractor">                                                                      // 28282
      it('should load template defined inside script tag', function() {                                                // 28283
        element(by.css('#tpl-link')).click();                                                                          // 28284
        expect(element(by.css('#tpl-content')).getText()).toMatch(/Content of the template/);                          // 28285
      });                                                                                                              // 28286
    </file>                                                                                                            // 28287
  </example>                                                                                                           // 28288
 */                                                                                                                    // 28289
var scriptDirective = ['$templateCache', function($templateCache) {                                                    // 28290
  return {                                                                                                             // 28291
    restrict: 'E',                                                                                                     // 28292
    terminal: true,                                                                                                    // 28293
    compile: function(element, attr) {                                                                                 // 28294
      if (attr.type == 'text/ng-template') {                                                                           // 28295
        var templateUrl = attr.id,                                                                                     // 28296
            text = element[0].text;                                                                                    // 28297
                                                                                                                       // 28298
        $templateCache.put(templateUrl, text);                                                                         // 28299
      }                                                                                                                // 28300
    }                                                                                                                  // 28301
  };                                                                                                                   // 28302
}];                                                                                                                    // 28303
                                                                                                                       // 28304
var noopNgModelController = { $setViewValue: noop, $render: noop };                                                    // 28305
                                                                                                                       // 28306
function chromeHack(optionElement) {                                                                                   // 28307
  // Workaround for https://code.google.com/p/chromium/issues/detail?id=381459                                         // 28308
  // Adding an <option selected="selected"> element to a <select required="required"> should                           // 28309
  // automatically select the new element                                                                              // 28310
  if (optionElement[0].hasAttribute('selected')) {                                                                     // 28311
    optionElement[0].selected = true;                                                                                  // 28312
  }                                                                                                                    // 28313
}                                                                                                                      // 28314
                                                                                                                       // 28315
/**                                                                                                                    // 28316
 * @ngdoc type                                                                                                         // 28317
 * @name  select.SelectController                                                                                      // 28318
 * @description                                                                                                        // 28319
 * The controller for the `<select>` directive. This provides support for reading                                      // 28320
 * and writing the selected value(s) of the control and also coordinates dynamically                                   // 28321
 * added `<option>` elements, perhaps by an `ngRepeat` directive.                                                      // 28322
 */                                                                                                                    // 28323
var SelectController =                                                                                                 // 28324
        ['$element', '$scope', '$attrs', function($element, $scope, $attrs) {                                          // 28325
                                                                                                                       // 28326
  var self = this,                                                                                                     // 28327
      optionsMap = new HashMap();                                                                                      // 28328
                                                                                                                       // 28329
  // If the ngModel doesn't get provided then provide a dummy noop version to prevent errors                           // 28330
  self.ngModelCtrl = noopNgModelController;                                                                            // 28331
                                                                                                                       // 28332
  // The "unknown" option is one that is prepended to the list if the viewValue                                        // 28333
  // does not match any of the options. When it is rendered the value of the unknown                                   // 28334
  // option is '? XXX ?' where XXX is the hashKey of the value that is not known.                                      // 28335
  //                                                                                                                   // 28336
  // We can't just jqLite('<option>') since jqLite is not smart enough                                                 // 28337
  // to create it in <select> and IE barfs otherwise.                                                                  // 28338
  self.unknownOption = jqLite(document.createElement('option'));                                                       // 28339
  self.renderUnknownOption = function(val) {                                                                           // 28340
    var unknownVal = '? ' + hashKey(val) + ' ?';                                                                       // 28341
    self.unknownOption.val(unknownVal);                                                                                // 28342
    $element.prepend(self.unknownOption);                                                                              // 28343
    $element.val(unknownVal);                                                                                          // 28344
  };                                                                                                                   // 28345
                                                                                                                       // 28346
  $scope.$on('$destroy', function() {                                                                                  // 28347
    // disable unknown option so that we don't do work when the whole select is being destroyed                        // 28348
    self.renderUnknownOption = noop;                                                                                   // 28349
  });                                                                                                                  // 28350
                                                                                                                       // 28351
  self.removeUnknownOption = function() {                                                                              // 28352
    if (self.unknownOption.parent()) self.unknownOption.remove();                                                      // 28353
  };                                                                                                                   // 28354
                                                                                                                       // 28355
                                                                                                                       // 28356
  // Read the value of the select control, the implementation of this changes depending                                // 28357
  // upon whether the select can have multiple values and whether ngOptions is at work.                                // 28358
  self.readValue = function readSingleValue() {                                                                        // 28359
    self.removeUnknownOption();                                                                                        // 28360
    return $element.val();                                                                                             // 28361
  };                                                                                                                   // 28362
                                                                                                                       // 28363
                                                                                                                       // 28364
  // Write the value to the select control, the implementation of this changes depending                               // 28365
  // upon whether the select can have multiple values and whether ngOptions is at work.                                // 28366
  self.writeValue = function writeSingleValue(value) {                                                                 // 28367
    if (self.hasOption(value)) {                                                                                       // 28368
      self.removeUnknownOption();                                                                                      // 28369
      $element.val(value);                                                                                             // 28370
      if (value === '') self.emptyOption.prop('selected', true); // to make IE9 happy                                  // 28371
    } else {                                                                                                           // 28372
      if (value == null && self.emptyOption) {                                                                         // 28373
        self.removeUnknownOption();                                                                                    // 28374
        $element.val('');                                                                                              // 28375
      } else {                                                                                                         // 28376
        self.renderUnknownOption(value);                                                                               // 28377
      }                                                                                                                // 28378
    }                                                                                                                  // 28379
  };                                                                                                                   // 28380
                                                                                                                       // 28381
                                                                                                                       // 28382
  // Tell the select control that an option, with the given value, has been added                                      // 28383
  self.addOption = function(value, element) {                                                                          // 28384
    assertNotHasOwnProperty(value, '"option value"');                                                                  // 28385
    if (value === '') {                                                                                                // 28386
      self.emptyOption = element;                                                                                      // 28387
    }                                                                                                                  // 28388
    var count = optionsMap.get(value) || 0;                                                                            // 28389
    optionsMap.put(value, count + 1);                                                                                  // 28390
    self.ngModelCtrl.$render();                                                                                        // 28391
    chromeHack(element);                                                                                               // 28392
  };                                                                                                                   // 28393
                                                                                                                       // 28394
  // Tell the select control that an option, with the given value, has been removed                                    // 28395
  self.removeOption = function(value) {                                                                                // 28396
    var count = optionsMap.get(value);                                                                                 // 28397
    if (count) {                                                                                                       // 28398
      if (count === 1) {                                                                                               // 28399
        optionsMap.remove(value);                                                                                      // 28400
        if (value === '') {                                                                                            // 28401
          self.emptyOption = undefined;                                                                                // 28402
        }                                                                                                              // 28403
      } else {                                                                                                         // 28404
        optionsMap.put(value, count - 1);                                                                              // 28405
      }                                                                                                                // 28406
    }                                                                                                                  // 28407
  };                                                                                                                   // 28408
                                                                                                                       // 28409
  // Check whether the select control has an option matching the given value                                           // 28410
  self.hasOption = function(value) {                                                                                   // 28411
    return !!optionsMap.get(value);                                                                                    // 28412
  };                                                                                                                   // 28413
                                                                                                                       // 28414
                                                                                                                       // 28415
  self.registerOption = function(optionScope, optionElement, optionAttrs, interpolateValueFn, interpolateTextFn) {     // 28416
                                                                                                                       // 28417
    if (interpolateValueFn) {                                                                                          // 28418
      // The value attribute is interpolated                                                                           // 28419
      var oldVal;                                                                                                      // 28420
      optionAttrs.$observe('value', function valueAttributeObserveAction(newVal) {                                     // 28421
        if (isDefined(oldVal)) {                                                                                       // 28422
          self.removeOption(oldVal);                                                                                   // 28423
        }                                                                                                              // 28424
        oldVal = newVal;                                                                                               // 28425
        self.addOption(newVal, optionElement);                                                                         // 28426
      });                                                                                                              // 28427
    } else if (interpolateTextFn) {                                                                                    // 28428
      // The text content is interpolated                                                                              // 28429
      optionScope.$watch(interpolateTextFn, function interpolateWatchAction(newVal, oldVal) {                          // 28430
        optionAttrs.$set('value', newVal);                                                                             // 28431
        if (oldVal !== newVal) {                                                                                       // 28432
          self.removeOption(oldVal);                                                                                   // 28433
        }                                                                                                              // 28434
        self.addOption(newVal, optionElement);                                                                         // 28435
      });                                                                                                              // 28436
    } else {                                                                                                           // 28437
      // The value attribute is static                                                                                 // 28438
      self.addOption(optionAttrs.value, optionElement);                                                                // 28439
    }                                                                                                                  // 28440
                                                                                                                       // 28441
    optionElement.on('$destroy', function() {                                                                          // 28442
      self.removeOption(optionAttrs.value);                                                                            // 28443
      self.ngModelCtrl.$render();                                                                                      // 28444
    });                                                                                                                // 28445
  };                                                                                                                   // 28446
}];                                                                                                                    // 28447
                                                                                                                       // 28448
/**                                                                                                                    // 28449
 * @ngdoc directive                                                                                                    // 28450
 * @name select                                                                                                        // 28451
 * @restrict E                                                                                                         // 28452
 *                                                                                                                     // 28453
 * @description                                                                                                        // 28454
 * HTML `SELECT` element with angular data-binding.                                                                    // 28455
 *                                                                                                                     // 28456
 * The `select` directive is used together with {@link ngModel `ngModel`} to provide data-binding                      // 28457
 * between the scope and the `<select>` control (including setting default values).                                    // 28458
 * Ìt also handles dynamic `<option>` elements, which can be added using the {@link ngRepeat `ngRepeat}` or            // 28459
 * {@link ngOptions `ngOptions`} directives.                                                                           // 28460
 *                                                                                                                     // 28461
 * When an item in the `<select>` menu is selected, the value of the selected option will be bound                     // 28462
 * to the model identified by the `ngModel` directive. With static or repeated options, this is                        // 28463
 * the content of the `value` attribute or the textContent of the `<option>`, if the value attribute is missing.       // 28464
 * If you want dynamic value attributes, you can use interpolation inside the value attribute.                         // 28465
 *                                                                                                                     // 28466
 * <div class="alert alert-warning">                                                                                   // 28467
 * Note that the value of a `select` directive used without `ngOptions` is always a string.                            // 28468
 * When the model needs to be bound to a non-string value, you must either explictly convert it                        // 28469
 * using a directive (see example below) or use `ngOptions` to specify the set of options.                             // 28470
 * This is because an option element can only be bound to string values at present.                                    // 28471
 * </div>                                                                                                              // 28472
 *                                                                                                                     // 28473
 * If the viewValue of `ngModel` does not match any of the options, then the control                                   // 28474
 * will automatically add an "unknown" option, which it then removes when the mismatch is resolved.                    // 28475
 *                                                                                                                     // 28476
 * Optionally, a single hard-coded `<option>` element, with the value set to an empty string, can                      // 28477
 * be nested into the `<select>` element. This element will then represent the `null` or "not selected"                // 28478
 * option. See example below for demonstration.                                                                        // 28479
 *                                                                                                                     // 28480
 * <div class="alert alert-info">                                                                                      // 28481
 * In many cases, `ngRepeat` can be used on `<option>` elements instead of {@link ng.directive:ngOptions               // 28482
 * ngOptions} to achieve a similar result. However, `ngOptions` provides some benefits, such as                        // 28483
 * more flexibility in how the `<select>`'s model is assigned via the `select` **`as`** part of the                    // 28484
 * comprehension expression, and additionally in reducing memory and increasing speed by not creating                  // 28485
 * a new scope for each repeated instance.                                                                             // 28486
 * </div>                                                                                                              // 28487
 *                                                                                                                     // 28488
 *                                                                                                                     // 28489
 * @param {string} ngModel Assignable angular expression to data-bind to.                                              // 28490
 * @param {string=} name Property name of the form under which the control is published.                               // 28491
 * @param {string=} multiple Allows multiple options to be selected. The selected values will be                       // 28492
 *     bound to the model as an array.                                                                                 // 28493
 * @param {string=} required Sets `required` validation error key if the value is not entered.                         // 28494
 * @param {string=} ngRequired Adds required attribute and required validation constraint to                           // 28495
 * the element when the ngRequired expression evaluates to true. Use ngRequired instead of required                    // 28496
 * when you want to data-bind to the required attribute.                                                               // 28497
 * @param {string=} ngChange Angular expression to be executed when selected option(s) changes due to user             // 28498
 *    interaction with the select element.                                                                             // 28499
 * @param {string=} ngOptions sets the options that the select is populated with and defines what is                   // 28500
 * set on the model on selection. See {@link ngOptions `ngOptions`}.                                                   // 28501
 *                                                                                                                     // 28502
 * @example                                                                                                            // 28503
 * ### Simple `select` elements with static options                                                                    // 28504
 *                                                                                                                     // 28505
 * <example name="static-select" module="staticSelect">                                                                // 28506
 * <file name="index.html">                                                                                            // 28507
 * <div ng-controller="ExampleController">                                                                             // 28508
 *   <form name="myForm">                                                                                              // 28509
 *     <label for="singleSelect"> Single select: </label><br>                                                          // 28510
 *     <select name="singleSelect" ng-model="data.singleSelect">                                                       // 28511
 *       <option value="option-1">Option 1</option>                                                                    // 28512
 *       <option value="option-2">Option 2</option>                                                                    // 28513
 *     </select><br>                                                                                                   // 28514
 *                                                                                                                     // 28515
 *     <label for="singleSelect"> Single select with "not selected" option and dynamic option values: </label><br>     // 28516
 *     <select name="singleSelect" id="singleSelect" ng-model="data.singleSelect">                                     // 28517
 *       <option value="">---Please select---</option> <!-- not selected / blank option -->                            // 28518
 *       <option value="{{data.option1}}">Option 1</option> <!-- interpolation -->                                     // 28519
 *       <option value="option-2">Option 2</option>                                                                    // 28520
 *     </select><br>                                                                                                   // 28521
 *     <button ng-click="forceUnknownOption()">Force unknown option</button><br>                                       // 28522
 *     <tt>singleSelect = {{data.singleSelect}}</tt>                                                                   // 28523
 *                                                                                                                     // 28524
 *     <hr>                                                                                                            // 28525
 *     <label for="multipleSelect"> Multiple select: </label><br>                                                      // 28526
 *     <select name="multipleSelect" id="multipleSelect" ng-model="data.multipleSelect" multiple>                      // 28527
 *       <option value="option-1">Option 1</option>                                                                    // 28528
 *       <option value="option-2">Option 2</option>                                                                    // 28529
 *       <option value="option-3">Option 3</option>                                                                    // 28530
 *     </select><br>                                                                                                   // 28531
 *     <tt>multipleSelect = {{data.multipleSelect}}</tt><br/>                                                          // 28532
 *   </form>                                                                                                           // 28533
 * </div>                                                                                                              // 28534
 * </file>                                                                                                             // 28535
 * <file name="app.js">                                                                                                // 28536
 *  angular.module('staticSelect', [])                                                                                 // 28537
 *    .controller('ExampleController', ['$scope', function($scope) {                                                   // 28538
 *      $scope.data = {                                                                                                // 28539
 *       singleSelect: null,                                                                                           // 28540
 *       multipleSelect: [],                                                                                           // 28541
 *       option1: 'option-1',                                                                                          // 28542
 *      };                                                                                                             // 28543
 *                                                                                                                     // 28544
 *      $scope.forceUnknownOption = function() {                                                                       // 28545
 *        $scope.data.singleSelect = 'nonsense';                                                                       // 28546
 *      };                                                                                                             // 28547
 *   }]);                                                                                                              // 28548
 * </file>                                                                                                             // 28549
 *</example>                                                                                                           // 28550
 *                                                                                                                     // 28551
 * ### Using `ngRepeat` to generate `select` options                                                                   // 28552
 * <example name="ngrepeat-select" module="ngrepeatSelect">                                                            // 28553
 * <file name="index.html">                                                                                            // 28554
 * <div ng-controller="ExampleController">                                                                             // 28555
 *   <form name="myForm">                                                                                              // 28556
 *     <label for="repeatSelect"> Repeat select: </label>                                                              // 28557
 *     <select name="repeatSelect" id="repeatSelect" ng-model="data.repeatSelect">                                     // 28558
 *       <option ng-repeat="option in data.availableOptions" value="{{option.id}}">{{option.name}}</option>            // 28559
 *     </select>                                                                                                       // 28560
 *   </form>                                                                                                           // 28561
 *   <hr>                                                                                                              // 28562
 *   <tt>repeatSelect = {{data.repeatSelect}}</tt><br/>                                                                // 28563
 * </div>                                                                                                              // 28564
 * </file>                                                                                                             // 28565
 * <file name="app.js">                                                                                                // 28566
 *  angular.module('ngrepeatSelect', [])                                                                               // 28567
 *    .controller('ExampleController', ['$scope', function($scope) {                                                   // 28568
 *      $scope.data = {                                                                                                // 28569
 *       repeatSelect: null,                                                                                           // 28570
 *       availableOptions: [                                                                                           // 28571
 *         {id: '1', name: 'Option A'},                                                                                // 28572
 *         {id: '2', name: 'Option B'},                                                                                // 28573
 *         {id: '3', name: 'Option C'}                                                                                 // 28574
 *       ],                                                                                                            // 28575
 *      };                                                                                                             // 28576
 *   }]);                                                                                                              // 28577
 * </file>                                                                                                             // 28578
 *</example>                                                                                                           // 28579
 *                                                                                                                     // 28580
 *                                                                                                                     // 28581
 * ### Using `select` with `ngOptions` and setting a default value                                                     // 28582
 * See the {@link ngOptions ngOptions documentation} for more `ngOptions` usage examples.                              // 28583
 *                                                                                                                     // 28584
 * <example name="select-with-default-values" module="defaultValueSelect">                                             // 28585
 * <file name="index.html">                                                                                            // 28586
 * <div ng-controller="ExampleController">                                                                             // 28587
 *   <form name="myForm">                                                                                              // 28588
 *     <label for="mySelect">Make a choice:</label>                                                                    // 28589
 *     <select name="mySelect" id="mySelect"                                                                           // 28590
 *       ng-options="option.name for option in data.availableOptions track by option.id"                               // 28591
 *       ng-model="data.selectedOption"></select>                                                                      // 28592
 *   </form>                                                                                                           // 28593
 *   <hr>                                                                                                              // 28594
 *   <tt>option = {{data.selectedOption}}</tt><br/>                                                                    // 28595
 * </div>                                                                                                              // 28596
 * </file>                                                                                                             // 28597
 * <file name="app.js">                                                                                                // 28598
 *  angular.module('defaultValueSelect', [])                                                                           // 28599
 *    .controller('ExampleController', ['$scope', function($scope) {                                                   // 28600
 *      $scope.data = {                                                                                                // 28601
 *       availableOptions: [                                                                                           // 28602
 *         {id: '1', name: 'Option A'},                                                                                // 28603
 *         {id: '2', name: 'Option B'},                                                                                // 28604
 *         {id: '3', name: 'Option C'}                                                                                 // 28605
 *       ],                                                                                                            // 28606
 *       selectedOption: {id: '3', name: 'Option C'} //This sets the default value of the select in the ui             // 28607
 *       };                                                                                                            // 28608
 *   }]);                                                                                                              // 28609
 * </file>                                                                                                             // 28610
 *</example>                                                                                                           // 28611
 *                                                                                                                     // 28612
 *                                                                                                                     // 28613
 * ### Binding `select` to a non-string value via `ngModel` parsing / formatting                                       // 28614
 *                                                                                                                     // 28615
 * <example name="select-with-non-string-options" module="nonStringSelect">                                            // 28616
 *   <file name="index.html">                                                                                          // 28617
 *     <select ng-model="model.id" convert-to-number>                                                                  // 28618
 *       <option value="0">Zero</option>                                                                               // 28619
 *       <option value="1">One</option>                                                                                // 28620
 *       <option value="2">Two</option>                                                                                // 28621
 *     </select>                                                                                                       // 28622
 *     {{ model }}                                                                                                     // 28623
 *   </file>                                                                                                           // 28624
 *   <file name="app.js">                                                                                              // 28625
 *     angular.module('nonStringSelect', [])                                                                           // 28626
 *       .run(function($rootScope) {                                                                                   // 28627
 *         $rootScope.model = { id: 2 };                                                                               // 28628
 *       })                                                                                                            // 28629
 *       .directive('convertToNumber', function() {                                                                    // 28630
 *         return {                                                                                                    // 28631
 *           require: 'ngModel',                                                                                       // 28632
 *           link: function(scope, element, attrs, ngModel) {                                                          // 28633
 *             ngModel.$parsers.push(function(val) {                                                                   // 28634
 *               return parseInt(val, 10);                                                                             // 28635
 *             });                                                                                                     // 28636
 *             ngModel.$formatters.push(function(val) {                                                                // 28637
 *               return '' + val;                                                                                      // 28638
 *             });                                                                                                     // 28639
 *           }                                                                                                         // 28640
 *         };                                                                                                          // 28641
 *       });                                                                                                           // 28642
 *   </file>                                                                                                           // 28643
 *   <file name="protractor.js" type="protractor">                                                                     // 28644
 *     it('should initialize to model', function() {                                                                   // 28645
 *       var select = element(by.css('select'));                                                                       // 28646
 *       expect(element(by.model('model.id')).$('option:checked').getText()).toEqual('Two');                           // 28647
 *     });                                                                                                             // 28648
 *   </file>                                                                                                           // 28649
 * </example>                                                                                                          // 28650
 *                                                                                                                     // 28651
 */                                                                                                                    // 28652
var selectDirective = function() {                                                                                     // 28653
                                                                                                                       // 28654
  return {                                                                                                             // 28655
    restrict: 'E',                                                                                                     // 28656
    require: ['select', '?ngModel'],                                                                                   // 28657
    controller: SelectController,                                                                                      // 28658
    priority: 1,                                                                                                       // 28659
    link: {                                                                                                            // 28660
      pre: selectPreLink                                                                                               // 28661
    }                                                                                                                  // 28662
  };                                                                                                                   // 28663
                                                                                                                       // 28664
  function selectPreLink(scope, element, attr, ctrls) {                                                                // 28665
                                                                                                                       // 28666
      // if ngModel is not defined, we don't need to do anything                                                       // 28667
      var ngModelCtrl = ctrls[1];                                                                                      // 28668
      if (!ngModelCtrl) return;                                                                                        // 28669
                                                                                                                       // 28670
      var selectCtrl = ctrls[0];                                                                                       // 28671
                                                                                                                       // 28672
      selectCtrl.ngModelCtrl = ngModelCtrl;                                                                            // 28673
                                                                                                                       // 28674
      // We delegate rendering to the `writeValue` method, which can be changed                                        // 28675
      // if the select can have multiple selected values or if the options are being                                   // 28676
      // generated by `ngOptions`                                                                                      // 28677
      ngModelCtrl.$render = function() {                                                                               // 28678
        selectCtrl.writeValue(ngModelCtrl.$viewValue);                                                                 // 28679
      };                                                                                                               // 28680
                                                                                                                       // 28681
      // When the selected item(s) changes we delegate getting the value of the select control                         // 28682
      // to the `readValue` method, which can be changed if the select can have multiple                               // 28683
      // selected values or if the options are being generated by `ngOptions`                                          // 28684
      element.on('change', function() {                                                                                // 28685
        scope.$apply(function() {                                                                                      // 28686
          ngModelCtrl.$setViewValue(selectCtrl.readValue());                                                           // 28687
        });                                                                                                            // 28688
      });                                                                                                              // 28689
                                                                                                                       // 28690
      // If the select allows multiple values then we need to modify how we read and write                             // 28691
      // values from and to the control; also what it means for the value to be empty and                              // 28692
      // we have to add an extra watch since ngModel doesn't work well with arrays - it                                // 28693
      // doesn't trigger rendering if only an item in the array changes.                                               // 28694
      if (attr.multiple) {                                                                                             // 28695
                                                                                                                       // 28696
        // Read value now needs to check each option to see if it is selected                                          // 28697
        selectCtrl.readValue = function readMultipleValue() {                                                          // 28698
          var array = [];                                                                                              // 28699
          forEach(element.find('option'), function(option) {                                                           // 28700
            if (option.selected) {                                                                                     // 28701
              array.push(option.value);                                                                                // 28702
            }                                                                                                          // 28703
          });                                                                                                          // 28704
          return array;                                                                                                // 28705
        };                                                                                                             // 28706
                                                                                                                       // 28707
        // Write value now needs to set the selected property of each matching option                                  // 28708
        selectCtrl.writeValue = function writeMultipleValue(value) {                                                   // 28709
          var items = new HashMap(value);                                                                              // 28710
          forEach(element.find('option'), function(option) {                                                           // 28711
            option.selected = isDefined(items.get(option.value));                                                      // 28712
          });                                                                                                          // 28713
        };                                                                                                             // 28714
                                                                                                                       // 28715
        // we have to do it on each watch since ngModel watches reference, but                                         // 28716
        // we need to work of an array, so we need to see if anything was inserted/removed                             // 28717
        var lastView, lastViewRef = NaN;                                                                               // 28718
        scope.$watch(function selectMultipleWatch() {                                                                  // 28719
          if (lastViewRef === ngModelCtrl.$viewValue && !equals(lastView, ngModelCtrl.$viewValue)) {                   // 28720
            lastView = shallowCopy(ngModelCtrl.$viewValue);                                                            // 28721
            ngModelCtrl.$render();                                                                                     // 28722
          }                                                                                                            // 28723
          lastViewRef = ngModelCtrl.$viewValue;                                                                        // 28724
        });                                                                                                            // 28725
                                                                                                                       // 28726
        // If we are a multiple select then value is now a collection                                                  // 28727
        // so the meaning of $isEmpty changes                                                                          // 28728
        ngModelCtrl.$isEmpty = function(value) {                                                                       // 28729
          return !value || value.length === 0;                                                                         // 28730
        };                                                                                                             // 28731
                                                                                                                       // 28732
      }                                                                                                                // 28733
    }                                                                                                                  // 28734
};                                                                                                                     // 28735
                                                                                                                       // 28736
                                                                                                                       // 28737
// The option directive is purely designed to communicate the existence (or lack of)                                   // 28738
// of dynamically created (and destroyed) option elements to their containing select                                   // 28739
// directive via its controller.                                                                                       // 28740
var optionDirective = ['$interpolate', function($interpolate) {                                                        // 28741
  return {                                                                                                             // 28742
    restrict: 'E',                                                                                                     // 28743
    priority: 100,                                                                                                     // 28744
    compile: function(element, attr) {                                                                                 // 28745
                                                                                                                       // 28746
      if (isDefined(attr.value)) {                                                                                     // 28747
        // If the value attribute is defined, check if it contains an interpolation                                    // 28748
        var interpolateValueFn = $interpolate(attr.value, true);                                                       // 28749
      } else {                                                                                                         // 28750
        // If the value attribute is not defined then we fall back to the                                              // 28751
        // text content of the option element, which may be interpolated                                               // 28752
        var interpolateTextFn = $interpolate(element.text(), true);                                                    // 28753
        if (!interpolateTextFn) {                                                                                      // 28754
          attr.$set('value', element.text());                                                                          // 28755
        }                                                                                                              // 28756
      }                                                                                                                // 28757
                                                                                                                       // 28758
      return function(scope, element, attr) {                                                                          // 28759
                                                                                                                       // 28760
        // This is an optimization over using ^^ since we don't want to have to search                                 // 28761
        // all the way to the root of the DOM for every single option element                                          // 28762
        var selectCtrlName = '$selectController',                                                                      // 28763
            parent = element.parent(),                                                                                 // 28764
            selectCtrl = parent.data(selectCtrlName) ||                                                                // 28765
              parent.parent().data(selectCtrlName); // in case we are in optgroup                                      // 28766
                                                                                                                       // 28767
        if (selectCtrl) {                                                                                              // 28768
          selectCtrl.registerOption(scope, element, attr, interpolateValueFn, interpolateTextFn);                      // 28769
        }                                                                                                              // 28770
      };                                                                                                               // 28771
    }                                                                                                                  // 28772
  };                                                                                                                   // 28773
}];                                                                                                                    // 28774
                                                                                                                       // 28775
var styleDirective = valueFn({                                                                                         // 28776
  restrict: 'E',                                                                                                       // 28777
  terminal: false                                                                                                      // 28778
});                                                                                                                    // 28779
                                                                                                                       // 28780
var requiredDirective = function() {                                                                                   // 28781
  return {                                                                                                             // 28782
    restrict: 'A',                                                                                                     // 28783
    require: '?ngModel',                                                                                               // 28784
    link: function(scope, elm, attr, ctrl) {                                                                           // 28785
      if (!ctrl) return;                                                                                               // 28786
      attr.required = true; // force truthy in case we are on non input element                                        // 28787
                                                                                                                       // 28788
      ctrl.$validators.required = function(modelValue, viewValue) {                                                    // 28789
        return !attr.required || !ctrl.$isEmpty(viewValue);                                                            // 28790
      };                                                                                                               // 28791
                                                                                                                       // 28792
      attr.$observe('required', function() {                                                                           // 28793
        ctrl.$validate();                                                                                              // 28794
      });                                                                                                              // 28795
    }                                                                                                                  // 28796
  };                                                                                                                   // 28797
};                                                                                                                     // 28798
                                                                                                                       // 28799
                                                                                                                       // 28800
var patternDirective = function() {                                                                                    // 28801
  return {                                                                                                             // 28802
    restrict: 'A',                                                                                                     // 28803
    require: '?ngModel',                                                                                               // 28804
    link: function(scope, elm, attr, ctrl) {                                                                           // 28805
      if (!ctrl) return;                                                                                               // 28806
                                                                                                                       // 28807
      var regexp, patternExp = attr.ngPattern || attr.pattern;                                                         // 28808
      attr.$observe('pattern', function(regex) {                                                                       // 28809
        if (isString(regex) && regex.length > 0) {                                                                     // 28810
          regex = new RegExp('^' + regex + '$');                                                                       // 28811
        }                                                                                                              // 28812
                                                                                                                       // 28813
        if (regex && !regex.test) {                                                                                    // 28814
          throw minErr('ngPattern')('noregexp',                                                                        // 28815
            'Expected {0} to be a RegExp but was {1}. Element: {2}', patternExp,                                       // 28816
            regex, startingTag(elm));                                                                                  // 28817
        }                                                                                                              // 28818
                                                                                                                       // 28819
        regexp = regex || undefined;                                                                                   // 28820
        ctrl.$validate();                                                                                              // 28821
      });                                                                                                              // 28822
                                                                                                                       // 28823
      ctrl.$validators.pattern = function(modelValue, viewValue) {                                                     // 28824
        // HTML5 pattern constraint validates the input value, so we validate the viewValue                            // 28825
        return ctrl.$isEmpty(viewValue) || isUndefined(regexp) || regexp.test(viewValue);                              // 28826
      };                                                                                                               // 28827
    }                                                                                                                  // 28828
  };                                                                                                                   // 28829
};                                                                                                                     // 28830
                                                                                                                       // 28831
                                                                                                                       // 28832
var maxlengthDirective = function() {                                                                                  // 28833
  return {                                                                                                             // 28834
    restrict: 'A',                                                                                                     // 28835
    require: '?ngModel',                                                                                               // 28836
    link: function(scope, elm, attr, ctrl) {                                                                           // 28837
      if (!ctrl) return;                                                                                               // 28838
                                                                                                                       // 28839
      var maxlength = -1;                                                                                              // 28840
      attr.$observe('maxlength', function(value) {                                                                     // 28841
        var intVal = toInt(value);                                                                                     // 28842
        maxlength = isNaN(intVal) ? -1 : intVal;                                                                       // 28843
        ctrl.$validate();                                                                                              // 28844
      });                                                                                                              // 28845
      ctrl.$validators.maxlength = function(modelValue, viewValue) {                                                   // 28846
        return (maxlength < 0) || ctrl.$isEmpty(viewValue) || (viewValue.length <= maxlength);                         // 28847
      };                                                                                                               // 28848
    }                                                                                                                  // 28849
  };                                                                                                                   // 28850
};                                                                                                                     // 28851
                                                                                                                       // 28852
var minlengthDirective = function() {                                                                                  // 28853
  return {                                                                                                             // 28854
    restrict: 'A',                                                                                                     // 28855
    require: '?ngModel',                                                                                               // 28856
    link: function(scope, elm, attr, ctrl) {                                                                           // 28857
      if (!ctrl) return;                                                                                               // 28858
                                                                                                                       // 28859
      var minlength = 0;                                                                                               // 28860
      attr.$observe('minlength', function(value) {                                                                     // 28861
        minlength = toInt(value) || 0;                                                                                 // 28862
        ctrl.$validate();                                                                                              // 28863
      });                                                                                                              // 28864
      ctrl.$validators.minlength = function(modelValue, viewValue) {                                                   // 28865
        return ctrl.$isEmpty(viewValue) || viewValue.length >= minlength;                                              // 28866
      };                                                                                                               // 28867
    }                                                                                                                  // 28868
  };                                                                                                                   // 28869
};                                                                                                                     // 28870
                                                                                                                       // 28871
if (window.angular.bootstrap) {                                                                                        // 28872
  //AngularJS is already loaded, so we can return here...                                                              // 28873
  console.log('WARNING: Tried to load angular more than once.');                                                       // 28874
  return;                                                                                                              // 28875
}                                                                                                                      // 28876
                                                                                                                       // 28877
//try to bind to jquery now so that one can write jqLite(document).ready()                                             // 28878
//but we will rebind on bootstrap again.                                                                               // 28879
bindJQuery();                                                                                                          // 28880
                                                                                                                       // 28881
publishExternalAPI(angular);                                                                                           // 28882
                                                                                                                       // 28883
angular.module("ngLocale", [], ["$provide", function($provide) {                                                       // 28884
var PLURAL_CATEGORY = {ZERO: "zero", ONE: "one", TWO: "two", FEW: "few", MANY: "many", OTHER: "other"};                // 28885
function getDecimals(n) {                                                                                              // 28886
  n = n + '';                                                                                                          // 28887
  var i = n.indexOf('.');                                                                                              // 28888
  return (i == -1) ? 0 : n.length - i - 1;                                                                             // 28889
}                                                                                                                      // 28890
                                                                                                                       // 28891
function getVF(n, opt_precision) {                                                                                     // 28892
  var v = opt_precision;                                                                                               // 28893
                                                                                                                       // 28894
  if (undefined === v) {                                                                                               // 28895
    v = Math.min(getDecimals(n), 3);                                                                                   // 28896
  }                                                                                                                    // 28897
                                                                                                                       // 28898
  var base = Math.pow(10, v);                                                                                          // 28899
  var f = ((n * base) | 0) % base;                                                                                     // 28900
  return {v: v, f: f};                                                                                                 // 28901
}                                                                                                                      // 28902
                                                                                                                       // 28903
$provide.value("$locale", {                                                                                            // 28904
  "DATETIME_FORMATS": {                                                                                                // 28905
    "AMPMS": [                                                                                                         // 28906
      "AM",                                                                                                            // 28907
      "PM"                                                                                                             // 28908
    ],                                                                                                                 // 28909
    "DAY": [                                                                                                           // 28910
      "Sunday",                                                                                                        // 28911
      "Monday",                                                                                                        // 28912
      "Tuesday",                                                                                                       // 28913
      "Wednesday",                                                                                                     // 28914
      "Thursday",                                                                                                      // 28915
      "Friday",                                                                                                        // 28916
      "Saturday"                                                                                                       // 28917
    ],                                                                                                                 // 28918
    "ERANAMES": [                                                                                                      // 28919
      "Before Christ",                                                                                                 // 28920
      "Anno Domini"                                                                                                    // 28921
    ],                                                                                                                 // 28922
    "ERAS": [                                                                                                          // 28923
      "BC",                                                                                                            // 28924
      "AD"                                                                                                             // 28925
    ],                                                                                                                 // 28926
    "FIRSTDAYOFWEEK": 6,                                                                                               // 28927
    "MONTH": [                                                                                                         // 28928
      "January",                                                                                                       // 28929
      "February",                                                                                                      // 28930
      "March",                                                                                                         // 28931
      "April",                                                                                                         // 28932
      "May",                                                                                                           // 28933
      "June",                                                                                                          // 28934
      "July",                                                                                                          // 28935
      "August",                                                                                                        // 28936
      "September",                                                                                                     // 28937
      "October",                                                                                                       // 28938
      "November",                                                                                                      // 28939
      "December"                                                                                                       // 28940
    ],                                                                                                                 // 28941
    "SHORTDAY": [                                                                                                      // 28942
      "Sun",                                                                                                           // 28943
      "Mon",                                                                                                           // 28944
      "Tue",                                                                                                           // 28945
      "Wed",                                                                                                           // 28946
      "Thu",                                                                                                           // 28947
      "Fri",                                                                                                           // 28948
      "Sat"                                                                                                            // 28949
    ],                                                                                                                 // 28950
    "SHORTMONTH": [                                                                                                    // 28951
      "Jan",                                                                                                           // 28952
      "Feb",                                                                                                           // 28953
      "Mar",                                                                                                           // 28954
      "Apr",                                                                                                           // 28955
      "May",                                                                                                           // 28956
      "Jun",                                                                                                           // 28957
      "Jul",                                                                                                           // 28958
      "Aug",                                                                                                           // 28959
      "Sep",                                                                                                           // 28960
      "Oct",                                                                                                           // 28961
      "Nov",                                                                                                           // 28962
      "Dec"                                                                                                            // 28963
    ],                                                                                                                 // 28964
    "WEEKENDRANGE": [                                                                                                  // 28965
      5,                                                                                                               // 28966
      6                                                                                                                // 28967
    ],                                                                                                                 // 28968
    "fullDate": "EEEE, MMMM d, y",                                                                                     // 28969
    "longDate": "MMMM d, y",                                                                                           // 28970
    "medium": "MMM d, y h:mm:ss a",                                                                                    // 28971
    "mediumDate": "MMM d, y",                                                                                          // 28972
    "mediumTime": "h:mm:ss a",                                                                                         // 28973
    "short": "M/d/yy h:mm a",                                                                                          // 28974
    "shortDate": "M/d/yy",                                                                                             // 28975
    "shortTime": "h:mm a"                                                                                              // 28976
  },                                                                                                                   // 28977
  "NUMBER_FORMATS": {                                                                                                  // 28978
    "CURRENCY_SYM": "$",                                                                                               // 28979
    "DECIMAL_SEP": ".",                                                                                                // 28980
    "GROUP_SEP": ",",                                                                                                  // 28981
    "PATTERNS": [                                                                                                      // 28982
      {                                                                                                                // 28983
        "gSize": 3,                                                                                                    // 28984
        "lgSize": 3,                                                                                                   // 28985
        "maxFrac": 3,                                                                                                  // 28986
        "minFrac": 0,                                                                                                  // 28987
        "minInt": 1,                                                                                                   // 28988
        "negPre": "-",                                                                                                 // 28989
        "negSuf": "",                                                                                                  // 28990
        "posPre": "",                                                                                                  // 28991
        "posSuf": ""                                                                                                   // 28992
      },                                                                                                               // 28993
      {                                                                                                                // 28994
        "gSize": 3,                                                                                                    // 28995
        "lgSize": 3,                                                                                                   // 28996
        "maxFrac": 2,                                                                                                  // 28997
        "minFrac": 2,                                                                                                  // 28998
        "minInt": 1,                                                                                                   // 28999
        "negPre": "-\u00a4",                                                                                           // 29000
        "negSuf": "",                                                                                                  // 29001
        "posPre": "\u00a4",                                                                                            // 29002
        "posSuf": ""                                                                                                   // 29003
      }                                                                                                                // 29004
    ]                                                                                                                  // 29005
  },                                                                                                                   // 29006
  "id": "en-us",                                                                                                       // 29007
  "pluralCat": function(n, opt_precision) {  var i = n | 0;  var vf = getVF(n, opt_precision);  if (i == 1 && vf.v == 0) {    return PLURAL_CATEGORY.ONE;  }  return PLURAL_CATEGORY.OTHER;}
});                                                                                                                    // 29009
}]);                                                                                                                   // 29010
                                                                                                                       // 29011
  jqLite(document).ready(function() {                                                                                  // 29012
    angularInit(document, bootstrap);                                                                                  // 29013
  });                                                                                                                  // 29014
                                                                                                                       // 29015
})(window, document);                                                                                                  // 29016
                                                                                                                       // 29017
!window.angular.$$csp().noInlineStyle && window.angular.element(document.head).prepend('<style type="text/css">@charset "UTF-8";[ng\\:cloak],[ng-cloak],[data-ng-cloak],[x-ng-cloak],.ng-cloak,.x-ng-cloak,.ng-hide:not(.ng-hide-animate){display:none !important;}ng\\:form{display:block;}.ng-animate-shim{visibility:hidden;}.ng-anchor{position:absolute;}</style>');
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);


/* Exports */
if (typeof Package === 'undefined') Package = {};
Package['angular:angular'] = {};

})();
