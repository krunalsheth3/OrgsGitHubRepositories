{"version":3,"sources":["meteor://ðŸ’»app/packages/pacozaa_angular-material-data-table/dist/md-data-table.js"],"names":[],"mappingsyH","file":"/packages/pacozaa_angular-material-data-table.js","sourcesContent":["(function (window, angular, undefined) {\n'use strict';\n\nangular.module('md.table.templates', ['md-table-pagination.html', 'md-table-progress.html', 'arrow-up.svg', 'navigate-before.svg', 'navigate-first.svg', 'navigate-last.svg', 'navigate-next.svg']);\n\nangular.module('md-table-pagination.html', []).run(['$templateCache', function($templateCache) {\n  $templateCache.put('md-table-pagination.html',\n    '<span class=\"label\" ng-if=\"$pagination.showPageSelect()\">{{$pagination.$label[\\'page\\']}}</span>\\n' +\n    '\\n' +\n    '<md-select class=\"md-table-select\" ng-if=\"$pagination.showPageSelect()\" ng-model=\"$pagination.page\" md-container-class=\"md-pagination-select\" ng-change=\"$pagination.onPaginationChange()\" aria-label=\"Page\">\\n' +\n    '  <md-option ng-repeat=\"num in $pagination.range($pagination.pages()) track by $index\" ng-value=\"$index + 1\">{{$index + 1}}</md-option>\\n' +\n    '</md-select>\\n' +\n    '\\n' +\n    '<span class=\"label\">{{$pagination.$label[\\'rowsPerPage\\']}}</span>\\n' +\n    '\\n' +\n    '<md-select class=\"md-table-select\" ng-model=\"$pagination.limit\" md-container-class=\"md-pagination-select\" aria-label=\"Rows\" placeholder=\"{{$pagination.options ? $pagination.options[0] : 5}}\">\\n' +\n    '  <md-option ng-repeat=\"rows in $pagination.options ? $pagination.options : [5, 10, 15]\" ng-value=\"rows\">{{rows}}</md-option>\\n' +\n    '</md-select>\\n' +\n    '\\n' +\n    '<span class=\"label\">{{$pagination.min() + 1}} - {{$pagination.max()}} {{$pagination.$label[\\'of\\']}} {{$pagination.total}}</span>\\n' +\n    '\\n' +\n    '<md-button class=\"md-icon-button\" type=\"button\" ng-if=\"$pagination.showBoundaryLinks()\" ng-click=\"$pagination.first()\" ng-disabled=\"!$pagination.hasPrevious()\" aria-label=\"First\">\\n' +\n    '  <md-icon md-svg-icon=\"navigate-first.svg\"></md-icon>\\n' +\n    '</md-button>\\n' +\n    '<md-button class=\"md-icon-button\" type=\"button\" ng-click=\"$pagination.previous()\" ng-disabled=\"!$pagination.hasPrevious()\" aria-label=\"Previous\">\\n' +\n    '  <md-icon md-svg-icon=\"navigate-before.svg\"></md-icon>\\n' +\n    '</md-button>\\n' +\n    '<md-button class=\"md-icon-button\" type=\"button\" ng-click=\"$pagination.next()\" ng-disabled=\"$pagination.disableNext()\" aria-label=\"Next\">\\n' +\n    '  <md-icon md-svg-icon=\"navigate-next.svg\"></md-icon>\\n' +\n    '</md-button>\\n' +\n    '<md-button class=\"md-icon-button\" type=\"button\" ng-if=\"$pagination.showBoundaryLinks()\" ng-click=\"$pagination.last()\" ng-disabled=\"$pagination.disableNext()\" aria-label=\"Last\">\\n' +\n    '  <md-icon md-svg-icon=\"navigate-last.svg\"></md-icon>\\n' +\n    '</md-button>');\n}]);\n\nangular.module('md-table-progress.html', []).run(['$templateCache', function($templateCache) {\n  $templateCache.put('md-table-progress.html',\n    '<tr>\\n' +\n    '  <th colspan=\"{{columnCount()}}\">\\n' +\n    '    <md-progress-linear ng-show=\"deferred()\" md-mode=\"indeterminate\"></md-progress-linear>\\n' +\n    '  </th>\\n' +\n    '</tr>');\n}]);\n\nangular.module('arrow-up.svg', []).run(['$templateCache', function($templateCache) {\n  $templateCache.put('arrow-up.svg',\n    '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path d=\"M4 12l1.41 1.41L11 7.83V20h2V7.83l5.58 5.59L20 12l-8-8-8 8z\"/></svg>');\n}]);\n\nangular.module('navigate-before.svg', []).run(['$templateCache', function($templateCache) {\n  $templateCache.put('navigate-before.svg',\n    '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path d=\"M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z\"/></svg>');\n}]);\n\nangular.module('navigate-first.svg', []).run(['$templateCache', function($templateCache) {\n  $templateCache.put('navigate-first.svg',\n    '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path d=\"M7 6 v12 h2 v-12 h-2z M17.41 7.41L16 6l-6 6 6 6 1.41-1.41L12.83 12z\"/></svg>');\n}]);\n\nangular.module('navigate-last.svg', []).run(['$templateCache', function($templateCache) {\n  $templateCache.put('navigate-last.svg',\n    '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path d=\"M15 6 v12 h2 v-12 h-2z M8 6L6.59 7.41 11.17 12l-4.58 4.59L8 18l6-6z\"/></svg>');\n}]);\n\nangular.module('navigate-next.svg', []).run(['$templateCache', function($templateCache) {\n  $templateCache.put('navigate-next.svg',\n    '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path d=\"M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z\"/></svg>');\n}]);\n\n\nangular.module('md.data.table', ['md.table.templates']);\n\nangular.module('md.data.table').directive('mdBody', mdBody);\n\nfunction mdBody() {\n\n  function compile(tElement) {\n    tElement.addClass('md-body');\n  }\n\n  return {\n    compile: compile,\n    restrict: 'A'\n  };\n}\n\nangular.module('md.data.table').directive('mdCell', mdCell);\n\nfunction mdCell() {\n  \n  function compile(tElement) {\n    var select = tElement.find('md-select');\n    \n    if(select.length) {\n      select.addClass('md-table-select').attr('md-container-class', 'md-table-select');\n    }\n    \n    tElement.addClass('md-cell');\n    \n    return postLink;\n  }\n  \n  // empty controller to be bind properties to in postLink function\n  function Controller() {\n    \n  }\n  \n  function postLink(scope, element, attrs, ctrls) {\n    var select = element.find('md-select');\n    var cellCtrl = ctrls.shift();\n    var tableCtrl = ctrls.shift();\n    \n    if(attrs.ngClick) {\n      element.addClass('md-clickable');\n    }\n    \n    if(select.length) {\n      select.on('click', function (event) {\n        event.stopPropagation();\n      });\n      \n      element.addClass('md-clickable').on('click', function (event) {\n        event.stopPropagation();\n        select[0].click();\n      });\n    }\n    \n    cellCtrl.getTable = tableCtrl.getElement;\n    \n    function getColumn() {\n      return tableCtrl.$$columns[getIndex()];\n    }\n    \n    function getIndex() {\n      return Array.prototype.indexOf.call(element.parent().children(), element[0]);\n    }\n    \n    scope.$watch(getColumn, function (column) {\n      if(!column) {\n        return;\n      }\n      \n      if(column.numeric) {\n        element.addClass('md-numeric');\n      } else {\n        element.removeClass('md-numeric');\n      }\n    });\n  }\n  \n  return {\n    controller: Controller,\n    compile: compile,\n    require: ['mdCell', '^^mdTable'],\n    restrict: 'A'\n  };\n}\n\nangular.module('md.data.table').directive('mdColumn', mdColumn);\n\nfunction mdColumn($compile) {\n  \n  function compile(tElement) {\n    tElement.addClass('md-column');\n    return postLink;\n  }\n\n  function postLink(scope, element, attrs, ctrls) {\n    var headCtrl = ctrls.shift();\n    var tableCtrl = ctrls.shift();\n    \n    function attachSortIcon() {\n      var sortIcon = angular.element('<md-icon md-svg-icon=\"arrow-up.svg\">');\n      \n      $compile(sortIcon.addClass('md-sort-icon').attr('ng-class', 'getDirection()'))(scope);\n      \n      if(element.hasClass('md-numeric')) {\n        element.prepend(sortIcon);\n      } else {\n        element.append(sortIcon);\n      }\n    }\n    \n    function detachSortIcon() {\n      Array.prototype.some.call(element.find('md-icon'), function (icon) {\n        return icon.classList.contains('md-sort-icon') && element[0].removeChild(icon);\n      });\n    }\n    \n    function disableSorting() {\n      detachSortIcon();\n      element.removeClass('md-sort').off('click', setOrder);\n    }\n    \n    function enableSorting() {\n      attachSortIcon();\n      element.addClass('md-sort').on('click', setOrder);\n    }\n    \n    function getIndex() {\n      return Array.prototype.indexOf.call(element.parent().children(), element[0]);\n    }\n    \n    function isActive() {\n      if(!scope.orderBy) {\n        return false;\n      }\n      \n      return headCtrl.order === scope.orderBy || headCtrl.order === '-' + scope.orderBy;\n    }\n    \n    function isNumeric() {\n      if(attrs.hasOwnProperty('mdNumeric') && attrs.mdNumeric === '') {\n        return true;\n      }\n      \n      return scope.numeric;\n    }\n    \n    function setOrder() {\n      scope.$applyAsync(function () {\n        if(!isActive()) {\n          headCtrl.order = scope.getDirection() === 'md-asc' ? scope.orderBy : '-' + scope.orderBy;\n        } else {\n          headCtrl.order = scope.getDirection() === 'md-asc' ? '-' + scope.orderBy : scope.orderBy;\n        }\n        \n        if(angular.isFunction(headCtrl.onReorder)) {\n          headCtrl.onReorder(headCtrl.order);\n        }\n      });\n    }\n    \n    function updateColumn(index, column) {\n      tableCtrl.$$columns[index] = column;\n      \n      if(column.numeric) {\n        element.addClass('md-numeric');\n      } else {\n        element.removeClass('md-numeric');\n      }\n    }\n    \n    scope.getDirection = function () {\n      if(!isActive()) {\n        return attrs.hasOwnProperty('mdDesc') ? 'md-desc' : 'md-asc';\n      }\n      \n      return headCtrl.order === '-' + scope.orderBy ? 'md-desc' : 'md-asc';\n    };\n    \n    scope.$watch(isActive, function (active) {\n      if(active) {\n        element.addClass('md-active');\n      } else {\n        element.removeClass('md-active');\n      }\n    });\n    \n    scope.$watch(getIndex, function (index) {\n      updateColumn(index, {'numeric': isNumeric()});\n    });\n    \n    scope.$watch(isNumeric, function (numeric) {\n      updateColumn(getIndex(), {'numeric': numeric});\n    });\n    \n    scope.$watch('orderBy', function (orderBy) {\n      if(orderBy) {\n        enableSorting();\n      } else {\n        disableSorting();\n      }\n    });\n  }\n\n  return {\n    compile: compile,\n    require: ['^^mdHead', '^^mdTable'],\n    restrict: 'A',\n    scope: {\n      numeric: '=?mdNumeric',\n      orderBy: '@?mdOrderBy'\n    }\n  };\n}\n\nmdColumn.$inject = ['$compile'];\n\nangular.module('md.data.table')\n  .decorator('$controller', controllerDecorator)\n  .factory('$mdEditDialog', mdEditDialog);\n\n/*\n * A decorator for ng.$controller to optionally bind properties to the\n * controller before invoking the constructor. Stolen from the ngMock.\n *\n * https://docs.angularjs.org/api/ngMock/service/$controller\n */\nfunction controllerDecorator($delegate) {\n  return function(expression, locals, later, ident) {\n    if (later && typeof later === 'object') {\n      var create = $delegate(expression, locals, true, ident);\n      angular.extend(create.instance, later);\n      return create();\n    }\n    return $delegate(expression, locals, later, ident);\n  };\n}\n\ncontrollerDecorator.$inject = ['$delegate'];\n  \nfunction mdEditDialog($compile, $controller, $document, $mdUtil, $q, $rootScope, $templateCache, $templateRequest, $window) {\n  /* jshint validthis: true */\n  \n  var ESCAPE = 27;\n  \n  var busy = false;\n  var body = angular.element($document.prop('body'));\n  \n  /*\n   * bindToController\n   * controller\n   * controllerAs\n   * locals\n   * resolve\n   * scope\n   * targetEvent\n   * template\n   * templateUrl\n   */\n  var defaultOptions = {\n    clickOutsideToClose: true,\n    disableScroll: true,\n    escToClose: true,\n    focusOnOpen: true\n  };\n  \n  function build(template, options) {\n    var scope = $rootScope.$new();\n    var element = $compile(template)(scope);\n    var backdrop = $mdUtil.createBackdrop(scope, 'md-edit-dialog-backdrop');\n    var controller;\n    \n    if(options.controller) {\n      controller = getController(options, scope, {$element: element, $scope: scope});\n    } else {\n      angular.extend(scope, options.scope);\n    }\n    \n    if(options.disableScroll) {\n      disableScroll(element);\n    }\n    \n    body.prepend(backdrop).append(element.addClass('md-whiteframe-1dp'));\n    \n    positionDialog(element, options.targetEvent.currentTarget);\n    \n    if(options.focusOnOpen) {\n      var autofocus = $mdUtil.findFocusTarget(element);\n      \n      if(autofocus) {\n        autofocus.focus();\n      }\n    }\n    \n    if(options.clickOutsideToClose) {\n      backdrop.on('click', function () {\n        element.remove();\n      });\n    }\n    \n    if(options.escToClose) {\n      escToClose(element);\n    }\n    \n    element.on('$destroy', function () {\n      busy = false;\n      backdrop.remove();\n    });\n    \n    return controller;\n  }\n  \n  function disableScroll(element) {\n    var restoreScroll = $mdUtil.disableScrollAround(element, body);\n    \n    element.on('$destroy', function () {\n      restoreScroll();\n    });\n  }\n  \n  function getController(options, scope, inject) {\n    if(!options.controller) {\n      return;\n    }\n    \n    if(options.resolve) {\n      angular.extend(inject, options.resolve);\n    }\n    \n    if(options.locals) {\n      angular.extend(inject, options.locals);\n    }\n    \n    if(options.controllerAs) {\n      scope[options.controllerAs] = {};\n      \n      if(options.bindToController) {\n        angular.extend(scope[options.controllerAs], options.scope);\n      } else {\n        angular.extend(scope, options.scope);\n      }\n    } else {\n      angular.extend(scope, options.scope);\n    }\n    \n    if(options.bindToController) {\n      return $controller(options.controller, inject, scope[options.controllerAs]);\n    } else {\n      return $controller(options.controller, inject);\n    }\n  }\n  \n  function getTemplate(options) {\n    return $q(function (resolve, reject) {\n      var template = options.template;\n      \n      function illegalType(type) {\n        reject('Unexpected template value. Expected a string; received a ' + type + '.');\n      }\n      \n      if(template) {\n        return angular.isString(template) ? resolve(template) : illegalType(typeof template);\n      }\n      \n      if(options.templateUrl) {\n        template = $templateCache.get(options.templateUrl);\n        \n        if(template) {\n          return resolve(template);\n        }\n        \n        var success = function (template) {\n          return resolve(template);\n        };\n        \n        var error = function () {\n          return reject('Error retrieving template from URL.');\n        };\n        \n        return $templateRequest(options.templateUrl).then(success, error);\n      }\n      \n      reject('Template not provided.');\n    });\n  }\n  \n  function logError(error) {\n    busy = false;\n    console.error(error);\n  }\n  \n  function escToClose(element) {\n    var keyup = function (event) {\n      if(event.keyCode === ESCAPE) {\n        element.remove();\n      }\n    };\n    \n    body.on('keyup', keyup);\n    \n    element.on('$destroy', function () {\n      body.off('keyup', keyup);\n    });\n  }\n  \n  function positionDialog(element, target) {\n    var table = angular.element(target).controller('mdCell').getTable();\n    \n    var getHeight = function () {\n      return element.prop('clientHeight');\n    };\n    \n    var getSize = function () {\n      return {\n        width: getWidth(),\n        height: getHeight()\n      };\n    };\n    \n    var getTableBounds = function () {\n      var parent = table.parent();\n      \n      if(parent.prop('tagName') === 'MD-TABLE-CONTAINER') {\n        return parent[0].getBoundingClientRect();\n      } else {\n        return table[0].getBoundingClientRect();\n      }\n    };\n    \n    var getWidth = function () {\n      return element.prop('clientWidth');\n    };\n    \n    var reposition = function () {\n      var size = getSize();\n      var cellBounds = target.getBoundingClientRect();\n      var tableBounds = getTableBounds();\n      \n      if(size.width > tableBounds.right - cellBounds.left) {\n        element.css('left', tableBounds.right - size.width + 'px');\n      } else {\n        element.css('left', cellBounds.left + 'px');\n      }\n      \n      if(size.height > tableBounds.bottom - cellBounds.top) {\n        element.css('top', tableBounds.bottom - size.height + 'px');\n      } else {\n        element.css('top', cellBounds.top + 1 + 'px');\n      }\n      \n      element.css('minWidth', cellBounds.width + 'px');\n    };\n    \n    var watchWidth = $rootScope.$watch(getWidth, reposition);\n    var watchHeight = $rootScope.$watch(getHeight, reposition);\n    \n    $window.addEventListener('resize', reposition);\n    \n    element.on('$destroy', function () {\n      watchWidth();\n      watchHeight();\n      \n      $window.removeEventListener('resize', reposition);\n    });\n  }\n  \n  function preset(size, options) {\n    \n    function getAttrs() {\n      var attrs = 'type=\"' + (options.type || 'text') + '\"';\n      \n      for(var attr in options.validators) {\n        attrs += ' ' + attr + '=\"' + options.validators[attr] + '\"';\n      }\n      \n      return attrs;\n    }\n    \n    return {\n      controller: ['$element', '$q', 'save', '$scope', function ($element, $q, save, $scope) {\n        function update() {\n          if($scope.editDialog.$invalid) {\n            return $q.reject();\n          }\n          \n          if(angular.isFunction(save)) {\n            return $q.when(save($scope.editDialog.input));\n          }\n          \n          return $q.resolve();\n        }\n        \n        this.dismiss = function () {\n          $element.remove();\n        };\n        \n        this.getInput = function () {\n          return $scope.editDialog.input;\n        };\n        \n        $scope.dismiss = this.dismiss;\n        \n        $scope.submit = function () {\n          update().then(function () {\n            $scope.dismiss();\n          });\n        };\n      }],\n      locals: {\n        save: options.save\n      },\n      scope: {\n        cancel: options.cancel || 'Cancel',\n        messages: options.messages,\n        model: options.modelValue,\n        ok: options.ok || 'Save',\n        placeholder: options.placeholder,\n        title: options.title,\n        size: size\n      },\n      template:\n        '<md-edit-dialog>' +\n          '<div layout=\"column\" class=\"md-content\">' +\n            '<div ng-if=\"size === \\'large\\'\" class=\"md-title\">{{title || \\'Edit\\'}}</div>' +\n            '<form name=\"editDialog\" layout=\"column\" ng-submit=\"submit(model)\">' +\n              '<md-input-container md-no-float>' +\n                '<input name=\"input\" ng-model=\"model\" md-autofocus placeholder=\"{{placeholder}} \"' + getAttrs() + '>' +\n                '<div ng-messages=\"editDialog.input.$error\">' +\n                  '<div ng-repeat=\"(key, message) in messages\" ng-message=\"{{key}}\">{{message}}</div>' +\n                '</div>' +\n              '</md-input-container>' +\n            '</form>' +\n          '</div>' +\n          '<div ng-if=\"size === \\'large\\'\" layout=\"row\" layout-align=\"end\" class=\"md-actions\">' +\n            '<md-button class=\"md-primary\" ng-click=\"dismiss()\">{{cancel}}</md-button>' +\n            '<md-button class=\"md-primary\" ng-click=\"submit()\">{{ok}}</md-button>' +\n          '</div>' +\n        '</md-edit-dialog>'\n    };\n  }\n  \n  this.show = function (options) {\n    if(busy) {\n      return $q.reject();\n    }\n    \n    busy = true;\n    options = angular.extend({}, defaultOptions, options);\n    \n    if(!options.targetEvent) {\n      return logError('options.targetEvent is required to align the dialog with the table cell.');\n    }\n    \n    if(!options.targetEvent.currentTarget.classList.contains('md-cell')) {\n      return logError('The event target must be a table cell.');\n    }\n    \n    if(options.bindToController && !options.controllerAs) {\n      return logError('You must define options.controllerAs when options.bindToController is true.');\n    }\n    \n    var promise = getTemplate(options);\n    var promises = [promise];\n    \n    for(var prop in options.resolve) {\n      promise = options.resolve[prop];\n      promises.push($q.when(angular.isFunction(promise) ? promise() : promise));\n    }\n    \n    promise = $q.all(promises);\n    \n    promise['catch'](logError);\n    \n    return promise.then(function (results) {\n      var template = results.shift();\n      \n      for(var prop in options.resolve) {\n        options.resolve[prop] = results.shift();\n      }\n      \n      return build(template, options);\n    });\n  };\n  \n  this.small = function (options) {\n    return this.show(angular.extend({}, options, preset('small', options)));\n  }.bind(this);\n  \n  this.large = function (options) {\n    return this.show(angular.extend({}, options, preset('large', options)));\n  }.bind(this);\n  \n  return this;\n}\n\nmdEditDialog.$inject = ['$compile', '$controller', '$document', '$mdUtil', '$q', '$rootScope', '$templateCache', '$templateRequest', '$window'];\n\n\nangular.module('md.data.table').directive('mdFoot', mdFoot);\n\nfunction mdFoot() {\n\n  function compile(tElement) {\n    tElement.addClass('md-foot');\n  }\n\n  return {\n    compile: compile,\n    restrict: 'A'\n  };\n}\n\nangular.module('md.data.table').directive('mdHead', mdHead);\n\nfunction mdHead($compile) {\n\n  function compile(tElement) {\n    tElement.addClass('md-head');\n    return postLink;\n  }\n  \n  // empty controller to be bind scope properties to\n  function Controller() {\n    \n  }\n  \n  function postLink(scope, element, attrs, tableCtrl) {\n    \n    function attachCheckbox() {\n      var children = element.children();\n      \n      // append an empty cell to preceding rows\n      for(var i = 0; i < children.length - 1; i++) {\n        children.eq(i).prepend('<th class=\"md-column\">');\n      }\n      \n      children.eq(children.length - 1).prepend(createCheckBox());\n    }\n    \n    function createCheckBox() {\n      var checkbox = angular.element('<md-checkbox>');\n      \n      checkbox.attr('aria-label', 'Select All');\n      checkbox.attr('ng-click', 'toggleAll()');\n      checkbox.attr('ng-checked', 'allSelected()');\n      \n      return angular.element('<th class=\"md-column md-checkbox-column\">').append($compile(checkbox)(scope));\n    }\n    \n    function enableRowSelection() {\n      return tableCtrl.$$rowSelect;\n    }\n    \n    function mdSelectCtrl(row) {\n      return angular.element(row).controller('mdSelect');\n    }\n    \n    function removeCheckbox() {\n      var children = element.children();\n      var child = children.eq(children.length - 1);\n      \n      Array.prototype.some.call(child.prop('cells'), function (cell) {\n        return cell.classList.contains('md-checkbox-column') && child[0].removeChild(cell);\n      });\n    }\n    \n    scope.allSelected = function () {\n      var rows = tableCtrl.getBodyRows();\n      \n      return rows.length && rows.map(mdSelectCtrl).every(function (ctrl) {\n        return ctrl && ctrl.isSelected();\n      });\n    };\n    \n    scope.selectAll = function () {\n      tableCtrl.getBodyRows().map(mdSelectCtrl).forEach(function (ctrl) {\n        if(ctrl && !ctrl.isSelected()) {\n          ctrl.select();\n        }\n      });\n    };\n    \n    scope.toggleAll = function () {\n      return scope.allSelected() ? scope.unSelectAll() : scope.selectAll();\n    };\n    \n    scope.unSelectAll = function () {\n      tableCtrl.getBodyRows().map(mdSelectCtrl).forEach(function (ctrl) {\n        if(ctrl && ctrl.isSelected()) {\n          ctrl.deselect();\n        }\n      });\n    };\n    \n    scope.$watch(enableRowSelection, function (enable) {\n      if(enable) {\n        attachCheckbox();\n      } else {\n        removeCheckbox();\n      }\n    });\n  }\n  \n  return {\n    bindToController: true,\n    compile: compile,\n    controller: Controller,\n    controllerAs: '$mdHead',\n    require: '^^mdTable',\n    restrict: 'A',\n    scope: {\n      order: '=?mdOrder',\n      onReorder: '=?mdOnReorder'\n    }\n  };\n}\n\nmdHead.$inject = ['$compile'];\n\nangular.module('md.data.table').directive('mdRow', mdRow);\n\nfunction mdRow() {\n\n  function compile(tElement) {\n    tElement.addClass('md-row');\n    return postLink;\n  }\n  \n  function postLink(scope, element, attrs, tableCtrl) {\n    function enableRowSelection() {\n      return tableCtrl.$$rowSelect;\n    }\n    \n    function isBodyRow() {\n      return tableCtrl.getBodyRows().indexOf(element[0]) !== -1;\n    }\n    \n    function isChild(node) {\n      return node.parent()[0] === element[0];\n    }\n    \n    if(isBodyRow()) {\n      var cell = angular.element('<td class=\"md-cell\">');\n      \n      scope.$watch(enableRowSelection, function (enable) {\n        if(enable && !attrs.mdSelect) {\n          if(!isChild(cell)) {\n            element.prepend(cell);\n          }\n          return;\n        }\n        \n        if(isChild(cell)) {\n          cell.remove();\n        }\n      });\n    }\n  }\n\n  return {\n    compile: compile,\n    require: '^^mdTable',\n    restrict: 'A'\n  };\n}\n\nangular.module('md.data.table').directive('mdSelect', mdSelect);\n\nfunction mdSelect($compile) {\n  \n  // empty controller to bind scope properties to\n  function Controller() {\n    \n  }\n  \n  function postLink(scope, element, attrs, ctrls) {\n    var self = ctrls.shift();\n    var tableCtrl = ctrls.shift();\n    \n    if(tableCtrl.$$rowSelect && self.id && tableCtrl.$$hash.has(self.id)) {\n      var index = tableCtrl.selected.indexOf(tableCtrl.$$hash.get(self.id));\n      \n      // if the item is no longer selected remove it\n      if(index === -1) {\n        tableCtrl.$$hash.purge(self.id);\n      }\n      \n      // if the item is not a reference to the current model update the reference\n      else if(!tableCtrl.$$hash.equals(self.id, self.model)) {\n        tableCtrl.$$hash.update(self.id, self.model);\n        tableCtrl.selected.splice(index, 1, self.model);\n      }\n    }\n    \n    self.isSelected = function () {\n      if(!tableCtrl.$$rowSelect) {\n        return false;\n      }\n      \n      if(self.id) {\n        return tableCtrl.$$hash.has(self.id);\n      }\n      \n      return tableCtrl.selected.indexOf(self.model) !== -1;\n    };\n    \n    self.select = function () {\n      if(self.disabled) {\n        return;\n      }\n      \n      tableCtrl.selected.push(self.model);\n      \n      if(angular.isFunction(self.onSelect)) {\n        self.onSelect(self.model);\n      }\n    };\n    \n    self.deselect = function () {\n      if(self.disabled) {\n        return;\n      }\n      \n      tableCtrl.selected.splice(tableCtrl.selected.indexOf(self.model), 1);\n      \n      if(angular.isFunction(self.onDeselect)) {\n        self.onDeselect(self.model);\n      }\n    };\n    \n    self.toggle = function (event) {\n      if(event && event.stopPropagation) {\n        event.stopPropagation();\n      }\n      \n      return self.isSelected() ? self.deselect() : self.select();\n    };\n    \n    function autoSelect() {\n      if(attrs.hasOwnProperty('mdAutoSelect') && attrs.mdAutoSelect === '') {\n        return true;\n      }\n      \n      return self.autoSelect;\n    }\n    \n    function createCheckbox() {\n      var checkbox = angular.element('<md-checkbox>');\n      \n      checkbox.attr('aria-label', 'Select Row');\n      checkbox.attr('ng-click', '$mdSelect.toggle($event)');\n      checkbox.attr('ng-checked', '$mdSelect.isSelected()');\n      checkbox.attr('ng-disabled', '$mdSelect.disabled');\n      \n      return angular.element('<td class=\"md-cell md-checkbox-cell\">').append($compile(checkbox)(scope));\n    }\n    \n    function disableSelection() {\n      Array.prototype.some.call(element.children(), function (child) {\n        return child.classList.contains('md-checkbox-cell') && element[0].removeChild(child);\n      });\n      \n      if(autoSelect()) {\n        element.off('click', toggle);\n      }\n    }\n    \n    function enableSelection() {\n      element.prepend(createCheckbox());\n      \n      if(autoSelect()) {\n        element.on('click', toggle);\n      }\n    }\n    \n    function enableRowSelection() {\n      return tableCtrl.$$rowSelect;\n    }\n    \n    function onSelectChange(selected) {\n      if(!self.id) {\n        return;\n      }\n      \n      if(tableCtrl.$$hash.has(self.id)) {\n        // check if the item has been deselected\n        if(selected.indexOf(tableCtrl.$$hash.get(self.id)) === -1) {\n          tableCtrl.$$hash.purge(self.id);\n        }\n        \n        return;\n      }\n      \n      // check if the item has been selected\n      if(selected.indexOf(self.model) !== -1) {\n        tableCtrl.$$hash.update(self.id, self.model);\n      }\n    }\n    \n    function toggle(event) {\n      scope.$applyAsync(function () {\n        self.toggle(event);\n      });\n    }\n    \n    scope.$watch(enableRowSelection, function (enable) {\n      if(enable) {\n        enableSelection();\n      } else {\n        disableSelection();\n      }\n    });\n    \n    scope.$watch(autoSelect, function (newValue, oldValue) {\n      if(newValue === oldValue) {\n        return;\n      }\n      \n      if(tableCtrl.$$rowSelect && newValue) {\n        element.on('click', toggle);\n      } else {\n        element.off('click', toggle);\n      }\n    });\n    \n    scope.$watch(self.isSelected, function (isSelected) {\n      return isSelected ? element.addClass('md-selected') : element.removeClass('md-selected');\n    });\n    \n    tableCtrl.registerModelChangeListener(onSelectChange);\n    \n    element.on('$destroy', function () {\n      tableCtrl.removeModelChangeListener(onSelectChange);\n    });\n  }\n  \n  return {\n    bindToController: true,\n    controller: Controller,\n    controllerAs: '$mdSelect',\n    link: postLink,\n    require: ['mdSelect', '^^mdTable'],\n    restrict: 'A',\n    scope: {\n      id: '@mdSelectId',\n      model: '=mdSelect',\n      disabled: '=ngDisabled',\n      onSelect: '=?mdOnSelect',\n      onDeselect: '=?mdOnDeselect',\n      autoSelect: '=mdAutoSelect'\n    }\n  };\n}\n\nmdSelect.$inject = ['$compile'];\n\nangular.module('md.data.table').directive('mdTable', mdTable);\n\nfunction Hash() {\n  var keys = {};\n    \n  this.equals = function (key, item) {\n    return keys[key] === item;\n  };\n\n  this.get = function (key) {\n    return keys[key];\n  };\n  \n  this.has = function (key) {\n    return keys.hasOwnProperty(key);\n  };\n\n  this.purge = function (key) {\n    delete keys[key];\n  };\n  \n  this.update = function (key, item) {\n    keys[key] = item;\n  };\n}\n\nfunction mdTable() {\n  \n  function compile(tElement, tAttrs) {\n    tElement.addClass('md-table');\n    \n    if(tAttrs.hasOwnProperty('mdProgress')) {\n      var body = tElement.find('tbody')[0];\n      var progress = angular.element('<thead class=\"md-table-progress\">');\n      \n      if(body) {\n        tElement[0].insertBefore(progress[0], body);\n      }\n    }\n  }\n  \n  function Controller($attrs, $element, $q, $scope) {\n    var self = this;\n    var queue = [];\n    var watchListener;\n    var modelChangeListeners = [];\n    \n    self.$$hash = new Hash();\n    self.$$columns = {};\n    \n    function enableRowSelection() {\n      self.$$rowSelect = true;\n      \n      watchListener = $scope.$watchCollection('$mdTable.selected', function (selected) {\n        modelChangeListeners.forEach(function (listener) {\n          listener(selected);\n        });\n      });\n      \n      $element.addClass('md-row-select');\n    }\n    \n    function disableRowSelection() {\n      self.$$rowSelect = false;\n      \n      if(angular.isFunction(watchListener)) {\n        watchListener();\n      }\n      \n      $element.removeClass('md-row-select');\n    }\n    \n    function resolvePromises() {\n      if(!queue.length) {\n        return $scope.$applyAsync();\n      }\n      \n      queue[0].then(function () {\n        queue.shift();\n        resolvePromises();\n      });\n    }\n    \n    function rowSelect() {\n      if($attrs.hasOwnProperty('mdRowSelect') && $attrs.mdRowSelect === '') {\n        return true;\n      }\n      \n      return self.rowSelect;\n    }\n    \n    function validateModel() {\n      if(!self.selected) {\n        return console.error('Row selection: ngModel is not defined.');\n      }\n      \n      if(!angular.isArray(self.selected)) {\n        return console.error('Row selection: Expected an array. Recived ' + typeof self.selected + '.');\n      }\n      \n      return true;\n    }\n    \n    self.columnCount = function () {\n      return self.getRows($element[0]).reduce(function (count, row) {\n        return row.cells.length > count ? row.cells.length : count;\n      }, 0);\n    };\n    \n    self.getRows = function (element) {\n      return Array.prototype.filter.call(element.rows, function (row) {\n        return !row.classList.contains('ng-leave');\n      });\n    };\n    \n    self.getBodyRows = function () {\n      return Array.prototype.reduce.call($element.prop('tBodies'), function (result, tbody) {\n        return result.concat(self.getRows(tbody));\n      }, []);\n    };\n    \n    self.getElement = function () {\n      return $element;\n    };\n    \n    self.getHeaderRows = function () {\n      return self.getRows($element.prop('tHead'));\n    };\n    \n    self.waitingOnPromise = function () {\n      return !!queue.length;\n    };\n    \n    self.queuePromise = function (promise) {\n      if(!promise) {\n        return;\n      }\n      \n      if(queue.push(angular.isArray(promise) ? $q.all(promise) : $q.when(promise)) === 1) {\n        resolvePromises();\n      }\n    };\n    \n    self.registerModelChangeListener = function (listener) {\n      modelChangeListeners.push(listener);\n    };\n    \n    self.removeModelChangeListener = function (listener) {\n      var index = modelChangeListeners.indexOf(listener);\n      \n      if(index !== -1) {\n        modelChangeListeners.splice(index, 1);\n      }\n    };\n    \n    if($attrs.hasOwnProperty('mdProgress')) {\n      $scope.$watch('$mdTable.progress', self.queuePromise);\n    }\n    \n    $scope.$watch(rowSelect, function (enable) {\n      if(enable && !!validateModel()) {\n        enableRowSelection();\n      } else {\n        disableRowSelection();\n      }\n    });\n  }\n  \n  Controller.$inject = ['$attrs', '$element', '$q', '$scope'];\n  \n  return {\n    bindToController: true,\n    compile: compile,\n    controller: Controller,\n    controllerAs: '$mdTable',\n    restrict: 'A',\n    scope: {\n      progress: '=?mdProgress',\n      selected: '=ngModel',\n      rowSelect: '=mdRowSelect'\n    }\n  };\n}\n\nangular.module('md.data.table').directive('mdTablePagination', mdTablePagination);\n\nfunction mdTablePagination() {\n  \n  function compile(tElement) {\n    tElement.addClass('md-table-pagination');\n  }\n  \n  function Controller($attrs, $scope) {\n    var self = this;\n    \n    self.$label = angular.extend({\n      page: 'Page:',\n      rowsPerPage: 'Rows per page:',\n      of: 'of'\n    }, $scope.$eval(self.label) || {});\n    \n    function isPositive(number) {\n      return number > 0;\n    }\n    \n    function isZero(number) {\n      return number === 0 || number === '0';\n    }\n    \n    self.disableNext = function () {\n      return isZero(self.limit) || !self.hasNext();\n    };\n    \n    self.first = function () {\n      self.page = 1;\n      self.onPaginationChange();\n    };\n    \n    self.hasNext = function () {\n      return self.page * self.limit < self.total;\n    };\n    \n    self.hasPrevious = function () {\n      return self.page > 1;\n    };\n    \n    self.last = function () {\n      self.page = self.pages();\n      self.onPaginationChange();\n    };\n    \n    self.max = function () {\n      return self.hasNext() ? self.page * self.limit : self.total;\n    };\n    \n    self.min = function () {\n      return self.page * self.limit - self.limit;\n    };\n    \n    self.next = function () {\n      self.page++;\n      self.onPaginationChange();\n    };\n    \n    self.onPaginationChange = function () {\n      if(angular.isFunction(self.onPaginate)) {\n        self.onPaginate(self.page, self.limit);\n      }\n    };\n    \n    self.pages = function () {\n      return Math.ceil(self.total / (isZero(self.limit) ? 1 : self.limit));\n    };\n    \n    self.previous = function () {\n      self.page--;\n      self.onPaginationChange();\n    };\n    \n    self.range = function (total) {\n      return new Array(isFinite(total) && isPositive(total) ? total : 1);\n    };\n    \n    self.showBoundaryLinks = function () {\n      if($attrs.hasOwnProperty('mdBoundaryLinks') && $attrs.mdBoundaryLinks === '') {\n        return true;\n      }\n      \n      return self.boundaryLinks;\n    };\n    \n    self.showPageSelect = function () {\n      if($attrs.hasOwnProperty('mdPageSelect') && $attrs.mdPageSelect === '') {\n        return true;\n      }\n      \n      return self.pageSelect;\n    };\n    \n    $scope.$watch('$pagination.limit', function (newValue, oldValue) {\n      if(newValue === oldValue) {\n        return;\n      }\n      \n      // find closest page from previous min\n      self.page = Math.floor(((self.page * oldValue - oldValue) + newValue) / (isZero(newValue) ? 1 : newValue));\n      self.onPaginationChange();\n    });\n  }\n  \n  Controller.$inject = ['$attrs', '$scope'];\n  \n  return {\n    bindToController: {\n      boundaryLinks: '=?mdBoundaryLinks',\n      label: '@?mdLabel',\n      limit: '=mdLimit',\n      page: '=mdPage',\n      pageSelect: '=?mdPageSelect',\n      onPaginate: '=?mdOnPaginate',\n      options: '=mdOptions',\n      total: '@mdTotal'\n    },\n    compile: compile,\n    controller: Controller,\n    controllerAs: '$pagination',\n    restrict: 'E',\n    scope: {},\n    templateUrl: 'md-table-pagination.html'\n  };\n}\n\nangular.module('md.data.table').directive('mdTableProgress', mdTableProgress);\n\nfunction mdTableProgress() {\n\n  function postLink(scope, element, attrs, tableCtrl) {\n    scope.columnCount = tableCtrl.columnCount;\n    scope.deferred = tableCtrl.waitingOnPromise;\n  }\n\n  return {\n    link: postLink,\n    require: '^^mdTable',\n    restrict: 'C',\n    scope: {},\n    templateUrl: 'md-table-progress.html'\n  };\n}\n\n})(window, angular);"]}