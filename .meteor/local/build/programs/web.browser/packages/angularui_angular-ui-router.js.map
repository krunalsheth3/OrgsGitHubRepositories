{"version":3,"sources":["meteor://ðŸ’»app/packages/angularui_angular-ui-router/packages/angularui_angular-ui-router.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4E","file":"/packages/angularui_angular-ui-router.js","sourcesContent":["(function () {\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/angularui:angular-ui-router/release/angular-ui-router.js                                                  //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n/**                                                                                                                   // 1\n * State-based routing for AngularJS                                                                                  // 2\n * @version v0.2.15                                                                                                   // 3\n * @link http://angular-ui.github.com/                                                                                // 4\n * @license MIT License, http://www.opensource.org/licenses/MIT                                                       // 5\n */                                                                                                                   // 6\n                                                                                                                      // 7\n/* commonjs package manager support (eg componentjs) */                                                               // 8\nif (typeof module !== \"undefined\" && typeof exports !== \"undefined\" && module.exports === exports){                   // 9\n  module.exports = 'ui.router';                                                                                       // 10\n}                                                                                                                     // 11\n                                                                                                                      // 12\n(function (window, angular, undefined) {                                                                              // 13\n/*jshint globalstrict:true*/                                                                                          // 14\n/*global angular:false*/                                                                                              // 15\n'use strict';                                                                                                         // 16\n                                                                                                                      // 17\nvar isDefined = angular.isDefined,                                                                                    // 18\n    isFunction = angular.isFunction,                                                                                  // 19\n    isString = angular.isString,                                                                                      // 20\n    isObject = angular.isObject,                                                                                      // 21\n    isArray = angular.isArray,                                                                                        // 22\n    forEach = angular.forEach,                                                                                        // 23\n    extend = angular.extend,                                                                                          // 24\n    copy = angular.copy;                                                                                              // 25\n                                                                                                                      // 26\nfunction inherit(parent, extra) {                                                                                     // 27\n  return extend(new (extend(function() {}, { prototype: parent }))(), extra);                                         // 28\n}                                                                                                                     // 29\n                                                                                                                      // 30\nfunction merge(dst) {                                                                                                 // 31\n  forEach(arguments, function(obj) {                                                                                  // 32\n    if (obj !== dst) {                                                                                                // 33\n      forEach(obj, function(value, key) {                                                                             // 34\n        if (!dst.hasOwnProperty(key)) dst[key] = value;                                                               // 35\n      });                                                                                                             // 36\n    }                                                                                                                 // 37\n  });                                                                                                                 // 38\n  return dst;                                                                                                         // 39\n}                                                                                                                     // 40\n                                                                                                                      // 41\n/**                                                                                                                   // 42\n * Finds the common ancestor path between two states.                                                                 // 43\n *                                                                                                                    // 44\n * @param {Object} first The first state.                                                                             // 45\n * @param {Object} second The second state.                                                                           // 46\n * @return {Array} Returns an array of state names in descending order, not including the root.                       // 47\n */                                                                                                                   // 48\nfunction ancestors(first, second) {                                                                                   // 49\n  var path = [];                                                                                                      // 50\n                                                                                                                      // 51\n  for (var n in first.path) {                                                                                         // 52\n    if (first.path[n] !== second.path[n]) break;                                                                      // 53\n    path.push(first.path[n]);                                                                                         // 54\n  }                                                                                                                   // 55\n  return path;                                                                                                        // 56\n}                                                                                                                     // 57\n                                                                                                                      // 58\n/**                                                                                                                   // 59\n * IE8-safe wrapper for `Object.keys()`.                                                                              // 60\n *                                                                                                                    // 61\n * @param {Object} object A JavaScript object.                                                                        // 62\n * @return {Array} Returns the keys of the object as an array.                                                        // 63\n */                                                                                                                   // 64\nfunction objectKeys(object) {                                                                                         // 65\n  if (Object.keys) {                                                                                                  // 66\n    return Object.keys(object);                                                                                       // 67\n  }                                                                                                                   // 68\n  var result = [];                                                                                                    // 69\n                                                                                                                      // 70\n  forEach(object, function(val, key) {                                                                                // 71\n    result.push(key);                                                                                                 // 72\n  });                                                                                                                 // 73\n  return result;                                                                                                      // 74\n}                                                                                                                     // 75\n                                                                                                                      // 76\n/**                                                                                                                   // 77\n * IE8-safe wrapper for `Array.prototype.indexOf()`.                                                                  // 78\n *                                                                                                                    // 79\n * @param {Array} array A JavaScript array.                                                                           // 80\n * @param {*} value A value to search the array for.                                                                  // 81\n * @return {Number} Returns the array index value of `value`, or `-1` if not present.                                 // 82\n */                                                                                                                   // 83\nfunction indexOf(array, value) {                                                                                      // 84\n  if (Array.prototype.indexOf) {                                                                                      // 85\n    return array.indexOf(value, Number(arguments[2]) || 0);                                                           // 86\n  }                                                                                                                   // 87\n  var len = array.length >>> 0, from = Number(arguments[2]) || 0;                                                     // 88\n  from = (from < 0) ? Math.ceil(from) : Math.floor(from);                                                             // 89\n                                                                                                                      // 90\n  if (from < 0) from += len;                                                                                          // 91\n                                                                                                                      // 92\n  for (; from < len; from++) {                                                                                        // 93\n    if (from in array && array[from] === value) return from;                                                          // 94\n  }                                                                                                                   // 95\n  return -1;                                                                                                          // 96\n}                                                                                                                     // 97\n                                                                                                                      // 98\n/**                                                                                                                   // 99\n * Merges a set of parameters with all parameters inherited between the common parents of the                         // 100\n * current state and a given destination state.                                                                       // 101\n *                                                                                                                    // 102\n * @param {Object} currentParams The value of the current state parameters ($stateParams).                            // 103\n * @param {Object} newParams The set of parameters which will be composited with inherited params.                    // 104\n * @param {Object} $current Internal definition of object representing the current state.                             // 105\n * @param {Object} $to Internal definition of object representing state to transition to.                             // 106\n */                                                                                                                   // 107\nfunction inheritParams(currentParams, newParams, $current, $to) {                                                     // 108\n  var parents = ancestors($current, $to), parentParams, inherited = {}, inheritList = [];                             // 109\n                                                                                                                      // 110\n  for (var i in parents) {                                                                                            // 111\n    if (!parents[i].params) continue;                                                                                 // 112\n    parentParams = objectKeys(parents[i].params);                                                                     // 113\n    if (!parentParams.length) continue;                                                                               // 114\n                                                                                                                      // 115\n    for (var j in parentParams) {                                                                                     // 116\n      if (indexOf(inheritList, parentParams[j]) >= 0) continue;                                                       // 117\n      inheritList.push(parentParams[j]);                                                                              // 118\n      inherited[parentParams[j]] = currentParams[parentParams[j]];                                                    // 119\n    }                                                                                                                 // 120\n  }                                                                                                                   // 121\n  return extend({}, inherited, newParams);                                                                            // 122\n}                                                                                                                     // 123\n                                                                                                                      // 124\n/**                                                                                                                   // 125\n * Performs a non-strict comparison of the subset of two objects, defined by a list of keys.                          // 126\n *                                                                                                                    // 127\n * @param {Object} a The first object.                                                                                // 128\n * @param {Object} b The second object.                                                                               // 129\n * @param {Array} keys The list of keys within each object to compare. If the list is empty or not specified,         // 130\n *                     it defaults to the list of keys in `a`.                                                        // 131\n * @return {Boolean} Returns `true` if the keys match, otherwise `false`.                                             // 132\n */                                                                                                                   // 133\nfunction equalForKeys(a, b, keys) {                                                                                   // 134\n  if (!keys) {                                                                                                        // 135\n    keys = [];                                                                                                        // 136\n    for (var n in a) keys.push(n); // Used instead of Object.keys() for IE8 compatibility                             // 137\n  }                                                                                                                   // 138\n                                                                                                                      // 139\n  for (var i=0; i<keys.length; i++) {                                                                                 // 140\n    var k = keys[i];                                                                                                  // 141\n    if (a[k] != b[k]) return false; // Not '===', values aren't necessarily normalized                                // 142\n  }                                                                                                                   // 143\n  return true;                                                                                                        // 144\n}                                                                                                                     // 145\n                                                                                                                      // 146\n/**                                                                                                                   // 147\n * Returns the subset of an object, based on a list of keys.                                                          // 148\n *                                                                                                                    // 149\n * @param {Array} keys                                                                                                // 150\n * @param {Object} values                                                                                             // 151\n * @return {Boolean} Returns a subset of `values`.                                                                    // 152\n */                                                                                                                   // 153\nfunction filterByKeys(keys, values) {                                                                                 // 154\n  var filtered = {};                                                                                                  // 155\n                                                                                                                      // 156\n  forEach(keys, function (name) {                                                                                     // 157\n    filtered[name] = values[name];                                                                                    // 158\n  });                                                                                                                 // 159\n  return filtered;                                                                                                    // 160\n}                                                                                                                     // 161\n                                                                                                                      // 162\n// like _.indexBy                                                                                                     // 163\n// when you know that your index values will be unique, or you want last-one-in to win                                // 164\nfunction indexBy(array, propName) {                                                                                   // 165\n  var result = {};                                                                                                    // 166\n  forEach(array, function(item) {                                                                                     // 167\n    result[item[propName]] = item;                                                                                    // 168\n  });                                                                                                                 // 169\n  return result;                                                                                                      // 170\n}                                                                                                                     // 171\n                                                                                                                      // 172\n// extracted from underscore.js                                                                                       // 173\n// Return a copy of the object only containing the whitelisted properties.                                            // 174\nfunction pick(obj) {                                                                                                  // 175\n  var copy = {};                                                                                                      // 176\n  var keys = Array.prototype.concat.apply(Array.prototype, Array.prototype.slice.call(arguments, 1));                 // 177\n  forEach(keys, function(key) {                                                                                       // 178\n    if (key in obj) copy[key] = obj[key];                                                                             // 179\n  });                                                                                                                 // 180\n  return copy;                                                                                                        // 181\n}                                                                                                                     // 182\n                                                                                                                      // 183\n// extracted from underscore.js                                                                                       // 184\n// Return a copy of the object omitting the blacklisted properties.                                                   // 185\nfunction omit(obj) {                                                                                                  // 186\n  var copy = {};                                                                                                      // 187\n  var keys = Array.prototype.concat.apply(Array.prototype, Array.prototype.slice.call(arguments, 1));                 // 188\n  for (var key in obj) {                                                                                              // 189\n    if (indexOf(keys, key) == -1) copy[key] = obj[key];                                                               // 190\n  }                                                                                                                   // 191\n  return copy;                                                                                                        // 192\n}                                                                                                                     // 193\n                                                                                                                      // 194\nfunction pluck(collection, key) {                                                                                     // 195\n  var result = isArray(collection) ? [] : {};                                                                         // 196\n                                                                                                                      // 197\n  forEach(collection, function(val, i) {                                                                              // 198\n    result[i] = isFunction(key) ? key(val) : val[key];                                                                // 199\n  });                                                                                                                 // 200\n  return result;                                                                                                      // 201\n}                                                                                                                     // 202\n                                                                                                                      // 203\nfunction filter(collection, callback) {                                                                               // 204\n  var array = isArray(collection);                                                                                    // 205\n  var result = array ? [] : {};                                                                                       // 206\n  forEach(collection, function(val, i) {                                                                              // 207\n    if (callback(val, i)) {                                                                                           // 208\n      result[array ? result.length : i] = val;                                                                        // 209\n    }                                                                                                                 // 210\n  });                                                                                                                 // 211\n  return result;                                                                                                      // 212\n}                                                                                                                     // 213\n                                                                                                                      // 214\nfunction map(collection, callback) {                                                                                  // 215\n  var result = isArray(collection) ? [] : {};                                                                         // 216\n                                                                                                                      // 217\n  forEach(collection, function(val, i) {                                                                              // 218\n    result[i] = callback(val, i);                                                                                     // 219\n  });                                                                                                                 // 220\n  return result;                                                                                                      // 221\n}                                                                                                                     // 222\n                                                                                                                      // 223\n/**                                                                                                                   // 224\n * @ngdoc overview                                                                                                    // 225\n * @name ui.router.util                                                                                               // 226\n *                                                                                                                    // 227\n * @description                                                                                                       // 228\n * # ui.router.util sub-module                                                                                        // 229\n *                                                                                                                    // 230\n * This module is a dependency of other sub-modules. Do not include this module as a dependency                       // 231\n * in your angular app (use {@link ui.router} module instead).                                                        // 232\n *                                                                                                                    // 233\n */                                                                                                                   // 234\nangular.module('ui.router.util', ['ng']);                                                                             // 235\n                                                                                                                      // 236\n/**                                                                                                                   // 237\n * @ngdoc overview                                                                                                    // 238\n * @name ui.router.router                                                                                             // 239\n *                                                                                                                    // 240\n * @requires ui.router.util                                                                                           // 241\n *                                                                                                                    // 242\n * @description                                                                                                       // 243\n * # ui.router.router sub-module                                                                                      // 244\n *                                                                                                                    // 245\n * This module is a dependency of other sub-modules. Do not include this module as a dependency                       // 246\n * in your angular app (use {@link ui.router} module instead).                                                        // 247\n */                                                                                                                   // 248\nangular.module('ui.router.router', ['ui.router.util']);                                                               // 249\n                                                                                                                      // 250\n/**                                                                                                                   // 251\n * @ngdoc overview                                                                                                    // 252\n * @name ui.router.state                                                                                              // 253\n *                                                                                                                    // 254\n * @requires ui.router.router                                                                                         // 255\n * @requires ui.router.util                                                                                           // 256\n *                                                                                                                    // 257\n * @description                                                                                                       // 258\n * # ui.router.state sub-module                                                                                       // 259\n *                                                                                                                    // 260\n * This module is a dependency of the main ui.router module. Do not include this module as a dependency               // 261\n * in your angular app (use {@link ui.router} module instead).                                                        // 262\n *                                                                                                                    // 263\n */                                                                                                                   // 264\nangular.module('ui.router.state', ['ui.router.router', 'ui.router.util']);                                            // 265\n                                                                                                                      // 266\n/**                                                                                                                   // 267\n * @ngdoc overview                                                                                                    // 268\n * @name ui.router                                                                                                    // 269\n *                                                                                                                    // 270\n * @requires ui.router.state                                                                                          // 271\n *                                                                                                                    // 272\n * @description                                                                                                       // 273\n * # ui.router                                                                                                        // 274\n *                                                                                                                    // 275\n * ## The main module for ui.router                                                                                   // 276\n * There are several sub-modules included with the ui.router module, however only this module is needed               // 277\n * as a dependency within your angular app. The other modules are for organization purposes.                          // 278\n *                                                                                                                    // 279\n * The modules are:                                                                                                   // 280\n * * ui.router - the main \"umbrella\" module                                                                           // 281\n * * ui.router.router -                                                                                               // 282\n *                                                                                                                    // 283\n * *You'll need to include **only** this module as the dependency within your angular app.*                           // 284\n *                                                                                                                    // 285\n * <pre>                                                                                                              // 286\n * <!doctype html>                                                                                                    // 287\n * <html ng-app=\"myApp\">                                                                                              // 288\n * <head>                                                                                                             // 289\n *   <script src=\"js/angular.js\"></script>                                                                            // 290\n *   <!-- Include the ui-router script -->                                                                            // 291\n *   <script src=\"js/angular-ui-router.min.js\"></script>                                                              // 292\n *   <script>                                                                                                         // 293\n *     // ...and add 'ui.router' as a dependency                                                                      // 294\n *     var myApp = angular.module('myApp', ['ui.router']);                                                            // 295\n *   </script>                                                                                                        // 296\n * </head>                                                                                                            // 297\n * <body>                                                                                                             // 298\n * </body>                                                                                                            // 299\n * </html>                                                                                                            // 300\n * </pre>                                                                                                             // 301\n */                                                                                                                   // 302\nangular.module('ui.router', ['ui.router.state']);                                                                     // 303\n                                                                                                                      // 304\nangular.module('ui.router.compat', ['ui.router']);                                                                    // 305\n                                                                                                                      // 306\n/**                                                                                                                   // 307\n * @ngdoc object                                                                                                      // 308\n * @name ui.router.util.$resolve                                                                                      // 309\n *                                                                                                                    // 310\n * @requires $q                                                                                                       // 311\n * @requires $injector                                                                                                // 312\n *                                                                                                                    // 313\n * @description                                                                                                       // 314\n * Manages resolution of (acyclic) graphs of promises.                                                                // 315\n */                                                                                                                   // 316\n$Resolve.$inject = ['$q', '$injector'];                                                                               // 317\nfunction $Resolve(  $q,    $injector) {                                                                               // 318\n                                                                                                                      // 319\n  var VISIT_IN_PROGRESS = 1,                                                                                          // 320\n      VISIT_DONE = 2,                                                                                                 // 321\n      NOTHING = {},                                                                                                   // 322\n      NO_DEPENDENCIES = [],                                                                                           // 323\n      NO_LOCALS = NOTHING,                                                                                            // 324\n      NO_PARENT = extend($q.when(NOTHING), { $$promises: NOTHING, $$values: NOTHING });                               // 325\n                                                                                                                      // 326\n                                                                                                                      // 327\n  /**                                                                                                                 // 328\n   * @ngdoc function                                                                                                  // 329\n   * @name ui.router.util.$resolve#study                                                                              // 330\n   * @methodOf ui.router.util.$resolve                                                                                // 331\n   *                                                                                                                  // 332\n   * @description                                                                                                     // 333\n   * Studies a set of invocables that are likely to be used multiple times.                                           // 334\n   * <pre>                                                                                                            // 335\n   * $resolve.study(invocables)(locals, parent, self)                                                                 // 336\n   * </pre>                                                                                                           // 337\n   * is equivalent to                                                                                                 // 338\n   * <pre>                                                                                                            // 339\n   * $resolve.resolve(invocables, locals, parent, self)                                                               // 340\n   * </pre>                                                                                                           // 341\n   * but the former is more efficient (in fact `resolve` just calls `study`                                           // 342\n   * internally).                                                                                                     // 343\n   *                                                                                                                  // 344\n   * @param {object} invocables Invocable objects                                                                     // 345\n   * @return {function} a function to pass in locals, parent and self                                                 // 346\n   */                                                                                                                 // 347\n  this.study = function (invocables) {                                                                                // 348\n    if (!isObject(invocables)) throw new Error(\"'invocables' must be an object\");                                     // 349\n    var invocableKeys = objectKeys(invocables || {});                                                                 // 350\n                                                                                                                      // 351\n    // Perform a topological sort of invocables to build an ordered plan                                              // 352\n    var plan = [], cycle = [], visited = {};                                                                          // 353\n    function visit(value, key) {                                                                                      // 354\n      if (visited[key] === VISIT_DONE) return;                                                                        // 355\n                                                                                                                      // 356\n      cycle.push(key);                                                                                                // 357\n      if (visited[key] === VISIT_IN_PROGRESS) {                                                                       // 358\n        cycle.splice(0, indexOf(cycle, key));                                                                         // 359\n        throw new Error(\"Cyclic dependency: \" + cycle.join(\" -> \"));                                                  // 360\n      }                                                                                                               // 361\n      visited[key] = VISIT_IN_PROGRESS;                                                                               // 362\n                                                                                                                      // 363\n      if (isString(value)) {                                                                                          // 364\n        plan.push(key, [ function() { return $injector.get(value); }], NO_DEPENDENCIES);                              // 365\n      } else {                                                                                                        // 366\n        var params = $injector.annotate(value);                                                                       // 367\n        forEach(params, function (param) {                                                                            // 368\n          if (param !== key && invocables.hasOwnProperty(param)) visit(invocables[param], param);                     // 369\n        });                                                                                                           // 370\n        plan.push(key, value, params);                                                                                // 371\n      }                                                                                                               // 372\n                                                                                                                      // 373\n      cycle.pop();                                                                                                    // 374\n      visited[key] = VISIT_DONE;                                                                                      // 375\n    }                                                                                                                 // 376\n    forEach(invocables, visit);                                                                                       // 377\n    invocables = cycle = visited = null; // plan is all that's required                                               // 378\n                                                                                                                      // 379\n    function isResolve(value) {                                                                                       // 380\n      return isObject(value) && value.then && value.$$promises;                                                       // 381\n    }                                                                                                                 // 382\n                                                                                                                      // 383\n    return function (locals, parent, self) {                                                                          // 384\n      if (isResolve(locals) && self === undefined) {                                                                  // 385\n        self = parent; parent = locals; locals = null;                                                                // 386\n      }                                                                                                               // 387\n      if (!locals) locals = NO_LOCALS;                                                                                // 388\n      else if (!isObject(locals)) {                                                                                   // 389\n        throw new Error(\"'locals' must be an object\");                                                                // 390\n      }                                                                                                               // 391\n      if (!parent) parent = NO_PARENT;                                                                                // 392\n      else if (!isResolve(parent)) {                                                                                  // 393\n        throw new Error(\"'parent' must be a promise returned by $resolve.resolve()\");                                 // 394\n      }                                                                                                               // 395\n                                                                                                                      // 396\n      // To complete the overall resolution, we have to wait for the parent                                           // 397\n      // promise and for the promise for each invokable in our plan.                                                  // 398\n      var resolution = $q.defer(),                                                                                    // 399\n          result = resolution.promise,                                                                                // 400\n          promises = result.$$promises = {},                                                                          // 401\n          values = extend({}, locals),                                                                                // 402\n          wait = 1 + plan.length/3,                                                                                   // 403\n          merged = false;                                                                                             // 404\n                                                                                                                      // 405\n      function done() {                                                                                               // 406\n        // Merge parent values we haven't got yet and publish our own $$values                                        // 407\n        if (!--wait) {                                                                                                // 408\n          if (!merged) merge(values, parent.$$values);                                                                // 409\n          result.$$values = values;                                                                                   // 410\n          result.$$promises = result.$$promises || true; // keep for isResolve()                                      // 411\n          delete result.$$inheritedValues;                                                                            // 412\n          resolution.resolve(values);                                                                                 // 413\n        }                                                                                                             // 414\n      }                                                                                                               // 415\n                                                                                                                      // 416\n      function fail(reason) {                                                                                         // 417\n        result.$$failure = reason;                                                                                    // 418\n        resolution.reject(reason);                                                                                    // 419\n      }                                                                                                               // 420\n                                                                                                                      // 421\n      // Short-circuit if parent has already failed                                                                   // 422\n      if (isDefined(parent.$$failure)) {                                                                              // 423\n        fail(parent.$$failure);                                                                                       // 424\n        return result;                                                                                                // 425\n      }                                                                                                               // 426\n                                                                                                                      // 427\n      if (parent.$$inheritedValues) {                                                                                 // 428\n        merge(values, omit(parent.$$inheritedValues, invocableKeys));                                                 // 429\n      }                                                                                                               // 430\n                                                                                                                      // 431\n      // Merge parent values if the parent has already resolved, or merge                                             // 432\n      // parent promises and wait if the parent resolve is still in progress.                                         // 433\n      extend(promises, parent.$$promises);                                                                            // 434\n      if (parent.$$values) {                                                                                          // 435\n        merged = merge(values, omit(parent.$$values, invocableKeys));                                                 // 436\n        result.$$inheritedValues = omit(parent.$$values, invocableKeys);                                              // 437\n        done();                                                                                                       // 438\n      } else {                                                                                                        // 439\n        if (parent.$$inheritedValues) {                                                                               // 440\n          result.$$inheritedValues = omit(parent.$$inheritedValues, invocableKeys);                                   // 441\n        }                                                                                                             // 442\n        parent.then(done, fail);                                                                                      // 443\n      }                                                                                                               // 444\n                                                                                                                      // 445\n      // Process each invocable in the plan, but ignore any where a local of the same name exists.                    // 446\n      for (var i=0, ii=plan.length; i<ii; i+=3) {                                                                     // 447\n        if (locals.hasOwnProperty(plan[i])) done();                                                                   // 448\n        else invoke(plan[i], plan[i+1], plan[i+2]);                                                                   // 449\n      }                                                                                                               // 450\n                                                                                                                      // 451\n      function invoke(key, invocable, params) {                                                                       // 452\n        // Create a deferred for this invocation. Failures will propagate to the resolution as well.                  // 453\n        var invocation = $q.defer(), waitParams = 0;                                                                  // 454\n        function onfailure(reason) {                                                                                  // 455\n          invocation.reject(reason);                                                                                  // 456\n          fail(reason);                                                                                               // 457\n        }                                                                                                             // 458\n        // Wait for any parameter that we have a promise for (either from parent or from this                         // 459\n        // resolve; in that case study() will have made sure it's ordered before us in the plan).                     // 460\n        forEach(params, function (dep) {                                                                              // 461\n          if (promises.hasOwnProperty(dep) && !locals.hasOwnProperty(dep)) {                                          // 462\n            waitParams++;                                                                                             // 463\n            promises[dep].then(function (result) {                                                                    // 464\n              values[dep] = result;                                                                                   // 465\n              if (!(--waitParams)) proceed();                                                                         // 466\n            }, onfailure);                                                                                            // 467\n          }                                                                                                           // 468\n        });                                                                                                           // 469\n        if (!waitParams) proceed();                                                                                   // 470\n        function proceed() {                                                                                          // 471\n          if (isDefined(result.$$failure)) return;                                                                    // 472\n          try {                                                                                                       // 473\n            invocation.resolve($injector.invoke(invocable, self, values));                                            // 474\n            invocation.promise.then(function (result) {                                                               // 475\n              values[key] = result;                                                                                   // 476\n              done();                                                                                                 // 477\n            }, onfailure);                                                                                            // 478\n          } catch (e) {                                                                                               // 479\n            onfailure(e);                                                                                             // 480\n          }                                                                                                           // 481\n        }                                                                                                             // 482\n        // Publish promise synchronously; invocations further down in the plan may depend on it.                      // 483\n        promises[key] = invocation.promise;                                                                           // 484\n      }                                                                                                               // 485\n                                                                                                                      // 486\n      return result;                                                                                                  // 487\n    };                                                                                                                // 488\n  };                                                                                                                  // 489\n                                                                                                                      // 490\n  /**                                                                                                                 // 491\n   * @ngdoc function                                                                                                  // 492\n   * @name ui.router.util.$resolve#resolve                                                                            // 493\n   * @methodOf ui.router.util.$resolve                                                                                // 494\n   *                                                                                                                  // 495\n   * @description                                                                                                     // 496\n   * Resolves a set of invocables. An invocable is a function to be invoked via                                       // 497\n   * `$injector.invoke()`, and can have an arbitrary number of dependencies.                                          // 498\n   * An invocable can either return a value directly,                                                                 // 499\n   * or a `$q` promise. If a promise is returned it will be resolved and the                                          // 500\n   * resulting value will be used instead. Dependencies of invocables are resolved                                    // 501\n   * (in this order of precedence)                                                                                    // 502\n   *                                                                                                                  // 503\n   * - from the specified `locals`                                                                                    // 504\n   * - from another invocable that is part of this `$resolve` call                                                    // 505\n   * - from an invocable that is inherited from a `parent` call to `$resolve`                                         // 506\n   *   (or recursively                                                                                                // 507\n   * - from any ancestor `$resolve` of that parent).                                                                  // 508\n   *                                                                                                                  // 509\n   * The return value of `$resolve` is a promise for an object that contains                                          // 510\n   * (in this order of precedence)                                                                                    // 511\n   *                                                                                                                  // 512\n   * - any `locals` (if specified)                                                                                    // 513\n   * - the resolved return values of all injectables                                                                  // 514\n   * - any values inherited from a `parent` call to `$resolve` (if specified)                                         // 515\n   *                                                                                                                  // 516\n   * The promise will resolve after the `parent` promise (if any) and all promises                                    // 517\n   * returned by injectables have been resolved. If any invocable                                                     // 518\n   * (or `$injector.invoke`) throws an exception, or if a promise returned by an                                      // 519\n   * invocable is rejected, the `$resolve` promise is immediately rejected with the                                   // 520\n   * same error. A rejection of a `parent` promise (if specified) will likewise be                                    // 521\n   * propagated immediately. Once the `$resolve` promise has been rejected, no                                        // 522\n   * further invocables will be called.                                                                               // 523\n   *                                                                                                                  // 524\n   * Cyclic dependencies between invocables are not permitted and will caues `$resolve`                               // 525\n   * to throw an error. As a special case, an injectable can depend on a parameter                                    // 526\n   * with the same name as the injectable, which will be fulfilled from the `parent`                                  // 527\n   * injectable of the same name. This allows inherited values to be decorated.                                       // 528\n   * Note that in this case any other injectable in the same `$resolve` with the same                                 // 529\n   * dependency would see the decorated value, not the inherited value.                                               // 530\n   *                                                                                                                  // 531\n   * Note that missing dependencies -- unlike cyclic dependencies -- will cause an                                    // 532\n   * (asynchronous) rejection of the `$resolve` promise rather than a (synchronous)                                   // 533\n   * exception.                                                                                                       // 534\n   *                                                                                                                  // 535\n   * Invocables are invoked eagerly as soon as all dependencies are available.                                        // 536\n   * This is true even for dependencies inherited from a `parent` call to `$resolve`.                                 // 537\n   *                                                                                                                  // 538\n   * As a special case, an invocable can be a string, in which case it is taken to                                    // 539\n   * be a service name to be passed to `$injector.get()`. This is supported primarily                                 // 540\n   * for backwards-compatibility with the `resolve` property of `$routeProvider`                                      // 541\n   * routes.                                                                                                          // 542\n   *                                                                                                                  // 543\n   * @param {object} invocables functions to invoke or                                                                // 544\n   * `$injector` services to fetch.                                                                                   // 545\n   * @param {object} locals  values to make available to the injectables                                              // 546\n   * @param {object} parent  a promise returned by another call to `$resolve`.                                        // 547\n   * @param {object} self  the `this` for the invoked methods                                                         // 548\n   * @return {object} Promise for an object that contains the resolved return value                                   // 549\n   * of all invocables, as well as any inherited and local values.                                                    // 550\n   */                                                                                                                 // 551\n  this.resolve = function (invocables, locals, parent, self) {                                                        // 552\n    return this.study(invocables)(locals, parent, self);                                                              // 553\n  };                                                                                                                  // 554\n}                                                                                                                     // 555\n                                                                                                                      // 556\nangular.module('ui.router.util').service('$resolve', $Resolve);                                                       // 557\n                                                                                                                      // 558\n                                                                                                                      // 559\n/**                                                                                                                   // 560\n * @ngdoc object                                                                                                      // 561\n * @name ui.router.util.$templateFactory                                                                              // 562\n *                                                                                                                    // 563\n * @requires $http                                                                                                    // 564\n * @requires $templateCache                                                                                           // 565\n * @requires $injector                                                                                                // 566\n *                                                                                                                    // 567\n * @description                                                                                                       // 568\n * Service. Manages loading of templates.                                                                             // 569\n */                                                                                                                   // 570\n$TemplateFactory.$inject = ['$http', '$templateCache', '$injector'];                                                  // 571\nfunction $TemplateFactory(  $http,   $templateCache,   $injector) {                                                   // 572\n                                                                                                                      // 573\n  /**                                                                                                                 // 574\n   * @ngdoc function                                                                                                  // 575\n   * @name ui.router.util.$templateFactory#fromConfig                                                                 // 576\n   * @methodOf ui.router.util.$templateFactory                                                                        // 577\n   *                                                                                                                  // 578\n   * @description                                                                                                     // 579\n   * Creates a template from a configuration object.                                                                  // 580\n   *                                                                                                                  // 581\n   * @param {object} config Configuration object for which to load a template.                                        // 582\n   * The following properties are search in the specified order, and the first one                                    // 583\n   * that is defined is used to create the template:                                                                  // 584\n   *                                                                                                                  // 585\n   * @param {string|object} config.template html string template or function to                                       // 586\n   * load via {@link ui.router.util.$templateFactory#fromString fromString}.                                          // 587\n   * @param {string|object} config.templateUrl url to load or a function returning                                    // 588\n   * the url to load via {@link ui.router.util.$templateFactory#fromUrl fromUrl}.                                     // 589\n   * @param {Function} config.templateProvider function to invoke via                                                 // 590\n   * {@link ui.router.util.$templateFactory#fromProvider fromProvider}.                                               // 591\n   * @param {object} params  Parameters to pass to the template function.                                             // 592\n   * @param {object} locals Locals to pass to `invoke` if the template is loaded                                      // 593\n   * via a `templateProvider`. Defaults to `{ params: params }`.                                                      // 594\n   *                                                                                                                  // 595\n   * @return {string|object}  The template html as a string, or a promise for                                         // 596\n   * that string,or `null` if no template is configured.                                                              // 597\n   */                                                                                                                 // 598\n  this.fromConfig = function (config, params, locals) {                                                               // 599\n    return (                                                                                                          // 600\n      isDefined(config.template) ? this.fromString(config.template, params) :                                         // 601\n      isDefined(config.templateUrl) ? this.fromUrl(config.templateUrl, params) :                                      // 602\n      isDefined(config.templateProvider) ? this.fromProvider(config.templateProvider, params, locals) :               // 603\n      null                                                                                                            // 604\n    );                                                                                                                // 605\n  };                                                                                                                  // 606\n                                                                                                                      // 607\n  /**                                                                                                                 // 608\n   * @ngdoc function                                                                                                  // 609\n   * @name ui.router.util.$templateFactory#fromString                                                                 // 610\n   * @methodOf ui.router.util.$templateFactory                                                                        // 611\n   *                                                                                                                  // 612\n   * @description                                                                                                     // 613\n   * Creates a template from a string or a function returning a string.                                               // 614\n   *                                                                                                                  // 615\n   * @param {string|object} template html template as a string or function that                                       // 616\n   * returns an html template as a string.                                                                            // 617\n   * @param {object} params Parameters to pass to the template function.                                              // 618\n   *                                                                                                                  // 619\n   * @return {string|object} The template html as a string, or a promise for that                                     // 620\n   * string.                                                                                                          // 621\n   */                                                                                                                 // 622\n  this.fromString = function (template, params) {                                                                     // 623\n    return isFunction(template) ? template(params) : template;                                                        // 624\n  };                                                                                                                  // 625\n                                                                                                                      // 626\n  /**                                                                                                                 // 627\n   * @ngdoc function                                                                                                  // 628\n   * @name ui.router.util.$templateFactory#fromUrl                                                                    // 629\n   * @methodOf ui.router.util.$templateFactory                                                                        // 630\n   *                                                                                                                  // 631\n   * @description                                                                                                     // 632\n   * Loads a template from the a URL via `$http` and `$templateCache`.                                                // 633\n   *                                                                                                                  // 634\n   * @param {string|Function} url url of the template to load, or a function                                          // 635\n   * that returns a url.                                                                                              // 636\n   * @param {Object} params Parameters to pass to the url function.                                                   // 637\n   * @return {string|Promise.<string>} The template html as a string, or a promise                                    // 638\n   * for that string.                                                                                                 // 639\n   */                                                                                                                 // 640\n  this.fromUrl = function (url, params) {                                                                             // 641\n    if (isFunction(url)) url = url(params);                                                                           // 642\n    if (url == null) return null;                                                                                     // 643\n    else return $http                                                                                                 // 644\n        .get(url, { cache: $templateCache, headers: { Accept: 'text/html' }})                                         // 645\n        .then(function(response) { return response.data; });                                                          // 646\n  };                                                                                                                  // 647\n                                                                                                                      // 648\n  /**                                                                                                                 // 649\n   * @ngdoc function                                                                                                  // 650\n   * @name ui.router.util.$templateFactory#fromProvider                                                               // 651\n   * @methodOf ui.router.util.$templateFactory                                                                        // 652\n   *                                                                                                                  // 653\n   * @description                                                                                                     // 654\n   * Creates a template by invoking an injectable provider function.                                                  // 655\n   *                                                                                                                  // 656\n   * @param {Function} provider Function to invoke via `$injector.invoke`                                             // 657\n   * @param {Object} params Parameters for the template.                                                              // 658\n   * @param {Object} locals Locals to pass to `invoke`. Defaults to                                                   // 659\n   * `{ params: params }`.                                                                                            // 660\n   * @return {string|Promise.<string>} The template html as a string, or a promise                                    // 661\n   * for that string.                                                                                                 // 662\n   */                                                                                                                 // 663\n  this.fromProvider = function (provider, params, locals) {                                                           // 664\n    return $injector.invoke(provider, null, locals || { params: params });                                            // 665\n  };                                                                                                                  // 666\n}                                                                                                                     // 667\n                                                                                                                      // 668\nangular.module('ui.router.util').service('$templateFactory', $TemplateFactory);                                       // 669\n                                                                                                                      // 670\nvar $$UMFP; // reference to $UrlMatcherFactoryProvider                                                                // 671\n                                                                                                                      // 672\n/**                                                                                                                   // 673\n * @ngdoc object                                                                                                      // 674\n * @name ui.router.util.type:UrlMatcher                                                                               // 675\n *                                                                                                                    // 676\n * @description                                                                                                       // 677\n * Matches URLs against patterns and extracts named parameters from the path or the search                            // 678\n * part of the URL. A URL pattern consists of a path pattern, optionally followed by '?' and a list                   // 679\n * of search parameters. Multiple search parameter names are separated by '&'. Search parameters                      // 680\n * do not influence whether or not a URL is matched, but their values are passed through into                         // 681\n * the matched parameters returned by {@link ui.router.util.type:UrlMatcher#methods_exec exec}.                       // 682\n *                                                                                                                    // 683\n * Path parameter placeholders can be specified using simple colon/catch-all syntax or curly brace                    // 684\n * syntax, which optionally allows a regular expression for the parameter to be specified:                            // 685\n *                                                                                                                    // 686\n * * `':'` name - colon placeholder                                                                                   // 687\n * * `'*'` name - catch-all placeholder                                                                               // 688\n * * `'{' name '}'` - curly placeholder                                                                               // 689\n * * `'{' name ':' regexp|type '}'` - curly placeholder with regexp or type name. Should the                          // 690\n *   regexp itself contain curly braces, they must be in matched pairs or escaped with a backslash.                   // 691\n *                                                                                                                    // 692\n * Parameter names may contain only word characters (latin letters, digits, and underscore) and                       // 693\n * must be unique within the pattern (across both path and search parameters). For colon                              // 694\n * placeholders or curly placeholders without an explicit regexp, a path parameter matches any                        // 695\n * number of characters other than '/'. For catch-all placeholders the path parameter matches                         // 696\n * any number of characters.                                                                                          // 697\n *                                                                                                                    // 698\n * Examples:                                                                                                          // 699\n *                                                                                                                    // 700\n * * `'/hello/'` - Matches only if the path is exactly '/hello/'. There is no special treatment for                   // 701\n *   trailing slashes, and patterns have to match the entire path, not just a prefix.                                 // 702\n * * `'/user/:id'` - Matches '/user/bob' or '/user/1234!!!' or even '/user/' but not '/user' or                       // 703\n *   '/user/bob/details'. The second path segment will be captured as the parameter 'id'.                             // 704\n * * `'/user/{id}'` - Same as the previous example, but using curly brace syntax.                                     // 705\n * * `'/user/{id:[^/]*}'` - Same as the previous example.                                                             // 706\n * * `'/user/{id:[0-9a-fA-F]{1,8}}'` - Similar to the previous example, but only matches if the id                    // 707\n *   parameter consists of 1 to 8 hex digits.                                                                         // 708\n * * `'/files/{path:.*}'` - Matches any URL starting with '/files/' and captures the rest of the                      // 709\n *   path into the parameter 'path'.                                                                                  // 710\n * * `'/files/*path'` - ditto.                                                                                        // 711\n * * `'/calendar/{start:date}'` - Matches \"/calendar/2014-11-12\" (because the pattern defined                         // 712\n *   in the built-in  `date` Type matches `2014-11-12`) and provides a Date object in $stateParams.start              // 713\n *                                                                                                                    // 714\n * @param {string} pattern  The pattern to compile into a matcher.                                                    // 715\n * @param {Object} config  A configuration object hash:                                                               // 716\n * @param {Object=} parentMatcher Used to concatenate the pattern/config onto                                         // 717\n *   an existing UrlMatcher                                                                                           // 718\n *                                                                                                                    // 719\n * * `caseInsensitive` - `true` if URL matching should be case insensitive, otherwise `false`, the default value (for backward compatibility) is `false`.\n * * `strict` - `false` if matching against a URL with a trailing slash should be treated as equivalent to a URL without a trailing slash, the default value is `true`.\n *                                                                                                                    // 722\n * @property {string} prefix  A static prefix of this pattern. The matcher guarantees that any                        // 723\n *   URL matching this matcher (i.e. any string for which {@link ui.router.util.type:UrlMatcher#methods_exec exec()} returns\n *   non-null) will start with this prefix.                                                                           // 725\n *                                                                                                                    // 726\n * @property {string} source  The pattern that was passed into the constructor                                        // 727\n *                                                                                                                    // 728\n * @property {string} sourcePath  The path portion of the source property                                             // 729\n *                                                                                                                    // 730\n * @property {string} sourceSearch  The search portion of the source property                                         // 731\n *                                                                                                                    // 732\n * @property {string} regex  The constructed regex that will be used to match against the url when                    // 733\n *   it is time to determine which url will match.                                                                    // 734\n *                                                                                                                    // 735\n * @returns {Object}  New `UrlMatcher` object                                                                         // 736\n */                                                                                                                   // 737\nfunction UrlMatcher(pattern, config, parentMatcher) {                                                                 // 738\n  config = extend({ params: {} }, isObject(config) ? config : {});                                                    // 739\n                                                                                                                      // 740\n  // Find all placeholders and create a compiled pattern, using either classic or curly syntax:                       // 741\n  //   '*' name                                                                                                       // 742\n  //   ':' name                                                                                                       // 743\n  //   '{' name '}'                                                                                                   // 744\n  //   '{' name ':' regexp '}'                                                                                        // 745\n  // The regular expression is somewhat complicated due to the need to allow curly braces                             // 746\n  // inside the regular expression. The placeholder regexp breaks down as follows:                                    // 747\n  //    ([:*])([\\w\\[\\]]+)              - classic placeholder ($1 / $2) (search version has - for snake-case)          // 748\n  //    \\{([\\w\\[\\]]+)(?:\\:( ... ))?\\}  - curly brace placeholder ($3) with optional regexp/type ... ($4) (search version has - for snake-case\n  //    (?: ... | ... | ... )+         - the regexp consists of any number of atoms, an atom being either             // 750\n  //    [^{}\\\\]+                       - anything other than curly braces or backslash                                // 751\n  //    \\\\.                            - a backslash escape                                                           // 752\n  //    \\{(?:[^{}\\\\]+|\\\\.)*\\}          - a matched set of curly braces containing other atoms                         // 753\n  var placeholder       = /([:*])([\\w\\[\\]]+)|\\{([\\w\\[\\]]+)(?:\\:((?:[^{}\\\\]+|\\\\.|\\{(?:[^{}\\\\]+|\\\\.)*\\})+))?\\}/g,       // 754\n      searchPlaceholder = /([:]?)([\\w\\[\\]-]+)|\\{([\\w\\[\\]-]+)(?:\\:((?:[^{}\\\\]+|\\\\.|\\{(?:[^{}\\\\]+|\\\\.)*\\})+))?\\}/g,     // 755\n      compiled = '^', last = 0, m,                                                                                    // 756\n      segments = this.segments = [],                                                                                  // 757\n      parentParams = parentMatcher ? parentMatcher.params : {},                                                       // 758\n      params = this.params = parentMatcher ? parentMatcher.params.$$new() : new $$UMFP.ParamSet(),                    // 759\n      paramNames = [];                                                                                                // 760\n                                                                                                                      // 761\n  function addParameter(id, type, config, location) {                                                                 // 762\n    paramNames.push(id);                                                                                              // 763\n    if (parentParams[id]) return parentParams[id];                                                                    // 764\n    if (!/^\\w+(-+\\w+)*(?:\\[\\])?$/.test(id)) throw new Error(\"Invalid parameter name '\" + id + \"' in pattern '\" + pattern + \"'\");\n    if (params[id]) throw new Error(\"Duplicate parameter name '\" + id + \"' in pattern '\" + pattern + \"'\");            // 766\n    params[id] = new $$UMFP.Param(id, type, config, location);                                                        // 767\n    return params[id];                                                                                                // 768\n  }                                                                                                                   // 769\n                                                                                                                      // 770\n  function quoteRegExp(string, pattern, squash, optional) {                                                           // 771\n    var surroundPattern = ['',''], result = string.replace(/[\\\\\\[\\]\\^$*+?.()|{}]/g, \"\\\\$&\");                          // 772\n    if (!pattern) return result;                                                                                      // 773\n    switch(squash) {                                                                                                  // 774\n      case false: surroundPattern = ['(', ')' + (optional ? \"?\" : \"\")]; break;                                        // 775\n      case true:  surroundPattern = ['?(', ')?']; break;                                                              // 776\n      default:    surroundPattern = ['(' + squash + \"|\", ')?']; break;                                                // 777\n    }                                                                                                                 // 778\n    return result + surroundPattern[0] + pattern + surroundPattern[1];                                                // 779\n  }                                                                                                                   // 780\n                                                                                                                      // 781\n  this.source = pattern;                                                                                              // 782\n                                                                                                                      // 783\n  // Split into static segments separated by path parameter placeholders.                                             // 784\n  // The number of segments is always 1 more than the number of parameters.                                           // 785\n  function matchDetails(m, isSearch) {                                                                                // 786\n    var id, regexp, segment, type, cfg, arrayMode;                                                                    // 787\n    id          = m[2] || m[3]; // IE[78] returns '' for unmatched groups instead of null                             // 788\n    cfg         = config.params[id];                                                                                  // 789\n    segment     = pattern.substring(last, m.index);                                                                   // 790\n    regexp      = isSearch ? m[4] : m[4] || (m[1] == '*' ? '.*' : null);                                              // 791\n    type        = $$UMFP.type(regexp || \"string\") || inherit($$UMFP.type(\"string\"), { pattern: new RegExp(regexp, config.caseInsensitive ? 'i' : undefined) });\n    return {                                                                                                          // 793\n      id: id, regexp: regexp, segment: segment, type: type, cfg: cfg                                                  // 794\n    };                                                                                                                // 795\n  }                                                                                                                   // 796\n                                                                                                                      // 797\n  var p, param, segment;                                                                                              // 798\n  while ((m = placeholder.exec(pattern))) {                                                                           // 799\n    p = matchDetails(m, false);                                                                                       // 800\n    if (p.segment.indexOf('?') >= 0) break; // we're into the search part                                             // 801\n                                                                                                                      // 802\n    param = addParameter(p.id, p.type, p.cfg, \"path\");                                                                // 803\n    compiled += quoteRegExp(p.segment, param.type.pattern.source, param.squash, param.isOptional);                    // 804\n    segments.push(p.segment);                                                                                         // 805\n    last = placeholder.lastIndex;                                                                                     // 806\n  }                                                                                                                   // 807\n  segment = pattern.substring(last);                                                                                  // 808\n                                                                                                                      // 809\n  // Find any search parameter names and remove them from the last segment                                            // 810\n  var i = segment.indexOf('?');                                                                                       // 811\n                                                                                                                      // 812\n  if (i >= 0) {                                                                                                       // 813\n    var search = this.sourceSearch = segment.substring(i);                                                            // 814\n    segment = segment.substring(0, i);                                                                                // 815\n    this.sourcePath = pattern.substring(0, last + i);                                                                 // 816\n                                                                                                                      // 817\n    if (search.length > 0) {                                                                                          // 818\n      last = 0;                                                                                                       // 819\n      while ((m = searchPlaceholder.exec(search))) {                                                                  // 820\n        p = matchDetails(m, true);                                                                                    // 821\n        param = addParameter(p.id, p.type, p.cfg, \"search\");                                                          // 822\n        last = placeholder.lastIndex;                                                                                 // 823\n        // check if ?&                                                                                                // 824\n      }                                                                                                               // 825\n    }                                                                                                                 // 826\n  } else {                                                                                                            // 827\n    this.sourcePath = pattern;                                                                                        // 828\n    this.sourceSearch = '';                                                                                           // 829\n  }                                                                                                                   // 830\n                                                                                                                      // 831\n  compiled += quoteRegExp(segment) + (config.strict === false ? '\\/?' : '') + '$';                                    // 832\n  segments.push(segment);                                                                                             // 833\n                                                                                                                      // 834\n  this.regexp = new RegExp(compiled, config.caseInsensitive ? 'i' : undefined);                                       // 835\n  this.prefix = segments[0];                                                                                          // 836\n  this.$$paramNames = paramNames;                                                                                     // 837\n}                                                                                                                     // 838\n                                                                                                                      // 839\n/**                                                                                                                   // 840\n * @ngdoc function                                                                                                    // 841\n * @name ui.router.util.type:UrlMatcher#concat                                                                        // 842\n * @methodOf ui.router.util.type:UrlMatcher                                                                           // 843\n *                                                                                                                    // 844\n * @description                                                                                                       // 845\n * Returns a new matcher for a pattern constructed by appending the path part and adding the                          // 846\n * search parameters of the specified pattern to this pattern. The current pattern is not                             // 847\n * modified. This can be understood as creating a pattern for URLs that are relative to (or                           // 848\n * suffixes of) the current pattern.                                                                                  // 849\n *                                                                                                                    // 850\n * @example                                                                                                           // 851\n * The following two matchers are equivalent:                                                                         // 852\n * <pre>                                                                                                              // 853\n * new UrlMatcher('/user/{id}?q').concat('/details?date');                                                            // 854\n * new UrlMatcher('/user/{id}/details?q&date');                                                                       // 855\n * </pre>                                                                                                             // 856\n *                                                                                                                    // 857\n * @param {string} pattern  The pattern to append.                                                                    // 858\n * @param {Object} config  An object hash of the configuration for the matcher.                                       // 859\n * @returns {UrlMatcher}  A matcher for the concatenated pattern.                                                     // 860\n */                                                                                                                   // 861\nUrlMatcher.prototype.concat = function (pattern, config) {                                                            // 862\n  // Because order of search parameters is irrelevant, we can add our own search                                      // 863\n  // parameters to the end of the new pattern. Parse the new pattern by itself                                        // 864\n  // and then join the bits together, but it's much easier to do this on a string level.                              // 865\n  var defaultConfig = {                                                                                               // 866\n    caseInsensitive: $$UMFP.caseInsensitive(),                                                                        // 867\n    strict: $$UMFP.strictMode(),                                                                                      // 868\n    squash: $$UMFP.defaultSquashPolicy()                                                                              // 869\n  };                                                                                                                  // 870\n  return new UrlMatcher(this.sourcePath + pattern + this.sourceSearch, extend(defaultConfig, config), this);          // 871\n};                                                                                                                    // 872\n                                                                                                                      // 873\nUrlMatcher.prototype.toString = function () {                                                                         // 874\n  return this.source;                                                                                                 // 875\n};                                                                                                                    // 876\n                                                                                                                      // 877\n/**                                                                                                                   // 878\n * @ngdoc function                                                                                                    // 879\n * @name ui.router.util.type:UrlMatcher#exec                                                                          // 880\n * @methodOf ui.router.util.type:UrlMatcher                                                                           // 881\n *                                                                                                                    // 882\n * @description                                                                                                       // 883\n * Tests the specified path against this matcher, and returns an object containing the captured                       // 884\n * parameter values, or null if the path does not match. The returned object contains the values                      // 885\n * of any search parameters that are mentioned in the pattern, but their value may be null if                         // 886\n * they are not present in `searchParams`. This means that search parameters are always treated                       // 887\n * as optional.                                                                                                       // 888\n *                                                                                                                    // 889\n * @example                                                                                                           // 890\n * <pre>                                                                                                              // 891\n * new UrlMatcher('/user/{id}?q&r').exec('/user/bob', {                                                               // 892\n *   x: '1', q: 'hello'                                                                                               // 893\n * });                                                                                                                // 894\n * // returns { id: 'bob', q: 'hello', r: null }                                                                      // 895\n * </pre>                                                                                                             // 896\n *                                                                                                                    // 897\n * @param {string} path  The URL path to match, e.g. `$location.path()`.                                              // 898\n * @param {Object} searchParams  URL search parameters, e.g. `$location.search()`.                                    // 899\n * @returns {Object}  The captured parameter values.                                                                  // 900\n */                                                                                                                   // 901\nUrlMatcher.prototype.exec = function (path, searchParams) {                                                           // 902\n  var m = this.regexp.exec(path);                                                                                     // 903\n  if (!m) return null;                                                                                                // 904\n  searchParams = searchParams || {};                                                                                  // 905\n                                                                                                                      // 906\n  var paramNames = this.parameters(), nTotal = paramNames.length,                                                     // 907\n    nPath = this.segments.length - 1,                                                                                 // 908\n    values = {}, i, j, cfg, paramName;                                                                                // 909\n                                                                                                                      // 910\n  if (nPath !== m.length - 1) throw new Error(\"Unbalanced capture group in route '\" + this.source + \"'\");             // 911\n                                                                                                                      // 912\n  function decodePathArray(string) {                                                                                  // 913\n    function reverseString(str) { return str.split(\"\").reverse().join(\"\"); }                                          // 914\n    function unquoteDashes(str) { return str.replace(/\\\\-/g, \"-\"); }                                                  // 915\n                                                                                                                      // 916\n    var split = reverseString(string).split(/-(?!\\\\)/);                                                               // 917\n    var allReversed = map(split, reverseString);                                                                      // 918\n    return map(allReversed, unquoteDashes).reverse();                                                                 // 919\n  }                                                                                                                   // 920\n                                                                                                                      // 921\n  for (i = 0; i < nPath; i++) {                                                                                       // 922\n    paramName = paramNames[i];                                                                                        // 923\n    var param = this.params[paramName];                                                                               // 924\n    var paramVal = m[i+1];                                                                                            // 925\n    // if the param value matches a pre-replace pair, replace the value before decoding.                              // 926\n    for (j = 0; j < param.replace; j++) {                                                                             // 927\n      if (param.replace[j].from === paramVal) paramVal = param.replace[j].to;                                         // 928\n    }                                                                                                                 // 929\n    if (paramVal && param.array === true) paramVal = decodePathArray(paramVal);                                       // 930\n    values[paramName] = param.value(paramVal);                                                                        // 931\n  }                                                                                                                   // 932\n  for (/**/; i < nTotal; i++) {                                                                                       // 933\n    paramName = paramNames[i];                                                                                        // 934\n    values[paramName] = this.params[paramName].value(searchParams[paramName]);                                        // 935\n  }                                                                                                                   // 936\n                                                                                                                      // 937\n  return values;                                                                                                      // 938\n};                                                                                                                    // 939\n                                                                                                                      // 940\n/**                                                                                                                   // 941\n * @ngdoc function                                                                                                    // 942\n * @name ui.router.util.type:UrlMatcher#parameters                                                                    // 943\n * @methodOf ui.router.util.type:UrlMatcher                                                                           // 944\n *                                                                                                                    // 945\n * @description                                                                                                       // 946\n * Returns the names of all path and search parameters of this pattern in an unspecified order.                       // 947\n *                                                                                                                    // 948\n * @returns {Array.<string>}  An array of parameter names. Must be treated as read-only. If the                       // 949\n *    pattern has no parameters, an empty array is returned.                                                          // 950\n */                                                                                                                   // 951\nUrlMatcher.prototype.parameters = function (param) {                                                                  // 952\n  if (!isDefined(param)) return this.$$paramNames;                                                                    // 953\n  return this.params[param] || null;                                                                                  // 954\n};                                                                                                                    // 955\n                                                                                                                      // 956\n/**                                                                                                                   // 957\n * @ngdoc function                                                                                                    // 958\n * @name ui.router.util.type:UrlMatcher#validate                                                                      // 959\n * @methodOf ui.router.util.type:UrlMatcher                                                                           // 960\n *                                                                                                                    // 961\n * @description                                                                                                       // 962\n * Checks an object hash of parameters to validate their correctness according to the parameter                       // 963\n * types of this `UrlMatcher`.                                                                                        // 964\n *                                                                                                                    // 965\n * @param {Object} params The object hash of parameters to validate.                                                  // 966\n * @returns {boolean} Returns `true` if `params` validates, otherwise `false`.                                        // 967\n */                                                                                                                   // 968\nUrlMatcher.prototype.validates = function (params) {                                                                  // 969\n  return this.params.$$validates(params);                                                                             // 970\n};                                                                                                                    // 971\n                                                                                                                      // 972\n/**                                                                                                                   // 973\n * @ngdoc function                                                                                                    // 974\n * @name ui.router.util.type:UrlMatcher#format                                                                        // 975\n * @methodOf ui.router.util.type:UrlMatcher                                                                           // 976\n *                                                                                                                    // 977\n * @description                                                                                                       // 978\n * Creates a URL that matches this pattern by substituting the specified values                                       // 979\n * for the path and search parameters. Null values for path parameters are                                            // 980\n * treated as empty strings.                                                                                          // 981\n *                                                                                                                    // 982\n * @example                                                                                                           // 983\n * <pre>                                                                                                              // 984\n * new UrlMatcher('/user/{id}?q').format({ id:'bob', q:'yes' });                                                      // 985\n * // returns '/user/bob?q=yes'                                                                                       // 986\n * </pre>                                                                                                             // 987\n *                                                                                                                    // 988\n * @param {Object} values  the values to substitute for the parameters in this pattern.                               // 989\n * @returns {string}  the formatted URL (path and optionally search part).                                            // 990\n */                                                                                                                   // 991\nUrlMatcher.prototype.format = function (values) {                                                                     // 992\n  values = values || {};                                                                                              // 993\n  var segments = this.segments, params = this.parameters(), paramset = this.params;                                   // 994\n  if (!this.validates(values)) return null;                                                                           // 995\n                                                                                                                      // 996\n  var i, search = false, nPath = segments.length - 1, nTotal = params.length, result = segments[0];                   // 997\n                                                                                                                      // 998\n  function encodeDashes(str) { // Replace dashes with encoded \"\\-\"                                                    // 999\n    return encodeURIComponent(str).replace(/-/g, function(c) { return '%5C%' + c.charCodeAt(0).toString(16).toUpperCase(); });\n  }                                                                                                                   // 1001\n                                                                                                                      // 1002\n  for (i = 0; i < nTotal; i++) {                                                                                      // 1003\n    var isPathParam = i < nPath;                                                                                      // 1004\n    var name = params[i], param = paramset[name], value = param.value(values[name]);                                  // 1005\n    var isDefaultValue = param.isOptional && param.type.equals(param.value(), value);                                 // 1006\n    var squash = isDefaultValue ? param.squash : false;                                                               // 1007\n    var encoded = param.type.encode(value);                                                                           // 1008\n                                                                                                                      // 1009\n    if (isPathParam) {                                                                                                // 1010\n      var nextSegment = segments[i + 1];                                                                              // 1011\n      if (squash === false) {                                                                                         // 1012\n        if (encoded != null) {                                                                                        // 1013\n          if (isArray(encoded)) {                                                                                     // 1014\n            result += map(encoded, encodeDashes).join(\"-\");                                                           // 1015\n          } else {                                                                                                    // 1016\n            result += encodeURIComponent(encoded);                                                                    // 1017\n          }                                                                                                           // 1018\n        }                                                                                                             // 1019\n        result += nextSegment;                                                                                        // 1020\n      } else if (squash === true) {                                                                                   // 1021\n        var capture = result.match(/\\/$/) ? /\\/?(.*)/ : /(.*)/;                                                       // 1022\n        result += nextSegment.match(capture)[1];                                                                      // 1023\n      } else if (isString(squash)) {                                                                                  // 1024\n        result += squash + nextSegment;                                                                               // 1025\n      }                                                                                                               // 1026\n    } else {                                                                                                          // 1027\n      if (encoded == null || (isDefaultValue && squash !== false)) continue;                                          // 1028\n      if (!isArray(encoded)) encoded = [ encoded ];                                                                   // 1029\n      encoded = map(encoded, encodeURIComponent).join('&' + name + '=');                                              // 1030\n      result += (search ? '&' : '?') + (name + '=' + encoded);                                                        // 1031\n      search = true;                                                                                                  // 1032\n    }                                                                                                                 // 1033\n  }                                                                                                                   // 1034\n                                                                                                                      // 1035\n  return result;                                                                                                      // 1036\n};                                                                                                                    // 1037\n                                                                                                                      // 1038\n/**                                                                                                                   // 1039\n * @ngdoc object                                                                                                      // 1040\n * @name ui.router.util.type:Type                                                                                     // 1041\n *                                                                                                                    // 1042\n * @description                                                                                                       // 1043\n * Implements an interface to define custom parameter types that can be decoded from and encoded to                   // 1044\n * string parameters matched in a URL. Used by {@link ui.router.util.type:UrlMatcher `UrlMatcher`}                    // 1045\n * objects when matching or formatting URLs, or comparing or validating parameter values.                             // 1046\n *                                                                                                                    // 1047\n * See {@link ui.router.util.$urlMatcherFactory#methods_type `$urlMatcherFactory#type()`} for more                    // 1048\n * information on registering custom types.                                                                           // 1049\n *                                                                                                                    // 1050\n * @param {Object} config  A configuration object which contains the custom type definition.  The object's            // 1051\n *        properties will override the default methods and/or pattern in `Type`'s public interface.                   // 1052\n * @example                                                                                                           // 1053\n * <pre>                                                                                                              // 1054\n * {                                                                                                                  // 1055\n *   decode: function(val) { return parseInt(val, 10); },                                                             // 1056\n *   encode: function(val) { return val && val.toString(); },                                                         // 1057\n *   equals: function(a, b) { return this.is(a) && a === b; },                                                        // 1058\n *   is: function(val) { return angular.isNumber(val) isFinite(val) && val % 1 === 0; },                              // 1059\n *   pattern: /\\d+/                                                                                                   // 1060\n * }                                                                                                                  // 1061\n * </pre>                                                                                                             // 1062\n *                                                                                                                    // 1063\n * @property {RegExp} pattern The regular expression pattern used to match values of this type when                   // 1064\n *           coming from a substring of a URL.                                                                        // 1065\n *                                                                                                                    // 1066\n * @returns {Object}  Returns a new `Type` object.                                                                    // 1067\n */                                                                                                                   // 1068\nfunction Type(config) {                                                                                               // 1069\n  extend(this, config);                                                                                               // 1070\n}                                                                                                                     // 1071\n                                                                                                                      // 1072\n/**                                                                                                                   // 1073\n * @ngdoc function                                                                                                    // 1074\n * @name ui.router.util.type:Type#is                                                                                  // 1075\n * @methodOf ui.router.util.type:Type                                                                                 // 1076\n *                                                                                                                    // 1077\n * @description                                                                                                       // 1078\n * Detects whether a value is of a particular type. Accepts a native (decoded) value                                  // 1079\n * and determines whether it matches the current `Type` object.                                                       // 1080\n *                                                                                                                    // 1081\n * @param {*} val  The value to check.                                                                                // 1082\n * @param {string} key  Optional. If the type check is happening in the context of a specific                         // 1083\n *        {@link ui.router.util.type:UrlMatcher `UrlMatcher`} object, this is the name of the                         // 1084\n *        parameter in which `val` is stored. Can be used for meta-programming of `Type` objects.                     // 1085\n * @returns {Boolean}  Returns `true` if the value matches the type, otherwise `false`.                               // 1086\n */                                                                                                                   // 1087\nType.prototype.is = function(val, key) {                                                                              // 1088\n  return true;                                                                                                        // 1089\n};                                                                                                                    // 1090\n                                                                                                                      // 1091\n/**                                                                                                                   // 1092\n * @ngdoc function                                                                                                    // 1093\n * @name ui.router.util.type:Type#encode                                                                              // 1094\n * @methodOf ui.router.util.type:Type                                                                                 // 1095\n *                                                                                                                    // 1096\n * @description                                                                                                       // 1097\n * Encodes a custom/native type value to a string that can be embedded in a URL. Note that the                        // 1098\n * return value does *not* need to be URL-safe (i.e. passed through `encodeURIComponent()`), it                       // 1099\n * only needs to be a representation of `val` that has been coerced to a string.                                      // 1100\n *                                                                                                                    // 1101\n * @param {*} val  The value to encode.                                                                               // 1102\n * @param {string} key  The name of the parameter in which `val` is stored. Can be used for                           // 1103\n *        meta-programming of `Type` objects.                                                                         // 1104\n * @returns {string}  Returns a string representation of `val` that can be encoded in a URL.                          // 1105\n */                                                                                                                   // 1106\nType.prototype.encode = function(val, key) {                                                                          // 1107\n  return val;                                                                                                         // 1108\n};                                                                                                                    // 1109\n                                                                                                                      // 1110\n/**                                                                                                                   // 1111\n * @ngdoc function                                                                                                    // 1112\n * @name ui.router.util.type:Type#decode                                                                              // 1113\n * @methodOf ui.router.util.type:Type                                                                                 // 1114\n *                                                                                                                    // 1115\n * @description                                                                                                       // 1116\n * Converts a parameter value (from URL string or transition param) to a custom/native value.                         // 1117\n *                                                                                                                    // 1118\n * @param {string} val  The URL parameter value to decode.                                                            // 1119\n * @param {string} key  The name of the parameter in which `val` is stored. Can be used for                           // 1120\n *        meta-programming of `Type` objects.                                                                         // 1121\n * @returns {*}  Returns a custom representation of the URL parameter value.                                          // 1122\n */                                                                                                                   // 1123\nType.prototype.decode = function(val, key) {                                                                          // 1124\n  return val;                                                                                                         // 1125\n};                                                                                                                    // 1126\n                                                                                                                      // 1127\n/**                                                                                                                   // 1128\n * @ngdoc function                                                                                                    // 1129\n * @name ui.router.util.type:Type#equals                                                                              // 1130\n * @methodOf ui.router.util.type:Type                                                                                 // 1131\n *                                                                                                                    // 1132\n * @description                                                                                                       // 1133\n * Determines whether two decoded values are equivalent.                                                              // 1134\n *                                                                                                                    // 1135\n * @param {*} a  A value to compare against.                                                                          // 1136\n * @param {*} b  A value to compare against.                                                                          // 1137\n * @returns {Boolean}  Returns `true` if the values are equivalent/equal, otherwise `false`.                          // 1138\n */                                                                                                                   // 1139\nType.prototype.equals = function(a, b) {                                                                              // 1140\n  return a == b;                                                                                                      // 1141\n};                                                                                                                    // 1142\n                                                                                                                      // 1143\nType.prototype.$subPattern = function() {                                                                             // 1144\n  var sub = this.pattern.toString();                                                                                  // 1145\n  return sub.substr(1, sub.length - 2);                                                                               // 1146\n};                                                                                                                    // 1147\n                                                                                                                      // 1148\nType.prototype.pattern = /.*/;                                                                                        // 1149\n                                                                                                                      // 1150\nType.prototype.toString = function() { return \"{Type:\" + this.name + \"}\"; };                                          // 1151\n                                                                                                                      // 1152\n/** Given an encoded string, or a decoded object, returns a decoded object */                                         // 1153\nType.prototype.$normalize = function(val) {                                                                           // 1154\n  return this.is(val) ? val : this.decode(val);                                                                       // 1155\n};                                                                                                                    // 1156\n                                                                                                                      // 1157\n/*                                                                                                                    // 1158\n * Wraps an existing custom Type as an array of Type, depending on 'mode'.                                            // 1159\n * e.g.:                                                                                                              // 1160\n * - urlmatcher pattern \"/path?{queryParam[]:int}\"                                                                    // 1161\n * - url: \"/path?queryParam=1&queryParam=2                                                                            // 1162\n * - $stateParams.queryParam will be [1, 2]                                                                           // 1163\n * if `mode` is \"auto\", then                                                                                          // 1164\n * - url: \"/path?queryParam=1 will create $stateParams.queryParam: 1                                                  // 1165\n * - url: \"/path?queryParam=1&queryParam=2 will create $stateParams.queryParam: [1, 2]                                // 1166\n */                                                                                                                   // 1167\nType.prototype.$asArray = function(mode, isSearch) {                                                                  // 1168\n  if (!mode) return this;                                                                                             // 1169\n  if (mode === \"auto\" && !isSearch) throw new Error(\"'auto' array mode is for query parameters only\");                // 1170\n                                                                                                                      // 1171\n  function ArrayType(type, mode) {                                                                                    // 1172\n    function bindTo(type, callbackName) {                                                                             // 1173\n      return function() {                                                                                             // 1174\n        return type[callbackName].apply(type, arguments);                                                             // 1175\n      };                                                                                                              // 1176\n    }                                                                                                                 // 1177\n                                                                                                                      // 1178\n    // Wrap non-array value as array                                                                                  // 1179\n    function arrayWrap(val) { return isArray(val) ? val : (isDefined(val) ? [ val ] : []); }                          // 1180\n    // Unwrap array value for \"auto\" mode. Return undefined for empty array.                                          // 1181\n    function arrayUnwrap(val) {                                                                                       // 1182\n      switch(val.length) {                                                                                            // 1183\n        case 0: return undefined;                                                                                     // 1184\n        case 1: return mode === \"auto\" ? val[0] : val;                                                                // 1185\n        default: return val;                                                                                          // 1186\n      }                                                                                                               // 1187\n    }                                                                                                                 // 1188\n    function falsey(val) { return !val; }                                                                             // 1189\n                                                                                                                      // 1190\n    // Wraps type (.is/.encode/.decode) functions to operate on each value of an array                                // 1191\n    function arrayHandler(callback, allTruthyMode) {                                                                  // 1192\n      return function handleArray(val) {                                                                              // 1193\n        val = arrayWrap(val);                                                                                         // 1194\n        var result = map(val, callback);                                                                              // 1195\n        if (allTruthyMode === true)                                                                                   // 1196\n          return filter(result, falsey).length === 0;                                                                 // 1197\n        return arrayUnwrap(result);                                                                                   // 1198\n      };                                                                                                              // 1199\n    }                                                                                                                 // 1200\n                                                                                                                      // 1201\n    // Wraps type (.equals) functions to operate on each value of an array                                            // 1202\n    function arrayEqualsHandler(callback) {                                                                           // 1203\n      return function handleArray(val1, val2) {                                                                       // 1204\n        var left = arrayWrap(val1), right = arrayWrap(val2);                                                          // 1205\n        if (left.length !== right.length) return false;                                                               // 1206\n        for (var i = 0; i < left.length; i++) {                                                                       // 1207\n          if (!callback(left[i], right[i])) return false;                                                             // 1208\n        }                                                                                                             // 1209\n        return true;                                                                                                  // 1210\n      };                                                                                                              // 1211\n    }                                                                                                                 // 1212\n                                                                                                                      // 1213\n    this.encode = arrayHandler(bindTo(type, 'encode'));                                                               // 1214\n    this.decode = arrayHandler(bindTo(type, 'decode'));                                                               // 1215\n    this.is     = arrayHandler(bindTo(type, 'is'), true);                                                             // 1216\n    this.equals = arrayEqualsHandler(bindTo(type, 'equals'));                                                         // 1217\n    this.pattern = type.pattern;                                                                                      // 1218\n    this.$normalize = arrayHandler(bindTo(type, '$normalize'));                                                       // 1219\n    this.name = type.name;                                                                                            // 1220\n    this.$arrayMode = mode;                                                                                           // 1221\n  }                                                                                                                   // 1222\n                                                                                                                      // 1223\n  return new ArrayType(this, mode);                                                                                   // 1224\n};                                                                                                                    // 1225\n                                                                                                                      // 1226\n                                                                                                                      // 1227\n                                                                                                                      // 1228\n/**                                                                                                                   // 1229\n * @ngdoc object                                                                                                      // 1230\n * @name ui.router.util.$urlMatcherFactory                                                                            // 1231\n *                                                                                                                    // 1232\n * @description                                                                                                       // 1233\n * Factory for {@link ui.router.util.type:UrlMatcher `UrlMatcher`} instances. The factory                             // 1234\n * is also available to providers under the name `$urlMatcherFactoryProvider`.                                        // 1235\n */                                                                                                                   // 1236\nfunction $UrlMatcherFactory() {                                                                                       // 1237\n  $$UMFP = this;                                                                                                      // 1238\n                                                                                                                      // 1239\n  var isCaseInsensitive = false, isStrictMode = true, defaultSquashPolicy = false;                                    // 1240\n                                                                                                                      // 1241\n  function valToString(val) { return val != null ? val.toString().replace(/\\//g, \"%2F\") : val; }                      // 1242\n  function valFromString(val) { return val != null ? val.toString().replace(/%2F/g, \"/\") : val; }                     // 1243\n                                                                                                                      // 1244\n  var $types = {}, enqueue = true, typeQueue = [], injector, defaultTypes = {                                         // 1245\n    string: {                                                                                                         // 1246\n      encode: valToString,                                                                                            // 1247\n      decode: valFromString,                                                                                          // 1248\n      // TODO: in 1.0, make string .is() return false if value is undefined/null by default.                          // 1249\n      // In 0.2.x, string params are optional by default for backwards compat                                         // 1250\n      is: function(val) { return val == null || !isDefined(val) || typeof val === \"string\"; },                        // 1251\n      pattern: /[^/]*/                                                                                                // 1252\n    },                                                                                                                // 1253\n    int: {                                                                                                            // 1254\n      encode: valToString,                                                                                            // 1255\n      decode: function(val) { return parseInt(val, 10); },                                                            // 1256\n      is: function(val) { return isDefined(val) && this.decode(val.toString()) === val; },                            // 1257\n      pattern: /\\d+/                                                                                                  // 1258\n    },                                                                                                                // 1259\n    bool: {                                                                                                           // 1260\n      encode: function(val) { return val ? 1 : 0; },                                                                  // 1261\n      decode: function(val) { return parseInt(val, 10) !== 0; },                                                      // 1262\n      is: function(val) { return val === true || val === false; },                                                    // 1263\n      pattern: /0|1/                                                                                                  // 1264\n    },                                                                                                                // 1265\n    date: {                                                                                                           // 1266\n      encode: function (val) {                                                                                        // 1267\n        if (!this.is(val))                                                                                            // 1268\n          return undefined;                                                                                           // 1269\n        return [ val.getFullYear(),                                                                                   // 1270\n          ('0' + (val.getMonth() + 1)).slice(-2),                                                                     // 1271\n          ('0' + val.getDate()).slice(-2)                                                                             // 1272\n        ].join(\"-\");                                                                                                  // 1273\n      },                                                                                                              // 1274\n      decode: function (val) {                                                                                        // 1275\n        if (this.is(val)) return val;                                                                                 // 1276\n        var match = this.capture.exec(val);                                                                           // 1277\n        return match ? new Date(match[1], match[2] - 1, match[3]) : undefined;                                        // 1278\n      },                                                                                                              // 1279\n      is: function(val) { return val instanceof Date && !isNaN(val.valueOf()); },                                     // 1280\n      equals: function (a, b) { return this.is(a) && this.is(b) && a.toISOString() === b.toISOString(); },            // 1281\n      pattern: /[0-9]{4}-(?:0[1-9]|1[0-2])-(?:0[1-9]|[1-2][0-9]|3[0-1])/,                                             // 1282\n      capture: /([0-9]{4})-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])/                                                // 1283\n    },                                                                                                                // 1284\n    json: {                                                                                                           // 1285\n      encode: angular.toJson,                                                                                         // 1286\n      decode: angular.fromJson,                                                                                       // 1287\n      is: angular.isObject,                                                                                           // 1288\n      equals: angular.equals,                                                                                         // 1289\n      pattern: /[^/]*/                                                                                                // 1290\n    },                                                                                                                // 1291\n    any: { // does not encode/decode                                                                                  // 1292\n      encode: angular.identity,                                                                                       // 1293\n      decode: angular.identity,                                                                                       // 1294\n      equals: angular.equals,                                                                                         // 1295\n      pattern: /.*/                                                                                                   // 1296\n    }                                                                                                                 // 1297\n  };                                                                                                                  // 1298\n                                                                                                                      // 1299\n  function getDefaultConfig() {                                                                                       // 1300\n    return {                                                                                                          // 1301\n      strict: isStrictMode,                                                                                           // 1302\n      caseInsensitive: isCaseInsensitive                                                                              // 1303\n    };                                                                                                                // 1304\n  }                                                                                                                   // 1305\n                                                                                                                      // 1306\n  function isInjectable(value) {                                                                                      // 1307\n    return (isFunction(value) || (isArray(value) && isFunction(value[value.length - 1])));                            // 1308\n  }                                                                                                                   // 1309\n                                                                                                                      // 1310\n  /**                                                                                                                 // 1311\n   * [Internal] Get the default value of a parameter, which may be an injectable function.                            // 1312\n   */                                                                                                                 // 1313\n  $UrlMatcherFactory.$$getDefaultValue = function(config) {                                                           // 1314\n    if (!isInjectable(config.value)) return config.value;                                                             // 1315\n    if (!injector) throw new Error(\"Injectable functions cannot be called at configuration time\");                    // 1316\n    return injector.invoke(config.value);                                                                             // 1317\n  };                                                                                                                  // 1318\n                                                                                                                      // 1319\n  /**                                                                                                                 // 1320\n   * @ngdoc function                                                                                                  // 1321\n   * @name ui.router.util.$urlMatcherFactory#caseInsensitive                                                          // 1322\n   * @methodOf ui.router.util.$urlMatcherFactory                                                                      // 1323\n   *                                                                                                                  // 1324\n   * @description                                                                                                     // 1325\n   * Defines whether URL matching should be case sensitive (the default behavior), or not.                            // 1326\n   *                                                                                                                  // 1327\n   * @param {boolean} value `false` to match URL in a case sensitive manner; otherwise `true`;                        // 1328\n   * @returns {boolean} the current value of caseInsensitive                                                          // 1329\n   */                                                                                                                 // 1330\n  this.caseInsensitive = function(value) {                                                                            // 1331\n    if (isDefined(value))                                                                                             // 1332\n      isCaseInsensitive = value;                                                                                      // 1333\n    return isCaseInsensitive;                                                                                         // 1334\n  };                                                                                                                  // 1335\n                                                                                                                      // 1336\n  /**                                                                                                                 // 1337\n   * @ngdoc function                                                                                                  // 1338\n   * @name ui.router.util.$urlMatcherFactory#strictMode                                                               // 1339\n   * @methodOf ui.router.util.$urlMatcherFactory                                                                      // 1340\n   *                                                                                                                  // 1341\n   * @description                                                                                                     // 1342\n   * Defines whether URLs should match trailing slashes, or not (the default behavior).                               // 1343\n   *                                                                                                                  // 1344\n   * @param {boolean=} value `false` to match trailing slashes in URLs, otherwise `true`.                             // 1345\n   * @returns {boolean} the current value of strictMode                                                               // 1346\n   */                                                                                                                 // 1347\n  this.strictMode = function(value) {                                                                                 // 1348\n    if (isDefined(value))                                                                                             // 1349\n      isStrictMode = value;                                                                                           // 1350\n    return isStrictMode;                                                                                              // 1351\n  };                                                                                                                  // 1352\n                                                                                                                      // 1353\n  /**                                                                                                                 // 1354\n   * @ngdoc function                                                                                                  // 1355\n   * @name ui.router.util.$urlMatcherFactory#defaultSquashPolicy                                                      // 1356\n   * @methodOf ui.router.util.$urlMatcherFactory                                                                      // 1357\n   *                                                                                                                  // 1358\n   * @description                                                                                                     // 1359\n   * Sets the default behavior when generating or matching URLs with default parameter values.                        // 1360\n   *                                                                                                                  // 1361\n   * @param {string} value A string that defines the default parameter URL squashing behavior.                        // 1362\n   *    `nosquash`: When generating an href with a default parameter value, do not squash the parameter value from the URL\n   *    `slash`: When generating an href with a default parameter value, squash (remove) the parameter value, and, if the\n   *             parameter is surrounded by slashes, squash (remove) one slash from the URL                           // 1365\n   *    any other string, e.g. \"~\": When generating an href with a default parameter value, squash (remove)           // 1366\n   *             the parameter value from the URL and replace it with this string.                                    // 1367\n   */                                                                                                                 // 1368\n  this.defaultSquashPolicy = function(value) {                                                                        // 1369\n    if (!isDefined(value)) return defaultSquashPolicy;                                                                // 1370\n    if (value !== true && value !== false && !isString(value))                                                        // 1371\n      throw new Error(\"Invalid squash policy: \" + value + \". Valid policies: false, true, arbitrary-string\");         // 1372\n    defaultSquashPolicy = value;                                                                                      // 1373\n    return value;                                                                                                     // 1374\n  };                                                                                                                  // 1375\n                                                                                                                      // 1376\n  /**                                                                                                                 // 1377\n   * @ngdoc function                                                                                                  // 1378\n   * @name ui.router.util.$urlMatcherFactory#compile                                                                  // 1379\n   * @methodOf ui.router.util.$urlMatcherFactory                                                                      // 1380\n   *                                                                                                                  // 1381\n   * @description                                                                                                     // 1382\n   * Creates a {@link ui.router.util.type:UrlMatcher `UrlMatcher`} for the specified pattern.                         // 1383\n   *                                                                                                                  // 1384\n   * @param {string} pattern  The URL pattern.                                                                        // 1385\n   * @param {Object} config  The config object hash.                                                                  // 1386\n   * @returns {UrlMatcher}  The UrlMatcher.                                                                           // 1387\n   */                                                                                                                 // 1388\n  this.compile = function (pattern, config) {                                                                         // 1389\n    return new UrlMatcher(pattern, extend(getDefaultConfig(), config));                                               // 1390\n  };                                                                                                                  // 1391\n                                                                                                                      // 1392\n  /**                                                                                                                 // 1393\n   * @ngdoc function                                                                                                  // 1394\n   * @name ui.router.util.$urlMatcherFactory#isMatcher                                                                // 1395\n   * @methodOf ui.router.util.$urlMatcherFactory                                                                      // 1396\n   *                                                                                                                  // 1397\n   * @description                                                                                                     // 1398\n   * Returns true if the specified object is a `UrlMatcher`, or false otherwise.                                      // 1399\n   *                                                                                                                  // 1400\n   * @param {Object} object  The object to perform the type check against.                                            // 1401\n   * @returns {Boolean}  Returns `true` if the object matches the `UrlMatcher` interface, by                          // 1402\n   *          implementing all the same methods.                                                                      // 1403\n   */                                                                                                                 // 1404\n  this.isMatcher = function (o) {                                                                                     // 1405\n    if (!isObject(o)) return false;                                                                                   // 1406\n    var result = true;                                                                                                // 1407\n                                                                                                                      // 1408\n    forEach(UrlMatcher.prototype, function(val, name) {                                                               // 1409\n      if (isFunction(val)) {                                                                                          // 1410\n        result = result && (isDefined(o[name]) && isFunction(o[name]));                                               // 1411\n      }                                                                                                               // 1412\n    });                                                                                                               // 1413\n    return result;                                                                                                    // 1414\n  };                                                                                                                  // 1415\n                                                                                                                      // 1416\n  /**                                                                                                                 // 1417\n   * @ngdoc function                                                                                                  // 1418\n   * @name ui.router.util.$urlMatcherFactory#type                                                                     // 1419\n   * @methodOf ui.router.util.$urlMatcherFactory                                                                      // 1420\n   *                                                                                                                  // 1421\n   * @description                                                                                                     // 1422\n   * Registers a custom {@link ui.router.util.type:Type `Type`} object that can be used to                            // 1423\n   * generate URLs with typed parameters.                                                                             // 1424\n   *                                                                                                                  // 1425\n   * @param {string} name  The type name.                                                                             // 1426\n   * @param {Object|Function} definition   The type definition. See                                                   // 1427\n   *        {@link ui.router.util.type:Type `Type`} for information on the values accepted.                           // 1428\n   * @param {Object|Function} definitionFn (optional) A function that is injected before the app                      // 1429\n   *        runtime starts.  The result of this function is merged into the existing `definition`.                    // 1430\n   *        See {@link ui.router.util.type:Type `Type`} for information on the values accepted.                       // 1431\n   *                                                                                                                  // 1432\n   * @returns {Object}  Returns `$urlMatcherFactoryProvider`.                                                         // 1433\n   *                                                                                                                  // 1434\n   * @example                                                                                                         // 1435\n   * This is a simple example of a custom type that encodes and decodes items from an                                 // 1436\n   * array, using the array index as the URL-encoded value:                                                           // 1437\n   *                                                                                                                  // 1438\n   * <pre>                                                                                                            // 1439\n   * var list = ['John', 'Paul', 'George', 'Ringo'];                                                                  // 1440\n   *                                                                                                                  // 1441\n   * $urlMatcherFactoryProvider.type('listItem', {                                                                    // 1442\n   *   encode: function(item) {                                                                                       // 1443\n   *     // Represent the list item in the URL using its corresponding index                                          // 1444\n   *     return list.indexOf(item);                                                                                   // 1445\n   *   },                                                                                                             // 1446\n   *   decode: function(item) {                                                                                       // 1447\n   *     // Look up the list item by index                                                                            // 1448\n   *     return list[parseInt(item, 10)];                                                                             // 1449\n   *   },                                                                                                             // 1450\n   *   is: function(item) {                                                                                           // 1451\n   *     // Ensure the item is valid by checking to see that it appears                                               // 1452\n   *     // in the list                                                                                               // 1453\n   *     return list.indexOf(item) > -1;                                                                              // 1454\n   *   }                                                                                                              // 1455\n   * });                                                                                                              // 1456\n   *                                                                                                                  // 1457\n   * $stateProvider.state('list', {                                                                                   // 1458\n   *   url: \"/list/{item:listItem}\",                                                                                  // 1459\n   *   controller: function($scope, $stateParams) {                                                                   // 1460\n   *     console.log($stateParams.item);                                                                              // 1461\n   *   }                                                                                                              // 1462\n   * });                                                                                                              // 1463\n   *                                                                                                                  // 1464\n   * // ...                                                                                                           // 1465\n   *                                                                                                                  // 1466\n   * // Changes URL to '/list/3', logs \"Ringo\" to the console                                                         // 1467\n   * $state.go('list', { item: \"Ringo\" });                                                                            // 1468\n   * </pre>                                                                                                           // 1469\n   *                                                                                                                  // 1470\n   * This is a more complex example of a type that relies on dependency injection to                                  // 1471\n   * interact with services, and uses the parameter name from the URL to infer how to                                 // 1472\n   * handle encoding and decoding parameter values:                                                                   // 1473\n   *                                                                                                                  // 1474\n   * <pre>                                                                                                            // 1475\n   * // Defines a custom type that gets a value from a service,                                                       // 1476\n   * // where each service gets different types of values from                                                        // 1477\n   * // a backend API:                                                                                                // 1478\n   * $urlMatcherFactoryProvider.type('dbObject', {}, function(Users, Posts) {                                         // 1479\n   *                                                                                                                  // 1480\n   *   // Matches up services to URL parameter names                                                                  // 1481\n   *   var services = {                                                                                               // 1482\n   *     user: Users,                                                                                                 // 1483\n   *     post: Posts                                                                                                  // 1484\n   *   };                                                                                                             // 1485\n   *                                                                                                                  // 1486\n   *   return {                                                                                                       // 1487\n   *     encode: function(object) {                                                                                   // 1488\n   *       // Represent the object in the URL using its unique ID                                                     // 1489\n   *       return object.id;                                                                                          // 1490\n   *     },                                                                                                           // 1491\n   *     decode: function(value, key) {                                                                               // 1492\n   *       // Look up the object by ID, using the parameter                                                           // 1493\n   *       // name (key) to call the correct service                                                                  // 1494\n   *       return services[key].findById(value);                                                                      // 1495\n   *     },                                                                                                           // 1496\n   *     is: function(object, key) {                                                                                  // 1497\n   *       // Check that object is a valid dbObject                                                                   // 1498\n   *       return angular.isObject(object) && object.id && services[key];                                             // 1499\n   *     }                                                                                                            // 1500\n   *     equals: function(a, b) {                                                                                     // 1501\n   *       // Check the equality of decoded objects by comparing                                                      // 1502\n   *       // their unique IDs                                                                                        // 1503\n   *       return a.id === b.id;                                                                                      // 1504\n   *     }                                                                                                            // 1505\n   *   };                                                                                                             // 1506\n   * });                                                                                                              // 1507\n   *                                                                                                                  // 1508\n   * // In a config() block, you can then attach URLs with                                                            // 1509\n   * // type-annotated parameters:                                                                                    // 1510\n   * $stateProvider.state('users', {                                                                                  // 1511\n   *   url: \"/users\",                                                                                                 // 1512\n   *   // ...                                                                                                         // 1513\n   * }).state('users.item', {                                                                                         // 1514\n   *   url: \"/{user:dbObject}\",                                                                                       // 1515\n   *   controller: function($scope, $stateParams) {                                                                   // 1516\n   *     // $stateParams.user will now be an object returned from                                                     // 1517\n   *     // the Users service                                                                                         // 1518\n   *   },                                                                                                             // 1519\n   *   // ...                                                                                                         // 1520\n   * });                                                                                                              // 1521\n   * </pre>                                                                                                           // 1522\n   */                                                                                                                 // 1523\n  this.type = function (name, definition, definitionFn) {                                                             // 1524\n    if (!isDefined(definition)) return $types[name];                                                                  // 1525\n    if ($types.hasOwnProperty(name)) throw new Error(\"A type named '\" + name + \"' has already been defined.\");        // 1526\n                                                                                                                      // 1527\n    $types[name] = new Type(extend({ name: name }, definition));                                                      // 1528\n    if (definitionFn) {                                                                                               // 1529\n      typeQueue.push({ name: name, def: definitionFn });                                                              // 1530\n      if (!enqueue) flushTypeQueue();                                                                                 // 1531\n    }                                                                                                                 // 1532\n    return this;                                                                                                      // 1533\n  };                                                                                                                  // 1534\n                                                                                                                      // 1535\n  // `flushTypeQueue()` waits until `$urlMatcherFactory` is injected before invoking the queued `definitionFn`s       // 1536\n  function flushTypeQueue() {                                                                                         // 1537\n    while(typeQueue.length) {                                                                                         // 1538\n      var type = typeQueue.shift();                                                                                   // 1539\n      if (type.pattern) throw new Error(\"You cannot override a type's .pattern at runtime.\");                         // 1540\n      angular.extend($types[type.name], injector.invoke(type.def));                                                   // 1541\n    }                                                                                                                 // 1542\n  }                                                                                                                   // 1543\n                                                                                                                      // 1544\n  // Register default types. Store them in the prototype of $types.                                                   // 1545\n  forEach(defaultTypes, function(type, name) { $types[name] = new Type(extend({name: name}, type)); });               // 1546\n  $types = inherit($types, {});                                                                                       // 1547\n                                                                                                                      // 1548\n  /* No need to document $get, since it returns this */                                                               // 1549\n  this.$get = ['$injector', function ($injector) {                                                                    // 1550\n    injector = $injector;                                                                                             // 1551\n    enqueue = false;                                                                                                  // 1552\n    flushTypeQueue();                                                                                                 // 1553\n                                                                                                                      // 1554\n    forEach(defaultTypes, function(type, name) {                                                                      // 1555\n      if (!$types[name]) $types[name] = new Type(type);                                                               // 1556\n    });                                                                                                               // 1557\n    return this;                                                                                                      // 1558\n  }];                                                                                                                 // 1559\n                                                                                                                      // 1560\n  this.Param = function Param(id, type, config, location) {                                                           // 1561\n    var self = this;                                                                                                  // 1562\n    config = unwrapShorthand(config);                                                                                 // 1563\n    type = getType(config, type, location);                                                                           // 1564\n    var arrayMode = getArrayMode();                                                                                   // 1565\n    type = arrayMode ? type.$asArray(arrayMode, location === \"search\") : type;                                        // 1566\n    if (type.name === \"string\" && !arrayMode && location === \"path\" && config.value === undefined)                    // 1567\n      config.value = \"\"; // for 0.2.x; in 0.3.0+ do not automatically default to \"\"                                   // 1568\n    var isOptional = config.value !== undefined;                                                                      // 1569\n    var squash = getSquashPolicy(config, isOptional);                                                                 // 1570\n    var replace = getReplace(config, arrayMode, isOptional, squash);                                                  // 1571\n                                                                                                                      // 1572\n    function unwrapShorthand(config) {                                                                                // 1573\n      var keys = isObject(config) ? objectKeys(config) : [];                                                          // 1574\n      var isShorthand = indexOf(keys, \"value\") === -1 && indexOf(keys, \"type\") === -1 &&                              // 1575\n                        indexOf(keys, \"squash\") === -1 && indexOf(keys, \"array\") === -1;                              // 1576\n      if (isShorthand) config = { value: config };                                                                    // 1577\n      config.$$fn = isInjectable(config.value) ? config.value : function () { return config.value; };                 // 1578\n      return config;                                                                                                  // 1579\n    }                                                                                                                 // 1580\n                                                                                                                      // 1581\n    function getType(config, urlType, location) {                                                                     // 1582\n      if (config.type && urlType) throw new Error(\"Param '\"+id+\"' has two type configurations.\");                     // 1583\n      if (urlType) return urlType;                                                                                    // 1584\n      if (!config.type) return (location === \"config\" ? $types.any : $types.string);                                  // 1585\n      return config.type instanceof Type ? config.type : new Type(config.type);                                       // 1586\n    }                                                                                                                 // 1587\n                                                                                                                      // 1588\n    // array config: param name (param[]) overrides default settings.  explicit config overrides param name.          // 1589\n    function getArrayMode() {                                                                                         // 1590\n      var arrayDefaults = { array: (location === \"search\" ? \"auto\" : false) };                                        // 1591\n      var arrayParamNomenclature = id.match(/\\[\\]$/) ? { array: true } : {};                                          // 1592\n      return extend(arrayDefaults, arrayParamNomenclature, config).array;                                             // 1593\n    }                                                                                                                 // 1594\n                                                                                                                      // 1595\n    /**                                                                                                               // 1596\n     * returns false, true, or the squash value to indicate the \"default parameter url squash policy\".                // 1597\n     */                                                                                                               // 1598\n    function getSquashPolicy(config, isOptional) {                                                                    // 1599\n      var squash = config.squash;                                                                                     // 1600\n      if (!isOptional || squash === false) return false;                                                              // 1601\n      if (!isDefined(squash) || squash == null) return defaultSquashPolicy;                                           // 1602\n      if (squash === true || isString(squash)) return squash;                                                         // 1603\n      throw new Error(\"Invalid squash policy: '\" + squash + \"'. Valid policies: false, true, or arbitrary string\");   // 1604\n    }                                                                                                                 // 1605\n                                                                                                                      // 1606\n    function getReplace(config, arrayMode, isOptional, squash) {                                                      // 1607\n      var replace, configuredKeys, defaultPolicy = [                                                                  // 1608\n        { from: \"\",   to: (isOptional || arrayMode ? undefined : \"\") },                                               // 1609\n        { from: null, to: (isOptional || arrayMode ? undefined : \"\") }                                                // 1610\n      ];                                                                                                              // 1611\n      replace = isArray(config.replace) ? config.replace : [];                                                        // 1612\n      if (isString(squash))                                                                                           // 1613\n        replace.push({ from: squash, to: undefined });                                                                // 1614\n      configuredKeys = map(replace, function(item) { return item.from; } );                                           // 1615\n      return filter(defaultPolicy, function(item) { return indexOf(configuredKeys, item.from) === -1; }).concat(replace);\n    }                                                                                                                 // 1617\n                                                                                                                      // 1618\n    /**                                                                                                               // 1619\n     * [Internal] Get the default value of a parameter, which may be an injectable function.                          // 1620\n     */                                                                                                               // 1621\n    function $$getDefaultValue() {                                                                                    // 1622\n      if (!injector) throw new Error(\"Injectable functions cannot be called at configuration time\");                  // 1623\n      var defaultValue = injector.invoke(config.$$fn);                                                                // 1624\n      if (defaultValue !== null && defaultValue !== undefined && !self.type.is(defaultValue))                         // 1625\n        throw new Error(\"Default value (\" + defaultValue + \") for parameter '\" + self.id + \"' is not an instance of Type (\" + self.type.name + \")\");\n      return defaultValue;                                                                                            // 1627\n    }                                                                                                                 // 1628\n                                                                                                                      // 1629\n    /**                                                                                                               // 1630\n     * [Internal] Gets the decoded representation of a value if the value is defined, otherwise, returns the          // 1631\n     * default value, which may be the result of an injectable function.                                              // 1632\n     */                                                                                                               // 1633\n    function $value(value) {                                                                                          // 1634\n      function hasReplaceVal(val) { return function(obj) { return obj.from === val; }; }                              // 1635\n      function $replace(value) {                                                                                      // 1636\n        var replacement = map(filter(self.replace, hasReplaceVal(value)), function(obj) { return obj.to; });          // 1637\n        return replacement.length ? replacement[0] : value;                                                           // 1638\n      }                                                                                                               // 1639\n      value = $replace(value);                                                                                        // 1640\n      return !isDefined(value) ? $$getDefaultValue() : self.type.$normalize(value);                                   // 1641\n    }                                                                                                                 // 1642\n                                                                                                                      // 1643\n    function toString() { return \"{Param:\" + id + \" \" + type + \" squash: '\" + squash + \"' optional: \" + isOptional + \"}\"; }\n                                                                                                                      // 1645\n    extend(this, {                                                                                                    // 1646\n      id: id,                                                                                                         // 1647\n      type: type,                                                                                                     // 1648\n      location: location,                                                                                             // 1649\n      array: arrayMode,                                                                                               // 1650\n      squash: squash,                                                                                                 // 1651\n      replace: replace,                                                                                               // 1652\n      isOptional: isOptional,                                                                                         // 1653\n      value: $value,                                                                                                  // 1654\n      dynamic: undefined,                                                                                             // 1655\n      config: config,                                                                                                 // 1656\n      toString: toString                                                                                              // 1657\n    });                                                                                                               // 1658\n  };                                                                                                                  // 1659\n                                                                                                                      // 1660\n  function ParamSet(params) {                                                                                         // 1661\n    extend(this, params || {});                                                                                       // 1662\n  }                                                                                                                   // 1663\n                                                                                                                      // 1664\n  ParamSet.prototype = {                                                                                              // 1665\n    $$new: function() {                                                                                               // 1666\n      return inherit(this, extend(new ParamSet(), { $$parent: this}));                                                // 1667\n    },                                                                                                                // 1668\n    $$keys: function () {                                                                                             // 1669\n      var keys = [], chain = [], parent = this,                                                                       // 1670\n        ignore = objectKeys(ParamSet.prototype);                                                                      // 1671\n      while (parent) { chain.push(parent); parent = parent.$$parent; }                                                // 1672\n      chain.reverse();                                                                                                // 1673\n      forEach(chain, function(paramset) {                                                                             // 1674\n        forEach(objectKeys(paramset), function(key) {                                                                 // 1675\n            if (indexOf(keys, key) === -1 && indexOf(ignore, key) === -1) keys.push(key);                             // 1676\n        });                                                                                                           // 1677\n      });                                                                                                             // 1678\n      return keys;                                                                                                    // 1679\n    },                                                                                                                // 1680\n    $$values: function(paramValues) {                                                                                 // 1681\n      var values = {}, self = this;                                                                                   // 1682\n      forEach(self.$$keys(), function(key) {                                                                          // 1683\n        values[key] = self[key].value(paramValues && paramValues[key]);                                               // 1684\n      });                                                                                                             // 1685\n      return values;                                                                                                  // 1686\n    },                                                                                                                // 1687\n    $$equals: function(paramValues1, paramValues2) {                                                                  // 1688\n      var equal = true, self = this;                                                                                  // 1689\n      forEach(self.$$keys(), function(key) {                                                                          // 1690\n        var left = paramValues1 && paramValues1[key], right = paramValues2 && paramValues2[key];                      // 1691\n        if (!self[key].type.equals(left, right)) equal = false;                                                       // 1692\n      });                                                                                                             // 1693\n      return equal;                                                                                                   // 1694\n    },                                                                                                                // 1695\n    $$validates: function $$validate(paramValues) {                                                                   // 1696\n      var keys = this.$$keys(), i, param, rawVal, normalized, encoded;                                                // 1697\n      for (i = 0; i < keys.length; i++) {                                                                             // 1698\n        param = this[keys[i]];                                                                                        // 1699\n        rawVal = paramValues[keys[i]];                                                                                // 1700\n        if ((rawVal === undefined || rawVal === null) && param.isOptional)                                            // 1701\n          break; // There was no parameter value, but the param is optional                                           // 1702\n        normalized = param.type.$normalize(rawVal);                                                                   // 1703\n        if (!param.type.is(normalized))                                                                               // 1704\n          return false; // The value was not of the correct Type, and could not be decoded to the correct Type        // 1705\n        encoded = param.type.encode(normalized);                                                                      // 1706\n        if (angular.isString(encoded) && !param.type.pattern.exec(encoded))                                           // 1707\n          return false; // The value was of the correct type, but when encoded, did not match the Type's regexp       // 1708\n      }                                                                                                               // 1709\n      return true;                                                                                                    // 1710\n    },                                                                                                                // 1711\n    $$parent: undefined                                                                                               // 1712\n  };                                                                                                                  // 1713\n                                                                                                                      // 1714\n  this.ParamSet = ParamSet;                                                                                           // 1715\n}                                                                                                                     // 1716\n                                                                                                                      // 1717\n// Register as a provider so it's available to other providers                                                        // 1718\nangular.module('ui.router.util').provider('$urlMatcherFactory', $UrlMatcherFactory);                                  // 1719\nangular.module('ui.router.util').run(['$urlMatcherFactory', function($urlMatcherFactory) { }]);                       // 1720\n                                                                                                                      // 1721\n/**                                                                                                                   // 1722\n * @ngdoc object                                                                                                      // 1723\n * @name ui.router.router.$urlRouterProvider                                                                          // 1724\n *                                                                                                                    // 1725\n * @requires ui.router.util.$urlMatcherFactoryProvider                                                                // 1726\n * @requires $locationProvider                                                                                        // 1727\n *                                                                                                                    // 1728\n * @description                                                                                                       // 1729\n * `$urlRouterProvider` has the responsibility of watching `$location`.                                               // 1730\n * When `$location` changes it runs through a list of rules one by one until a                                        // 1731\n * match is found. `$urlRouterProvider` is used behind the scenes anytime you specify                                 // 1732\n * a url in a state configuration. All urls are compiled into a UrlMatcher object.                                    // 1733\n *                                                                                                                    // 1734\n * There are several methods on `$urlRouterProvider` that make it useful to use directly                              // 1735\n * in your module config.                                                                                             // 1736\n */                                                                                                                   // 1737\n$UrlRouterProvider.$inject = ['$locationProvider', '$urlMatcherFactoryProvider'];                                     // 1738\nfunction $UrlRouterProvider(   $locationProvider,   $urlMatcherFactory) {                                             // 1739\n  var rules = [], otherwise = null, interceptDeferred = false, listener;                                              // 1740\n                                                                                                                      // 1741\n  // Returns a string that is a prefix of all strings matching the RegExp                                             // 1742\n  function regExpPrefix(re) {                                                                                         // 1743\n    var prefix = /^\\^((?:\\\\[^a-zA-Z0-9]|[^\\\\\\[\\]\\^$*+?.()|{}]+)*)/.exec(re.source);                                   // 1744\n    return (prefix != null) ? prefix[1].replace(/\\\\(.)/g, \"$1\") : '';                                                 // 1745\n  }                                                                                                                   // 1746\n                                                                                                                      // 1747\n  // Interpolates matched values into a String.replace()-style pattern                                                // 1748\n  function interpolate(pattern, match) {                                                                              // 1749\n    return pattern.replace(/\\$(\\$|\\d{1,2})/, function (m, what) {                                                     // 1750\n      return match[what === '$' ? 0 : Number(what)];                                                                  // 1751\n    });                                                                                                               // 1752\n  }                                                                                                                   // 1753\n                                                                                                                      // 1754\n  /**                                                                                                                 // 1755\n   * @ngdoc function                                                                                                  // 1756\n   * @name ui.router.router.$urlRouterProvider#rule                                                                   // 1757\n   * @methodOf ui.router.router.$urlRouterProvider                                                                    // 1758\n   *                                                                                                                  // 1759\n   * @description                                                                                                     // 1760\n   * Defines rules that are used by `$urlRouterProvider` to find matches for                                          // 1761\n   * specific URLs.                                                                                                   // 1762\n   *                                                                                                                  // 1763\n   * @example                                                                                                         // 1764\n   * <pre>                                                                                                            // 1765\n   * var app = angular.module('app', ['ui.router.router']);                                                           // 1766\n   *                                                                                                                  // 1767\n   * app.config(function ($urlRouterProvider) {                                                                       // 1768\n   *   // Here's an example of how you might allow case insensitive urls                                              // 1769\n   *   $urlRouterProvider.rule(function ($injector, $location) {                                                      // 1770\n   *     var path = $location.path(),                                                                                 // 1771\n   *         normalized = path.toLowerCase();                                                                         // 1772\n   *                                                                                                                  // 1773\n   *     if (path !== normalized) {                                                                                   // 1774\n   *       return normalized;                                                                                         // 1775\n   *     }                                                                                                            // 1776\n   *   });                                                                                                            // 1777\n   * });                                                                                                              // 1778\n   * </pre>                                                                                                           // 1779\n   *                                                                                                                  // 1780\n   * @param {object} rule Handler function that takes `$injector` and `$location`                                     // 1781\n   * services as arguments. You can use them to return a valid path as a string.                                      // 1782\n   *                                                                                                                  // 1783\n   * @return {object} `$urlRouterProvider` - `$urlRouterProvider` instance                                            // 1784\n   */                                                                                                                 // 1785\n  this.rule = function (rule) {                                                                                       // 1786\n    if (!isFunction(rule)) throw new Error(\"'rule' must be a function\");                                              // 1787\n    rules.push(rule);                                                                                                 // 1788\n    return this;                                                                                                      // 1789\n  };                                                                                                                  // 1790\n                                                                                                                      // 1791\n  /**                                                                                                                 // 1792\n   * @ngdoc object                                                                                                    // 1793\n   * @name ui.router.router.$urlRouterProvider#otherwise                                                              // 1794\n   * @methodOf ui.router.router.$urlRouterProvider                                                                    // 1795\n   *                                                                                                                  // 1796\n   * @description                                                                                                     // 1797\n   * Defines a path that is used when an invalid route is requested.                                                  // 1798\n   *                                                                                                                  // 1799\n   * @example                                                                                                         // 1800\n   * <pre>                                                                                                            // 1801\n   * var app = angular.module('app', ['ui.router.router']);                                                           // 1802\n   *                                                                                                                  // 1803\n   * app.config(function ($urlRouterProvider) {                                                                       // 1804\n   *   // if the path doesn't match any of the urls you configured                                                    // 1805\n   *   // otherwise will take care of routing the user to the                                                         // 1806\n   *   // specified url                                                                                               // 1807\n   *   $urlRouterProvider.otherwise('/index');                                                                        // 1808\n   *                                                                                                                  // 1809\n   *   // Example of using function rule as param                                                                     // 1810\n   *   $urlRouterProvider.otherwise(function ($injector, $location) {                                                 // 1811\n   *     return '/a/valid/url';                                                                                       // 1812\n   *   });                                                                                                            // 1813\n   * });                                                                                                              // 1814\n   * </pre>                                                                                                           // 1815\n   *                                                                                                                  // 1816\n   * @param {string|object} rule The url path you want to redirect to or a function                                   // 1817\n   * rule that returns the url path. The function version is passed two params:                                       // 1818\n   * `$injector` and `$location` services, and must return a url string.                                              // 1819\n   *                                                                                                                  // 1820\n   * @return {object} `$urlRouterProvider` - `$urlRouterProvider` instance                                            // 1821\n   */                                                                                                                 // 1822\n  this.otherwise = function (rule) {                                                                                  // 1823\n    if (isString(rule)) {                                                                                             // 1824\n      var redirect = rule;                                                                                            // 1825\n      rule = function () { return redirect; };                                                                        // 1826\n    }                                                                                                                 // 1827\n    else if (!isFunction(rule)) throw new Error(\"'rule' must be a function\");                                         // 1828\n    otherwise = rule;                                                                                                 // 1829\n    return this;                                                                                                      // 1830\n  };                                                                                                                  // 1831\n                                                                                                                      // 1832\n                                                                                                                      // 1833\n  function handleIfMatch($injector, handler, match) {                                                                 // 1834\n    if (!match) return false;                                                                                         // 1835\n    var result = $injector.invoke(handler, handler, { $match: match });                                               // 1836\n    return isDefined(result) ? result : true;                                                                         // 1837\n  }                                                                                                                   // 1838\n                                                                                                                      // 1839\n  /**                                                                                                                 // 1840\n   * @ngdoc function                                                                                                  // 1841\n   * @name ui.router.router.$urlRouterProvider#when                                                                   // 1842\n   * @methodOf ui.router.router.$urlRouterProvider                                                                    // 1843\n   *                                                                                                                  // 1844\n   * @description                                                                                                     // 1845\n   * Registers a handler for a given url matching. if handle is a string, it is                                       // 1846\n   * treated as a redirect, and is interpolated according to the syntax of match                                      // 1847\n   * (i.e. like `String.replace()` for `RegExp`, or like a `UrlMatcher` pattern otherwise).                           // 1848\n   *                                                                                                                  // 1849\n   * If the handler is a function, it is injectable. It gets invoked if `$location`                                   // 1850\n   * matches. You have the option of inject the match object as `$match`.                                             // 1851\n   *                                                                                                                  // 1852\n   * The handler can return                                                                                           // 1853\n   *                                                                                                                  // 1854\n   * - **falsy** to indicate that the rule didn't match after all, then `$urlRouter`                                  // 1855\n   *   will continue trying to find another one that matches.                                                         // 1856\n   * - **string** which is treated as a redirect and passed to `$location.url()`                                      // 1857\n   * - **void** or any **truthy** value tells `$urlRouter` that the url was handled.                                  // 1858\n   *                                                                                                                  // 1859\n   * @example                                                                                                         // 1860\n   * <pre>                                                                                                            // 1861\n   * var app = angular.module('app', ['ui.router.router']);                                                           // 1862\n   *                                                                                                                  // 1863\n   * app.config(function ($urlRouterProvider) {                                                                       // 1864\n   *   $urlRouterProvider.when($state.url, function ($match, $stateParams) {                                          // 1865\n   *     if ($state.$current.navigable !== state ||                                                                   // 1866\n   *         !equalForKeys($match, $stateParams) {                                                                    // 1867\n   *      $state.transitionTo(state, $match, false);                                                                  // 1868\n   *     }                                                                                                            // 1869\n   *   });                                                                                                            // 1870\n   * });                                                                                                              // 1871\n   * </pre>                                                                                                           // 1872\n   *                                                                                                                  // 1873\n   * @param {string|object} what The incoming path that you want to redirect.                                         // 1874\n   * @param {string|object} handler The path you want to redirect your user to.                                       // 1875\n   */                                                                                                                 // 1876\n  this.when = function (what, handler) {                                                                              // 1877\n    var redirect, handlerIsString = isString(handler);                                                                // 1878\n    if (isString(what)) what = $urlMatcherFactory.compile(what);                                                      // 1879\n                                                                                                                      // 1880\n    if (!handlerIsString && !isFunction(handler) && !isArray(handler))                                                // 1881\n      throw new Error(\"invalid 'handler' in when()\");                                                                 // 1882\n                                                                                                                      // 1883\n    var strategies = {                                                                                                // 1884\n      matcher: function (what, handler) {                                                                             // 1885\n        if (handlerIsString) {                                                                                        // 1886\n          redirect = $urlMatcherFactory.compile(handler);                                                             // 1887\n          handler = ['$match', function ($match) { return redirect.format($match); }];                                // 1888\n        }                                                                                                             // 1889\n        return extend(function ($injector, $location) {                                                               // 1890\n          return handleIfMatch($injector, handler, what.exec($location.path(), $location.search()));                  // 1891\n        }, {                                                                                                          // 1892\n          prefix: isString(what.prefix) ? what.prefix : ''                                                            // 1893\n        });                                                                                                           // 1894\n      },                                                                                                              // 1895\n      regex: function (what, handler) {                                                                               // 1896\n        if (what.global || what.sticky) throw new Error(\"when() RegExp must not be global or sticky\");                // 1897\n                                                                                                                      // 1898\n        if (handlerIsString) {                                                                                        // 1899\n          redirect = handler;                                                                                         // 1900\n          handler = ['$match', function ($match) { return interpolate(redirect, $match); }];                          // 1901\n        }                                                                                                             // 1902\n        return extend(function ($injector, $location) {                                                               // 1903\n          return handleIfMatch($injector, handler, what.exec($location.path()));                                      // 1904\n        }, {                                                                                                          // 1905\n          prefix: regExpPrefix(what)                                                                                  // 1906\n        });                                                                                                           // 1907\n      }                                                                                                               // 1908\n    };                                                                                                                // 1909\n                                                                                                                      // 1910\n    var check = { matcher: $urlMatcherFactory.isMatcher(what), regex: what instanceof RegExp };                       // 1911\n                                                                                                                      // 1912\n    for (var n in check) {                                                                                            // 1913\n      if (check[n]) return this.rule(strategies[n](what, handler));                                                   // 1914\n    }                                                                                                                 // 1915\n                                                                                                                      // 1916\n    throw new Error(\"invalid 'what' in when()\");                                                                      // 1917\n  };                                                                                                                  // 1918\n                                                                                                                      // 1919\n  /**                                                                                                                 // 1920\n   * @ngdoc function                                                                                                  // 1921\n   * @name ui.router.router.$urlRouterProvider#deferIntercept                                                         // 1922\n   * @methodOf ui.router.router.$urlRouterProvider                                                                    // 1923\n   *                                                                                                                  // 1924\n   * @description                                                                                                     // 1925\n   * Disables (or enables) deferring location change interception.                                                    // 1926\n   *                                                                                                                  // 1927\n   * If you wish to customize the behavior of syncing the URL (for example, if you wish to                            // 1928\n   * defer a transition but maintain the current URL), call this method at configuration time.                        // 1929\n   * Then, at run time, call `$urlRouter.listen()` after you have configured your own                                 // 1930\n   * `$locationChangeSuccess` event handler.                                                                          // 1931\n   *                                                                                                                  // 1932\n   * @example                                                                                                         // 1933\n   * <pre>                                                                                                            // 1934\n   * var app = angular.module('app', ['ui.router.router']);                                                           // 1935\n   *                                                                                                                  // 1936\n   * app.config(function ($urlRouterProvider) {                                                                       // 1937\n   *                                                                                                                  // 1938\n   *   // Prevent $urlRouter from automatically intercepting URL changes;                                             // 1939\n   *   // this allows you to configure custom behavior in between                                                     // 1940\n   *   // location changes and route synchronization:                                                                 // 1941\n   *   $urlRouterProvider.deferIntercept();                                                                           // 1942\n   *                                                                                                                  // 1943\n   * }).run(function ($rootScope, $urlRouter, UserService) {                                                          // 1944\n   *                                                                                                                  // 1945\n   *   $rootScope.$on('$locationChangeSuccess', function(e) {                                                         // 1946\n   *     // UserService is an example service for managing user state                                                 // 1947\n   *     if (UserService.isLoggedIn()) return;                                                                        // 1948\n   *                                                                                                                  // 1949\n   *     // Prevent $urlRouter's default handler from firing                                                          // 1950\n   *     e.preventDefault();                                                                                          // 1951\n   *                                                                                                                  // 1952\n   *     UserService.handleLogin().then(function() {                                                                  // 1953\n   *       // Once the user has logged in, sync the current URL                                                       // 1954\n   *       // to the router:                                                                                          // 1955\n   *       $urlRouter.sync();                                                                                         // 1956\n   *     });                                                                                                          // 1957\n   *   });                                                                                                            // 1958\n   *                                                                                                                  // 1959\n   *   // Configures $urlRouter's listener *after* your custom listener                                               // 1960\n   *   $urlRouter.listen();                                                                                           // 1961\n   * });                                                                                                              // 1962\n   * </pre>                                                                                                           // 1963\n   *                                                                                                                  // 1964\n   * @param {boolean} defer Indicates whether to defer location change interception. Passing                          // 1965\n            no parameter is equivalent to `true`.                                                                     // 1966\n   */                                                                                                                 // 1967\n  this.deferIntercept = function (defer) {                                                                            // 1968\n    if (defer === undefined) defer = true;                                                                            // 1969\n    interceptDeferred = defer;                                                                                        // 1970\n  };                                                                                                                  // 1971\n                                                                                                                      // 1972\n  /**                                                                                                                 // 1973\n   * @ngdoc object                                                                                                    // 1974\n   * @name ui.router.router.$urlRouter                                                                                // 1975\n   *                                                                                                                  // 1976\n   * @requires $location                                                                                              // 1977\n   * @requires $rootScope                                                                                             // 1978\n   * @requires $injector                                                                                              // 1979\n   * @requires $browser                                                                                               // 1980\n   *                                                                                                                  // 1981\n   * @description                                                                                                     // 1982\n   *                                                                                                                  // 1983\n   */                                                                                                                 // 1984\n  this.$get = $get;                                                                                                   // 1985\n  $get.$inject = ['$location', '$rootScope', '$injector', '$browser'];                                                // 1986\n  function $get(   $location,   $rootScope,   $injector,   $browser) {                                                // 1987\n                                                                                                                      // 1988\n    var baseHref = $browser.baseHref(), location = $location.url(), lastPushedUrl;                                    // 1989\n                                                                                                                      // 1990\n    function appendBasePath(url, isHtml5, absolute) {                                                                 // 1991\n      if (baseHref === '/') return url;                                                                               // 1992\n      if (isHtml5) return baseHref.slice(0, -1) + url;                                                                // 1993\n      if (absolute) return baseHref.slice(1) + url;                                                                   // 1994\n      return url;                                                                                                     // 1995\n    }                                                                                                                 // 1996\n                                                                                                                      // 1997\n    // TODO: Optimize groups of rules with non-empty prefix into some sort of decision tree                           // 1998\n    function update(evt) {                                                                                            // 1999\n      if (evt && evt.defaultPrevented) return;                                                                        // 2000\n      var ignoreUpdate = lastPushedUrl && $location.url() === lastPushedUrl;                                          // 2001\n      lastPushedUrl = undefined;                                                                                      // 2002\n      // TODO: Re-implement this in 1.0 for https://github.com/angular-ui/ui-router/issues/1573                       // 2003\n      //if (ignoreUpdate) return true;                                                                                // 2004\n                                                                                                                      // 2005\n      function check(rule) {                                                                                          // 2006\n        var handled = rule($injector, $location);                                                                     // 2007\n                                                                                                                      // 2008\n        if (!handled) return false;                                                                                   // 2009\n        if (isString(handled)) $location.replace().url(handled);                                                      // 2010\n        return true;                                                                                                  // 2011\n      }                                                                                                               // 2012\n      var n = rules.length, i;                                                                                        // 2013\n                                                                                                                      // 2014\n      for (i = 0; i < n; i++) {                                                                                       // 2015\n        if (check(rules[i])) return;                                                                                  // 2016\n      }                                                                                                               // 2017\n      // always check otherwise last to allow dynamic updates to the set of rules                                     // 2018\n      if (otherwise) check(otherwise);                                                                                // 2019\n    }                                                                                                                 // 2020\n                                                                                                                      // 2021\n    function listen() {                                                                                               // 2022\n      listener = listener || $rootScope.$on('$locationChangeSuccess', update);                                        // 2023\n      return listener;                                                                                                // 2024\n    }                                                                                                                 // 2025\n                                                                                                                      // 2026\n    if (!interceptDeferred) listen();                                                                                 // 2027\n                                                                                                                      // 2028\n    return {                                                                                                          // 2029\n      /**                                                                                                             // 2030\n       * @ngdoc function                                                                                              // 2031\n       * @name ui.router.router.$urlRouter#sync                                                                       // 2032\n       * @methodOf ui.router.router.$urlRouter                                                                        // 2033\n       *                                                                                                              // 2034\n       * @description                                                                                                 // 2035\n       * Triggers an update; the same update that happens when the address bar url changes, aka `$locationChangeSuccess`.\n       * This method is useful when you need to use `preventDefault()` on the `$locationChangeSuccess` event,         // 2037\n       * perform some custom logic (route protection, auth, config, redirection, etc) and then finally proceed        // 2038\n       * with the transition by calling `$urlRouter.sync()`.                                                          // 2039\n       *                                                                                                              // 2040\n       * @example                                                                                                     // 2041\n       * <pre>                                                                                                        // 2042\n       * angular.module('app', ['ui.router'])                                                                         // 2043\n       *   .run(function($rootScope, $urlRouter) {                                                                    // 2044\n       *     $rootScope.$on('$locationChangeSuccess', function(evt) {                                                 // 2045\n       *       // Halt state change from even starting                                                                // 2046\n       *       evt.preventDefault();                                                                                  // 2047\n       *       // Perform custom logic                                                                                // 2048\n       *       var meetsRequirement = ...                                                                             // 2049\n       *       // Continue with the update and state transition if logic allows                                       // 2050\n       *       if (meetsRequirement) $urlRouter.sync();                                                               // 2051\n       *     });                                                                                                      // 2052\n       * });                                                                                                          // 2053\n       * </pre>                                                                                                       // 2054\n       */                                                                                                             // 2055\n      sync: function() {                                                                                              // 2056\n        update();                                                                                                     // 2057\n      },                                                                                                              // 2058\n                                                                                                                      // 2059\n      listen: function() {                                                                                            // 2060\n        return listen();                                                                                              // 2061\n      },                                                                                                              // 2062\n                                                                                                                      // 2063\n      update: function(read) {                                                                                        // 2064\n        if (read) {                                                                                                   // 2065\n          location = $location.url();                                                                                 // 2066\n          return;                                                                                                     // 2067\n        }                                                                                                             // 2068\n        if ($location.url() === location) return;                                                                     // 2069\n                                                                                                                      // 2070\n        $location.url(location);                                                                                      // 2071\n        $location.replace();                                                                                          // 2072\n      },                                                                                                              // 2073\n                                                                                                                      // 2074\n      push: function(urlMatcher, params, options) {                                                                   // 2075\n         var url = urlMatcher.format(params || {});                                                                   // 2076\n                                                                                                                      // 2077\n        // Handle the special hash param, if needed                                                                   // 2078\n        if (url !== null && params && params['#']) {                                                                  // 2079\n            url += '#' + params['#'];                                                                                 // 2080\n        }                                                                                                             // 2081\n                                                                                                                      // 2082\n        $location.url(url);                                                                                           // 2083\n        lastPushedUrl = options && options.$$avoidResync ? $location.url() : undefined;                               // 2084\n        if (options && options.replace) $location.replace();                                                          // 2085\n      },                                                                                                              // 2086\n                                                                                                                      // 2087\n      /**                                                                                                             // 2088\n       * @ngdoc function                                                                                              // 2089\n       * @name ui.router.router.$urlRouter#href                                                                       // 2090\n       * @methodOf ui.router.router.$urlRouter                                                                        // 2091\n       *                                                                                                              // 2092\n       * @description                                                                                                 // 2093\n       * A URL generation method that returns the compiled URL for a given                                            // 2094\n       * {@link ui.router.util.type:UrlMatcher `UrlMatcher`}, populated with the provided parameters.                 // 2095\n       *                                                                                                              // 2096\n       * @example                                                                                                     // 2097\n       * <pre>                                                                                                        // 2098\n       * $bob = $urlRouter.href(new UrlMatcher(\"/about/:person\"), {                                                   // 2099\n       *   person: \"bob\"                                                                                              // 2100\n       * });                                                                                                          // 2101\n       * // $bob == \"/about/bob\";                                                                                     // 2102\n       * </pre>                                                                                                       // 2103\n       *                                                                                                              // 2104\n       * @param {UrlMatcher} urlMatcher The `UrlMatcher` object which is used as the template of the URL to generate. // 2105\n       * @param {object=} params An object of parameter values to fill the matcher's required parameters.             // 2106\n       * @param {object=} options Options object. The options are:                                                    // 2107\n       *                                                                                                              // 2108\n       * - **`absolute`** - {boolean=false},  If true will generate an absolute url, e.g. \"http://www.example.com/fullurl\".\n       *                                                                                                              // 2110\n       * @returns {string} Returns the fully compiled URL, or `null` if `params` fail validation against `urlMatcher` // 2111\n       */                                                                                                             // 2112\n      href: function(urlMatcher, params, options) {                                                                   // 2113\n        if (!urlMatcher.validates(params)) return null;                                                               // 2114\n                                                                                                                      // 2115\n        var isHtml5 = $locationProvider.html5Mode();                                                                  // 2116\n        if (angular.isObject(isHtml5)) {                                                                              // 2117\n          isHtml5 = isHtml5.enabled;                                                                                  // 2118\n        }                                                                                                             // 2119\n                                                                                                                      // 2120\n        var url = urlMatcher.format(params);                                                                          // 2121\n        options = options || {};                                                                                      // 2122\n                                                                                                                      // 2123\n        if (!isHtml5 && url !== null) {                                                                               // 2124\n          url = \"#\" + $locationProvider.hashPrefix() + url;                                                           // 2125\n        }                                                                                                             // 2126\n                                                                                                                      // 2127\n        // Handle special hash param, if needed                                                                       // 2128\n        if (url !== null && params && params['#']) {                                                                  // 2129\n          url += '#' + params['#'];                                                                                   // 2130\n        }                                                                                                             // 2131\n                                                                                                                      // 2132\n        url = appendBasePath(url, isHtml5, options.absolute);                                                         // 2133\n                                                                                                                      // 2134\n        if (!options.absolute || !url) {                                                                              // 2135\n          return url;                                                                                                 // 2136\n        }                                                                                                             // 2137\n                                                                                                                      // 2138\n        var slash = (!isHtml5 && url ? '/' : ''), port = $location.port();                                            // 2139\n        port = (port === 80 || port === 443 ? '' : ':' + port);                                                       // 2140\n                                                                                                                      // 2141\n        return [$location.protocol(), '://', $location.host(), port, slash, url].join('');                            // 2142\n      }                                                                                                               // 2143\n    };                                                                                                                // 2144\n  }                                                                                                                   // 2145\n}                                                                                                                     // 2146\n                                                                                                                      // 2147\nangular.module('ui.router.router').provider('$urlRouter', $UrlRouterProvider);                                        // 2148\n                                                                                                                      // 2149\n/**                                                                                                                   // 2150\n * @ngdoc object                                                                                                      // 2151\n * @name ui.router.state.$stateProvider                                                                               // 2152\n *                                                                                                                    // 2153\n * @requires ui.router.router.$urlRouterProvider                                                                      // 2154\n * @requires ui.router.util.$urlMatcherFactoryProvider                                                                // 2155\n *                                                                                                                    // 2156\n * @description                                                                                                       // 2157\n * The new `$stateProvider` works similar to Angular's v1 router, but it focuses purely                               // 2158\n * on state.                                                                                                          // 2159\n *                                                                                                                    // 2160\n * A state corresponds to a \"place\" in the application in terms of the overall UI and                                 // 2161\n * navigation. A state describes (via the controller / template / view properties) what                               // 2162\n * the UI looks like and does at that place.                                                                          // 2163\n *                                                                                                                    // 2164\n * States often have things in common, and the primary way of factoring out these                                     // 2165\n * commonalities in this model is via the state hierarchy, i.e. parent/child states aka                               // 2166\n * nested states.                                                                                                     // 2167\n *                                                                                                                    // 2168\n * The `$stateProvider` provides interfaces to declare these states for your app.                                     // 2169\n */                                                                                                                   // 2170\n$StateProvider.$inject = ['$urlRouterProvider', '$urlMatcherFactoryProvider'];                                        // 2171\nfunction $StateProvider(   $urlRouterProvider,   $urlMatcherFactory) {                                                // 2172\n                                                                                                                      // 2173\n  var root, states = {}, $state, queue = {}, abstractKey = 'abstract';                                                // 2174\n                                                                                                                      // 2175\n  // Builds state properties from definition passed to registerState()                                                // 2176\n  var stateBuilder = {                                                                                                // 2177\n                                                                                                                      // 2178\n    // Derive parent state from a hierarchical name only if 'parent' is not explicitly defined.                       // 2179\n    // state.children = [];                                                                                           // 2180\n    // if (parent) parent.children.push(state);                                                                       // 2181\n    parent: function(state) {                                                                                         // 2182\n      if (isDefined(state.parent) && state.parent) return findState(state.parent);                                    // 2183\n      // regex matches any valid composite state name                                                                 // 2184\n      // would match \"contact.list\" but not \"contacts\"                                                                // 2185\n      var compositeName = /^(.+)\\.[^.]+$/.exec(state.name);                                                           // 2186\n      return compositeName ? findState(compositeName[1]) : root;                                                      // 2187\n    },                                                                                                                // 2188\n                                                                                                                      // 2189\n    // inherit 'data' from parent and override by own values (if any)                                                 // 2190\n    data: function(state) {                                                                                           // 2191\n      if (state.parent && state.parent.data) {                                                                        // 2192\n        state.data = state.self.data = extend({}, state.parent.data, state.data);                                     // 2193\n      }                                                                                                               // 2194\n      return state.data;                                                                                              // 2195\n    },                                                                                                                // 2196\n                                                                                                                      // 2197\n    // Build a URLMatcher if necessary, either via a relative or absolute URL                                         // 2198\n    url: function(state) {                                                                                            // 2199\n      var url = state.url, config = { params: state.params || {} };                                                   // 2200\n                                                                                                                      // 2201\n      if (isString(url)) {                                                                                            // 2202\n        if (url.charAt(0) == '^') return $urlMatcherFactory.compile(url.substring(1), config);                        // 2203\n        return (state.parent.navigable || root).url.concat(url, config);                                              // 2204\n      }                                                                                                               // 2205\n                                                                                                                      // 2206\n      if (!url || $urlMatcherFactory.isMatcher(url)) return url;                                                      // 2207\n      throw new Error(\"Invalid url '\" + url + \"' in state '\" + state + \"'\");                                          // 2208\n    },                                                                                                                // 2209\n                                                                                                                      // 2210\n    // Keep track of the closest ancestor state that has a URL (i.e. is navigable)                                    // 2211\n    navigable: function(state) {                                                                                      // 2212\n      return state.url ? state : (state.parent ? state.parent.navigable : null);                                      // 2213\n    },                                                                                                                // 2214\n                                                                                                                      // 2215\n    // Own parameters for this state. state.url.params is already built at this point. Create and add non-url params  // 2216\n    ownParams: function(state) {                                                                                      // 2217\n      var params = state.url && state.url.params || new $$UMFP.ParamSet();                                            // 2218\n      forEach(state.params || {}, function(config, id) {                                                              // 2219\n        if (!params[id]) params[id] = new $$UMFP.Param(id, null, config, \"config\");                                   // 2220\n      });                                                                                                             // 2221\n      return params;                                                                                                  // 2222\n    },                                                                                                                // 2223\n                                                                                                                      // 2224\n    // Derive parameters for this state and ensure they're a super-set of parent's parameters                         // 2225\n    params: function(state) {                                                                                         // 2226\n      return state.parent && state.parent.params ? extend(state.parent.params.$$new(), state.ownParams) : new $$UMFP.ParamSet();\n    },                                                                                                                // 2228\n                                                                                                                      // 2229\n    // If there is no explicit multi-view configuration, make one up so we don't have                                 // 2230\n    // to handle both cases in the view directive later. Note that having an explicit                                 // 2231\n    // 'views' property will mean the default unnamed view properties are ignored. This                               // 2232\n    // is also a good time to resolve view names to absolute names, so everything is a                                // 2233\n    // straight lookup at link time.                                                                                  // 2234\n    views: function(state) {                                                                                          // 2235\n      var views = {};                                                                                                 // 2236\n                                                                                                                      // 2237\n      forEach(isDefined(state.views) ? state.views : { '': state }, function (view, name) {                           // 2238\n        if (name.indexOf('@') < 0) name += '@' + state.parent.name;                                                   // 2239\n        views[name] = view;                                                                                           // 2240\n      });                                                                                                             // 2241\n      return views;                                                                                                   // 2242\n    },                                                                                                                // 2243\n                                                                                                                      // 2244\n    // Keep a full path from the root down to this state as this is needed for state activation.                      // 2245\n    path: function(state) {                                                                                           // 2246\n      return state.parent ? state.parent.path.concat(state) : []; // exclude root from path                           // 2247\n    },                                                                                                                // 2248\n                                                                                                                      // 2249\n    // Speed up $state.contains() as it's used a lot                                                                  // 2250\n    includes: function(state) {                                                                                       // 2251\n      var includes = state.parent ? extend({}, state.parent.includes) : {};                                           // 2252\n      includes[state.name] = true;                                                                                    // 2253\n      return includes;                                                                                                // 2254\n    },                                                                                                                // 2255\n                                                                                                                      // 2256\n    $delegates: {}                                                                                                    // 2257\n  };                                                                                                                  // 2258\n                                                                                                                      // 2259\n  function isRelative(stateName) {                                                                                    // 2260\n    return stateName.indexOf(\".\") === 0 || stateName.indexOf(\"^\") === 0;                                              // 2261\n  }                                                                                                                   // 2262\n                                                                                                                      // 2263\n  function findState(stateOrName, base) {                                                                             // 2264\n    if (!stateOrName) return undefined;                                                                               // 2265\n                                                                                                                      // 2266\n    var isStr = isString(stateOrName),                                                                                // 2267\n        name  = isStr ? stateOrName : stateOrName.name,                                                               // 2268\n        path  = isRelative(name);                                                                                     // 2269\n                                                                                                                      // 2270\n    if (path) {                                                                                                       // 2271\n      if (!base) throw new Error(\"No reference point given for path '\"  + name + \"'\");                                // 2272\n      base = findState(base);                                                                                         // 2273\n                                                                                                                      // 2274\n      var rel = name.split(\".\"), i = 0, pathLength = rel.length, current = base;                                      // 2275\n                                                                                                                      // 2276\n      for (; i < pathLength; i++) {                                                                                   // 2277\n        if (rel[i] === \"\" && i === 0) {                                                                               // 2278\n          current = base;                                                                                             // 2279\n          continue;                                                                                                   // 2280\n        }                                                                                                             // 2281\n        if (rel[i] === \"^\") {                                                                                         // 2282\n          if (!current.parent) throw new Error(\"Path '\" + name + \"' not valid for state '\" + base.name + \"'\");        // 2283\n          current = current.parent;                                                                                   // 2284\n          continue;                                                                                                   // 2285\n        }                                                                                                             // 2286\n        break;                                                                                                        // 2287\n      }                                                                                                               // 2288\n      rel = rel.slice(i).join(\".\");                                                                                   // 2289\n      name = current.name + (current.name && rel ? \".\" : \"\") + rel;                                                   // 2290\n    }                                                                                                                 // 2291\n    var state = states[name];                                                                                         // 2292\n                                                                                                                      // 2293\n    if (state && (isStr || (!isStr && (state === stateOrName || state.self === stateOrName)))) {                      // 2294\n      return state;                                                                                                   // 2295\n    }                                                                                                                 // 2296\n    return undefined;                                                                                                 // 2297\n  }                                                                                                                   // 2298\n                                                                                                                      // 2299\n  function queueState(parentName, state) {                                                                            // 2300\n    if (!queue[parentName]) {                                                                                         // 2301\n      queue[parentName] = [];                                                                                         // 2302\n    }                                                                                                                 // 2303\n    queue[parentName].push(state);                                                                                    // 2304\n  }                                                                                                                   // 2305\n                                                                                                                      // 2306\n  function flushQueuedChildren(parentName) {                                                                          // 2307\n    var queued = queue[parentName] || [];                                                                             // 2308\n    while(queued.length) {                                                                                            // 2309\n      registerState(queued.shift());                                                                                  // 2310\n    }                                                                                                                 // 2311\n  }                                                                                                                   // 2312\n                                                                                                                      // 2313\n  function registerState(state) {                                                                                     // 2314\n    // Wrap a new object around the state so we can store our private details easily.                                 // 2315\n    state = inherit(state, {                                                                                          // 2316\n      self: state,                                                                                                    // 2317\n      resolve: state.resolve || {},                                                                                   // 2318\n      toString: function() { return this.name; }                                                                      // 2319\n    });                                                                                                               // 2320\n                                                                                                                      // 2321\n    var name = state.name;                                                                                            // 2322\n    if (!isString(name) || name.indexOf('@') >= 0) throw new Error(\"State must have a valid name\");                   // 2323\n    if (states.hasOwnProperty(name)) throw new Error(\"State '\" + name + \"'' is already defined\");                     // 2324\n                                                                                                                      // 2325\n    // Get parent name                                                                                                // 2326\n    var parentName = (name.indexOf('.') !== -1) ? name.substring(0, name.lastIndexOf('.'))                            // 2327\n        : (isString(state.parent)) ? state.parent                                                                     // 2328\n        : (isObject(state.parent) && isString(state.parent.name)) ? state.parent.name                                 // 2329\n        : '';                                                                                                         // 2330\n                                                                                                                      // 2331\n    // If parent is not registered yet, add state to queue and register later                                         // 2332\n    if (parentName && !states[parentName]) {                                                                          // 2333\n      return queueState(parentName, state.self);                                                                      // 2334\n    }                                                                                                                 // 2335\n                                                                                                                      // 2336\n    for (var key in stateBuilder) {                                                                                   // 2337\n      if (isFunction(stateBuilder[key])) state[key] = stateBuilder[key](state, stateBuilder.$delegates[key]);         // 2338\n    }                                                                                                                 // 2339\n    states[name] = state;                                                                                             // 2340\n                                                                                                                      // 2341\n    // Register the state in the global state list and with $urlRouter if necessary.                                  // 2342\n    if (!state[abstractKey] && state.url) {                                                                           // 2343\n      $urlRouterProvider.when(state.url, ['$match', '$stateParams', function ($match, $stateParams) {                 // 2344\n        if ($state.$current.navigable != state || !equalForKeys($match, $stateParams)) {                              // 2345\n          $state.transitionTo(state, $match, { inherit: true, location: false });                                     // 2346\n        }                                                                                                             // 2347\n      }]);                                                                                                            // 2348\n    }                                                                                                                 // 2349\n                                                                                                                      // 2350\n    // Register any queued children                                                                                   // 2351\n    flushQueuedChildren(name);                                                                                        // 2352\n                                                                                                                      // 2353\n    return state;                                                                                                     // 2354\n  }                                                                                                                   // 2355\n                                                                                                                      // 2356\n  // Checks text to see if it looks like a glob.                                                                      // 2357\n  function isGlob (text) {                                                                                            // 2358\n    return text.indexOf('*') > -1;                                                                                    // 2359\n  }                                                                                                                   // 2360\n                                                                                                                      // 2361\n  // Returns true if glob matches current $state name.                                                                // 2362\n  function doesStateMatchGlob (glob) {                                                                                // 2363\n    var globSegments = glob.split('.'),                                                                               // 2364\n        segments = $state.$current.name.split('.');                                                                   // 2365\n                                                                                                                      // 2366\n    //match single stars                                                                                              // 2367\n    for (var i = 0, l = globSegments.length; i < l; i++) {                                                            // 2368\n      if (globSegments[i] === '*') {                                                                                  // 2369\n        segments[i] = '*';                                                                                            // 2370\n      }                                                                                                               // 2371\n    }                                                                                                                 // 2372\n                                                                                                                      // 2373\n    //match greedy starts                                                                                             // 2374\n    if (globSegments[0] === '**') {                                                                                   // 2375\n       segments = segments.slice(indexOf(segments, globSegments[1]));                                                 // 2376\n       segments.unshift('**');                                                                                        // 2377\n    }                                                                                                                 // 2378\n    //match greedy ends                                                                                               // 2379\n    if (globSegments[globSegments.length - 1] === '**') {                                                             // 2380\n       segments.splice(indexOf(segments, globSegments[globSegments.length - 2]) + 1, Number.MAX_VALUE);               // 2381\n       segments.push('**');                                                                                           // 2382\n    }                                                                                                                 // 2383\n                                                                                                                      // 2384\n    if (globSegments.length != segments.length) {                                                                     // 2385\n      return false;                                                                                                   // 2386\n    }                                                                                                                 // 2387\n                                                                                                                      // 2388\n    return segments.join('') === globSegments.join('');                                                               // 2389\n  }                                                                                                                   // 2390\n                                                                                                                      // 2391\n                                                                                                                      // 2392\n  // Implicit root state that is always active                                                                        // 2393\n  root = registerState({                                                                                              // 2394\n    name: '',                                                                                                         // 2395\n    url: '^',                                                                                                         // 2396\n    views: null,                                                                                                      // 2397\n    'abstract': true                                                                                                  // 2398\n  });                                                                                                                 // 2399\n  root.navigable = null;                                                                                              // 2400\n                                                                                                                      // 2401\n                                                                                                                      // 2402\n  /**                                                                                                                 // 2403\n   * @ngdoc function                                                                                                  // 2404\n   * @name ui.router.state.$stateProvider#decorator                                                                   // 2405\n   * @methodOf ui.router.state.$stateProvider                                                                         // 2406\n   *                                                                                                                  // 2407\n   * @description                                                                                                     // 2408\n   * Allows you to extend (carefully) or override (at your own peril) the                                             // 2409\n   * `stateBuilder` object used internally by `$stateProvider`. This can be used                                      // 2410\n   * to add custom functionality to ui-router, for example inferring templateUrl                                      // 2411\n   * based on the state name.                                                                                         // 2412\n   *                                                                                                                  // 2413\n   * When passing only a name, it returns the current (original or decorated) builder                                 // 2414\n   * function that matches `name`.                                                                                    // 2415\n   *                                                                                                                  // 2416\n   * The builder functions that can be decorated are listed below. Though not all                                     // 2417\n   * necessarily have a good use case for decoration, that is up to you to decide.                                    // 2418\n   *                                                                                                                  // 2419\n   * In addition, users can attach custom decorators, which will generate new                                         // 2420\n   * properties within the state's internal definition. There is currently no clear                                   // 2421\n   * use-case for this beyond accessing internal states (i.e. $state.$current),                                       // 2422\n   * however, expect this to become increasingly relevant as we introduce additional                                  // 2423\n   * meta-programming features.                                                                                       // 2424\n   *                                                                                                                  // 2425\n   * **Warning**: Decorators should not be interdependent because the order of                                        // 2426\n   * execution of the builder functions in non-deterministic. Builder functions                                       // 2427\n   * should only be dependent on the state definition object and super function.                                      // 2428\n   *                                                                                                                  // 2429\n   *                                                                                                                  // 2430\n   * Existing builder functions and current return values:                                                            // 2431\n   *                                                                                                                  // 2432\n   * - **parent** `{object}` - returns the parent state object.                                                       // 2433\n   * - **data** `{object}` - returns state data, including any inherited data that is not                             // 2434\n   *   overridden by own values (if any).                                                                             // 2435\n   * - **url** `{object}` - returns a {@link ui.router.util.type:UrlMatcher UrlMatcher}                               // 2436\n   *   or `null`.                                                                                                     // 2437\n   * - **navigable** `{object}` - returns closest ancestor state that has a URL (aka is                               // 2438\n   *   navigable).                                                                                                    // 2439\n   * - **params** `{object}` - returns an array of state params that are ensured to                                   // 2440\n   *   be a super-set of parent's params.                                                                             // 2441\n   * - **views** `{object}` - returns a views object where each key is an absolute view                               // 2442\n   *   name (i.e. \"viewName@stateName\") and each value is the config object                                           // 2443\n   *   (template, controller) for the view. Even when you don't use the views object                                  // 2444\n   *   explicitly on a state config, one is still created for you internally.                                         // 2445\n   *   So by decorating this builder function you have access to decorating template                                  // 2446\n   *   and controller properties.                                                                                     // 2447\n   * - **ownParams** `{object}` - returns an array of params that belong to the state,                                // 2448\n   *   not including any params defined by ancestor states.                                                           // 2449\n   * - **path** `{string}` - returns the full path from the root down to this state.                                  // 2450\n   *   Needed for state activation.                                                                                   // 2451\n   * - **includes** `{object}` - returns an object that includes every state that                                     // 2452\n   *   would pass a `$state.includes()` test.                                                                         // 2453\n   *                                                                                                                  // 2454\n   * @example                                                                                                         // 2455\n   * <pre>                                                                                                            // 2456\n   * // Override the internal 'views' builder with a function that takes the state                                    // 2457\n   * // definition, and a reference to the internal function being overridden:                                        // 2458\n   * $stateProvider.decorator('views', function (state, parent) {                                                     // 2459\n   *   var result = {},                                                                                               // 2460\n   *       views = parent(state);                                                                                     // 2461\n   *                                                                                                                  // 2462\n   *   angular.forEach(views, function (config, name) {                                                               // 2463\n   *     var autoName = (state.name + '.' + name).replace('.', '/');                                                  // 2464\n   *     config.templateUrl = config.templateUrl || '/partials/' + autoName + '.html';                                // 2465\n   *     result[name] = config;                                                                                       // 2466\n   *   });                                                                                                            // 2467\n   *   return result;                                                                                                 // 2468\n   * });                                                                                                              // 2469\n   *                                                                                                                  // 2470\n   * $stateProvider.state('home', {                                                                                   // 2471\n   *   views: {                                                                                                       // 2472\n   *     'contact.list': { controller: 'ListController' },                                                            // 2473\n   *     'contact.item': { controller: 'ItemController' }                                                             // 2474\n   *   }                                                                                                              // 2475\n   * });                                                                                                              // 2476\n   *                                                                                                                  // 2477\n   * // ...                                                                                                           // 2478\n   *                                                                                                                  // 2479\n   * $state.go('home');                                                                                               // 2480\n   * // Auto-populates list and item views with /partials/home/contact/list.html,                                     // 2481\n   * // and /partials/home/contact/item.html, respectively.                                                           // 2482\n   * </pre>                                                                                                           // 2483\n   *                                                                                                                  // 2484\n   * @param {string} name The name of the builder function to decorate.                                               // 2485\n   * @param {object} func A function that is responsible for decorating the original                                  // 2486\n   * builder function. The function receives two parameters:                                                          // 2487\n   *                                                                                                                  // 2488\n   *   - `{object}` - state - The state config object.                                                                // 2489\n   *   - `{object}` - super - The original builder function.                                                          // 2490\n   *                                                                                                                  // 2491\n   * @return {object} $stateProvider - $stateProvider instance                                                        // 2492\n   */                                                                                                                 // 2493\n  this.decorator = decorator;                                                                                         // 2494\n  function decorator(name, func) {                                                                                    // 2495\n    /*jshint validthis: true */                                                                                       // 2496\n    if (isString(name) && !isDefined(func)) {                                                                         // 2497\n      return stateBuilder[name];                                                                                      // 2498\n    }                                                                                                                 // 2499\n    if (!isFunction(func) || !isString(name)) {                                                                       // 2500\n      return this;                                                                                                    // 2501\n    }                                                                                                                 // 2502\n    if (stateBuilder[name] && !stateBuilder.$delegates[name]) {                                                       // 2503\n      stateBuilder.$delegates[name] = stateBuilder[name];                                                             // 2504\n    }                                                                                                                 // 2505\n    stateBuilder[name] = func;                                                                                        // 2506\n    return this;                                                                                                      // 2507\n  }                                                                                                                   // 2508\n                                                                                                                      // 2509\n  /**                                                                                                                 // 2510\n   * @ngdoc function                                                                                                  // 2511\n   * @name ui.router.state.$stateProvider#state                                                                       // 2512\n   * @methodOf ui.router.state.$stateProvider                                                                         // 2513\n   *                                                                                                                  // 2514\n   * @description                                                                                                     // 2515\n   * Registers a state configuration under a given state name. The stateConfig object                                 // 2516\n   * has the following acceptable properties.                                                                         // 2517\n   *                                                                                                                  // 2518\n   * @param {string} name A unique state name, e.g. \"home\", \"about\", \"contacts\".                                      // 2519\n   * To create a parent/child state use a dot, e.g. \"about.sales\", \"home.newest\".                                     // 2520\n   * @param {object} stateConfig State configuration object.                                                          // 2521\n   * @param {string|function=} stateConfig.template                                                                   // 2522\n   * <a id='template'></a>                                                                                            // 2523\n   *   html template as a string or a function that returns                                                           // 2524\n   *   an html template as a string which should be used by the uiView directives. This property                      // 2525\n   *   takes precedence over templateUrl.                                                                             // 2526\n   *                                                                                                                  // 2527\n   *   If `template` is a function, it will be called with the following parameters:                                  // 2528\n   *                                                                                                                  // 2529\n   *   - {array.&lt;object&gt;} - state parameters extracted from the current $location.path() by                     // 2530\n   *     applying the current state                                                                                   // 2531\n   *                                                                                                                  // 2532\n   * <pre>template:                                                                                                   // 2533\n   *   \"<h1>inline template definition</h1>\" +                                                                        // 2534\n   *   \"<div ui-view></div>\"</pre>                                                                                    // 2535\n   * <pre>template: function(params) {                                                                                // 2536\n   *       return \"<h1>generated template</h1>\"; }</pre>                                                              // 2537\n   * </div>                                                                                                           // 2538\n   *                                                                                                                  // 2539\n   * @param {string|function=} stateConfig.templateUrl                                                                // 2540\n   * <a id='templateUrl'></a>                                                                                         // 2541\n   *                                                                                                                  // 2542\n   *   path or function that returns a path to an html                                                                // 2543\n   *   template that should be used by uiView.                                                                        // 2544\n   *                                                                                                                  // 2545\n   *   If `templateUrl` is a function, it will be called with the following parameters:                               // 2546\n   *                                                                                                                  // 2547\n   *   - {array.&lt;object&gt;} - state parameters extracted from the current $location.path() by                     // 2548\n   *     applying the current state                                                                                   // 2549\n   *                                                                                                                  // 2550\n   * <pre>templateUrl: \"home.html\"</pre>                                                                              // 2551\n   * <pre>templateUrl: function(params) {                                                                             // 2552\n   *     return myTemplates[params.pageId]; }</pre>                                                                   // 2553\n   *                                                                                                                  // 2554\n   * @param {function=} stateConfig.templateProvider                                                                  // 2555\n   * <a id='templateProvider'></a>                                                                                    // 2556\n   *    Provider function that returns HTML content string.                                                           // 2557\n   * <pre> templateProvider:                                                                                          // 2558\n   *       function(MyTemplateService, params) {                                                                      // 2559\n   *         return MyTemplateService.getTemplate(params.pageId);                                                     // 2560\n   *       }</pre>                                                                                                    // 2561\n   *                                                                                                                  // 2562\n   * @param {string|function=} stateConfig.controller                                                                 // 2563\n   * <a id='controller'></a>                                                                                          // 2564\n   *                                                                                                                  // 2565\n   *  Controller fn that should be associated with newly                                                              // 2566\n   *   related scope or the name of a registered controller if passed as a string.                                    // 2567\n   *   Optionally, the ControllerAs may be declared here.                                                             // 2568\n   * <pre>controller: \"MyRegisteredController\"</pre>                                                                  // 2569\n   * <pre>controller:                                                                                                 // 2570\n   *     \"MyRegisteredController as fooCtrl\"}</pre>                                                                   // 2571\n   * <pre>controller: function($scope, MyService) {                                                                   // 2572\n   *     $scope.data = MyService.getData(); }</pre>                                                                   // 2573\n   *                                                                                                                  // 2574\n   * @param {function=} stateConfig.controllerProvider                                                                // 2575\n   * <a id='controllerProvider'></a>                                                                                  // 2576\n   *                                                                                                                  // 2577\n   * Injectable provider function that returns the actual controller or string.                                       // 2578\n   * <pre>controllerProvider:                                                                                         // 2579\n   *   function(MyResolveData) {                                                                                      // 2580\n   *     if (MyResolveData.foo)                                                                                       // 2581\n   *       return \"FooCtrl\"                                                                                           // 2582\n   *     else if (MyResolveData.bar)                                                                                  // 2583\n   *       return \"BarCtrl\";                                                                                          // 2584\n   *     else return function($scope) {                                                                               // 2585\n   *       $scope.baz = \"Qux\";                                                                                        // 2586\n   *     }                                                                                                            // 2587\n   *   }</pre>                                                                                                        // 2588\n   *                                                                                                                  // 2589\n   * @param {string=} stateConfig.controllerAs                                                                        // 2590\n   * <a id='controllerAs'></a>                                                                                        // 2591\n   *                                                                                                                  // 2592\n   * A controller alias name. If present the controller will be                                                       // 2593\n   *   published to scope under the controllerAs name.                                                                // 2594\n   * <pre>controllerAs: \"myCtrl\"</pre>                                                                                // 2595\n   *                                                                                                                  // 2596\n   * @param {string|object=} stateConfig.parent                                                                       // 2597\n   * <a id='parent'></a>                                                                                              // 2598\n   * Optionally specifies the parent state of this state.                                                             // 2599\n   *                                                                                                                  // 2600\n   * <pre>parent: 'parentState'</pre>                                                                                 // 2601\n   * <pre>parent: parentState // JS variable</pre>                                                                    // 2602\n   *                                                                                                                  // 2603\n   * @param {object=} stateConfig.resolve                                                                             // 2604\n   * <a id='resolve'></a>                                                                                             // 2605\n   *                                                                                                                  // 2606\n   * An optional map&lt;string, function&gt; of dependencies which                                                    // 2607\n   *   should be injected into the controller. If any of these dependencies are promises,                             // 2608\n   *   the router will wait for them all to be resolved before the controller is instantiated.                        // 2609\n   *   If all the promises are resolved successfully, the $stateChangeSuccess event is fired                          // 2610\n   *   and the values of the resolved promises are injected into any controllers that reference them.                 // 2611\n   *   If any  of the promises are rejected the $stateChangeError event is fired.                                     // 2612\n   *                                                                                                                  // 2613\n   *   The map object is:                                                                                             // 2614\n   *                                                                                                                  // 2615\n   *   - key - {string}: name of dependency to be injected into controller                                            // 2616\n   *   - factory - {string|function}: If string then it is alias for service. Otherwise if function,                  // 2617\n   *     it is injected and return value it treated as dependency. If result is a promise, it is                      // 2618\n   *     resolved before its value is injected into controller.                                                       // 2619\n   *                                                                                                                  // 2620\n   * <pre>resolve: {                                                                                                  // 2621\n   *     myResolve1:                                                                                                  // 2622\n   *       function($http, $stateParams) {                                                                            // 2623\n   *         return $http.get(\"/api/foos/\"+stateParams.fooID);                                                        // 2624\n   *       }                                                                                                          // 2625\n   *     }</pre>                                                                                                      // 2626\n   *                                                                                                                  // 2627\n   * @param {string=} stateConfig.url                                                                                 // 2628\n   * <a id='url'></a>                                                                                                 // 2629\n   *                                                                                                                  // 2630\n   *   A url fragment with optional parameters. When a state is navigated or                                          // 2631\n   *   transitioned to, the `$stateParams` service will be populated with any                                         // 2632\n   *   parameters that were passed.                                                                                   // 2633\n   *                                                                                                                  // 2634\n   *   (See {@link ui.router.util.type:UrlMatcher UrlMatcher} `UrlMatcher`} for                                       // 2635\n   *   more details on acceptable patterns )                                                                          // 2636\n   *                                                                                                                  // 2637\n   * examples:                                                                                                        // 2638\n   * <pre>url: \"/home\"                                                                                                // 2639\n   * url: \"/users/:userid\"                                                                                            // 2640\n   * url: \"/books/{bookid:[a-zA-Z_-]}\"                                                                                // 2641\n   * url: \"/books/{categoryid:int}\"                                                                                   // 2642\n   * url: \"/books/{publishername:string}/{categoryid:int}\"                                                            // 2643\n   * url: \"/messages?before&after\"                                                                                    // 2644\n   * url: \"/messages?{before:date}&{after:date}\"                                                                      // 2645\n   * url: \"/messages/:mailboxid?{before:date}&{after:date}\"                                                           // 2646\n   * </pre>                                                                                                           // 2647\n   *                                                                                                                  // 2648\n   * @param {object=} stateConfig.views                                                                               // 2649\n   * <a id='views'></a>                                                                                               // 2650\n   * an optional map&lt;string, object&gt; which defined multiple views, or targets views                             // 2651\n   * manually/explicitly.                                                                                             // 2652\n   *                                                                                                                  // 2653\n   * Examples:                                                                                                        // 2654\n   *                                                                                                                  // 2655\n   * Targets three named `ui-view`s in the parent state's template                                                    // 2656\n   * <pre>views: {                                                                                                    // 2657\n   *     header: {                                                                                                    // 2658\n   *       controller: \"headerCtrl\",                                                                                  // 2659\n   *       templateUrl: \"header.html\"                                                                                 // 2660\n   *     }, body: {                                                                                                   // 2661\n   *       controller: \"bodyCtrl\",                                                                                    // 2662\n   *       templateUrl: \"body.html\"                                                                                   // 2663\n   *     }, footer: {                                                                                                 // 2664\n   *       controller: \"footCtrl\",                                                                                    // 2665\n   *       templateUrl: \"footer.html\"                                                                                 // 2666\n   *     }                                                                                                            // 2667\n   *   }</pre>                                                                                                        // 2668\n   *                                                                                                                  // 2669\n   * Targets named `ui-view=\"header\"` from grandparent state 'top''s template, and named `ui-view=\"body\" from parent state's template.\n   * <pre>views: {                                                                                                    // 2671\n   *     'header@top': {                                                                                              // 2672\n   *       controller: \"msgHeaderCtrl\",                                                                               // 2673\n   *       templateUrl: \"msgHeader.html\"                                                                              // 2674\n   *     }, 'body': {                                                                                                 // 2675\n   *       controller: \"messagesCtrl\",                                                                                // 2676\n   *       templateUrl: \"messages.html\"                                                                               // 2677\n   *     }                                                                                                            // 2678\n   *   }</pre>                                                                                                        // 2679\n   *                                                                                                                  // 2680\n   * @param {boolean=} [stateConfig.abstract=false]                                                                   // 2681\n   * <a id='abstract'></a>                                                                                            // 2682\n   * An abstract state will never be directly activated,                                                              // 2683\n   *   but can provide inherited properties to its common children states.                                            // 2684\n   * <pre>abstract: true</pre>                                                                                        // 2685\n   *                                                                                                                  // 2686\n   * @param {function=} stateConfig.onEnter                                                                           // 2687\n   * <a id='onEnter'></a>                                                                                             // 2688\n   *                                                                                                                  // 2689\n   * Callback function for when a state is entered. Good way                                                          // 2690\n   *   to trigger an action or dispatch an event, such as opening a dialog.                                           // 2691\n   * If minifying your scripts, make sure to explictly annotate this function,                                        // 2692\n   * because it won't be automatically annotated by your build tools.                                                 // 2693\n   *                                                                                                                  // 2694\n   * <pre>onEnter: function(MyService, $stateParams) {                                                                // 2695\n   *     MyService.foo($stateParams.myParam);                                                                         // 2696\n   * }</pre>                                                                                                          // 2697\n   *                                                                                                                  // 2698\n   * @param {function=} stateConfig.onExit                                                                            // 2699\n   * <a id='onExit'></a>                                                                                              // 2700\n   *                                                                                                                  // 2701\n   * Callback function for when a state is exited. Good way to                                                        // 2702\n   *   trigger an action or dispatch an event, such as opening a dialog.                                              // 2703\n   * If minifying your scripts, make sure to explictly annotate this function,                                        // 2704\n   * because it won't be automatically annotated by your build tools.                                                 // 2705\n   *                                                                                                                  // 2706\n   * <pre>onExit: function(MyService, $stateParams) {                                                                 // 2707\n   *     MyService.cleanup($stateParams.myParam);                                                                     // 2708\n   * }</pre>                                                                                                          // 2709\n   *                                                                                                                  // 2710\n   * @param {boolean=} [stateConfig.reloadOnSearch=true]                                                              // 2711\n   * <a id='reloadOnSearch'></a>                                                                                      // 2712\n   *                                                                                                                  // 2713\n   * If `false`, will not retrigger the same state                                                                    // 2714\n   *   just because a search/query parameter has changed (via $location.search() or $location.hash()).                // 2715\n   *   Useful for when you'd like to modify $location.search() without triggering a reload.                           // 2716\n   * <pre>reloadOnSearch: false</pre>                                                                                 // 2717\n   *                                                                                                                  // 2718\n   * @param {object=} stateConfig.data                                                                                // 2719\n   * <a id='data'></a>                                                                                                // 2720\n   *                                                                                                                  // 2721\n   * Arbitrary data object, useful for custom configuration.  The parent state's `data` is                            // 2722\n   *   prototypally inherited.  In other words, adding a data property to a state adds it to                          // 2723\n   *   the entire subtree via prototypal inheritance.                                                                 // 2724\n   *                                                                                                                  // 2725\n   * <pre>data: {                                                                                                     // 2726\n   *     requiredRole: 'foo'                                                                                          // 2727\n   * } </pre>                                                                                                         // 2728\n   *                                                                                                                  // 2729\n   * @param {object=} stateConfig.params                                                                              // 2730\n   * <a id='params'></a>                                                                                              // 2731\n   *                                                                                                                  // 2732\n   * A map which optionally configures parameters declared in the `url`, or                                           // 2733\n   *   defines additional non-url parameters.  For each parameter being                                               // 2734\n   *   configured, add a configuration object keyed to the name of the parameter.                                     // 2735\n   *                                                                                                                  // 2736\n   *   Each parameter configuration object may contain the following properties:                                      // 2737\n   *                                                                                                                  // 2738\n   *   - ** value ** - {object|function=}: specifies the default value for this                                       // 2739\n   *     parameter.  This implicitly sets this parameter as optional.                                                 // 2740\n   *                                                                                                                  // 2741\n   *     When UI-Router routes to a state and no value is                                                             // 2742\n   *     specified for this parameter in the URL or transition, the                                                   // 2743\n   *     default value will be used instead.  If `value` is a function,                                               // 2744\n   *     it will be injected and invoked, and the return value used.                                                  // 2745\n   *                                                                                                                  // 2746\n   *     *Note*: `undefined` is treated as \"no default value\" while `null`                                            // 2747\n   *     is treated as \"the default value is `null`\".                                                                 // 2748\n   *                                                                                                                  // 2749\n   *     *Shorthand*: If you only need to configure the default value of the                                          // 2750\n   *     parameter, you may use a shorthand syntax.   In the **`params`**                                             // 2751\n   *     map, instead mapping the param name to a full parameter configuration                                        // 2752\n   *     object, simply set map it to the default parameter value, e.g.:                                              // 2753\n   *                                                                                                                  // 2754\n   * <pre>// define a parameter's default value                                                                       // 2755\n   * params: {                                                                                                        // 2756\n   *     param1: { value: \"defaultValue\" }                                                                            // 2757\n   * }                                                                                                                // 2758\n   * // shorthand default values                                                                                      // 2759\n   * params: {                                                                                                        // 2760\n   *     param1: \"defaultValue\",                                                                                      // 2761\n   *     param2: \"param2Default\"                                                                                      // 2762\n   * }</pre>                                                                                                          // 2763\n   *                                                                                                                  // 2764\n   *   - ** array ** - {boolean=}: *(default: false)* If true, the param value will be                                // 2765\n   *     treated as an array of values.  If you specified a Type, the value will be                                   // 2766\n   *     treated as an array of the specified Type.  Note: query parameter values                                     // 2767\n   *     default to a special `\"auto\"` mode.                                                                          // 2768\n   *                                                                                                                  // 2769\n   *     For query parameters in `\"auto\"` mode, if multiple  values for a single parameter                            // 2770\n   *     are present in the URL (e.g.: `/foo?bar=1&bar=2&bar=3`) then the values                                      // 2771\n   *     are mapped to an array (e.g.: `{ foo: [ '1', '2', '3' ] }`).  However, if                                    // 2772\n   *     only one value is present (e.g.: `/foo?bar=1`) then the value is treated as single                           // 2773\n   *     value (e.g.: `{ foo: '1' }`).                                                                                // 2774\n   *                                                                                                                  // 2775\n   * <pre>params: {                                                                                                   // 2776\n   *     param1: { array: true }                                                                                      // 2777\n   * }</pre>                                                                                                          // 2778\n   *                                                                                                                  // 2779\n   *   - ** squash ** - {bool|string=}: `squash` configures how a default parameter value is represented in the URL when\n   *     the current parameter value is the same as the default value. If `squash` is not set, it uses the            // 2781\n   *     configured default squash policy.                                                                            // 2782\n   *     (See {@link ui.router.util.$urlMatcherFactory#methods_defaultSquashPolicy `defaultSquashPolicy()`})          // 2783\n   *                                                                                                                  // 2784\n   *   There are three squash settings:                                                                               // 2785\n   *                                                                                                                  // 2786\n   *     - false: The parameter's default value is not squashed.  It is encoded and included in the URL               // 2787\n   *     - true: The parameter's default value is omitted from the URL.  If the parameter is preceeded and followed   // 2788\n   *       by slashes in the state's `url` declaration, then one of those slashes are omitted.                        // 2789\n   *       This can allow for cleaner looking URLs.                                                                   // 2790\n   *     - `\"<arbitrary string>\"`: The parameter's default value is replaced with an arbitrary placeholder of  your choice.\n   *                                                                                                                  // 2792\n   * <pre>params: {                                                                                                   // 2793\n   *     param1: {                                                                                                    // 2794\n   *       value: \"defaultId\",                                                                                        // 2795\n   *       squash: true                                                                                               // 2796\n   * } }                                                                                                              // 2797\n   * // squash \"defaultValue\" to \"~\"                                                                                  // 2798\n   * params: {                                                                                                        // 2799\n   *     param1: {                                                                                                    // 2800\n   *       value: \"defaultValue\",                                                                                     // 2801\n   *       squash: \"~\"                                                                                                // 2802\n   * } }                                                                                                              // 2803\n   * </pre>                                                                                                           // 2804\n   *                                                                                                                  // 2805\n   *                                                                                                                  // 2806\n   * @example                                                                                                         // 2807\n   * <pre>                                                                                                            // 2808\n   * // Some state name examples                                                                                      // 2809\n   *                                                                                                                  // 2810\n   * // stateName can be a single top-level name (must be unique).                                                    // 2811\n   * $stateProvider.state(\"home\", {});                                                                                // 2812\n   *                                                                                                                  // 2813\n   * // Or it can be a nested state name. This state is a child of the                                                // 2814\n   * // above \"home\" state.                                                                                           // 2815\n   * $stateProvider.state(\"home.newest\", {});                                                                         // 2816\n   *                                                                                                                  // 2817\n   * // Nest states as deeply as needed.                                                                              // 2818\n   * $stateProvider.state(\"home.newest.abc.xyz.inception\", {});                                                       // 2819\n   *                                                                                                                  // 2820\n   * // state() returns $stateProvider, so you can chain state declarations.                                          // 2821\n   * $stateProvider                                                                                                   // 2822\n   *   .state(\"home\", {})                                                                                             // 2823\n   *   .state(\"about\", {})                                                                                            // 2824\n   *   .state(\"contacts\", {});                                                                                        // 2825\n   * </pre>                                                                                                           // 2826\n   *                                                                                                                  // 2827\n   */                                                                                                                 // 2828\n  this.state = state;                                                                                                 // 2829\n  function state(name, definition) {                                                                                  // 2830\n    /*jshint validthis: true */                                                                                       // 2831\n    if (isObject(name)) definition = name;                                                                            // 2832\n    else definition.name = name;                                                                                      // 2833\n    registerState(definition);                                                                                        // 2834\n    return this;                                                                                                      // 2835\n  }                                                                                                                   // 2836\n                                                                                                                      // 2837\n  /**                                                                                                                 // 2838\n   * @ngdoc object                                                                                                    // 2839\n   * @name ui.router.state.$state                                                                                     // 2840\n   *                                                                                                                  // 2841\n   * @requires $rootScope                                                                                             // 2842\n   * @requires $q                                                                                                     // 2843\n   * @requires ui.router.state.$view                                                                                  // 2844\n   * @requires $injector                                                                                              // 2845\n   * @requires ui.router.util.$resolve                                                                                // 2846\n   * @requires ui.router.state.$stateParams                                                                           // 2847\n   * @requires ui.router.router.$urlRouter                                                                            // 2848\n   *                                                                                                                  // 2849\n   * @property {object} params A param object, e.g. {sectionId: section.id)}, that                                    // 2850\n   * you'd like to test against the current active state.                                                             // 2851\n   * @property {object} current A reference to the state's config object. However                                     // 2852\n   * you passed it in. Useful for accessing custom data.                                                              // 2853\n   * @property {object} transition Currently pending transition. A promise that'll                                    // 2854\n   * resolve or reject.                                                                                               // 2855\n   *                                                                                                                  // 2856\n   * @description                                                                                                     // 2857\n   * `$state` service is responsible for representing states as well as transitioning                                 // 2858\n   * between them. It also provides interfaces to ask for current state or even states                                // 2859\n   * you're coming from.                                                                                              // 2860\n   */                                                                                                                 // 2861\n  this.$get = $get;                                                                                                   // 2862\n  $get.$inject = ['$rootScope', '$q', '$view', '$injector', '$resolve', '$stateParams', '$urlRouter', '$location', '$urlMatcherFactory'];\n  function $get(   $rootScope,   $q,   $view,   $injector,   $resolve,   $stateParams,   $urlRouter,   $location,   $urlMatcherFactory) {\n                                                                                                                      // 2865\n    var TransitionSuperseded = $q.reject(new Error('transition superseded'));                                         // 2866\n    var TransitionPrevented = $q.reject(new Error('transition prevented'));                                           // 2867\n    var TransitionAborted = $q.reject(new Error('transition aborted'));                                               // 2868\n    var TransitionFailed = $q.reject(new Error('transition failed'));                                                 // 2869\n                                                                                                                      // 2870\n    // Handles the case where a state which is the target of a transition is not found, and the user                  // 2871\n    // can optionally retry or defer the transition                                                                   // 2872\n    function handleRedirect(redirect, state, params, options) {                                                       // 2873\n      /**                                                                                                             // 2874\n       * @ngdoc event                                                                                                 // 2875\n       * @name ui.router.state.$state#$stateNotFound                                                                  // 2876\n       * @eventOf ui.router.state.$state                                                                              // 2877\n       * @eventType broadcast on root scope                                                                           // 2878\n       * @description                                                                                                 // 2879\n       * Fired when a requested state **cannot be found** using the provided state name during transition.            // 2880\n       * The event is broadcast allowing any handlers a single chance to deal with the error (usually by              // 2881\n       * lazy-loading the unfound state). A special `unfoundState` object is passed to the listener handler,          // 2882\n       * you can see its three properties in the example. You can use `event.preventDefault()` to abort the           // 2883\n       * transition and the promise returned from `go` will be rejected with a `'transition aborted'` value.          // 2884\n       *                                                                                                              // 2885\n       * @param {Object} event Event object.                                                                          // 2886\n       * @param {Object} unfoundState Unfound State information. Contains: `to, toParams, options` properties.        // 2887\n       * @param {State} fromState Current state object.                                                               // 2888\n       * @param {Object} fromParams Current state params.                                                             // 2889\n       *                                                                                                              // 2890\n       * @example                                                                                                     // 2891\n       *                                                                                                              // 2892\n       * <pre>                                                                                                        // 2893\n       * // somewhere, assume lazy.state has not been defined                                                         // 2894\n       * $state.go(\"lazy.state\", {a:1, b:2}, {inherit:false});                                                        // 2895\n       *                                                                                                              // 2896\n       * // somewhere else                                                                                            // 2897\n       * $scope.$on('$stateNotFound',                                                                                 // 2898\n       * function(event, unfoundState, fromState, fromParams){                                                        // 2899\n       *     console.log(unfoundState.to); // \"lazy.state\"                                                            // 2900\n       *     console.log(unfoundState.toParams); // {a:1, b:2}                                                        // 2901\n       *     console.log(unfoundState.options); // {inherit:false} + default options                                  // 2902\n       * })                                                                                                           // 2903\n       * </pre>                                                                                                       // 2904\n       */                                                                                                             // 2905\n      var evt = $rootScope.$broadcast('$stateNotFound', redirect, state, params);                                     // 2906\n                                                                                                                      // 2907\n      if (evt.defaultPrevented) {                                                                                     // 2908\n        $urlRouter.update();                                                                                          // 2909\n        return TransitionAborted;                                                                                     // 2910\n      }                                                                                                               // 2911\n                                                                                                                      // 2912\n      if (!evt.retry) {                                                                                               // 2913\n        return null;                                                                                                  // 2914\n      }                                                                                                               // 2915\n                                                                                                                      // 2916\n      // Allow the handler to return a promise to defer state lookup retry                                            // 2917\n      if (options.$retry) {                                                                                           // 2918\n        $urlRouter.update();                                                                                          // 2919\n        return TransitionFailed;                                                                                      // 2920\n      }                                                                                                               // 2921\n      var retryTransition = $state.transition = $q.when(evt.retry);                                                   // 2922\n                                                                                                                      // 2923\n      retryTransition.then(function() {                                                                               // 2924\n        if (retryTransition !== $state.transition) return TransitionSuperseded;                                       // 2925\n        redirect.options.$retry = true;                                                                               // 2926\n        return $state.transitionTo(redirect.to, redirect.toParams, redirect.options);                                 // 2927\n      }, function() {                                                                                                 // 2928\n        return TransitionAborted;                                                                                     // 2929\n      });                                                                                                             // 2930\n      $urlRouter.update();                                                                                            // 2931\n                                                                                                                      // 2932\n      return retryTransition;                                                                                         // 2933\n    }                                                                                                                 // 2934\n                                                                                                                      // 2935\n    root.locals = { resolve: null, globals: { $stateParams: {} } };                                                   // 2936\n                                                                                                                      // 2937\n    $state = {                                                                                                        // 2938\n      params: {},                                                                                                     // 2939\n      current: root.self,                                                                                             // 2940\n      $current: root,                                                                                                 // 2941\n      transition: null                                                                                                // 2942\n    };                                                                                                                // 2943\n                                                                                                                      // 2944\n    /**                                                                                                               // 2945\n     * @ngdoc function                                                                                                // 2946\n     * @name ui.router.state.$state#reload                                                                            // 2947\n     * @methodOf ui.router.state.$state                                                                               // 2948\n     *                                                                                                                // 2949\n     * @description                                                                                                   // 2950\n     * A method that force reloads the current state. All resolves are re-resolved,                                   // 2951\n     * controllers reinstantiated, and events re-fired.                                                               // 2952\n     *                                                                                                                // 2953\n     * @example                                                                                                       // 2954\n     * <pre>                                                                                                          // 2955\n     * var app angular.module('app', ['ui.router']);                                                                  // 2956\n     *                                                                                                                // 2957\n     * app.controller('ctrl', function ($scope, $state) {                                                             // 2958\n     *   $scope.reload = function(){                                                                                  // 2959\n     *     $state.reload();                                                                                           // 2960\n     *   }                                                                                                            // 2961\n     * });                                                                                                            // 2962\n     * </pre>                                                                                                         // 2963\n     *                                                                                                                // 2964\n     * `reload()` is just an alias for:                                                                               // 2965\n     * <pre>                                                                                                          // 2966\n     * $state.transitionTo($state.current, $stateParams, {                                                            // 2967\n     *   reload: true, inherit: false, notify: true                                                                   // 2968\n     * });                                                                                                            // 2969\n     * </pre>                                                                                                         // 2970\n     *                                                                                                                // 2971\n     * @param {string=|object=} state - A state name or a state object, which is the root of the resolves to be re-resolved.\n     * @example                                                                                                       // 2973\n     * <pre>                                                                                                          // 2974\n     * //assuming app application consists of 3 states: 'contacts', 'contacts.detail', 'contacts.detail.item'         // 2975\n     * //and current state is 'contacts.detail.item'                                                                  // 2976\n     * var app angular.module('app', ['ui.router']);                                                                  // 2977\n     *                                                                                                                // 2978\n     * app.controller('ctrl', function ($scope, $state) {                                                             // 2979\n     *   $scope.reload = function(){                                                                                  // 2980\n     *     //will reload 'contact.detail' and 'contact.detail.item' states                                            // 2981\n     *     $state.reload('contact.detail');                                                                           // 2982\n     *   }                                                                                                            // 2983\n     * });                                                                                                            // 2984\n     * </pre>                                                                                                         // 2985\n     *                                                                                                                // 2986\n     * `reload()` is just an alias for:                                                                               // 2987\n     * <pre>                                                                                                          // 2988\n     * $state.transitionTo($state.current, $stateParams, {                                                            // 2989\n     *   reload: true, inherit: false, notify: true                                                                   // 2990\n     * });                                                                                                            // 2991\n     * </pre>                                                                                                         // 2992\n                                                                                                                      // 2993\n     * @returns {promise} A promise representing the state of the new transition. See                                 // 2994\n     * {@link ui.router.state.$state#methods_go $state.go}.                                                           // 2995\n     */                                                                                                               // 2996\n    $state.reload = function reload(state) {                                                                          // 2997\n      return $state.transitionTo($state.current, $stateParams, { reload: state || true, inherit: false, notify: true});\n    };                                                                                                                // 2999\n                                                                                                                      // 3000\n    /**                                                                                                               // 3001\n     * @ngdoc function                                                                                                // 3002\n     * @name ui.router.state.$state#go                                                                                // 3003\n     * @methodOf ui.router.state.$state                                                                               // 3004\n     *                                                                                                                // 3005\n     * @description                                                                                                   // 3006\n     * Convenience method for transitioning to a new state. `$state.go` calls                                         // 3007\n     * `$state.transitionTo` internally but automatically sets options to                                             // 3008\n     * `{ location: true, inherit: true, relative: $state.$current, notify: true }`.                                  // 3009\n     * This allows you to easily use an absolute or relative to path and specify                                      // 3010\n     * only the parameters you'd like to update (while letting unspecified parameters                                 // 3011\n     * inherit from the currently active ancestor states).                                                            // 3012\n     *                                                                                                                // 3013\n     * @example                                                                                                       // 3014\n     * <pre>                                                                                                          // 3015\n     * var app = angular.module('app', ['ui.router']);                                                                // 3016\n     *                                                                                                                // 3017\n     * app.controller('ctrl', function ($scope, $state) {                                                             // 3018\n     *   $scope.changeState = function () {                                                                           // 3019\n     *     $state.go('contact.detail');                                                                               // 3020\n     *   };                                                                                                           // 3021\n     * });                                                                                                            // 3022\n     * </pre>                                                                                                         // 3023\n     * <img src='../ngdoc_assets/StateGoExamples.png'/>                                                               // 3024\n     *                                                                                                                // 3025\n     * @param {string} to Absolute state name or relative state path. Some examples:                                  // 3026\n     *                                                                                                                // 3027\n     * - `$state.go('contact.detail')` - will go to the `contact.detail` state                                        // 3028\n     * - `$state.go('^')` - will go to a parent state                                                                 // 3029\n     * - `$state.go('^.sibling')` - will go to a sibling state                                                        // 3030\n     * - `$state.go('.child.grandchild')` - will go to grandchild state                                               // 3031\n     *                                                                                                                // 3032\n     * @param {object=} params A map of the parameters that will be sent to the state,                                // 3033\n     * will populate $stateParams. Any parameters that are not specified will be inherited from currently             // 3034\n     * defined parameters. This allows, for example, going to a sibling state that shares parameters                  // 3035\n     * specified in a parent state. Parameter inheritance only works between common ancestor states, I.e.             // 3036\n     * transitioning to a sibling will get you the parameters for all parents, transitioning to a child               // 3037\n     * will get you all current parameters, etc.                                                                      // 3038\n     * @param {object=} options Options object. The options are:                                                      // 3039\n     *                                                                                                                // 3040\n     * - **`location`** - {boolean=true|string=} - If `true` will update the url in the location bar, if `false`      // 3041\n     *    will not. If string, must be `\"replace\"`, which will update url and also replace last history record.       // 3042\n     * - **`inherit`** - {boolean=true}, If `true` will inherit url parameters from current url.                      // 3043\n     * - **`relative`** - {object=$state.$current}, When transitioning with relative path (e.g '^'),                  // 3044\n     *    defines which state to be relative from.                                                                    // 3045\n     * - **`notify`** - {boolean=true}, If `true` will broadcast $stateChangeStart and $stateChangeSuccess events.    // 3046\n     * - **`reload`** (v0.2.5) - {boolean=false}, If `true` will force transition even if the state or params         // 3047\n     *    have not changed, aka a reload of the same state. It differs from reloadOnSearch because you'd              // 3048\n     *    use this when you want to force a reload when *everything* is the same, including search params.            // 3049\n     *                                                                                                                // 3050\n     * @returns {promise} A promise representing the state of the new transition.                                     // 3051\n     *                                                                                                                // 3052\n     * Possible success values:                                                                                       // 3053\n     *                                                                                                                // 3054\n     * - $state.current                                                                                               // 3055\n     *                                                                                                                // 3056\n     * <br/>Possible rejection values:                                                                                // 3057\n     *                                                                                                                // 3058\n     * - 'transition superseded' - when a newer transition has been started after this one                            // 3059\n     * - 'transition prevented' - when `event.preventDefault()` has been called in a `$stateChangeStart` listener     // 3060\n     * - 'transition aborted' - when `event.preventDefault()` has been called in a `$stateNotFound` listener or       // 3061\n     *   when a `$stateNotFound` `event.retry` promise errors.                                                        // 3062\n     * - 'transition failed' - when a state has been unsuccessfully found after 2 tries.                              // 3063\n     * - *resolve error* - when an error has occurred with a `resolve`                                                // 3064\n     *                                                                                                                // 3065\n     */                                                                                                               // 3066\n    $state.go = function go(to, params, options) {                                                                    // 3067\n      return $state.transitionTo(to, params, extend({ inherit: true, relative: $state.$current }, options));          // 3068\n    };                                                                                                                // 3069\n                                                                                                                      // 3070\n    /**                                                                                                               // 3071\n     * @ngdoc function                                                                                                // 3072\n     * @name ui.router.state.$state#transitionTo                                                                      // 3073\n     * @methodOf ui.router.state.$state                                                                               // 3074\n     *                                                                                                                // 3075\n     * @description                                                                                                   // 3076\n     * Low-level method for transitioning to a new state. {@link ui.router.state.$state#methods_go $state.go}         // 3077\n     * uses `transitionTo` internally. `$state.go` is recommended in most situations.                                 // 3078\n     *                                                                                                                // 3079\n     * @example                                                                                                       // 3080\n     * <pre>                                                                                                          // 3081\n     * var app = angular.module('app', ['ui.router']);                                                                // 3082\n     *                                                                                                                // 3083\n     * app.controller('ctrl', function ($scope, $state) {                                                             // 3084\n     *   $scope.changeState = function () {                                                                           // 3085\n     *     $state.transitionTo('contact.detail');                                                                     // 3086\n     *   };                                                                                                           // 3087\n     * });                                                                                                            // 3088\n     * </pre>                                                                                                         // 3089\n     *                                                                                                                // 3090\n     * @param {string} to State name.                                                                                 // 3091\n     * @param {object=} toParams A map of the parameters that will be sent to the state,                              // 3092\n     * will populate $stateParams.                                                                                    // 3093\n     * @param {object=} options Options object. The options are:                                                      // 3094\n     *                                                                                                                // 3095\n     * - **`location`** - {boolean=true|string=} - If `true` will update the url in the location bar, if `false`      // 3096\n     *    will not. If string, must be `\"replace\"`, which will update url and also replace last history record.       // 3097\n     * - **`inherit`** - {boolean=false}, If `true` will inherit url parameters from current url.                     // 3098\n     * - **`relative`** - {object=}, When transitioning with relative path (e.g '^'),                                 // 3099\n     *    defines which state to be relative from.                                                                    // 3100\n     * - **`notify`** - {boolean=true}, If `true` will broadcast $stateChangeStart and $stateChangeSuccess events.    // 3101\n     * - **`reload`** (v0.2.5) - {boolean=false|string=|object=}, If `true` will force transition even if the state or params \n     *    have not changed, aka a reload of the same state. It differs from reloadOnSearch because you'd              // 3103\n     *    use this when you want to force a reload when *everything* is the same, including search params.            // 3104\n     *    if String, then will reload the state with the name given in reload, and any children.                      // 3105\n     *    if Object, then a stateObj is expected, will reload the state found in stateObj, and any children.          // 3106\n     *                                                                                                                // 3107\n     * @returns {promise} A promise representing the state of the new transition. See                                 // 3108\n     * {@link ui.router.state.$state#methods_go $state.go}.                                                           // 3109\n     */                                                                                                               // 3110\n    $state.transitionTo = function transitionTo(to, toParams, options) {                                              // 3111\n      toParams = toParams || {};                                                                                      // 3112\n      options = extend({                                                                                              // 3113\n        location: true, inherit: false, relative: null, notify: true, reload: false, $retry: false                    // 3114\n      }, options || {});                                                                                              // 3115\n                                                                                                                      // 3116\n      var from = $state.$current, fromParams = $state.params, fromPath = from.path;                                   // 3117\n      var evt, toState = findState(to, options.relative);                                                             // 3118\n                                                                                                                      // 3119\n      // Store the hash param for later (since it will be stripped out by various methods)                            // 3120\n      var hash = toParams['#'];                                                                                       // 3121\n                                                                                                                      // 3122\n      if (!isDefined(toState)) {                                                                                      // 3123\n        var redirect = { to: to, toParams: toParams, options: options };                                              // 3124\n        var redirectResult = handleRedirect(redirect, from.self, fromParams, options);                                // 3125\n                                                                                                                      // 3126\n        if (redirectResult) {                                                                                         // 3127\n          return redirectResult;                                                                                      // 3128\n        }                                                                                                             // 3129\n                                                                                                                      // 3130\n        // Always retry once if the $stateNotFound was not prevented                                                  // 3131\n        // (handles either redirect changed or state lazy-definition)                                                 // 3132\n        to = redirect.to;                                                                                             // 3133\n        toParams = redirect.toParams;                                                                                 // 3134\n        options = redirect.options;                                                                                   // 3135\n        toState = findState(to, options.relative);                                                                    // 3136\n                                                                                                                      // 3137\n        if (!isDefined(toState)) {                                                                                    // 3138\n          if (!options.relative) throw new Error(\"No such state '\" + to + \"'\");                                       // 3139\n          throw new Error(\"Could not resolve '\" + to + \"' from state '\" + options.relative + \"'\");                    // 3140\n        }                                                                                                             // 3141\n      }                                                                                                               // 3142\n      if (toState[abstractKey]) throw new Error(\"Cannot transition to abstract state '\" + to + \"'\");                  // 3143\n      if (options.inherit) toParams = inheritParams($stateParams, toParams || {}, $state.$current, toState);          // 3144\n      if (!toState.params.$$validates(toParams)) return TransitionFailed;                                             // 3145\n                                                                                                                      // 3146\n      toParams = toState.params.$$values(toParams);                                                                   // 3147\n      to = toState;                                                                                                   // 3148\n                                                                                                                      // 3149\n      var toPath = to.path;                                                                                           // 3150\n                                                                                                                      // 3151\n      // Starting from the root of the path, keep all levels that haven't changed                                     // 3152\n      var keep = 0, state = toPath[keep], locals = root.locals, toLocals = [];                                        // 3153\n                                                                                                                      // 3154\n      if (!options.reload) {                                                                                          // 3155\n        while (state && state === fromPath[keep] && state.ownParams.$$equals(toParams, fromParams)) {                 // 3156\n          locals = toLocals[keep] = state.locals;                                                                     // 3157\n          keep++;                                                                                                     // 3158\n          state = toPath[keep];                                                                                       // 3159\n        }                                                                                                             // 3160\n      } else if (isString(options.reload) || isObject(options.reload)) {                                              // 3161\n        if (isObject(options.reload) && !options.reload.name) {                                                       // 3162\n          throw new Error('Invalid reload state object');                                                             // 3163\n        }                                                                                                             // 3164\n                                                                                                                      // 3165\n        var reloadState = options.reload === true ? fromPath[0] : findState(options.reload);                          // 3166\n        if (options.reload && !reloadState) {                                                                         // 3167\n          throw new Error(\"No such reload state '\" + (isString(options.reload) ? options.reload : options.reload.name) + \"'\");\n        }                                                                                                             // 3169\n                                                                                                                      // 3170\n        while (state && state === fromPath[keep] && state !== reloadState) {                                          // 3171\n          locals = toLocals[keep] = state.locals;                                                                     // 3172\n          keep++;                                                                                                     // 3173\n          state = toPath[keep];                                                                                       // 3174\n        }                                                                                                             // 3175\n      }                                                                                                               // 3176\n                                                                                                                      // 3177\n      // If we're going to the same state and all locals are kept, we've got nothing to do.                           // 3178\n      // But clear 'transition', as we still want to cancel any other pending transitions.                            // 3179\n      // TODO: We may not want to bump 'transition' if we're called from a location change                            // 3180\n      // that we've initiated ourselves, because we might accidentally abort a legitimate                             // 3181\n      // transition initiated from code?                                                                              // 3182\n      if (shouldSkipReload(to, toParams, from, fromParams, locals, options)) {                                        // 3183\n        if (hash) toParams['#'] = hash;                                                                               // 3184\n        $state.params = toParams;                                                                                     // 3185\n        copy($state.params, $stateParams);                                                                            // 3186\n        if (options.location && to.navigable && to.navigable.url) {                                                   // 3187\n          $urlRouter.push(to.navigable.url, toParams, {                                                               // 3188\n            $$avoidResync: true, replace: options.location === 'replace'                                              // 3189\n          });                                                                                                         // 3190\n          $urlRouter.update(true);                                                                                    // 3191\n        }                                                                                                             // 3192\n        $state.transition = null;                                                                                     // 3193\n        return $q.when($state.current);                                                                               // 3194\n      }                                                                                                               // 3195\n                                                                                                                      // 3196\n      // Filter parameters before we pass them to event handlers etc.                                                 // 3197\n      toParams = filterByKeys(to.params.$$keys(), toParams || {});                                                    // 3198\n                                                                                                                      // 3199\n      // Broadcast start event and cancel the transition if requested                                                 // 3200\n      if (options.notify) {                                                                                           // 3201\n        /**                                                                                                           // 3202\n         * @ngdoc event                                                                                               // 3203\n         * @name ui.router.state.$state#$stateChangeStart                                                             // 3204\n         * @eventOf ui.router.state.$state                                                                            // 3205\n         * @eventType broadcast on root scope                                                                         // 3206\n         * @description                                                                                               // 3207\n         * Fired when the state transition **begins**. You can use `event.preventDefault()`                           // 3208\n         * to prevent the transition from happening and then the transition promise will be                           // 3209\n         * rejected with a `'transition prevented'` value.                                                            // 3210\n         *                                                                                                            // 3211\n         * @param {Object} event Event object.                                                                        // 3212\n         * @param {State} toState The state being transitioned to.                                                    // 3213\n         * @param {Object} toParams The params supplied to the `toState`.                                             // 3214\n         * @param {State} fromState The current state, pre-transition.                                                // 3215\n         * @param {Object} fromParams The params supplied to the `fromState`.                                         // 3216\n         *                                                                                                            // 3217\n         * @example                                                                                                   // 3218\n         *                                                                                                            // 3219\n         * <pre>                                                                                                      // 3220\n         * $rootScope.$on('$stateChangeStart',                                                                        // 3221\n         * function(event, toState, toParams, fromState, fromParams){                                                 // 3222\n         *     event.preventDefault();                                                                                // 3223\n         *     // transitionTo() promise will be rejected with                                                        // 3224\n         *     // a 'transition prevented' error                                                                      // 3225\n         * })                                                                                                         // 3226\n         * </pre>                                                                                                     // 3227\n         */                                                                                                           // 3228\n        if ($rootScope.$broadcast('$stateChangeStart', to.self, toParams, from.self, fromParams).defaultPrevented) {  // 3229\n          $rootScope.$broadcast('$stateChangeCancel', to.self, toParams, from.self, fromParams);                      // 3230\n          $urlRouter.update();                                                                                        // 3231\n          return TransitionPrevented;                                                                                 // 3232\n        }                                                                                                             // 3233\n      }                                                                                                               // 3234\n                                                                                                                      // 3235\n      // Resolve locals for the remaining states, but don't update any global state just                              // 3236\n      // yet -- if anything fails to resolve the current state needs to remain untouched.                             // 3237\n      // We also set up an inheritance chain for the locals here. This allows the view directive                      // 3238\n      // to quickly look up the correct definition for each view in the current state. Even                           // 3239\n      // though we create the locals object itself outside resolveState(), it is initially                            // 3240\n      // empty and gets filled asynchronously. We need to keep track of the promise for the                           // 3241\n      // (fully resolved) current locals, and pass this down the chain.                                               // 3242\n      var resolved = $q.when(locals);                                                                                 // 3243\n                                                                                                                      // 3244\n      for (var l = keep; l < toPath.length; l++, state = toPath[l]) {                                                 // 3245\n        locals = toLocals[l] = inherit(locals);                                                                       // 3246\n        resolved = resolveState(state, toParams, state === to, resolved, locals, options);                            // 3247\n      }                                                                                                               // 3248\n                                                                                                                      // 3249\n      // Once everything is resolved, we are ready to perform the actual transition                                   // 3250\n      // and return a promise for the new state. We also keep track of what the                                       // 3251\n      // current promise is, so that we can detect overlapping transitions and                                        // 3252\n      // keep only the outcome of the last transition.                                                                // 3253\n      var transition = $state.transition = resolved.then(function () {                                                // 3254\n        var l, entering, exiting;                                                                                     // 3255\n                                                                                                                      // 3256\n        if ($state.transition !== transition) return TransitionSuperseded;                                            // 3257\n                                                                                                                      // 3258\n        // Exit 'from' states not kept                                                                                // 3259\n        for (l = fromPath.length - 1; l >= keep; l--) {                                                               // 3260\n          exiting = fromPath[l];                                                                                      // 3261\n          if (exiting.self.onExit) {                                                                                  // 3262\n            $injector.invoke(exiting.self.onExit, exiting.self, exiting.locals.globals);                              // 3263\n          }                                                                                                           // 3264\n          exiting.locals = null;                                                                                      // 3265\n        }                                                                                                             // 3266\n                                                                                                                      // 3267\n        // Enter 'to' states not kept                                                                                 // 3268\n        for (l = keep; l < toPath.length; l++) {                                                                      // 3269\n          entering = toPath[l];                                                                                       // 3270\n          entering.locals = toLocals[l];                                                                              // 3271\n          if (entering.self.onEnter) {                                                                                // 3272\n            $injector.invoke(entering.self.onEnter, entering.self, entering.locals.globals);                          // 3273\n          }                                                                                                           // 3274\n        }                                                                                                             // 3275\n                                                                                                                      // 3276\n        // Re-add the saved hash before we start returning things                                                     // 3277\n        if (hash) toParams['#'] = hash;                                                                               // 3278\n                                                                                                                      // 3279\n        // Run it again, to catch any transitions in callbacks                                                        // 3280\n        if ($state.transition !== transition) return TransitionSuperseded;                                            // 3281\n                                                                                                                      // 3282\n        // Update globals in $state                                                                                   // 3283\n        $state.$current = to;                                                                                         // 3284\n        $state.current = to.self;                                                                                     // 3285\n        $state.params = toParams;                                                                                     // 3286\n        copy($state.params, $stateParams);                                                                            // 3287\n        $state.transition = null;                                                                                     // 3288\n                                                                                                                      // 3289\n        if (options.location && to.navigable) {                                                                       // 3290\n          $urlRouter.push(to.navigable.url, to.navigable.locals.globals.$stateParams, {                               // 3291\n            $$avoidResync: true, replace: options.location === 'replace'                                              // 3292\n          });                                                                                                         // 3293\n        }                                                                                                             // 3294\n                                                                                                                      // 3295\n        if (options.notify) {                                                                                         // 3296\n        /**                                                                                                           // 3297\n         * @ngdoc event                                                                                               // 3298\n         * @name ui.router.state.$state#$stateChangeSuccess                                                           // 3299\n         * @eventOf ui.router.state.$state                                                                            // 3300\n         * @eventType broadcast on root scope                                                                         // 3301\n         * @description                                                                                               // 3302\n         * Fired once the state transition is **complete**.                                                           // 3303\n         *                                                                                                            // 3304\n         * @param {Object} event Event object.                                                                        // 3305\n         * @param {State} toState The state being transitioned to.                                                    // 3306\n         * @param {Object} toParams The params supplied to the `toState`.                                             // 3307\n         * @param {State} fromState The current state, pre-transition.                                                // 3308\n         * @param {Object} fromParams The params supplied to the `fromState`.                                         // 3309\n         */                                                                                                           // 3310\n          $rootScope.$broadcast('$stateChangeSuccess', to.self, toParams, from.self, fromParams);                     // 3311\n        }                                                                                                             // 3312\n        $urlRouter.update(true);                                                                                      // 3313\n                                                                                                                      // 3314\n        return $state.current;                                                                                        // 3315\n      }, function (error) {                                                                                           // 3316\n        if ($state.transition !== transition) return TransitionSuperseded;                                            // 3317\n                                                                                                                      // 3318\n        $state.transition = null;                                                                                     // 3319\n        /**                                                                                                           // 3320\n         * @ngdoc event                                                                                               // 3321\n         * @name ui.router.state.$state#$stateChangeError                                                             // 3322\n         * @eventOf ui.router.state.$state                                                                            // 3323\n         * @eventType broadcast on root scope                                                                         // 3324\n         * @description                                                                                               // 3325\n         * Fired when an **error occurs** during transition. It's important to note that if you                       // 3326\n         * have any errors in your resolve functions (javascript errors, non-existent services, etc)                  // 3327\n         * they will not throw traditionally. You must listen for this $stateChangeError event to                     // 3328\n         * catch **ALL** errors.                                                                                      // 3329\n         *                                                                                                            // 3330\n         * @param {Object} event Event object.                                                                        // 3331\n         * @param {State} toState The state being transitioned to.                                                    // 3332\n         * @param {Object} toParams The params supplied to the `toState`.                                             // 3333\n         * @param {State} fromState The current state, pre-transition.                                                // 3334\n         * @param {Object} fromParams The params supplied to the `fromState`.                                         // 3335\n         * @param {Error} error The resolve error object.                                                             // 3336\n         */                                                                                                           // 3337\n        evt = $rootScope.$broadcast('$stateChangeError', to.self, toParams, from.self, fromParams, error);            // 3338\n                                                                                                                      // 3339\n        if (!evt.defaultPrevented) {                                                                                  // 3340\n            $urlRouter.update();                                                                                      // 3341\n        }                                                                                                             // 3342\n                                                                                                                      // 3343\n        return $q.reject(error);                                                                                      // 3344\n      });                                                                                                             // 3345\n                                                                                                                      // 3346\n      return transition;                                                                                              // 3347\n    };                                                                                                                // 3348\n                                                                                                                      // 3349\n    /**                                                                                                               // 3350\n     * @ngdoc function                                                                                                // 3351\n     * @name ui.router.state.$state#is                                                                                // 3352\n     * @methodOf ui.router.state.$state                                                                               // 3353\n     *                                                                                                                // 3354\n     * @description                                                                                                   // 3355\n     * Similar to {@link ui.router.state.$state#methods_includes $state.includes},                                    // 3356\n     * but only checks for the full state name. If params is supplied then it will be                                 // 3357\n     * tested for strict equality against the current active params object, so all params                             // 3358\n     * must match with none missing and no extras.                                                                    // 3359\n     *                                                                                                                // 3360\n     * @example                                                                                                       // 3361\n     * <pre>                                                                                                          // 3362\n     * $state.$current.name = 'contacts.details.item';                                                                // 3363\n     *                                                                                                                // 3364\n     * // absolute name                                                                                               // 3365\n     * $state.is('contact.details.item'); // returns true                                                             // 3366\n     * $state.is(contactDetailItemStateObject); // returns true                                                       // 3367\n     *                                                                                                                // 3368\n     * // relative name (. and ^), typically from a template                                                          // 3369\n     * // E.g. from the 'contacts.details' template                                                                   // 3370\n     * <div ng-class=\"{highlighted: $state.is('.item')}\">Item</div>                                                   // 3371\n     * </pre>                                                                                                         // 3372\n     *                                                                                                                // 3373\n     * @param {string|object} stateOrName The state name (absolute or relative) or state object you'd like to check.  // 3374\n     * @param {object=} params A param object, e.g. `{sectionId: section.id}`, that you'd like                        // 3375\n     * to test against the current active state.                                                                      // 3376\n     * @param {object=} options An options object.  The options are:                                                  // 3377\n     *                                                                                                                // 3378\n     * - **`relative`** - {string|object} -  If `stateOrName` is a relative state name and `options.relative` is set, .is will\n     * test relative to `options.relative` state (or name).                                                           // 3380\n     *                                                                                                                // 3381\n     * @returns {boolean} Returns true if it is the state.                                                            // 3382\n     */                                                                                                               // 3383\n    $state.is = function is(stateOrName, params, options) {                                                           // 3384\n      options = extend({ relative: $state.$current }, options || {});                                                 // 3385\n      var state = findState(stateOrName, options.relative);                                                           // 3386\n                                                                                                                      // 3387\n      if (!isDefined(state)) { return undefined; }                                                                    // 3388\n      if ($state.$current !== state) { return false; }                                                                // 3389\n      return params ? equalForKeys(state.params.$$values(params), $stateParams) : true;                               // 3390\n    };                                                                                                                // 3391\n                                                                                                                      // 3392\n    /**                                                                                                               // 3393\n     * @ngdoc function                                                                                                // 3394\n     * @name ui.router.state.$state#includes                                                                          // 3395\n     * @methodOf ui.router.state.$state                                                                               // 3396\n     *                                                                                                                // 3397\n     * @description                                                                                                   // 3398\n     * A method to determine if the current active state is equal to or is the child of the                           // 3399\n     * state stateName. If any params are passed then they will be tested for a match as well.                        // 3400\n     * Not all the parameters need to be passed, just the ones you'd like to test for equality.                       // 3401\n     *                                                                                                                // 3402\n     * @example                                                                                                       // 3403\n     * Partial and relative names                                                                                     // 3404\n     * <pre>                                                                                                          // 3405\n     * $state.$current.name = 'contacts.details.item';                                                                // 3406\n     *                                                                                                                // 3407\n     * // Using partial names                                                                                         // 3408\n     * $state.includes(\"contacts\"); // returns true                                                                   // 3409\n     * $state.includes(\"contacts.details\"); // returns true                                                           // 3410\n     * $state.includes(\"contacts.details.item\"); // returns true                                                      // 3411\n     * $state.includes(\"contacts.list\"); // returns false                                                             // 3412\n     * $state.includes(\"about\"); // returns false                                                                     // 3413\n     *                                                                                                                // 3414\n     * // Using relative names (. and ^), typically from a template                                                   // 3415\n     * // E.g. from the 'contacts.details' template                                                                   // 3416\n     * <div ng-class=\"{highlighted: $state.includes('.item')}\">Item</div>                                             // 3417\n     * </pre>                                                                                                         // 3418\n     *                                                                                                                // 3419\n     * Basic globbing patterns                                                                                        // 3420\n     * <pre>                                                                                                          // 3421\n     * $state.$current.name = 'contacts.details.item.url';                                                            // 3422\n     *                                                                                                                // 3423\n     * $state.includes(\"*.details.*.*\"); // returns true                                                              // 3424\n     * $state.includes(\"*.details.**\"); // returns true                                                               // 3425\n     * $state.includes(\"**.item.**\"); // returns true                                                                 // 3426\n     * $state.includes(\"*.details.item.url\"); // returns true                                                         // 3427\n     * $state.includes(\"*.details.*.url\"); // returns true                                                            // 3428\n     * $state.includes(\"*.details.*\"); // returns false                                                               // 3429\n     * $state.includes(\"item.**\"); // returns false                                                                   // 3430\n     * </pre>                                                                                                         // 3431\n     *                                                                                                                // 3432\n     * @param {string} stateOrName A partial name, relative name, or glob pattern                                     // 3433\n     * to be searched for within the current state name.                                                              // 3434\n     * @param {object=} params A param object, e.g. `{sectionId: section.id}`,                                        // 3435\n     * that you'd like to test against the current active state.                                                      // 3436\n     * @param {object=} options An options object.  The options are:                                                  // 3437\n     *                                                                                                                // 3438\n     * - **`relative`** - {string|object=} -  If `stateOrName` is a relative state reference and `options.relative` is set,\n     * .includes will test relative to `options.relative` state (or name).                                            // 3440\n     *                                                                                                                // 3441\n     * @returns {boolean} Returns true if it does include the state                                                   // 3442\n     */                                                                                                               // 3443\n    $state.includes = function includes(stateOrName, params, options) {                                               // 3444\n      options = extend({ relative: $state.$current }, options || {});                                                 // 3445\n      if (isString(stateOrName) && isGlob(stateOrName)) {                                                             // 3446\n        if (!doesStateMatchGlob(stateOrName)) {                                                                       // 3447\n          return false;                                                                                               // 3448\n        }                                                                                                             // 3449\n        stateOrName = $state.$current.name;                                                                           // 3450\n      }                                                                                                               // 3451\n                                                                                                                      // 3452\n      var state = findState(stateOrName, options.relative);                                                           // 3453\n      if (!isDefined(state)) { return undefined; }                                                                    // 3454\n      if (!isDefined($state.$current.includes[state.name])) { return false; }                                         // 3455\n      return params ? equalForKeys(state.params.$$values(params), $stateParams, objectKeys(params)) : true;           // 3456\n    };                                                                                                                // 3457\n                                                                                                                      // 3458\n                                                                                                                      // 3459\n    /**                                                                                                               // 3460\n     * @ngdoc function                                                                                                // 3461\n     * @name ui.router.state.$state#href                                                                              // 3462\n     * @methodOf ui.router.state.$state                                                                               // 3463\n     *                                                                                                                // 3464\n     * @description                                                                                                   // 3465\n     * A url generation method that returns the compiled url for the given state populated with the given params.     // 3466\n     *                                                                                                                // 3467\n     * @example                                                                                                       // 3468\n     * <pre>                                                                                                          // 3469\n     * expect($state.href(\"about.person\", { person: \"bob\" })).toEqual(\"/about/bob\");                                  // 3470\n     * </pre>                                                                                                         // 3471\n     *                                                                                                                // 3472\n     * @param {string|object} stateOrName The state name or state object you'd like to generate a url from.           // 3473\n     * @param {object=} params An object of parameter values to fill the state's required parameters.                 // 3474\n     * @param {object=} options Options object. The options are:                                                      // 3475\n     *                                                                                                                // 3476\n     * - **`lossy`** - {boolean=true} -  If true, and if there is no url associated with the state provided in the    // 3477\n     *    first parameter, then the constructed href url will be built from the first navigable ancestor (aka         // 3478\n     *    ancestor with a valid url).                                                                                 // 3479\n     * - **`inherit`** - {boolean=true}, If `true` will inherit url parameters from current url.                      // 3480\n     * - **`relative`** - {object=$state.$current}, When transitioning with relative path (e.g '^'),                  // 3481\n     *    defines which state to be relative from.                                                                    // 3482\n     * - **`absolute`** - {boolean=false},  If true will generate an absolute url, e.g. \"http://www.example.com/fullurl\".\n     *                                                                                                                // 3484\n     * @returns {string} compiled state url                                                                           // 3485\n     */                                                                                                               // 3486\n    $state.href = function href(stateOrName, params, options) {                                                       // 3487\n      options = extend({                                                                                              // 3488\n        lossy:    true,                                                                                               // 3489\n        inherit:  true,                                                                                               // 3490\n        absolute: false,                                                                                              // 3491\n        relative: $state.$current                                                                                     // 3492\n      }, options || {});                                                                                              // 3493\n                                                                                                                      // 3494\n      var state = findState(stateOrName, options.relative);                                                           // 3495\n                                                                                                                      // 3496\n      if (!isDefined(state)) return null;                                                                             // 3497\n      if (options.inherit) params = inheritParams($stateParams, params || {}, $state.$current, state);                // 3498\n                                                                                                                      // 3499\n      var nav = (state && options.lossy) ? state.navigable : state;                                                   // 3500\n                                                                                                                      // 3501\n      if (!nav || nav.url === undefined || nav.url === null) {                                                        // 3502\n        return null;                                                                                                  // 3503\n      }                                                                                                               // 3504\n      return $urlRouter.href(nav.url, filterByKeys(state.params.$$keys().concat('#'), params || {}), {                // 3505\n        absolute: options.absolute                                                                                    // 3506\n      });                                                                                                             // 3507\n    };                                                                                                                // 3508\n                                                                                                                      // 3509\n    /**                                                                                                               // 3510\n     * @ngdoc function                                                                                                // 3511\n     * @name ui.router.state.$state#get                                                                               // 3512\n     * @methodOf ui.router.state.$state                                                                               // 3513\n     *                                                                                                                // 3514\n     * @description                                                                                                   // 3515\n     * Returns the state configuration object for any specific state or all states.                                   // 3516\n     *                                                                                                                // 3517\n     * @param {string|object=} stateOrName (absolute or relative) If provided, will only get the config for           // 3518\n     * the requested state. If not provided, returns an array of ALL state configs.                                   // 3519\n     * @param {string|object=} context When stateOrName is a relative state reference, the state will be retrieved relative to context.\n     * @returns {Object|Array} State configuration object or array of all objects.                                    // 3521\n     */                                                                                                               // 3522\n    $state.get = function (stateOrName, context) {                                                                    // 3523\n      if (arguments.length === 0) return map(objectKeys(states), function(name) { return states[name].self; });       // 3524\n      var state = findState(stateOrName, context || $state.$current);                                                 // 3525\n      return (state && state.self) ? state.self : null;                                                               // 3526\n    };                                                                                                                // 3527\n                                                                                                                      // 3528\n    function resolveState(state, params, paramsAreFiltered, inherited, dst, options) {                                // 3529\n      // Make a restricted $stateParams with only the parameters that apply to this state if                          // 3530\n      // necessary. In addition to being available to the controller and onEnter/onExit callbacks,                    // 3531\n      // we also need $stateParams to be available for any $injector calls we make during the                         // 3532\n      // dependency resolution process.                                                                               // 3533\n      var $stateParams = (paramsAreFiltered) ? params : filterByKeys(state.params.$$keys(), params);                  // 3534\n      var locals = { $stateParams: $stateParams };                                                                    // 3535\n                                                                                                                      // 3536\n      // Resolve 'global' dependencies for the state, i.e. those not specific to a view.                              // 3537\n      // We're also including $stateParams in this; that way the parameters are restricted                            // 3538\n      // to the set that should be visible to the state, and are independent of when we update                        // 3539\n      // the global $state and $stateParams values.                                                                   // 3540\n      dst.resolve = $resolve.resolve(state.resolve, locals, dst.resolve, state);                                      // 3541\n      var promises = [dst.resolve.then(function (globals) {                                                           // 3542\n        dst.globals = globals;                                                                                        // 3543\n      })];                                                                                                            // 3544\n      if (inherited) promises.push(inherited);                                                                        // 3545\n                                                                                                                      // 3546\n      function resolveViews() {                                                                                       // 3547\n        var viewsPromises = [];                                                                                       // 3548\n                                                                                                                      // 3549\n        // Resolve template and dependencies for all views.                                                           // 3550\n        forEach(state.views, function (view, name) {                                                                  // 3551\n          var injectables = (view.resolve && view.resolve !== state.resolve ? view.resolve : {});                     // 3552\n          injectables.$template = [ function () {                                                                     // 3553\n            return $view.load(name, { view: view, locals: dst.globals, params: $stateParams, notify: options.notify }) || '';\n          }];                                                                                                         // 3555\n                                                                                                                      // 3556\n          viewsPromises.push($resolve.resolve(injectables, dst.globals, dst.resolve, state).then(function (result) {  // 3557\n            // References to the controller (only instantiated at link time)                                          // 3558\n            if (isFunction(view.controllerProvider) || isArray(view.controllerProvider)) {                            // 3559\n              var injectLocals = angular.extend({}, injectables, dst.globals);                                        // 3560\n              result.$$controller = $injector.invoke(view.controllerProvider, null, injectLocals);                    // 3561\n            } else {                                                                                                  // 3562\n              result.$$controller = view.controller;                                                                  // 3563\n            }                                                                                                         // 3564\n            // Provide access to the state itself for internal use                                                    // 3565\n            result.$$state = state;                                                                                   // 3566\n            result.$$controllerAs = view.controllerAs;                                                                // 3567\n            dst[name] = result;                                                                                       // 3568\n          }));                                                                                                        // 3569\n        });                                                                                                           // 3570\n                                                                                                                      // 3571\n        return $q.all(viewsPromises).then(function(){                                                                 // 3572\n          return dst.globals;                                                                                         // 3573\n        });                                                                                                           // 3574\n      }                                                                                                               // 3575\n                                                                                                                      // 3576\n      // Wait for all the promises and then return the activation object                                              // 3577\n      return $q.all(promises).then(resolveViews).then(function (values) {                                             // 3578\n        return dst;                                                                                                   // 3579\n      });                                                                                                             // 3580\n    }                                                                                                                 // 3581\n                                                                                                                      // 3582\n    return $state;                                                                                                    // 3583\n  }                                                                                                                   // 3584\n                                                                                                                      // 3585\n  function shouldSkipReload(to, toParams, from, fromParams, locals, options) {                                        // 3586\n    // Return true if there are no differences in non-search (path/object) params, false if there are differences     // 3587\n    function nonSearchParamsEqual(fromAndToState, fromParams, toParams) {                                             // 3588\n      // Identify whether all the parameters that differ between `fromParams` and `toParams` were search params.      // 3589\n      function notSearchParam(key) {                                                                                  // 3590\n        return fromAndToState.params[key].location != \"search\";                                                       // 3591\n      }                                                                                                               // 3592\n      var nonQueryParamKeys = fromAndToState.params.$$keys().filter(notSearchParam);                                  // 3593\n      var nonQueryParams = pick.apply({}, [fromAndToState.params].concat(nonQueryParamKeys));                         // 3594\n      var nonQueryParamSet = new $$UMFP.ParamSet(nonQueryParams);                                                     // 3595\n      return nonQueryParamSet.$$equals(fromParams, toParams);                                                         // 3596\n    }                                                                                                                 // 3597\n                                                                                                                      // 3598\n    // If reload was not explicitly requested                                                                         // 3599\n    // and we're transitioning to the same state we're already in                                                     // 3600\n    // and    the locals didn't change                                                                                // 3601\n    //     or they changed in a way that doesn't merit reloading                                                      // 3602\n    //        (reloadOnParams:false, or reloadOnSearch.false and only search params changed)                          // 3603\n    // Then return true.                                                                                              // 3604\n    if (!options.reload && to === from &&                                                                             // 3605\n      (locals === from.locals || (to.self.reloadOnSearch === false && nonSearchParamsEqual(from, fromParams, toParams)))) {\n      return true;                                                                                                    // 3607\n    }                                                                                                                 // 3608\n  }                                                                                                                   // 3609\n}                                                                                                                     // 3610\n                                                                                                                      // 3611\nangular.module('ui.router.state')                                                                                     // 3612\n  .value('$stateParams', {})                                                                                          // 3613\n  .provider('$state', $StateProvider);                                                                                // 3614\n                                                                                                                      // 3615\n                                                                                                                      // 3616\n$ViewProvider.$inject = [];                                                                                           // 3617\nfunction $ViewProvider() {                                                                                            // 3618\n                                                                                                                      // 3619\n  this.$get = $get;                                                                                                   // 3620\n  /**                                                                                                                 // 3621\n   * @ngdoc object                                                                                                    // 3622\n   * @name ui.router.state.$view                                                                                      // 3623\n   *                                                                                                                  // 3624\n   * @requires ui.router.util.$templateFactory                                                                        // 3625\n   * @requires $rootScope                                                                                             // 3626\n   *                                                                                                                  // 3627\n   * @description                                                                                                     // 3628\n   *                                                                                                                  // 3629\n   */                                                                                                                 // 3630\n  $get.$inject = ['$rootScope', '$templateFactory'];                                                                  // 3631\n  function $get(   $rootScope,   $templateFactory) {                                                                  // 3632\n    return {                                                                                                          // 3633\n      // $view.load('full.viewName', { template: ..., controller: ..., resolve: ..., async: false, params: ... })     // 3634\n      /**                                                                                                             // 3635\n       * @ngdoc function                                                                                              // 3636\n       * @name ui.router.state.$view#load                                                                             // 3637\n       * @methodOf ui.router.state.$view                                                                              // 3638\n       *                                                                                                              // 3639\n       * @description                                                                                                 // 3640\n       *                                                                                                              // 3641\n       * @param {string} name name                                                                                    // 3642\n       * @param {object} options option object.                                                                       // 3643\n       */                                                                                                             // 3644\n      load: function load(name, options) {                                                                            // 3645\n        var result, defaults = {                                                                                      // 3646\n          template: null, controller: null, view: null, locals: null, notify: true, async: true, params: {}           // 3647\n        };                                                                                                            // 3648\n        options = extend(defaults, options);                                                                          // 3649\n                                                                                                                      // 3650\n        if (options.view) {                                                                                           // 3651\n          result = $templateFactory.fromConfig(options.view, options.params, options.locals);                         // 3652\n        }                                                                                                             // 3653\n        if (result && options.notify) {                                                                               // 3654\n        /**                                                                                                           // 3655\n         * @ngdoc event                                                                                               // 3656\n         * @name ui.router.state.$state#$viewContentLoading                                                           // 3657\n         * @eventOf ui.router.state.$view                                                                             // 3658\n         * @eventType broadcast on root scope                                                                         // 3659\n         * @description                                                                                               // 3660\n         *                                                                                                            // 3661\n         * Fired once the view **begins loading**, *before* the DOM is rendered.                                      // 3662\n         *                                                                                                            // 3663\n         * @param {Object} event Event object.                                                                        // 3664\n         * @param {Object} viewConfig The view config properties (template, controller, etc).                         // 3665\n         *                                                                                                            // 3666\n         * @example                                                                                                   // 3667\n         *                                                                                                            // 3668\n         * <pre>                                                                                                      // 3669\n         * $scope.$on('$viewContentLoading',                                                                          // 3670\n         * function(event, viewConfig){                                                                               // 3671\n         *     // Access to all the view config properties.                                                           // 3672\n         *     // and one special property 'targetView'                                                               // 3673\n         *     // viewConfig.targetView                                                                               // 3674\n         * });                                                                                                        // 3675\n         * </pre>                                                                                                     // 3676\n         */                                                                                                           // 3677\n          $rootScope.$broadcast('$viewContentLoading', options);                                                      // 3678\n        }                                                                                                             // 3679\n        return result;                                                                                                // 3680\n      }                                                                                                               // 3681\n    };                                                                                                                // 3682\n  }                                                                                                                   // 3683\n}                                                                                                                     // 3684\n                                                                                                                      // 3685\nangular.module('ui.router.state').provider('$view', $ViewProvider);                                                   // 3686\n                                                                                                                      // 3687\n/**                                                                                                                   // 3688\n * @ngdoc object                                                                                                      // 3689\n * @name ui.router.state.$uiViewScrollProvider                                                                        // 3690\n *                                                                                                                    // 3691\n * @description                                                                                                       // 3692\n * Provider that returns the {@link ui.router.state.$uiViewScroll} service function.                                  // 3693\n */                                                                                                                   // 3694\nfunction $ViewScrollProvider() {                                                                                      // 3695\n                                                                                                                      // 3696\n  var useAnchorScroll = false;                                                                                        // 3697\n                                                                                                                      // 3698\n  /**                                                                                                                 // 3699\n   * @ngdoc function                                                                                                  // 3700\n   * @name ui.router.state.$uiViewScrollProvider#useAnchorScroll                                                      // 3701\n   * @methodOf ui.router.state.$uiViewScrollProvider                                                                  // 3702\n   *                                                                                                                  // 3703\n   * @description                                                                                                     // 3704\n   * Reverts back to using the core [`$anchorScroll`](http://docs.angularjs.org/api/ng.$anchorScroll) service for     // 3705\n   * scrolling based on the url anchor.                                                                               // 3706\n   */                                                                                                                 // 3707\n  this.useAnchorScroll = function () {                                                                                // 3708\n    useAnchorScroll = true;                                                                                           // 3709\n  };                                                                                                                  // 3710\n                                                                                                                      // 3711\n  /**                                                                                                                 // 3712\n   * @ngdoc object                                                                                                    // 3713\n   * @name ui.router.state.$uiViewScroll                                                                              // 3714\n   *                                                                                                                  // 3715\n   * @requires $anchorScroll                                                                                          // 3716\n   * @requires $timeout                                                                                               // 3717\n   *                                                                                                                  // 3718\n   * @description                                                                                                     // 3719\n   * When called with a jqLite element, it scrolls the element into view (after a                                     // 3720\n   * `$timeout` so the DOM has time to refresh).                                                                      // 3721\n   *                                                                                                                  // 3722\n   * If you prefer to rely on `$anchorScroll` to scroll the view to the anchor,                                       // 3723\n   * this can be enabled by calling {@link ui.router.state.$uiViewScrollProvider#methods_useAnchorScroll `$uiViewScrollProvider.useAnchorScroll()`}.\n   */                                                                                                                 // 3725\n  this.$get = ['$anchorScroll', '$timeout', function ($anchorScroll, $timeout) {                                      // 3726\n    if (useAnchorScroll) {                                                                                            // 3727\n      return $anchorScroll;                                                                                           // 3728\n    }                                                                                                                 // 3729\n                                                                                                                      // 3730\n    return function ($element) {                                                                                      // 3731\n      return $timeout(function () {                                                                                   // 3732\n        $element[0].scrollIntoView();                                                                                 // 3733\n      }, 0, false);                                                                                                   // 3734\n    };                                                                                                                // 3735\n  }];                                                                                                                 // 3736\n}                                                                                                                     // 3737\n                                                                                                                      // 3738\nangular.module('ui.router.state').provider('$uiViewScroll', $ViewScrollProvider);                                     // 3739\n                                                                                                                      // 3740\n/**                                                                                                                   // 3741\n * @ngdoc directive                                                                                                   // 3742\n * @name ui.router.state.directive:ui-view                                                                            // 3743\n *                                                                                                                    // 3744\n * @requires ui.router.state.$state                                                                                   // 3745\n * @requires $compile                                                                                                 // 3746\n * @requires $controller                                                                                              // 3747\n * @requires $injector                                                                                                // 3748\n * @requires ui.router.state.$uiViewScroll                                                                            // 3749\n * @requires $document                                                                                                // 3750\n *                                                                                                                    // 3751\n * @restrict ECA                                                                                                      // 3752\n *                                                                                                                    // 3753\n * @description                                                                                                       // 3754\n * The ui-view directive tells $state where to place your templates.                                                  // 3755\n *                                                                                                                    // 3756\n * @param {string=} name A view name. The name should be unique amongst the other views in the                        // 3757\n * same state. You can have views of the same name that live in different states.                                     // 3758\n *                                                                                                                    // 3759\n * @param {string=} autoscroll It allows you to set the scroll behavior of the browser window                         // 3760\n * when a view is populated. By default, $anchorScroll is overridden by ui-router's custom scroll                     // 3761\n * service, {@link ui.router.state.$uiViewScroll}. This custom service let's you                                      // 3762\n * scroll ui-view elements into view when they are populated during a state activation.                               // 3763\n *                                                                                                                    // 3764\n * *Note: To revert back to old [`$anchorScroll`](http://docs.angularjs.org/api/ng.$anchorScroll)                     // 3765\n * functionality, call `$uiViewScrollProvider.useAnchorScroll()`.*                                                    // 3766\n *                                                                                                                    // 3767\n * @param {string=} onload Expression to evaluate whenever the view updates.                                          // 3768\n *                                                                                                                    // 3769\n * @example                                                                                                           // 3770\n * A view can be unnamed or named.                                                                                    // 3771\n * <pre>                                                                                                              // 3772\n * <!-- Unnamed -->                                                                                                   // 3773\n * <div ui-view></div>                                                                                                // 3774\n *                                                                                                                    // 3775\n * <!-- Named -->                                                                                                     // 3776\n * <div ui-view=\"viewName\"></div>                                                                                     // 3777\n * </pre>                                                                                                             // 3778\n *                                                                                                                    // 3779\n * You can only have one unnamed view within any template (or root html). If you are only using a                     // 3780\n * single view and it is unnamed then you can populate it like so:                                                    // 3781\n * <pre>                                                                                                              // 3782\n * <div ui-view></div>                                                                                                // 3783\n * $stateProvider.state(\"home\", {                                                                                     // 3784\n *   template: \"<h1>HELLO!</h1>\"                                                                                      // 3785\n * })                                                                                                                 // 3786\n * </pre>                                                                                                             // 3787\n *                                                                                                                    // 3788\n * The above is a convenient shortcut equivalent to specifying your view explicitly with the {@link ui.router.state.$stateProvider#views `views`}\n * config property, by name, in this case an empty name:                                                              // 3790\n * <pre>                                                                                                              // 3791\n * $stateProvider.state(\"home\", {                                                                                     // 3792\n *   views: {                                                                                                         // 3793\n *     \"\": {                                                                                                          // 3794\n *       template: \"<h1>HELLO!</h1>\"                                                                                  // 3795\n *     }                                                                                                              // 3796\n *   }                                                                                                                // 3797\n * })                                                                                                                 // 3798\n * </pre>                                                                                                             // 3799\n *                                                                                                                    // 3800\n * But typically you'll only use the views property if you name your view or have more than one view                  // 3801\n * in the same template. There's not really a compelling reason to name a view if its the only one,                   // 3802\n * but you could if you wanted, like so:                                                                              // 3803\n * <pre>                                                                                                              // 3804\n * <div ui-view=\"main\"></div>                                                                                         // 3805\n * </pre>                                                                                                             // 3806\n * <pre>                                                                                                              // 3807\n * $stateProvider.state(\"home\", {                                                                                     // 3808\n *   views: {                                                                                                         // 3809\n *     \"main\": {                                                                                                      // 3810\n *       template: \"<h1>HELLO!</h1>\"                                                                                  // 3811\n *     }                                                                                                              // 3812\n *   }                                                                                                                // 3813\n * })                                                                                                                 // 3814\n * </pre>                                                                                                             // 3815\n *                                                                                                                    // 3816\n * Really though, you'll use views to set up multiple views:                                                          // 3817\n * <pre>                                                                                                              // 3818\n * <div ui-view></div>                                                                                                // 3819\n * <div ui-view=\"chart\"></div>                                                                                        // 3820\n * <div ui-view=\"data\"></div>                                                                                         // 3821\n * </pre>                                                                                                             // 3822\n *                                                                                                                    // 3823\n * <pre>                                                                                                              // 3824\n * $stateProvider.state(\"home\", {                                                                                     // 3825\n *   views: {                                                                                                         // 3826\n *     \"\": {                                                                                                          // 3827\n *       template: \"<h1>HELLO!</h1>\"                                                                                  // 3828\n *     },                                                                                                             // 3829\n *     \"chart\": {                                                                                                     // 3830\n *       template: \"<chart_thing/>\"                                                                                   // 3831\n *     },                                                                                                             // 3832\n *     \"data\": {                                                                                                      // 3833\n *       template: \"<data_thing/>\"                                                                                    // 3834\n *     }                                                                                                              // 3835\n *   }                                                                                                                // 3836\n * })                                                                                                                 // 3837\n * </pre>                                                                                                             // 3838\n *                                                                                                                    // 3839\n * Examples for `autoscroll`:                                                                                         // 3840\n *                                                                                                                    // 3841\n * <pre>                                                                                                              // 3842\n * <!-- If autoscroll present with no expression,                                                                     // 3843\n *      then scroll ui-view into view -->                                                                             // 3844\n * <ui-view autoscroll/>                                                                                              // 3845\n *                                                                                                                    // 3846\n * <!-- If autoscroll present with valid expression,                                                                  // 3847\n *      then scroll ui-view into view if expression evaluates to true -->                                             // 3848\n * <ui-view autoscroll='true'/>                                                                                       // 3849\n * <ui-view autoscroll='false'/>                                                                                      // 3850\n * <ui-view autoscroll='scopeVariable'/>                                                                              // 3851\n * </pre>                                                                                                             // 3852\n */                                                                                                                   // 3853\n$ViewDirective.$inject = ['$state', '$injector', '$uiViewScroll', '$interpolate'];                                    // 3854\nfunction $ViewDirective(   $state,   $injector,   $uiViewScroll,   $interpolate) {                                    // 3855\n                                                                                                                      // 3856\n  function getService() {                                                                                             // 3857\n    return ($injector.has) ? function(service) {                                                                      // 3858\n      return $injector.has(service) ? $injector.get(service) : null;                                                  // 3859\n    } : function(service) {                                                                                           // 3860\n      try {                                                                                                           // 3861\n        return $injector.get(service);                                                                                // 3862\n      } catch (e) {                                                                                                   // 3863\n        return null;                                                                                                  // 3864\n      }                                                                                                               // 3865\n    };                                                                                                                // 3866\n  }                                                                                                                   // 3867\n                                                                                                                      // 3868\n  var service = getService(),                                                                                         // 3869\n      $animator = service('$animator'),                                                                               // 3870\n      $animate = service('$animate');                                                                                 // 3871\n                                                                                                                      // 3872\n  // Returns a set of DOM manipulation functions based on which Angular version                                       // 3873\n  // it should use                                                                                                    // 3874\n  function getRenderer(attrs, scope) {                                                                                // 3875\n    var statics = function() {                                                                                        // 3876\n      return {                                                                                                        // 3877\n        enter: function (element, target, cb) { target.after(element); cb(); },                                       // 3878\n        leave: function (element, cb) { element.remove(); cb(); }                                                     // 3879\n      };                                                                                                              // 3880\n    };                                                                                                                // 3881\n                                                                                                                      // 3882\n    if ($animate) {                                                                                                   // 3883\n      return {                                                                                                        // 3884\n        enter: function(element, target, cb) {                                                                        // 3885\n          var promise = $animate.enter(element, null, target, cb);                                                    // 3886\n          if (promise && promise.then) promise.then(cb);                                                              // 3887\n        },                                                                                                            // 3888\n        leave: function(element, cb) {                                                                                // 3889\n          var promise = $animate.leave(element, cb);                                                                  // 3890\n          if (promise && promise.then) promise.then(cb);                                                              // 3891\n        }                                                                                                             // 3892\n      };                                                                                                              // 3893\n    }                                                                                                                 // 3894\n                                                                                                                      // 3895\n    if ($animator) {                                                                                                  // 3896\n      var animate = $animator && $animator(scope, attrs);                                                             // 3897\n                                                                                                                      // 3898\n      return {                                                                                                        // 3899\n        enter: function(element, target, cb) {animate.enter(element, null, target); cb(); },                          // 3900\n        leave: function(element, cb) { animate.leave(element); cb(); }                                                // 3901\n      };                                                                                                              // 3902\n    }                                                                                                                 // 3903\n                                                                                                                      // 3904\n    return statics();                                                                                                 // 3905\n  }                                                                                                                   // 3906\n                                                                                                                      // 3907\n  var directive = {                                                                                                   // 3908\n    restrict: 'ECA',                                                                                                  // 3909\n    terminal: true,                                                                                                   // 3910\n    priority: 400,                                                                                                    // 3911\n    transclude: 'element',                                                                                            // 3912\n    compile: function (tElement, tAttrs, $transclude) {                                                               // 3913\n      return function (scope, $element, attrs) {                                                                      // 3914\n        var previousEl, currentEl, currentScope, latestLocals,                                                        // 3915\n            onloadExp     = attrs.onload || '',                                                                       // 3916\n            autoScrollExp = attrs.autoscroll,                                                                         // 3917\n            renderer      = getRenderer(attrs, scope);                                                                // 3918\n                                                                                                                      // 3919\n        scope.$on('$stateChangeSuccess', function() {                                                                 // 3920\n          updateView(false);                                                                                          // 3921\n        });                                                                                                           // 3922\n        scope.$on('$viewContentLoading', function() {                                                                 // 3923\n          updateView(false);                                                                                          // 3924\n        });                                                                                                           // 3925\n                                                                                                                      // 3926\n        updateView(true);                                                                                             // 3927\n                                                                                                                      // 3928\n        function cleanupLastView() {                                                                                  // 3929\n          if (previousEl) {                                                                                           // 3930\n            previousEl.remove();                                                                                      // 3931\n            previousEl = null;                                                                                        // 3932\n          }                                                                                                           // 3933\n                                                                                                                      // 3934\n          if (currentScope) {                                                                                         // 3935\n            currentScope.$destroy();                                                                                  // 3936\n            currentScope = null;                                                                                      // 3937\n          }                                                                                                           // 3938\n                                                                                                                      // 3939\n          if (currentEl) {                                                                                            // 3940\n            renderer.leave(currentEl, function() {                                                                    // 3941\n              previousEl = null;                                                                                      // 3942\n            });                                                                                                       // 3943\n                                                                                                                      // 3944\n            previousEl = currentEl;                                                                                   // 3945\n            currentEl = null;                                                                                         // 3946\n          }                                                                                                           // 3947\n        }                                                                                                             // 3948\n                                                                                                                      // 3949\n        function updateView(firstTime) {                                                                              // 3950\n          var newScope,                                                                                               // 3951\n              name            = getUiViewName(scope, attrs, $element, $interpolate),                                  // 3952\n              previousLocals  = name && $state.$current && $state.$current.locals[name];                              // 3953\n                                                                                                                      // 3954\n          if (!firstTime && previousLocals === latestLocals) return; // nothing to do                                 // 3955\n          newScope = scope.$new();                                                                                    // 3956\n          latestLocals = $state.$current.locals[name];                                                                // 3957\n                                                                                                                      // 3958\n          var clone = $transclude(newScope, function(clone) {                                                         // 3959\n            renderer.enter(clone, $element, function onUiViewEnter() {                                                // 3960\n              if(currentScope) {                                                                                      // 3961\n                currentScope.$emit('$viewContentAnimationEnded');                                                     // 3962\n              }                                                                                                       // 3963\n                                                                                                                      // 3964\n              if (angular.isDefined(autoScrollExp) && !autoScrollExp || scope.$eval(autoScrollExp)) {                 // 3965\n                $uiViewScroll(clone);                                                                                 // 3966\n              }                                                                                                       // 3967\n            });                                                                                                       // 3968\n            cleanupLastView();                                                                                        // 3969\n          });                                                                                                         // 3970\n                                                                                                                      // 3971\n          currentEl = clone;                                                                                          // 3972\n          currentScope = newScope;                                                                                    // 3973\n          /**                                                                                                         // 3974\n           * @ngdoc event                                                                                             // 3975\n           * @name ui.router.state.directive:ui-view#$viewContentLoaded                                               // 3976\n           * @eventOf ui.router.state.directive:ui-view                                                               // 3977\n           * @eventType emits on ui-view directive scope                                                              // 3978\n           * @description           *                                                                                 // 3979\n           * Fired once the view is **loaded**, *after* the DOM is rendered.                                          // 3980\n           *                                                                                                          // 3981\n           * @param {Object} event Event object.                                                                      // 3982\n           */                                                                                                         // 3983\n          currentScope.$emit('$viewContentLoaded');                                                                   // 3984\n          currentScope.$eval(onloadExp);                                                                              // 3985\n        }                                                                                                             // 3986\n      };                                                                                                              // 3987\n    }                                                                                                                 // 3988\n  };                                                                                                                  // 3989\n                                                                                                                      // 3990\n  return directive;                                                                                                   // 3991\n}                                                                                                                     // 3992\n                                                                                                                      // 3993\n$ViewDirectiveFill.$inject = ['$compile', '$controller', '$state', '$interpolate'];                                   // 3994\nfunction $ViewDirectiveFill (  $compile,   $controller,   $state,   $interpolate) {                                   // 3995\n  return {                                                                                                            // 3996\n    restrict: 'ECA',                                                                                                  // 3997\n    priority: -400,                                                                                                   // 3998\n    compile: function (tElement) {                                                                                    // 3999\n      var initial = tElement.html();                                                                                  // 4000\n      return function (scope, $element, attrs) {                                                                      // 4001\n        var current = $state.$current,                                                                                // 4002\n            name = getUiViewName(scope, attrs, $element, $interpolate),                                               // 4003\n            locals  = current && current.locals[name];                                                                // 4004\n                                                                                                                      // 4005\n        if (! locals) {                                                                                               // 4006\n          return;                                                                                                     // 4007\n        }                                                                                                             // 4008\n                                                                                                                      // 4009\n        $element.data('$uiView', { name: name, state: locals.$$state });                                              // 4010\n        $element.html(locals.$template ? locals.$template : initial);                                                 // 4011\n                                                                                                                      // 4012\n        var link = $compile($element.contents());                                                                     // 4013\n                                                                                                                      // 4014\n        if (locals.$$controller) {                                                                                    // 4015\n          locals.$scope = scope;                                                                                      // 4016\n          locals.$element = $element;                                                                                 // 4017\n          var controller = $controller(locals.$$controller, locals);                                                  // 4018\n          if (locals.$$controllerAs) {                                                                                // 4019\n            scope[locals.$$controllerAs] = controller;                                                                // 4020\n          }                                                                                                           // 4021\n          $element.data('$ngControllerController', controller);                                                       // 4022\n          $element.children().data('$ngControllerController', controller);                                            // 4023\n        }                                                                                                             // 4024\n                                                                                                                      // 4025\n        link(scope);                                                                                                  // 4026\n      };                                                                                                              // 4027\n    }                                                                                                                 // 4028\n  };                                                                                                                  // 4029\n}                                                                                                                     // 4030\n                                                                                                                      // 4031\n/**                                                                                                                   // 4032\n * Shared ui-view code for both directives:                                                                           // 4033\n * Given scope, element, and its attributes, return the view's name                                                   // 4034\n */                                                                                                                   // 4035\nfunction getUiViewName(scope, attrs, element, $interpolate) {                                                         // 4036\n  var name = $interpolate(attrs.uiView || attrs.name || '')(scope);                                                   // 4037\n  var inherited = element.inheritedData('$uiView');                                                                   // 4038\n  return name.indexOf('@') >= 0 ?  name :  (name + '@' + (inherited ? inherited.state.name : ''));                    // 4039\n}                                                                                                                     // 4040\n                                                                                                                      // 4041\nangular.module('ui.router.state').directive('uiView', $ViewDirective);                                                // 4042\nangular.module('ui.router.state').directive('uiView', $ViewDirectiveFill);                                            // 4043\n                                                                                                                      // 4044\nfunction parseStateRef(ref, current) {                                                                                // 4045\n  var preparsed = ref.match(/^\\s*({[^}]*})\\s*$/), parsed;                                                             // 4046\n  if (preparsed) ref = current + '(' + preparsed[1] + ')';                                                            // 4047\n  parsed = ref.replace(/\\n/g, \" \").match(/^([^(]+?)\\s*(\\((.*)\\))?$/);                                                 // 4048\n  if (!parsed || parsed.length !== 4) throw new Error(\"Invalid state ref '\" + ref + \"'\");                             // 4049\n  return { state: parsed[1], paramExpr: parsed[3] || null };                                                          // 4050\n}                                                                                                                     // 4051\n                                                                                                                      // 4052\nfunction stateContext(el) {                                                                                           // 4053\n  var stateData = el.parent().inheritedData('$uiView');                                                               // 4054\n                                                                                                                      // 4055\n  if (stateData && stateData.state && stateData.state.name) {                                                         // 4056\n    return stateData.state;                                                                                           // 4057\n  }                                                                                                                   // 4058\n}                                                                                                                     // 4059\n                                                                                                                      // 4060\n/**                                                                                                                   // 4061\n * @ngdoc directive                                                                                                   // 4062\n * @name ui.router.state.directive:ui-sref                                                                            // 4063\n *                                                                                                                    // 4064\n * @requires ui.router.state.$state                                                                                   // 4065\n * @requires $timeout                                                                                                 // 4066\n *                                                                                                                    // 4067\n * @restrict A                                                                                                        // 4068\n *                                                                                                                    // 4069\n * @description                                                                                                       // 4070\n * A directive that binds a link (`<a>` tag) to a state. If the state has an associated                               // 4071\n * URL, the directive will automatically generate & update the `href` attribute via                                   // 4072\n * the {@link ui.router.state.$state#methods_href $state.href()} method. Clicking                                     // 4073\n * the link will trigger a state transition with optional parameters.                                                 // 4074\n *                                                                                                                    // 4075\n * Also middle-clicking, right-clicking, and ctrl-clicking on the link will be                                        // 4076\n * handled natively by the browser.                                                                                   // 4077\n *                                                                                                                    // 4078\n * You can also use relative state paths within ui-sref, just like the relative                                       // 4079\n * paths passed to `$state.go()`. You just need to be aware that the path is relative                                 // 4080\n * to the state that the link lives in, in other words the state that loaded the                                      // 4081\n * template containing the link.                                                                                      // 4082\n *                                                                                                                    // 4083\n * You can specify options to pass to {@link ui.router.state.$state#go $state.go()}                                   // 4084\n * using the `ui-sref-opts` attribute. Options are restricted to `location`, `inherit`,                               // 4085\n * and `reload`.                                                                                                      // 4086\n *                                                                                                                    // 4087\n * @example                                                                                                           // 4088\n * Here's an example of how you'd use ui-sref and how it would compile. If you have the                               // 4089\n * following template:                                                                                                // 4090\n * <pre>                                                                                                              // 4091\n * <a ui-sref=\"home\">Home</a> | <a ui-sref=\"about\">About</a> | <a ui-sref=\"{page: 2}\">Next page</a>                   // 4092\n *                                                                                                                    // 4093\n * <ul>                                                                                                               // 4094\n *     <li ng-repeat=\"contact in contacts\">                                                                           // 4095\n *         <a ui-sref=\"contacts.detail({ id: contact.id })\">{{ contact.name }}</a>                                    // 4096\n *     </li>                                                                                                          // 4097\n * </ul>                                                                                                              // 4098\n * </pre>                                                                                                             // 4099\n *                                                                                                                    // 4100\n * Then the compiled html would be (assuming Html5Mode is off and current state is contacts):                         // 4101\n * <pre>                                                                                                              // 4102\n * <a href=\"#/home\" ui-sref=\"home\">Home</a> | <a href=\"#/about\" ui-sref=\"about\">About</a> | <a href=\"#/contacts?page=2\" ui-sref=\"{page: 2}\">Next page</a>\n *                                                                                                                    // 4104\n * <ul>                                                                                                               // 4105\n *     <li ng-repeat=\"contact in contacts\">                                                                           // 4106\n *         <a href=\"#/contacts/1\" ui-sref=\"contacts.detail({ id: contact.id })\">Joe</a>                               // 4107\n *     </li>                                                                                                          // 4108\n *     <li ng-repeat=\"contact in contacts\">                                                                           // 4109\n *         <a href=\"#/contacts/2\" ui-sref=\"contacts.detail({ id: contact.id })\">Alice</a>                             // 4110\n *     </li>                                                                                                          // 4111\n *     <li ng-repeat=\"contact in contacts\">                                                                           // 4112\n *         <a href=\"#/contacts/3\" ui-sref=\"contacts.detail({ id: contact.id })\">Bob</a>                               // 4113\n *     </li>                                                                                                          // 4114\n * </ul>                                                                                                              // 4115\n *                                                                                                                    // 4116\n * <a ui-sref=\"home\" ui-sref-opts=\"{reload: true}\">Home</a>                                                           // 4117\n * </pre>                                                                                                             // 4118\n *                                                                                                                    // 4119\n * @param {string} ui-sref 'stateName' can be any valid absolute or relative state                                    // 4120\n * @param {Object} ui-sref-opts options to pass to {@link ui.router.state.$state#go $state.go()}                      // 4121\n */                                                                                                                   // 4122\n$StateRefDirective.$inject = ['$state', '$timeout'];                                                                  // 4123\nfunction $StateRefDirective($state, $timeout) {                                                                       // 4124\n  var allowedOptions = ['location', 'inherit', 'reload', 'absolute'];                                                 // 4125\n                                                                                                                      // 4126\n  return {                                                                                                            // 4127\n    restrict: 'A',                                                                                                    // 4128\n    require: ['?^uiSrefActive', '?^uiSrefActiveEq'],                                                                  // 4129\n    link: function(scope, element, attrs, uiSrefActive) {                                                             // 4130\n      var ref = parseStateRef(attrs.uiSref, $state.current.name);                                                     // 4131\n      var params = null, url = null, base = stateContext(element) || $state.$current;                                 // 4132\n      // SVGAElement does not use the href attribute, but rather the 'xlinkHref' attribute.                           // 4133\n      var hrefKind = Object.prototype.toString.call(element.prop('href')) === '[object SVGAnimatedString]' ?          // 4134\n                 'xlink:href' : 'href';                                                                               // 4135\n      var newHref = null, isAnchor = element.prop(\"tagName\").toUpperCase() === \"A\";                                   // 4136\n      var isForm = element[0].nodeName === \"FORM\";                                                                    // 4137\n      var attr = isForm ? \"action\" : hrefKind, nav = true;                                                            // 4138\n                                                                                                                      // 4139\n      var options = { relative: base, inherit: true };                                                                // 4140\n      var optionsOverride = scope.$eval(attrs.uiSrefOpts) || {};                                                      // 4141\n                                                                                                                      // 4142\n      angular.forEach(allowedOptions, function(option) {                                                              // 4143\n        if (option in optionsOverride) {                                                                              // 4144\n          options[option] = optionsOverride[option];                                                                  // 4145\n        }                                                                                                             // 4146\n      });                                                                                                             // 4147\n                                                                                                                      // 4148\n      var update = function(newVal) {                                                                                 // 4149\n        if (newVal) params = angular.copy(newVal);                                                                    // 4150\n        if (!nav) return;                                                                                             // 4151\n                                                                                                                      // 4152\n        newHref = $state.href(ref.state, params, options);                                                            // 4153\n                                                                                                                      // 4154\n        var activeDirective = uiSrefActive[1] || uiSrefActive[0];                                                     // 4155\n        if (activeDirective) {                                                                                        // 4156\n          activeDirective.$$addStateInfo(ref.state, params);                                                          // 4157\n        }                                                                                                             // 4158\n        if (newHref === null) {                                                                                       // 4159\n          nav = false;                                                                                                // 4160\n          return false;                                                                                               // 4161\n        }                                                                                                             // 4162\n        attrs.$set(attr, newHref);                                                                                    // 4163\n      };                                                                                                              // 4164\n                                                                                                                      // 4165\n      if (ref.paramExpr) {                                                                                            // 4166\n        scope.$watch(ref.paramExpr, function(newVal, oldVal) {                                                        // 4167\n          if (newVal !== params) update(newVal);                                                                      // 4168\n        }, true);                                                                                                     // 4169\n        params = angular.copy(scope.$eval(ref.paramExpr));                                                            // 4170\n      }                                                                                                               // 4171\n      update();                                                                                                       // 4172\n                                                                                                                      // 4173\n      if (isForm) return;                                                                                             // 4174\n                                                                                                                      // 4175\n      element.bind(\"click\", function(e) {                                                                             // 4176\n        var button = e.which || e.button;                                                                             // 4177\n        if ( !(button > 1 || e.ctrlKey || e.metaKey || e.shiftKey || element.attr('target')) ) {                      // 4178\n          // HACK: This is to allow ng-clicks to be processed before the transition is initiated:                     // 4179\n          var transition = $timeout(function() {                                                                      // 4180\n            $state.go(ref.state, params, options);                                                                    // 4181\n          });                                                                                                         // 4182\n          e.preventDefault();                                                                                         // 4183\n                                                                                                                      // 4184\n          // if the state has no URL, ignore one preventDefault from the <a> directive.                               // 4185\n          var ignorePreventDefaultCount = isAnchor && !newHref ? 1: 0;                                                // 4186\n          e.preventDefault = function() {                                                                             // 4187\n            if (ignorePreventDefaultCount-- <= 0)                                                                     // 4188\n              $timeout.cancel(transition);                                                                            // 4189\n          };                                                                                                          // 4190\n        }                                                                                                             // 4191\n      });                                                                                                             // 4192\n    }                                                                                                                 // 4193\n  };                                                                                                                  // 4194\n}                                                                                                                     // 4195\n                                                                                                                      // 4196\n/**                                                                                                                   // 4197\n * @ngdoc directive                                                                                                   // 4198\n * @name ui.router.state.directive:ui-sref-active                                                                     // 4199\n *                                                                                                                    // 4200\n * @requires ui.router.state.$state                                                                                   // 4201\n * @requires ui.router.state.$stateParams                                                                             // 4202\n * @requires $interpolate                                                                                             // 4203\n *                                                                                                                    // 4204\n * @restrict A                                                                                                        // 4205\n *                                                                                                                    // 4206\n * @description                                                                                                       // 4207\n * A directive working alongside ui-sref to add classes to an element when the                                        // 4208\n * related ui-sref directive's state is active, and removing them when it is inactive.                                // 4209\n * The primary use-case is to simplify the special appearance of navigation menus                                     // 4210\n * relying on `ui-sref`, by having the \"active\" state's menu button appear different,                                 // 4211\n * distinguishing it from the inactive menu items.                                                                    // 4212\n *                                                                                                                    // 4213\n * ui-sref-active can live on the same element as ui-sref or on a parent element. The first                           // 4214\n * ui-sref-active found at the same level or above the ui-sref will be used.                                          // 4215\n *                                                                                                                    // 4216\n * Will activate when the ui-sref's target state or any child state is active. If you                                 // 4217\n * need to activate only when the ui-sref target state is active and *not* any of                                     // 4218\n * it's children, then you will use                                                                                   // 4219\n * {@link ui.router.state.directive:ui-sref-active-eq ui-sref-active-eq}                                              // 4220\n *                                                                                                                    // 4221\n * @example                                                                                                           // 4222\n * Given the following template:                                                                                      // 4223\n * <pre>                                                                                                              // 4224\n * <ul>                                                                                                               // 4225\n *   <li ui-sref-active=\"active\" class=\"item\">                                                                        // 4226\n *     <a href ui-sref=\"app.user({user: 'bilbobaggins'})\">@bilbobaggins</a>                                           // 4227\n *   </li>                                                                                                            // 4228\n * </ul>                                                                                                              // 4229\n * </pre>                                                                                                             // 4230\n *                                                                                                                    // 4231\n *                                                                                                                    // 4232\n * When the app state is \"app.user\" (or any children states), and contains the state parameter \"user\" with value \"bilbobaggins\",\n * the resulting HTML will appear as (note the 'active' class):                                                       // 4234\n * <pre>                                                                                                              // 4235\n * <ul>                                                                                                               // 4236\n *   <li ui-sref-active=\"active\" class=\"item active\">                                                                 // 4237\n *     <a ui-sref=\"app.user({user: 'bilbobaggins'})\" href=\"/users/bilbobaggins\">@bilbobaggins</a>                     // 4238\n *   </li>                                                                                                            // 4239\n * </ul>                                                                                                              // 4240\n * </pre>                                                                                                             // 4241\n *                                                                                                                    // 4242\n * The class name is interpolated **once** during the directives link time (any further changes to the                // 4243\n * interpolated value are ignored).                                                                                   // 4244\n *                                                                                                                    // 4245\n * Multiple classes may be specified in a space-separated format:                                                     // 4246\n * <pre>                                                                                                              // 4247\n * <ul>                                                                                                               // 4248\n *   <li ui-sref-active='class1 class2 class3'>                                                                       // 4249\n *     <a ui-sref=\"app.user\">link</a>                                                                                 // 4250\n *   </li>                                                                                                            // 4251\n * </ul>                                                                                                              // 4252\n * </pre>                                                                                                             // 4253\n */                                                                                                                   // 4254\n                                                                                                                      // 4255\n/**                                                                                                                   // 4256\n * @ngdoc directive                                                                                                   // 4257\n * @name ui.router.state.directive:ui-sref-active-eq                                                                  // 4258\n *                                                                                                                    // 4259\n * @requires ui.router.state.$state                                                                                   // 4260\n * @requires ui.router.state.$stateParams                                                                             // 4261\n * @requires $interpolate                                                                                             // 4262\n *                                                                                                                    // 4263\n * @restrict A                                                                                                        // 4264\n *                                                                                                                    // 4265\n * @description                                                                                                       // 4266\n * The same as {@link ui.router.state.directive:ui-sref-active ui-sref-active} but will only activate                 // 4267\n * when the exact target state used in the `ui-sref` is active; no child states.                                      // 4268\n *                                                                                                                    // 4269\n */                                                                                                                   // 4270\n$StateRefActiveDirective.$inject = ['$state', '$stateParams', '$interpolate'];                                        // 4271\nfunction $StateRefActiveDirective($state, $stateParams, $interpolate) {                                               // 4272\n  return  {                                                                                                           // 4273\n    restrict: \"A\",                                                                                                    // 4274\n    controller: ['$scope', '$element', '$attrs', function ($scope, $element, $attrs) {                                // 4275\n      var states = [], activeClass;                                                                                   // 4276\n                                                                                                                      // 4277\n      // There probably isn't much point in $observing this                                                           // 4278\n      // uiSrefActive and uiSrefActiveEq share the same directive object with some                                    // 4279\n      // slight difference in logic routing                                                                           // 4280\n      activeClass = $interpolate($attrs.uiSrefActiveEq || $attrs.uiSrefActive || '', false)($scope);                  // 4281\n                                                                                                                      // 4282\n      // Allow uiSref to communicate with uiSrefActive[Equals]                                                        // 4283\n      this.$$addStateInfo = function (newState, newParams) {                                                          // 4284\n        var state = $state.get(newState, stateContext($element));                                                     // 4285\n                                                                                                                      // 4286\n        states.push({                                                                                                 // 4287\n          state: state || { name: newState },                                                                         // 4288\n          params: newParams                                                                                           // 4289\n        });                                                                                                           // 4290\n                                                                                                                      // 4291\n        update();                                                                                                     // 4292\n      };                                                                                                              // 4293\n                                                                                                                      // 4294\n      $scope.$on('$stateChangeSuccess', update);                                                                      // 4295\n                                                                                                                      // 4296\n      // Update route state                                                                                           // 4297\n      function update() {                                                                                             // 4298\n        if (anyMatch()) {                                                                                             // 4299\n          $element.addClass(activeClass);                                                                             // 4300\n        } else {                                                                                                      // 4301\n          $element.removeClass(activeClass);                                                                          // 4302\n        }                                                                                                             // 4303\n      }                                                                                                               // 4304\n                                                                                                                      // 4305\n      function anyMatch() {                                                                                           // 4306\n        for (var i = 0; i < states.length; i++) {                                                                     // 4307\n          if (isMatch(states[i].state, states[i].params)) {                                                           // 4308\n            return true;                                                                                              // 4309\n          }                                                                                                           // 4310\n        }                                                                                                             // 4311\n        return false;                                                                                                 // 4312\n      }                                                                                                               // 4313\n                                                                                                                      // 4314\n      function isMatch(state, params) {                                                                               // 4315\n        if (typeof $attrs.uiSrefActiveEq !== 'undefined') {                                                           // 4316\n          return $state.is(state.name, params);                                                                       // 4317\n        } else {                                                                                                      // 4318\n          return $state.includes(state.name, params);                                                                 // 4319\n        }                                                                                                             // 4320\n      }                                                                                                               // 4321\n    }]                                                                                                                // 4322\n  };                                                                                                                  // 4323\n}                                                                                                                     // 4324\n                                                                                                                      // 4325\nangular.module('ui.router.state')                                                                                     // 4326\n  .directive('uiSref', $StateRefDirective)                                                                            // 4327\n  .directive('uiSrefActive', $StateRefActiveDirective)                                                                // 4328\n  .directive('uiSrefActiveEq', $StateRefActiveDirective);                                                             // 4329\n                                                                                                                      // 4330\n/**                                                                                                                   // 4331\n * @ngdoc filter                                                                                                      // 4332\n * @name ui.router.state.filter:isState                                                                               // 4333\n *                                                                                                                    // 4334\n * @requires ui.router.state.$state                                                                                   // 4335\n *                                                                                                                    // 4336\n * @description                                                                                                       // 4337\n * Translates to {@link ui.router.state.$state#methods_is $state.is(\"stateName\")}.                                    // 4338\n */                                                                                                                   // 4339\n$IsStateFilter.$inject = ['$state'];                                                                                  // 4340\nfunction $IsStateFilter($state) {                                                                                     // 4341\n  var isFilter = function (state) {                                                                                   // 4342\n    return $state.is(state);                                                                                          // 4343\n  };                                                                                                                  // 4344\n  isFilter.$stateful = true;                                                                                          // 4345\n  return isFilter;                                                                                                    // 4346\n}                                                                                                                     // 4347\n                                                                                                                      // 4348\n/**                                                                                                                   // 4349\n * @ngdoc filter                                                                                                      // 4350\n * @name ui.router.state.filter:includedByState                                                                       // 4351\n *                                                                                                                    // 4352\n * @requires ui.router.state.$state                                                                                   // 4353\n *                                                                                                                    // 4354\n * @description                                                                                                       // 4355\n * Translates to {@link ui.router.state.$state#methods_includes $state.includes('fullOrPartialStateName')}.           // 4356\n */                                                                                                                   // 4357\n$IncludedByStateFilter.$inject = ['$state'];                                                                          // 4358\nfunction $IncludedByStateFilter($state) {                                                                             // 4359\n  var includesFilter = function (state) {                                                                             // 4360\n    return $state.includes(state);                                                                                    // 4361\n  };                                                                                                                  // 4362\n  includesFilter.$stateful = true;                                                                                    // 4363\n  return  includesFilter;                                                                                             // 4364\n}                                                                                                                     // 4365\n                                                                                                                      // 4366\nangular.module('ui.router.state')                                                                                     // 4367\n  .filter('isState', $IsStateFilter)                                                                                  // 4368\n  .filter('includedByState', $IncludedByStateFilter);                                                                 // 4369\n})(window, window.angular);                                                                                           // 4370\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n"]}