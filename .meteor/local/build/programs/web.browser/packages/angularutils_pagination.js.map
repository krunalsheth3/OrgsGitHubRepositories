{"version":3,"sources":["meteor://ðŸ’»app/packages/angularutils_pagination/dirPagination.js"],"names":[],"mappingsfile":"/packages/angularutils_pagination.js","sourcesContent":["/**\n * dirPagination - AngularJS module for paginating (almost) anything.\n *\n *\n * Credits\n * =======\n *\n * Daniel Tabuenca: https://groups.google.com/d/msg/angular/an9QpzqIYiM/r8v-3W1X5vcJ\n * for the idea on how to dynamically invoke the ng-repeat directive.\n *\n * I borrowed a couple of lines and a few attribute names from the AngularUI Bootstrap project:\n * https://github.com/angular-ui/bootstrap/blob/master/src/pagination/pagination.js\n *\n * Copyright 2014 Michael Bromley <michael@michaelbromley.co.uk>\n */\n\n(function() {\n\n    /**\n     * Config\n     */\n    var moduleName = 'angularUtils.directives.dirPagination';\n    var DEFAULT_ID = '__default';\n\n    /**\n     * Module\n     */\n    angular.module(moduleName, [])\n        .directive('dirPaginate', ['$compile', '$parse', 'paginationService', dirPaginateDirective])\n        .directive('dirPaginateNoCompile', noCompileDirective)\n        .directive('dirPaginationControls', ['paginationService', 'paginationTemplate', dirPaginationControlsDirective])\n        .filter('itemsPerPage', ['paginationService', itemsPerPageFilter])\n        .service('paginationService', paginationService)\n        .provider('paginationTemplate', paginationTemplateProvider)\n        .run(['$templateCache',dirPaginationControlsTemplateInstaller]);\n\n    function dirPaginateDirective($compile, $parse, paginationService) {\n\n        return  {\n            terminal: true,\n            multiElement: true,\n            priority: 100,\n            compile: dirPaginationCompileFn\n        };\n\n        function dirPaginationCompileFn(tElement, tAttrs){\n\n            var expression = tAttrs.dirPaginate;\n            // regex taken directly from https://github.com/angular/angular.js/blob/v1.4.x/src/ng/directive/ngRepeat.js#L339\n            var match = expression.match(/^\\s*([\\s\\S]+?)\\s+in\\s+([\\s\\S]+?)(?:\\s+as\\s+([\\s\\S]+?))?(?:\\s+track\\s+by\\s+([\\s\\S]+?))?\\s*$/);\n\n            var filterPattern = /\\|\\s*itemsPerPage\\s*:\\s*(.*\\(\\s*\\w*\\)|([^\\)]*?(?=\\s+as\\s+))|[^\\)]*)/;\n            if (match[2].match(filterPattern) === null) {\n                throw 'pagination directive: the \\'itemsPerPage\\' filter must be set.';\n            }\n            var itemsPerPageFilterRemoved = match[2].replace(filterPattern, '');\n            var collectionGetter = $parse(itemsPerPageFilterRemoved);\n\n            addNoCompileAttributes(tElement);\n\n            // If any value is specified for paginationId, we register the un-evaluated expression at this stage for the benefit of any\n            // dir-pagination-controls directives that may be looking for this ID.\n            var rawId = tAttrs.paginationId || DEFAULT_ID;\n            paginationService.registerInstance(rawId);\n\n            return function dirPaginationLinkFn(scope, element, attrs){\n\n                // Now that we have access to the `scope` we can interpolate any expression given in the paginationId attribute and\n                // potentially register a new ID if it evaluates to a different value than the rawId.\n                var paginationId = $parse(attrs.paginationId)(scope) || attrs.paginationId || DEFAULT_ID;\n                paginationService.registerInstance(paginationId);\n\n                var repeatExpression = getRepeatExpression(expression, paginationId);\n                addNgRepeatToElement(element, attrs, repeatExpression);\n\n                removeTemporaryAttributes(element);\n                var compiled =  $compile(element);\n\n                var currentPageGetter = makeCurrentPageGetterFn(scope, attrs, paginationId);\n                paginationService.setCurrentPageParser(paginationId, currentPageGetter, scope);\n\n                if (typeof attrs.totalItems !== 'undefined') {\n                    paginationService.setAsyncModeTrue(paginationId);\n                    scope.$watch(function() {\n                        return $parse(attrs.totalItems)(scope);\n                    }, function (result) {\n                        if (0 <= result) {\n                            paginationService.setCollectionLength(paginationId, result);\n                        }\n                    });\n                } else {\n                    scope.$watchCollection(function() {\n                        return collectionGetter(scope);\n                    }, function(collection) {\n                        if (collection) {\n                            paginationService.setCollectionLength(paginationId, collection.length);\n                        }\n                    });\n                }\n\n                // Delegate to the link function returned by the new compilation of the ng-repeat\n                compiled(scope);\n            };\n        }\n\n        /**\n         * If a pagination id has been specified, we need to check that it is present as the second argument passed to\n         * the itemsPerPage filter. If it is not there, we add it and return the modified expression.\n         *\n         * @param expression\n         * @param paginationId\n         * @returns {*}\n         */\n        function getRepeatExpression(expression, paginationId) {\n            var repeatExpression,\n                idDefinedInFilter = !!expression.match(/(\\|\\s*itemsPerPage\\s*:[^|]*:[^|]*)/);\n\n            if (paginationId !== DEFAULT_ID && !idDefinedInFilter) {\n                repeatExpression = expression.replace(/(\\|\\s*itemsPerPage\\s*:[^|]*)/, \"$1 : '\" + paginationId + \"'\");\n            } else {\n                repeatExpression = expression;\n            }\n\n            return repeatExpression;\n        }\n\n        /**\n         * Adds the ng-repeat directive to the element. In the case of multi-element (-start, -end) it adds the\n         * appropriate multi-element ng-repeat to the first and last element in the range.\n         * @param element\n         * @param attrs\n         * @param repeatExpression\n         */\n        function addNgRepeatToElement(element, attrs, repeatExpression) {\n            if (element[0].hasAttribute('dir-paginate-start') || element[0].hasAttribute('data-dir-paginate-start')) {\n                // using multiElement mode (dir-paginate-start, dir-paginate-end)\n                attrs.$set('ngRepeatStart', repeatExpression);\n                element.eq(element.length - 1).attr('ng-repeat-end', true);\n            } else {\n                attrs.$set('ngRepeat', repeatExpression);\n            }\n        }\n\n        /**\n         * Adds the dir-paginate-no-compile directive to each element in the tElement range.\n         * @param tElement\n         */\n        function addNoCompileAttributes(tElement) {\n            angular.forEach(tElement, function(el) {\n                if (el.nodeType === 1) {\n                    angular.element(el).attr('dir-paginate-no-compile', true);\n                }\n            });\n        }\n\n        /**\n         * Removes the variations on dir-paginate (data-, -start, -end) and the dir-paginate-no-compile directives.\n         * @param element\n         */\n        function removeTemporaryAttributes(element) {\n            angular.forEach(element, function(el) {\n                if (el.nodeType === 1) {\n                    angular.element(el).removeAttr('dir-paginate-no-compile');\n                }\n            });\n            element.eq(0).removeAttr('dir-paginate-start').removeAttr('dir-paginate').removeAttr('data-dir-paginate-start').removeAttr('data-dir-paginate');\n            element.eq(element.length - 1).removeAttr('dir-paginate-end').removeAttr('data-dir-paginate-end');\n        }\n\n        /**\n         * Creates a getter function for the current-page attribute, using the expression provided or a default value if\n         * no current-page expression was specified.\n         *\n         * @param scope\n         * @param attrs\n         * @param paginationId\n         * @returns {*}\n         */\n        function makeCurrentPageGetterFn(scope, attrs, paginationId) {\n            var currentPageGetter;\n            if (attrs.currentPage) {\n                currentPageGetter = $parse(attrs.currentPage);\n            } else {\n                // If the current-page attribute was not set, we'll make our own.\n                // Replace any non-alphanumeric characters which might confuse\n                // the $parse service and give unexpected results.\n                // See https://github.com/michaelbromley/angularUtils/issues/233\n                var defaultCurrentPage = (paginationId + '__currentPage').replace(/\\W/g, '_');\n                scope[defaultCurrentPage] = 1;\n                currentPageGetter = $parse(defaultCurrentPage);\n            }\n            return currentPageGetter;\n        }\n    }\n\n    /**\n     * This is a helper directive that allows correct compilation when in multi-element mode (ie dir-paginate-start, dir-paginate-end).\n     * It is dynamically added to all elements in the dir-paginate compile function, and it prevents further compilation of\n     * any inner directives. It is then removed in the link function, and all inner directives are then manually compiled.\n     */\n    function noCompileDirective() {\n        return {\n            priority: 5000,\n            terminal: true\n        };\n    }\n\n    function dirPaginationControlsTemplateInstaller($templateCache) {\n        $templateCache.put('angularUtils.directives.dirPagination.template', '<ul class=\"pagination\" ng-if=\"1 < pages.length || !autoHide\"><li ng-if=\"boundaryLinks\" ng-class=\"{ disabled : pagination.current == 1 }\"><a href=\"\" ng-click=\"setCurrent(1)\">&laquo;</a></li><li ng-if=\"directionLinks\" ng-class=\"{ disabled : pagination.current == 1 }\"><a href=\"\" ng-click=\"setCurrent(pagination.current - 1)\">&lsaquo;</a></li><li ng-repeat=\"pageNumber in pages track by tracker(pageNumber, $index)\" ng-class=\"{ active : pagination.current == pageNumber, disabled : pageNumber == \\'...\\' || ( ! autoHide && pages.length === 1 ) }\"><a href=\"\" ng-click=\"setCurrent(pageNumber)\">{{ pageNumber }}</a></li><li ng-if=\"directionLinks\" ng-class=\"{ disabled : pagination.current == pagination.last }\"><a href=\"\" ng-click=\"setCurrent(pagination.current + 1)\">&rsaquo;</a></li><li ng-if=\"boundaryLinks\"  ng-class=\"{ disabled : pagination.current == pagination.last }\"><a href=\"\" ng-click=\"setCurrent(pagination.last)\">&raquo;</a></li></ul>');\n    }\n\n    function dirPaginationControlsDirective(paginationService, paginationTemplate) {\n\n        var numberRegex = /^\\d+$/;\n\n        return {\n            restrict: 'AE',\n            templateUrl: function(elem, attrs) {\n                return attrs.templateUrl || paginationTemplate.getPath();\n            },\n            scope: {\n                maxSize: '=?',\n                onPageChange: '&?',\n                paginationId: '=?',\n                autoHide: '=?'\n            },\n            link: dirPaginationControlsLinkFn\n        };\n\n        function dirPaginationControlsLinkFn(scope, element, attrs) {\n\n            // rawId is the un-interpolated value of the pagination-id attribute. This is only important when the corresponding dir-paginate directive has\n            // not yet been linked (e.g. if it is inside an ng-if block), and in that case it prevents this controls directive from assuming that there is\n            // no corresponding dir-paginate directive and wrongly throwing an exception.\n            var rawId = attrs.paginationId ||  DEFAULT_ID;\n            var paginationId = scope.paginationId || attrs.paginationId ||  DEFAULT_ID;\n\n            if (!paginationService.isRegistered(paginationId) && !paginationService.isRegistered(rawId)) {\n                var idMessage = (paginationId !== DEFAULT_ID) ? ' (id: ' + paginationId + ') ' : ' ';\n                console.warn('Pagination directive: the pagination controls' + idMessage + 'cannot be used without the corresponding pagination directive, which was not found at link time.');\n            }\n\n            if (!scope.maxSize) { scope.maxSize = 9; }\n            scope.autoHide = scope.autoHide === undefined ? true : scope.autoHide;\n            scope.directionLinks = angular.isDefined(attrs.directionLinks) ? scope.$parent.$eval(attrs.directionLinks) : true;\n            scope.boundaryLinks = angular.isDefined(attrs.boundaryLinks) ? scope.$parent.$eval(attrs.boundaryLinks) : false;\n\n            var paginationRange = Math.max(scope.maxSize, 5);\n            scope.pages = [];\n            scope.pagination = {\n                last: 1,\n                current: 1\n            };\n            scope.range = {\n                lower: 1,\n                upper: 1,\n                total: 1\n            };\n\n            scope.$watch(function() {\n                if (paginationService.isRegistered(paginationId)) {\n                    return (paginationService.getCollectionLength(paginationId) + 1) * paginationService.getItemsPerPage(paginationId);\n                }\n            }, function(length) {\n                if (0 < length) {\n                    generatePagination();\n                }\n            });\n\n            scope.$watch(function() {\n                if (paginationService.isRegistered(paginationId)) {\n                    return (paginationService.getItemsPerPage(paginationId));\n                }\n            }, function(current, previous) {\n                if (current != previous && typeof previous !== 'undefined') {\n                    goToPage(scope.pagination.current);\n                }\n            });\n\n            scope.$watch(function() {\n                if (paginationService.isRegistered(paginationId)) {\n                    return paginationService.getCurrentPage(paginationId);\n                }\n            }, function(currentPage, previousPage) {\n                if (currentPage != previousPage) {\n                    goToPage(currentPage);\n                }\n            });\n\n            scope.setCurrent = function(num) {\n                if (paginationService.isRegistered(paginationId) && isValidPageNumber(num)) {\n                    num = parseInt(num, 10);\n                    paginationService.setCurrentPage(paginationId, num);\n                }\n            };\n\n            /**\n             * Custom \"track by\" function which allows for duplicate \"...\" entries on long lists,\n             * yet fixes the problem of wrongly-highlighted links which happens when using\n             * \"track by $index\" - see https://github.com/michaelbromley/angularUtils/issues/153\n             * @param id\n             * @param index\n             * @returns {string}\n             */\n            scope.tracker = function(id, index) {\n                return id + '_' + index;\n            };\n\n            function goToPage(num) {\n                if (paginationService.isRegistered(paginationId) && isValidPageNumber(num)) {\n                    scope.pages = generatePagesArray(num, paginationService.getCollectionLength(paginationId), paginationService.getItemsPerPage(paginationId), paginationRange);\n                    scope.pagination.current = num;\n                    updateRangeValues();\n\n                    // if a callback has been set, then call it with the page number as an argument\n                    if (scope.onPageChange) {\n                        scope.onPageChange({ newPageNumber : num });\n                    }\n                }\n            }\n\n            function generatePagination() {\n                if (paginationService.isRegistered(paginationId)) {\n                    var page = parseInt(paginationService.getCurrentPage(paginationId)) || 1;\n                    scope.pages = generatePagesArray(page, paginationService.getCollectionLength(paginationId), paginationService.getItemsPerPage(paginationId), paginationRange);\n                    scope.pagination.current = page;\n                    scope.pagination.last = scope.pages[scope.pages.length - 1];\n                    if (scope.pagination.last < scope.pagination.current) {\n                        scope.setCurrent(scope.pagination.last);\n                    } else {\n                        updateRangeValues();\n                    }\n                }\n            }\n\n            /**\n             * This function updates the values (lower, upper, total) of the `scope.range` object, which can be used in the pagination\n             * template to display the current page range, e.g. \"showing 21 - 40 of 144 results\";\n             */\n            function updateRangeValues() {\n                if (paginationService.isRegistered(paginationId)) {\n                    var currentPage = paginationService.getCurrentPage(paginationId),\n                        itemsPerPage = paginationService.getItemsPerPage(paginationId),\n                        totalItems = paginationService.getCollectionLength(paginationId);\n\n                    scope.range.lower = (currentPage - 1) * itemsPerPage + 1;\n                    scope.range.upper = Math.min(currentPage * itemsPerPage, totalItems);\n                    scope.range.total = totalItems;\n                }\n            }\n            function isValidPageNumber(num) {\n                return (numberRegex.test(num) && (0 < num && num <= scope.pagination.last));\n            }\n        }\n\n        /**\n         * Generate an array of page numbers (or the '...' string) which is used in an ng-repeat to generate the\n         * links used in pagination\n         *\n         * @param currentPage\n         * @param rowsPerPage\n         * @param paginationRange\n         * @param collectionLength\n         * @returns {Array}\n         */\n        function generatePagesArray(currentPage, collectionLength, rowsPerPage, paginationRange) {\n            var pages = [];\n            var totalPages = Math.ceil(collectionLength / rowsPerPage);\n            var halfWay = Math.ceil(paginationRange / 2);\n            var position;\n\n            if (currentPage <= halfWay) {\n                position = 'start';\n            } else if (totalPages - halfWay < currentPage) {\n                position = 'end';\n            } else {\n                position = 'middle';\n            }\n\n            var ellipsesNeeded = paginationRange < totalPages;\n            var i = 1;\n            while (i <= totalPages && i <= paginationRange) {\n                var pageNumber = calculatePageNumber(i, currentPage, paginationRange, totalPages);\n\n                var openingEllipsesNeeded = (i === 2 && (position === 'middle' || position === 'end'));\n                var closingEllipsesNeeded = (i === paginationRange - 1 && (position === 'middle' || position === 'start'));\n                if (ellipsesNeeded && (openingEllipsesNeeded || closingEllipsesNeeded)) {\n                    pages.push('...');\n                } else {\n                    pages.push(pageNumber);\n                }\n                i ++;\n            }\n            return pages;\n        }\n\n        /**\n         * Given the position in the sequence of pagination links [i], figure out what page number corresponds to that position.\n         *\n         * @param i\n         * @param currentPage\n         * @param paginationRange\n         * @param totalPages\n         * @returns {*}\n         */\n        function calculatePageNumber(i, currentPage, paginationRange, totalPages) {\n            var halfWay = Math.ceil(paginationRange/2);\n            if (i === paginationRange) {\n                return totalPages;\n            } else if (i === 1) {\n                return i;\n            } else if (paginationRange < totalPages) {\n                if (totalPages - halfWay < currentPage) {\n                    return totalPages - paginationRange + i;\n                } else if (halfWay < currentPage) {\n                    return currentPage - halfWay + i;\n                } else {\n                    return i;\n                }\n            } else {\n                return i;\n            }\n        }\n    }\n\n    /**\n     * This filter slices the collection into pages based on the current page number and number of items per page.\n     * @param paginationService\n     * @returns {Function}\n     */\n    function itemsPerPageFilter(paginationService) {\n\n        return function(collection, itemsPerPage, paginationId) {\n            if (typeof (paginationId) === 'undefined') {\n                paginationId = DEFAULT_ID;\n            }\n            if (!paginationService.isRegistered(paginationId)) {\n                throw 'pagination directive: the itemsPerPage id argument (id: ' + paginationId + ') does not match a registered pagination-id.';\n            }\n            var end;\n            var start;\n            if (angular.isObject(collection)) {\n                itemsPerPage = parseInt(itemsPerPage) || 9999999999;\n                if (paginationService.isAsyncMode(paginationId)) {\n                    start = 0;\n                } else {\n                    start = (paginationService.getCurrentPage(paginationId) - 1) * itemsPerPage;\n                }\n                end = start + itemsPerPage;\n                paginationService.setItemsPerPage(paginationId, itemsPerPage);\n\n                if (collection instanceof Array) {\n                    // the array just needs to be sliced\n                    return collection.slice(start, end);\n                } else {\n                    // in the case of an object, we need to get an array of keys, slice that, then map back to\n                    // the original object.\n                    var slicedObject = {};\n                    angular.forEach(keys(collection).slice(start, end), function(key) {\n                        slicedObject[key] = collection[key];\n                    });\n                    return slicedObject;\n                }\n            } else {\n                return collection;\n            }\n        };\n    }\n\n    /**\n     * Shim for the Object.keys() method which does not exist in IE < 9\n     * @param obj\n     * @returns {Array}\n     */\n    function keys(obj) {\n        if (!Object.keys) {\n            var objKeys = [];\n            for (var i in obj) {\n                if (obj.hasOwnProperty(i)) {\n                    objKeys.push(i);\n                }\n            }\n            return objKeys;\n        } else {\n            return Object.keys(obj);\n        }\n    }\n\n    /**\n     * This service allows the various parts of the module to communicate and stay in sync.\n     */\n    function paginationService() {\n\n        var instances = {};\n        var lastRegisteredInstance;\n\n        this.registerInstance = function(instanceId) {\n            if (typeof instances[instanceId] === 'undefined') {\n                instances[instanceId] = {\n                    asyncMode: false\n                };\n                lastRegisteredInstance = instanceId;\n            }\n        };\n\n        this.isRegistered = function(instanceId) {\n            return (typeof instances[instanceId] !== 'undefined');\n        };\n\n        this.getLastInstanceId = function() {\n            return lastRegisteredInstance;\n        };\n\n        this.setCurrentPageParser = function(instanceId, val, scope) {\n            instances[instanceId].currentPageParser = val;\n            instances[instanceId].context = scope;\n        };\n        this.setCurrentPage = function(instanceId, val) {\n            instances[instanceId].currentPageParser.assign(instances[instanceId].context, val);\n        };\n        this.getCurrentPage = function(instanceId) {\n            var parser = instances[instanceId].currentPageParser;\n            return parser ? parser(instances[instanceId].context) : 1;\n        };\n\n        this.setItemsPerPage = function(instanceId, val) {\n            instances[instanceId].itemsPerPage = val;\n        };\n        this.getItemsPerPage = function(instanceId) {\n            return instances[instanceId].itemsPerPage;\n        };\n\n        this.setCollectionLength = function(instanceId, val) {\n            instances[instanceId].collectionLength = val;\n        };\n        this.getCollectionLength = function(instanceId) {\n            return instances[instanceId].collectionLength;\n        };\n\n        this.setAsyncModeTrue = function(instanceId) {\n            instances[instanceId].asyncMode = true;\n        };\n\n        this.isAsyncMode = function(instanceId) {\n            return instances[instanceId].asyncMode;\n        };\n    }\n\n    /**\n     * This provider allows global configuration of the template path used by the dir-pagination-controls directive.\n     */\n    function paginationTemplateProvider() {\n\n        var templatePath = 'angularUtils.directives.dirPagination.template';\n\n        this.setPath = function(path) {\n            templatePath = path;\n        };\n\n        this.$get = function() {\n            return {\n                getPath: function() {\n                    return templatePath;\n                }\n            };\n        };\n    }\n})();\n"]}