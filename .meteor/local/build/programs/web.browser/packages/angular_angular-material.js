//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

/* Imports */
var Meteor = Package.meteor.Meteor;

(function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/angular_angular-material/bower_components/angular-material/angular-material.js                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/*!                                                                                                                    // 1
 * Angular Material Design                                                                                             // 2
 * https://github.com/angular/material                                                                                 // 3
 * @license MIT                                                                                                        // 4
 * v1.0.6                                                                                                              // 5
 */                                                                                                                    // 6
(function( window, angular, undefined ){                                                                               // 7
"use strict";                                                                                                          // 8
                                                                                                                       // 9
(function(){                                                                                                           // 10
"use strict";                                                                                                          // 11
                                                                                                                       // 12
angular.module('ngMaterial', ["ng","ngAnimate","ngAria","material.core","material.core.gestures","material.core.layout","material.core.theming.palette","material.core.theming","material.core.animate","material.components.autocomplete","material.components.backdrop","material.components.button","material.components.card","material.components.checkbox","material.components.bottomSheet","material.components.chips","material.components.dialog","material.components.divider","material.components.datepicker","material.components.content","material.components.fabActions","material.components.fabShared","material.components.fabSpeedDial","material.components.fabToolbar","material.components.gridList","material.components.fabTrigger","material.components.icon","material.components.input","material.components.menuBar","material.components.list","material.components.menu","material.components.progressCircular","material.components.progressLinear","material.components.radioButton","material.components.select","material.components.showHide","material.components.sidenav","material.components.slider","material.components.sticky","material.components.subheader","material.components.swipe","material.components.switch","material.components.toast","material.components.tabs","material.components.toolbar","material.components.tooltip","material.components.virtualRepeat","material.components.whiteframe"]);
})();                                                                                                                  // 14
(function(){                                                                                                           // 15
"use strict";                                                                                                          // 16
                                                                                                                       // 17
/**                                                                                                                    // 18
 * Initialization function that validates environment                                                                  // 19
 * requirements.                                                                                                       // 20
 */                                                                                                                    // 21
angular                                                                                                                // 22
  .module('material.core', [                                                                                           // 23
    'ngAnimate',                                                                                                       // 24
    'material.core.animate',                                                                                           // 25
    'material.core.layout',                                                                                            // 26
    'material.core.gestures',                                                                                          // 27
    'material.core.theming'                                                                                            // 28
  ])                                                                                                                   // 29
  .config(MdCoreConfigure)                                                                                             // 30
  .run(DetectNgTouch);                                                                                                 // 31
                                                                                                                       // 32
                                                                                                                       // 33
/**                                                                                                                    // 34
 * Detect if the ng-Touch module is also being used.                                                                   // 35
 * Warn if detected.                                                                                                   // 36
 */                                                                                                                    // 37
function DetectNgTouch($log, $injector) {                                                                              // 38
  if ( $injector.has('$swipe') ) {                                                                                     // 39
    var msg = "" +                                                                                                     // 40
      "You are using the ngTouch module. \n" +                                                                         // 41
      "Angular Material already has mobile click, tap, and swipe support... \n" +                                      // 42
      "ngTouch is not supported with Angular Material!";                                                               // 43
    $log.warn(msg);                                                                                                    // 44
  }                                                                                                                    // 45
}                                                                                                                      // 46
DetectNgTouch.$inject = ["$log", "$injector"];                                                                         // 47
                                                                                                                       // 48
                                                                                                                       // 49
function MdCoreConfigure($provide, $mdThemingProvider) {                                                               // 50
                                                                                                                       // 51
  $provide.decorator('$$rAF', ["$delegate", rAFDecorator]);                                                            // 52
                                                                                                                       // 53
  $mdThemingProvider.theme('default')                                                                                  // 54
    .primaryPalette('indigo')                                                                                          // 55
    .accentPalette('pink')                                                                                             // 56
    .warnPalette('deep-orange')                                                                                        // 57
    .backgroundPalette('grey');                                                                                        // 58
}                                                                                                                      // 59
MdCoreConfigure.$inject = ["$provide", "$mdThemingProvider"];                                                          // 60
                                                                                                                       // 61
function rAFDecorator($delegate) {                                                                                     // 62
  /**                                                                                                                  // 63
   * Use this to throttle events that come in often.                                                                   // 64
   * The throttled function will always use the *last* invocation before the                                           // 65
   * coming frame.                                                                                                     // 66
   *                                                                                                                   // 67
   * For example, window resize events that fire many times a second:                                                  // 68
   * If we set to use an raf-throttled callback on window resize, then                                                 // 69
   * our callback will only be fired once per frame, with the last resize                                              // 70
   * event that happened before that frame.                                                                            // 71
   *                                                                                                                   // 72
   * @param {function} callback function to debounce                                                                   // 73
   */                                                                                                                  // 74
  $delegate.throttle = function(cb) {                                                                                  // 75
    var queuedArgs, alreadyQueued, queueCb, context;                                                                   // 76
    return function debounced() {                                                                                      // 77
      queuedArgs = arguments;                                                                                          // 78
      context = this;                                                                                                  // 79
      queueCb = cb;                                                                                                    // 80
      if (!alreadyQueued) {                                                                                            // 81
        alreadyQueued = true;                                                                                          // 82
        $delegate(function() {                                                                                         // 83
          queueCb.apply(context, Array.prototype.slice.call(queuedArgs));                                              // 84
          alreadyQueued = false;                                                                                       // 85
        });                                                                                                            // 86
      }                                                                                                                // 87
    };                                                                                                                 // 88
  };                                                                                                                   // 89
  return $delegate;                                                                                                    // 90
}                                                                                                                      // 91
                                                                                                                       // 92
})();                                                                                                                  // 93
(function(){                                                                                                           // 94
"use strict";                                                                                                          // 95
                                                                                                                       // 96
angular.module('material.core')                                                                                        // 97
  .directive('mdAutofocus', MdAutofocusDirective)                                                                      // 98
                                                                                                                       // 99
  // Support the deprecated md-auto-focus and md-sidenav-focus as well                                                 // 100
  .directive('mdAutoFocus', MdAutofocusDirective)                                                                      // 101
  .directive('mdSidenavFocus', MdAutofocusDirective);                                                                  // 102
                                                                                                                       // 103
/**                                                                                                                    // 104
 * @ngdoc directive                                                                                                    // 105
 * @name mdAutofocus                                                                                                   // 106
 * @module material.core.util                                                                                          // 107
 *                                                                                                                     // 108
 * @description                                                                                                        // 109
 *                                                                                                                     // 110
 * `[md-autofocus]` provides an optional way to identify the focused element when a `$mdDialog`,                       // 111
 * `$mdBottomSheet`, or `$mdSidenav` opens or upon page load for input-like elements.                                  // 112
 *                                                                                                                     // 113
 * When one of these opens, it will find the first nested element with the `[md-autofocus]`                            // 114
 * attribute directive and optional expression. An expression may be specified as the directive                        // 115
 * value to enable conditional activation of the autofocus.                                                            // 116
 *                                                                                                                     // 117
 * @usage                                                                                                              // 118
 *                                                                                                                     // 119
 * ### Dialog                                                                                                          // 120
 * <hljs lang="html">                                                                                                  // 121
 * <md-dialog>                                                                                                         // 122
 *   <form>                                                                                                            // 123
 *     <md-input-container>                                                                                            // 124
 *       <label for="testInput">Label</label>                                                                          // 125
 *       <input id="testInput" type="text" md-autofocus>                                                               // 126
 *     </md-input-container>                                                                                           // 127
 *   </form>                                                                                                           // 128
 * </md-dialog>                                                                                                        // 129
 * </hljs>                                                                                                             // 130
 *                                                                                                                     // 131
 * ### Bottomsheet                                                                                                     // 132
 * <hljs lang="html">                                                                                                  // 133
 * <md-bottom-sheet class="md-list md-has-header">                                                                     // 134
 *  <md-subheader>Comment Actions</md-subheader>                                                                       // 135
 *  <md-list>                                                                                                          // 136
 *    <md-list-item ng-repeat="item in items">                                                                         // 137
 *                                                                                                                     // 138
 *      <md-button md-autofocus="$index == 2">                                                                         // 139
 *        <md-icon md-svg-src="{{item.icon}}"></md-icon>                                                               // 140
 *        <span class="md-inline-list-icon-label">{{ item.name }}</span>                                               // 141
 *      </md-button>                                                                                                   // 142
 *                                                                                                                     // 143
 *    </md-list-item>                                                                                                  // 144
 *  </md-list>                                                                                                         // 145
 * </md-bottom-sheet>                                                                                                  // 146
 * </hljs>                                                                                                             // 147
 *                                                                                                                     // 148
 * ### Autocomplete                                                                                                    // 149
 * <hljs lang="html">                                                                                                  // 150
 *   <md-autocomplete                                                                                                  // 151
 *       md-autofocus                                                                                                  // 152
 *       md-selected-item="selectedItem"                                                                               // 153
 *       md-search-text="searchText"                                                                                   // 154
 *       md-items="item in getMatches(searchText)"                                                                     // 155
 *       md-item-text="item.display">                                                                                  // 156
 *     <span md-highlight-text="searchText">{{item.display}}</span>                                                    // 157
 *   </md-autocomplete>                                                                                                // 158
 * </hljs>                                                                                                             // 159
 *                                                                                                                     // 160
 * ### Sidenav                                                                                                         // 161
 * <hljs lang="html">                                                                                                  // 162
 * <div layout="row" ng-controller="MyController">                                                                     // 163
 *   <md-sidenav md-component-id="left" class="md-sidenav-left">                                                       // 164
 *     Left Nav!                                                                                                       // 165
 *   </md-sidenav>                                                                                                     // 166
 *                                                                                                                     // 167
 *   <md-content>                                                                                                      // 168
 *     Center Content                                                                                                  // 169
 *     <md-button ng-click="openLeftMenu()">                                                                           // 170
 *       Open Left Menu                                                                                                // 171
 *     </md-button>                                                                                                    // 172
 *   </md-content>                                                                                                     // 173
 *                                                                                                                     // 174
 *   <md-sidenav md-component-id="right"                                                                               // 175
 *     md-is-locked-open="$mdMedia('min-width: 333px')"                                                                // 176
 *     class="md-sidenav-right">                                                                                       // 177
 *     <form>                                                                                                          // 178
 *       <md-input-container>                                                                                          // 179
 *         <label for="testInput">Test input</label>                                                                   // 180
 *         <input id="testInput" type="text"                                                                           // 181
 *                ng-model="data" md-autofocus>                                                                        // 182
 *       </md-input-container>                                                                                         // 183
 *     </form>                                                                                                         // 184
 *   </md-sidenav>                                                                                                     // 185
 * </div>                                                                                                              // 186
 * </hljs>                                                                                                             // 187
 **/                                                                                                                   // 188
function MdAutofocusDirective() {                                                                                      // 189
  return {                                                                                                             // 190
    restrict: 'A',                                                                                                     // 191
                                                                                                                       // 192
    link: postLink                                                                                                     // 193
  }                                                                                                                    // 194
}                                                                                                                      // 195
                                                                                                                       // 196
function postLink(scope, element, attrs) {                                                                             // 197
  var attr = attrs.mdAutoFocus || attrs.mdAutofocus || attrs.mdSidenavFocus;                                           // 198
                                                                                                                       // 199
  // Setup a watcher on the proper attribute to update a class we can check for in $mdUtil                             // 200
  scope.$watch(attr, function(canAutofocus) {                                                                          // 201
    element.toggleClass('_md-autofocus', canAutofocus);                                                                // 202
  });                                                                                                                  // 203
}                                                                                                                      // 204
                                                                                                                       // 205
})();                                                                                                                  // 206
(function(){                                                                                                           // 207
"use strict";                                                                                                          // 208
                                                                                                                       // 209
angular.module('material.core')                                                                                        // 210
.factory('$mdConstant', MdConstantFactory);                                                                            // 211
                                                                                                                       // 212
/**                                                                                                                    // 213
 * Factory function that creates the grab-bag $mdConstant service.                                                     // 214
 * @ngInject                                                                                                           // 215
 */                                                                                                                    // 216
function MdConstantFactory($sniffer) {                                                                                 // 217
                                                                                                                       // 218
  var webkit = /webkit/i.test($sniffer.vendorPrefix);                                                                  // 219
  function vendorProperty(name) {                                                                                      // 220
    return webkit ?  ('webkit' + name.charAt(0).toUpperCase() + name.substring(1)) : name;                             // 221
  }                                                                                                                    // 222
                                                                                                                       // 223
  return {                                                                                                             // 224
    KEY_CODE: {                                                                                                        // 225
      COMMA: 188,                                                                                                      // 226
      SEMICOLON : 186,                                                                                                 // 227
      ENTER: 13,                                                                                                       // 228
      ESCAPE: 27,                                                                                                      // 229
      SPACE: 32,                                                                                                       // 230
      PAGE_UP: 33,                                                                                                     // 231
      PAGE_DOWN: 34,                                                                                                   // 232
      END: 35,                                                                                                         // 233
      HOME: 36,                                                                                                        // 234
      LEFT_ARROW : 37,                                                                                                 // 235
      UP_ARROW : 38,                                                                                                   // 236
      RIGHT_ARROW : 39,                                                                                                // 237
      DOWN_ARROW : 40,                                                                                                 // 238
      TAB : 9,                                                                                                         // 239
      BACKSPACE: 8,                                                                                                    // 240
      DELETE: 46                                                                                                       // 241
    },                                                                                                                 // 242
    CSS: {                                                                                                             // 243
      /* Constants */                                                                                                  // 244
      TRANSITIONEND: 'transitionend' + (webkit ? ' webkitTransitionEnd' : ''),                                         // 245
      ANIMATIONEND: 'animationend' + (webkit ? ' webkitAnimationEnd' : ''),                                            // 246
                                                                                                                       // 247
      TRANSFORM: vendorProperty('transform'),                                                                          // 248
      TRANSFORM_ORIGIN: vendorProperty('transformOrigin'),                                                             // 249
      TRANSITION: vendorProperty('transition'),                                                                        // 250
      TRANSITION_DURATION: vendorProperty('transitionDuration'),                                                       // 251
      ANIMATION_PLAY_STATE: vendorProperty('animationPlayState'),                                                      // 252
      ANIMATION_DURATION: vendorProperty('animationDuration'),                                                         // 253
      ANIMATION_NAME: vendorProperty('animationName'),                                                                 // 254
      ANIMATION_TIMING: vendorProperty('animationTimingFunction'),                                                     // 255
      ANIMATION_DIRECTION: vendorProperty('animationDirection')                                                        // 256
    },                                                                                                                 // 257
    /**                                                                                                                // 258
     * As defined in core/style/variables.scss                                                                         // 259
     *                                                                                                                 // 260
     * $layout-breakpoint-xs:     600px !default;                                                                      // 261
     * $layout-breakpoint-sm:     960px !default;                                                                      // 262
     * $layout-breakpoint-md:     1280px !default;                                                                     // 263
     * $layout-breakpoint-lg:     1920px !default;                                                                     // 264
     *                                                                                                                 // 265
     */                                                                                                                // 266
    MEDIA: {                                                                                                           // 267
      'xs'    : '(max-width: 599px)'                         ,                                                         // 268
      'gt-xs' : '(min-width: 600px)'                         ,                                                         // 269
      'sm'    : '(min-width: 600px) and (max-width: 959px)'  ,                                                         // 270
      'gt-sm' : '(min-width: 960px)'                         ,                                                         // 271
      'md'    : '(min-width: 960px) and (max-width: 1279px)' ,                                                         // 272
      'gt-md' : '(min-width: 1280px)'                        ,                                                         // 273
      'lg'    : '(min-width: 1280px) and (max-width: 1919px)',                                                         // 274
      'gt-lg' : '(min-width: 1920px)'                        ,                                                         // 275
      'xl'    : '(min-width: 1920px)'                        ,                                                         // 276
      'print' : 'print'                                                                                                // 277
    },                                                                                                                 // 278
    MEDIA_PRIORITY: [                                                                                                  // 279
      'xl',                                                                                                            // 280
      'gt-lg',                                                                                                         // 281
      'lg',                                                                                                            // 282
      'gt-md',                                                                                                         // 283
      'md',                                                                                                            // 284
      'gt-sm',                                                                                                         // 285
      'sm',                                                                                                            // 286
      'gt-xs',                                                                                                         // 287
      'xs',                                                                                                            // 288
      'print'                                                                                                          // 289
    ]                                                                                                                  // 290
  };                                                                                                                   // 291
}                                                                                                                      // 292
MdConstantFactory.$inject = ["$sniffer"];                                                                              // 293
                                                                                                                       // 294
})();                                                                                                                  // 295
(function(){                                                                                                           // 296
"use strict";                                                                                                          // 297
                                                                                                                       // 298
  angular                                                                                                              // 299
    .module('material.core')                                                                                           // 300
    .config( ["$provide", function($provide){                                                                          // 301
       $provide.decorator('$mdUtil', ['$delegate', function ($delegate){                                               // 302
           /**                                                                                                         // 303
            * Inject the iterator facade to easily support iteration and accessors                                     // 304
            * @see iterator below                                                                                      // 305
            */                                                                                                         // 306
           $delegate.iterator = MdIterator;                                                                            // 307
                                                                                                                       // 308
           return $delegate;                                                                                           // 309
         }                                                                                                             // 310
       ]);                                                                                                             // 311
     }]);                                                                                                              // 312
                                                                                                                       // 313
  /**                                                                                                                  // 314
   * iterator is a list facade to easily support iteration and accessors                                               // 315
   *                                                                                                                   // 316
   * @param items Array list which this iterator will enumerate                                                        // 317
   * @param reloop Boolean enables iterator to consider the list as an endless reloop                                  // 318
   */                                                                                                                  // 319
  function MdIterator(items, reloop) {                                                                                 // 320
    var trueFn = function() { return true; };                                                                          // 321
                                                                                                                       // 322
    if (items && !angular.isArray(items)) {                                                                            // 323
      items = Array.prototype.slice.call(items);                                                                       // 324
    }                                                                                                                  // 325
                                                                                                                       // 326
    reloop = !!reloop;                                                                                                 // 327
    var _items = items || [ ];                                                                                         // 328
                                                                                                                       // 329
    // Published API                                                                                                   // 330
    return {                                                                                                           // 331
      items: getItems,                                                                                                 // 332
      count: count,                                                                                                    // 333
                                                                                                                       // 334
      inRange: inRange,                                                                                                // 335
      contains: contains,                                                                                              // 336
      indexOf: indexOf,                                                                                                // 337
      itemAt: itemAt,                                                                                                  // 338
                                                                                                                       // 339
      findBy: findBy,                                                                                                  // 340
                                                                                                                       // 341
      add: add,                                                                                                        // 342
      remove: remove,                                                                                                  // 343
                                                                                                                       // 344
      first: first,                                                                                                    // 345
      last: last,                                                                                                      // 346
      next: angular.bind(null, findSubsequentItem, false),                                                             // 347
      previous: angular.bind(null, findSubsequentItem, true),                                                          // 348
                                                                                                                       // 349
      hasPrevious: hasPrevious,                                                                                        // 350
      hasNext: hasNext                                                                                                 // 351
                                                                                                                       // 352
    };                                                                                                                 // 353
                                                                                                                       // 354
    /**                                                                                                                // 355
     * Publish copy of the enumerable set                                                                              // 356
     * @returns {Array|*}                                                                                              // 357
     */                                                                                                                // 358
    function getItems() {                                                                                              // 359
      return [].concat(_items);                                                                                        // 360
    }                                                                                                                  // 361
                                                                                                                       // 362
    /**                                                                                                                // 363
     * Determine length of the list                                                                                    // 364
     * @returns {Array.length|*|number}                                                                                // 365
     */                                                                                                                // 366
    function count() {                                                                                                 // 367
      return _items.length;                                                                                            // 368
    }                                                                                                                  // 369
                                                                                                                       // 370
    /**                                                                                                                // 371
     * Is the index specified valid                                                                                    // 372
     * @param index                                                                                                    // 373
     * @returns {Array.length|*|number|boolean}                                                                        // 374
     */                                                                                                                // 375
    function inRange(index) {                                                                                          // 376
      return _items.length && ( index > -1 ) && (index < _items.length );                                              // 377
    }                                                                                                                  // 378
                                                                                                                       // 379
    /**                                                                                                                // 380
     * Can the iterator proceed to the next item in the list; relative to                                              // 381
     * the specified item.                                                                                             // 382
     *                                                                                                                 // 383
     * @param item                                                                                                     // 384
     * @returns {Array.length|*|number|boolean}                                                                        // 385
     */                                                                                                                // 386
    function hasNext(item) {                                                                                           // 387
      return item ? inRange(indexOf(item) + 1) : false;                                                                // 388
    }                                                                                                                  // 389
                                                                                                                       // 390
    /**                                                                                                                // 391
     * Can the iterator proceed to the previous item in the list; relative to                                          // 392
     * the specified item.                                                                                             // 393
     *                                                                                                                 // 394
     * @param item                                                                                                     // 395
     * @returns {Array.length|*|number|boolean}                                                                        // 396
     */                                                                                                                // 397
    function hasPrevious(item) {                                                                                       // 398
      return item ? inRange(indexOf(item) - 1) : false;                                                                // 399
    }                                                                                                                  // 400
                                                                                                                       // 401
    /**                                                                                                                // 402
     * Get item at specified index/position                                                                            // 403
     * @param index                                                                                                    // 404
     * @returns {*}                                                                                                    // 405
     */                                                                                                                // 406
    function itemAt(index) {                                                                                           // 407
      return inRange(index) ? _items[index] : null;                                                                    // 408
    }                                                                                                                  // 409
                                                                                                                       // 410
    /**                                                                                                                // 411
     * Find all elements matching the key/value pair                                                                   // 412
     * otherwise return null                                                                                           // 413
     *                                                                                                                 // 414
     * @param val                                                                                                      // 415
     * @param key                                                                                                      // 416
     *                                                                                                                 // 417
     * @return array                                                                                                   // 418
     */                                                                                                                // 419
    function findBy(key, val) {                                                                                        // 420
      return _items.filter(function(item) {                                                                            // 421
        return item[key] === val;                                                                                      // 422
      });                                                                                                              // 423
    }                                                                                                                  // 424
                                                                                                                       // 425
    /**                                                                                                                // 426
     * Add item to list                                                                                                // 427
     * @param item                                                                                                     // 428
     * @param index                                                                                                    // 429
     * @returns {*}                                                                                                    // 430
     */                                                                                                                // 431
    function add(item, index) {                                                                                        // 432
      if ( !item ) return -1;                                                                                          // 433
                                                                                                                       // 434
      if (!angular.isNumber(index)) {                                                                                  // 435
        index = _items.length;                                                                                         // 436
      }                                                                                                                // 437
                                                                                                                       // 438
      _items.splice(index, 0, item);                                                                                   // 439
                                                                                                                       // 440
      return indexOf(item);                                                                                            // 441
    }                                                                                                                  // 442
                                                                                                                       // 443
    /**                                                                                                                // 444
     * Remove item from list...                                                                                        // 445
     * @param item                                                                                                     // 446
     */                                                                                                                // 447
    function remove(item) {                                                                                            // 448
      if ( contains(item) ){                                                                                           // 449
        _items.splice(indexOf(item), 1);                                                                               // 450
      }                                                                                                                // 451
    }                                                                                                                  // 452
                                                                                                                       // 453
    /**                                                                                                                // 454
     * Get the zero-based index of the target item                                                                     // 455
     * @param item                                                                                                     // 456
     * @returns {*}                                                                                                    // 457
     */                                                                                                                // 458
    function indexOf(item) {                                                                                           // 459
      return _items.indexOf(item);                                                                                     // 460
    }                                                                                                                  // 461
                                                                                                                       // 462
    /**                                                                                                                // 463
     * Boolean existence check                                                                                         // 464
     * @param item                                                                                                     // 465
     * @returns {boolean}                                                                                              // 466
     */                                                                                                                // 467
    function contains(item) {                                                                                          // 468
      return item && (indexOf(item) > -1);                                                                             // 469
    }                                                                                                                  // 470
                                                                                                                       // 471
    /**                                                                                                                // 472
     * Return first item in the list                                                                                   // 473
     * @returns {*}                                                                                                    // 474
     */                                                                                                                // 475
    function first() {                                                                                                 // 476
      return _items.length ? _items[0] : null;                                                                         // 477
    }                                                                                                                  // 478
                                                                                                                       // 479
    /**                                                                                                                // 480
     * Return last item in the list...                                                                                 // 481
     * @returns {*}                                                                                                    // 482
     */                                                                                                                // 483
    function last() {                                                                                                  // 484
      return _items.length ? _items[_items.length - 1] : null;                                                         // 485
    }                                                                                                                  // 486
                                                                                                                       // 487
    /**                                                                                                                // 488
     * Find the next item. If reloop is true and at the end of the list, it will go back to the                        // 489
     * first item. If given, the `validate` callback will be used to determine whether the next item                   // 490
     * is valid. If not valid, it will try to find the next item again.                                                // 491
     *                                                                                                                 // 492
     * @param {boolean} backwards Specifies the direction of searching (forwards/backwards)                            // 493
     * @param {*} item The item whose subsequent item we are looking for                                               // 494
     * @param {Function=} validate The `validate` function                                                             // 495
     * @param {integer=} limit The recursion limit                                                                     // 496
     *                                                                                                                 // 497
     * @returns {*} The subsequent item or null                                                                        // 498
     */                                                                                                                // 499
    function findSubsequentItem(backwards, item, validate, limit) {                                                    // 500
      validate = validate || trueFn;                                                                                   // 501
                                                                                                                       // 502
      var curIndex = indexOf(item);                                                                                    // 503
      while (true) {                                                                                                   // 504
        if (!inRange(curIndex)) return null;                                                                           // 505
                                                                                                                       // 506
        var nextIndex = curIndex + (backwards ? -1 : 1);                                                               // 507
        var foundItem = null;                                                                                          // 508
        if (inRange(nextIndex)) {                                                                                      // 509
          foundItem = _items[nextIndex];                                                                               // 510
        } else if (reloop) {                                                                                           // 511
          foundItem = backwards ? last() : first();                                                                    // 512
          nextIndex = indexOf(foundItem);                                                                              // 513
        }                                                                                                              // 514
                                                                                                                       // 515
        if ((foundItem === null) || (nextIndex === limit)) return null;                                                // 516
        if (validate(foundItem)) return foundItem;                                                                     // 517
                                                                                                                       // 518
        if (angular.isUndefined(limit)) limit = nextIndex;                                                             // 519
                                                                                                                       // 520
        curIndex = nextIndex;                                                                                          // 521
      }                                                                                                                // 522
    }                                                                                                                  // 523
  }                                                                                                                    // 524
                                                                                                                       // 525
                                                                                                                       // 526
})();                                                                                                                  // 527
(function(){                                                                                                           // 528
"use strict";                                                                                                          // 529
                                                                                                                       // 530
angular.module('material.core')                                                                                        // 531
.factory('$mdMedia', mdMediaFactory);                                                                                  // 532
                                                                                                                       // 533
/**                                                                                                                    // 534
 * @ngdoc service                                                                                                      // 535
 * @name $mdMedia                                                                                                      // 536
 * @module material.core                                                                                               // 537
 *                                                                                                                     // 538
 * @description                                                                                                        // 539
 * `$mdMedia` is used to evaluate whether a given media query is true or false given the                               // 540
 * current device's screen / window size. The media query will be re-evaluated on resize, allowing                     // 541
 * you to register a watch.                                                                                            // 542
 *                                                                                                                     // 543
 * `$mdMedia` also has pre-programmed support for media queries that match the layout breakpoints:                     // 544
 *                                                                                                                     // 545
 *  <table class="md-api-table">                                                                                       // 546
 *    <thead>                                                                                                          // 547
 *    <tr>                                                                                                             // 548
 *      <th>Breakpoint</th>                                                                                            // 549
 *      <th>mediaQuery</th>                                                                                            // 550
 *    </tr>                                                                                                            // 551
 *    </thead>                                                                                                         // 552
 *    <tbody>                                                                                                          // 553
 *    <tr>                                                                                                             // 554
 *      <td>xs</td>                                                                                                    // 555
 *      <td>(max-width: 599px)</td>                                                                                    // 556
 *    </tr>                                                                                                            // 557
 *    <tr>                                                                                                             // 558
 *      <td>gt-xs</td>                                                                                                 // 559
 *      <td>(min-width: 600px)</td>                                                                                    // 560
 *    </tr>                                                                                                            // 561
 *    <tr>                                                                                                             // 562
 *      <td>sm</td>                                                                                                    // 563
 *      <td>(min-width: 600px) and (max-width: 959px)</td>                                                             // 564
 *    </tr>                                                                                                            // 565
 *    <tr>                                                                                                             // 566
 *      <td>gt-sm</td>                                                                                                 // 567
 *      <td>(min-width: 960px)</td>                                                                                    // 568
 *    </tr>                                                                                                            // 569
 *    <tr>                                                                                                             // 570
 *      <td>md</td>                                                                                                    // 571
 *      <td>(min-width: 960px) and (max-width: 1279px)</td>                                                            // 572
 *    </tr>                                                                                                            // 573
 *    <tr>                                                                                                             // 574
 *      <td>gt-md</td>                                                                                                 // 575
 *      <td>(min-width: 1280px)</td>                                                                                   // 576
 *    </tr>                                                                                                            // 577
 *    <tr>                                                                                                             // 578
 *      <td>lg</td>                                                                                                    // 579
 *      <td>(min-width: 1280px) and (max-width: 1919px)</td>                                                           // 580
 *    </tr>                                                                                                            // 581
 *    <tr>                                                                                                             // 582
 *      <td>gt-lg</td>                                                                                                 // 583
 *      <td>(min-width: 1920px)</td>                                                                                   // 584
 *    </tr>                                                                                                            // 585
 *    <tr>                                                                                                             // 586
 *      <td>xl</td>                                                                                                    // 587
 *      <td>(min-width: 1920px)</td>                                                                                   // 588
 *    </tr>                                                                                                            // 589
 *    <tr>                                                                                                             // 590
 *      <td>print</td>                                                                                                 // 591
 *      <td>print</td>                                                                                                 // 592
 *    </tr>                                                                                                            // 593
 *    </tbody>                                                                                                         // 594
 *  </table>                                                                                                           // 595
 *                                                                                                                     // 596
 *  See Material Design's <a href="https://www.google.com/design/spec/layout/adaptive-ui.html">Layout - Adaptive UI</a> for more details.
 *                                                                                                                     // 598
 *  <a href="https://www.google.com/design/spec/layout/adaptive-ui.html">                                              // 599
 *  <img src="https://material-design.storage.googleapis.com/publish/material_v_4/material_ext_publish/0B8olV15J7abPSGFxemFiQVRtb1k/layout_adaptive_breakpoints_01.png" width="100%" height="100%"></img>
 *  </a>                                                                                                               // 601
 *                                                                                                                     // 602
 * @returns {boolean} a boolean representing whether or not the given media query is true or false.                    // 603
 *                                                                                                                     // 604
 * @usage                                                                                                              // 605
 * <hljs lang="js">                                                                                                    // 606
 * app.controller('MyController', function($mdMedia, $scope) {                                                         // 607
 *   $scope.$watch(function() { return $mdMedia('lg'); }, function(big) {                                              // 608
 *     $scope.bigScreen = big;                                                                                         // 609
 *   });                                                                                                               // 610
 *                                                                                                                     // 611
 *   $scope.screenIsSmall = $mdMedia('sm');                                                                            // 612
 *   $scope.customQuery = $mdMedia('(min-width: 1234px)');                                                             // 613
 *   $scope.anotherCustom = $mdMedia('max-width: 300px');                                                              // 614
 * });                                                                                                                 // 615
 * </hljs>                                                                                                             // 616
 */                                                                                                                    // 617
                                                                                                                       // 618
function mdMediaFactory($mdConstant, $rootScope, $window) {                                                            // 619
  var queries = {};                                                                                                    // 620
  var mqls = {};                                                                                                       // 621
  var results = {};                                                                                                    // 622
  var normalizeCache = {};                                                                                             // 623
                                                                                                                       // 624
  $mdMedia.getResponsiveAttribute = getResponsiveAttribute;                                                            // 625
  $mdMedia.getQuery = getQuery;                                                                                        // 626
  $mdMedia.watchResponsiveAttributes = watchResponsiveAttributes;                                                      // 627
                                                                                                                       // 628
  return $mdMedia;                                                                                                     // 629
                                                                                                                       // 630
  function $mdMedia(query) {                                                                                           // 631
    var validated = queries[query];                                                                                    // 632
    if (angular.isUndefined(validated)) {                                                                              // 633
      validated = queries[query] = validate(query);                                                                    // 634
    }                                                                                                                  // 635
                                                                                                                       // 636
    var result = results[validated];                                                                                   // 637
    if (angular.isUndefined(result)) {                                                                                 // 638
      result = add(validated);                                                                                         // 639
    }                                                                                                                  // 640
                                                                                                                       // 641
    return result;                                                                                                     // 642
  }                                                                                                                    // 643
                                                                                                                       // 644
  function validate(query) {                                                                                           // 645
    return $mdConstant.MEDIA[query] ||                                                                                 // 646
           ((query.charAt(0) !== '(') ? ('(' + query + ')') : query);                                                  // 647
  }                                                                                                                    // 648
                                                                                                                       // 649
  function add(query) {                                                                                                // 650
    var result = mqls[query];                                                                                          // 651
    if ( !result ) {                                                                                                   // 652
      result = mqls[query] = $window.matchMedia(query);                                                                // 653
    }                                                                                                                  // 654
                                                                                                                       // 655
    result.addListener(onQueryChange);                                                                                 // 656
    return (results[result.media] = !!result.matches);                                                                 // 657
  }                                                                                                                    // 658
                                                                                                                       // 659
  function onQueryChange(query) {                                                                                      // 660
    $rootScope.$evalAsync(function() {                                                                                 // 661
      results[query.media] = !!query.matches;                                                                          // 662
    });                                                                                                                // 663
  }                                                                                                                    // 664
                                                                                                                       // 665
  function getQuery(name) {                                                                                            // 666
    return mqls[name];                                                                                                 // 667
  }                                                                                                                    // 668
                                                                                                                       // 669
  function getResponsiveAttribute(attrs, attrName) {                                                                   // 670
    for (var i = 0; i < $mdConstant.MEDIA_PRIORITY.length; i++) {                                                      // 671
      var mediaName = $mdConstant.MEDIA_PRIORITY[i];                                                                   // 672
      if (!mqls[queries[mediaName]].matches) {                                                                         // 673
        continue;                                                                                                      // 674
      }                                                                                                                // 675
                                                                                                                       // 676
      var normalizedName = getNormalizedName(attrs, attrName + '-' + mediaName);                                       // 677
      if (attrs[normalizedName]) {                                                                                     // 678
        return attrs[normalizedName];                                                                                  // 679
      }                                                                                                                // 680
    }                                                                                                                  // 681
                                                                                                                       // 682
    // fallback on unprefixed                                                                                          // 683
    return attrs[getNormalizedName(attrs, attrName)];                                                                  // 684
  }                                                                                                                    // 685
                                                                                                                       // 686
  function watchResponsiveAttributes(attrNames, attrs, watchFn) {                                                      // 687
    var unwatchFns = [];                                                                                               // 688
    attrNames.forEach(function(attrName) {                                                                             // 689
      var normalizedName = getNormalizedName(attrs, attrName);                                                         // 690
      if (angular.isDefined(attrs[normalizedName])) {                                                                  // 691
        unwatchFns.push(                                                                                               // 692
            attrs.$observe(normalizedName, angular.bind(void 0, watchFn, null)));                                      // 693
      }                                                                                                                // 694
                                                                                                                       // 695
      for (var mediaName in $mdConstant.MEDIA) {                                                                       // 696
        normalizedName = getNormalizedName(attrs, attrName + '-' + mediaName);                                         // 697
        if (angular.isDefined(attrs[normalizedName])) {                                                                // 698
          unwatchFns.push(                                                                                             // 699
              attrs.$observe(normalizedName, angular.bind(void 0, watchFn, mediaName)));                               // 700
        }                                                                                                              // 701
      }                                                                                                                // 702
    });                                                                                                                // 703
                                                                                                                       // 704
    return function unwatch() {                                                                                        // 705
      unwatchFns.forEach(function(fn) { fn(); })                                                                       // 706
    };                                                                                                                 // 707
  }                                                                                                                    // 708
                                                                                                                       // 709
  // Improves performance dramatically                                                                                 // 710
  function getNormalizedName(attrs, attrName) {                                                                        // 711
    return normalizeCache[attrName] ||                                                                                 // 712
        (normalizeCache[attrName] = attrs.$normalize(attrName));                                                       // 713
  }                                                                                                                    // 714
}                                                                                                                      // 715
mdMediaFactory.$inject = ["$mdConstant", "$rootScope", "$window"];                                                     // 716
                                                                                                                       // 717
})();                                                                                                                  // 718
(function(){                                                                                                           // 719
"use strict";                                                                                                          // 720
                                                                                                                       // 721
/*                                                                                                                     // 722
 * This var has to be outside the angular factory, otherwise when                                                      // 723
 * there are multiple material apps on the same page, each app                                                         // 724
 * will create its own instance of this array and the app's IDs                                                        // 725
 * will not be unique.                                                                                                 // 726
 */                                                                                                                    // 727
var nextUniqueId = 0;                                                                                                  // 728
                                                                                                                       // 729
/**                                                                                                                    // 730
 * @ngdoc module                                                                                                       // 731
 * @name material.core.util                                                                                            // 732
 * @description                                                                                                        // 733
 * Util                                                                                                                // 734
 */                                                                                                                    // 735
angular                                                                                                                // 736
  .module('material.core')                                                                                             // 737
  .factory('$mdUtil', UtilFactory);                                                                                    // 738
                                                                                                                       // 739
function UtilFactory($document, $timeout, $compile, $rootScope, $$mdAnimate, $interpolate, $log, $rootElement, $window) {
  // Setup some core variables for the processTemplate method                                                          // 741
  var startSymbol = $interpolate.startSymbol(),                                                                        // 742
    endSymbol = $interpolate.endSymbol(),                                                                              // 743
    usesStandardSymbols = ((startSymbol === '{{') && (endSymbol === '}}'));                                            // 744
                                                                                                                       // 745
  /**                                                                                                                  // 746
   * Checks if the target element has the requested style by key                                                       // 747
   * @param {DOMElement|JQLite} target Target element                                                                  // 748
   * @param {string} key Style key                                                                                     // 749
   * @param {string=} expectedVal Optional expected value                                                              // 750
   * @returns {boolean} Whether the target element has the style or not                                                // 751
   */                                                                                                                  // 752
  var hasComputedStyle = function (target, key, expectedVal) {                                                         // 753
    var hasValue = false;                                                                                              // 754
                                                                                                                       // 755
    if ( target && target.length  ) {                                                                                  // 756
      var computedStyles = $window.getComputedStyle(target[0]);                                                        // 757
      hasValue = angular.isDefined(computedStyles[key]) && (expectedVal ? computedStyles[key] == expectedVal : true);  // 758
    }                                                                                                                  // 759
                                                                                                                       // 760
    return hasValue;                                                                                                   // 761
  };                                                                                                                   // 762
                                                                                                                       // 763
  var $mdUtil = {                                                                                                      // 764
    dom: {},                                                                                                           // 765
    now: window.performance ?                                                                                          // 766
      angular.bind(window.performance, window.performance.now) : Date.now || function() {                              // 767
      return new Date().getTime();                                                                                     // 768
    },                                                                                                                 // 769
                                                                                                                       // 770
    clientRect: function(element, offsetParent, isOffsetRect) {                                                        // 771
      var node = getNode(element);                                                                                     // 772
      offsetParent = getNode(offsetParent || node.offsetParent || document.body);                                      // 773
      var nodeRect = node.getBoundingClientRect();                                                                     // 774
                                                                                                                       // 775
      // The user can ask for an offsetRect: a rect relative to the offsetParent,                                      // 776
      // or a clientRect: a rect relative to the page                                                                  // 777
      var offsetRect = isOffsetRect ?                                                                                  // 778
        offsetParent.getBoundingClientRect() :                                                                         // 779
      {left: 0, top: 0, width: 0, height: 0};                                                                          // 780
      return {                                                                                                         // 781
        left: nodeRect.left - offsetRect.left,                                                                         // 782
        top: nodeRect.top - offsetRect.top,                                                                            // 783
        width: nodeRect.width,                                                                                         // 784
        height: nodeRect.height                                                                                        // 785
      };                                                                                                               // 786
    },                                                                                                                 // 787
    offsetRect: function(element, offsetParent) {                                                                      // 788
      return $mdUtil.clientRect(element, offsetParent, true);                                                          // 789
    },                                                                                                                 // 790
                                                                                                                       // 791
    // Annoying method to copy nodes to an array, thanks to IE                                                         // 792
    nodesToArray: function(nodes) {                                                                                    // 793
      nodes = nodes || [];                                                                                             // 794
                                                                                                                       // 795
      var results = [];                                                                                                // 796
      for (var i = 0; i < nodes.length; ++i) {                                                                         // 797
        results.push(nodes.item(i));                                                                                   // 798
      }                                                                                                                // 799
      return results;                                                                                                  // 800
    },                                                                                                                 // 801
                                                                                                                       // 802
    /**                                                                                                                // 803
     * Calculate the positive scroll offset                                                                            // 804
     * TODO: Check with pinch-zoom in IE/Chrome;                                                                       // 805
     *       https://code.google.com/p/chromium/issues/detail?id=496285                                                // 806
     */                                                                                                                // 807
    scrollTop: function(element) {                                                                                     // 808
      element = angular.element(element || $document[0].body);                                                         // 809
                                                                                                                       // 810
      var body = (element[0] == $document[0].body) ? $document[0].body : undefined;                                    // 811
      var scrollTop = body ? body.scrollTop + body.parentElement.scrollTop : 0;                                        // 812
                                                                                                                       // 813
      // Calculate the positive scroll offset                                                                          // 814
      return scrollTop || Math.abs(element[0].getBoundingClientRect().top);                                            // 815
    },                                                                                                                 // 816
                                                                                                                       // 817
    /**                                                                                                                // 818
     * Finds the proper focus target by searching the DOM.                                                             // 819
     *                                                                                                                 // 820
     * @param containerEl                                                                                              // 821
     * @param attributeVal                                                                                             // 822
     * @returns {*}                                                                                                    // 823
     */                                                                                                                // 824
    findFocusTarget: function(containerEl, attributeVal) {                                                             // 825
      var AUTO_FOCUS = '[md-autofocus]';                                                                               // 826
      var elToFocus;                                                                                                   // 827
                                                                                                                       // 828
      elToFocus = scanForFocusable(containerEl, attributeVal || AUTO_FOCUS);                                           // 829
                                                                                                                       // 830
      if ( !elToFocus && attributeVal != AUTO_FOCUS) {                                                                 // 831
        // Scan for deprecated attribute                                                                               // 832
        elToFocus = scanForFocusable(containerEl, '[md-auto-focus]');                                                  // 833
                                                                                                                       // 834
        if ( !elToFocus ) {                                                                                            // 835
          // Scan for fallback to 'universal' API                                                                      // 836
          elToFocus = scanForFocusable(containerEl, AUTO_FOCUS);                                                       // 837
        }                                                                                                              // 838
      }                                                                                                                // 839
                                                                                                                       // 840
      return elToFocus;                                                                                                // 841
                                                                                                                       // 842
      /**                                                                                                              // 843
       * Can target and nested children for specified Selector (attribute)                                             // 844
       * whose value may be an expression that evaluates to True/False.                                                // 845
       */                                                                                                              // 846
      function scanForFocusable(target, selector) {                                                                    // 847
        var elFound, items = target[0].querySelectorAll(selector);                                                     // 848
                                                                                                                       // 849
        // Find the last child element with the focus attribute                                                        // 850
        if ( items && items.length ){                                                                                  // 851
          items.length && angular.forEach(items, function(it) {                                                        // 852
            it = angular.element(it);                                                                                  // 853
                                                                                                                       // 854
            // Check the element for the _md-autofocus class to ensure any associated expression                       // 855
            // evaluated to true.                                                                                      // 856
            var isFocusable = it.hasClass('_md-autofocus');                                                            // 857
            if (isFocusable) elFound = it;                                                                             // 858
          });                                                                                                          // 859
        }                                                                                                              // 860
        return elFound;                                                                                                // 861
      }                                                                                                                // 862
    },                                                                                                                 // 863
                                                                                                                       // 864
    // Disables scroll around the passed element.                                                                      // 865
    disableScrollAround: function(element, parent) {                                                                   // 866
      $mdUtil.disableScrollAround._count = $mdUtil.disableScrollAround._count || 0;                                    // 867
      ++$mdUtil.disableScrollAround._count;                                                                            // 868
      if ($mdUtil.disableScrollAround._enableScrolling) return $mdUtil.disableScrollAround._enableScrolling;           // 869
      element = angular.element(element);                                                                              // 870
      var body = $document[0].body,                                                                                    // 871
        restoreBody = disableBodyScroll(),                                                                             // 872
        restoreElement = disableElementScroll(parent);                                                                 // 873
                                                                                                                       // 874
      return $mdUtil.disableScrollAround._enableScrolling = function() {                                               // 875
        if (!--$mdUtil.disableScrollAround._count) {                                                                   // 876
          restoreBody();                                                                                               // 877
          restoreElement();                                                                                            // 878
          delete $mdUtil.disableScrollAround._enableScrolling;                                                         // 879
        }                                                                                                              // 880
      };                                                                                                               // 881
                                                                                                                       // 882
      // Creates a virtual scrolling mask to absorb touchmove, keyboard, scrollbar clicking, and wheel events          // 883
      function disableElementScroll(element) {                                                                         // 884
        element = angular.element(element || body)[0];                                                                 // 885
        var zIndex = 50;                                                                                               // 886
        var scrollMask = angular.element(                                                                              // 887
          '<div class="md-scroll-mask">' +                                                                             // 888
          '  <div class="md-scroll-mask-bar"></div>' +                                                                 // 889
          '</div>').css('z-index', zIndex);                                                                            // 890
        element.appendChild(scrollMask[0]);                                                                            // 891
                                                                                                                       // 892
        scrollMask.on('wheel', preventDefault);                                                                        // 893
        scrollMask.on('touchmove', preventDefault);                                                                    // 894
        $document.on('keydown', disableKeyNav);                                                                        // 895
                                                                                                                       // 896
        return function restoreScroll() {                                                                              // 897
          scrollMask.off('wheel');                                                                                     // 898
          scrollMask.off('touchmove');                                                                                 // 899
          scrollMask[0].parentNode.removeChild(scrollMask[0]);                                                         // 900
          $document.off('keydown', disableKeyNav);                                                                     // 901
          delete $mdUtil.disableScrollAround._enableScrolling;                                                         // 902
        };                                                                                                             // 903
                                                                                                                       // 904
        // Prevent keypresses from elements inside the body                                                            // 905
        // used to stop the keypresses that could cause the page to scroll                                             // 906
        // (arrow keys, spacebar, tab, etc).                                                                           // 907
        function disableKeyNav(e) {                                                                                    // 908
          //-- temporarily removed this logic, will possibly re-add at a later date                                    // 909
          //if (!element[0].contains(e.target)) {                                                                      // 910
          //  e.preventDefault();                                                                                      // 911
          //  e.stopImmediatePropagation();                                                                            // 912
          //}                                                                                                          // 913
        }                                                                                                              // 914
                                                                                                                       // 915
        function preventDefault(e) {                                                                                   // 916
          e.preventDefault();                                                                                          // 917
        }                                                                                                              // 918
      }                                                                                                                // 919
                                                                                                                       // 920
      // Converts the body to a position fixed block and translate it to the proper scroll                             // 921
      // position                                                                                                      // 922
      function disableBodyScroll() {                                                                                   // 923
        var htmlNode = body.parentNode;                                                                                // 924
        var restoreHtmlStyle = htmlNode.style.cssText || '';                                                           // 925
        var restoreBodyStyle = body.style.cssText || '';                                                               // 926
        var scrollOffset = $mdUtil.scrollTop(body);                                                                    // 927
        var clientWidth = body.clientWidth;                                                                            // 928
                                                                                                                       // 929
        if (body.scrollHeight > body.clientHeight + 1) {                                                               // 930
          applyStyles(body, {                                                                                          // 931
            position: 'fixed',                                                                                         // 932
            width: '100%',                                                                                             // 933
            top: -scrollOffset + 'px'                                                                                  // 934
          });                                                                                                          // 935
                                                                                                                       // 936
          applyStyles(htmlNode, {                                                                                      // 937
            overflowY: 'scroll'                                                                                        // 938
          });                                                                                                          // 939
        }                                                                                                              // 940
                                                                                                                       // 941
        if (body.clientWidth < clientWidth) applyStyles(body, {overflow: 'hidden'});                                   // 942
                                                                                                                       // 943
        return function restoreScroll() {                                                                              // 944
          body.style.cssText = restoreBodyStyle;                                                                       // 945
          htmlNode.style.cssText = restoreHtmlStyle;                                                                   // 946
          body.scrollTop = scrollOffset;                                                                               // 947
          htmlNode.scrollTop = scrollOffset;                                                                           // 948
        };                                                                                                             // 949
      }                                                                                                                // 950
                                                                                                                       // 951
      function applyStyles(el, styles) {                                                                               // 952
        for (var key in styles) {                                                                                      // 953
          el.style[key] = styles[key];                                                                                 // 954
        }                                                                                                              // 955
      }                                                                                                                // 956
    },                                                                                                                 // 957
    enableScrolling: function() {                                                                                      // 958
      var method = this.disableScrollAround._enableScrolling;                                                          // 959
      method && method();                                                                                              // 960
    },                                                                                                                 // 961
    floatingScrollbars: function() {                                                                                   // 962
      if (this.floatingScrollbars.cached === undefined) {                                                              // 963
        var tempNode = angular.element('<div><div></div></div>').css({                                                 // 964
          width: '100%',                                                                                               // 965
          'z-index': -1,                                                                                               // 966
          position: 'absolute',                                                                                        // 967
          height: '35px',                                                                                              // 968
          'overflow-y': 'scroll'                                                                                       // 969
        });                                                                                                            // 970
        tempNode.children().css('height', '60px');                                                                     // 971
                                                                                                                       // 972
        $document[0].body.appendChild(tempNode[0]);                                                                    // 973
        this.floatingScrollbars.cached = (tempNode[0].offsetWidth == tempNode[0].childNodes[0].offsetWidth);           // 974
        tempNode.remove();                                                                                             // 975
      }                                                                                                                // 976
      return this.floatingScrollbars.cached;                                                                           // 977
    },                                                                                                                 // 978
                                                                                                                       // 979
    // Mobile safari only allows you to set focus in click event listeners...                                          // 980
    forceFocus: function(element) {                                                                                    // 981
      var node = element[0] || element;                                                                                // 982
                                                                                                                       // 983
      document.addEventListener('click', function focusOnClick(ev) {                                                   // 984
        if (ev.target === node && ev.$focus) {                                                                         // 985
          node.focus();                                                                                                // 986
          ev.stopImmediatePropagation();                                                                               // 987
          ev.preventDefault();                                                                                         // 988
          node.removeEventListener('click', focusOnClick);                                                             // 989
        }                                                                                                              // 990
      }, true);                                                                                                        // 991
                                                                                                                       // 992
      var newEvent = document.createEvent('MouseEvents');                                                              // 993
      newEvent.initMouseEvent('click', false, true, window, {}, 0, 0, 0, 0,                                            // 994
        false, false, false, false, 0, null);                                                                          // 995
      newEvent.$material = true;                                                                                       // 996
      newEvent.$focus = true;                                                                                          // 997
      node.dispatchEvent(newEvent);                                                                                    // 998
    },                                                                                                                 // 999
                                                                                                                       // 1000
    /**                                                                                                                // 1001
     * facade to build md-backdrop element with desired styles                                                         // 1002
     * NOTE: Use $compile to trigger backdrop postLink function                                                        // 1003
     */                                                                                                                // 1004
    createBackdrop: function(scope, addClass) {                                                                        // 1005
      return $compile($mdUtil.supplant('<md-backdrop class="{0}">', [addClass]))(scope);                               // 1006
    },                                                                                                                 // 1007
                                                                                                                       // 1008
    /**                                                                                                                // 1009
     * supplant() method from Crockford's `Remedial Javascript`                                                        // 1010
     * Equivalent to use of $interpolate; without dependency on                                                        // 1011
     * interpolation symbols and scope. Note: the '{<token>}' can                                                      // 1012
     * be property names, property chains, or array indices.                                                           // 1013
     */                                                                                                                // 1014
    supplant: function(template, values, pattern) {                                                                    // 1015
      pattern = pattern || /\{([^\{\}]*)\}/g;                                                                          // 1016
      return template.replace(pattern, function(a, b) {                                                                // 1017
        var p = b.split('.'),                                                                                          // 1018
          r = values;                                                                                                  // 1019
        try {                                                                                                          // 1020
          for (var s in p) {                                                                                           // 1021
            if (p.hasOwnProperty(s) ) {                                                                                // 1022
              r = r[p[s]];                                                                                             // 1023
            }                                                                                                          // 1024
          }                                                                                                            // 1025
        } catch (e) {                                                                                                  // 1026
          r = a;                                                                                                       // 1027
        }                                                                                                              // 1028
        return (typeof r === 'string' || typeof r === 'number') ? r : a;                                               // 1029
      });                                                                                                              // 1030
    },                                                                                                                 // 1031
                                                                                                                       // 1032
    fakeNgModel: function() {                                                                                          // 1033
      return {                                                                                                         // 1034
        $fake: true,                                                                                                   // 1035
        $setTouched: angular.noop,                                                                                     // 1036
        $setViewValue: function(value) {                                                                               // 1037
          this.$viewValue = value;                                                                                     // 1038
          this.$render(value);                                                                                         // 1039
          this.$viewChangeListeners.forEach(function(cb) {                                                             // 1040
            cb();                                                                                                      // 1041
          });                                                                                                          // 1042
        },                                                                                                             // 1043
        $isEmpty: function(value) {                                                                                    // 1044
          return ('' + value).length === 0;                                                                            // 1045
        },                                                                                                             // 1046
        $parsers: [],                                                                                                  // 1047
        $formatters: [],                                                                                               // 1048
        $viewChangeListeners: [],                                                                                      // 1049
        $render: angular.noop                                                                                          // 1050
      };                                                                                                               // 1051
    },                                                                                                                 // 1052
                                                                                                                       // 1053
    // Returns a function, that, as long as it continues to be invoked, will not                                       // 1054
    // be triggered. The function will be called after it stops being called for                                       // 1055
    // N milliseconds.                                                                                                 // 1056
    // @param wait Integer value of msecs to delay (since last debounce reset); default value 10 msecs                 // 1057
    // @param invokeApply should the $timeout trigger $digest() dirty checking                                         // 1058
    debounce: function(func, wait, scope, invokeApply) {                                                               // 1059
      var timer;                                                                                                       // 1060
                                                                                                                       // 1061
      return function debounced() {                                                                                    // 1062
        var context = scope,                                                                                           // 1063
          args = Array.prototype.slice.call(arguments);                                                                // 1064
                                                                                                                       // 1065
        $timeout.cancel(timer);                                                                                        // 1066
        timer = $timeout(function() {                                                                                  // 1067
                                                                                                                       // 1068
          timer = undefined;                                                                                           // 1069
          func.apply(context, args);                                                                                   // 1070
                                                                                                                       // 1071
        }, wait || 10, invokeApply);                                                                                   // 1072
      };                                                                                                               // 1073
    },                                                                                                                 // 1074
                                                                                                                       // 1075
    // Returns a function that can only be triggered every `delay` milliseconds.                                       // 1076
    // In other words, the function will not be called unless it has been more                                         // 1077
    // than `delay` milliseconds since the last call.                                                                  // 1078
    throttle: function throttle(func, delay) {                                                                         // 1079
      var recent;                                                                                                      // 1080
      return function throttled() {                                                                                    // 1081
        var context = this;                                                                                            // 1082
        var args = arguments;                                                                                          // 1083
        var now = $mdUtil.now();                                                                                       // 1084
                                                                                                                       // 1085
        if (!recent || (now - recent > delay)) {                                                                       // 1086
          func.apply(context, args);                                                                                   // 1087
          recent = now;                                                                                                // 1088
        }                                                                                                              // 1089
      };                                                                                                               // 1090
    },                                                                                                                 // 1091
                                                                                                                       // 1092
    /**                                                                                                                // 1093
     * Measures the number of milliseconds taken to run the provided callback                                          // 1094
     * function. Uses a high-precision timer if available.                                                             // 1095
     */                                                                                                                // 1096
    time: function time(cb) {                                                                                          // 1097
      var start = $mdUtil.now();                                                                                       // 1098
      cb();                                                                                                            // 1099
      return $mdUtil.now() - start;                                                                                    // 1100
    },                                                                                                                 // 1101
                                                                                                                       // 1102
    /**                                                                                                                // 1103
     * Create an implicit getter that caches its `getter()`                                                            // 1104
     * lookup value                                                                                                    // 1105
     */                                                                                                                // 1106
    valueOnUse : function (scope, key, getter) {                                                                       // 1107
      var value = null, args = Array.prototype.slice.call(arguments);                                                  // 1108
      var params = (args.length > 3) ? args.slice(3) : [ ];                                                            // 1109
                                                                                                                       // 1110
      Object.defineProperty(scope, key, {                                                                              // 1111
        get: function () {                                                                                             // 1112
          if (value === null) value = getter.apply(scope, params);                                                     // 1113
          return value;                                                                                                // 1114
        }                                                                                                              // 1115
      });                                                                                                              // 1116
    },                                                                                                                 // 1117
                                                                                                                       // 1118
    /**                                                                                                                // 1119
     * Get a unique ID.                                                                                                // 1120
     *                                                                                                                 // 1121
     * @returns {string} an unique numeric string                                                                      // 1122
     */                                                                                                                // 1123
    nextUid: function() {                                                                                              // 1124
      return '' + nextUniqueId++;                                                                                      // 1125
    },                                                                                                                 // 1126
                                                                                                                       // 1127
    // Stop watchers and events from firing on a scope without destroying it,                                          // 1128
    // by disconnecting it from its parent and its siblings' linked lists.                                             // 1129
    disconnectScope: function disconnectScope(scope) {                                                                 // 1130
      if (!scope) return;                                                                                              // 1131
                                                                                                                       // 1132
      // we can't destroy the root scope or a scope that has been already destroyed                                    // 1133
      if (scope.$root === scope) return;                                                                               // 1134
      if (scope.$$destroyed) return;                                                                                   // 1135
                                                                                                                       // 1136
      var parent = scope.$parent;                                                                                      // 1137
      scope.$$disconnected = true;                                                                                     // 1138
                                                                                                                       // 1139
      // See Scope.$destroy                                                                                            // 1140
      if (parent.$$childHead === scope) parent.$$childHead = scope.$$nextSibling;                                      // 1141
      if (parent.$$childTail === scope) parent.$$childTail = scope.$$prevSibling;                                      // 1142
      if (scope.$$prevSibling) scope.$$prevSibling.$$nextSibling = scope.$$nextSibling;                                // 1143
      if (scope.$$nextSibling) scope.$$nextSibling.$$prevSibling = scope.$$prevSibling;                                // 1144
                                                                                                                       // 1145
      scope.$$nextSibling = scope.$$prevSibling = null;                                                                // 1146
                                                                                                                       // 1147
    },                                                                                                                 // 1148
                                                                                                                       // 1149
    // Undo the effects of disconnectScope above.                                                                      // 1150
    reconnectScope: function reconnectScope(scope) {                                                                   // 1151
      if (!scope) return;                                                                                              // 1152
                                                                                                                       // 1153
      // we can't disconnect the root node or scope already disconnected                                               // 1154
      if (scope.$root === scope) return;                                                                               // 1155
      if (!scope.$$disconnected) return;                                                                               // 1156
                                                                                                                       // 1157
      var child = scope;                                                                                               // 1158
                                                                                                                       // 1159
      var parent = child.$parent;                                                                                      // 1160
      child.$$disconnected = false;                                                                                    // 1161
      // See Scope.$new for this logic...                                                                              // 1162
      child.$$prevSibling = parent.$$childTail;                                                                        // 1163
      if (parent.$$childHead) {                                                                                        // 1164
        parent.$$childTail.$$nextSibling = child;                                                                      // 1165
        parent.$$childTail = child;                                                                                    // 1166
      } else {                                                                                                         // 1167
        parent.$$childHead = parent.$$childTail = child;                                                               // 1168
      }                                                                                                                // 1169
    },                                                                                                                 // 1170
                                                                                                                       // 1171
    /*                                                                                                                 // 1172
     * getClosest replicates jQuery.closest() to walk up the DOM tree until it finds a matching nodeName               // 1173
     *                                                                                                                 // 1174
     * @param el Element to start walking the DOM from                                                                 // 1175
     * @param tagName Tag name to find closest to el, such as 'form'                                                   // 1176
     * @param onlyParent Only start checking from the parent element, not `el`.                                        // 1177
     */                                                                                                                // 1178
    getClosest: function getClosest(el, tagName, onlyParent) {                                                         // 1179
      if (el instanceof angular.element) el = el[0];                                                                   // 1180
      tagName = tagName.toUpperCase();                                                                                 // 1181
      if (onlyParent) el = el.parentNode;                                                                              // 1182
      if (!el) return null;                                                                                            // 1183
      do {                                                                                                             // 1184
        if (el.nodeName === tagName) {                                                                                 // 1185
          return el;                                                                                                   // 1186
        }                                                                                                              // 1187
      } while (el = el.parentNode);                                                                                    // 1188
      return null;                                                                                                     // 1189
    },                                                                                                                 // 1190
                                                                                                                       // 1191
    /**                                                                                                                // 1192
     * Build polyfill for the Node.contains feature (if needed)                                                        // 1193
     */                                                                                                                // 1194
    elementContains: function(node, child) {                                                                           // 1195
      var hasContains = (window.Node && window.Node.prototype && Node.prototype.contains);                             // 1196
      var findFn = hasContains ? angular.bind(node, node.contains) : angular.bind(node, function(arg) {                // 1197
        // compares the positions of two nodes and returns a bitmask                                                   // 1198
        return (node === child) || !!(this.compareDocumentPosition(arg) & 16)                                          // 1199
      });                                                                                                              // 1200
                                                                                                                       // 1201
      return findFn(child);                                                                                            // 1202
    },                                                                                                                 // 1203
                                                                                                                       // 1204
    /**                                                                                                                // 1205
     * Functional equivalent for $element.filter(‘md-bottom-sheet’)                                                    // 1206
     * useful with interimElements where the element and its container are important...                                // 1207
     *                                                                                                                 // 1208
     * @param {[]} elements to scan                                                                                    // 1209
     * @param {string} name of node to find (e.g. 'md-dialog')                                                         // 1210
     * @param {boolean=} optional flag to allow deep scans; defaults to 'false'.                                       // 1211
     * @param {boolean=} optional flag to enable log warnings; defaults to false                                       // 1212
     */                                                                                                                // 1213
    extractElementByName: function(element, nodeName, scanDeep, warnNotFound) {                                        // 1214
      var found = scanTree(element);                                                                                   // 1215
      if (!found && !!warnNotFound) {                                                                                  // 1216
        $log.warn( $mdUtil.supplant("Unable to find node '{0}' in element '{1}'.",[nodeName, element[0].outerHTML]) );
      }                                                                                                                // 1218
                                                                                                                       // 1219
      return angular.element(found || element);                                                                        // 1220
                                                                                                                       // 1221
      /**                                                                                                              // 1222
       * Breadth-First tree scan for element with matching `nodeName`                                                  // 1223
       */                                                                                                              // 1224
      function scanTree(element) {                                                                                     // 1225
        return scanLevel(element) || (!!scanDeep ? scanChildren(element) : null);                                      // 1226
      }                                                                                                                // 1227
                                                                                                                       // 1228
      /**                                                                                                              // 1229
       * Case-insensitive scan of current elements only (do not descend).                                              // 1230
       */                                                                                                              // 1231
      function scanLevel(element) {                                                                                    // 1232
        if ( element ) {                                                                                               // 1233
          for (var i = 0, len = element.length; i < len; i++) {                                                        // 1234
            if (element[i].nodeName.toLowerCase() === nodeName) {                                                      // 1235
              return element[i];                                                                                       // 1236
            }                                                                                                          // 1237
          }                                                                                                            // 1238
        }                                                                                                              // 1239
        return null;                                                                                                   // 1240
      }                                                                                                                // 1241
                                                                                                                       // 1242
      /**                                                                                                              // 1243
       * Scan children of specified node                                                                               // 1244
       */                                                                                                              // 1245
      function scanChildren(element) {                                                                                 // 1246
        var found;                                                                                                     // 1247
        if ( element ) {                                                                                               // 1248
          for (var i = 0, len = element.length; i < len; i++) {                                                        // 1249
            var target = element[i];                                                                                   // 1250
            if ( !found ) {                                                                                            // 1251
              for (var j = 0, numChild = target.childNodes.length; j < numChild; j++) {                                // 1252
                found = found || scanTree([target.childNodes[j]]);                                                     // 1253
              }                                                                                                        // 1254
            }                                                                                                          // 1255
          }                                                                                                            // 1256
        }                                                                                                              // 1257
        return found;                                                                                                  // 1258
      }                                                                                                                // 1259
                                                                                                                       // 1260
    },                                                                                                                 // 1261
                                                                                                                       // 1262
    /**                                                                                                                // 1263
     * Give optional properties with no value a boolean true if attr provided or false otherwise                       // 1264
     */                                                                                                                // 1265
    initOptionalProperties: function(scope, attr, defaults) {                                                          // 1266
      defaults = defaults || {};                                                                                       // 1267
      angular.forEach(scope.$$isolateBindings, function(binding, key) {                                                // 1268
        if (binding.optional && angular.isUndefined(scope[key])) {                                                     // 1269
          var attrIsDefined = angular.isDefined(attr[binding.attrName]);                                               // 1270
          scope[key] = angular.isDefined(defaults[key]) ? defaults[key] : attrIsDefined;                               // 1271
        }                                                                                                              // 1272
      });                                                                                                              // 1273
    },                                                                                                                 // 1274
                                                                                                                       // 1275
    /**                                                                                                                // 1276
     * Alternative to $timeout calls with 0 delay.                                                                     // 1277
     * nextTick() coalesces all calls within a single frame                                                            // 1278
     * to minimize $digest thrashing                                                                                   // 1279
     *                                                                                                                 // 1280
     * @param callback                                                                                                 // 1281
     * @param digest                                                                                                   // 1282
     * @returns {*}                                                                                                    // 1283
     */                                                                                                                // 1284
    nextTick: function(callback, digest, scope) {                                                                      // 1285
      //-- grab function reference for storing state details                                                           // 1286
      var nextTick = $mdUtil.nextTick;                                                                                 // 1287
      var timeout = nextTick.timeout;                                                                                  // 1288
      var queue = nextTick.queue || [];                                                                                // 1289
                                                                                                                       // 1290
      //-- add callback to the queue                                                                                   // 1291
      queue.push(callback);                                                                                            // 1292
                                                                                                                       // 1293
      //-- set default value for digest                                                                                // 1294
      if (digest == null) digest = true;                                                                               // 1295
                                                                                                                       // 1296
      //-- store updated digest/queue values                                                                           // 1297
      nextTick.digest = nextTick.digest || digest;                                                                     // 1298
      nextTick.queue = queue;                                                                                          // 1299
                                                                                                                       // 1300
      //-- either return existing timeout or create a new one                                                          // 1301
      return timeout || (nextTick.timeout = $timeout(processQueue, 0, false));                                         // 1302
                                                                                                                       // 1303
      /**                                                                                                              // 1304
       * Grab a copy of the current queue                                                                              // 1305
       * Clear the queue for future use                                                                                // 1306
       * Process the existing queue                                                                                    // 1307
       * Trigger digest if necessary                                                                                   // 1308
       */                                                                                                              // 1309
      function processQueue() {                                                                                        // 1310
        var skip = scope && scope.$$destroyed;                                                                         // 1311
        var queue = !skip ? nextTick.queue : [];                                                                       // 1312
        var digest = !skip ? nextTick.digest : null;                                                                   // 1313
                                                                                                                       // 1314
        nextTick.queue = [];                                                                                           // 1315
        nextTick.timeout = null;                                                                                       // 1316
        nextTick.digest = false;                                                                                       // 1317
                                                                                                                       // 1318
        queue.forEach(function(callback) {                                                                             // 1319
          callback();                                                                                                  // 1320
        });                                                                                                            // 1321
                                                                                                                       // 1322
        if (digest) $rootScope.$digest();                                                                              // 1323
      }                                                                                                                // 1324
    },                                                                                                                 // 1325
                                                                                                                       // 1326
    /**                                                                                                                // 1327
     * Processes a template and replaces the start/end symbols if the application has                                  // 1328
     * overriden them.                                                                                                 // 1329
     *                                                                                                                 // 1330
     * @param template The template to process whose start/end tags may be replaced.                                   // 1331
     * @returns {*}                                                                                                    // 1332
     */                                                                                                                // 1333
    processTemplate: function(template) {                                                                              // 1334
      if (usesStandardSymbols) {                                                                                       // 1335
        return template;                                                                                               // 1336
      } else {                                                                                                         // 1337
        if (!template || !angular.isString(template)) return template;                                                 // 1338
        return template.replace(/\{\{/g, startSymbol).replace(/}}/g, endSymbol);                                       // 1339
      }                                                                                                                // 1340
    },                                                                                                                 // 1341
                                                                                                                       // 1342
    /**                                                                                                                // 1343
     * Scan up dom hierarchy for enabled parent;                                                                       // 1344
     */                                                                                                                // 1345
    getParentWithPointerEvents: function (element) {                                                                   // 1346
      var parent = element.parent();                                                                                   // 1347
                                                                                                                       // 1348
      // jqLite might return a non-null, but still empty, parent; so check for parent and length                       // 1349
      while (hasComputedStyle(parent, 'pointer-events', 'none')) {                                                     // 1350
        parent = parent.parent();                                                                                      // 1351
      }                                                                                                                // 1352
                                                                                                                       // 1353
      return parent;                                                                                                   // 1354
    },                                                                                                                 // 1355
                                                                                                                       // 1356
    getNearestContentElement: function (element) {                                                                     // 1357
      var current = element.parent()[0];                                                                               // 1358
      // Look for the nearest parent md-content, stopping at the rootElement.                                          // 1359
      while (current && current !== $rootElement[0] && current !== document.body && current.nodeName.toUpperCase() !== 'MD-CONTENT') {
        current = current.parentNode;                                                                                  // 1361
      }                                                                                                                // 1362
      return current;                                                                                                  // 1363
    },                                                                                                                 // 1364
                                                                                                                       // 1365
    hasComputedStyle: hasComputedStyle                                                                                 // 1366
  };                                                                                                                   // 1367
                                                                                                                       // 1368
// Instantiate other namespace utility methods                                                                         // 1369
                                                                                                                       // 1370
  $mdUtil.dom.animator = $$mdAnimate($mdUtil);                                                                         // 1371
                                                                                                                       // 1372
  return $mdUtil;                                                                                                      // 1373
                                                                                                                       // 1374
  function getNode(el) {                                                                                               // 1375
    return el[0] || el;                                                                                                // 1376
  }                                                                                                                    // 1377
                                                                                                                       // 1378
}                                                                                                                      // 1379
UtilFactory.$inject = ["$document", "$timeout", "$compile", "$rootScope", "$$mdAnimate", "$interpolate", "$log", "$rootElement", "$window"];
                                                                                                                       // 1381
/*                                                                                                                     // 1382
 * Since removing jQuery from the demos, some code that uses `element.focus()` is broken.                              // 1383
 * We need to add `element.focus()`, because it's testable unlike `element[0].focus`.                                  // 1384
 */                                                                                                                    // 1385
                                                                                                                       // 1386
angular.element.prototype.focus = angular.element.prototype.focus || function() {                                      // 1387
    if (this.length) {                                                                                                 // 1388
      this[0].focus();                                                                                                 // 1389
    }                                                                                                                  // 1390
    return this;                                                                                                       // 1391
  };                                                                                                                   // 1392
angular.element.prototype.blur = angular.element.prototype.blur || function() {                                        // 1393
    if (this.length) {                                                                                                 // 1394
      this[0].blur();                                                                                                  // 1395
    }                                                                                                                  // 1396
    return this;                                                                                                       // 1397
  };                                                                                                                   // 1398
                                                                                                                       // 1399
                                                                                                                       // 1400
})();                                                                                                                  // 1401
(function(){                                                                                                           // 1402
"use strict";                                                                                                          // 1403
                                                                                                                       // 1404
                                                                                                                       // 1405
angular.module('material.core')                                                                                        // 1406
  .service('$mdAria', AriaService);                                                                                    // 1407
                                                                                                                       // 1408
/*                                                                                                                     // 1409
 * @ngInject                                                                                                           // 1410
 */                                                                                                                    // 1411
function AriaService($$rAF, $log, $window, $interpolate) {                                                             // 1412
                                                                                                                       // 1413
  return {                                                                                                             // 1414
    expect: expect,                                                                                                    // 1415
    expectAsync: expectAsync,                                                                                          // 1416
    expectWithText: expectWithText                                                                                     // 1417
  };                                                                                                                   // 1418
                                                                                                                       // 1419
  /**                                                                                                                  // 1420
   * Check if expected attribute has been specified on the target element or child                                     // 1421
   * @param element                                                                                                    // 1422
   * @param attrName                                                                                                   // 1423
   * @param {optional} defaultValue What to set the attr to if no value is found                                       // 1424
   */                                                                                                                  // 1425
  function expect(element, attrName, defaultValue) {                                                                   // 1426
                                                                                                                       // 1427
    var node = angular.element(element)[0] || element;                                                                 // 1428
                                                                                                                       // 1429
    // if node exists and neither it nor its children have the attribute                                               // 1430
    if (node &&                                                                                                        // 1431
       ((!node.hasAttribute(attrName) ||                                                                               // 1432
        node.getAttribute(attrName).length === 0) &&                                                                   // 1433
        !childHasAttribute(node, attrName))) {                                                                         // 1434
                                                                                                                       // 1435
      defaultValue = angular.isString(defaultValue) ? defaultValue.trim() : '';                                        // 1436
      if (defaultValue.length) {                                                                                       // 1437
        element.attr(attrName, defaultValue);                                                                          // 1438
      } else {                                                                                                         // 1439
        $log.warn('ARIA: Attribute "', attrName, '", required for accessibility, is missing on node:', node);          // 1440
      }                                                                                                                // 1441
                                                                                                                       // 1442
    }                                                                                                                  // 1443
  }                                                                                                                    // 1444
                                                                                                                       // 1445
  function expectAsync(element, attrName, defaultValueGetter) {                                                        // 1446
    // Problem: when retrieving the element's contents synchronously to find the label,                                // 1447
    // the text may not be defined yet in the case of a binding.                                                       // 1448
    // There is a higher chance that a binding will be defined if we wait one frame.                                   // 1449
    $$rAF(function() {                                                                                                 // 1450
        expect(element, attrName, defaultValueGetter());                                                               // 1451
    });                                                                                                                // 1452
  }                                                                                                                    // 1453
                                                                                                                       // 1454
  function expectWithText(element, attrName) {                                                                         // 1455
    var content = getText(element) || "";                                                                              // 1456
    var hasBinding = content.indexOf($interpolate.startSymbol())>-1;                                                   // 1457
                                                                                                                       // 1458
    if ( hasBinding ) {                                                                                                // 1459
      expectAsync(element, attrName, function() {                                                                      // 1460
        return getText(element);                                                                                       // 1461
      });                                                                                                              // 1462
    } else {                                                                                                           // 1463
      expect(element, attrName, content);                                                                              // 1464
    }                                                                                                                  // 1465
  }                                                                                                                    // 1466
                                                                                                                       // 1467
  function getText(element) {                                                                                          // 1468
    return (element.text() || "").trim();                                                                              // 1469
  }                                                                                                                    // 1470
                                                                                                                       // 1471
  function childHasAttribute(node, attrName) {                                                                         // 1472
    var hasChildren = node.hasChildNodes(),                                                                            // 1473
        hasAttr = false;                                                                                               // 1474
                                                                                                                       // 1475
    function isHidden(el) {                                                                                            // 1476
      var style = el.currentStyle ? el.currentStyle : $window.getComputedStyle(el);                                    // 1477
      return (style.display === 'none');                                                                               // 1478
    }                                                                                                                  // 1479
                                                                                                                       // 1480
    if(hasChildren) {                                                                                                  // 1481
      var children = node.childNodes;                                                                                  // 1482
      for(var i=0; i<children.length; i++){                                                                            // 1483
        var child = children[i];                                                                                       // 1484
        if(child.nodeType === 1 && child.hasAttribute(attrName)) {                                                     // 1485
          if(!isHidden(child)){                                                                                        // 1486
            hasAttr = true;                                                                                            // 1487
          }                                                                                                            // 1488
        }                                                                                                              // 1489
      }                                                                                                                // 1490
    }                                                                                                                  // 1491
    return hasAttr;                                                                                                    // 1492
  }                                                                                                                    // 1493
}                                                                                                                      // 1494
AriaService.$inject = ["$$rAF", "$log", "$window", "$interpolate"];                                                    // 1495
                                                                                                                       // 1496
})();                                                                                                                  // 1497
(function(){                                                                                                           // 1498
"use strict";                                                                                                          // 1499
                                                                                                                       // 1500
angular                                                                                                                // 1501
  .module('material.core')                                                                                             // 1502
  .service('$mdCompiler', mdCompilerService);                                                                          // 1503
                                                                                                                       // 1504
function mdCompilerService($q, $http, $injector, $compile, $controller, $templateCache) {                              // 1505
  /* jshint validthis: true */                                                                                         // 1506
                                                                                                                       // 1507
  /*                                                                                                                   // 1508
   * @ngdoc service                                                                                                    // 1509
   * @name $mdCompiler                                                                                                 // 1510
   * @module material.core                                                                                             // 1511
   * @description                                                                                                      // 1512
   * The $mdCompiler service is an abstraction of angular's compiler, that allows the developer                        // 1513
   * to easily compile an element with a templateUrl, controller, and locals.                                          // 1514
   *                                                                                                                   // 1515
   * @usage                                                                                                            // 1516
   * <hljs lang="js">                                                                                                  // 1517
   * $mdCompiler.compile({                                                                                             // 1518
   *   templateUrl: 'modal.html',                                                                                      // 1519
   *   controller: 'ModalCtrl',                                                                                        // 1520
   *   locals: {                                                                                                       // 1521
   *     modal: myModalInstance;                                                                                       // 1522
   *   }                                                                                                               // 1523
   * }).then(function(compileData) {                                                                                   // 1524
   *   compileData.element; // modal.html's template in an element                                                     // 1525
   *   compileData.link(myScope); //attach controller & scope to element                                               // 1526
   * });                                                                                                               // 1527
   * </hljs>                                                                                                           // 1528
   */                                                                                                                  // 1529
                                                                                                                       // 1530
   /*                                                                                                                  // 1531
    * @ngdoc method                                                                                                    // 1532
    * @name $mdCompiler#compile                                                                                        // 1533
    * @description A helper to compile an HTML template/templateUrl with a given controller,                           // 1534
    * locals, and scope.                                                                                               // 1535
    * @param {object} options An options object, with the following properties:                                        // 1536
    *                                                                                                                  // 1537
    *    - `controller` - `{(string=|function()=}` Controller fn that should be associated with                        // 1538
    *      newly created scope or the name of a registered controller if passed as a string.                           // 1539
    *    - `controllerAs` - `{string=}` A controller alias name. If present the controller will be                     // 1540
    *      published to scope under the `controllerAs` name.                                                           // 1541
    *    - `template` - `{string=}` An html template as a string.                                                      // 1542
    *    - `templateUrl` - `{string=}` A path to an html template.                                                     // 1543
    *    - `transformTemplate` - `{function(template)=}` A function which transforms the template after                // 1544
    *      it is loaded. It will be given the template string as a parameter, and should                               // 1545
    *      return a a new string representing the transformed template.                                                // 1546
    *    - `resolve` - `{Object.<string, function>=}` - An optional map of dependencies which should                   // 1547
    *      be injected into the controller. If any of these dependencies are promises, the compiler                    // 1548
    *      will wait for them all to be resolved, or if one is rejected before the controller is                       // 1549
    *      instantiated `compile()` will fail..                                                                        // 1550
    *      * `key` - `{string}`: a name of a dependency to be injected into the controller.                            // 1551
    *      * `factory` - `{string|function}`: If `string` then it is an alias for a service.                           // 1552
    *        Otherwise if function, then it is injected and the return value is treated as the                         // 1553
    *        dependency. If the result is a promise, it is resolved before its value is                                // 1554
    *        injected into the controller.                                                                             // 1555
    *                                                                                                                  // 1556
    * @returns {object=} promise A promise, which will be resolved with a `compileData` object.                        // 1557
    * `compileData` has the following properties:                                                                      // 1558
    *                                                                                                                  // 1559
    *   - `element` - `{element}`: an uncompiled element matching the provided template.                               // 1560
    *   - `link` - `{function(scope)}`: A link function, which, when called, will compile                              // 1561
    *     the element and instantiate the provided controller (if given).                                              // 1562
    *   - `locals` - `{object}`: The locals which will be passed into the controller once `link` is                    // 1563
    *     called. If `bindToController` is true, they will be coppied to the ctrl instead                              // 1564
    *   - `bindToController` - `bool`: bind the locals to the controller, instead of passing them in.                  // 1565
    */                                                                                                                 // 1566
  this.compile = function(options) {                                                                                   // 1567
    var templateUrl = options.templateUrl;                                                                             // 1568
    var template = options.template || '';                                                                             // 1569
    var controller = options.controller;                                                                               // 1570
    var controllerAs = options.controllerAs;                                                                           // 1571
    var resolve = angular.extend({}, options.resolve || {});                                                           // 1572
    var locals = angular.extend({}, options.locals || {});                                                             // 1573
    var transformTemplate = options.transformTemplate || angular.identity;                                             // 1574
    var bindToController = options.bindToController;                                                                   // 1575
                                                                                                                       // 1576
    // Take resolve values and invoke them.                                                                            // 1577
    // Resolves can either be a string (value: 'MyRegisteredAngularConst'),                                            // 1578
    // or an invokable 'factory' of sorts: (value: function ValueGetter($dependency) {})                               // 1579
    angular.forEach(resolve, function(value, key) {                                                                    // 1580
      if (angular.isString(value)) {                                                                                   // 1581
        resolve[key] = $injector.get(value);                                                                           // 1582
      } else {                                                                                                         // 1583
        resolve[key] = $injector.invoke(value);                                                                        // 1584
      }                                                                                                                // 1585
    });                                                                                                                // 1586
    //Add the locals, which are just straight values to inject                                                         // 1587
    //eg locals: { three: 3 }, will inject three into the controller                                                   // 1588
    angular.extend(resolve, locals);                                                                                   // 1589
                                                                                                                       // 1590
    if (templateUrl) {                                                                                                 // 1591
      resolve.$template = $http.get(templateUrl, {cache: $templateCache})                                              // 1592
        .then(function(response) {                                                                                     // 1593
          return response.data;                                                                                        // 1594
        });                                                                                                            // 1595
    } else {                                                                                                           // 1596
      resolve.$template = $q.when(template);                                                                           // 1597
    }                                                                                                                  // 1598
                                                                                                                       // 1599
    // Wait for all the resolves to finish if they are promises                                                        // 1600
    return $q.all(resolve).then(function(locals) {                                                                     // 1601
                                                                                                                       // 1602
      var compiledData;                                                                                                // 1603
      var template = transformTemplate(locals.$template, options);                                                     // 1604
      var element = options.element || angular.element('<div>').html(template.trim()).contents();                      // 1605
      var linkFn = $compile(element);                                                                                  // 1606
                                                                                                                       // 1607
      // Return a linking function that can be used later when the element is ready                                    // 1608
      return compiledData = {                                                                                          // 1609
        locals: locals,                                                                                                // 1610
        element: element,                                                                                              // 1611
        link: function link(scope) {                                                                                   // 1612
          locals.$scope = scope;                                                                                       // 1613
                                                                                                                       // 1614
          //Instantiate controller if it exists, because we have scope                                                 // 1615
          if (controller) {                                                                                            // 1616
            var invokeCtrl = $controller(controller, locals, true);                                                    // 1617
            if (bindToController) {                                                                                    // 1618
              angular.extend(invokeCtrl.instance, locals);                                                             // 1619
            }                                                                                                          // 1620
            var ctrl = invokeCtrl();                                                                                   // 1621
            //See angular-route source for this logic                                                                  // 1622
            element.data('$ngControllerController', ctrl);                                                             // 1623
            element.children().data('$ngControllerController', ctrl);                                                  // 1624
                                                                                                                       // 1625
            if (controllerAs) {                                                                                        // 1626
              scope[controllerAs] = ctrl;                                                                              // 1627
            }                                                                                                          // 1628
                                                                                                                       // 1629
            // Publish reference to this controller                                                                    // 1630
            compiledData.controller = ctrl;                                                                            // 1631
          }                                                                                                            // 1632
          return linkFn(scope);                                                                                        // 1633
        }                                                                                                              // 1634
      };                                                                                                               // 1635
    });                                                                                                                // 1636
                                                                                                                       // 1637
  };                                                                                                                   // 1638
}                                                                                                                      // 1639
mdCompilerService.$inject = ["$q", "$http", "$injector", "$compile", "$controller", "$templateCache"];                 // 1640
                                                                                                                       // 1641
})();                                                                                                                  // 1642
(function(){                                                                                                           // 1643
"use strict";                                                                                                          // 1644
                                                                                                                       // 1645
var HANDLERS = {};                                                                                                     // 1646
                                                                                                                       // 1647
/* The state of the current 'pointer'                                                                                  // 1648
 * The pointer represents the state of the current touch.                                                              // 1649
 * It contains normalized x and y coordinates from DOM events,                                                         // 1650
 * as well as other information abstracted from the DOM.                                                               // 1651
 */                                                                                                                    // 1652
                                                                                                                       // 1653
var pointer, lastPointer, forceSkipClickHijack = false;                                                                // 1654
                                                                                                                       // 1655
/**                                                                                                                    // 1656
 * The position of the most recent click if that click was on a label element.                                         // 1657
 * @type {{x: number, y: number}?}                                                                                     // 1658
 */                                                                                                                    // 1659
var lastLabelClickPos = null;                                                                                          // 1660
                                                                                                                       // 1661
// Used to attach event listeners once when multiple ng-apps are running.                                              // 1662
var isInitialized = false;                                                                                             // 1663
                                                                                                                       // 1664
angular                                                                                                                // 1665
  .module('material.core.gestures', [ ])                                                                               // 1666
  .provider('$mdGesture', MdGestureProvider)                                                                           // 1667
  .factory('$$MdGestureHandler', MdGestureHandler)                                                                     // 1668
  .run( attachToDocument );                                                                                            // 1669
                                                                                                                       // 1670
/**                                                                                                                    // 1671
   * @ngdoc service                                                                                                    // 1672
   * @name $mdGestureProvider                                                                                          // 1673
   * @module material.core.gestures                                                                                    // 1674
   *                                                                                                                   // 1675
   * @description                                                                                                      // 1676
   * In some scenarios on Mobile devices (without jQuery), the click events should NOT be hijacked.                    // 1677
   * `$mdGestureProvider` is used to configure the Gesture module to ignore or skip click hijacking on mobile          // 1678
   * devices.                                                                                                          // 1679
   *                                                                                                                   // 1680
   * <hljs lang="js">                                                                                                  // 1681
   *   app.config(function($mdGestureProvider) {                                                                       // 1682
   *                                                                                                                   // 1683
   *     // For mobile devices without jQuery loaded, do not                                                           // 1684
   *     // intercept click events during the capture phase.                                                           // 1685
   *     $mdGestureProvider.skipClickHijack();                                                                         // 1686
   *                                                                                                                   // 1687
   *   });                                                                                                             // 1688
   * </hljs>                                                                                                           // 1689
   *                                                                                                                   // 1690
   */                                                                                                                  // 1691
function MdGestureProvider() { }                                                                                       // 1692
                                                                                                                       // 1693
MdGestureProvider.prototype = {                                                                                        // 1694
                                                                                                                       // 1695
  // Publish access to setter to configure a variable  BEFORE the                                                      // 1696
  // $mdGesture service is instantiated...                                                                             // 1697
  skipClickHijack: function() {                                                                                        // 1698
    return forceSkipClickHijack = true;                                                                                // 1699
  },                                                                                                                   // 1700
                                                                                                                       // 1701
  /**                                                                                                                  // 1702
   * $get is used to build an instance of $mdGesture                                                                   // 1703
   * @ngInject                                                                                                         // 1704
   */                                                                                                                  // 1705
  $get : ["$$MdGestureHandler", "$$rAF", "$timeout", function($$MdGestureHandler, $$rAF, $timeout) {                   // 1706
       return new MdGesture($$MdGestureHandler, $$rAF, $timeout);                                                      // 1707
  }]                                                                                                                   // 1708
};                                                                                                                     // 1709
                                                                                                                       // 1710
                                                                                                                       // 1711
                                                                                                                       // 1712
/**                                                                                                                    // 1713
 * MdGesture factory construction function                                                                             // 1714
 * @ngInject                                                                                                           // 1715
 */                                                                                                                    // 1716
function MdGesture($$MdGestureHandler, $$rAF, $timeout) {                                                              // 1717
  var userAgent = navigator.userAgent || navigator.vendor || window.opera;                                             // 1718
  var isIos = userAgent.match(/ipad|iphone|ipod/i);                                                                    // 1719
  var isAndroid = userAgent.match(/android/i);                                                                         // 1720
  var hasJQuery =  (typeof window.jQuery !== 'undefined') && (angular.element === window.jQuery);                      // 1721
                                                                                                                       // 1722
  var self = {                                                                                                         // 1723
    handler: addHandler,                                                                                               // 1724
    register: register,                                                                                                // 1725
    // On mobile w/out jQuery, we normally intercept clicks. Should we skip that?                                      // 1726
    isHijackingClicks: (isIos || isAndroid) && !hasJQuery && !forceSkipClickHijack                                     // 1727
  };                                                                                                                   // 1728
                                                                                                                       // 1729
  if (self.isHijackingClicks) {                                                                                        // 1730
    var maxClickDistance = 6;                                                                                          // 1731
    self.handler('click', {                                                                                            // 1732
      options: {                                                                                                       // 1733
        maxDistance: maxClickDistance                                                                                  // 1734
      },                                                                                                               // 1735
      onEnd: checkDistanceAndEmit('click')                                                                             // 1736
    });                                                                                                                // 1737
                                                                                                                       // 1738
    self.handler('focus', {                                                                                            // 1739
      options: {                                                                                                       // 1740
        maxDistance: maxClickDistance                                                                                  // 1741
      },                                                                                                               // 1742
      onEnd: function(ev, pointer) {                                                                                   // 1743
        if (pointer.distance < this.state.options.maxDistance) {                                                       // 1744
          if (canFocus(ev.target)) {                                                                                   // 1745
            this.dispatchEvent(ev, 'focus', pointer);                                                                  // 1746
            ev.target.focus();                                                                                         // 1747
          }                                                                                                            // 1748
        }                                                                                                              // 1749
                                                                                                                       // 1750
        function canFocus(element) {                                                                                   // 1751
          var focusableElements = ['INPUT', 'SELECT', 'BUTTON', 'TEXTAREA', 'VIDEO', 'AUDIO'];                         // 1752
                                                                                                                       // 1753
          return (element.getAttribute('tabindex') != '-1') &&                                                         // 1754
              !element.hasAttribute('DISABLED') &&                                                                     // 1755
              (element.hasAttribute('tabindex') || element.hasAttribute('href') ||                                     // 1756
              (focusableElements.indexOf(element.nodeName) != -1));                                                    // 1757
        }                                                                                                              // 1758
      }                                                                                                                // 1759
    });                                                                                                                // 1760
                                                                                                                       // 1761
    self.handler('mouseup', {                                                                                          // 1762
      options: {                                                                                                       // 1763
        maxDistance: maxClickDistance                                                                                  // 1764
      },                                                                                                               // 1765
      onEnd: checkDistanceAndEmit('mouseup')                                                                           // 1766
    });                                                                                                                // 1767
                                                                                                                       // 1768
    self.handler('mousedown', {                                                                                        // 1769
      onStart: function(ev) {                                                                                          // 1770
        this.dispatchEvent(ev, 'mousedown');                                                                           // 1771
      }                                                                                                                // 1772
    });                                                                                                                // 1773
  }                                                                                                                    // 1774
                                                                                                                       // 1775
  function checkDistanceAndEmit(eventName) {                                                                           // 1776
    return function(ev, pointer) {                                                                                     // 1777
      if (pointer.distance < this.state.options.maxDistance) {                                                         // 1778
        this.dispatchEvent(ev, eventName, pointer);                                                                    // 1779
      }                                                                                                                // 1780
    };                                                                                                                 // 1781
  }                                                                                                                    // 1782
                                                                                                                       // 1783
  /*                                                                                                                   // 1784
   * Register an element to listen for a handler.                                                                      // 1785
   * This allows an element to override the default options for a handler.                                             // 1786
   * Additionally, some handlers like drag and hold only dispatch events if                                            // 1787
   * the domEvent happens inside an element that's registered to listen for these events.                              // 1788
   *                                                                                                                   // 1789
   * @see GestureHandler for how overriding of default options works.                                                  // 1790
   * @example $mdGesture.register(myElement, 'drag', { minDistance: 20, horziontal: false })                           // 1791
   */                                                                                                                  // 1792
  function register(element, handlerName, options) {                                                                   // 1793
    var handler = HANDLERS[handlerName.replace(/^\$md./, '')];                                                         // 1794
    if (!handler) {                                                                                                    // 1795
      throw new Error('Failed to register element with handler ' + handlerName + '. ' +                                // 1796
      'Available handlers: ' + Object.keys(HANDLERS).join(', '));                                                      // 1797
    }                                                                                                                  // 1798
    return handler.registerElement(element, options);                                                                  // 1799
  }                                                                                                                    // 1800
                                                                                                                       // 1801
  /*                                                                                                                   // 1802
   * add a handler to $mdGesture. see below.                                                                           // 1803
   */                                                                                                                  // 1804
  function addHandler(name, definition) {                                                                              // 1805
    var handler = new $$MdGestureHandler(name);                                                                        // 1806
    angular.extend(handler, definition);                                                                               // 1807
    HANDLERS[name] = handler;                                                                                          // 1808
                                                                                                                       // 1809
    return self;                                                                                                       // 1810
  }                                                                                                                    // 1811
                                                                                                                       // 1812
  /*                                                                                                                   // 1813
   * Register handlers. These listen to touch/start/move events, interpret them,                                       // 1814
   * and dispatch gesture events depending on options & conditions. These are all                                      // 1815
   * instances of GestureHandler.                                                                                      // 1816
   * @see GestureHandler                                                                                               // 1817
   */                                                                                                                  // 1818
  return self                                                                                                          // 1819
    /*                                                                                                                 // 1820
     * The press handler dispatches an event on touchdown/touchend.                                                    // 1821
     * It's a simple abstraction of touch/mouse/pointer start and end.                                                 // 1822
     */                                                                                                                // 1823
    .handler('press', {                                                                                                // 1824
      onStart: function (ev, pointer) {                                                                                // 1825
        this.dispatchEvent(ev, '$md.pressdown');                                                                       // 1826
      },                                                                                                               // 1827
      onEnd: function (ev, pointer) {                                                                                  // 1828
        this.dispatchEvent(ev, '$md.pressup');                                                                         // 1829
      }                                                                                                                // 1830
    })                                                                                                                 // 1831
                                                                                                                       // 1832
    /*                                                                                                                 // 1833
     * The hold handler dispatches an event if the user keeps their finger within                                      // 1834
     * the same <maxDistance> area for <delay> ms.                                                                     // 1835
     * The hold handler will only run if a parent of the touch target is registered                                    // 1836
     * to listen for hold events through $mdGesture.register()                                                         // 1837
     */                                                                                                                // 1838
    .handler('hold', {                                                                                                 // 1839
      options: {                                                                                                       // 1840
        maxDistance: 6,                                                                                                // 1841
        delay: 500                                                                                                     // 1842
      },                                                                                                               // 1843
      onCancel: function () {                                                                                          // 1844
        $timeout.cancel(this.state.timeout);                                                                           // 1845
      },                                                                                                               // 1846
      onStart: function (ev, pointer) {                                                                                // 1847
        // For hold, require a parent to be registered with $mdGesture.register()                                      // 1848
        // Because we prevent scroll events, this is necessary.                                                        // 1849
        if (!this.state.registeredParent) return this.cancel();                                                        // 1850
                                                                                                                       // 1851
        this.state.pos = {x: pointer.x, y: pointer.y};                                                                 // 1852
        this.state.timeout = $timeout(angular.bind(this, function holdDelayFn() {                                      // 1853
          this.dispatchEvent(ev, '$md.hold');                                                                          // 1854
          this.cancel(); //we're done!                                                                                 // 1855
        }), this.state.options.delay, false);                                                                          // 1856
      },                                                                                                               // 1857
      onMove: function (ev, pointer) {                                                                                 // 1858
        // Don't scroll while waiting for hold.                                                                        // 1859
        // If we don't preventDefault touchmove events here, Android will assume we don't                              // 1860
        // want to listen to anymore touch events. It will start scrolling and stop sending                            // 1861
        // touchmove events.                                                                                           // 1862
        ev.preventDefault();                                                                                           // 1863
                                                                                                                       // 1864
        // If the user moves greater than <maxDistance> pixels, stop the hold timer                                    // 1865
        // set in onStart                                                                                              // 1866
        var dx = this.state.pos.x - pointer.x;                                                                         // 1867
        var dy = this.state.pos.y - pointer.y;                                                                         // 1868
        if (Math.sqrt(dx * dx + dy * dy) > this.options.maxDistance) {                                                 // 1869
          this.cancel();                                                                                               // 1870
        }                                                                                                              // 1871
      },                                                                                                               // 1872
      onEnd: function () {                                                                                             // 1873
        this.onCancel();                                                                                               // 1874
      }                                                                                                                // 1875
    })                                                                                                                 // 1876
                                                                                                                       // 1877
    /*                                                                                                                 // 1878
     * The drag handler dispatches a drag event if the user holds and moves his finger greater than                    // 1879
     * <minDistance> px in the x or y direction, depending on options.horizontal.                                      // 1880
     * The drag will be cancelled if the user moves his finger greater than <minDistance>*<cancelMultiplier> in        // 1881
     * the perpindicular direction. Eg if the drag is horizontal and the user moves his finger <minDistance>*<cancelMultiplier>
     * pixels vertically, this handler won't consider the move part of a drag.                                         // 1883
     */                                                                                                                // 1884
    .handler('drag', {                                                                                                 // 1885
      options: {                                                                                                       // 1886
        minDistance: 6,                                                                                                // 1887
        horizontal: true,                                                                                              // 1888
        cancelMultiplier: 1.5                                                                                          // 1889
      },                                                                                                               // 1890
      onStart: function (ev) {                                                                                         // 1891
        // For drag, require a parent to be registered with $mdGesture.register()                                      // 1892
        if (!this.state.registeredParent) this.cancel();                                                               // 1893
      },                                                                                                               // 1894
      onMove: function (ev, pointer) {                                                                                 // 1895
        var shouldStartDrag, shouldCancel;                                                                             // 1896
        // Don't scroll while deciding if this touchmove qualifies as a drag event.                                    // 1897
        // If we don't preventDefault touchmove events here, Android will assume we don't                              // 1898
        // want to listen to anymore touch events. It will start scrolling and stop sending                            // 1899
        // touchmove events.                                                                                           // 1900
        ev.preventDefault();                                                                                           // 1901
                                                                                                                       // 1902
        if (!this.state.dragPointer) {                                                                                 // 1903
          if (this.state.options.horizontal) {                                                                         // 1904
            shouldStartDrag = Math.abs(pointer.distanceX) > this.state.options.minDistance;                            // 1905
            shouldCancel = Math.abs(pointer.distanceY) > this.state.options.minDistance * this.state.options.cancelMultiplier;
          } else {                                                                                                     // 1907
            shouldStartDrag = Math.abs(pointer.distanceY) > this.state.options.minDistance;                            // 1908
            shouldCancel = Math.abs(pointer.distanceX) > this.state.options.minDistance * this.state.options.cancelMultiplier;
          }                                                                                                            // 1910
                                                                                                                       // 1911
          if (shouldStartDrag) {                                                                                       // 1912
            // Create a new pointer representing this drag, starting at this point where the drag started.             // 1913
            this.state.dragPointer = makeStartPointer(ev);                                                             // 1914
            updatePointerState(ev, this.state.dragPointer);                                                            // 1915
            this.dispatchEvent(ev, '$md.dragstart', this.state.dragPointer);                                           // 1916
                                                                                                                       // 1917
          } else if (shouldCancel) {                                                                                   // 1918
            this.cancel();                                                                                             // 1919
          }                                                                                                            // 1920
        } else {                                                                                                       // 1921
          this.dispatchDragMove(ev);                                                                                   // 1922
        }                                                                                                              // 1923
      },                                                                                                               // 1924
      // Only dispatch dragmove events every frame; any more is unnecessray                                            // 1925
      dispatchDragMove: $$rAF.throttle(function (ev) {                                                                 // 1926
        // Make sure the drag didn't stop while waiting for the next frame                                             // 1927
        if (this.state.isRunning) {                                                                                    // 1928
          updatePointerState(ev, this.state.dragPointer);                                                              // 1929
          this.dispatchEvent(ev, '$md.drag', this.state.dragPointer);                                                  // 1930
        }                                                                                                              // 1931
      }),                                                                                                              // 1932
      onEnd: function (ev, pointer) {                                                                                  // 1933
        if (this.state.dragPointer) {                                                                                  // 1934
          updatePointerState(ev, this.state.dragPointer);                                                              // 1935
          this.dispatchEvent(ev, '$md.dragend', this.state.dragPointer);                                               // 1936
        }                                                                                                              // 1937
      }                                                                                                                // 1938
    })                                                                                                                 // 1939
                                                                                                                       // 1940
    /*                                                                                                                 // 1941
     * The swipe handler will dispatch a swipe event if, on the end of a touch,                                        // 1942
     * the velocity and distance were high enough.                                                                     // 1943
     */                                                                                                                // 1944
    .handler('swipe', {                                                                                                // 1945
      options: {                                                                                                       // 1946
        minVelocity: 0.65,                                                                                             // 1947
        minDistance: 10                                                                                                // 1948
      },                                                                                                               // 1949
      onEnd: function (ev, pointer) {                                                                                  // 1950
        var eventType;                                                                                                 // 1951
                                                                                                                       // 1952
        if (Math.abs(pointer.velocityX) > this.state.options.minVelocity &&                                            // 1953
          Math.abs(pointer.distanceX) > this.state.options.minDistance) {                                              // 1954
          eventType = pointer.directionX == 'left' ? '$md.swipeleft' : '$md.swiperight';                               // 1955
          this.dispatchEvent(ev, eventType);                                                                           // 1956
        }                                                                                                              // 1957
        else if (Math.abs(pointer.velocityY) > this.state.options.minVelocity &&                                       // 1958
          Math.abs(pointer.distanceY) > this.state.options.minDistance) {                                              // 1959
          eventType = pointer.directionY == 'up' ? '$md.swipeup' : '$md.swipedown';                                    // 1960
          this.dispatchEvent(ev, eventType);                                                                           // 1961
        }                                                                                                              // 1962
      }                                                                                                                // 1963
    });                                                                                                                // 1964
                                                                                                                       // 1965
}                                                                                                                      // 1966
MdGesture.$inject = ["$$MdGestureHandler", "$$rAF", "$timeout"];                                                       // 1967
                                                                                                                       // 1968
/**                                                                                                                    // 1969
 * MdGestureHandler                                                                                                    // 1970
 * A GestureHandler is an object which is able to dispatch custom dom events                                           // 1971
 * based on native dom {touch,pointer,mouse}{start,move,end} events.                                                   // 1972
 *                                                                                                                     // 1973
 * A gesture will manage its lifecycle through the start,move,end, and cancel                                          // 1974
 * functions, which are called by native dom events.                                                                   // 1975
 *                                                                                                                     // 1976
 * A gesture has the concept of 'options' (eg a swipe's required velocity), which can be                               // 1977
 * overridden by elements registering through $mdGesture.register()                                                    // 1978
 */                                                                                                                    // 1979
function GestureHandler (name) {                                                                                       // 1980
  this.name = name;                                                                                                    // 1981
  this.state = {};                                                                                                     // 1982
}                                                                                                                      // 1983
                                                                                                                       // 1984
function MdGestureHandler() {                                                                                          // 1985
  var hasJQuery =  (typeof window.jQuery !== 'undefined') && (angular.element === window.jQuery);                      // 1986
                                                                                                                       // 1987
  GestureHandler.prototype = {                                                                                         // 1988
    options: {},                                                                                                       // 1989
    // jQuery listeners don't work with custom DOMEvents, so we have to dispatch events                                // 1990
    // differently when jQuery is loaded                                                                               // 1991
    dispatchEvent: hasJQuery ?  jQueryDispatchEvent : nativeDispatchEvent,                                             // 1992
                                                                                                                       // 1993
    // These are overridden by the registered handler                                                                  // 1994
    onStart: angular.noop,                                                                                             // 1995
    onMove: angular.noop,                                                                                              // 1996
    onEnd: angular.noop,                                                                                               // 1997
    onCancel: angular.noop,                                                                                            // 1998
                                                                                                                       // 1999
    // onStart sets up a new state for the handler, which includes options from the                                    // 2000
    // nearest registered parent element of ev.target.                                                                 // 2001
    start: function (ev, pointer) {                                                                                    // 2002
      if (this.state.isRunning) return;                                                                                // 2003
      var parentTarget = this.getNearestParent(ev.target);                                                             // 2004
      // Get the options from the nearest registered parent                                                            // 2005
      var parentTargetOptions = parentTarget && parentTarget.$mdGesture[this.name] || {};                              // 2006
                                                                                                                       // 2007
      this.state = {                                                                                                   // 2008
        isRunning: true,                                                                                               // 2009
        // Override the default options with the nearest registered parent's options                                   // 2010
        options: angular.extend({}, this.options, parentTargetOptions),                                                // 2011
        // Pass in the registered parent node to the state so the onStart listener can use                             // 2012
        registeredParent: parentTarget                                                                                 // 2013
      };                                                                                                               // 2014
      this.onStart(ev, pointer);                                                                                       // 2015
    },                                                                                                                 // 2016
    move: function (ev, pointer) {                                                                                     // 2017
      if (!this.state.isRunning) return;                                                                               // 2018
      this.onMove(ev, pointer);                                                                                        // 2019
    },                                                                                                                 // 2020
    end: function (ev, pointer) {                                                                                      // 2021
      if (!this.state.isRunning) return;                                                                               // 2022
      this.onEnd(ev, pointer);                                                                                         // 2023
      this.state.isRunning = false;                                                                                    // 2024
    },                                                                                                                 // 2025
    cancel: function (ev, pointer) {                                                                                   // 2026
      this.onCancel(ev, pointer);                                                                                      // 2027
      this.state = {};                                                                                                 // 2028
    },                                                                                                                 // 2029
                                                                                                                       // 2030
    // Find and return the nearest parent element that has been registered to                                          // 2031
    // listen for this handler via $mdGesture.register(element, 'handlerName').                                        // 2032
    getNearestParent: function (node) {                                                                                // 2033
      var current = node;                                                                                              // 2034
      while (current) {                                                                                                // 2035
        if ((current.$mdGesture || {})[this.name]) {                                                                   // 2036
          return current;                                                                                              // 2037
        }                                                                                                              // 2038
        current = current.parentNode;                                                                                  // 2039
      }                                                                                                                // 2040
      return null;                                                                                                     // 2041
    },                                                                                                                 // 2042
                                                                                                                       // 2043
    // Called from $mdGesture.register when an element reigsters itself with a handler.                                // 2044
    // Store the options the user gave on the DOMElement itself. These options will                                    // 2045
    // be retrieved with getNearestParent when the handler starts.                                                     // 2046
    registerElement: function (element, options) {                                                                     // 2047
      var self = this;                                                                                                 // 2048
      element[0].$mdGesture = element[0].$mdGesture || {};                                                             // 2049
      element[0].$mdGesture[this.name] = options || {};                                                                // 2050
      element.on('$destroy', onDestroy);                                                                               // 2051
                                                                                                                       // 2052
      return onDestroy;                                                                                                // 2053
                                                                                                                       // 2054
      function onDestroy() {                                                                                           // 2055
        delete element[0].$mdGesture[self.name];                                                                       // 2056
        element.off('$destroy', onDestroy);                                                                            // 2057
      }                                                                                                                // 2058
    }                                                                                                                  // 2059
  };                                                                                                                   // 2060
                                                                                                                       // 2061
  return GestureHandler;                                                                                               // 2062
                                                                                                                       // 2063
  /*                                                                                                                   // 2064
   * Dispatch an event with jQuery                                                                                     // 2065
   * TODO: Make sure this sends bubbling events                                                                        // 2066
   *                                                                                                                   // 2067
   * @param srcEvent the original DOM touch event that started this.                                                   // 2068
   * @param eventType the name of the custom event to send (eg 'click' or '$md.drag')                                  // 2069
   * @param eventPointer the pointer object that matches this event.                                                   // 2070
   */                                                                                                                  // 2071
  function jQueryDispatchEvent(srcEvent, eventType, eventPointer) {                                                    // 2072
    eventPointer = eventPointer || pointer;                                                                            // 2073
    var eventObj = new angular.element.Event(eventType);                                                               // 2074
                                                                                                                       // 2075
    eventObj.$material = true;                                                                                         // 2076
    eventObj.pointer = eventPointer;                                                                                   // 2077
    eventObj.srcEvent = srcEvent;                                                                                      // 2078
                                                                                                                       // 2079
    angular.extend(eventObj, {                                                                                         // 2080
      clientX: eventPointer.x,                                                                                         // 2081
      clientY: eventPointer.y,                                                                                         // 2082
      screenX: eventPointer.x,                                                                                         // 2083
      screenY: eventPointer.y,                                                                                         // 2084
      pageX: eventPointer.x,                                                                                           // 2085
      pageY: eventPointer.y,                                                                                           // 2086
      ctrlKey: srcEvent.ctrlKey,                                                                                       // 2087
      altKey: srcEvent.altKey,                                                                                         // 2088
      shiftKey: srcEvent.shiftKey,                                                                                     // 2089
      metaKey: srcEvent.metaKey                                                                                        // 2090
    });                                                                                                                // 2091
    angular.element(eventPointer.target).trigger(eventObj);                                                            // 2092
  }                                                                                                                    // 2093
                                                                                                                       // 2094
  /*                                                                                                                   // 2095
   * NOTE: nativeDispatchEvent is very performance sensitive.                                                          // 2096
   * @param srcEvent the original DOM touch event that started this.                                                   // 2097
   * @param eventType the name of the custom event to send (eg 'click' or '$md.drag')                                  // 2098
   * @param eventPointer the pointer object that matches this event.                                                   // 2099
   */                                                                                                                  // 2100
  function nativeDispatchEvent(srcEvent, eventType, eventPointer) {                                                    // 2101
    eventPointer = eventPointer || pointer;                                                                            // 2102
    var eventObj;                                                                                                      // 2103
                                                                                                                       // 2104
    if (eventType === 'click' || eventType == 'mouseup' || eventType == 'mousedown' ) {                                // 2105
      eventObj = document.createEvent('MouseEvents');                                                                  // 2106
      eventObj.initMouseEvent(                                                                                         // 2107
        eventType, true, true, window, srcEvent.detail,                                                                // 2108
        eventPointer.x, eventPointer.y, eventPointer.x, eventPointer.y,                                                // 2109
        srcEvent.ctrlKey, srcEvent.altKey, srcEvent.shiftKey, srcEvent.metaKey,                                        // 2110
        srcEvent.button, srcEvent.relatedTarget || null                                                                // 2111
      );                                                                                                               // 2112
                                                                                                                       // 2113
    } else {                                                                                                           // 2114
      eventObj = document.createEvent('CustomEvent');                                                                  // 2115
      eventObj.initCustomEvent(eventType, true, true, {});                                                             // 2116
    }                                                                                                                  // 2117
    eventObj.$material = true;                                                                                         // 2118
    eventObj.pointer = eventPointer;                                                                                   // 2119
    eventObj.srcEvent = srcEvent;                                                                                      // 2120
    eventPointer.target.dispatchEvent(eventObj);                                                                       // 2121
  }                                                                                                                    // 2122
                                                                                                                       // 2123
}                                                                                                                      // 2124
                                                                                                                       // 2125
/**                                                                                                                    // 2126
 * Attach Gestures: hook document and check shouldHijack clicks                                                        // 2127
 * @ngInject                                                                                                           // 2128
 */                                                                                                                    // 2129
function attachToDocument( $mdGesture, $$MdGestureHandler ) {                                                          // 2130
                                                                                                                       // 2131
  // Polyfill document.contains for IE11.                                                                              // 2132
  // TODO: move to util                                                                                                // 2133
  document.contains || (document.contains = function (node) {                                                          // 2134
    return document.body.contains(node);                                                                               // 2135
  });                                                                                                                  // 2136
                                                                                                                       // 2137
  if (!isInitialized && $mdGesture.isHijackingClicks ) {                                                               // 2138
    /*                                                                                                                 // 2139
     * If hijack clicks is true, we preventDefault any click that wasn't                                               // 2140
     * sent by ngMaterial. This is because on older Android & iOS, a false, or 'ghost',                                // 2141
     * click event will be sent ~400ms after a touchend event happens.                                                 // 2142
     * The only way to know if this click is real is to prevent any normal                                             // 2143
     * click events, and add a flag to events sent by material so we know not to prevent those.                        // 2144
     *                                                                                                                 // 2145
     * Two exceptions to click events that should be prevented are:                                                    // 2146
     *  - click events sent by the keyboard (eg form submit)                                                           // 2147
     *  - events that originate from an Ionic app                                                                      // 2148
     */                                                                                                                // 2149
    document.addEventListener('click'    , clickHijacker     , true);                                                  // 2150
    document.addEventListener('mouseup'  , mouseInputHijacker, true);                                                  // 2151
    document.addEventListener('mousedown', mouseInputHijacker, true);                                                  // 2152
    document.addEventListener('focus'    , mouseInputHijacker, true);                                                  // 2153
                                                                                                                       // 2154
    isInitialized = true;                                                                                              // 2155
  }                                                                                                                    // 2156
                                                                                                                       // 2157
  function mouseInputHijacker(ev) {                                                                                    // 2158
    var isKeyClick = !ev.clientX && !ev.clientY;                                                                       // 2159
    if (!isKeyClick && !ev.$material && !ev.isIonicTap                                                                 // 2160
      && !isInputEventFromLabelClick(ev)) {                                                                            // 2161
      ev.preventDefault();                                                                                             // 2162
      ev.stopPropagation();                                                                                            // 2163
    }                                                                                                                  // 2164
  }                                                                                                                    // 2165
                                                                                                                       // 2166
  function clickHijacker(ev) {                                                                                         // 2167
    var isKeyClick = ev.clientX === 0 && ev.clientY === 0;                                                             // 2168
    if (!isKeyClick && !ev.$material && !ev.isIonicTap                                                                 // 2169
      && !isInputEventFromLabelClick(ev)) {                                                                            // 2170
      ev.preventDefault();                                                                                             // 2171
      ev.stopPropagation();                                                                                            // 2172
      lastLabelClickPos = null;                                                                                        // 2173
    } else {                                                                                                           // 2174
      lastLabelClickPos = null;                                                                                        // 2175
      if (ev.target.tagName.toLowerCase() == 'label') {                                                                // 2176
        lastLabelClickPos = {x: ev.x, y: ev.y};                                                                        // 2177
      }                                                                                                                // 2178
    }                                                                                                                  // 2179
  }                                                                                                                    // 2180
                                                                                                                       // 2181
                                                                                                                       // 2182
  // Listen to all events to cover all platforms.                                                                      // 2183
  var START_EVENTS = 'mousedown touchstart pointerdown';                                                               // 2184
  var MOVE_EVENTS = 'mousemove touchmove pointermove';                                                                 // 2185
  var END_EVENTS = 'mouseup mouseleave touchend touchcancel pointerup pointercancel';                                  // 2186
                                                                                                                       // 2187
  angular.element(document)                                                                                            // 2188
    .on(START_EVENTS, gestureStart)                                                                                    // 2189
    .on(MOVE_EVENTS, gestureMove)                                                                                      // 2190
    .on(END_EVENTS, gestureEnd)                                                                                        // 2191
    // For testing                                                                                                     // 2192
    .on('$$mdGestureReset', function gestureClearCache () {                                                            // 2193
      lastPointer = pointer = null;                                                                                    // 2194
    });                                                                                                                // 2195
                                                                                                                       // 2196
  /*                                                                                                                   // 2197
   * When a DOM event happens, run all registered gesture handlers' lifecycle                                          // 2198
   * methods which match the DOM event.                                                                                // 2199
   * Eg when a 'touchstart' event happens, runHandlers('start') will call and                                          // 2200
   * run `handler.cancel()` and `handler.start()` on all registered handlers.                                          // 2201
   */                                                                                                                  // 2202
  function runHandlers(handlerEvent, event) {                                                                          // 2203
    var handler;                                                                                                       // 2204
    for (var name in HANDLERS) {                                                                                       // 2205
      handler = HANDLERS[name];                                                                                        // 2206
      if( handler instanceof $$MdGestureHandler ) {                                                                    // 2207
                                                                                                                       // 2208
        if (handlerEvent === 'start') {                                                                                // 2209
          // Run cancel to reset any handlers' state                                                                   // 2210
          handler.cancel();                                                                                            // 2211
        }                                                                                                              // 2212
        handler[handlerEvent](event, pointer);                                                                         // 2213
                                                                                                                       // 2214
      }                                                                                                                // 2215
    }                                                                                                                  // 2216
  }                                                                                                                    // 2217
                                                                                                                       // 2218
  /*                                                                                                                   // 2219
   * gestureStart vets if a start event is legitimate (and not part of a 'ghost click' from iOS/Android)               // 2220
   * If it is legitimate, we initiate the pointer state and mark the current pointer's type                            // 2221
   * For example, for a touchstart event, mark the current pointer as a 'touch' pointer, so mouse events               // 2222
   * won't effect it.                                                                                                  // 2223
   */                                                                                                                  // 2224
  function gestureStart(ev) {                                                                                          // 2225
    // If we're already touched down, abort                                                                            // 2226
    if (pointer) return;                                                                                               // 2227
                                                                                                                       // 2228
    var now = +Date.now();                                                                                             // 2229
                                                                                                                       // 2230
    // iOS & old android bug: after a touch event, a click event is sent 350 ms later.                                 // 2231
    // If <400ms have passed, don't allow an event of a different type than the previous event                         // 2232
    if (lastPointer && !typesMatch(ev, lastPointer) && (now - lastPointer.endTime < 1500)) {                           // 2233
      return;                                                                                                          // 2234
    }                                                                                                                  // 2235
                                                                                                                       // 2236
    pointer = makeStartPointer(ev);                                                                                    // 2237
                                                                                                                       // 2238
    runHandlers('start', ev);                                                                                          // 2239
  }                                                                                                                    // 2240
  /*                                                                                                                   // 2241
   * If a move event happens of the right type, update the pointer and run all the move handlers.                      // 2242
   * "of the right type": if a mousemove happens but our pointer started with a touch event, do nothing.               // 2243
   */                                                                                                                  // 2244
  function gestureMove(ev) {                                                                                           // 2245
    if (!pointer || !typesMatch(ev, pointer)) return;                                                                  // 2246
                                                                                                                       // 2247
    updatePointerState(ev, pointer);                                                                                   // 2248
    runHandlers('move', ev);                                                                                           // 2249
  }                                                                                                                    // 2250
  /*                                                                                                                   // 2251
   * If an end event happens of the right type, update the pointer, run endHandlers, and save the pointer as 'lastPointer'
   */                                                                                                                  // 2253
  function gestureEnd(ev) {                                                                                            // 2254
    if (!pointer || !typesMatch(ev, pointer)) return;                                                                  // 2255
                                                                                                                       // 2256
    updatePointerState(ev, pointer);                                                                                   // 2257
    pointer.endTime = +Date.now();                                                                                     // 2258
                                                                                                                       // 2259
    runHandlers('end', ev);                                                                                            // 2260
                                                                                                                       // 2261
    lastPointer = pointer;                                                                                             // 2262
    pointer = null;                                                                                                    // 2263
  }                                                                                                                    // 2264
                                                                                                                       // 2265
}                                                                                                                      // 2266
attachToDocument.$inject = ["$mdGesture", "$$MdGestureHandler"];                                                       // 2267
                                                                                                                       // 2268
// ********************                                                                                                // 2269
// Module Functions                                                                                                    // 2270
// ********************                                                                                                // 2271
                                                                                                                       // 2272
/*                                                                                                                     // 2273
 * Initiate the pointer. x, y, and the pointer's type.                                                                 // 2274
 */                                                                                                                    // 2275
function makeStartPointer(ev) {                                                                                        // 2276
  var point = getEventPoint(ev);                                                                                       // 2277
  var startPointer = {                                                                                                 // 2278
    startTime: +Date.now(),                                                                                            // 2279
    target: ev.target,                                                                                                 // 2280
    // 'p' for pointer events, 'm' for mouse, 't' for touch                                                            // 2281
    type: ev.type.charAt(0)                                                                                            // 2282
  };                                                                                                                   // 2283
  startPointer.startX = startPointer.x = point.pageX;                                                                  // 2284
  startPointer.startY = startPointer.y = point.pageY;                                                                  // 2285
  return startPointer;                                                                                                 // 2286
}                                                                                                                      // 2287
                                                                                                                       // 2288
/*                                                                                                                     // 2289
 * return whether the pointer's type matches the event's type.                                                         // 2290
 * Eg if a touch event happens but the pointer has a mouse type, return false.                                         // 2291
 */                                                                                                                    // 2292
function typesMatch(ev, pointer) {                                                                                     // 2293
  return ev && pointer && ev.type.charAt(0) === pointer.type;                                                          // 2294
}                                                                                                                      // 2295
                                                                                                                       // 2296
/**                                                                                                                    // 2297
 * Gets whether the given event is an input event that was caused by clicking on an                                    // 2298
 * associated label element.                                                                                           // 2299
 *                                                                                                                     // 2300
 * This is necessary because the browser will, upon clicking on a label element, fire an                               // 2301
 * *extra* click event on its associated input (if any). mdGesture is able to flag the label                           // 2302
 * click as with `$material` correctly, but not the second input click.                                                // 2303
 *                                                                                                                     // 2304
 * In order to determine whether an input event is from a label click, we compare the (x, y) for                       // 2305
 * the event to the (x, y) for the most recent label click (which is cleared whenever a non-label                      // 2306
 * click occurs). Unfortunately, there are no event properties that tie the input and the label                        // 2307
 * together (such as relatedTarget).                                                                                   // 2308
 *                                                                                                                     // 2309
 * @param {MouseEvent} event                                                                                           // 2310
 * @returns {boolean}                                                                                                  // 2311
 */                                                                                                                    // 2312
function isInputEventFromLabelClick(event) {                                                                           // 2313
  return lastLabelClickPos                                                                                             // 2314
      && lastLabelClickPos.x == event.x                                                                                // 2315
      && lastLabelClickPos.y == event.y;                                                                               // 2316
}                                                                                                                      // 2317
                                                                                                                       // 2318
/*                                                                                                                     // 2319
 * Update the given pointer based upon the given DOMEvent.                                                             // 2320
 * Distance, velocity, direction, duration, etc                                                                        // 2321
 */                                                                                                                    // 2322
function updatePointerState(ev, pointer) {                                                                             // 2323
  var point = getEventPoint(ev);                                                                                       // 2324
  var x = pointer.x = point.pageX;                                                                                     // 2325
  var y = pointer.y = point.pageY;                                                                                     // 2326
                                                                                                                       // 2327
  pointer.distanceX = x - pointer.startX;                                                                              // 2328
  pointer.distanceY = y - pointer.startY;                                                                              // 2329
  pointer.distance = Math.sqrt(                                                                                        // 2330
    pointer.distanceX * pointer.distanceX + pointer.distanceY * pointer.distanceY                                      // 2331
  );                                                                                                                   // 2332
                                                                                                                       // 2333
  pointer.directionX = pointer.distanceX > 0 ? 'right' : pointer.distanceX < 0 ? 'left' : '';                          // 2334
  pointer.directionY = pointer.distanceY > 0 ? 'down' : pointer.distanceY < 0 ? 'up' : '';                             // 2335
                                                                                                                       // 2336
  pointer.duration = +Date.now() - pointer.startTime;                                                                  // 2337
  pointer.velocityX = pointer.distanceX / pointer.duration;                                                            // 2338
  pointer.velocityY = pointer.distanceY / pointer.duration;                                                            // 2339
}                                                                                                                      // 2340
                                                                                                                       // 2341
/*                                                                                                                     // 2342
 * Normalize the point where the DOM event happened whether it's touch or mouse.                                       // 2343
 * @returns point event obj with pageX and pageY on it.                                                                // 2344
 */                                                                                                                    // 2345
function getEventPoint(ev) {                                                                                           // 2346
  ev = ev.originalEvent || ev; // support jQuery events                                                                // 2347
  return (ev.touches && ev.touches[0]) ||                                                                              // 2348
    (ev.changedTouches && ev.changedTouches[0]) ||                                                                     // 2349
    ev;                                                                                                                // 2350
}                                                                                                                      // 2351
                                                                                                                       // 2352
})();                                                                                                                  // 2353
(function(){                                                                                                           // 2354
"use strict";                                                                                                          // 2355
                                                                                                                       // 2356
angular.module('material.core')                                                                                        // 2357
  .provider('$$interimElement', InterimElementProvider);                                                               // 2358
                                                                                                                       // 2359
/*                                                                                                                     // 2360
 * @ngdoc service                                                                                                      // 2361
 * @name $$interimElement                                                                                              // 2362
 * @module material.core                                                                                               // 2363
 *                                                                                                                     // 2364
 * @description                                                                                                        // 2365
 *                                                                                                                     // 2366
 * Factory that contructs `$$interimElement.$service` services.                                                        // 2367
 * Used internally in material design for elements that appear on screen temporarily.                                  // 2368
 * The service provides a promise-like API for interacting with the temporary                                          // 2369
 * elements.                                                                                                           // 2370
 *                                                                                                                     // 2371
 * ```js                                                                                                               // 2372
 * app.service('$mdToast', function($$interimElement) {                                                                // 2373
 *   var $mdToast = $$interimElement(toastDefaultOptions);                                                             // 2374
 *   return $mdToast;                                                                                                  // 2375
 * });                                                                                                                 // 2376
 * ```                                                                                                                 // 2377
 * @param {object=} defaultOptions Options used by default for the `show` method on the service.                       // 2378
 *                                                                                                                     // 2379
 * @returns {$$interimElement.$service}                                                                                // 2380
 *                                                                                                                     // 2381
 */                                                                                                                    // 2382
                                                                                                                       // 2383
function InterimElementProvider() {                                                                                    // 2384
  createInterimElementProvider.$get = InterimElementFactory;                                                           // 2385
  InterimElementFactory.$inject = ["$document", "$q", "$$q", "$rootScope", "$timeout", "$rootElement", "$animate", "$mdUtil", "$mdCompiler", "$mdTheming", "$injector"];
  return createInterimElementProvider;                                                                                 // 2387
                                                                                                                       // 2388
  /**                                                                                                                  // 2389
   * Returns a new provider which allows configuration of a new interimElement                                         // 2390
   * service. Allows configuration of default options & methods for options,                                           // 2391
   * as well as configuration of 'preset' methods (eg dialog.basic(): basic is a preset method)                        // 2392
   */                                                                                                                  // 2393
  function createInterimElementProvider(interimFactoryName) {                                                          // 2394
    var EXPOSED_METHODS = ['onHide', 'onShow', 'onRemove'];                                                            // 2395
                                                                                                                       // 2396
    var customMethods = {};                                                                                            // 2397
    var providerConfig = {                                                                                             // 2398
      presets: {}                                                                                                      // 2399
    };                                                                                                                 // 2400
                                                                                                                       // 2401
    var provider = {                                                                                                   // 2402
      setDefaults: setDefaults,                                                                                        // 2403
      addPreset: addPreset,                                                                                            // 2404
      addMethod: addMethod,                                                                                            // 2405
      $get: factory                                                                                                    // 2406
    };                                                                                                                 // 2407
                                                                                                                       // 2408
    /**                                                                                                                // 2409
     * all interim elements will come with the 'build' preset                                                          // 2410
     */                                                                                                                // 2411
    provider.addPreset('build', {                                                                                      // 2412
      methods: ['controller', 'controllerAs', 'resolve',                                                               // 2413
        'template', 'templateUrl', 'themable', 'transformTemplate', 'parent']                                          // 2414
    });                                                                                                                // 2415
                                                                                                                       // 2416
    factory.$inject = ["$$interimElement", "$injector"];                                                               // 2417
    return provider;                                                                                                   // 2418
                                                                                                                       // 2419
    /**                                                                                                                // 2420
     * Save the configured defaults to be used when the factory is instantiated                                        // 2421
     */                                                                                                                // 2422
    function setDefaults(definition) {                                                                                 // 2423
      providerConfig.optionsFactory = definition.options;                                                              // 2424
      providerConfig.methods = (definition.methods || []).concat(EXPOSED_METHODS);                                     // 2425
      return provider;                                                                                                 // 2426
    }                                                                                                                  // 2427
                                                                                                                       // 2428
    /**                                                                                                                // 2429
     * Add a method to the factory that isn't specific to any interim element operations                               // 2430
     */                                                                                                                // 2431
                                                                                                                       // 2432
    function addMethod(name, fn) {                                                                                     // 2433
      customMethods[name] = fn;                                                                                        // 2434
      return provider;                                                                                                 // 2435
    }                                                                                                                  // 2436
                                                                                                                       // 2437
    /**                                                                                                                // 2438
     * Save the configured preset to be used when the factory is instantiated                                          // 2439
     */                                                                                                                // 2440
    function addPreset(name, definition) {                                                                             // 2441
      definition = definition || {};                                                                                   // 2442
      definition.methods = definition.methods || [];                                                                   // 2443
      definition.options = definition.options || function() { return {}; };                                            // 2444
                                                                                                                       // 2445
      if (/^cancel|hide|show$/.test(name)) {                                                                           // 2446
        throw new Error("Preset '" + name + "' in " + interimFactoryName + " is reserved!");                           // 2447
      }                                                                                                                // 2448
      if (definition.methods.indexOf('_options') > -1) {                                                               // 2449
        throw new Error("Method '_options' in " + interimFactoryName + " is reserved!");                               // 2450
      }                                                                                                                // 2451
      providerConfig.presets[name] = {                                                                                 // 2452
        methods: definition.methods.concat(EXPOSED_METHODS),                                                           // 2453
        optionsFactory: definition.options,                                                                            // 2454
        argOption: definition.argOption                                                                                // 2455
      };                                                                                                               // 2456
      return provider;                                                                                                 // 2457
    }                                                                                                                  // 2458
                                                                                                                       // 2459
    function addPresetMethod(presetName, methodName, method) {                                                         // 2460
      providerConfig.presets[presetName][methodName] = method;                                                         // 2461
    }                                                                                                                  // 2462
                                                                                                                       // 2463
    /**                                                                                                                // 2464
     * Create a factory that has the given methods & defaults implementing interimElement                              // 2465
     */                                                                                                                // 2466
    /* @ngInject */                                                                                                    // 2467
    function factory($$interimElement, $injector) {                                                                    // 2468
      var defaultMethods;                                                                                              // 2469
      var defaultOptions;                                                                                              // 2470
      var interimElementService = $$interimElement();                                                                  // 2471
                                                                                                                       // 2472
      /*                                                                                                               // 2473
       * publicService is what the developer will be using.                                                            // 2474
       * It has methods hide(), cancel(), show(), build(), and any other                                               // 2475
       * presets which were set during the config phase.                                                               // 2476
       */                                                                                                              // 2477
      var publicService = {                                                                                            // 2478
        hide: interimElementService.hide,                                                                              // 2479
        cancel: interimElementService.cancel,                                                                          // 2480
        show: showInterimElement,                                                                                      // 2481
                                                                                                                       // 2482
        // Special internal method to destroy an interim element without animations                                    // 2483
        // used when navigation changes causes a $scope.$destroy() action                                              // 2484
        destroy : destroyInterimElement                                                                                // 2485
      };                                                                                                               // 2486
                                                                                                                       // 2487
                                                                                                                       // 2488
      defaultMethods = providerConfig.methods || [];                                                                   // 2489
      // This must be invoked after the publicService is initialized                                                   // 2490
      defaultOptions = invokeFactory(providerConfig.optionsFactory, {});                                               // 2491
                                                                                                                       // 2492
      // Copy over the simple custom methods                                                                           // 2493
      angular.forEach(customMethods, function(fn, name) {                                                              // 2494
        publicService[name] = fn;                                                                                      // 2495
      });                                                                                                              // 2496
                                                                                                                       // 2497
      angular.forEach(providerConfig.presets, function(definition, name) {                                             // 2498
        var presetDefaults = invokeFactory(definition.optionsFactory, {});                                             // 2499
        var presetMethods = (definition.methods || []).concat(defaultMethods);                                         // 2500
                                                                                                                       // 2501
        // Every interimElement built with a preset has a field called `$type`,                                        // 2502
        // which matches the name of the preset.                                                                       // 2503
        // Eg in preset 'confirm', options.$type === 'confirm'                                                         // 2504
        angular.extend(presetDefaults, { $type: name });                                                               // 2505
                                                                                                                       // 2506
        // This creates a preset class which has setter methods for every                                              // 2507
        // method given in the `.addPreset()` function, as well as every                                               // 2508
        // method given in the `.setDefaults()` function.                                                              // 2509
        //                                                                                                             // 2510
        // @example                                                                                                    // 2511
        // .setDefaults({                                                                                              // 2512
        //   methods: ['hasBackdrop', 'clickOutsideToClose', 'escapeToClose', 'targetEvent'],                          // 2513
        //   options: dialogDefaultOptions                                                                             // 2514
        // })                                                                                                          // 2515
        // .addPreset('alert', {                                                                                       // 2516
        //   methods: ['title', 'ok'],                                                                                 // 2517
        //   options: alertDialogOptions                                                                               // 2518
        // })                                                                                                          // 2519
        //                                                                                                             // 2520
        // Set values will be passed to the options when interimElement.show() is called.                              // 2521
        function Preset(opts) {                                                                                        // 2522
          this._options = angular.extend({}, presetDefaults, opts);                                                    // 2523
        }                                                                                                              // 2524
        angular.forEach(presetMethods, function(name) {                                                                // 2525
          Preset.prototype[name] = function(value) {                                                                   // 2526
            this._options[name] = value;                                                                               // 2527
            return this;                                                                                               // 2528
          };                                                                                                           // 2529
        });                                                                                                            // 2530
                                                                                                                       // 2531
        // Create shortcut method for one-linear methods                                                               // 2532
        if (definition.argOption) {                                                                                    // 2533
          var methodName = 'show' + name.charAt(0).toUpperCase() + name.slice(1);                                      // 2534
          publicService[methodName] = function(arg) {                                                                  // 2535
            var config = publicService[name](arg);                                                                     // 2536
            return publicService.show(config);                                                                         // 2537
          };                                                                                                           // 2538
        }                                                                                                              // 2539
                                                                                                                       // 2540
        // eg $mdDialog.alert() will return a new alert preset                                                         // 2541
        publicService[name] = function(arg) {                                                                          // 2542
          // If argOption is supplied, eg `argOption: 'content'`, then we assume                                       // 2543
          // if the argument is not an options object then it is the `argOption` option.                               // 2544
          //                                                                                                           // 2545
          // @example `$mdToast.simple('hello')` // sets options.content to hello                                      // 2546
          //                                     // because argOption === 'content'                                    // 2547
          if (arguments.length && definition.argOption &&                                                              // 2548
              !angular.isObject(arg) && !angular.isArray(arg))  {                                                      // 2549
                                                                                                                       // 2550
            return (new Preset())[definition.argOption](arg);                                                          // 2551
                                                                                                                       // 2552
          } else {                                                                                                     // 2553
            return new Preset(arg);                                                                                    // 2554
          }                                                                                                            // 2555
                                                                                                                       // 2556
        };                                                                                                             // 2557
      });                                                                                                              // 2558
                                                                                                                       // 2559
      return publicService;                                                                                            // 2560
                                                                                                                       // 2561
      /**                                                                                                              // 2562
       *                                                                                                               // 2563
       */                                                                                                              // 2564
      function showInterimElement(opts) {                                                                              // 2565
        // opts is either a preset which stores its options on an _options field,                                      // 2566
        // or just an object made up of options                                                                        // 2567
        opts = opts || { };                                                                                            // 2568
        if (opts._options) opts = opts._options;                                                                       // 2569
                                                                                                                       // 2570
        return interimElementService.show(                                                                             // 2571
          angular.extend({}, defaultOptions, opts)                                                                     // 2572
        );                                                                                                             // 2573
      }                                                                                                                // 2574
                                                                                                                       // 2575
      /**                                                                                                              // 2576
       *  Special method to hide and destroy an interimElement WITHOUT                                                 // 2577
       *  any 'leave` or hide animations ( an immediate force hide/remove )                                            // 2578
       *                                                                                                               // 2579
       *  NOTE: This calls the onRemove() subclass method for each component...                                        // 2580
       *  which must have code to respond to `options.$destroy == true`                                                // 2581
       */                                                                                                              // 2582
      function destroyInterimElement(opts) {                                                                           // 2583
          return interimElementService.destroy(opts);                                                                  // 2584
      }                                                                                                                // 2585
                                                                                                                       // 2586
      /**                                                                                                              // 2587
       * Helper to call $injector.invoke with a local of the factory name for                                          // 2588
       * this provider.                                                                                                // 2589
       * If an $mdDialog is providing options for a dialog and tries to inject                                         // 2590
       * $mdDialog, a circular dependency error will happen.                                                           // 2591
       * We get around that by manually injecting $mdDialog as a local.                                                // 2592
       */                                                                                                              // 2593
      function invokeFactory(factory, defaultVal) {                                                                    // 2594
        var locals = {};                                                                                               // 2595
        locals[interimFactoryName] = publicService;                                                                    // 2596
        return $injector.invoke(factory || function() { return defaultVal; }, {}, locals);                             // 2597
      }                                                                                                                // 2598
                                                                                                                       // 2599
    }                                                                                                                  // 2600
                                                                                                                       // 2601
  }                                                                                                                    // 2602
                                                                                                                       // 2603
  /* @ngInject */                                                                                                      // 2604
  function InterimElementFactory($document, $q, $$q, $rootScope, $timeout, $rootElement, $animate,                     // 2605
                                 $mdUtil, $mdCompiler, $mdTheming, $injector ) {                                       // 2606
    return function createInterimElementService() {                                                                    // 2607
      var SHOW_CANCELLED = false;                                                                                      // 2608
                                                                                                                       // 2609
      /*                                                                                                               // 2610
       * @ngdoc service                                                                                                // 2611
       * @name $$interimElement.$service                                                                               // 2612
       *                                                                                                               // 2613
       * @description                                                                                                  // 2614
       * A service used to control inserting and removing an element into the DOM.                                     // 2615
       *                                                                                                               // 2616
       */                                                                                                              // 2617
      var service, stack = [];                                                                                         // 2618
                                                                                                                       // 2619
      // Publish instance $$interimElement service;                                                                    // 2620
      // ... used as $mdDialog, $mdToast, $mdMenu, and $mdSelect                                                       // 2621
                                                                                                                       // 2622
      return service = {                                                                                               // 2623
        show: show,                                                                                                    // 2624
        hide: hide,                                                                                                    // 2625
        cancel: cancel,                                                                                                // 2626
        destroy : destroy,                                                                                             // 2627
        $injector_: $injector                                                                                          // 2628
      };                                                                                                               // 2629
                                                                                                                       // 2630
      /*                                                                                                               // 2631
       * @ngdoc method                                                                                                 // 2632
       * @name $$interimElement.$service#show                                                                          // 2633
       * @kind function                                                                                                // 2634
       *                                                                                                               // 2635
       * @description                                                                                                  // 2636
       * Adds the `$interimElement` to the DOM and returns a special promise that will be resolved or rejected         // 2637
       * with hide or cancel, respectively. To external cancel/hide, developers should use the                         // 2638
       *                                                                                                               // 2639
       * @param {*} options is hashMap of settings                                                                     // 2640
       * @returns a Promise                                                                                            // 2641
       *                                                                                                               // 2642
       */                                                                                                              // 2643
      function show(options) {                                                                                         // 2644
        options = options || {};                                                                                       // 2645
        var interimElement = new InterimElement(options || {});                                                        // 2646
        var hideExisting = !options.skipHide && stack.length ? service.hide() : $q.when(true);                         // 2647
                                                                                                                       // 2648
        // This hide()s only the current interim element before showing the next, new one                              // 2649
        // NOTE: this is not reversible (e.g. interim elements are not stackable)                                      // 2650
                                                                                                                       // 2651
        hideExisting.finally(function() {                                                                              // 2652
                                                                                                                       // 2653
          stack.push(interimElement);                                                                                  // 2654
          interimElement                                                                                               // 2655
            .show()                                                                                                    // 2656
            .catch(function( reason ) {                                                                                // 2657
              //$log.error("InterimElement.show() error: " + reason );                                                 // 2658
              return reason;                                                                                           // 2659
            });                                                                                                        // 2660
                                                                                                                       // 2661
        });                                                                                                            // 2662
                                                                                                                       // 2663
        // Return a promise that will be resolved when the interim                                                     // 2664
        // element is hidden or cancelled...                                                                           // 2665
                                                                                                                       // 2666
        return interimElement.deferred.promise;                                                                        // 2667
      }                                                                                                                // 2668
                                                                                                                       // 2669
      /*                                                                                                               // 2670
       * @ngdoc method                                                                                                 // 2671
       * @name $$interimElement.$service#hide                                                                          // 2672
       * @kind function                                                                                                // 2673
       *                                                                                                               // 2674
       * @description                                                                                                  // 2675
       * Removes the `$interimElement` from the DOM and resolves the promise returned from `show`                      // 2676
       *                                                                                                               // 2677
       * @param {*} resolveParam Data to resolve the promise with                                                      // 2678
       * @returns a Promise that will be resolved after the element has been removed.                                  // 2679
       *                                                                                                               // 2680
       */                                                                                                              // 2681
      function hide(reason, options) {                                                                                 // 2682
        if ( !stack.length ) return $q.when(reason);                                                                   // 2683
        options = options || {};                                                                                       // 2684
                                                                                                                       // 2685
        if (options.closeAll) {                                                                                        // 2686
          var promise = $q.all(stack.reverse().map(closeElement));                                                     // 2687
          stack = [];                                                                                                  // 2688
          return promise;                                                                                              // 2689
        } else if (options.closeTo !== undefined) {                                                                    // 2690
          return $q.all(stack.splice(options.closeTo).map(closeElement));                                              // 2691
        } else {                                                                                                       // 2692
          var interim = stack.pop();                                                                                   // 2693
          return closeElement(interim);                                                                                // 2694
        }                                                                                                              // 2695
                                                                                                                       // 2696
        function closeElement(interim) {                                                                               // 2697
          interim                                                                                                      // 2698
            .remove(reason, false, options || { })                                                                     // 2699
            .catch(function( reason ) {                                                                                // 2700
              //$log.error("InterimElement.hide() error: " + reason );                                                 // 2701
              return reason;                                                                                           // 2702
            });                                                                                                        // 2703
          return interim.deferred.promise;                                                                             // 2704
        }                                                                                                              // 2705
      }                                                                                                                // 2706
                                                                                                                       // 2707
      /*                                                                                                               // 2708
       * @ngdoc method                                                                                                 // 2709
       * @name $$interimElement.$service#cancel                                                                        // 2710
       * @kind function                                                                                                // 2711
       *                                                                                                               // 2712
       * @description                                                                                                  // 2713
       * Removes the `$interimElement` from the DOM and rejects the promise returned from `show`                       // 2714
       *                                                                                                               // 2715
       * @param {*} reason Data to reject the promise with                                                             // 2716
       * @returns Promise that will be resolved after the element has been removed.                                    // 2717
       *                                                                                                               // 2718
       */                                                                                                              // 2719
      function cancel(reason, options) {                                                                               // 2720
        var interim = stack.shift();                                                                                   // 2721
        if ( !interim ) return $q.when(reason);                                                                        // 2722
                                                                                                                       // 2723
        interim                                                                                                        // 2724
          .remove(reason, true, options || { })                                                                        // 2725
          .catch(function( reason ) {                                                                                  // 2726
            //$log.error("InterimElement.cancel() error: " + reason );                                                 // 2727
            return reason;                                                                                             // 2728
          });                                                                                                          // 2729
                                                                                                                       // 2730
        return interim.deferred.promise;                                                                               // 2731
      }                                                                                                                // 2732
                                                                                                                       // 2733
      /*                                                                                                               // 2734
       * Special method to quick-remove the interim element without animations                                         // 2735
       * Note: interim elements are in "interim containers"                                                            // 2736
       */                                                                                                              // 2737
      function destroy(target) {                                                                                       // 2738
        var interim = !target ? stack.shift() : null;                                                                  // 2739
        var cntr = angular.element(target).length ? angular.element(target)[0].parentNode : null;                      // 2740
                                                                                                                       // 2741
        if (cntr) {                                                                                                    // 2742
            // Try to find the interim element in the stack which corresponds to the supplied DOM element.             // 2743
            var filtered = stack.filter(function(entry) {                                                              // 2744
                  var currNode = entry.options.element[0];                                                             // 2745
                  return  (currNode === cntr);                                                                         // 2746
                });                                                                                                    // 2747
                                                                                                                       // 2748
            // Note: this function might be called when the element already has been removed, in which                 // 2749
            //       case we won't find any matches. That's ok.                                                        // 2750
            if (filtered.length > 0) {                                                                                 // 2751
              interim = filtered[0];                                                                                   // 2752
              stack.splice(stack.indexOf(interim), 1);                                                                 // 2753
            }                                                                                                          // 2754
        }                                                                                                              // 2755
                                                                                                                       // 2756
        return interim ? interim.remove(SHOW_CANCELLED, false, {'$destroy':true}) : $q.when(SHOW_CANCELLED);           // 2757
      }                                                                                                                // 2758
                                                                                                                       // 2759
      /*                                                                                                               // 2760
       * Internal Interim Element Object                                                                               // 2761
       * Used internally to manage the DOM element and related data                                                    // 2762
       */                                                                                                              // 2763
      function InterimElement(options) {                                                                               // 2764
        var self, element, showAction = $q.when(true);                                                                 // 2765
                                                                                                                       // 2766
        options = configureScopeAndTransitions(options);                                                               // 2767
                                                                                                                       // 2768
        return self = {                                                                                                // 2769
          options : options,                                                                                           // 2770
          deferred: $q.defer(),                                                                                        // 2771
          show    : createAndTransitionIn,                                                                             // 2772
          remove  : transitionOutAndRemove                                                                             // 2773
        };                                                                                                             // 2774
                                                                                                                       // 2775
        /**                                                                                                            // 2776
         * Compile, link, and show this interim element                                                                // 2777
         * Use optional autoHided and transition-in effects                                                            // 2778
         */                                                                                                            // 2779
        function createAndTransitionIn() {                                                                             // 2780
          return $q(function(resolve, reject){                                                                         // 2781
                                                                                                                       // 2782
            compileElement(options)                                                                                    // 2783
              .then(function( compiledData ) {                                                                         // 2784
                element = linkElement( compiledData, options );                                                        // 2785
                                                                                                                       // 2786
                showAction = showElement(element, options, compiledData.controller)                                    // 2787
                  .then(resolve, rejectAll );                                                                          // 2788
                                                                                                                       // 2789
              }, rejectAll);                                                                                           // 2790
                                                                                                                       // 2791
            function rejectAll(fault) {                                                                                // 2792
              // Force the '$md<xxx>.show()' promise to reject                                                         // 2793
              self.deferred.reject(fault);                                                                             // 2794
                                                                                                                       // 2795
              // Continue rejection propagation                                                                        // 2796
              reject(fault);                                                                                           // 2797
            }                                                                                                          // 2798
          });                                                                                                          // 2799
        }                                                                                                              // 2800
                                                                                                                       // 2801
        /**                                                                                                            // 2802
         * After the show process has finished/rejected:                                                               // 2803
         * - announce 'removing',                                                                                      // 2804
         * - perform the transition-out, and                                                                           // 2805
         * - perform optional clean up scope.                                                                          // 2806
         */                                                                                                            // 2807
        function transitionOutAndRemove(response, isCancelled, opts) {                                                 // 2808
                                                                                                                       // 2809
          // abort if the show() and compile failed                                                                    // 2810
          if ( !element ) return $q.when(false);                                                                       // 2811
                                                                                                                       // 2812
          options = angular.extend(options || {}, opts || {});                                                         // 2813
          options.cancelAutoHide && options.cancelAutoHide();                                                          // 2814
          options.element.triggerHandler('$mdInterimElementRemove');                                                   // 2815
                                                                                                                       // 2816
          if ( options.$destroy === true ) {                                                                           // 2817
                                                                                                                       // 2818
            return hideElement(options.element, options).then(function(){                                              // 2819
              (isCancelled && rejectAll(response)) || resolveAll(response);                                            // 2820
            });                                                                                                        // 2821
                                                                                                                       // 2822
          } else {                                                                                                     // 2823
                                                                                                                       // 2824
            $q.when(showAction)                                                                                        // 2825
                .finally(function() {                                                                                  // 2826
                  hideElement(options.element, options).then(function() {                                              // 2827
                                                                                                                       // 2828
                    (isCancelled && rejectAll(response)) || resolveAll(response);                                      // 2829
                                                                                                                       // 2830
                  }, rejectAll);                                                                                       // 2831
                });                                                                                                    // 2832
                                                                                                                       // 2833
            return self.deferred.promise;                                                                              // 2834
          }                                                                                                            // 2835
                                                                                                                       // 2836
                                                                                                                       // 2837
          /**                                                                                                          // 2838
           * The `show()` returns a promise that will be resolved when the interim                                     // 2839
           * element is hidden or cancelled...                                                                         // 2840
           */                                                                                                          // 2841
          function resolveAll(response) {                                                                              // 2842
            self.deferred.resolve(response);                                                                           // 2843
          }                                                                                                            // 2844
                                                                                                                       // 2845
          /**                                                                                                          // 2846
           * Force the '$md<xxx>.show()' promise to reject                                                             // 2847
           */                                                                                                          // 2848
          function rejectAll(fault) {                                                                                  // 2849
            self.deferred.reject(fault);                                                                               // 2850
          }                                                                                                            // 2851
        }                                                                                                              // 2852
                                                                                                                       // 2853
        /**                                                                                                            // 2854
         * Prepare optional isolated scope and prepare $animate with default enter and leave                           // 2855
         * transitions for the new element instance.                                                                   // 2856
         */                                                                                                            // 2857
        function configureScopeAndTransitions(options) {                                                               // 2858
          options = options || { };                                                                                    // 2859
          if ( options.template ) {                                                                                    // 2860
            options.template = $mdUtil.processTemplate(options.template);                                              // 2861
          }                                                                                                            // 2862
                                                                                                                       // 2863
          return angular.extend({                                                                                      // 2864
            preserveScope: false,                                                                                      // 2865
            cancelAutoHide : angular.noop,                                                                             // 2866
            scope: options.scope || $rootScope.$new(options.isolateScope),                                             // 2867
                                                                                                                       // 2868
            /**                                                                                                        // 2869
             * Default usage to enable $animate to transition-in; can be easily overridden via 'options'               // 2870
             */                                                                                                        // 2871
            onShow: function transitionIn(scope, element, options) {                                                   // 2872
              return $animate.enter(element, options.parent);                                                          // 2873
            },                                                                                                         // 2874
                                                                                                                       // 2875
            /**                                                                                                        // 2876
             * Default usage to enable $animate to transition-out; can be easily overridden via 'options'              // 2877
             */                                                                                                        // 2878
            onRemove: function transitionOut(scope, element) {                                                         // 2879
              // Element could be undefined if a new element is shown before                                           // 2880
              // the old one finishes compiling.                                                                       // 2881
              return element && $animate.leave(element) || $q.when();                                                  // 2882
            }                                                                                                          // 2883
          }, options );                                                                                                // 2884
                                                                                                                       // 2885
        }                                                                                                              // 2886
                                                                                                                       // 2887
        /**                                                                                                            // 2888
         * Compile an element with a templateUrl, controller, and locals                                               // 2889
         */                                                                                                            // 2890
        function compileElement(options) {                                                                             // 2891
                                                                                                                       // 2892
          var compiled = !options.skipCompile ? $mdCompiler.compile(options) : null;                                   // 2893
                                                                                                                       // 2894
          return compiled || $q(function (resolve) {                                                                   // 2895
              resolve({                                                                                                // 2896
                locals: {},                                                                                            // 2897
                link: function () {                                                                                    // 2898
                  return options.element;                                                                              // 2899
                }                                                                                                      // 2900
              });                                                                                                      // 2901
            });                                                                                                        // 2902
        }                                                                                                              // 2903
                                                                                                                       // 2904
        /**                                                                                                            // 2905
         *  Link an element with compiled configuration                                                                // 2906
         */                                                                                                            // 2907
        function linkElement(compileData, options){                                                                    // 2908
          angular.extend(compileData.locals, options);                                                                 // 2909
                                                                                                                       // 2910
          var element = compileData.link(options.scope);                                                               // 2911
                                                                                                                       // 2912
          // Search for parent at insertion time, if not specified                                                     // 2913
          options.element = element;                                                                                   // 2914
          options.parent = findParent(element, options);                                                               // 2915
          if (options.themable) $mdTheming(element);                                                                   // 2916
                                                                                                                       // 2917
          return element;                                                                                              // 2918
        }                                                                                                              // 2919
                                                                                                                       // 2920
        /**                                                                                                            // 2921
         * Search for parent at insertion time, if not specified                                                       // 2922
         */                                                                                                            // 2923
        function findParent(element, options) {                                                                        // 2924
          var parent = options.parent;                                                                                 // 2925
                                                                                                                       // 2926
          // Search for parent at insertion time, if not specified                                                     // 2927
          if (angular.isFunction(parent)) {                                                                            // 2928
            parent = parent(options.scope, element, options);                                                          // 2929
          } else if (angular.isString(parent)) {                                                                       // 2930
            parent = angular.element($document[0].querySelector(parent));                                              // 2931
          } else {                                                                                                     // 2932
            parent = angular.element(parent);                                                                          // 2933
          }                                                                                                            // 2934
                                                                                                                       // 2935
          // If parent querySelector/getter function fails, or it's just null,                                         // 2936
          // find a default.                                                                                           // 2937
          if (!(parent || {}).length) {                                                                                // 2938
            var el;                                                                                                    // 2939
            if ($rootElement[0] && $rootElement[0].querySelector) {                                                    // 2940
              el = $rootElement[0].querySelector(':not(svg) > body');                                                  // 2941
            }                                                                                                          // 2942
            if (!el) el = $rootElement[0];                                                                             // 2943
            if (el.nodeName == '#comment') {                                                                           // 2944
              el = $document[0].body;                                                                                  // 2945
            }                                                                                                          // 2946
            return angular.element(el);                                                                                // 2947
          }                                                                                                            // 2948
                                                                                                                       // 2949
          return parent;                                                                                               // 2950
        }                                                                                                              // 2951
                                                                                                                       // 2952
        /**                                                                                                            // 2953
         * If auto-hide is enabled, start timer and prepare cancel function                                            // 2954
         */                                                                                                            // 2955
        function startAutoHide() {                                                                                     // 2956
          var autoHideTimer, cancelAutoHide = angular.noop;                                                            // 2957
                                                                                                                       // 2958
          if (options.hideDelay) {                                                                                     // 2959
            autoHideTimer = $timeout(service.hide, options.hideDelay) ;                                                // 2960
            cancelAutoHide = function() {                                                                              // 2961
              $timeout.cancel(autoHideTimer);                                                                          // 2962
            }                                                                                                          // 2963
          }                                                                                                            // 2964
                                                                                                                       // 2965
          // Cache for subsequent use                                                                                  // 2966
          options.cancelAutoHide = function() {                                                                        // 2967
            cancelAutoHide();                                                                                          // 2968
            options.cancelAutoHide = undefined;                                                                        // 2969
          }                                                                                                            // 2970
        }                                                                                                              // 2971
                                                                                                                       // 2972
        /**                                                                                                            // 2973
         * Show the element ( with transitions), notify complete and start                                             // 2974
         * optional auto-Hide                                                                                          // 2975
         */                                                                                                            // 2976
        function showElement(element, options, controller) {                                                           // 2977
          // Trigger onShowing callback before the `show()` starts                                                     // 2978
          var notifyShowing = options.onShowing || angular.noop;                                                       // 2979
          // Trigger onComplete callback when the `show()` finishes                                                    // 2980
          var notifyComplete = options.onComplete || angular.noop;                                                     // 2981
                                                                                                                       // 2982
          notifyShowing(options.scope, element, options, controller);                                                  // 2983
                                                                                                                       // 2984
          return $q(function (resolve, reject) {                                                                       // 2985
            try {                                                                                                      // 2986
              // Start transitionIn                                                                                    // 2987
              $q.when(options.onShow(options.scope, element, options, controller))                                     // 2988
                .then(function () {                                                                                    // 2989
                  notifyComplete(options.scope, element, options);                                                     // 2990
                  startAutoHide();                                                                                     // 2991
                                                                                                                       // 2992
                  resolve(element);                                                                                    // 2993
                                                                                                                       // 2994
                }, reject );                                                                                           // 2995
                                                                                                                       // 2996
            } catch(e) {                                                                                               // 2997
              reject(e.message);                                                                                       // 2998
            }                                                                                                          // 2999
          });                                                                                                          // 3000
        }                                                                                                              // 3001
                                                                                                                       // 3002
        function hideElement(element, options) {                                                                       // 3003
          var announceRemoving = options.onRemoving || angular.noop;                                                   // 3004
                                                                                                                       // 3005
          return $$q(function (resolve, reject) {                                                                      // 3006
            try {                                                                                                      // 3007
              // Start transitionIn                                                                                    // 3008
              var action = $$q.when( options.onRemove(options.scope, element, options) || true );                      // 3009
                                                                                                                       // 3010
              // Trigger callback *before* the remove operation starts                                                 // 3011
              announceRemoving(element, action);                                                                       // 3012
                                                                                                                       // 3013
              if ( options.$destroy == true ) {                                                                        // 3014
                                                                                                                       // 3015
                // For $destroy, onRemove should be synchronous                                                        // 3016
                resolve(element);                                                                                      // 3017
                                                                                                                       // 3018
              } else {                                                                                                 // 3019
                                                                                                                       // 3020
                // Wait until transition-out is done                                                                   // 3021
                action.then(function () {                                                                              // 3022
                                                                                                                       // 3023
                  if (!options.preserveScope && options.scope ) {                                                      // 3024
                    options.scope.$destroy();                                                                          // 3025
                  }                                                                                                    // 3026
                                                                                                                       // 3027
                  resolve(element);                                                                                    // 3028
                                                                                                                       // 3029
                }, reject );                                                                                           // 3030
              }                                                                                                        // 3031
                                                                                                                       // 3032
            } catch(e) {                                                                                               // 3033
              reject(e.message);                                                                                       // 3034
            }                                                                                                          // 3035
          });                                                                                                          // 3036
        }                                                                                                              // 3037
                                                                                                                       // 3038
      }                                                                                                                // 3039
    };                                                                                                                 // 3040
                                                                                                                       // 3041
  }                                                                                                                    // 3042
                                                                                                                       // 3043
}                                                                                                                      // 3044
                                                                                                                       // 3045
})();                                                                                                                  // 3046
(function(){                                                                                                           // 3047
"use strict";                                                                                                          // 3048
                                                                                                                       // 3049
(function() {                                                                                                          // 3050
  'use strict';                                                                                                        // 3051
                                                                                                                       // 3052
  var $mdUtil, $interpolate, $log;                                                                                     // 3053
                                                                                                                       // 3054
  var SUFFIXES = /(-gt)?-(sm|md|lg|print)/g;                                                                           // 3055
  var WHITESPACE = /\s+/g;                                                                                             // 3056
                                                                                                                       // 3057
  var FLEX_OPTIONS = ['grow', 'initial', 'auto', 'none', 'noshrink', 'nogrow' ];                                       // 3058
  var LAYOUT_OPTIONS = ['row', 'column'];                                                                              // 3059
  var ALIGNMENT_MAIN_AXIS= [ "", "start", "center", "end", "stretch", "space-around", "space-between" ];               // 3060
  var ALIGNMENT_CROSS_AXIS= [ "", "start", "center", "end", "stretch" ];                                               // 3061
                                                                                                                       // 3062
  var config = {                                                                                                       // 3063
    /**                                                                                                                // 3064
     * Enable directive attribute-to-class conversions                                                                 // 3065
     * Developers can use `<body md-layout-css />` to quickly                                                          // 3066
     * disable the Layout directives and prohibit the injection of Layout classNames                                   // 3067
     */                                                                                                                // 3068
    enabled: true,                                                                                                     // 3069
                                                                                                                       // 3070
    /**                                                                                                                // 3071
     * List of mediaQuery breakpoints and associated suffixes                                                          // 3072
     *                                                                                                                 // 3073
     *   [                                                                                                             // 3074
     *    { suffix: "sm", mediaQuery: "screen and (max-width: 599px)" },                                               // 3075
     *    { suffix: "md", mediaQuery: "screen and (min-width: 600px) and (max-width: 959px)" }                         // 3076
     *   ]                                                                                                             // 3077
     */                                                                                                                // 3078
    breakpoints: []                                                                                                    // 3079
  };                                                                                                                   // 3080
                                                                                                                       // 3081
  registerLayoutAPI( angular.module('material.core.layout', ['ng']) );                                                 // 3082
                                                                                                                       // 3083
  /**                                                                                                                  // 3084
   *   registerLayoutAPI()                                                                                             // 3085
   *                                                                                                                   // 3086
   *   The original ngMaterial Layout solution used attribute selectors and CSS.                                       // 3087
   *                                                                                                                   // 3088
   *  ```html                                                                                                          // 3089
   *  <div layout="column"> My Content </div>                                                                          // 3090
   *  ```                                                                                                              // 3091
   *                                                                                                                   // 3092
   *  ```css                                                                                                           // 3093
   *  [layout] {                                                                                                       // 3094
   *    box-sizing: border-box;                                                                                        // 3095
   *    display:flex;                                                                                                  // 3096
   *  }                                                                                                                // 3097
   *  [layout=column] {                                                                                                // 3098
   *    flex-direction : column                                                                                        // 3099
   *  }                                                                                                                // 3100
   *  ```                                                                                                              // 3101
   *                                                                                                                   // 3102
   *  Use of attribute selectors creates significant performance impacts in some                                       // 3103
   *  browsers... mainly IE.                                                                                           // 3104
   *                                                                                                                   // 3105
   *  This module registers directives that allow the same layout attributes to be                                     // 3106
   *  interpreted and converted to class selectors. The directive will add equivalent classes to each element that     // 3107
   *  contains a Layout directive.                                                                                     // 3108
   *                                                                                                                   // 3109
   * ```html                                                                                                           // 3110
   *   <div layout="column" class="layout layout-column"> My Content </div>                                            // 3111
   *```                                                                                                                // 3112
   *                                                                                                                   // 3113
   *  ```css                                                                                                           // 3114
   *  .layout {                                                                                                        // 3115
   *    box-sizing: border-box;                                                                                        // 3116
   *    display:flex;                                                                                                  // 3117
   *  }                                                                                                                // 3118
   *  .layout-column {                                                                                                 // 3119
   *    flex-direction : column                                                                                        // 3120
   *  }                                                                                                                // 3121
   *  ```                                                                                                              // 3122
   */                                                                                                                  // 3123
  function registerLayoutAPI(module){                                                                                  // 3124
    var PREFIX_REGEXP = /^((?:x|data)[\:\-_])/i;                                                                       // 3125
    var SPECIAL_CHARS_REGEXP = /([\:\-\_]+(.))/g;                                                                      // 3126
                                                                                                                       // 3127
    // NOTE: these are also defined in constants::MEDIA_PRIORITY and constants::MEDIA                                  // 3128
    var BREAKPOINTS     = [ "", "xs", "gt-xs", "sm", "gt-sm", "md", "gt-md", "lg", "gt-lg", "xl", "print" ];           // 3129
    var API_WITH_VALUES = [ "layout", "flex", "flex-order", "flex-offset", "layout-align" ];                           // 3130
    var API_NO_VALUES   = [ "show", "hide", "layout-padding", "layout-margin" ];                                       // 3131
                                                                                                                       // 3132
                                                                                                                       // 3133
    // Build directive registration functions for the standard Layout API... for all breakpoints.                      // 3134
    angular.forEach(BREAKPOINTS, function(mqb) {                                                                       // 3135
                                                                                                                       // 3136
      // Attribute directives with expected, observable value(s)                                                       // 3137
      angular.forEach( API_WITH_VALUES, function(name){                                                                // 3138
        var fullName = mqb ? name + "-" + mqb : name;                                                                  // 3139
        module.directive( directiveNormalize(fullName), attributeWithObserve(fullName));                               // 3140
      });                                                                                                              // 3141
                                                                                                                       // 3142
      // Attribute directives with no expected value(s)                                                                // 3143
      angular.forEach( API_NO_VALUES, function(name){                                                                  // 3144
        var fullName = mqb ? name + "-" + mqb : name;                                                                  // 3145
        module.directive( directiveNormalize(fullName), attributeWithoutValue(fullName));                              // 3146
      });                                                                                                              // 3147
                                                                                                                       // 3148
    });                                                                                                                // 3149
                                                                                                                       // 3150
    // Register other, special directive functions for the Layout features:                                            // 3151
    module                                                                                                             // 3152
      .directive('mdLayoutCss'  , disableLayoutDirective )                                                             // 3153
      .directive('ngCloak'      ,  buildCloakInterceptor('ng-cloak'))                                                  // 3154
                                                                                                                       // 3155
      .directive('layoutWrap'   , attributeWithoutValue('layout-wrap'))                                                // 3156
      .directive('layoutNowrap' , attributeWithoutValue('layout-nowrap'))                                              // 3157
      .directive('layoutNoWrap' , attributeWithoutValue('layout-no-wrap'))                                             // 3158
      .directive('layoutFill'   , attributeWithoutValue('layout-fill'))                                                // 3159
                                                                                                                       // 3160
      // !! Deprecated attributes: use the `-lt` (aka less-than) notations                                             // 3161
                                                                                                                       // 3162
      .directive('layoutLtMd'     , warnAttrNotSupported('layout-lt-md', true))                                        // 3163
      .directive('layoutLtLg'     , warnAttrNotSupported('layout-lt-lg', true))                                        // 3164
      .directive('flexLtMd'       , warnAttrNotSupported('flex-lt-md', true))                                          // 3165
      .directive('flexLtLg'       , warnAttrNotSupported('flex-lt-lg', true))                                          // 3166
                                                                                                                       // 3167
      .directive('layoutAlignLtMd', warnAttrNotSupported('layout-align-lt-md'))                                        // 3168
      .directive('layoutAlignLtLg', warnAttrNotSupported('layout-align-lt-lg'))                                        // 3169
      .directive('flexOrderLtMd'  , warnAttrNotSupported('flex-order-lt-md'))                                          // 3170
      .directive('flexOrderLtLg'  , warnAttrNotSupported('flex-order-lt-lg'))                                          // 3171
      .directive('offsetLtMd'     , warnAttrNotSupported('flex-offset-lt-md'))                                         // 3172
      .directive('offsetLtLg'     , warnAttrNotSupported('flex-offset-lt-lg'))                                         // 3173
                                                                                                                       // 3174
      .directive('hideLtMd'       , warnAttrNotSupported('hide-lt-md'))                                                // 3175
      .directive('hideLtLg'       , warnAttrNotSupported('hide-lt-lg'))                                                // 3176
      .directive('showLtMd'       , warnAttrNotSupported('show-lt-md'))                                                // 3177
      .directive('showLtLg'       , warnAttrNotSupported('show-lt-lg'));                                               // 3178
                                                                                                                       // 3179
    /**                                                                                                                // 3180
     * Converts snake_case to camelCase.                                                                               // 3181
     * Also there is special case for Moz prefix starting with upper case letter.                                      // 3182
     * @param name Name to normalize                                                                                   // 3183
     */                                                                                                                // 3184
    function directiveNormalize(name) {                                                                                // 3185
      return name                                                                                                      // 3186
        .replace(PREFIX_REGEXP, '')                                                                                    // 3187
        .replace(SPECIAL_CHARS_REGEXP, function(_, separator, letter, offset) {                                        // 3188
          return offset ? letter.toUpperCase() : letter;                                                               // 3189
        });                                                                                                            // 3190
    }                                                                                                                  // 3191
                                                                                                                       // 3192
  }                                                                                                                    // 3193
                                                                                                                       // 3194
  /**                                                                                                                  // 3195
   * Special directive that will disable ALL Layout conversions of layout                                              // 3196
   * attribute(s) to classname(s).                                                                                     // 3197
   *                                                                                                                   // 3198
   * <link rel="stylesheet" href="angular-material.min.css">                                                           // 3199
   * <link rel="stylesheet" href="angular-material.layout.css">                                                        // 3200
   *                                                                                                                   // 3201
   * <body md-layout-css>                                                                                              // 3202
   *  ...                                                                                                              // 3203
   * </body>                                                                                                           // 3204
   *                                                                                                                   // 3205
   * Note: Using md-layout-css directive requires the developer to load the Material                                   // 3206
   * Layout Attribute stylesheet (which only uses attribute selectors):                                                // 3207
   *                                                                                                                   // 3208
   *       `angular-material.layout.css`                                                                               // 3209
   *                                                                                                                   // 3210
   * Another option is to use the LayoutProvider to configure and disable the attribute                                // 3211
   * conversions; this would obviate the use of the `md-layout-css` directive                                          // 3212
   *                                                                                                                   // 3213
   */                                                                                                                  // 3214
  function disableLayoutDirective() {                                                                                  // 3215
    return {                                                                                                           // 3216
      restrict : 'A',                                                                                                  // 3217
      priority : '900',                                                                                                // 3218
      compile  : function(element, attr) {                                                                             // 3219
        config.enabled = false;                                                                                        // 3220
        return angular.noop;                                                                                           // 3221
      }                                                                                                                // 3222
    };                                                                                                                 // 3223
  }                                                                                                                    // 3224
                                                                                                                       // 3225
  /**                                                                                                                  // 3226
   * Tail-hook ngCloak to delay the uncloaking while Layout transformers                                               // 3227
   * finish processing. Eliminates flicker with Material.Layoouts                                                      // 3228
   */                                                                                                                  // 3229
  function buildCloakInterceptor(className) {                                                                          // 3230
    return [ '$timeout', function($timeout){                                                                           // 3231
      return {                                                                                                         // 3232
        restrict : 'A',                                                                                                // 3233
        priority : -10,   // run after normal ng-cloak                                                                 // 3234
        compile  : function( element ) {                                                                               // 3235
          if (!config.enabled) return angular.noop;                                                                    // 3236
                                                                                                                       // 3237
          // Re-add the cloak                                                                                          // 3238
          element.addClass(className);                                                                                 // 3239
                                                                                                                       // 3240
          return function( scope, element ) {                                                                          // 3241
            // Wait while layout injectors configure, then uncloak                                                     // 3242
            // NOTE: $rAF does not delay enough... and this is a 1x-only event,                                        // 3243
            //       $timeout is acceptable.                                                                           // 3244
            $timeout( function(){                                                                                      // 3245
              element.removeClass(className);                                                                          // 3246
            }, 10, false);                                                                                             // 3247
          };                                                                                                           // 3248
        }                                                                                                              // 3249
      };                                                                                                               // 3250
    }];                                                                                                                // 3251
  }                                                                                                                    // 3252
                                                                                                                       // 3253
                                                                                                                       // 3254
  // *********************************************************************************                                 // 3255
  //                                                                                                                   // 3256
  // These functions create registration functions for ngMaterial Layout attribute directives                          // 3257
  // This provides easy translation to switch ngMaterial attribute selectors to                                        // 3258
  // CLASS selectors and directives; which has huge performance implications                                           // 3259
  // for IE Browsers                                                                                                   // 3260
  //                                                                                                                   // 3261
  // *********************************************************************************                                 // 3262
                                                                                                                       // 3263
  /**                                                                                                                  // 3264
   * Creates a directive registration function where a possible dynamic attribute                                      // 3265
   * value will be observed/watched.                                                                                   // 3266
   * @param {string} className attribute name; eg `layout-gt-md` with value ="row"                                     // 3267
   */                                                                                                                  // 3268
  function attributeWithObserve(className) {                                                                           // 3269
                                                                                                                       // 3270
    return ['$mdUtil', '$interpolate', "$log", function(_$mdUtil_, _$interpolate_, _$log_) {                           // 3271
      $mdUtil = _$mdUtil_;                                                                                             // 3272
      $interpolate = _$interpolate_;                                                                                   // 3273
      $log = _$log_;                                                                                                   // 3274
                                                                                                                       // 3275
      return {                                                                                                         // 3276
        restrict: 'A',                                                                                                 // 3277
        compile: function(element, attr) {                                                                             // 3278
          var linkFn;                                                                                                  // 3279
          if (config.enabled) {                                                                                        // 3280
            // immediately replace static (non-interpolated) invalid values...                                         // 3281
                                                                                                                       // 3282
            validateAttributeUsage(className, attr, element, $log);                                                    // 3283
                                                                                                                       // 3284
            validateAttributeValue( className,                                                                         // 3285
              getNormalizedAttrValue(className, attr, ""),                                                             // 3286
              buildUpdateFn(element, className, attr)                                                                  // 3287
            );                                                                                                         // 3288
                                                                                                                       // 3289
            linkFn = translateWithValueToCssClass;                                                                     // 3290
          }                                                                                                            // 3291
                                                                                                                       // 3292
          // Use for postLink to account for transforms after ng-transclude.                                           // 3293
          return linkFn || angular.noop;                                                                               // 3294
        }                                                                                                              // 3295
      };                                                                                                               // 3296
    }];                                                                                                                // 3297
                                                                                                                       // 3298
    /**                                                                                                                // 3299
     * Add as transformed class selector(s), then                                                                      // 3300
     * remove the deprecated attribute selector                                                                        // 3301
     */                                                                                                                // 3302
    function translateWithValueToCssClass(scope, element, attrs) {                                                     // 3303
      var updateFn = updateClassWithValue(element, className, attrs);                                                  // 3304
      var unwatch = attrs.$observe(attrs.$normalize(className), updateFn);                                             // 3305
                                                                                                                       // 3306
      updateFn(getNormalizedAttrValue(className, attrs, ""));                                                          // 3307
      scope.$on("$destroy", function() { unwatch() });                                                                 // 3308
    }                                                                                                                  // 3309
  }                                                                                                                    // 3310
                                                                                                                       // 3311
  /**                                                                                                                  // 3312
   * Creates a registration function for ngMaterial Layout attribute directive.                                        // 3313
   * This is a `simple` transpose of attribute usage to class usage; where we ignore                                   // 3314
   * any attribute value                                                                                               // 3315
   */                                                                                                                  // 3316
  function attributeWithoutValue(className) {                                                                          // 3317
    return ['$mdUtil', '$interpolate', "$log", function(_$mdUtil_, _$interpolate_, _$log_) {                           // 3318
      $mdUtil = _$mdUtil_;                                                                                             // 3319
      $interpolate = _$interpolate_;                                                                                   // 3320
      $log = _$log_;                                                                                                   // 3321
                                                                                                                       // 3322
      return {                                                                                                         // 3323
        restrict: 'A',                                                                                                 // 3324
        compile: function(element, attr) {                                                                             // 3325
          var linkFn;                                                                                                  // 3326
          if (config.enabled) {                                                                                        // 3327
            // immediately replace static (non-interpolated) invalid values...                                         // 3328
                                                                                                                       // 3329
            validateAttributeValue( className,                                                                         // 3330
              getNormalizedAttrValue(className, attr, ""),                                                             // 3331
              buildUpdateFn(element, className, attr)                                                                  // 3332
            );                                                                                                         // 3333
                                                                                                                       // 3334
            translateToCssClass(null, element);                                                                        // 3335
                                                                                                                       // 3336
            // Use for postLink to account for transforms after ng-transclude.                                         // 3337
            linkFn = translateToCssClass;                                                                              // 3338
          }                                                                                                            // 3339
                                                                                                                       // 3340
          return linkFn || angular.noop;                                                                               // 3341
        }                                                                                                              // 3342
      };                                                                                                               // 3343
    }];                                                                                                                // 3344
                                                                                                                       // 3345
    /**                                                                                                                // 3346
     * Add as transformed class selector, then                                                                         // 3347
     * remove the deprecated attribute selector                                                                        // 3348
     */                                                                                                                // 3349
    function translateToCssClass(scope, element) {                                                                     // 3350
      element.addClass(className);                                                                                     // 3351
    }                                                                                                                  // 3352
  }                                                                                                                    // 3353
                                                                                                                       // 3354
                                                                                                                       // 3355
                                                                                                                       // 3356
  /**                                                                                                                  // 3357
   * After link-phase, do NOT remove deprecated layout attribute selector.                                             // 3358
   * Instead watch the attribute so interpolated data-bindings to layout                                               // 3359
   * selectors will continue to be supported.                                                                          // 3360
   *                                                                                                                   // 3361
   * $observe() the className and update with new class (after removing the last one)                                  // 3362
   *                                                                                                                   // 3363
   * e.g. `layout="{{layoutDemo.direction}}"` will update...                                                           // 3364
   *                                                                                                                   // 3365
   * NOTE: The value must match one of the specified styles in the CSS.                                                // 3366
   * For example `flex-gt-md="{{size}}`  where `scope.size == 47` will NOT work since                                  // 3367
   * only breakpoints for 0, 5, 10, 15... 100, 33, 34, 66, 67 are defined.                                             // 3368
   *                                                                                                                   // 3369
   */                                                                                                                  // 3370
  function updateClassWithValue(element, className) {                                                                  // 3371
    var lastClass;                                                                                                     // 3372
                                                                                                                       // 3373
    return function updateClassFn(newValue) {                                                                          // 3374
      var value = validateAttributeValue(className, newValue || "");                                                   // 3375
      if ( angular.isDefined(value) ) {                                                                                // 3376
        if (lastClass) element.removeClass(lastClass);                                                                 // 3377
        lastClass = !value ? className : className + "-" + value.replace(WHITESPACE, "-");                             // 3378
        element.addClass(lastClass);                                                                                   // 3379
      }                                                                                                                // 3380
    };                                                                                                                 // 3381
  }                                                                                                                    // 3382
                                                                                                                       // 3383
  /**                                                                                                                  // 3384
   * Provide console warning that this layout attribute has been deprecated                                            // 3385
   *                                                                                                                   // 3386
   */                                                                                                                  // 3387
  function warnAttrNotSupported(className) {                                                                           // 3388
    var parts = className.split("-");                                                                                  // 3389
    return ["$log", function($log) {                                                                                   // 3390
      $log.warn(className + "has been deprecated. Please use a `" + parts[0] + "-gt-<xxx>` variant.");                 // 3391
      return angular.noop;                                                                                             // 3392
    }];                                                                                                                // 3393
  }                                                                                                                    // 3394
                                                                                                                       // 3395
  /**                                                                                                                  // 3396
   * Centralize warnings for known flexbox issues (especially IE-related issues)                                       // 3397
   */                                                                                                                  // 3398
  function validateAttributeUsage(className, attr, element, $log){                                                     // 3399
    var message, usage, url;                                                                                           // 3400
    var nodeName = element[0].nodeName.toLowerCase();                                                                  // 3401
                                                                                                                       // 3402
    switch(className.replace(SUFFIXES,"")) {                                                                           // 3403
      case "flex":                                                                                                     // 3404
        if ((nodeName == "md-button") || (nodeName == "fieldset")){                                                    // 3405
          // @see https://github.com/philipwalton/flexbugs#9-some-html-elements-cant-be-flex-containers                // 3406
          // Use <div flex> wrapper inside (preferred) or outside                                                      // 3407
                                                                                                                       // 3408
          usage = "<" + nodeName + " " + className + "></" + nodeName + ">";                                           // 3409
          url = "https://github.com/philipwalton/flexbugs#9-some-html-elements-cant-be-flex-containers";               // 3410
          message = "Markup '{0}' may not work as expected in IE Browsers. Consult '{1}' for details.";                // 3411
                                                                                                                       // 3412
          $log.warn( $mdUtil.supplant(message, [usage, url]) );                                                        // 3413
        }                                                                                                              // 3414
    }                                                                                                                  // 3415
                                                                                                                       // 3416
  }                                                                                                                    // 3417
                                                                                                                       // 3418
                                                                                                                       // 3419
  /**                                                                                                                  // 3420
   * For the Layout attribute value, validate or replace with default                                                  // 3421
   * fallback value                                                                                                    // 3422
   */                                                                                                                  // 3423
  function validateAttributeValue(className, value, updateFn) {                                                        // 3424
    var origValue = value;                                                                                             // 3425
                                                                                                                       // 3426
    if (!needsInterpolation(value)) {                                                                                  // 3427
      switch (className.replace(SUFFIXES,"")) {                                                                        // 3428
        case 'layout'        :                                                                                         // 3429
          if ( !findIn(value, LAYOUT_OPTIONS) ) {                                                                      // 3430
            value = LAYOUT_OPTIONS[0];    // 'row';                                                                    // 3431
          }                                                                                                            // 3432
          break;                                                                                                       // 3433
                                                                                                                       // 3434
        case 'flex'          :                                                                                         // 3435
          if (!findIn(value, FLEX_OPTIONS)) {                                                                          // 3436
            if (isNaN(value)) {                                                                                        // 3437
              value = '';                                                                                              // 3438
            }                                                                                                          // 3439
          }                                                                                                            // 3440
          break;                                                                                                       // 3441
                                                                                                                       // 3442
        case 'flex-offset' :                                                                                           // 3443
        case 'flex-order'    :                                                                                         // 3444
          if (!value || isNaN(+value)) {                                                                               // 3445
            value = '0';                                                                                               // 3446
          }                                                                                                            // 3447
          break;                                                                                                       // 3448
                                                                                                                       // 3449
        case 'layout-align'  :                                                                                         // 3450
          var axis = extractAlignAxis(value);                                                                          // 3451
          value = $mdUtil.supplant("{main}-{cross}",axis);                                                             // 3452
          break;                                                                                                       // 3453
                                                                                                                       // 3454
        case 'layout-padding' :                                                                                        // 3455
        case 'layout-margin'  :                                                                                        // 3456
        case 'layout-fill'    :                                                                                        // 3457
        case 'layout-wrap'    :                                                                                        // 3458
        case 'layout-nowrap'  :                                                                                        // 3459
        case 'layout-nowrap' :                                                                                         // 3460
          value = '';                                                                                                  // 3461
          break;                                                                                                       // 3462
      }                                                                                                                // 3463
                                                                                                                       // 3464
      if (value != origValue) {                                                                                        // 3465
        (updateFn || angular.noop)(value);                                                                             // 3466
      }                                                                                                                // 3467
    }                                                                                                                  // 3468
                                                                                                                       // 3469
    return value;                                                                                                      // 3470
  }                                                                                                                    // 3471
                                                                                                                       // 3472
  /**                                                                                                                  // 3473
   * Replace current attribute value with fallback value                                                               // 3474
   */                                                                                                                  // 3475
  function buildUpdateFn(element, className, attrs) {                                                                  // 3476
    return function updateAttrValue(fallback) {                                                                        // 3477
      if (!needsInterpolation(fallback)) {                                                                             // 3478
        // Do not modify the element's attribute value; so                                                             // 3479
        // uses '<ui-layout layout="/api/sidebar.html" />' will not                                                    // 3480
        // be affected. Just update the attrs value.                                                                   // 3481
        attrs[attrs.$normalize(className)] = fallback;                                                                 // 3482
      }                                                                                                                // 3483
    };                                                                                                                 // 3484
  }                                                                                                                    // 3485
                                                                                                                       // 3486
  /**                                                                                                                  // 3487
   * See if the original value has interpolation symbols:                                                              // 3488
   * e.g.  flex-gt-md="{{triggerPoint}}"                                                                               // 3489
   */                                                                                                                  // 3490
  function needsInterpolation(value) {                                                                                 // 3491
    return (value || "").indexOf($interpolate.startSymbol()) > -1;                                                     // 3492
  }                                                                                                                    // 3493
                                                                                                                       // 3494
  function getNormalizedAttrValue(className, attrs, defaultVal) {                                                      // 3495
    var normalizedAttr = attrs.$normalize(className);                                                                  // 3496
    return attrs[normalizedAttr] ? attrs[normalizedAttr].replace(WHITESPACE, "-") : defaultVal || null;                // 3497
  }                                                                                                                    // 3498
                                                                                                                       // 3499
  function findIn(item, list, replaceWith) {                                                                           // 3500
    item = replaceWith && item ? item.replace(WHITESPACE, replaceWith) : item;                                         // 3501
                                                                                                                       // 3502
    var found = false;                                                                                                 // 3503
    if (item) {                                                                                                        // 3504
      list.forEach(function(it) {                                                                                      // 3505
        it = replaceWith ? it.replace(WHITESPACE, replaceWith) : it;                                                   // 3506
        found = found || (it === item);                                                                                // 3507
      });                                                                                                              // 3508
    }                                                                                                                  // 3509
    return found;                                                                                                      // 3510
  }                                                                                                                    // 3511
                                                                                                                       // 3512
  function extractAlignAxis(attrValue) {                                                                               // 3513
    var axis = {                                                                                                       // 3514
      main : "start",                                                                                                  // 3515
      cross: "stretch"                                                                                                 // 3516
    }, values;                                                                                                         // 3517
                                                                                                                       // 3518
    attrValue = (attrValue || "");                                                                                     // 3519
                                                                                                                       // 3520
    if ( attrValue.indexOf("-") == 0 || attrValue.indexOf(" ") == 0) {                                                 // 3521
      // For missing main-axis values                                                                                  // 3522
      attrValue = "none" + attrValue;                                                                                  // 3523
    }                                                                                                                  // 3524
                                                                                                                       // 3525
    values = attrValue.toLowerCase().trim().replace(WHITESPACE, "-").split("-");                                       // 3526
    if ( values.length && (values[0] === "space") ) {                                                                  // 3527
      // for main-axis values of "space-around" or "space-between"                                                     // 3528
      values = [ values[0]+"-"+values[1],values[2] ];                                                                  // 3529
    }                                                                                                                  // 3530
                                                                                                                       // 3531
    if ( values.length > 0 ) axis.main  = values[0] || axis.main;                                                      // 3532
    if ( values.length > 1 ) axis.cross = values[1] || axis.cross;                                                     // 3533
                                                                                                                       // 3534
    if ( ALIGNMENT_MAIN_AXIS.indexOf(axis.main) < 0 )   axis.main = "start";                                           // 3535
    if ( ALIGNMENT_CROSS_AXIS.indexOf(axis.cross) < 0 ) axis.cross = "stretch";                                        // 3536
                                                                                                                       // 3537
    return axis;                                                                                                       // 3538
  }                                                                                                                    // 3539
                                                                                                                       // 3540
                                                                                                                       // 3541
})();                                                                                                                  // 3542
                                                                                                                       // 3543
})();                                                                                                                  // 3544
(function(){                                                                                                           // 3545
"use strict";                                                                                                          // 3546
                                                                                                                       // 3547
  /**                                                                                                                  // 3548
   * @ngdoc module                                                                                                     // 3549
   * @name material.core.componentRegistry                                                                             // 3550
   *                                                                                                                   // 3551
   * @description                                                                                                      // 3552
   * A component instance registration service.                                                                        // 3553
   * Note: currently this as a private service in the SideNav component.                                               // 3554
   */                                                                                                                  // 3555
  angular.module('material.core')                                                                                      // 3556
    .factory('$mdComponentRegistry', ComponentRegistry);                                                               // 3557
                                                                                                                       // 3558
  /*                                                                                                                   // 3559
   * @private                                                                                                          // 3560
   * @ngdoc factory                                                                                                    // 3561
   * @name ComponentRegistry                                                                                           // 3562
   * @module material.core.componentRegistry                                                                           // 3563
   *                                                                                                                   // 3564
   */                                                                                                                  // 3565
  function ComponentRegistry($log, $q) {                                                                               // 3566
                                                                                                                       // 3567
    var self;                                                                                                          // 3568
    var instances = [ ];                                                                                               // 3569
    var pendings = { };                                                                                                // 3570
                                                                                                                       // 3571
    return self = {                                                                                                    // 3572
      /**                                                                                                              // 3573
       * Used to print an error when an instance for a handle isn't found.                                             // 3574
       */                                                                                                              // 3575
      notFoundError: function(handle) {                                                                                // 3576
        $log.error('No instance found for handle', handle);                                                            // 3577
      },                                                                                                               // 3578
      /**                                                                                                              // 3579
       * Return all registered instances as an array.                                                                  // 3580
       */                                                                                                              // 3581
      getInstances: function() {                                                                                       // 3582
        return instances;                                                                                              // 3583
      },                                                                                                               // 3584
                                                                                                                       // 3585
      /**                                                                                                              // 3586
       * Get a registered instance.                                                                                    // 3587
       * @param handle the String handle to look up for a registered instance.                                         // 3588
       */                                                                                                              // 3589
      get: function(handle) {                                                                                          // 3590
        if ( !isValidID(handle) ) return null;                                                                         // 3591
                                                                                                                       // 3592
        var i, j, instance;                                                                                            // 3593
        for(i = 0, j = instances.length; i < j; i++) {                                                                 // 3594
          instance = instances[i];                                                                                     // 3595
          if(instance.$$mdHandle === handle) {                                                                         // 3596
            return instance;                                                                                           // 3597
          }                                                                                                            // 3598
        }                                                                                                              // 3599
        return null;                                                                                                   // 3600
      },                                                                                                               // 3601
                                                                                                                       // 3602
      /**                                                                                                              // 3603
       * Register an instance.                                                                                         // 3604
       * @param instance the instance to register                                                                      // 3605
       * @param handle the handle to identify the instance under.                                                      // 3606
       */                                                                                                              // 3607
      register: function(instance, handle) {                                                                           // 3608
        if ( !handle ) return angular.noop;                                                                            // 3609
                                                                                                                       // 3610
        instance.$$mdHandle = handle;                                                                                  // 3611
        instances.push(instance);                                                                                      // 3612
        resolveWhen();                                                                                                 // 3613
                                                                                                                       // 3614
        return deregister;                                                                                             // 3615
                                                                                                                       // 3616
        /**                                                                                                            // 3617
         * Remove registration for an instance                                                                         // 3618
         */                                                                                                            // 3619
        function deregister() {                                                                                        // 3620
          var index = instances.indexOf(instance);                                                                     // 3621
          if (index !== -1) {                                                                                          // 3622
            instances.splice(index, 1);                                                                                // 3623
          }                                                                                                            // 3624
        }                                                                                                              // 3625
                                                                                                                       // 3626
        /**                                                                                                            // 3627
         * Resolve any pending promises for this instance                                                              // 3628
         */                                                                                                            // 3629
        function resolveWhen() {                                                                                       // 3630
          var dfd = pendings[handle];                                                                                  // 3631
          if ( dfd ) {                                                                                                 // 3632
            dfd.resolve( instance );                                                                                   // 3633
            delete pendings[handle];                                                                                   // 3634
          }                                                                                                            // 3635
        }                                                                                                              // 3636
      },                                                                                                               // 3637
                                                                                                                       // 3638
      /**                                                                                                              // 3639
       * Async accessor to registered component instance                                                               // 3640
       * If not available then a promise is created to notify                                                          // 3641
       * all listeners when the instance is registered.                                                                // 3642
       */                                                                                                              // 3643
      when : function(handle) {                                                                                        // 3644
        if ( isValidID(handle) ) {                                                                                     // 3645
          var deferred = $q.defer();                                                                                   // 3646
          var instance = self.get(handle);                                                                             // 3647
                                                                                                                       // 3648
          if ( instance )  {                                                                                           // 3649
            deferred.resolve( instance );                                                                              // 3650
          } else {                                                                                                     // 3651
            pendings[handle] = deferred;                                                                               // 3652
          }                                                                                                            // 3653
                                                                                                                       // 3654
          return deferred.promise;                                                                                     // 3655
        }                                                                                                              // 3656
        return $q.reject("Invalid `md-component-id` value.");                                                          // 3657
      }                                                                                                                // 3658
                                                                                                                       // 3659
    };                                                                                                                 // 3660
                                                                                                                       // 3661
    function isValidID(handle){                                                                                        // 3662
      return handle && (handle !== "");                                                                                // 3663
    }                                                                                                                  // 3664
                                                                                                                       // 3665
  }                                                                                                                    // 3666
  ComponentRegistry.$inject = ["$log", "$q"];                                                                          // 3667
                                                                                                                       // 3668
})();                                                                                                                  // 3669
(function(){                                                                                                           // 3670
"use strict";                                                                                                          // 3671
                                                                                                                       // 3672
(function() {                                                                                                          // 3673
  'use strict';                                                                                                        // 3674
                                                                                                                       // 3675
  /**                                                                                                                  // 3676
   * @ngdoc service                                                                                                    // 3677
   * @name $mdButtonInkRipple                                                                                          // 3678
   * @module material.core                                                                                             // 3679
   *                                                                                                                   // 3680
   * @description                                                                                                      // 3681
   * Provides ripple effects for md-button.  See $mdInkRipple service for all possible configuration options.          // 3682
   *                                                                                                                   // 3683
   * @param {object=} scope Scope within the current context                                                           // 3684
   * @param {object=} element The element the ripple effect should be applied to                                       // 3685
   * @param {object=} options (Optional) Configuration options to override the default ripple configuration            // 3686
   */                                                                                                                  // 3687
                                                                                                                       // 3688
  angular.module('material.core')                                                                                      // 3689
    .factory('$mdButtonInkRipple', MdButtonInkRipple);                                                                 // 3690
                                                                                                                       // 3691
  function MdButtonInkRipple($mdInkRipple) {                                                                           // 3692
    return {                                                                                                           // 3693
      attach: function attachRipple(scope, element, options) {                                                         // 3694
        options = angular.extend(optionsForElement(element), options);                                                 // 3695
                                                                                                                       // 3696
        return $mdInkRipple.attach(scope, element, options);                                                           // 3697
      }                                                                                                                // 3698
    };                                                                                                                 // 3699
                                                                                                                       // 3700
    function optionsForElement(element) {                                                                              // 3701
      if (element.hasClass('md-icon-button')) {                                                                        // 3702
        return {                                                                                                       // 3703
          isMenuItem: element.hasClass('md-menu-item'),                                                                // 3704
          fitRipple: true,                                                                                             // 3705
          center: true                                                                                                 // 3706
        };                                                                                                             // 3707
      } else {                                                                                                         // 3708
        return {                                                                                                       // 3709
          isMenuItem: element.hasClass('md-menu-item'),                                                                // 3710
          dimBackground: true                                                                                          // 3711
        }                                                                                                              // 3712
      }                                                                                                                // 3713
    };                                                                                                                 // 3714
  }                                                                                                                    // 3715
  MdButtonInkRipple.$inject = ["$mdInkRipple"];;                                                                       // 3716
})();                                                                                                                  // 3717
                                                                                                                       // 3718
})();                                                                                                                  // 3719
(function(){                                                                                                           // 3720
"use strict";                                                                                                          // 3721
                                                                                                                       // 3722
(function() {                                                                                                          // 3723
  'use strict';                                                                                                        // 3724
                                                                                                                       // 3725
    /**                                                                                                                // 3726
   * @ngdoc service                                                                                                    // 3727
   * @name $mdCheckboxInkRipple                                                                                        // 3728
   * @module material.core                                                                                             // 3729
   *                                                                                                                   // 3730
   * @description                                                                                                      // 3731
   * Provides ripple effects for md-checkbox.  See $mdInkRipple service for all possible configuration options.        // 3732
   *                                                                                                                   // 3733
   * @param {object=} scope Scope within the current context                                                           // 3734
   * @param {object=} element The element the ripple effect should be applied to                                       // 3735
   * @param {object=} options (Optional) Configuration options to override the defaultripple configuration             // 3736
   */                                                                                                                  // 3737
                                                                                                                       // 3738
  angular.module('material.core')                                                                                      // 3739
    .factory('$mdCheckboxInkRipple', MdCheckboxInkRipple);                                                             // 3740
                                                                                                                       // 3741
  function MdCheckboxInkRipple($mdInkRipple) {                                                                         // 3742
    return {                                                                                                           // 3743
      attach: attach                                                                                                   // 3744
    };                                                                                                                 // 3745
                                                                                                                       // 3746
    function attach(scope, element, options) {                                                                         // 3747
      return $mdInkRipple.attach(scope, element, angular.extend({                                                      // 3748
        center: true,                                                                                                  // 3749
        dimBackground: false,                                                                                          // 3750
        fitRipple: true                                                                                                // 3751
      }, options));                                                                                                    // 3752
    };                                                                                                                 // 3753
  }                                                                                                                    // 3754
  MdCheckboxInkRipple.$inject = ["$mdInkRipple"];;                                                                     // 3755
})();                                                                                                                  // 3756
                                                                                                                       // 3757
})();                                                                                                                  // 3758
(function(){                                                                                                           // 3759
"use strict";                                                                                                          // 3760
                                                                                                                       // 3761
(function() {                                                                                                          // 3762
  'use strict';                                                                                                        // 3763
                                                                                                                       // 3764
  /**                                                                                                                  // 3765
   * @ngdoc service                                                                                                    // 3766
   * @name $mdListInkRipple                                                                                            // 3767
   * @module material.core                                                                                             // 3768
   *                                                                                                                   // 3769
   * @description                                                                                                      // 3770
   * Provides ripple effects for md-list.  See $mdInkRipple service for all possible configuration options.            // 3771
   *                                                                                                                   // 3772
   * @param {object=} scope Scope within the current context                                                           // 3773
   * @param {object=} element The element the ripple effect should be applied to                                       // 3774
   * @param {object=} options (Optional) Configuration options to override the defaultripple configuration             // 3775
   */                                                                                                                  // 3776
                                                                                                                       // 3777
  angular.module('material.core')                                                                                      // 3778
    .factory('$mdListInkRipple', MdListInkRipple);                                                                     // 3779
                                                                                                                       // 3780
  function MdListInkRipple($mdInkRipple) {                                                                             // 3781
    return {                                                                                                           // 3782
      attach: attach                                                                                                   // 3783
    };                                                                                                                 // 3784
                                                                                                                       // 3785
    function attach(scope, element, options) {                                                                         // 3786
      return $mdInkRipple.attach(scope, element, angular.extend({                                                      // 3787
        center: false,                                                                                                 // 3788
        dimBackground: true,                                                                                           // 3789
        outline: false,                                                                                                // 3790
        rippleSize: 'full'                                                                                             // 3791
      }, options));                                                                                                    // 3792
    };                                                                                                                 // 3793
  }                                                                                                                    // 3794
  MdListInkRipple.$inject = ["$mdInkRipple"];;                                                                         // 3795
})();                                                                                                                  // 3796
                                                                                                                       // 3797
})();                                                                                                                  // 3798
(function(){                                                                                                           // 3799
"use strict";                                                                                                          // 3800
                                                                                                                       // 3801
/**                                                                                                                    // 3802
 * @ngdoc module                                                                                                       // 3803
 * @name material.core.ripple                                                                                          // 3804
 * @description                                                                                                        // 3805
 * Ripple                                                                                                              // 3806
 */                                                                                                                    // 3807
angular.module('material.core')                                                                                        // 3808
    .factory('$mdInkRipple', InkRippleService)                                                                         // 3809
    .directive('mdInkRipple', InkRippleDirective)                                                                      // 3810
    .directive('mdNoInk', attrNoDirective)                                                                             // 3811
    .directive('mdNoBar', attrNoDirective)                                                                             // 3812
    .directive('mdNoStretch', attrNoDirective);                                                                        // 3813
                                                                                                                       // 3814
var DURATION = 450;                                                                                                    // 3815
                                                                                                                       // 3816
/**                                                                                                                    // 3817
 * @ngdoc directive                                                                                                    // 3818
 * @name mdInkRipple                                                                                                   // 3819
 * @module material.core.ripple                                                                                        // 3820
 *                                                                                                                     // 3821
 * @description                                                                                                        // 3822
 * The `md-ink-ripple` directive allows you to specify the ripple color or id a ripple is allowed.                     // 3823
 *                                                                                                                     // 3824
 * @param {string|boolean} md-ink-ripple A color string `#FF0000` or boolean (`false` or `0`) for preventing ripple    // 3825
 *                                                                                                                     // 3826
 * @usage                                                                                                              // 3827
 * ### String values                                                                                                   // 3828
 * <hljs lang="html">                                                                                                  // 3829
 *   <ANY md-ink-ripple="#FF0000">                                                                                     // 3830
 *     Ripples in red                                                                                                  // 3831
 *   </ANY>                                                                                                            // 3832
 *                                                                                                                     // 3833
 *   <ANY md-ink-ripple="false">                                                                                       // 3834
 *     Not rippling                                                                                                    // 3835
 *   </ANY>                                                                                                            // 3836
 * </hljs>                                                                                                             // 3837
 *                                                                                                                     // 3838
 * ### Interpolated values                                                                                             // 3839
 * <hljs lang="html">                                                                                                  // 3840
 *   <ANY md-ink-ripple="{{ randomColor() }}">                                                                         // 3841
 *     Ripples with the return value of 'randomColor' function                                                         // 3842
 *   </ANY>                                                                                                            // 3843
 *                                                                                                                     // 3844
 *   <ANY md-ink-ripple="{{ canRipple() }}">                                                                           // 3845
 *     Ripples if 'canRipple' function return value is not 'false' or '0'                                              // 3846
 *   </ANY>                                                                                                            // 3847
 * </hljs>                                                                                                             // 3848
 */                                                                                                                    // 3849
function InkRippleDirective ($mdButtonInkRipple, $mdCheckboxInkRipple) {                                               // 3850
  return {                                                                                                             // 3851
    controller: angular.noop,                                                                                          // 3852
    link:       function (scope, element, attr) {                                                                      // 3853
      attr.hasOwnProperty('mdInkRippleCheckbox')                                                                       // 3854
          ? $mdCheckboxInkRipple.attach(scope, element)                                                                // 3855
          : $mdButtonInkRipple.attach(scope, element);                                                                 // 3856
    }                                                                                                                  // 3857
  };                                                                                                                   // 3858
}                                                                                                                      // 3859
InkRippleDirective.$inject = ["$mdButtonInkRipple", "$mdCheckboxInkRipple"];                                           // 3860
                                                                                                                       // 3861
/**                                                                                                                    // 3862
 * @ngdoc service                                                                                                      // 3863
 * @name $mdInkRipple                                                                                                  // 3864
 * @module material.core.ripple                                                                                        // 3865
 *                                                                                                                     // 3866
 * @description                                                                                                        // 3867
 * `$mdInkRipple` is a service for adding ripples to any element                                                       // 3868
 *                                                                                                                     // 3869
 * @usage                                                                                                              // 3870
 * <hljs lang="js">                                                                                                    // 3871
 * app.factory('$myElementInkRipple', function($mdInkRipple) {                                                         // 3872
 *   return {                                                                                                          // 3873
 *     attach: function (scope, element, options) {                                                                    // 3874
 *       return $mdInkRipple.attach(scope, element, angular.extend({                                                   // 3875
 *         center: false,                                                                                              // 3876
 *         dimBackground: true                                                                                         // 3877
 *       }, options));                                                                                                 // 3878
 *     }                                                                                                               // 3879
 *   };                                                                                                                // 3880
 * });                                                                                                                 // 3881
 *                                                                                                                     // 3882
 * app.controller('myController', function ($scope, $element, $myElementInkRipple) {                                   // 3883
 *   $scope.onClick = function (ev) {                                                                                  // 3884
 *     $myElementInkRipple.attach($scope, angular.element(ev.target), { center: true });                               // 3885
 *   }                                                                                                                 // 3886
 * });                                                                                                                 // 3887
 * </hljs>                                                                                                             // 3888
 */                                                                                                                    // 3889
                                                                                                                       // 3890
/**                                                                                                                    // 3891
 * @ngdoc method                                                                                                       // 3892
 * @name $mdInkRipple#attach                                                                                           // 3893
 *                                                                                                                     // 3894
 * @description                                                                                                        // 3895
 * Attaching given scope, element and options to inkRipple controller                                                  // 3896
 *                                                                                                                     // 3897
 * @param {object=} scope Scope within the current context                                                             // 3898
 * @param {object=} element The element the ripple effect should be applied to                                         // 3899
 * @param {object=} options (Optional) Configuration options to override the defaultRipple configuration               // 3900
 * * `center` -  Whether the ripple should start from the center of the container element                              // 3901
 * * `dimBackground` - Whether the background should be dimmed with the ripple color                                   // 3902
 * * `colorElement` - The element the ripple should take its color from, defined by css property `color`               // 3903
 * * `fitRipple` - Whether the ripple should fill the element                                                          // 3904
 */                                                                                                                    // 3905
function InkRippleService ($injector) {                                                                                // 3906
  return { attach: attach };                                                                                           // 3907
  function attach (scope, element, options) {                                                                          // 3908
    if (element.controller('mdNoInk')) return angular.noop;                                                            // 3909
    return $injector.instantiate(InkRippleCtrl, {                                                                      // 3910
      $scope:        scope,                                                                                            // 3911
      $element:      element,                                                                                          // 3912
      rippleOptions: options                                                                                           // 3913
    });                                                                                                                // 3914
  }                                                                                                                    // 3915
}                                                                                                                      // 3916
InkRippleService.$inject = ["$injector"];                                                                              // 3917
                                                                                                                       // 3918
/**                                                                                                                    // 3919
 * Controller used by the ripple service in order to apply ripples                                                     // 3920
 * @ngInject                                                                                                           // 3921
 */                                                                                                                    // 3922
function InkRippleCtrl ($scope, $element, rippleOptions, $window, $timeout, $mdUtil) {                                 // 3923
  this.$window    = $window;                                                                                           // 3924
  this.$timeout   = $timeout;                                                                                          // 3925
  this.$mdUtil    = $mdUtil;                                                                                           // 3926
  this.$scope     = $scope;                                                                                            // 3927
  this.$element   = $element;                                                                                          // 3928
  this.options    = rippleOptions;                                                                                     // 3929
  this.mousedown  = false;                                                                                             // 3930
  this.ripples    = [];                                                                                                // 3931
  this.timeout    = null; // Stores a reference to the most-recent ripple timeout                                      // 3932
  this.lastRipple = null;                                                                                              // 3933
                                                                                                                       // 3934
  $mdUtil.valueOnUse(this, 'container', this.createContainer);                                                         // 3935
                                                                                                                       // 3936
  this.$element.addClass('md-ink-ripple');                                                                             // 3937
                                                                                                                       // 3938
  // attach method for unit tests                                                                                      // 3939
  ($element.controller('mdInkRipple') || {}).createRipple = angular.bind(this, this.createRipple);                     // 3940
  ($element.controller('mdInkRipple') || {}).setColor = angular.bind(this, this.color);                                // 3941
                                                                                                                       // 3942
  this.bindEvents();                                                                                                   // 3943
}                                                                                                                      // 3944
InkRippleCtrl.$inject = ["$scope", "$element", "rippleOptions", "$window", "$timeout", "$mdUtil"];                     // 3945
                                                                                                                       // 3946
                                                                                                                       // 3947
/**                                                                                                                    // 3948
 * Either remove or unlock any remaining ripples when the user mouses off of the element (either by                    // 3949
 * mouseup or mouseleave event)                                                                                        // 3950
 */                                                                                                                    // 3951
function autoCleanup (self, cleanupFn) {                                                                               // 3952
                                                                                                                       // 3953
  if ( self.mousedown || self.lastRipple ) {                                                                           // 3954
    self.mousedown = false;                                                                                            // 3955
    self.$mdUtil.nextTick( angular.bind(self, cleanupFn), false);                                                      // 3956
  }                                                                                                                    // 3957
                                                                                                                       // 3958
}                                                                                                                      // 3959
                                                                                                                       // 3960
                                                                                                                       // 3961
/**                                                                                                                    // 3962
 * Returns the color that the ripple should be (either based on CSS or hard-coded)                                     // 3963
 * @returns {string}                                                                                                   // 3964
 */                                                                                                                    // 3965
InkRippleCtrl.prototype.color = function (value) {                                                                     // 3966
  var self = this;                                                                                                     // 3967
                                                                                                                       // 3968
  // If assigning a color value, apply it to background and the ripple color                                           // 3969
  if (angular.isDefined(value)) {                                                                                      // 3970
    self._color = self._parseColor(value);                                                                             // 3971
  }                                                                                                                    // 3972
                                                                                                                       // 3973
  // If color lookup, use assigned, defined, or inherited                                                              // 3974
  return self._color || self._parseColor( self.inkRipple() ) || self._parseColor( getElementColor() );                 // 3975
                                                                                                                       // 3976
  /**                                                                                                                  // 3977
   * Finds the color element and returns its text color for use as default ripple color                                // 3978
   * @returns {string}                                                                                                 // 3979
   */                                                                                                                  // 3980
  function getElementColor () {                                                                                        // 3981
    var items = self.options && self.options.colorElement ? self.options.colorElement : [];                            // 3982
    var elem =  items.length ? items[ 0 ] : self.$element[ 0 ];                                                        // 3983
                                                                                                                       // 3984
    return elem ? self.$window.getComputedStyle(elem).color : 'rgb(0,0,0)';                                            // 3985
  }                                                                                                                    // 3986
};                                                                                                                     // 3987
                                                                                                                       // 3988
/**                                                                                                                    // 3989
 * Updating the ripple colors based on the current inkRipple value                                                     // 3990
 * or the element's computed style color                                                                               // 3991
 */                                                                                                                    // 3992
InkRippleCtrl.prototype.calculateColor = function () {                                                                 // 3993
  return this.color();                                                                                                 // 3994
};                                                                                                                     // 3995
                                                                                                                       // 3996
                                                                                                                       // 3997
/**                                                                                                                    // 3998
 * Takes a string color and converts it to RGBA format                                                                 // 3999
 * @param color {string}                                                                                               // 4000
 * @param [multiplier] {int}                                                                                           // 4001
 * @returns {string}                                                                                                   // 4002
 */                                                                                                                    // 4003
                                                                                                                       // 4004
InkRippleCtrl.prototype._parseColor = function parseColor (color, multiplier) {                                        // 4005
  multiplier = multiplier || 1;                                                                                        // 4006
                                                                                                                       // 4007
  if (!color) return;                                                                                                  // 4008
  if (color.indexOf('rgba') === 0) return color.replace(/\d?\.?\d*\s*\)\s*$/, (0.1 * multiplier).toString() + ')');    // 4009
  if (color.indexOf('rgb') === 0) return rgbToRGBA(color);                                                             // 4010
  if (color.indexOf('#') === 0) return hexToRGBA(color);                                                               // 4011
                                                                                                                       // 4012
  /**                                                                                                                  // 4013
   * Converts hex value to RGBA string                                                                                 // 4014
   * @param color {string}                                                                                             // 4015
   * @returns {string}                                                                                                 // 4016
   */                                                                                                                  // 4017
  function hexToRGBA (color) {                                                                                         // 4018
    var hex   = color[ 0 ] === '#' ? color.substr(1) : color,                                                          // 4019
      dig   = hex.length / 3,                                                                                          // 4020
      red   = hex.substr(0, dig),                                                                                      // 4021
      green = hex.substr(dig, dig),                                                                                    // 4022
      blue  = hex.substr(dig * 2);                                                                                     // 4023
    if (dig === 1) {                                                                                                   // 4024
      red += red;                                                                                                      // 4025
      green += green;                                                                                                  // 4026
      blue += blue;                                                                                                    // 4027
    }                                                                                                                  // 4028
    return 'rgba(' + parseInt(red, 16) + ',' + parseInt(green, 16) + ',' + parseInt(blue, 16) + ',0.1)';               // 4029
  }                                                                                                                    // 4030
                                                                                                                       // 4031
  /**                                                                                                                  // 4032
   * Converts an RGB color to RGBA                                                                                     // 4033
   * @param color {string}                                                                                             // 4034
   * @returns {string}                                                                                                 // 4035
   */                                                                                                                  // 4036
  function rgbToRGBA (color) {                                                                                         // 4037
    return color.replace(')', ', 0.1)').replace('(', 'a(');                                                            // 4038
  }                                                                                                                    // 4039
                                                                                                                       // 4040
};                                                                                                                     // 4041
                                                                                                                       // 4042
/**                                                                                                                    // 4043
 * Binds events to the root element for                                                                                // 4044
 */                                                                                                                    // 4045
InkRippleCtrl.prototype.bindEvents = function () {                                                                     // 4046
  this.$element.on('mousedown', angular.bind(this, this.handleMousedown));                                             // 4047
  this.$element.on('mouseup touchend', angular.bind(this, this.handleMouseup));                                        // 4048
  this.$element.on('mouseleave', angular.bind(this, this.handleMouseup));                                              // 4049
  this.$element.on('touchmove', angular.bind(this, this.handleTouchmove));                                             // 4050
};                                                                                                                     // 4051
                                                                                                                       // 4052
/**                                                                                                                    // 4053
 * Create a new ripple on every mousedown event from the root element                                                  // 4054
 * @param event {MouseEvent}                                                                                           // 4055
 */                                                                                                                    // 4056
InkRippleCtrl.prototype.handleMousedown = function (event) {                                                           // 4057
  if ( this.mousedown ) return;                                                                                        // 4058
                                                                                                                       // 4059
  // When jQuery is loaded, we have to get the original event                                                          // 4060
  if (event.hasOwnProperty('originalEvent')) event = event.originalEvent;                                              // 4061
  this.mousedown = true;                                                                                               // 4062
  if (this.options.center) {                                                                                           // 4063
    this.createRipple(this.container.prop('clientWidth') / 2, this.container.prop('clientWidth') / 2);                 // 4064
  } else {                                                                                                             // 4065
                                                                                                                       // 4066
    // We need to calculate the relative coordinates if the target is a sublayer of the ripple element                 // 4067
    if (event.srcElement !== this.$element[0]) {                                                                       // 4068
      var layerRect = this.$element[0].getBoundingClientRect();                                                        // 4069
      var layerX = event.clientX - layerRect.left;                                                                     // 4070
      var layerY = event.clientY - layerRect.top;                                                                      // 4071
                                                                                                                       // 4072
      this.createRipple(layerX, layerY);                                                                               // 4073
    } else {                                                                                                           // 4074
      this.createRipple(event.offsetX, event.offsetY);                                                                 // 4075
    }                                                                                                                  // 4076
  }                                                                                                                    // 4077
};                                                                                                                     // 4078
                                                                                                                       // 4079
/**                                                                                                                    // 4080
 * Either remove or unlock any remaining ripples when the user mouses off of the element (either by                    // 4081
 * mouseup, touchend or mouseleave event)                                                                              // 4082
 */                                                                                                                    // 4083
InkRippleCtrl.prototype.handleMouseup = function () {                                                                  // 4084
  autoCleanup(this, this.clearRipples);                                                                                // 4085
};                                                                                                                     // 4086
                                                                                                                       // 4087
/**                                                                                                                    // 4088
 * Either remove or unlock any remaining ripples when the user mouses off of the element (by                           // 4089
 * touchmove)                                                                                                          // 4090
 */                                                                                                                    // 4091
InkRippleCtrl.prototype.handleTouchmove = function () {                                                                // 4092
  autoCleanup(this, this.deleteRipples);                                                                               // 4093
};                                                                                                                     // 4094
                                                                                                                       // 4095
/**                                                                                                                    // 4096
 * Cycles through all ripples and attempts to remove them.                                                             // 4097
 */                                                                                                                    // 4098
InkRippleCtrl.prototype.deleteRipples = function () {                                                                  // 4099
  for (var i = 0; i < this.ripples.length; i++) {                                                                      // 4100
    this.ripples[ i ].remove();                                                                                        // 4101
  }                                                                                                                    // 4102
};                                                                                                                     // 4103
                                                                                                                       // 4104
/**                                                                                                                    // 4105
 * Cycles through all ripples and attempts to remove them with fade.                                                   // 4106
 * Depending on logic within `fadeInComplete`, some removals will be postponed.                                        // 4107
 */                                                                                                                    // 4108
InkRippleCtrl.prototype.clearRipples = function () {                                                                   // 4109
  for (var i = 0; i < this.ripples.length; i++) {                                                                      // 4110
    this.fadeInComplete(this.ripples[ i ]);                                                                            // 4111
  }                                                                                                                    // 4112
};                                                                                                                     // 4113
                                                                                                                       // 4114
/**                                                                                                                    // 4115
 * Creates the ripple container element                                                                                // 4116
 * @returns {*}                                                                                                        // 4117
 */                                                                                                                    // 4118
InkRippleCtrl.prototype.createContainer = function () {                                                                // 4119
  var container = angular.element('<div class="md-ripple-container"></div>');                                          // 4120
  this.$element.append(container);                                                                                     // 4121
  return container;                                                                                                    // 4122
};                                                                                                                     // 4123
                                                                                                                       // 4124
InkRippleCtrl.prototype.clearTimeout = function () {                                                                   // 4125
  if (this.timeout) {                                                                                                  // 4126
    this.$timeout.cancel(this.timeout);                                                                                // 4127
    this.timeout = null;                                                                                               // 4128
  }                                                                                                                    // 4129
};                                                                                                                     // 4130
                                                                                                                       // 4131
InkRippleCtrl.prototype.isRippleAllowed = function () {                                                                // 4132
  var element = this.$element[0];                                                                                      // 4133
  do {                                                                                                                 // 4134
    if (!element.tagName || element.tagName === 'BODY') break;                                                         // 4135
                                                                                                                       // 4136
    if (element && angular.isFunction(element.hasAttribute)) {                                                         // 4137
      if (element.hasAttribute('disabled')) return false;                                                              // 4138
      if (this.inkRipple() === 'false' || this.inkRipple() === '0') return false;                                      // 4139
    }                                                                                                                  // 4140
                                                                                                                       // 4141
  } while (element = element.parentNode);                                                                              // 4142
  return true;                                                                                                         // 4143
};                                                                                                                     // 4144
                                                                                                                       // 4145
/**                                                                                                                    // 4146
 * The attribute `md-ink-ripple` may be a static or interpolated                                                       // 4147
 * color value OR a boolean indicator (used to disable ripples)                                                        // 4148
 */                                                                                                                    // 4149
InkRippleCtrl.prototype.inkRipple = function () {                                                                      // 4150
  return this.$element.attr('md-ink-ripple');                                                                          // 4151
};                                                                                                                     // 4152
                                                                                                                       // 4153
/**                                                                                                                    // 4154
 * Creates a new ripple and adds it to the container.  Also tracks ripple in `this.ripples`.                           // 4155
 * @param left                                                                                                         // 4156
 * @param top                                                                                                          // 4157
 */                                                                                                                    // 4158
InkRippleCtrl.prototype.createRipple = function (left, top) {                                                          // 4159
  if (!this.isRippleAllowed()) return;                                                                                 // 4160
                                                                                                                       // 4161
  var ctrl        = this;                                                                                              // 4162
  var ripple      = angular.element('<div class="md-ripple"></div>');                                                  // 4163
  var width       = this.$element.prop('clientWidth');                                                                 // 4164
  var height      = this.$element.prop('clientHeight');                                                                // 4165
  var x           = Math.max(Math.abs(width - left), left) * 2;                                                        // 4166
  var y           = Math.max(Math.abs(height - top), top) * 2;                                                         // 4167
  var size        = getSize(this.options.fitRipple, x, y);                                                             // 4168
  var color       = this.calculateColor();                                                                             // 4169
                                                                                                                       // 4170
  ripple.css({                                                                                                         // 4171
    left:            left + 'px',                                                                                      // 4172
    top:             top + 'px',                                                                                       // 4173
    background:      'black',                                                                                          // 4174
    width:           size + 'px',                                                                                      // 4175
    height:          size + 'px',                                                                                      // 4176
    backgroundColor: rgbaToRGB(color),                                                                                 // 4177
    borderColor:     rgbaToRGB(color)                                                                                  // 4178
  });                                                                                                                  // 4179
  this.lastRipple = ripple;                                                                                            // 4180
                                                                                                                       // 4181
  // we only want one timeout to be running at a time                                                                  // 4182
  this.clearTimeout();                                                                                                 // 4183
  this.timeout    = this.$timeout(function () {                                                                        // 4184
    ctrl.clearTimeout();                                                                                               // 4185
    if (!ctrl.mousedown) ctrl.fadeInComplete(ripple);                                                                  // 4186
  }, DURATION * 0.35, false);                                                                                          // 4187
                                                                                                                       // 4188
  if (this.options.dimBackground) this.container.css({ backgroundColor: color });                                      // 4189
  this.container.append(ripple);                                                                                       // 4190
  this.ripples.push(ripple);                                                                                           // 4191
  ripple.addClass('md-ripple-placed');                                                                                 // 4192
                                                                                                                       // 4193
  this.$mdUtil.nextTick(function () {                                                                                  // 4194
                                                                                                                       // 4195
    ripple.addClass('md-ripple-scaled md-ripple-active');                                                              // 4196
    ctrl.$timeout(function () {                                                                                        // 4197
      ctrl.clearRipples();                                                                                             // 4198
    }, DURATION, false);                                                                                               // 4199
                                                                                                                       // 4200
  }, false);                                                                                                           // 4201
                                                                                                                       // 4202
  function rgbaToRGB (color) {                                                                                         // 4203
    return color                                                                                                       // 4204
        ? color.replace('rgba', 'rgb').replace(/,[^\),]+\)/, ')')                                                      // 4205
        : 'rgb(0,0,0)';                                                                                                // 4206
  }                                                                                                                    // 4207
                                                                                                                       // 4208
  function getSize (fit, x, y) {                                                                                       // 4209
    return fit                                                                                                         // 4210
        ? Math.max(x, y)                                                                                               // 4211
        : Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2));                                                                  // 4212
  }                                                                                                                    // 4213
};                                                                                                                     // 4214
                                                                                                                       // 4215
                                                                                                                       // 4216
                                                                                                                       // 4217
/**                                                                                                                    // 4218
 * After fadeIn finishes, either kicks off the fade-out animation or queues the element for removal on mouseup         // 4219
 * @param ripple                                                                                                       // 4220
 */                                                                                                                    // 4221
InkRippleCtrl.prototype.fadeInComplete = function (ripple) {                                                           // 4222
  if (this.lastRipple === ripple) {                                                                                    // 4223
    if (!this.timeout && !this.mousedown) {                                                                            // 4224
      this.removeRipple(ripple);                                                                                       // 4225
    }                                                                                                                  // 4226
  } else {                                                                                                             // 4227
    this.removeRipple(ripple);                                                                                         // 4228
  }                                                                                                                    // 4229
};                                                                                                                     // 4230
                                                                                                                       // 4231
/**                                                                                                                    // 4232
 * Kicks off the animation for removing a ripple                                                                       // 4233
 * @param ripple {Element}                                                                                             // 4234
 */                                                                                                                    // 4235
InkRippleCtrl.prototype.removeRipple = function (ripple) {                                                             // 4236
  var ctrl  = this;                                                                                                    // 4237
  var index = this.ripples.indexOf(ripple);                                                                            // 4238
  if (index < 0) return;                                                                                               // 4239
  this.ripples.splice(this.ripples.indexOf(ripple), 1);                                                                // 4240
  ripple.removeClass('md-ripple-active');                                                                              // 4241
  if (this.ripples.length === 0) this.container.css({ backgroundColor: '' });                                          // 4242
  // use a 2-second timeout in order to allow for the animation to finish                                              // 4243
  // we don't actually care how long the animation takes                                                               // 4244
  this.$timeout(function () {                                                                                          // 4245
    ctrl.fadeOutComplete(ripple);                                                                                      // 4246
  }, DURATION, false);                                                                                                 // 4247
};                                                                                                                     // 4248
                                                                                                                       // 4249
/**                                                                                                                    // 4250
 * Removes the provided ripple from the DOM                                                                            // 4251
 * @param ripple                                                                                                       // 4252
 */                                                                                                                    // 4253
InkRippleCtrl.prototype.fadeOutComplete = function (ripple) {                                                          // 4254
  ripple.remove();                                                                                                     // 4255
  this.lastRipple = null;                                                                                              // 4256
};                                                                                                                     // 4257
                                                                                                                       // 4258
/**                                                                                                                    // 4259
 * Used to create an empty directive.  This is used to track flag-directives whose children may have                   // 4260
 * functionality based on them.                                                                                        // 4261
 *                                                                                                                     // 4262
 * Example: `md-no-ink` will potentially be used by all child directives.                                              // 4263
 */                                                                                                                    // 4264
function attrNoDirective () {                                                                                          // 4265
  return { controller: angular.noop };                                                                                 // 4266
}                                                                                                                      // 4267
                                                                                                                       // 4268
})();                                                                                                                  // 4269
(function(){                                                                                                           // 4270
"use strict";                                                                                                          // 4271
                                                                                                                       // 4272
(function() {                                                                                                          // 4273
  'use strict';                                                                                                        // 4274
                                                                                                                       // 4275
    /**                                                                                                                // 4276
   * @ngdoc service                                                                                                    // 4277
   * @name $mdTabInkRipple                                                                                             // 4278
   * @module material.core                                                                                             // 4279
   *                                                                                                                   // 4280
   * @description                                                                                                      // 4281
   * Provides ripple effects for md-tabs.  See $mdInkRipple service for all possible configuration options.            // 4282
   *                                                                                                                   // 4283
   * @param {object=} scope Scope within the current context                                                           // 4284
   * @param {object=} element The element the ripple effect should be applied to                                       // 4285
   * @param {object=} options (Optional) Configuration options to override the defaultripple configuration             // 4286
   */                                                                                                                  // 4287
                                                                                                                       // 4288
  angular.module('material.core')                                                                                      // 4289
    .factory('$mdTabInkRipple', MdTabInkRipple);                                                                       // 4290
                                                                                                                       // 4291
  function MdTabInkRipple($mdInkRipple) {                                                                              // 4292
    return {                                                                                                           // 4293
      attach: attach                                                                                                   // 4294
    };                                                                                                                 // 4295
                                                                                                                       // 4296
    function attach(scope, element, options) {                                                                         // 4297
      return $mdInkRipple.attach(scope, element, angular.extend({                                                      // 4298
        center: false,                                                                                                 // 4299
        dimBackground: true,                                                                                           // 4300
        outline: false,                                                                                                // 4301
        rippleSize: 'full'                                                                                             // 4302
      }, options));                                                                                                    // 4303
    };                                                                                                                 // 4304
  }                                                                                                                    // 4305
  MdTabInkRipple.$inject = ["$mdInkRipple"];;                                                                          // 4306
})();                                                                                                                  // 4307
                                                                                                                       // 4308
})();                                                                                                                  // 4309
(function(){                                                                                                           // 4310
"use strict";                                                                                                          // 4311
                                                                                                                       // 4312
angular.module('material.core.theming.palette', [])                                                                    // 4313
.constant('$mdColorPalette', {                                                                                         // 4314
  'red': {                                                                                                             // 4315
    '50': '#ffebee',                                                                                                   // 4316
    '100': '#ffcdd2',                                                                                                  // 4317
    '200': '#ef9a9a',                                                                                                  // 4318
    '300': '#e57373',                                                                                                  // 4319
    '400': '#ef5350',                                                                                                  // 4320
    '500': '#f44336',                                                                                                  // 4321
    '600': '#e53935',                                                                                                  // 4322
    '700': '#d32f2f',                                                                                                  // 4323
    '800': '#c62828',                                                                                                  // 4324
    '900': '#b71c1c',                                                                                                  // 4325
    'A100': '#ff8a80',                                                                                                 // 4326
    'A200': '#ff5252',                                                                                                 // 4327
    'A400': '#ff1744',                                                                                                 // 4328
    'A700': '#d50000',                                                                                                 // 4329
    'contrastDefaultColor': 'light',                                                                                   // 4330
    'contrastDarkColors': '50 100 200 300 A100',                                                                       // 4331
    'contrastStrongLightColors': '400 500 600 700 A200 A400 A700'                                                      // 4332
  },                                                                                                                   // 4333
  'pink': {                                                                                                            // 4334
    '50': '#fce4ec',                                                                                                   // 4335
    '100': '#f8bbd0',                                                                                                  // 4336
    '200': '#f48fb1',                                                                                                  // 4337
    '300': '#f06292',                                                                                                  // 4338
    '400': '#ec407a',                                                                                                  // 4339
    '500': '#e91e63',                                                                                                  // 4340
    '600': '#d81b60',                                                                                                  // 4341
    '700': '#c2185b',                                                                                                  // 4342
    '800': '#ad1457',                                                                                                  // 4343
    '900': '#880e4f',                                                                                                  // 4344
    'A100': '#ff80ab',                                                                                                 // 4345
    'A200': '#ff4081',                                                                                                 // 4346
    'A400': '#f50057',                                                                                                 // 4347
    'A700': '#c51162',                                                                                                 // 4348
    'contrastDefaultColor': 'light',                                                                                   // 4349
    'contrastDarkColors': '50 100 200 A100',                                                                           // 4350
    'contrastStrongLightColors': '500 600 A200 A400 A700'                                                              // 4351
  },                                                                                                                   // 4352
  'purple': {                                                                                                          // 4353
    '50': '#f3e5f5',                                                                                                   // 4354
    '100': '#e1bee7',                                                                                                  // 4355
    '200': '#ce93d8',                                                                                                  // 4356
    '300': '#ba68c8',                                                                                                  // 4357
    '400': '#ab47bc',                                                                                                  // 4358
    '500': '#9c27b0',                                                                                                  // 4359
    '600': '#8e24aa',                                                                                                  // 4360
    '700': '#7b1fa2',                                                                                                  // 4361
    '800': '#6a1b9a',                                                                                                  // 4362
    '900': '#4a148c',                                                                                                  // 4363
    'A100': '#ea80fc',                                                                                                 // 4364
    'A200': '#e040fb',                                                                                                 // 4365
    'A400': '#d500f9',                                                                                                 // 4366
    'A700': '#aa00ff',                                                                                                 // 4367
    'contrastDefaultColor': 'light',                                                                                   // 4368
    'contrastDarkColors': '50 100 200 A100',                                                                           // 4369
    'contrastStrongLightColors': '300 400 A200 A400 A700'                                                              // 4370
  },                                                                                                                   // 4371
  'deep-purple': {                                                                                                     // 4372
    '50': '#ede7f6',                                                                                                   // 4373
    '100': '#d1c4e9',                                                                                                  // 4374
    '200': '#b39ddb',                                                                                                  // 4375
    '300': '#9575cd',                                                                                                  // 4376
    '400': '#7e57c2',                                                                                                  // 4377
    '500': '#673ab7',                                                                                                  // 4378
    '600': '#5e35b1',                                                                                                  // 4379
    '700': '#512da8',                                                                                                  // 4380
    '800': '#4527a0',                                                                                                  // 4381
    '900': '#311b92',                                                                                                  // 4382
    'A100': '#b388ff',                                                                                                 // 4383
    'A200': '#7c4dff',                                                                                                 // 4384
    'A400': '#651fff',                                                                                                 // 4385
    'A700': '#6200ea',                                                                                                 // 4386
    'contrastDefaultColor': 'light',                                                                                   // 4387
    'contrastDarkColors': '50 100 200 A100',                                                                           // 4388
    'contrastStrongLightColors': '300 400 A200'                                                                        // 4389
  },                                                                                                                   // 4390
  'indigo': {                                                                                                          // 4391
    '50': '#e8eaf6',                                                                                                   // 4392
    '100': '#c5cae9',                                                                                                  // 4393
    '200': '#9fa8da',                                                                                                  // 4394
    '300': '#7986cb',                                                                                                  // 4395
    '400': '#5c6bc0',                                                                                                  // 4396
    '500': '#3f51b5',                                                                                                  // 4397
    '600': '#3949ab',                                                                                                  // 4398
    '700': '#303f9f',                                                                                                  // 4399
    '800': '#283593',                                                                                                  // 4400
    '900': '#1a237e',                                                                                                  // 4401
    'A100': '#8c9eff',                                                                                                 // 4402
    'A200': '#536dfe',                                                                                                 // 4403
    'A400': '#3d5afe',                                                                                                 // 4404
    'A700': '#304ffe',                                                                                                 // 4405
    'contrastDefaultColor': 'light',                                                                                   // 4406
    'contrastDarkColors': '50 100 200 A100',                                                                           // 4407
    'contrastStrongLightColors': '300 400 A200 A400'                                                                   // 4408
  },                                                                                                                   // 4409
  'blue': {                                                                                                            // 4410
    '50': '#e3f2fd',                                                                                                   // 4411
    '100': '#bbdefb',                                                                                                  // 4412
    '200': '#90caf9',                                                                                                  // 4413
    '300': '#64b5f6',                                                                                                  // 4414
    '400': '#42a5f5',                                                                                                  // 4415
    '500': '#2196f3',                                                                                                  // 4416
    '600': '#1e88e5',                                                                                                  // 4417
    '700': '#1976d2',                                                                                                  // 4418
    '800': '#1565c0',                                                                                                  // 4419
    '900': '#0d47a1',                                                                                                  // 4420
    'A100': '#82b1ff',                                                                                                 // 4421
    'A200': '#448aff',                                                                                                 // 4422
    'A400': '#2979ff',                                                                                                 // 4423
    'A700': '#2962ff',                                                                                                 // 4424
    'contrastDefaultColor': 'light',                                                                                   // 4425
    'contrastDarkColors': '50 100 200 300 400 A100',                                                                   // 4426
    'contrastStrongLightColors': '500 600 700 A200 A400 A700'                                                          // 4427
  },                                                                                                                   // 4428
  'light-blue': {                                                                                                      // 4429
    '50': '#e1f5fe',                                                                                                   // 4430
    '100': '#b3e5fc',                                                                                                  // 4431
    '200': '#81d4fa',                                                                                                  // 4432
    '300': '#4fc3f7',                                                                                                  // 4433
    '400': '#29b6f6',                                                                                                  // 4434
    '500': '#03a9f4',                                                                                                  // 4435
    '600': '#039be5',                                                                                                  // 4436
    '700': '#0288d1',                                                                                                  // 4437
    '800': '#0277bd',                                                                                                  // 4438
    '900': '#01579b',                                                                                                  // 4439
    'A100': '#80d8ff',                                                                                                 // 4440
    'A200': '#40c4ff',                                                                                                 // 4441
    'A400': '#00b0ff',                                                                                                 // 4442
    'A700': '#0091ea',                                                                                                 // 4443
    'contrastDefaultColor': 'dark',                                                                                    // 4444
    'contrastLightColors': '600 700 800 900 A700',                                                                     // 4445
    'contrastStrongLightColors': '600 700 800 A700'                                                                    // 4446
  },                                                                                                                   // 4447
  'cyan': {                                                                                                            // 4448
    '50': '#e0f7fa',                                                                                                   // 4449
    '100': '#b2ebf2',                                                                                                  // 4450
    '200': '#80deea',                                                                                                  // 4451
    '300': '#4dd0e1',                                                                                                  // 4452
    '400': '#26c6da',                                                                                                  // 4453
    '500': '#00bcd4',                                                                                                  // 4454
    '600': '#00acc1',                                                                                                  // 4455
    '700': '#0097a7',                                                                                                  // 4456
    '800': '#00838f',                                                                                                  // 4457
    '900': '#006064',                                                                                                  // 4458
    'A100': '#84ffff',                                                                                                 // 4459
    'A200': '#18ffff',                                                                                                 // 4460
    'A400': '#00e5ff',                                                                                                 // 4461
    'A700': '#00b8d4',                                                                                                 // 4462
    'contrastDefaultColor': 'dark',                                                                                    // 4463
    'contrastLightColors': '700 800 900',                                                                              // 4464
    'contrastStrongLightColors': '700 800 900'                                                                         // 4465
  },                                                                                                                   // 4466
  'teal': {                                                                                                            // 4467
    '50': '#e0f2f1',                                                                                                   // 4468
    '100': '#b2dfdb',                                                                                                  // 4469
    '200': '#80cbc4',                                                                                                  // 4470
    '300': '#4db6ac',                                                                                                  // 4471
    '400': '#26a69a',                                                                                                  // 4472
    '500': '#009688',                                                                                                  // 4473
    '600': '#00897b',                                                                                                  // 4474
    '700': '#00796b',                                                                                                  // 4475
    '800': '#00695c',                                                                                                  // 4476
    '900': '#004d40',                                                                                                  // 4477
    'A100': '#a7ffeb',                                                                                                 // 4478
    'A200': '#64ffda',                                                                                                 // 4479
    'A400': '#1de9b6',                                                                                                 // 4480
    'A700': '#00bfa5',                                                                                                 // 4481
    'contrastDefaultColor': 'dark',                                                                                    // 4482
    'contrastLightColors': '500 600 700 800 900',                                                                      // 4483
    'contrastStrongLightColors': '500 600 700'                                                                         // 4484
  },                                                                                                                   // 4485
  'green': {                                                                                                           // 4486
    '50': '#e8f5e9',                                                                                                   // 4487
    '100': '#c8e6c9',                                                                                                  // 4488
    '200': '#a5d6a7',                                                                                                  // 4489
    '300': '#81c784',                                                                                                  // 4490
    '400': '#66bb6a',                                                                                                  // 4491
    '500': '#4caf50',                                                                                                  // 4492
    '600': '#43a047',                                                                                                  // 4493
    '700': '#388e3c',                                                                                                  // 4494
    '800': '#2e7d32',                                                                                                  // 4495
    '900': '#1b5e20',                                                                                                  // 4496
    'A100': '#b9f6ca',                                                                                                 // 4497
    'A200': '#69f0ae',                                                                                                 // 4498
    'A400': '#00e676',                                                                                                 // 4499
    'A700': '#00c853',                                                                                                 // 4500
    'contrastDefaultColor': 'dark',                                                                                    // 4501
    'contrastLightColors': '600 700 800 900',                                                                          // 4502
    'contrastStrongLightColors': '600 700'                                                                             // 4503
  },                                                                                                                   // 4504
  'light-green': {                                                                                                     // 4505
    '50': '#f1f8e9',                                                                                                   // 4506
    '100': '#dcedc8',                                                                                                  // 4507
    '200': '#c5e1a5',                                                                                                  // 4508
    '300': '#aed581',                                                                                                  // 4509
    '400': '#9ccc65',                                                                                                  // 4510
    '500': '#8bc34a',                                                                                                  // 4511
    '600': '#7cb342',                                                                                                  // 4512
    '700': '#689f38',                                                                                                  // 4513
    '800': '#558b2f',                                                                                                  // 4514
    '900': '#33691e',                                                                                                  // 4515
    'A100': '#ccff90',                                                                                                 // 4516
    'A200': '#b2ff59',                                                                                                 // 4517
    'A400': '#76ff03',                                                                                                 // 4518
    'A700': '#64dd17',                                                                                                 // 4519
    'contrastDefaultColor': 'dark',                                                                                    // 4520
    'contrastLightColors': '700 800 900',                                                                              // 4521
    'contrastStrongLightColors': '700 800 900'                                                                         // 4522
  },                                                                                                                   // 4523
  'lime': {                                                                                                            // 4524
    '50': '#f9fbe7',                                                                                                   // 4525
    '100': '#f0f4c3',                                                                                                  // 4526
    '200': '#e6ee9c',                                                                                                  // 4527
    '300': '#dce775',                                                                                                  // 4528
    '400': '#d4e157',                                                                                                  // 4529
    '500': '#cddc39',                                                                                                  // 4530
    '600': '#c0ca33',                                                                                                  // 4531
    '700': '#afb42b',                                                                                                  // 4532
    '800': '#9e9d24',                                                                                                  // 4533
    '900': '#827717',                                                                                                  // 4534
    'A100': '#f4ff81',                                                                                                 // 4535
    'A200': '#eeff41',                                                                                                 // 4536
    'A400': '#c6ff00',                                                                                                 // 4537
    'A700': '#aeea00',                                                                                                 // 4538
    'contrastDefaultColor': 'dark',                                                                                    // 4539
    'contrastLightColors': '900',                                                                                      // 4540
    'contrastStrongLightColors': '900'                                                                                 // 4541
  },                                                                                                                   // 4542
  'yellow': {                                                                                                          // 4543
    '50': '#fffde7',                                                                                                   // 4544
    '100': '#fff9c4',                                                                                                  // 4545
    '200': '#fff59d',                                                                                                  // 4546
    '300': '#fff176',                                                                                                  // 4547
    '400': '#ffee58',                                                                                                  // 4548
    '500': '#ffeb3b',                                                                                                  // 4549
    '600': '#fdd835',                                                                                                  // 4550
    '700': '#fbc02d',                                                                                                  // 4551
    '800': '#f9a825',                                                                                                  // 4552
    '900': '#f57f17',                                                                                                  // 4553
    'A100': '#ffff8d',                                                                                                 // 4554
    'A200': '#ffff00',                                                                                                 // 4555
    'A400': '#ffea00',                                                                                                 // 4556
    'A700': '#ffd600',                                                                                                 // 4557
    'contrastDefaultColor': 'dark'                                                                                     // 4558
  },                                                                                                                   // 4559
  'amber': {                                                                                                           // 4560
    '50': '#fff8e1',                                                                                                   // 4561
    '100': '#ffecb3',                                                                                                  // 4562
    '200': '#ffe082',                                                                                                  // 4563
    '300': '#ffd54f',                                                                                                  // 4564
    '400': '#ffca28',                                                                                                  // 4565
    '500': '#ffc107',                                                                                                  // 4566
    '600': '#ffb300',                                                                                                  // 4567
    '700': '#ffa000',                                                                                                  // 4568
    '800': '#ff8f00',                                                                                                  // 4569
    '900': '#ff6f00',                                                                                                  // 4570
    'A100': '#ffe57f',                                                                                                 // 4571
    'A200': '#ffd740',                                                                                                 // 4572
    'A400': '#ffc400',                                                                                                 // 4573
    'A700': '#ffab00',                                                                                                 // 4574
    'contrastDefaultColor': 'dark'                                                                                     // 4575
  },                                                                                                                   // 4576
  'orange': {                                                                                                          // 4577
    '50': '#fff3e0',                                                                                                   // 4578
    '100': '#ffe0b2',                                                                                                  // 4579
    '200': '#ffcc80',                                                                                                  // 4580
    '300': '#ffb74d',                                                                                                  // 4581
    '400': '#ffa726',                                                                                                  // 4582
    '500': '#ff9800',                                                                                                  // 4583
    '600': '#fb8c00',                                                                                                  // 4584
    '700': '#f57c00',                                                                                                  // 4585
    '800': '#ef6c00',                                                                                                  // 4586
    '900': '#e65100',                                                                                                  // 4587
    'A100': '#ffd180',                                                                                                 // 4588
    'A200': '#ffab40',                                                                                                 // 4589
    'A400': '#ff9100',                                                                                                 // 4590
    'A700': '#ff6d00',                                                                                                 // 4591
    'contrastDefaultColor': 'dark',                                                                                    // 4592
    'contrastLightColors': '800 900',                                                                                  // 4593
    'contrastStrongLightColors': '800 900'                                                                             // 4594
  },                                                                                                                   // 4595
  'deep-orange': {                                                                                                     // 4596
    '50': '#fbe9e7',                                                                                                   // 4597
    '100': '#ffccbc',                                                                                                  // 4598
    '200': '#ffab91',                                                                                                  // 4599
    '300': '#ff8a65',                                                                                                  // 4600
    '400': '#ff7043',                                                                                                  // 4601
    '500': '#ff5722',                                                                                                  // 4602
    '600': '#f4511e',                                                                                                  // 4603
    '700': '#e64a19',                                                                                                  // 4604
    '800': '#d84315',                                                                                                  // 4605
    '900': '#bf360c',                                                                                                  // 4606
    'A100': '#ff9e80',                                                                                                 // 4607
    'A200': '#ff6e40',                                                                                                 // 4608
    'A400': '#ff3d00',                                                                                                 // 4609
    'A700': '#dd2c00',                                                                                                 // 4610
    'contrastDefaultColor': 'light',                                                                                   // 4611
    'contrastDarkColors': '50 100 200 300 400 A100 A200',                                                              // 4612
    'contrastStrongLightColors': '500 600 700 800 900 A400 A700'                                                       // 4613
  },                                                                                                                   // 4614
  'brown': {                                                                                                           // 4615
    '50': '#efebe9',                                                                                                   // 4616
    '100': '#d7ccc8',                                                                                                  // 4617
    '200': '#bcaaa4',                                                                                                  // 4618
    '300': '#a1887f',                                                                                                  // 4619
    '400': '#8d6e63',                                                                                                  // 4620
    '500': '#795548',                                                                                                  // 4621
    '600': '#6d4c41',                                                                                                  // 4622
    '700': '#5d4037',                                                                                                  // 4623
    '800': '#4e342e',                                                                                                  // 4624
    '900': '#3e2723',                                                                                                  // 4625
    'A100': '#d7ccc8',                                                                                                 // 4626
    'A200': '#bcaaa4',                                                                                                 // 4627
    'A400': '#8d6e63',                                                                                                 // 4628
    'A700': '#5d4037',                                                                                                 // 4629
    'contrastDefaultColor': 'light',                                                                                   // 4630
    'contrastDarkColors': '50 100 200',                                                                                // 4631
    'contrastStrongLightColors': '300 400'                                                                             // 4632
  },                                                                                                                   // 4633
  'grey': {                                                                                                            // 4634
    '50': '#fafafa',                                                                                                   // 4635
    '100': '#f5f5f5',                                                                                                  // 4636
    '200': '#eeeeee',                                                                                                  // 4637
    '300': '#e0e0e0',                                                                                                  // 4638
    '400': '#bdbdbd',                                                                                                  // 4639
    '500': '#9e9e9e',                                                                                                  // 4640
    '600': '#757575',                                                                                                  // 4641
    '700': '#616161',                                                                                                  // 4642
    '800': '#424242',                                                                                                  // 4643
    '900': '#212121',                                                                                                  // 4644
    '1000': '#000000',                                                                                                 // 4645
    'A100': '#ffffff',                                                                                                 // 4646
    'A200': '#eeeeee',                                                                                                 // 4647
    'A400': '#bdbdbd',                                                                                                 // 4648
    'A700': '#616161',                                                                                                 // 4649
    'contrastDefaultColor': 'dark',                                                                                    // 4650
    'contrastLightColors': '600 700 800 900'                                                                           // 4651
  },                                                                                                                   // 4652
  'blue-grey': {                                                                                                       // 4653
    '50': '#eceff1',                                                                                                   // 4654
    '100': '#cfd8dc',                                                                                                  // 4655
    '200': '#b0bec5',                                                                                                  // 4656
    '300': '#90a4ae',                                                                                                  // 4657
    '400': '#78909c',                                                                                                  // 4658
    '500': '#607d8b',                                                                                                  // 4659
    '600': '#546e7a',                                                                                                  // 4660
    '700': '#455a64',                                                                                                  // 4661
    '800': '#37474f',                                                                                                  // 4662
    '900': '#263238',                                                                                                  // 4663
    'A100': '#cfd8dc',                                                                                                 // 4664
    'A200': '#b0bec5',                                                                                                 // 4665
    'A400': '#78909c',                                                                                                 // 4666
    'A700': '#455a64',                                                                                                 // 4667
    'contrastDefaultColor': 'light',                                                                                   // 4668
    'contrastDarkColors': '50 100 200 300',                                                                            // 4669
    'contrastStrongLightColors': '400 500'                                                                             // 4670
  }                                                                                                                    // 4671
});                                                                                                                    // 4672
                                                                                                                       // 4673
})();                                                                                                                  // 4674
(function(){                                                                                                           // 4675
"use strict";                                                                                                          // 4676
                                                                                                                       // 4677
angular.module('material.core.theming', ['material.core.theming.palette'])                                             // 4678
  .directive('mdTheme', ThemingDirective)                                                                              // 4679
  .directive('mdThemable', ThemableDirective)                                                                          // 4680
  .provider('$mdTheming', ThemingProvider)                                                                             // 4681
  .run(generateAllThemes);                                                                                             // 4682
                                                                                                                       // 4683
/**                                                                                                                    // 4684
 * @ngdoc service                                                                                                      // 4685
 * @name $mdThemingProvider                                                                                            // 4686
 * @module material.core.theming                                                                                       // 4687
 *                                                                                                                     // 4688
 * @description Provider to configure the `$mdTheming` service.                                                        // 4689
 */                                                                                                                    // 4690
                                                                                                                       // 4691
/**                                                                                                                    // 4692
 * @ngdoc method                                                                                                       // 4693
 * @name $mdThemingProvider#setNonce                                                                                   // 4694
 * @param {string} nonceValue The nonce to be added as an attribute to the theme style tags.                           // 4695
 * Setting a value allows the use CSP policy without using the unsafe-inline directive.                                // 4696
 */                                                                                                                    // 4697
                                                                                                                       // 4698
/**                                                                                                                    // 4699
 * @ngdoc method                                                                                                       // 4700
 * @name $mdThemingProvider#setDefaultTheme                                                                            // 4701
 * @param {string} themeName Default theme name to be applied to elements. Default value is `default`.                 // 4702
 */                                                                                                                    // 4703
                                                                                                                       // 4704
/**                                                                                                                    // 4705
 * @ngdoc method                                                                                                       // 4706
 * @name $mdThemingProvider#alwaysWatchTheme                                                                           // 4707
 * @param {boolean} watch Whether or not to always watch themes for changes and re-apply                               // 4708
 * classes when they change. Default is `false`. Enabling can reduce performance.                                      // 4709
 */                                                                                                                    // 4710
                                                                                                                       // 4711
/* Some Example Valid Theming Expressions                                                                              // 4712
 * =======================================                                                                             // 4713
 *                                                                                                                     // 4714
 * Intention group expansion: (valid for primary, accent, warn, background)                                            // 4715
 *                                                                                                                     // 4716
 * {{primary-100}} - grab shade 100 from the primary palette                                                           // 4717
 * {{primary-100-0.7}} - grab shade 100, apply opacity of 0.7                                                          // 4718
 * {{primary-100-contrast}} - grab shade 100's contrast color                                                          // 4719
 * {{primary-hue-1}} - grab the shade assigned to hue-1 from the primary palette                                       // 4720
 * {{primary-hue-1-0.7}} - apply 0.7 opacity to primary-hue-1                                                          // 4721
 * {{primary-color}} - Generates .md-hue-1, .md-hue-2, .md-hue-3 with configured shades set for each hue               // 4722
 * {{primary-color-0.7}} - Apply 0.7 opacity to each of the above rules                                                // 4723
 * {{primary-contrast}} - Generates .md-hue-1, .md-hue-2, .md-hue-3 with configured contrast (ie. text) color shades set for each hue
 * {{primary-contrast-0.7}} - Apply 0.7 opacity to each of the above rules                                             // 4725
 *                                                                                                                     // 4726
 * Foreground expansion: Applies rgba to black/white foreground text                                                   // 4727
 *                                                                                                                     // 4728
 * {{foreground-1}} - used for primary text                                                                            // 4729
 * {{foreground-2}} - used for secondary text/divider                                                                  // 4730
 * {{foreground-3}} - used for disabled text                                                                           // 4731
 * {{foreground-4}} - used for dividers                                                                                // 4732
 *                                                                                                                     // 4733
 */                                                                                                                    // 4734
                                                                                                                       // 4735
// In memory generated CSS rules; registered by theme.name                                                             // 4736
var GENERATED = { };                                                                                                   // 4737
                                                                                                                       // 4738
// In memory storage of defined themes and color palettes (both loaded by CSS, and user specified)                     // 4739
var PALETTES;                                                                                                          // 4740
var THEMES;                                                                                                            // 4741
                                                                                                                       // 4742
var DARK_FOREGROUND = {                                                                                                // 4743
  name: 'dark',                                                                                                        // 4744
  '1': 'rgba(0,0,0,0.87)',                                                                                             // 4745
  '2': 'rgba(0,0,0,0.54)',                                                                                             // 4746
  '3': 'rgba(0,0,0,0.26)',                                                                                             // 4747
  '4': 'rgba(0,0,0,0.12)'                                                                                              // 4748
};                                                                                                                     // 4749
var LIGHT_FOREGROUND = {                                                                                               // 4750
  name: 'light',                                                                                                       // 4751
  '1': 'rgba(255,255,255,1.0)',                                                                                        // 4752
  '2': 'rgba(255,255,255,0.7)',                                                                                        // 4753
  '3': 'rgba(255,255,255,0.3)',                                                                                        // 4754
  '4': 'rgba(255,255,255,0.12)'                                                                                        // 4755
};                                                                                                                     // 4756
                                                                                                                       // 4757
var DARK_SHADOW = '1px 1px 0px rgba(0,0,0,0.4), -1px -1px 0px rgba(0,0,0,0.4)';                                        // 4758
var LIGHT_SHADOW = '';                                                                                                 // 4759
                                                                                                                       // 4760
var DARK_CONTRAST_COLOR = colorToRgbaArray('rgba(0,0,0,0.87)');                                                        // 4761
var LIGHT_CONTRAST_COLOR = colorToRgbaArray('rgba(255,255,255,0.87)');                                                 // 4762
var STRONG_LIGHT_CONTRAST_COLOR = colorToRgbaArray('rgb(255,255,255)');                                                // 4763
                                                                                                                       // 4764
var THEME_COLOR_TYPES = ['primary', 'accent', 'warn', 'background'];                                                   // 4765
var DEFAULT_COLOR_TYPE = 'primary';                                                                                    // 4766
                                                                                                                       // 4767
// A color in a theme will use these hues by default, if not specified by user.                                        // 4768
var LIGHT_DEFAULT_HUES = {                                                                                             // 4769
  'accent': {                                                                                                          // 4770
    'default': 'A200',                                                                                                 // 4771
    'hue-1': 'A100',                                                                                                   // 4772
    'hue-2': 'A400',                                                                                                   // 4773
    'hue-3': 'A700'                                                                                                    // 4774
  },                                                                                                                   // 4775
  'background': {                                                                                                      // 4776
    'default': 'A100',                                                                                                 // 4777
    'hue-1': '300',                                                                                                    // 4778
    'hue-2': '800',                                                                                                    // 4779
    'hue-3': '900'                                                                                                     // 4780
  }                                                                                                                    // 4781
};                                                                                                                     // 4782
                                                                                                                       // 4783
var DARK_DEFAULT_HUES = {                                                                                              // 4784
  'background': {                                                                                                      // 4785
    'default': '800',                                                                                                  // 4786
    'hue-1': '600',                                                                                                    // 4787
    'hue-2': '300',                                                                                                    // 4788
    'hue-3': '900'                                                                                                     // 4789
  }                                                                                                                    // 4790
};                                                                                                                     // 4791
THEME_COLOR_TYPES.forEach(function(colorType) {                                                                        // 4792
  // Color types with unspecified default hues will use these default hue values                                       // 4793
  var defaultDefaultHues = {                                                                                           // 4794
    'default': '500',                                                                                                  // 4795
    'hue-1': '300',                                                                                                    // 4796
    'hue-2': '800',                                                                                                    // 4797
    'hue-3': 'A100'                                                                                                    // 4798
  };                                                                                                                   // 4799
  if (!LIGHT_DEFAULT_HUES[colorType]) LIGHT_DEFAULT_HUES[colorType] = defaultDefaultHues;                              // 4800
  if (!DARK_DEFAULT_HUES[colorType]) DARK_DEFAULT_HUES[colorType] = defaultDefaultHues;                                // 4801
});                                                                                                                    // 4802
                                                                                                                       // 4803
var VALID_HUE_VALUES = [                                                                                               // 4804
  '50', '100', '200', '300', '400', '500', '600',                                                                      // 4805
  '700', '800', '900', 'A100', 'A200', 'A400', 'A700'                                                                  // 4806
];                                                                                                                     // 4807
                                                                                                                       // 4808
// Whether or not themes are to be generated on-demand (vs. eagerly).                                                  // 4809
var generateOnDemand = false;                                                                                          // 4810
                                                                                                                       // 4811
// Nonce to be added as an attribute to the generated themes style tags.                                               // 4812
var nonce = null;                                                                                                      // 4813
                                                                                                                       // 4814
function ThemingProvider($mdColorPalette) {                                                                            // 4815
  PALETTES = { };                                                                                                      // 4816
  THEMES = { };                                                                                                        // 4817
                                                                                                                       // 4818
  var themingProvider;                                                                                                 // 4819
  var defaultTheme = 'default';                                                                                        // 4820
  var alwaysWatchTheme = false;                                                                                        // 4821
                                                                                                                       // 4822
  // Load JS Defined Palettes                                                                                          // 4823
  angular.extend(PALETTES, $mdColorPalette);                                                                           // 4824
                                                                                                                       // 4825
  // Default theme defined in core.js                                                                                  // 4826
                                                                                                                       // 4827
  ThemingService.$inject = ["$rootScope", "$log"];                                                                     // 4828
  return themingProvider = {                                                                                           // 4829
    definePalette: definePalette,                                                                                      // 4830
    extendPalette: extendPalette,                                                                                      // 4831
    theme: registerTheme,                                                                                              // 4832
                                                                                                                       // 4833
    setNonce: function(nonceValue) {                                                                                   // 4834
      nonce = nonceValue;                                                                                              // 4835
    },                                                                                                                 // 4836
    setDefaultTheme: function(theme) {                                                                                 // 4837
      defaultTheme = theme;                                                                                            // 4838
    },                                                                                                                 // 4839
    alwaysWatchTheme: function(alwaysWatch) {                                                                          // 4840
      alwaysWatchTheme = alwaysWatch;                                                                                  // 4841
    },                                                                                                                 // 4842
    generateThemesOnDemand: function(onDemand) {                                                                       // 4843
      generateOnDemand = onDemand;                                                                                     // 4844
    },                                                                                                                 // 4845
    $get: ThemingService,                                                                                              // 4846
    _LIGHT_DEFAULT_HUES: LIGHT_DEFAULT_HUES,                                                                           // 4847
    _DARK_DEFAULT_HUES: DARK_DEFAULT_HUES,                                                                             // 4848
    _PALETTES: PALETTES,                                                                                               // 4849
    _THEMES: THEMES,                                                                                                   // 4850
    _parseRules: parseRules,                                                                                           // 4851
    _rgba: rgba                                                                                                        // 4852
  };                                                                                                                   // 4853
                                                                                                                       // 4854
  // Example: $mdThemingProvider.definePalette('neonRed', { 50: '#f5fafa', ... });                                     // 4855
  function definePalette(name, map) {                                                                                  // 4856
    map = map || {};                                                                                                   // 4857
    PALETTES[name] = checkPaletteValid(name, map);                                                                     // 4858
    return themingProvider;                                                                                            // 4859
  }                                                                                                                    // 4860
                                                                                                                       // 4861
  // Returns an new object which is a copy of a given palette `name` with variables from                               // 4862
  // `map` overwritten                                                                                                 // 4863
  // Example: var neonRedMap = $mdThemingProvider.extendPalette('red', { 50: '#f5fafafa' });                           // 4864
  function extendPalette(name, map) {                                                                                  // 4865
    return checkPaletteValid(name,  angular.extend({}, PALETTES[name] || {}, map) );                                   // 4866
  }                                                                                                                    // 4867
                                                                                                                       // 4868
  // Make sure that palette has all required hues                                                                      // 4869
  function checkPaletteValid(name, map) {                                                                              // 4870
    var missingColors = VALID_HUE_VALUES.filter(function(field) {                                                      // 4871
      return !map[field];                                                                                              // 4872
    });                                                                                                                // 4873
    if (missingColors.length) {                                                                                        // 4874
      throw new Error("Missing colors %1 in palette %2!"                                                               // 4875
                      .replace('%1', missingColors.join(', '))                                                         // 4876
                      .replace('%2', name));                                                                           // 4877
    }                                                                                                                  // 4878
                                                                                                                       // 4879
    return map;                                                                                                        // 4880
  }                                                                                                                    // 4881
                                                                                                                       // 4882
  // Register a theme (which is a collection of color palettes to use with various states                              // 4883
  // ie. warn, accent, primary )                                                                                       // 4884
  // Optionally inherit from an existing theme                                                                         // 4885
  // $mdThemingProvider.theme('custom-theme').primaryPalette('red');                                                   // 4886
  function registerTheme(name, inheritFrom) {                                                                          // 4887
    if (THEMES[name]) return THEMES[name];                                                                             // 4888
                                                                                                                       // 4889
    inheritFrom = inheritFrom || 'default';                                                                            // 4890
                                                                                                                       // 4891
    var parentTheme = typeof inheritFrom === 'string' ? THEMES[inheritFrom] : inheritFrom;                             // 4892
    var theme = new Theme(name);                                                                                       // 4893
                                                                                                                       // 4894
    if (parentTheme) {                                                                                                 // 4895
      angular.forEach(parentTheme.colors, function(color, colorType) {                                                 // 4896
        theme.colors[colorType] = {                                                                                    // 4897
          name: color.name,                                                                                            // 4898
          // Make sure a COPY of the hues is given to the child color,                                                 // 4899
          // not the same reference.                                                                                   // 4900
          hues: angular.extend({}, color.hues)                                                                         // 4901
        };                                                                                                             // 4902
      });                                                                                                              // 4903
    }                                                                                                                  // 4904
    THEMES[name] = theme;                                                                                              // 4905
                                                                                                                       // 4906
    return theme;                                                                                                      // 4907
  }                                                                                                                    // 4908
                                                                                                                       // 4909
  function Theme(name) {                                                                                               // 4910
    var self = this;                                                                                                   // 4911
    self.name = name;                                                                                                  // 4912
    self.colors = {};                                                                                                  // 4913
                                                                                                                       // 4914
    self.dark = setDark;                                                                                               // 4915
    setDark(false);                                                                                                    // 4916
                                                                                                                       // 4917
    function setDark(isDark) {                                                                                         // 4918
      isDark = arguments.length === 0 ? true : !!isDark;                                                               // 4919
                                                                                                                       // 4920
      // If no change, abort                                                                                           // 4921
      if (isDark === self.isDark) return;                                                                              // 4922
                                                                                                                       // 4923
      self.isDark = isDark;                                                                                            // 4924
                                                                                                                       // 4925
      self.foregroundPalette = self.isDark ? LIGHT_FOREGROUND : DARK_FOREGROUND;                                       // 4926
      self.foregroundShadow = self.isDark ? DARK_SHADOW : LIGHT_SHADOW;                                                // 4927
                                                                                                                       // 4928
      // Light and dark themes have different default hues.                                                            // 4929
      // Go through each existing color type for this theme, and for every                                             // 4930
      // hue value that is still the default hue value from the previous light/dark setting,                           // 4931
      // set it to the default hue value from the new light/dark setting.                                              // 4932
      var newDefaultHues = self.isDark ? DARK_DEFAULT_HUES : LIGHT_DEFAULT_HUES;                                       // 4933
      var oldDefaultHues = self.isDark ? LIGHT_DEFAULT_HUES : DARK_DEFAULT_HUES;                                       // 4934
      angular.forEach(newDefaultHues, function(newDefaults, colorType) {                                               // 4935
        var color = self.colors[colorType];                                                                            // 4936
        var oldDefaults = oldDefaultHues[colorType];                                                                   // 4937
        if (color) {                                                                                                   // 4938
          for (var hueName in color.hues) {                                                                            // 4939
            if (color.hues[hueName] === oldDefaults[hueName]) {                                                        // 4940
              color.hues[hueName] = newDefaults[hueName];                                                              // 4941
            }                                                                                                          // 4942
          }                                                                                                            // 4943
        }                                                                                                              // 4944
      });                                                                                                              // 4945
                                                                                                                       // 4946
      return self;                                                                                                     // 4947
    }                                                                                                                  // 4948
                                                                                                                       // 4949
    THEME_COLOR_TYPES.forEach(function(colorType) {                                                                    // 4950
      var defaultHues = (self.isDark ? DARK_DEFAULT_HUES : LIGHT_DEFAULT_HUES)[colorType];                             // 4951
      self[colorType + 'Palette'] = function setPaletteType(paletteName, hues) {                                       // 4952
        var color = self.colors[colorType] = {                                                                         // 4953
          name: paletteName,                                                                                           // 4954
          hues: angular.extend({}, defaultHues, hues)                                                                  // 4955
        };                                                                                                             // 4956
                                                                                                                       // 4957
        Object.keys(color.hues).forEach(function(name) {                                                               // 4958
          if (!defaultHues[name]) {                                                                                    // 4959
            throw new Error("Invalid hue name '%1' in theme %2's %3 color %4. Available hue names: %4"                 // 4960
              .replace('%1', name)                                                                                     // 4961
              .replace('%2', self.name)                                                                                // 4962
              .replace('%3', paletteName)                                                                              // 4963
              .replace('%4', Object.keys(defaultHues).join(', '))                                                      // 4964
            );                                                                                                         // 4965
          }                                                                                                            // 4966
        });                                                                                                            // 4967
        Object.keys(color.hues).map(function(key) {                                                                    // 4968
          return color.hues[key];                                                                                      // 4969
        }).forEach(function(hueValue) {                                                                                // 4970
          if (VALID_HUE_VALUES.indexOf(hueValue) == -1) {                                                              // 4971
            throw new Error("Invalid hue value '%1' in theme %2's %3 color %4. Available hue values: %5"               // 4972
              .replace('%1', hueValue)                                                                                 // 4973
              .replace('%2', self.name)                                                                                // 4974
              .replace('%3', colorType)                                                                                // 4975
              .replace('%4', paletteName)                                                                              // 4976
              .replace('%5', VALID_HUE_VALUES.join(', '))                                                              // 4977
            );                                                                                                         // 4978
          }                                                                                                            // 4979
        });                                                                                                            // 4980
        return self;                                                                                                   // 4981
      };                                                                                                               // 4982
                                                                                                                       // 4983
      self[colorType + 'Color'] = function() {                                                                         // 4984
        var args = Array.prototype.slice.call(arguments);                                                              // 4985
        console.warn('$mdThemingProviderTheme.' + colorType + 'Color() has been deprecated. ' +                        // 4986
                     'Use $mdThemingProviderTheme.' + colorType + 'Palette() instead.');                               // 4987
        return self[colorType + 'Palette'].apply(self, args);                                                          // 4988
      };                                                                                                               // 4989
    });                                                                                                                // 4990
  }                                                                                                                    // 4991
                                                                                                                       // 4992
  /**                                                                                                                  // 4993
   * @ngdoc service                                                                                                    // 4994
   * @name $mdTheming                                                                                                  // 4995
   *                                                                                                                   // 4996
   * @description                                                                                                      // 4997
   *                                                                                                                   // 4998
   * Service that makes an element apply theming related classes to itself.                                            // 4999
   *                                                                                                                   // 5000
   * ```js                                                                                                             // 5001
   * app.directive('myFancyDirective', function($mdTheming) {                                                          // 5002
   *   return {                                                                                                        // 5003
   *     restrict: 'e',                                                                                                // 5004
   *     link: function(scope, el, attrs) {                                                                            // 5005
   *       $mdTheming(el);                                                                                             // 5006
   *     }                                                                                                             // 5007
   *   };                                                                                                              // 5008
   * });                                                                                                               // 5009
   * ```                                                                                                               // 5010
   * @param {el=} element to apply theming to                                                                          // 5011
   */                                                                                                                  // 5012
  /* @ngInject */                                                                                                      // 5013
  function ThemingService($rootScope, $log) {                                                                          // 5014
                                                                                                                       // 5015
    applyTheme.inherit = function(el, parent) {                                                                        // 5016
      var ctrl = parent.controller('mdTheme');                                                                         // 5017
                                                                                                                       // 5018
      var attrThemeValue = el.attr('md-theme-watch');                                                                  // 5019
      if ( (alwaysWatchTheme || angular.isDefined(attrThemeValue)) && attrThemeValue != 'false') {                     // 5020
        var deregisterWatch = $rootScope.$watch(function() {                                                           // 5021
          return ctrl && ctrl.$mdTheme || (defaultTheme == 'default' ? '' : defaultTheme);                             // 5022
        }, changeTheme);                                                                                               // 5023
        el.on('$destroy', deregisterWatch);                                                                            // 5024
      } else {                                                                                                         // 5025
        var theme = ctrl && ctrl.$mdTheme || (defaultTheme == 'default' ? '' : defaultTheme);                          // 5026
        changeTheme(theme);                                                                                            // 5027
      }                                                                                                                // 5028
                                                                                                                       // 5029
      function changeTheme(theme) {                                                                                    // 5030
        if (!theme) return;                                                                                            // 5031
        if (!registered(theme)) {                                                                                      // 5032
          $log.warn('Attempted to use unregistered theme \'' + theme + '\'. ' +                                        // 5033
                    'Register it with $mdThemingProvider.theme().');                                                   // 5034
        }                                                                                                              // 5035
        var oldTheme = el.data('$mdThemeName');                                                                        // 5036
        if (oldTheme) el.removeClass('md-' + oldTheme +'-theme');                                                      // 5037
        el.addClass('md-' + theme + '-theme');                                                                         // 5038
        el.data('$mdThemeName', theme);                                                                                // 5039
        if (ctrl) {                                                                                                    // 5040
          el.data('$mdThemeController', ctrl);                                                                         // 5041
        }                                                                                                              // 5042
      }                                                                                                                // 5043
    };                                                                                                                 // 5044
                                                                                                                       // 5045
    applyTheme.THEMES = angular.extend({}, THEMES);                                                                    // 5046
    applyTheme.defaultTheme = function() { return defaultTheme; };                                                     // 5047
    applyTheme.registered = registered;                                                                                // 5048
    applyTheme.generateTheme = function(name) { generateTheme(name, nonce); };                                         // 5049
                                                                                                                       // 5050
    return applyTheme;                                                                                                 // 5051
                                                                                                                       // 5052
    function registered(themeName) {                                                                                   // 5053
      if (themeName === undefined || themeName === '') return true;                                                    // 5054
      return applyTheme.THEMES[themeName] !== undefined;                                                               // 5055
    }                                                                                                                  // 5056
                                                                                                                       // 5057
    function applyTheme(scope, el) {                                                                                   // 5058
      // Allow us to be invoked via a linking function signature.                                                      // 5059
      if (el === undefined) {                                                                                          // 5060
        el = scope;                                                                                                    // 5061
        scope = undefined;                                                                                             // 5062
      }                                                                                                                // 5063
      if (scope === undefined) {                                                                                       // 5064
        scope = $rootScope;                                                                                            // 5065
      }                                                                                                                // 5066
      applyTheme.inherit(el, el);                                                                                      // 5067
    }                                                                                                                  // 5068
  }                                                                                                                    // 5069
}                                                                                                                      // 5070
ThemingProvider.$inject = ["$mdColorPalette"];                                                                         // 5071
                                                                                                                       // 5072
function ThemingDirective($mdTheming, $interpolate, $log) {                                                            // 5073
  return {                                                                                                             // 5074
    priority: 100,                                                                                                     // 5075
    link: {                                                                                                            // 5076
      pre: function(scope, el, attrs) {                                                                                // 5077
        var ctrl = {                                                                                                   // 5078
          $setTheme: function(theme) {                                                                                 // 5079
            if (!$mdTheming.registered(theme)) {                                                                       // 5080
              $log.warn('attempted to use unregistered theme \'' + theme + '\'');                                      // 5081
            }                                                                                                          // 5082
            ctrl.$mdTheme = theme;                                                                                     // 5083
          }                                                                                                            // 5084
        };                                                                                                             // 5085
        el.data('$mdThemeController', ctrl);                                                                           // 5086
        ctrl.$setTheme($interpolate(attrs.mdTheme)(scope));                                                            // 5087
        attrs.$observe('mdTheme', ctrl.$setTheme);                                                                     // 5088
      }                                                                                                                // 5089
    }                                                                                                                  // 5090
  };                                                                                                                   // 5091
}                                                                                                                      // 5092
ThemingDirective.$inject = ["$mdTheming", "$interpolate", "$log"];                                                     // 5093
                                                                                                                       // 5094
function ThemableDirective($mdTheming) {                                                                               // 5095
  return $mdTheming;                                                                                                   // 5096
}                                                                                                                      // 5097
ThemableDirective.$inject = ["$mdTheming"];                                                                            // 5098
                                                                                                                       // 5099
function parseRules(theme, colorType, rules) {                                                                         // 5100
  checkValidPalette(theme, colorType);                                                                                 // 5101
                                                                                                                       // 5102
  rules = rules.replace(/THEME_NAME/g, theme.name);                                                                    // 5103
  var generatedRules = [];                                                                                             // 5104
  var color = theme.colors[colorType];                                                                                 // 5105
                                                                                                                       // 5106
  var themeNameRegex = new RegExp('.md-' + theme.name + '-theme', 'g');                                                // 5107
  // Matches '{{ primary-color }}', etc                                                                                // 5108
  var hueRegex = new RegExp('(\'|")?{{\\s*(' + colorType + ')-(color|contrast)-?(\\d\\.?\\d*)?\\s*}}(\"|\')?','g');    // 5109
  var simpleVariableRegex = /'?"?\{\{\s*([a-zA-Z]+)-(A?\d+|hue\-[0-3]|shadow)-?(\d\.?\d*)?(contrast)?\s*\}\}'?"?/g;    // 5110
  var palette = PALETTES[color.name];                                                                                  // 5111
                                                                                                                       // 5112
  // find and replace simple variables where we use a specific hue, not an entire palette                              // 5113
  // eg. "{{primary-100}}"                                                                                             // 5114
  //\(' + THEME_COLOR_TYPES.join('\|') + '\)'                                                                          // 5115
  rules = rules.replace(simpleVariableRegex, function(match, colorType, hue, opacity, contrast) {                      // 5116
    if (colorType === 'foreground') {                                                                                  // 5117
      if (hue == 'shadow') {                                                                                           // 5118
        return theme.foregroundShadow;                                                                                 // 5119
      } else {                                                                                                         // 5120
        return theme.foregroundPalette[hue] || theme.foregroundPalette['1'];                                           // 5121
      }                                                                                                                // 5122
    }                                                                                                                  // 5123
    if (hue.indexOf('hue') === 0) {                                                                                    // 5124
      hue = theme.colors[colorType].hues[hue];                                                                         // 5125
    }                                                                                                                  // 5126
    return rgba( (PALETTES[ theme.colors[colorType].name ][hue] || '')[contrast ? 'contrast' : 'value'], opacity );    // 5127
  });                                                                                                                  // 5128
                                                                                                                       // 5129
  // For each type, generate rules for each hue (ie. default, md-hue-1, md-hue-2, md-hue-3)                            // 5130
  angular.forEach(color.hues, function(hueValue, hueName) {                                                            // 5131
    var newRule = rules                                                                                                // 5132
      .replace(hueRegex, function(match, _, colorType, hueType, opacity) {                                             // 5133
        return rgba(palette[hueValue][hueType === 'color' ? 'value' : 'contrast'], opacity);                           // 5134
      });                                                                                                              // 5135
    if (hueName !== 'default') {                                                                                       // 5136
      newRule = newRule.replace(themeNameRegex, '.md-' + theme.name + '-theme.md-' + hueName);                         // 5137
    }                                                                                                                  // 5138
                                                                                                                       // 5139
    // Don't apply a selector rule to the default theme, making it easier to override                                  // 5140
    // styles of the base-component                                                                                    // 5141
    if (theme.name == 'default') {                                                                                     // 5142
      var themeRuleRegex = /((?:(?:(?: |>|\.|\w|-|:|\(|\)|\[|\]|"|'|=)+) )?)((?:(?:\w|\.|-)+)?)\.md-default-theme((?: |>|\.|\w|-|:|\(|\)|\[|\]|"|'|=)*)/g;
      newRule = newRule.replace(themeRuleRegex, function(match, prefix, target, suffix) {                              // 5144
        return match + ', ' + prefix + target + suffix;                                                                // 5145
      });                                                                                                              // 5146
    }                                                                                                                  // 5147
    generatedRules.push(newRule);                                                                                      // 5148
  });                                                                                                                  // 5149
                                                                                                                       // 5150
  return generatedRules;                                                                                               // 5151
}                                                                                                                      // 5152
                                                                                                                       // 5153
var rulesByType = {};                                                                                                  // 5154
                                                                                                                       // 5155
// Generate our themes at run time given the state of THEMES and PALETTES                                              // 5156
function generateAllThemes($injector) {                                                                                // 5157
  var head = document.head;                                                                                            // 5158
  var firstChild = head ? head.firstElementChild : null;                                                               // 5159
  var themeCss = $injector.has('$MD_THEME_CSS') ? $injector.get('$MD_THEME_CSS') : '';                                 // 5160
                                                                                                                       // 5161
  if ( !firstChild ) return;                                                                                           // 5162
  if (themeCss.length === 0) return; // no rules, so no point in running this expensive task                           // 5163
                                                                                                                       // 5164
  // Expose contrast colors for palettes to ensure that text is always readable                                        // 5165
  angular.forEach(PALETTES, sanitizePalette);                                                                          // 5166
                                                                                                                       // 5167
  // MD_THEME_CSS is a string generated by the build process that includes all the themable                            // 5168
  // components as templates                                                                                           // 5169
                                                                                                                       // 5170
  // Break the CSS into individual rules                                                                               // 5171
  var rules = themeCss                                                                                                 // 5172
                  .split(/\}(?!(\}|'|"|;))/)                                                                           // 5173
                  .filter(function(rule) { return rule && rule.length; })                                              // 5174
                  .map(function(rule) { return rule.trim() + '}'; });                                                  // 5175
                                                                                                                       // 5176
                                                                                                                       // 5177
  var ruleMatchRegex = new RegExp('md-(' + THEME_COLOR_TYPES.join('|') + ')', 'g');                                    // 5178
                                                                                                                       // 5179
  THEME_COLOR_TYPES.forEach(function(type) {                                                                           // 5180
    rulesByType[type] = '';                                                                                            // 5181
  });                                                                                                                  // 5182
                                                                                                                       // 5183
                                                                                                                       // 5184
  // Sort the rules based on type, allowing us to do color substitution on a per-type basis                            // 5185
  rules.forEach(function(rule) {                                                                                       // 5186
    var match = rule.match(ruleMatchRegex);                                                                            // 5187
    // First: test that if the rule has '.md-accent', it goes into the accent set of rules                             // 5188
    for (var i = 0, type; type = THEME_COLOR_TYPES[i]; i++) {                                                          // 5189
      if (rule.indexOf('.md-' + type) > -1) {                                                                          // 5190
        return rulesByType[type] += rule;                                                                              // 5191
      }                                                                                                                // 5192
    }                                                                                                                  // 5193
                                                                                                                       // 5194
    // If no eg 'md-accent' class is found, try to just find 'accent' in the rule and guess from                       // 5195
    // there                                                                                                           // 5196
    for (i = 0; type = THEME_COLOR_TYPES[i]; i++) {                                                                    // 5197
      if (rule.indexOf(type) > -1) {                                                                                   // 5198
        return rulesByType[type] += rule;                                                                              // 5199
      }                                                                                                                // 5200
    }                                                                                                                  // 5201
                                                                                                                       // 5202
    // Default to the primary array                                                                                    // 5203
    return rulesByType[DEFAULT_COLOR_TYPE] += rule;                                                                    // 5204
  });                                                                                                                  // 5205
                                                                                                                       // 5206
  // If themes are being generated on-demand, quit here. The user will later manually                                  // 5207
  // call generateTheme to do this on a theme-by-theme basis.                                                          // 5208
  if (generateOnDemand) return;                                                                                        // 5209
                                                                                                                       // 5210
  angular.forEach(THEMES, function(theme) {                                                                            // 5211
    if (!GENERATED[theme.name]) {                                                                                      // 5212
      generateTheme(theme.name, nonce);                                                                                // 5213
    }                                                                                                                  // 5214
  });                                                                                                                  // 5215
                                                                                                                       // 5216
                                                                                                                       // 5217
  // *************************                                                                                         // 5218
  // Internal functions                                                                                                // 5219
  // *************************                                                                                         // 5220
                                                                                                                       // 5221
  // The user specifies a 'default' contrast color as either light or dark,                                            // 5222
  // then explicitly lists which hues are the opposite contrast (eg. A100 has dark, A200 has light)                    // 5223
  function sanitizePalette(palette) {                                                                                  // 5224
    var defaultContrast = palette.contrastDefaultColor;                                                                // 5225
    var lightColors = palette.contrastLightColors || [];                                                               // 5226
    var strongLightColors = palette.contrastStrongLightColors || [];                                                   // 5227
    var darkColors = palette.contrastDarkColors || [];                                                                 // 5228
                                                                                                                       // 5229
    // These colors are provided as space-separated lists                                                              // 5230
    if (typeof lightColors === 'string') lightColors = lightColors.split(' ');                                         // 5231
    if (typeof strongLightColors === 'string') strongLightColors = strongLightColors.split(' ');                       // 5232
    if (typeof darkColors === 'string') darkColors = darkColors.split(' ');                                            // 5233
                                                                                                                       // 5234
    // Cleanup after ourselves                                                                                         // 5235
    delete palette.contrastDefaultColor;                                                                               // 5236
    delete palette.contrastLightColors;                                                                                // 5237
    delete palette.contrastStrongLightColors;                                                                          // 5238
    delete palette.contrastDarkColors;                                                                                 // 5239
                                                                                                                       // 5240
    // Change { 'A100': '#fffeee' } to { 'A100': { value: '#fffeee', contrast:DARK_CONTRAST_COLOR }                    // 5241
    angular.forEach(palette, function(hueValue, hueName) {                                                             // 5242
      if (angular.isObject(hueValue)) return; // Already converted                                                     // 5243
      // Map everything to rgb colors                                                                                  // 5244
      var rgbValue = colorToRgbaArray(hueValue);                                                                       // 5245
      if (!rgbValue) {                                                                                                 // 5246
        throw new Error("Color %1, in palette %2's hue %3, is invalid. Hex or rgb(a) color expected."                  // 5247
                        .replace('%1', hueValue)                                                                       // 5248
                        .replace('%2', palette.name)                                                                   // 5249
                        .replace('%3', hueName));                                                                      // 5250
      }                                                                                                                // 5251
                                                                                                                       // 5252
      palette[hueName] = {                                                                                             // 5253
        value: rgbValue,                                                                                               // 5254
        contrast: getContrastColor()                                                                                   // 5255
      };                                                                                                               // 5256
      function getContrastColor() {                                                                                    // 5257
        if (defaultContrast === 'light') {                                                                             // 5258
          if (darkColors.indexOf(hueName) > -1) {                                                                      // 5259
            return DARK_CONTRAST_COLOR;                                                                                // 5260
          } else {                                                                                                     // 5261
            return strongLightColors.indexOf(hueName) > -1 ? STRONG_LIGHT_CONTRAST_COLOR                               // 5262
              : LIGHT_CONTRAST_COLOR;                                                                                  // 5263
          }                                                                                                            // 5264
        } else {                                                                                                       // 5265
          if (lightColors.indexOf(hueName) > -1) {                                                                     // 5266
            return strongLightColors.indexOf(hueName) > -1 ? STRONG_LIGHT_CONTRAST_COLOR                               // 5267
              : LIGHT_CONTRAST_COLOR;                                                                                  // 5268
          } else {                                                                                                     // 5269
            return DARK_CONTRAST_COLOR;                                                                                // 5270
          }                                                                                                            // 5271
        }                                                                                                              // 5272
      }                                                                                                                // 5273
    });                                                                                                                // 5274
  }                                                                                                                    // 5275
}                                                                                                                      // 5276
generateAllThemes.$inject = ["$injector"];                                                                             // 5277
                                                                                                                       // 5278
function generateTheme(name, nonce) {                                                                                  // 5279
  var theme = THEMES[name];                                                                                            // 5280
  var head = document.head;                                                                                            // 5281
  var firstChild = head ? head.firstElementChild : null;                                                               // 5282
                                                                                                                       // 5283
  if (!GENERATED[name]) {                                                                                              // 5284
    // For each theme, use the color palettes specified for                                                            // 5285
    // `primary`, `warn` and `accent` to generate CSS rules.                                                           // 5286
    THEME_COLOR_TYPES.forEach(function(colorType) {                                                                    // 5287
      var styleStrings = parseRules(theme, colorType, rulesByType[colorType]);                                         // 5288
      while (styleStrings.length) {                                                                                    // 5289
        var styleContent = styleStrings.shift();                                                                       // 5290
        if (styleContent) {                                                                                            // 5291
          var style = document.createElement('style');                                                                 // 5292
          style.setAttribute('md-theme-style', '');                                                                    // 5293
          if (nonce) {                                                                                                 // 5294
            style.setAttribute('nonce', nonce);                                                                        // 5295
          }                                                                                                            // 5296
          style.appendChild(document.createTextNode(styleContent));                                                    // 5297
          head.insertBefore(style, firstChild);                                                                        // 5298
        }                                                                                                              // 5299
      }                                                                                                                // 5300
    });                                                                                                                // 5301
                                                                                                                       // 5302
                                                                                                                       // 5303
    if (theme.colors.primary.name == theme.colors.accent.name) {                                                       // 5304
      console.warn('$mdThemingProvider: Using the same palette for primary and' +                                      // 5305
                   ' accent. This violates the material design spec.');                                                // 5306
    }                                                                                                                  // 5307
                                                                                                                       // 5308
    GENERATED[theme.name] = true;                                                                                      // 5309
  }                                                                                                                    // 5310
                                                                                                                       // 5311
}                                                                                                                      // 5312
                                                                                                                       // 5313
                                                                                                                       // 5314
function checkValidPalette(theme, colorType) {                                                                         // 5315
  // If theme attempts to use a palette that doesnt exist, throw error                                                 // 5316
  if (!PALETTES[ (theme.colors[colorType] || {}).name ]) {                                                             // 5317
    throw new Error(                                                                                                   // 5318
      "You supplied an invalid color palette for theme %1's %2 palette. Available palettes: %3"                        // 5319
                    .replace('%1', theme.name)                                                                         // 5320
                    .replace('%2', colorType)                                                                          // 5321
                    .replace('%3', Object.keys(PALETTES).join(', '))                                                   // 5322
    );                                                                                                                 // 5323
  }                                                                                                                    // 5324
}                                                                                                                      // 5325
                                                                                                                       // 5326
function colorToRgbaArray(clr) {                                                                                       // 5327
  if (angular.isArray(clr) && clr.length == 3) return clr;                                                             // 5328
  if (/^rgb/.test(clr)) {                                                                                              // 5329
    return clr.replace(/(^\s*rgba?\(|\)\s*$)/g, '').split(',').map(function(value, i) {                                // 5330
      return i == 3 ? parseFloat(value, 10) : parseInt(value, 10);                                                     // 5331
    });                                                                                                                // 5332
  }                                                                                                                    // 5333
  if (clr.charAt(0) == '#') clr = clr.substring(1);                                                                    // 5334
  if (!/^([a-fA-F0-9]{3}){1,2}$/g.test(clr)) return;                                                                   // 5335
                                                                                                                       // 5336
  var dig = clr.length / 3;                                                                                            // 5337
  var red = clr.substr(0, dig);                                                                                        // 5338
  var grn = clr.substr(dig, dig);                                                                                      // 5339
  var blu = clr.substr(dig * 2);                                                                                       // 5340
  if (dig === 1) {                                                                                                     // 5341
    red += red;                                                                                                        // 5342
    grn += grn;                                                                                                        // 5343
    blu += blu;                                                                                                        // 5344
  }                                                                                                                    // 5345
  return [parseInt(red, 16), parseInt(grn, 16), parseInt(blu, 16)];                                                    // 5346
}                                                                                                                      // 5347
                                                                                                                       // 5348
function rgba(rgbArray, opacity) {                                                                                     // 5349
  if ( !rgbArray ) return "rgb('0,0,0')";                                                                              // 5350
                                                                                                                       // 5351
  if (rgbArray.length == 4) {                                                                                          // 5352
    rgbArray = angular.copy(rgbArray);                                                                                 // 5353
    opacity ? rgbArray.pop() : opacity = rgbArray.pop();                                                               // 5354
  }                                                                                                                    // 5355
  return opacity && (typeof opacity == 'number' || (typeof opacity == 'string' && opacity.length)) ?                   // 5356
    'rgba(' + rgbArray.join(',') + ',' + opacity + ')' :                                                               // 5357
    'rgb(' + rgbArray.join(',') + ')';                                                                                 // 5358
}                                                                                                                      // 5359
                                                                                                                       // 5360
                                                                                                                       // 5361
})();                                                                                                                  // 5362
(function(){                                                                                                           // 5363
"use strict";                                                                                                          // 5364
                                                                                                                       // 5365
// Polyfill angular < 1.4 (provide $animateCss)                                                                        // 5366
angular                                                                                                                // 5367
  .module('material.core')                                                                                             // 5368
  .factory('$$mdAnimate', ["$q", "$timeout", "$mdConstant", "$animateCss", function($q, $timeout, $mdConstant, $animateCss){
                                                                                                                       // 5370
     // Since $$mdAnimate is injected into $mdUtil... use a wrapper function                                           // 5371
     // to subsequently inject $mdUtil as an argument to the AnimateDomUtils                                           // 5372
                                                                                                                       // 5373
     return function($mdUtil) {                                                                                        // 5374
       return AnimateDomUtils( $mdUtil, $q, $timeout, $mdConstant, $animateCss);                                       // 5375
     };                                                                                                                // 5376
   }]);                                                                                                                // 5377
                                                                                                                       // 5378
/**                                                                                                                    // 5379
 * Factory function that requires special injections                                                                   // 5380
 */                                                                                                                    // 5381
function AnimateDomUtils($mdUtil, $q, $timeout, $mdConstant, $animateCss) {                                            // 5382
  var self;                                                                                                            // 5383
  return self = {                                                                                                      // 5384
    /**                                                                                                                // 5385
     *                                                                                                                 // 5386
     */                                                                                                                // 5387
    translate3d : function( target, from, to, options ) {                                                              // 5388
      return $animateCss(target,{                                                                                      // 5389
        from:from,                                                                                                     // 5390
        to:to,                                                                                                         // 5391
        addClass:options.transitionInClass                                                                             // 5392
      })                                                                                                               // 5393
      .start()                                                                                                         // 5394
      .then(function(){                                                                                                // 5395
          // Resolve with reverser function...                                                                         // 5396
          return reverseTranslate;                                                                                     // 5397
      });                                                                                                              // 5398
                                                                                                                       // 5399
      /**                                                                                                              // 5400
       * Specific reversal of the request translate animation above...                                                 // 5401
       */                                                                                                              // 5402
      function reverseTranslate (newFrom) {                                                                            // 5403
        return $animateCss(target, {                                                                                   // 5404
           to: newFrom || from,                                                                                        // 5405
           addClass: options.transitionOutClass,                                                                       // 5406
           removeClass: options.transitionInClass                                                                      // 5407
        }).start();                                                                                                    // 5408
                                                                                                                       // 5409
      }                                                                                                                // 5410
  },                                                                                                                   // 5411
                                                                                                                       // 5412
    /**                                                                                                                // 5413
     * Listen for transitionEnd event (with optional timeout)                                                          // 5414
     * Announce completion or failure via promise handlers                                                             // 5415
     */                                                                                                                // 5416
    waitTransitionEnd: function (element, opts) {                                                                      // 5417
        var TIMEOUT = 3000; // fallback is 3 secs                                                                      // 5418
                                                                                                                       // 5419
        return $q(function(resolve, reject){                                                                           // 5420
          opts = opts || { };                                                                                          // 5421
                                                                                                                       // 5422
          var timer = $timeout(finished, opts.timeout || TIMEOUT);                                                     // 5423
          element.on($mdConstant.CSS.TRANSITIONEND, finished);                                                         // 5424
                                                                                                                       // 5425
          /**                                                                                                          // 5426
           * Upon timeout or transitionEnd, reject or resolve (respectively) this promise.                             // 5427
           * NOTE: Make sure this transitionEnd didn't bubble up from a child                                          // 5428
           */                                                                                                          // 5429
          function finished(ev) {                                                                                      // 5430
            if ( ev && ev.target !== element[0]) return;                                                               // 5431
                                                                                                                       // 5432
            if ( ev  ) $timeout.cancel(timer);                                                                         // 5433
            element.off($mdConstant.CSS.TRANSITIONEND, finished);                                                      // 5434
                                                                                                                       // 5435
            // Never reject since ngAnimate may cause timeouts due missed transitionEnd events                         // 5436
            resolve();                                                                                                 // 5437
                                                                                                                       // 5438
          }                                                                                                            // 5439
                                                                                                                       // 5440
        });                                                                                                            // 5441
      },                                                                                                               // 5442
                                                                                                                       // 5443
    /**                                                                                                                // 5444
     * Calculate the zoom transform from dialog to origin.                                                             // 5445
     *                                                                                                                 // 5446
     * We use this to set the dialog position immediately;                                                             // 5447
     * then the md-transition-in actually translates back to                                                           // 5448
     * `translate3d(0,0,0) scale(1.0)`...                                                                              // 5449
     *                                                                                                                 // 5450
     * NOTE: all values are rounded to the nearest integer                                                             // 5451
     */                                                                                                                // 5452
    calculateZoomToOrigin: function (element, originator) {                                                            // 5453
      var origin = originator.element;                                                                                 // 5454
      var bounds = originator.bounds;                                                                                  // 5455
                                                                                                                       // 5456
      var zoomTemplate = "translate3d( {centerX}px, {centerY}px, 0 ) scale( {scaleX}, {scaleY} )";                     // 5457
      var buildZoom = angular.bind(null, $mdUtil.supplant, zoomTemplate);                                              // 5458
      var zoomStyle = buildZoom({centerX: 0, centerY: 0, scaleX: 0.5, scaleY: 0.5});                                   // 5459
                                                                                                                       // 5460
      if (origin || bounds) {                                                                                          // 5461
        var originBnds = origin ? self.clientRect(origin) || currentBounds() : self.copyRect(bounds);                  // 5462
        var dialogRect = self.copyRect(element[0].getBoundingClientRect());                                            // 5463
        var dialogCenterPt = self.centerPointFor(dialogRect);                                                          // 5464
        var originCenterPt = self.centerPointFor(originBnds);                                                          // 5465
                                                                                                                       // 5466
        // Build the transform to zoom from the dialog center to the origin center                                     // 5467
                                                                                                                       // 5468
        zoomStyle = buildZoom({                                                                                        // 5469
          centerX: originCenterPt.x - dialogCenterPt.x,                                                                // 5470
          centerY: originCenterPt.y - dialogCenterPt.y,                                                                // 5471
          scaleX: Math.round(100 * Math.min(0.5, originBnds.width / dialogRect.width))/100,                            // 5472
          scaleY: Math.round(100 * Math.min(0.5, originBnds.height / dialogRect.height))/100                           // 5473
        });                                                                                                            // 5474
      }                                                                                                                // 5475
                                                                                                                       // 5476
      return zoomStyle;                                                                                                // 5477
                                                                                                                       // 5478
      /**                                                                                                              // 5479
       * This is a fallback if the origin information is no longer valid, then the                                     // 5480
       * origin bounds simply becomes the current bounds for the dialogContainer's parent                              // 5481
       */                                                                                                              // 5482
      function currentBounds() {                                                                                       // 5483
        var cntr = element ? element.parent() : null;                                                                  // 5484
        var parent = cntr ? cntr.parent() : null;                                                                      // 5485
                                                                                                                       // 5486
        return parent ? self.clientRect(parent) : null;                                                                // 5487
      }                                                                                                                // 5488
    },                                                                                                                 // 5489
                                                                                                                       // 5490
    /**                                                                                                                // 5491
     * Enhance raw values to represent valid css stylings...                                                           // 5492
     */                                                                                                                // 5493
    toCss : function( raw ) {                                                                                          // 5494
      var css = { };                                                                                                   // 5495
      var lookups = 'left top right bottom width height x y min-width min-height max-width max-height';                // 5496
                                                                                                                       // 5497
      angular.forEach(raw, function(value,key) {                                                                       // 5498
        if ( angular.isUndefined(value) ) return;                                                                      // 5499
                                                                                                                       // 5500
        if ( lookups.indexOf(key) >= 0 ) {                                                                             // 5501
          css[key] = value + 'px';                                                                                     // 5502
        } else {                                                                                                       // 5503
          switch (key) {                                                                                               // 5504
            case 'transition':                                                                                         // 5505
              convertToVendor(key, $mdConstant.CSS.TRANSITION, value);                                                 // 5506
              break;                                                                                                   // 5507
            case 'transform':                                                                                          // 5508
              convertToVendor(key, $mdConstant.CSS.TRANSFORM, value);                                                  // 5509
              break;                                                                                                   // 5510
            case 'transformOrigin':                                                                                    // 5511
              convertToVendor(key, $mdConstant.CSS.TRANSFORM_ORIGIN, value);                                           // 5512
              break;                                                                                                   // 5513
          }                                                                                                            // 5514
        }                                                                                                              // 5515
      });                                                                                                              // 5516
                                                                                                                       // 5517
      return css;                                                                                                      // 5518
                                                                                                                       // 5519
      function convertToVendor(key, vendor, value) {                                                                   // 5520
        angular.forEach(vendor.split(' '), function (key) {                                                            // 5521
          css[key] = value;                                                                                            // 5522
        });                                                                                                            // 5523
      }                                                                                                                // 5524
    },                                                                                                                 // 5525
                                                                                                                       // 5526
    /**                                                                                                                // 5527
     * Convert the translate CSS value to key/value pair(s).                                                           // 5528
     */                                                                                                                // 5529
    toTransformCss: function (transform, addTransition, transition) {                                                  // 5530
      var css = {};                                                                                                    // 5531
      angular.forEach($mdConstant.CSS.TRANSFORM.split(' '), function (key) {                                           // 5532
        css[key] = transform;                                                                                          // 5533
      });                                                                                                              // 5534
                                                                                                                       // 5535
      if (addTransition) {                                                                                             // 5536
        transition = transition || "all 0.4s cubic-bezier(0.25, 0.8, 0.25, 1) !important";                             // 5537
        css['transition'] = transition;                                                                                // 5538
      }                                                                                                                // 5539
                                                                                                                       // 5540
      return css;                                                                                                      // 5541
    },                                                                                                                 // 5542
                                                                                                                       // 5543
    /**                                                                                                                // 5544
     *  Clone the Rect and calculate the height/width if needed                                                        // 5545
     */                                                                                                                // 5546
    copyRect: function (source, destination) {                                                                         // 5547
      if (!source) return null;                                                                                        // 5548
                                                                                                                       // 5549
      destination = destination || {};                                                                                 // 5550
                                                                                                                       // 5551
      angular.forEach('left top right bottom width height'.split(' '), function (key) {                                // 5552
        destination[key] = Math.round(source[key])                                                                     // 5553
      });                                                                                                              // 5554
                                                                                                                       // 5555
      destination.width = destination.width || (destination.right - destination.left);                                 // 5556
      destination.height = destination.height || (destination.bottom - destination.top);                               // 5557
                                                                                                                       // 5558
      return destination;                                                                                              // 5559
    },                                                                                                                 // 5560
                                                                                                                       // 5561
    /**                                                                                                                // 5562
     * Calculate ClientRect of element; return null if hidden or zero size                                             // 5563
     */                                                                                                                // 5564
    clientRect: function (element) {                                                                                   // 5565
      var bounds = angular.element(element)[0].getBoundingClientRect();                                                // 5566
      var isPositiveSizeClientRect = function (rect) {                                                                 // 5567
        return rect && (rect.width > 0) && (rect.height > 0);                                                          // 5568
      };                                                                                                               // 5569
                                                                                                                       // 5570
      // If the event origin element has zero size, it has probably been hidden.                                       // 5571
      return isPositiveSizeClientRect(bounds) ? self.copyRect(bounds) : null;                                          // 5572
    },                                                                                                                 // 5573
                                                                                                                       // 5574
    /**                                                                                                                // 5575
     *  Calculate 'rounded' center point of Rect                                                                       // 5576
     */                                                                                                                // 5577
    centerPointFor: function (targetRect) {                                                                            // 5578
      return targetRect ? {                                                                                            // 5579
        x: Math.round(targetRect.left + (targetRect.width / 2)),                                                       // 5580
        y: Math.round(targetRect.top + (targetRect.height / 2))                                                        // 5581
      } : { x : 0, y : 0 };                                                                                            // 5582
    }                                                                                                                  // 5583
                                                                                                                       // 5584
  };                                                                                                                   // 5585
};                                                                                                                     // 5586
                                                                                                                       // 5587
                                                                                                                       // 5588
})();                                                                                                                  // 5589
(function(){                                                                                                           // 5590
"use strict";                                                                                                          // 5591
                                                                                                                       // 5592
"use strict";                                                                                                          // 5593
                                                                                                                       // 5594
if (angular.version.minor >= 4) {                                                                                      // 5595
  angular.module('material.core.animate', []);                                                                         // 5596
} else {                                                                                                               // 5597
(function() {                                                                                                          // 5598
                                                                                                                       // 5599
  var forEach = angular.forEach;                                                                                       // 5600
                                                                                                                       // 5601
  var WEBKIT = angular.isDefined(document.documentElement.style.WebkitAppearance);                                     // 5602
  var TRANSITION_PROP = WEBKIT ? 'WebkitTransition' : 'transition';                                                    // 5603
  var ANIMATION_PROP = WEBKIT ? 'WebkitAnimation' : 'animation';                                                       // 5604
  var PREFIX = WEBKIT ? '-webkit-' : '';                                                                               // 5605
                                                                                                                       // 5606
  var TRANSITION_EVENTS = (WEBKIT ? 'webkitTransitionEnd ' : '') + 'transitionend';                                    // 5607
  var ANIMATION_EVENTS = (WEBKIT ? 'webkitAnimationEnd ' : '') + 'animationend';                                       // 5608
                                                                                                                       // 5609
  var $$ForceReflowFactory = ['$document', function($document) {                                                       // 5610
    return function() {                                                                                                // 5611
      return $document[0].body.clientWidth + 1;                                                                        // 5612
    }                                                                                                                  // 5613
  }];                                                                                                                  // 5614
                                                                                                                       // 5615
  var $$rAFMutexFactory = ['$$rAF', function($$rAF) {                                                                  // 5616
    return function() {                                                                                                // 5617
      var passed = false;                                                                                              // 5618
      $$rAF(function() {                                                                                               // 5619
        passed = true;                                                                                                 // 5620
      });                                                                                                              // 5621
      return function(fn) {                                                                                            // 5622
        passed ? fn() : $$rAF(fn);                                                                                     // 5623
      };                                                                                                               // 5624
    };                                                                                                                 // 5625
  }];                                                                                                                  // 5626
                                                                                                                       // 5627
  var $$AnimateRunnerFactory = ['$q', '$$rAFMutex', function($q, $$rAFMutex) {                                         // 5628
    var INITIAL_STATE = 0;                                                                                             // 5629
    var DONE_PENDING_STATE = 1;                                                                                        // 5630
    var DONE_COMPLETE_STATE = 2;                                                                                       // 5631
                                                                                                                       // 5632
    function AnimateRunner(host) {                                                                                     // 5633
      this.setHost(host);                                                                                              // 5634
                                                                                                                       // 5635
      this._doneCallbacks = [];                                                                                        // 5636
      this._runInAnimationFrame = $$rAFMutex();                                                                        // 5637
      this._state = 0;                                                                                                 // 5638
    }                                                                                                                  // 5639
                                                                                                                       // 5640
    AnimateRunner.prototype = {                                                                                        // 5641
      setHost: function(host) {                                                                                        // 5642
        this.host = host || {};                                                                                        // 5643
      },                                                                                                               // 5644
                                                                                                                       // 5645
      done: function(fn) {                                                                                             // 5646
        if (this._state === DONE_COMPLETE_STATE) {                                                                     // 5647
          fn();                                                                                                        // 5648
        } else {                                                                                                       // 5649
          this._doneCallbacks.push(fn);                                                                                // 5650
        }                                                                                                              // 5651
      },                                                                                                               // 5652
                                                                                                                       // 5653
      progress: angular.noop,                                                                                          // 5654
                                                                                                                       // 5655
      getPromise: function() {                                                                                         // 5656
        if (!this.promise) {                                                                                           // 5657
          var self = this;                                                                                             // 5658
          this.promise = $q(function(resolve, reject) {                                                                // 5659
            self.done(function(status) {                                                                               // 5660
              status === false ? reject() : resolve();                                                                 // 5661
            });                                                                                                        // 5662
          });                                                                                                          // 5663
        }                                                                                                              // 5664
        return this.promise;                                                                                           // 5665
      },                                                                                                               // 5666
                                                                                                                       // 5667
      then: function(resolveHandler, rejectHandler) {                                                                  // 5668
        return this.getPromise().then(resolveHandler, rejectHandler);                                                  // 5669
      },                                                                                                               // 5670
                                                                                                                       // 5671
      'catch': function(handler) {                                                                                     // 5672
        return this.getPromise()['catch'](handler);                                                                    // 5673
      },                                                                                                               // 5674
                                                                                                                       // 5675
      'finally': function(handler) {                                                                                   // 5676
        return this.getPromise()['finally'](handler);                                                                  // 5677
      },                                                                                                               // 5678
                                                                                                                       // 5679
      pause: function() {                                                                                              // 5680
        if (this.host.pause) {                                                                                         // 5681
          this.host.pause();                                                                                           // 5682
        }                                                                                                              // 5683
      },                                                                                                               // 5684
                                                                                                                       // 5685
      resume: function() {                                                                                             // 5686
        if (this.host.resume) {                                                                                        // 5687
          this.host.resume();                                                                                          // 5688
        }                                                                                                              // 5689
      },                                                                                                               // 5690
                                                                                                                       // 5691
      end: function() {                                                                                                // 5692
        if (this.host.end) {                                                                                           // 5693
          this.host.end();                                                                                             // 5694
        }                                                                                                              // 5695
        this._resolve(true);                                                                                           // 5696
      },                                                                                                               // 5697
                                                                                                                       // 5698
      cancel: function() {                                                                                             // 5699
        if (this.host.cancel) {                                                                                        // 5700
          this.host.cancel();                                                                                          // 5701
        }                                                                                                              // 5702
        this._resolve(false);                                                                                          // 5703
      },                                                                                                               // 5704
                                                                                                                       // 5705
      complete: function(response) {                                                                                   // 5706
        var self = this;                                                                                               // 5707
        if (self._state === INITIAL_STATE) {                                                                           // 5708
          self._state = DONE_PENDING_STATE;                                                                            // 5709
          self._runInAnimationFrame(function() {                                                                       // 5710
            self._resolve(response);                                                                                   // 5711
          });                                                                                                          // 5712
        }                                                                                                              // 5713
      },                                                                                                               // 5714
                                                                                                                       // 5715
      _resolve: function(response) {                                                                                   // 5716
        if (this._state !== DONE_COMPLETE_STATE) {                                                                     // 5717
          forEach(this._doneCallbacks, function(fn) {                                                                  // 5718
            fn(response);                                                                                              // 5719
          });                                                                                                          // 5720
          this._doneCallbacks.length = 0;                                                                              // 5721
          this._state = DONE_COMPLETE_STATE;                                                                           // 5722
        }                                                                                                              // 5723
      }                                                                                                                // 5724
    };                                                                                                                 // 5725
                                                                                                                       // 5726
    return AnimateRunner;                                                                                              // 5727
  }];                                                                                                                  // 5728
                                                                                                                       // 5729
  angular                                                                                                              // 5730
    .module('material.core.animate', [])                                                                               // 5731
    .factory('$$forceReflow', $$ForceReflowFactory)                                                                    // 5732
    .factory('$$AnimateRunner', $$AnimateRunnerFactory)                                                                // 5733
    .factory('$$rAFMutex', $$rAFMutexFactory)                                                                          // 5734
    .factory('$animateCss', ['$window', '$$rAF', '$$AnimateRunner', '$$forceReflow', '$$jqLite', '$timeout',           // 5735
                     function($window,   $$rAF,   $$AnimateRunner,   $$forceReflow,   $$jqLite,   $timeout) {          // 5736
                                                                                                                       // 5737
      function init(element, options) {                                                                                // 5738
                                                                                                                       // 5739
        var temporaryStyles = [];                                                                                      // 5740
        var node = getDomNode(element);                                                                                // 5741
                                                                                                                       // 5742
        if (options.transitionStyle) {                                                                                 // 5743
          temporaryStyles.push([PREFIX + 'transition', options.transitionStyle]);                                      // 5744
        }                                                                                                              // 5745
                                                                                                                       // 5746
        if (options.keyframeStyle) {                                                                                   // 5747
          temporaryStyles.push([PREFIX + 'animation', options.keyframeStyle]);                                         // 5748
        }                                                                                                              // 5749
                                                                                                                       // 5750
        if (options.delay) {                                                                                           // 5751
          temporaryStyles.push([PREFIX + 'transition-delay', options.delay + 's']);                                    // 5752
        }                                                                                                              // 5753
                                                                                                                       // 5754
        if (options.duration) {                                                                                        // 5755
          temporaryStyles.push([PREFIX + 'transition-duration', options.duration + 's']);                              // 5756
        }                                                                                                              // 5757
                                                                                                                       // 5758
        var hasCompleteStyles = options.keyframeStyle ||                                                               // 5759
                                (options.to && (options.duration > 0 || options.transitionStyle));                     // 5760
        var hasCompleteClasses = !!options.addClass || !!options.removeClass;                                          // 5761
        var hasCompleteAnimation = hasCompleteStyles || hasCompleteClasses;                                            // 5762
                                                                                                                       // 5763
        blockTransition(element, true);                                                                                // 5764
        applyAnimationFromStyles(element, options);                                                                    // 5765
                                                                                                                       // 5766
        var animationClosed = false;                                                                                   // 5767
        var events, eventFn;                                                                                           // 5768
                                                                                                                       // 5769
        return {                                                                                                       // 5770
          close: $window.close,                                                                                        // 5771
          start: function() {                                                                                          // 5772
            var runner = new $$AnimateRunner();                                                                        // 5773
            waitUntilQuiet(function() {                                                                                // 5774
              blockTransition(element, false);                                                                         // 5775
              if (!hasCompleteAnimation) {                                                                             // 5776
                return close();                                                                                        // 5777
              }                                                                                                        // 5778
                                                                                                                       // 5779
              forEach(temporaryStyles, function(entry) {                                                               // 5780
                var key = entry[0];                                                                                    // 5781
                var value = entry[1];                                                                                  // 5782
                node.style[camelCase(key)] = value;                                                                    // 5783
              });                                                                                                      // 5784
                                                                                                                       // 5785
              applyClasses(element, options);                                                                          // 5786
                                                                                                                       // 5787
              var timings = computeTimings(element);                                                                   // 5788
              if (timings.duration === 0) {                                                                            // 5789
                return close();                                                                                        // 5790
              }                                                                                                        // 5791
                                                                                                                       // 5792
              var moreStyles = [];                                                                                     // 5793
                                                                                                                       // 5794
              if (options.easing) {                                                                                    // 5795
                if (timings.transitionDuration) {                                                                      // 5796
                  moreStyles.push([PREFIX + 'transition-timing-function', options.easing]);                            // 5797
                }                                                                                                      // 5798
                if (timings.animationDuration) {                                                                       // 5799
                  moreStyles.push([PREFIX + 'animation-timing-function', options.easing]);                             // 5800
                }                                                                                                      // 5801
              }                                                                                                        // 5802
                                                                                                                       // 5803
              if (options.delay && timings.animationDelay) {                                                           // 5804
                moreStyles.push([PREFIX + 'animation-delay', options.delay + 's']);                                    // 5805
              }                                                                                                        // 5806
                                                                                                                       // 5807
              if (options.duration && timings.animationDuration) {                                                     // 5808
                moreStyles.push([PREFIX + 'animation-duration', options.duration + 's']);                              // 5809
              }                                                                                                        // 5810
                                                                                                                       // 5811
              forEach(moreStyles, function(entry) {                                                                    // 5812
                var key = entry[0];                                                                                    // 5813
                var value = entry[1];                                                                                  // 5814
                node.style[camelCase(key)] = value;                                                                    // 5815
                temporaryStyles.push(entry);                                                                           // 5816
              });                                                                                                      // 5817
                                                                                                                       // 5818
              var maxDelay = timings.delay;                                                                            // 5819
              var maxDelayTime = maxDelay * 1000;                                                                      // 5820
              var maxDuration = timings.duration;                                                                      // 5821
              var maxDurationTime = maxDuration * 1000;                                                                // 5822
              var startTime = Date.now();                                                                              // 5823
                                                                                                                       // 5824
              events = [];                                                                                             // 5825
              if (timings.transitionDuration) {                                                                        // 5826
                events.push(TRANSITION_EVENTS);                                                                        // 5827
              }                                                                                                        // 5828
              if (timings.animationDuration) {                                                                         // 5829
                events.push(ANIMATION_EVENTS);                                                                         // 5830
              }                                                                                                        // 5831
              events = events.join(' ');                                                                               // 5832
              eventFn = function(event) {                                                                              // 5833
                event.stopPropagation();                                                                               // 5834
                var ev = event.originalEvent || event;                                                                 // 5835
                var timeStamp = ev.timeStamp || Date.now();                                                            // 5836
                var elapsedTime = parseFloat(ev.elapsedTime.toFixed(3));                                               // 5837
                if (Math.max(timeStamp - startTime, 0) >= maxDelayTime && elapsedTime >= maxDuration) {                // 5838
                  close();                                                                                             // 5839
                }                                                                                                      // 5840
              };                                                                                                       // 5841
              element.on(events, eventFn);                                                                             // 5842
                                                                                                                       // 5843
              applyAnimationToStyles(element, options);                                                                // 5844
                                                                                                                       // 5845
              $timeout(close, maxDelayTime + maxDurationTime * 1.5, false);                                            // 5846
            });                                                                                                        // 5847
                                                                                                                       // 5848
            return runner;                                                                                             // 5849
                                                                                                                       // 5850
            function close() {                                                                                         // 5851
              if (animationClosed) return;                                                                             // 5852
              animationClosed = true;                                                                                  // 5853
                                                                                                                       // 5854
              if (events && eventFn) {                                                                                 // 5855
                element.off(events, eventFn);                                                                          // 5856
              }                                                                                                        // 5857
              applyClasses(element, options);                                                                          // 5858
              applyAnimationStyles(element, options);                                                                  // 5859
              forEach(temporaryStyles, function(entry) {                                                               // 5860
                node.style[camelCase(entry[0])] = '';                                                                  // 5861
              });                                                                                                      // 5862
              runner.complete(true);                                                                                   // 5863
              return runner;                                                                                           // 5864
            }                                                                                                          // 5865
          }                                                                                                            // 5866
        }                                                                                                              // 5867
      }                                                                                                                // 5868
                                                                                                                       // 5869
      function applyClasses(element, options) {                                                                        // 5870
        if (options.addClass) {                                                                                        // 5871
          $$jqLite.addClass(element, options.addClass);                                                                // 5872
          options.addClass = null;                                                                                     // 5873
        }                                                                                                              // 5874
        if (options.removeClass) {                                                                                     // 5875
          $$jqLite.removeClass(element, options.removeClass);                                                          // 5876
          options.removeClass = null;                                                                                  // 5877
        }                                                                                                              // 5878
      }                                                                                                                // 5879
                                                                                                                       // 5880
      function computeTimings(element) {                                                                               // 5881
        var node = getDomNode(element);                                                                                // 5882
        var cs = $window.getComputedStyle(node)                                                                        // 5883
        var tdr = parseMaxTime(cs[prop('transitionDuration')]);                                                        // 5884
        var adr = parseMaxTime(cs[prop('animationDuration')]);                                                         // 5885
        var tdy = parseMaxTime(cs[prop('transitionDelay')]);                                                           // 5886
        var ady = parseMaxTime(cs[prop('animationDelay')]);                                                            // 5887
                                                                                                                       // 5888
        adr *= (parseInt(cs[prop('animationIterationCount')], 10) || 1);                                               // 5889
        var duration = Math.max(adr, tdr);                                                                             // 5890
        var delay = Math.max(ady, tdy);                                                                                // 5891
                                                                                                                       // 5892
        return {                                                                                                       // 5893
          duration: duration,                                                                                          // 5894
          delay: delay,                                                                                                // 5895
          animationDuration: adr,                                                                                      // 5896
          transitionDuration: tdr,                                                                                     // 5897
          animationDelay: ady,                                                                                         // 5898
          transitionDelay: tdy                                                                                         // 5899
        };                                                                                                             // 5900
                                                                                                                       // 5901
        function prop(key) {                                                                                           // 5902
          return WEBKIT ? 'Webkit' + key.charAt(0).toUpperCase() + key.substr(1)                                       // 5903
                        : key;                                                                                         // 5904
        }                                                                                                              // 5905
      }                                                                                                                // 5906
                                                                                                                       // 5907
      function parseMaxTime(str) {                                                                                     // 5908
        var maxValue = 0;                                                                                              // 5909
        var values = (str || "").split(/\s*,\s*/);                                                                     // 5910
        forEach(values, function(value) {                                                                              // 5911
          // it's always safe to consider only second values and omit `ms` values since                                // 5912
          // getComputedStyle will always handle the conversion for us                                                 // 5913
          if (value.charAt(value.length - 1) == 's') {                                                                 // 5914
            value = value.substring(0, value.length - 1);                                                              // 5915
          }                                                                                                            // 5916
          value = parseFloat(value) || 0;                                                                              // 5917
          maxValue = maxValue ? Math.max(value, maxValue) : value;                                                     // 5918
        });                                                                                                            // 5919
        return maxValue;                                                                                               // 5920
      }                                                                                                                // 5921
                                                                                                                       // 5922
      var cancelLastRAFRequest;                                                                                        // 5923
      var rafWaitQueue = [];                                                                                           // 5924
      function waitUntilQuiet(callback) {                                                                              // 5925
        if (cancelLastRAFRequest) {                                                                                    // 5926
          cancelLastRAFRequest(); //cancels the request                                                                // 5927
        }                                                                                                              // 5928
        rafWaitQueue.push(callback);                                                                                   // 5929
        cancelLastRAFRequest = $$rAF(function() {                                                                      // 5930
          cancelLastRAFRequest = null;                                                                                 // 5931
                                                                                                                       // 5932
          // DO NOT REMOVE THIS LINE OR REFACTOR OUT THE `pageWidth` variable.                                         // 5933
          // PLEASE EXAMINE THE `$$forceReflow` service to understand why.                                             // 5934
          var pageWidth = $$forceReflow();                                                                             // 5935
                                                                                                                       // 5936
          // we use a for loop to ensure that if the queue is changed                                                  // 5937
          // during this looping then it will consider new requests                                                    // 5938
          for (var i = 0; i < rafWaitQueue.length; i++) {                                                              // 5939
            rafWaitQueue[i](pageWidth);                                                                                // 5940
          }                                                                                                            // 5941
          rafWaitQueue.length = 0;                                                                                     // 5942
        });                                                                                                            // 5943
      }                                                                                                                // 5944
                                                                                                                       // 5945
      function applyAnimationStyles(element, options) {                                                                // 5946
        applyAnimationFromStyles(element, options);                                                                    // 5947
        applyAnimationToStyles(element, options);                                                                      // 5948
      }                                                                                                                // 5949
                                                                                                                       // 5950
      function applyAnimationFromStyles(element, options) {                                                            // 5951
        if (options.from) {                                                                                            // 5952
          element.css(options.from);                                                                                   // 5953
          options.from = null;                                                                                         // 5954
        }                                                                                                              // 5955
      }                                                                                                                // 5956
                                                                                                                       // 5957
      function applyAnimationToStyles(element, options) {                                                              // 5958
        if (options.to) {                                                                                              // 5959
          element.css(options.to);                                                                                     // 5960
          options.to = null;                                                                                           // 5961
        }                                                                                                              // 5962
      }                                                                                                                // 5963
                                                                                                                       // 5964
      function getDomNode(element) {                                                                                   // 5965
        for (var i = 0; i < element.length; i++) {                                                                     // 5966
          if (element[i].nodeType === 1) return element[i];                                                            // 5967
        }                                                                                                              // 5968
      }                                                                                                                // 5969
                                                                                                                       // 5970
      function blockTransition(element, bool) {                                                                        // 5971
        var node = getDomNode(element);                                                                                // 5972
        var key = camelCase(PREFIX + 'transition-delay');                                                              // 5973
        node.style[key] = bool ? '-9999s' : '';                                                                        // 5974
      }                                                                                                                // 5975
                                                                                                                       // 5976
      return init;                                                                                                     // 5977
    }]);                                                                                                               // 5978
                                                                                                                       // 5979
  /**                                                                                                                  // 5980
   * Older browsers [FF31] expect camelCase                                                                            // 5981
   * property keys.                                                                                                    // 5982
   * e.g.                                                                                                              // 5983
   *  animation-duration --> animationDuration                                                                         // 5984
   */                                                                                                                  // 5985
  function camelCase(str) {                                                                                            // 5986
    return str.replace(/-[a-z]/g, function(str) {                                                                      // 5987
      return str.charAt(1).toUpperCase();                                                                              // 5988
    });                                                                                                                // 5989
  }                                                                                                                    // 5990
                                                                                                                       // 5991
})();                                                                                                                  // 5992
                                                                                                                       // 5993
}                                                                                                                      // 5994
                                                                                                                       // 5995
})();                                                                                                                  // 5996
(function(){                                                                                                           // 5997
"use strict";                                                                                                          // 5998
                                                                                                                       // 5999
/**                                                                                                                    // 6000
 * @ngdoc module                                                                                                       // 6001
 * @name material.components.autocomplete                                                                              // 6002
 */                                                                                                                    // 6003
/*                                                                                                                     // 6004
 * @see js folder for autocomplete implementation                                                                      // 6005
 */                                                                                                                    // 6006
angular.module('material.components.autocomplete', [                                                                   // 6007
  'material.core',                                                                                                     // 6008
  'material.components.icon',                                                                                          // 6009
  'material.components.virtualRepeat'                                                                                  // 6010
]);                                                                                                                    // 6011
                                                                                                                       // 6012
})();                                                                                                                  // 6013
(function(){                                                                                                           // 6014
"use strict";                                                                                                          // 6015
                                                                                                                       // 6016
/*                                                                                                                     // 6017
 * @ngdoc module                                                                                                       // 6018
 * @name material.components.backdrop                                                                                  // 6019
 * @description Backdrop                                                                                               // 6020
 */                                                                                                                    // 6021
                                                                                                                       // 6022
/**                                                                                                                    // 6023
 * @ngdoc directive                                                                                                    // 6024
 * @name mdBackdrop                                                                                                    // 6025
 * @module material.components.backdrop                                                                                // 6026
 *                                                                                                                     // 6027
 * @restrict E                                                                                                         // 6028
 *                                                                                                                     // 6029
 * @description                                                                                                        // 6030
 * `<md-backdrop>` is a backdrop element used by other components, such as dialog and bottom sheet.                    // 6031
 * Apply class `opaque` to make the backdrop use the theme backdrop color.                                             // 6032
 *                                                                                                                     // 6033
 */                                                                                                                    // 6034
                                                                                                                       // 6035
angular                                                                                                                // 6036
  .module('material.components.backdrop', ['material.core'])                                                           // 6037
  .directive('mdBackdrop', ["$mdTheming", "$animate", "$rootElement", "$window", "$log", "$$rAF", "$document", function BackdropDirective($mdTheming, $animate, $rootElement, $window, $log, $$rAF, $document) {
    var ERROR_CSS_POSITION = "<md-backdrop> may not work properly in a scrolled, static-positioned parent container.";
                                                                                                                       // 6040
    return {                                                                                                           // 6041
      restrict: 'E',                                                                                                   // 6042
      link: postLink                                                                                                   // 6043
    };                                                                                                                 // 6044
                                                                                                                       // 6045
    function postLink(scope, element, attrs) {                                                                         // 6046
                                                                                                                       // 6047
      // If body scrolling has been disabled using mdUtil.disableBodyScroll(),                                         // 6048
      // adjust the 'backdrop' height to account for the fixed 'body' top offset                                       // 6049
      var body = $window.getComputedStyle($document[0].body);                                                          // 6050
      if (body.position == 'fixed') {                                                                                  // 6051
        var hViewport = parseInt(body.height, 10) + Math.abs(parseInt(body.top, 10));                                  // 6052
        element.css({                                                                                                  // 6053
          height: hViewport + 'px'                                                                                     // 6054
        });                                                                                                            // 6055
      }                                                                                                                // 6056
                                                                                                                       // 6057
      // backdrop may be outside the $rootElement, tell ngAnimate to animate regardless                                // 6058
      if ($animate.pin) $animate.pin(element, $rootElement);                                                           // 6059
                                                                                                                       // 6060
      $$rAF(function () {                                                                                              // 6061
                                                                                                                       // 6062
        // Often $animate.enter() is used to append the backDrop element                                               // 6063
        // so let's wait until $animate is done...                                                                     // 6064
        var parent = element.parent()[0];                                                                              // 6065
        if (parent) {                                                                                                  // 6066
                                                                                                                       // 6067
          if ( parent.nodeName == 'BODY' ) {                                                                           // 6068
            element.css({position : 'fixed'});                                                                         // 6069
          }                                                                                                            // 6070
                                                                                                                       // 6071
          var styles = $window.getComputedStyle(parent);                                                               // 6072
          if (styles.position == 'static') {                                                                           // 6073
            // backdrop uses position:absolute and will not work properly with parent position:static (default)        // 6074
            $log.warn(ERROR_CSS_POSITION);                                                                             // 6075
          }                                                                                                            // 6076
        }                                                                                                              // 6077
                                                                                                                       // 6078
        $mdTheming.inherit(element, element.parent());                                                                 // 6079
      });                                                                                                              // 6080
                                                                                                                       // 6081
    }                                                                                                                  // 6082
                                                                                                                       // 6083
  }]);                                                                                                                 // 6084
                                                                                                                       // 6085
})();                                                                                                                  // 6086
(function(){                                                                                                           // 6087
"use strict";                                                                                                          // 6088
                                                                                                                       // 6089
/**                                                                                                                    // 6090
 * @ngdoc module                                                                                                       // 6091
 * @name material.components.button                                                                                    // 6092
 * @description                                                                                                        // 6093
 *                                                                                                                     // 6094
 * Button                                                                                                              // 6095
 */                                                                                                                    // 6096
angular                                                                                                                // 6097
    .module('material.components.button', [ 'material.core' ])                                                         // 6098
    .directive('mdButton', MdButtonDirective);                                                                         // 6099
                                                                                                                       // 6100
/**                                                                                                                    // 6101
 * @ngdoc directive                                                                                                    // 6102
 * @name mdButton                                                                                                      // 6103
 * @module material.components.button                                                                                  // 6104
 *                                                                                                                     // 6105
 * @restrict E                                                                                                         // 6106
 *                                                                                                                     // 6107
 * @description                                                                                                        // 6108
 * `<md-button>` is a button directive with optional ink ripples (default enabled).                                    // 6109
 *                                                                                                                     // 6110
 * If you supply a `href` or `ng-href` attribute, it will become an `<a>` element. Otherwise, it will                  // 6111
 * become a `<button>` element. As per the [Material Design specifications](http://www.google.com/design/spec/style/color.html#color-ui-color-application)
 * the FAB button background is filled with the accent color [by default]. The primary color palette may be used with  // 6113
 * the `md-primary` class.                                                                                             // 6114
 *                                                                                                                     // 6115
 * @param {boolean=} md-no-ink If present, disable ripple ink effects.                                                 // 6116
 * @param {expression=} ng-disabled En/Disable based on the expression                                                 // 6117
 * @param {string=} md-ripple-size Overrides the default ripple size logic. Options: `full`, `partial`, `auto`         // 6118
 * @param {string=} aria-label Adds alternative text to button for accessibility, useful for icon buttons.             // 6119
 * If no default text is found, a warning will be logged.                                                              // 6120
 *                                                                                                                     // 6121
 * @usage                                                                                                              // 6122
 *                                                                                                                     // 6123
 * Regular buttons:                                                                                                    // 6124
 *                                                                                                                     // 6125
 * <hljs lang="html">                                                                                                  // 6126
 *  <md-button> Flat Button </md-button>                                                                               // 6127
 *  <md-button href="http://google.com"> Flat link </md-button>                                                        // 6128
 *  <md-button class="md-raised"> Raised Button </md-button>                                                           // 6129
 *  <md-button ng-disabled="true"> Disabled Button </md-button>                                                        // 6130
 *  <md-button>                                                                                                        // 6131
 *    <md-icon md-svg-src="your/icon.svg"></md-icon>                                                                   // 6132
 *    Register Now                                                                                                     // 6133
 *  </md-button>                                                                                                       // 6134
 * </hljs>                                                                                                             // 6135
 *                                                                                                                     // 6136
 * FAB buttons:                                                                                                        // 6137
 *                                                                                                                     // 6138
 * <hljs lang="html">                                                                                                  // 6139
 *  <md-button class="md-fab" aria-label="FAB">                                                                        // 6140
 *    <md-icon md-svg-src="your/icon.svg"></md-icon>                                                                   // 6141
 *  </md-button>                                                                                                       // 6142
 *  <!-- mini-FAB -->                                                                                                  // 6143
 *  <md-button class="md-fab md-mini" aria-label="Mini FAB">                                                           // 6144
 *    <md-icon md-svg-src="your/icon.svg"></md-icon>                                                                   // 6145
 *  </md-button>                                                                                                       // 6146
 *  <!-- Button with SVG Icon -->                                                                                      // 6147
 *  <md-button class="md-icon-button" aria-label="Custom Icon Button">                                                 // 6148
 *    <md-icon md-svg-icon="path/to/your.svg"></md-icon>                                                               // 6149
 *  </md-button>                                                                                                       // 6150
 * </hljs>                                                                                                             // 6151
 */                                                                                                                    // 6152
function MdButtonDirective($mdButtonInkRipple, $mdTheming, $mdAria, $timeout) {                                        // 6153
                                                                                                                       // 6154
  return {                                                                                                             // 6155
    restrict: 'EA',                                                                                                    // 6156
    replace: true,                                                                                                     // 6157
    transclude: true,                                                                                                  // 6158
    template: getTemplate,                                                                                             // 6159
    link: postLink                                                                                                     // 6160
  };                                                                                                                   // 6161
                                                                                                                       // 6162
  function isAnchor(attr) {                                                                                            // 6163
    return angular.isDefined(attr.href) || angular.isDefined(attr.ngHref) || angular.isDefined(attr.ngLink) || angular.isDefined(attr.uiSref);
  }                                                                                                                    // 6165
                                                                                                                       // 6166
  function getTemplate(element, attr) {                                                                                // 6167
    if (isAnchor(attr)) {                                                                                              // 6168
      return '<a class="md-button" ng-transclude></a>';                                                                // 6169
    } else {                                                                                                           // 6170
      //If buttons don't have type="button", they will submit forms automatically.                                     // 6171
      var btnType = (typeof attr.type === 'undefined') ? 'button' : attr.type;                                         // 6172
      return '<button class="md-button" type="' + btnType + '" ng-transclude></button>';                               // 6173
    }                                                                                                                  // 6174
  }                                                                                                                    // 6175
                                                                                                                       // 6176
  function postLink(scope, element, attr) {                                                                            // 6177
    $mdTheming(element);                                                                                               // 6178
    $mdButtonInkRipple.attach(scope, element);                                                                         // 6179
                                                                                                                       // 6180
    // Use async expect to support possible bindings in the button label                                               // 6181
    $mdAria.expectWithText(element, 'aria-label');                                                                     // 6182
                                                                                                                       // 6183
    // For anchor elements, we have to set tabindex manually when the                                                  // 6184
    // element is disabled                                                                                             // 6185
    if (isAnchor(attr) && angular.isDefined(attr.ngDisabled) ) {                                                       // 6186
      scope.$watch(attr.ngDisabled, function(isDisabled) {                                                             // 6187
        element.attr('tabindex', isDisabled ? -1 : 0);                                                                 // 6188
      });                                                                                                              // 6189
    }                                                                                                                  // 6190
                                                                                                                       // 6191
    // disabling click event when disabled is true                                                                     // 6192
    element.on('click', function(e){                                                                                   // 6193
      if (attr.disabled === true) {                                                                                    // 6194
        e.preventDefault();                                                                                            // 6195
        e.stopImmediatePropagation();                                                                                  // 6196
      }                                                                                                                // 6197
    });                                                                                                                // 6198
                                                                                                                       // 6199
    // restrict focus styles to the keyboard                                                                           // 6200
    scope.mouseActive = false;                                                                                         // 6201
    element.on('mousedown', function() {                                                                               // 6202
        scope.mouseActive = true;                                                                                      // 6203
        $timeout(function(){                                                                                           // 6204
          scope.mouseActive = false;                                                                                   // 6205
        }, 100);                                                                                                       // 6206
      })                                                                                                               // 6207
      .on('focus', function() {                                                                                        // 6208
        if (scope.mouseActive === false) {                                                                             // 6209
          element.addClass('md-focused');                                                                              // 6210
        }                                                                                                              // 6211
      })                                                                                                               // 6212
      .on('blur', function(ev) {                                                                                       // 6213
        element.removeClass('md-focused');                                                                             // 6214
      });                                                                                                              // 6215
  }                                                                                                                    // 6216
                                                                                                                       // 6217
}                                                                                                                      // 6218
MdButtonDirective.$inject = ["$mdButtonInkRipple", "$mdTheming", "$mdAria", "$timeout"];                               // 6219
                                                                                                                       // 6220
})();                                                                                                                  // 6221
(function(){                                                                                                           // 6222
"use strict";                                                                                                          // 6223
                                                                                                                       // 6224
/**                                                                                                                    // 6225
 * @ngdoc module                                                                                                       // 6226
 * @name material.components.card                                                                                      // 6227
 *                                                                                                                     // 6228
 * @description                                                                                                        // 6229
 * Card components.                                                                                                    // 6230
 */                                                                                                                    // 6231
angular.module('material.components.card', [                                                                           // 6232
    'material.core'                                                                                                    // 6233
  ])                                                                                                                   // 6234
  .directive('mdCard', mdCardDirective);                                                                               // 6235
                                                                                                                       // 6236
                                                                                                                       // 6237
/**                                                                                                                    // 6238
 * @ngdoc directive                                                                                                    // 6239
 * @name mdCard                                                                                                        // 6240
 * @module material.components.card                                                                                    // 6241
 *                                                                                                                     // 6242
 * @restrict E                                                                                                         // 6243
 *                                                                                                                     // 6244
 * @description                                                                                                        // 6245
 * The `<md-card>` directive is a container element used within `<md-content>` containers.                             // 6246
 *                                                                                                                     // 6247
 * An image included as a direct descendant will fill the card's width, while the `<md-card-content>`                  // 6248
 * container will wrap text content and provide padding. An `<md-card-footer>` element can be                          // 6249
 * optionally included to put content flush against the bottom edge of the card.                                       // 6250
 *                                                                                                                     // 6251
 * Action buttons can be included in an `<md-card-actions>` element, similar to `<md-dialog-actions>`.                 // 6252
 * You can then position buttons using layout attributes.                                                              // 6253
 *                                                                                                                     // 6254
 * Card is built with:                                                                                                 // 6255
 * * `<md-card-header>` - Header for the card, holds avatar, text and squared image                                    // 6256
 *  - `<md-card-avatar>` - Card avatar                                                                                 // 6257
 *    - `md-user-avatar` - Class for user image                                                                        // 6258
 *    - `<md-icon>`                                                                                                    // 6259
 *  - `<md-card-header-text>` - Contains elements for the card description                                             // 6260
 *    - `md-title` - Class for the card title                                                                          // 6261
 *    - `md-subhead` - Class for the card sub header                                                                   // 6262
 * * `<img>` - Image for the card                                                                                      // 6263
 * * `<md-card-title>` - Card content title                                                                            // 6264
 *  - `<md-card-title-text>`                                                                                           // 6265
 *    - `md-headline` - Class for the card content title                                                               // 6266
 *    - `md-subhead` - Class for the card content sub header                                                           // 6267
 *  - `<md-card-title-media>` - Squared image within the title                                                         // 6268
 *    - `md-media-sm` - Class for small image                                                                          // 6269
 *    - `md-media-md` - Class for medium image                                                                         // 6270
 *    - `md-media-lg` - Class for large image                                                                          // 6271
 * * `<md-card-content>` - Card content                                                                                // 6272
 *  - `md-media-xl` - Class for extra large image                                                                      // 6273
 * * `<md-card-actions>` - Card actions                                                                                // 6274
 *  - `<md-card-icon-actions>` - Icon actions                                                                          // 6275
 *                                                                                                                     // 6276
 * Cards have constant width and variable heights; where the maximum height is limited to what can                     // 6277
 * fit within a single view on a platform, but it can temporarily expand as needed.                                    // 6278
 *                                                                                                                     // 6279
 * @usage                                                                                                              // 6280
 * ### Card with optional footer                                                                                       // 6281
 * <hljs lang="html">                                                                                                  // 6282
 * <md-card>                                                                                                           // 6283
 *  <img src="card-image.png" class="md-card-image" alt="image caption">                                               // 6284
 *  <md-card-content>                                                                                                  // 6285
 *    <h2>Card headline</h2>                                                                                           // 6286
 *    <p>Card content</p>                                                                                              // 6287
 *  </md-card-content>                                                                                                 // 6288
 *  <md-card-footer>                                                                                                   // 6289
 *    Card footer                                                                                                      // 6290
 *  </md-card-footer>                                                                                                  // 6291
 * </md-card>                                                                                                          // 6292
 * </hljs>                                                                                                             // 6293
 *                                                                                                                     // 6294
 * ### Card with actions                                                                                               // 6295
 * <hljs lang="html">                                                                                                  // 6296
 * <md-card>                                                                                                           // 6297
 *  <img src="card-image.png" class="md-card-image" alt="image caption">                                               // 6298
 *  <md-card-content>                                                                                                  // 6299
 *    <h2>Card headline</h2>                                                                                           // 6300
 *    <p>Card content</p>                                                                                              // 6301
 *  </md-card-content>                                                                                                 // 6302
 *  <md-card-actions layout="row" layout-align="end center">                                                           // 6303
 *    <md-button>Action 1</md-button>                                                                                  // 6304
 *    <md-button>Action 2</md-button>                                                                                  // 6305
 *  </md-card-actions>                                                                                                 // 6306
 * </md-card>                                                                                                          // 6307
 * </hljs>                                                                                                             // 6308
 *                                                                                                                     // 6309
 * ### Card with header, image, title actions and content                                                              // 6310
 * <hljs lang="html">                                                                                                  // 6311
 * <md-card>                                                                                                           // 6312
 *   <md-card-header>                                                                                                  // 6313
 *     <md-card-avatar>                                                                                                // 6314
 *       <img class="md-user-avatar" src="avatar.png"/>                                                                // 6315
 *     </md-card-avatar>                                                                                               // 6316
 *     <md-card-header-text>                                                                                           // 6317
 *       <span class="md-title">Title</span>                                                                           // 6318
 *       <span class="md-subhead">Sub header</span>                                                                    // 6319
 *     </md-card-header-text>                                                                                          // 6320
 *   </md-card-header>                                                                                                 // 6321
 *   <img ng-src="card-image.png" class="md-card-image" alt="image caption">                                           // 6322
 *   <md-card-title>                                                                                                   // 6323
 *     <md-card-title-text>                                                                                            // 6324
 *       <span class="md-headline">Card headline</span>                                                                // 6325
 *       <span class="md-subhead">Card subheader</span>                                                                // 6326
 *     </md-card-title-text>                                                                                           // 6327
 *   </md-card-title>                                                                                                  // 6328
 *   <md-card-actions layout="row" layout-align="start center">                                                        // 6329
 *     <md-button>Action 1</md-button>                                                                                 // 6330
 *     <md-button>Action 2</md-button>                                                                                 // 6331
 *     <md-card-icon-actions>                                                                                          // 6332
 *       <md-button class="md-icon-button" aria-label="icon">                                                          // 6333
 *         <md-icon md-svg-icon="icon"></md-icon>                                                                      // 6334
 *       </md-button>                                                                                                  // 6335
 *     </md-card-icon-actions>                                                                                         // 6336
 *   </md-card-actions>                                                                                                // 6337
 *   <md-card-content>                                                                                                 // 6338
 *     <p>                                                                                                             // 6339
 *      Card content                                                                                                   // 6340
 *     </p>                                                                                                            // 6341
 *   </md-card-content>                                                                                                // 6342
 * </md-card>                                                                                                          // 6343
 * </hljs>                                                                                                             // 6344
 */                                                                                                                    // 6345
function mdCardDirective($mdTheming) {                                                                                 // 6346
  return {                                                                                                             // 6347
    restrict: 'E',                                                                                                     // 6348
    link: function ($scope, $element) {                                                                                // 6349
      $mdTheming($element);                                                                                            // 6350
    }                                                                                                                  // 6351
  };                                                                                                                   // 6352
}                                                                                                                      // 6353
mdCardDirective.$inject = ["$mdTheming"];                                                                              // 6354
                                                                                                                       // 6355
})();                                                                                                                  // 6356
(function(){                                                                                                           // 6357
"use strict";                                                                                                          // 6358
                                                                                                                       // 6359
/**                                                                                                                    // 6360
 * @ngdoc module                                                                                                       // 6361
 * @name material.components.checkbox                                                                                  // 6362
 * @description Checkbox module!                                                                                       // 6363
 */                                                                                                                    // 6364
angular                                                                                                                // 6365
  .module('material.components.checkbox', ['material.core'])                                                           // 6366
  .directive('mdCheckbox', MdCheckboxDirective);                                                                       // 6367
                                                                                                                       // 6368
/**                                                                                                                    // 6369
 * @ngdoc directive                                                                                                    // 6370
 * @name mdCheckbox                                                                                                    // 6371
 * @module material.components.checkbox                                                                                // 6372
 * @restrict E                                                                                                         // 6373
 *                                                                                                                     // 6374
 * @description                                                                                                        // 6375
 * The checkbox directive is used like the normal [angular checkbox](https://docs.angularjs.org/api/ng/input/input%5Bcheckbox%5D).
 *                                                                                                                     // 6377
 * As per the [material design spec](http://www.google.com/design/spec/style/color.html#color-ui-color-application)    // 6378
 * the checkbox is in the accent color by default. The primary color palette may be used with                          // 6379
 * the `md-primary` class.                                                                                             // 6380
 *                                                                                                                     // 6381
 * @param {string} ng-model Assignable angular expression to data-bind to.                                             // 6382
 * @param {string=} name Property name of the form under which the control is published.                               // 6383
 * @param {expression=} ng-true-value The value to which the expression should be set when selected.                   // 6384
 * @param {expression=} ng-false-value The value to which the expression should be set when not selected.              // 6385
 * @param {string=} ng-change Angular expression to be executed when input changes due to user interaction with the input element.
 * @param {boolean=} md-no-ink Use of attribute indicates use of ripple ink effects                                    // 6387
 * @param {string=} aria-label Adds label to checkbox for accessibility.                                               // 6388
 * Defaults to checkbox's text. If no default text is found, a warning will be logged.                                 // 6389
 *                                                                                                                     // 6390
 * @usage                                                                                                              // 6391
 * <hljs lang="html">                                                                                                  // 6392
 * <md-checkbox ng-model="isChecked" aria-label="Finished?">                                                           // 6393
 *   Finished ?                                                                                                        // 6394
 * </md-checkbox>                                                                                                      // 6395
 *                                                                                                                     // 6396
 * <md-checkbox md-no-ink ng-model="hasInk" aria-label="No Ink Effects">                                               // 6397
 *   No Ink Effects                                                                                                    // 6398
 * </md-checkbox>                                                                                                      // 6399
 *                                                                                                                     // 6400
 * <md-checkbox ng-disabled="true" ng-model="isDisabled" aria-label="Disabled">                                        // 6401
 *   Disabled                                                                                                          // 6402
 * </md-checkbox>                                                                                                      // 6403
 *                                                                                                                     // 6404
 * </hljs>                                                                                                             // 6405
 *                                                                                                                     // 6406
 */                                                                                                                    // 6407
function MdCheckboxDirective(inputDirective, $mdAria, $mdConstant, $mdTheming, $mdUtil, $timeout) {                    // 6408
  inputDirective = inputDirective[0];                                                                                  // 6409
  var CHECKED_CSS = 'md-checked';                                                                                      // 6410
                                                                                                                       // 6411
  return {                                                                                                             // 6412
    restrict: 'E',                                                                                                     // 6413
    transclude: true,                                                                                                  // 6414
    require: '?ngModel',                                                                                               // 6415
    priority: 210, // Run before ngAria                                                                                // 6416
    template:                                                                                                          // 6417
      '<div class="md-container" md-ink-ripple md-ink-ripple-checkbox>' +                                              // 6418
        '<div class="md-icon"></div>' +                                                                                // 6419
      '</div>' +                                                                                                       // 6420
      '<div ng-transclude class="md-label"></div>',                                                                    // 6421
    compile: compile                                                                                                   // 6422
  };                                                                                                                   // 6423
                                                                                                                       // 6424
  // **********************************************************                                                        // 6425
  // Private Methods                                                                                                   // 6426
  // **********************************************************                                                        // 6427
                                                                                                                       // 6428
  function compile (tElement, tAttrs) {                                                                                // 6429
                                                                                                                       // 6430
    tAttrs.type = 'checkbox';                                                                                          // 6431
    tAttrs.tabindex = tAttrs.tabindex || '0';                                                                          // 6432
    tElement.attr('role', tAttrs.type);                                                                                // 6433
                                                                                                                       // 6434
    // Attach a click handler in compile in order to immediately stop propagation                                      // 6435
    // (especially for ng-click) when the checkbox is disabled.                                                        // 6436
    tElement.on('click', function(event) {                                                                             // 6437
      if (this.hasAttribute('disabled')) {                                                                             // 6438
        event.stopImmediatePropagation();                                                                              // 6439
      }                                                                                                                // 6440
    });                                                                                                                // 6441
                                                                                                                       // 6442
    return function postLink(scope, element, attr, ngModelCtrl) {                                                      // 6443
      ngModelCtrl = ngModelCtrl || $mdUtil.fakeNgModel();                                                              // 6444
      $mdTheming(element);                                                                                             // 6445
                                                                                                                       // 6446
      if (attr.ngChecked) {                                                                                            // 6447
        scope.$watch(                                                                                                  // 6448
            scope.$eval.bind(scope, attr.ngChecked),                                                                   // 6449
            ngModelCtrl.$setViewValue.bind(ngModelCtrl)                                                                // 6450
        );                                                                                                             // 6451
      }                                                                                                                // 6452
                                                                                                                       // 6453
      $$watchExpr('ngDisabled', 'tabindex', {                                                                          // 6454
        true: '-1',                                                                                                    // 6455
        false: attr.tabindex                                                                                           // 6456
      });                                                                                                              // 6457
                                                                                                                       // 6458
      $mdAria.expectWithText(element, 'aria-label');                                                                   // 6459
                                                                                                                       // 6460
      // Reuse the original input[type=checkbox] directive from Angular core.                                          // 6461
      // This is a bit hacky as we need our own event listener and own render                                          // 6462
      // function.                                                                                                     // 6463
      inputDirective.link.pre(scope, {                                                                                 // 6464
        on: angular.noop,                                                                                              // 6465
        0: {}                                                                                                          // 6466
      }, attr, [ngModelCtrl]);                                                                                         // 6467
                                                                                                                       // 6468
      scope.mouseActive = false;                                                                                       // 6469
      element.on('click', listener)                                                                                    // 6470
        .on('keypress', keypressHandler)                                                                               // 6471
        .on('mousedown', function() {                                                                                  // 6472
          scope.mouseActive = true;                                                                                    // 6473
          $timeout(function() {                                                                                        // 6474
            scope.mouseActive = false;                                                                                 // 6475
          }, 100);                                                                                                     // 6476
        })                                                                                                             // 6477
        .on('focus', function() {                                                                                      // 6478
          if (scope.mouseActive === false) {                                                                           // 6479
            element.addClass('md-focused');                                                                            // 6480
          }                                                                                                            // 6481
        })                                                                                                             // 6482
        .on('blur', function() {                                                                                       // 6483
          element.removeClass('md-focused');                                                                           // 6484
        });                                                                                                            // 6485
                                                                                                                       // 6486
      ngModelCtrl.$render = render;                                                                                    // 6487
                                                                                                                       // 6488
      function $$watchExpr(expr, htmlAttr, valueOpts) {                                                                // 6489
        if (attr[expr]) {                                                                                              // 6490
          scope.$watch(attr[expr], function(val) {                                                                     // 6491
            if (valueOpts[val]) {                                                                                      // 6492
              element.attr(htmlAttr, valueOpts[val]);                                                                  // 6493
            }                                                                                                          // 6494
          });                                                                                                          // 6495
        }                                                                                                              // 6496
      }                                                                                                                // 6497
                                                                                                                       // 6498
      function keypressHandler(ev) {                                                                                   // 6499
        var keyCode = ev.which || ev.keyCode;                                                                          // 6500
        if (keyCode === $mdConstant.KEY_CODE.SPACE || keyCode === $mdConstant.KEY_CODE.ENTER) {                        // 6501
          ev.preventDefault();                                                                                         // 6502
                                                                                                                       // 6503
          if (!element.hasClass('md-focused')) {                                                                       // 6504
            element.addClass('md-focused');                                                                            // 6505
          }                                                                                                            // 6506
                                                                                                                       // 6507
          listener(ev);                                                                                                // 6508
        }                                                                                                              // 6509
      }                                                                                                                // 6510
      function listener(ev) {                                                                                          // 6511
        if (element[0].hasAttribute('disabled')) {                                                                     // 6512
          return;                                                                                                      // 6513
        }                                                                                                              // 6514
                                                                                                                       // 6515
        scope.$apply(function() {                                                                                      // 6516
          // Toggle the checkbox value...                                                                              // 6517
          var viewValue = attr.ngChecked ? attr.checked : !ngModelCtrl.$viewValue;                                     // 6518
                                                                                                                       // 6519
          ngModelCtrl.$setViewValue( viewValue, ev && ev.type);                                                        // 6520
          ngModelCtrl.$render();                                                                                       // 6521
        });                                                                                                            // 6522
      }                                                                                                                // 6523
                                                                                                                       // 6524
      function render() {                                                                                              // 6525
        if(ngModelCtrl.$viewValue) {                                                                                   // 6526
          element.addClass(CHECKED_CSS);                                                                               // 6527
        } else {                                                                                                       // 6528
          element.removeClass(CHECKED_CSS);                                                                            // 6529
        }                                                                                                              // 6530
      }                                                                                                                // 6531
    };                                                                                                                 // 6532
  }                                                                                                                    // 6533
}                                                                                                                      // 6534
MdCheckboxDirective.$inject = ["inputDirective", "$mdAria", "$mdConstant", "$mdTheming", "$mdUtil", "$timeout"];       // 6535
                                                                                                                       // 6536
})();                                                                                                                  // 6537
(function(){                                                                                                           // 6538
"use strict";                                                                                                          // 6539
                                                                                                                       // 6540
/**                                                                                                                    // 6541
 * @ngdoc module                                                                                                       // 6542
 * @name material.components.bottomSheet                                                                               // 6543
 * @description                                                                                                        // 6544
 * BottomSheet                                                                                                         // 6545
 */                                                                                                                    // 6546
angular                                                                                                                // 6547
  .module('material.components.bottomSheet', [                                                                         // 6548
    'material.core',                                                                                                   // 6549
    'material.components.backdrop'                                                                                     // 6550
  ])                                                                                                                   // 6551
  .directive('mdBottomSheet', MdBottomSheetDirective)                                                                  // 6552
  .provider('$mdBottomSheet', MdBottomSheetProvider);                                                                  // 6553
                                                                                                                       // 6554
/* @ngInject */                                                                                                        // 6555
function MdBottomSheetDirective($mdBottomSheet) {                                                                      // 6556
  return {                                                                                                             // 6557
    restrict: 'E',                                                                                                     // 6558
    link : function postLink(scope, element, attr) {                                                                   // 6559
      // When navigation force destroys an interimElement, then                                                        // 6560
      // listen and $destroy() that interim instance...                                                                // 6561
      scope.$on('$destroy', function() {                                                                               // 6562
        $mdBottomSheet.destroy();                                                                                      // 6563
      });                                                                                                              // 6564
    }                                                                                                                  // 6565
  };                                                                                                                   // 6566
}                                                                                                                      // 6567
MdBottomSheetDirective.$inject = ["$mdBottomSheet"];                                                                   // 6568
                                                                                                                       // 6569
                                                                                                                       // 6570
/**                                                                                                                    // 6571
 * @ngdoc service                                                                                                      // 6572
 * @name $mdBottomSheet                                                                                                // 6573
 * @module material.components.bottomSheet                                                                             // 6574
 *                                                                                                                     // 6575
 * @description                                                                                                        // 6576
 * `$mdBottomSheet` opens a bottom sheet over the app and provides a simple promise API.                               // 6577
 *                                                                                                                     // 6578
 * ## Restrictions                                                                                                     // 6579
 *                                                                                                                     // 6580
 * - The bottom sheet's template must have an outer `<md-bottom-sheet>` element.                                       // 6581
 * - Add the `md-grid` class to the bottom sheet for a grid layout.                                                    // 6582
 * - Add the `md-list` class to the bottom sheet for a list layout.                                                    // 6583
 *                                                                                                                     // 6584
 * @usage                                                                                                              // 6585
 * <hljs lang="html">                                                                                                  // 6586
 * <div ng-controller="MyController">                                                                                  // 6587
 *   <md-button ng-click="openBottomSheet()">                                                                          // 6588
 *     Open a Bottom Sheet!                                                                                            // 6589
 *   </md-button>                                                                                                      // 6590
 * </div>                                                                                                              // 6591
 * </hljs>                                                                                                             // 6592
 * <hljs lang="js">                                                                                                    // 6593
 * var app = angular.module('app', ['ngMaterial']);                                                                    // 6594
 * app.controller('MyController', function($scope, $mdBottomSheet) {                                                   // 6595
 *   $scope.openBottomSheet = function() {                                                                             // 6596
 *     $mdBottomSheet.show({                                                                                           // 6597
 *       template: '<md-bottom-sheet>Hello!</md-bottom-sheet>'                                                         // 6598
 *     });                                                                                                             // 6599
 *   };                                                                                                                // 6600
 * });                                                                                                                 // 6601
 * </hljs>                                                                                                             // 6602
 */                                                                                                                    // 6603
                                                                                                                       // 6604
 /**                                                                                                                   // 6605
 * @ngdoc method                                                                                                       // 6606
 * @name $mdBottomSheet#show                                                                                           // 6607
 *                                                                                                                     // 6608
 * @description                                                                                                        // 6609
 * Show a bottom sheet with the specified options.                                                                     // 6610
 *                                                                                                                     // 6611
 * @param {object} options An options object, with the following properties:                                           // 6612
 *                                                                                                                     // 6613
 *   - `templateUrl` - `{string=}`: The url of an html template file that will                                         // 6614
 *   be used as the content of the bottom sheet. Restrictions: the template must                                       // 6615
 *   have an outer `md-bottom-sheet` element.                                                                          // 6616
 *   - `template` - `{string=}`: Same as templateUrl, except this is an actual                                         // 6617
 *   template string.                                                                                                  // 6618
 *   - `scope` - `{object=}`: the scope to link the template / controller to. If none is specified, it will create a new child scope.
 *     This scope will be destroyed when the bottom sheet is removed unless `preserveScope` is set to true.            // 6620
 *   - `preserveScope` - `{boolean=}`: whether to preserve the scope when the element is removed. Default is false     // 6621
 *   - `controller` - `{string=}`: The controller to associate with this bottom sheet.                                 // 6622
 *   - `locals` - `{string=}`: An object containing key/value pairs. The keys will                                     // 6623
 *   be used as names of values to inject into the controller. For example,                                            // 6624
 *   `locals: {three: 3}` would inject `three` into the controller with the value                                      // 6625
 *   of 3.                                                                                                             // 6626
 *   - `clickOutsideToClose` - `{boolean=}`: Whether the user can click outside the bottom sheet to                    // 6627
 *     close it. Default true.                                                                                         // 6628
 *   - `escapeToClose` - `{boolean=}`: Whether the user can press escape to close the bottom sheet.                    // 6629
 *     Default true.                                                                                                   // 6630
 *   - `resolve` - `{object=}`: Similar to locals, except it takes promises as values                                  // 6631
 *   and the bottom sheet will not open until the promises resolve.                                                    // 6632
 *   - `controllerAs` - `{string=}`: An alias to assign the controller to on the scope.                                // 6633
 *   - `parent` - `{element=}`: The element to append the bottom sheet to. The `parent` may be a `function`, `string`,
 *   `object`, or null. Defaults to appending to the body of the root element (or the root element) of the application.
 *   e.g. angular.element(document.getElementById('content')) or "#content"                                            // 6636
 *   - `disableParentScroll` - `{boolean=}`: Whether to disable scrolling while the bottom sheet is open.              // 6637
 *     Default true.                                                                                                   // 6638
 *                                                                                                                     // 6639
 * @returns {promise} A promise that can be resolved with `$mdBottomSheet.hide()` or                                   // 6640
 * rejected with `$mdBottomSheet.cancel()`.                                                                            // 6641
 */                                                                                                                    // 6642
                                                                                                                       // 6643
/**                                                                                                                    // 6644
 * @ngdoc method                                                                                                       // 6645
 * @name $mdBottomSheet#hide                                                                                           // 6646
 *                                                                                                                     // 6647
 * @description                                                                                                        // 6648
 * Hide the existing bottom sheet and resolve the promise returned from                                                // 6649
 * `$mdBottomSheet.show()`. This call will close the most recently opened/current bottomsheet (if any).                // 6650
 *                                                                                                                     // 6651
 * @param {*=} response An argument for the resolved promise.                                                          // 6652
 *                                                                                                                     // 6653
 */                                                                                                                    // 6654
                                                                                                                       // 6655
/**                                                                                                                    // 6656
 * @ngdoc method                                                                                                       // 6657
 * @name $mdBottomSheet#cancel                                                                                         // 6658
 *                                                                                                                     // 6659
 * @description                                                                                                        // 6660
 * Hide the existing bottom sheet and reject the promise returned from                                                 // 6661
 * `$mdBottomSheet.show()`.                                                                                            // 6662
 *                                                                                                                     // 6663
 * @param {*=} response An argument for the rejected promise.                                                          // 6664
 *                                                                                                                     // 6665
 */                                                                                                                    // 6666
                                                                                                                       // 6667
function MdBottomSheetProvider($$interimElementProvider) {                                                             // 6668
  // how fast we need to flick down to close the sheet, pixels/ms                                                      // 6669
  var CLOSING_VELOCITY = 0.5;                                                                                          // 6670
  var PADDING = 80; // same as css                                                                                     // 6671
                                                                                                                       // 6672
  bottomSheetDefaults.$inject = ["$animate", "$mdConstant", "$mdUtil", "$mdTheming", "$mdBottomSheet", "$rootElement", "$mdGesture"];
  return $$interimElementProvider('$mdBottomSheet')                                                                    // 6674
    .setDefaults({                                                                                                     // 6675
      methods: ['disableParentScroll', 'escapeToClose', 'clickOutsideToClose'],                                        // 6676
      options: bottomSheetDefaults                                                                                     // 6677
    });                                                                                                                // 6678
                                                                                                                       // 6679
  /* @ngInject */                                                                                                      // 6680
  function bottomSheetDefaults($animate, $mdConstant, $mdUtil, $mdTheming, $mdBottomSheet, $rootElement, $mdGesture) {
    var backdrop;                                                                                                      // 6682
                                                                                                                       // 6683
    return {                                                                                                           // 6684
      themable: true,                                                                                                  // 6685
      onShow: onShow,                                                                                                  // 6686
      onRemove: onRemove,                                                                                              // 6687
      escapeToClose: true,                                                                                             // 6688
      clickOutsideToClose: true,                                                                                       // 6689
      disableParentScroll: true                                                                                        // 6690
    };                                                                                                                 // 6691
                                                                                                                       // 6692
                                                                                                                       // 6693
    function onShow(scope, element, options, controller) {                                                             // 6694
                                                                                                                       // 6695
      element = $mdUtil.extractElementByName(element, 'md-bottom-sheet');                                              // 6696
                                                                                                                       // 6697
      // Add a backdrop that will close on click                                                                       // 6698
      backdrop = $mdUtil.createBackdrop(scope, "md-bottom-sheet-backdrop md-opaque");                                  // 6699
                                                                                                                       // 6700
      if (options.clickOutsideToClose) {                                                                               // 6701
        backdrop.on('click', function() {                                                                              // 6702
          $mdUtil.nextTick($mdBottomSheet.cancel,true);                                                                // 6703
        });                                                                                                            // 6704
      }                                                                                                                // 6705
                                                                                                                       // 6706
      $mdTheming.inherit(backdrop, options.parent);                                                                    // 6707
                                                                                                                       // 6708
      $animate.enter(backdrop, options.parent, null);                                                                  // 6709
                                                                                                                       // 6710
      var bottomSheet = new BottomSheet(element, options.parent);                                                      // 6711
      options.bottomSheet = bottomSheet;                                                                               // 6712
                                                                                                                       // 6713
      $mdTheming.inherit(bottomSheet.element, options.parent);                                                         // 6714
                                                                                                                       // 6715
      if (options.disableParentScroll) {                                                                               // 6716
        options.restoreScroll = $mdUtil.disableScrollAround(bottomSheet.element, options.parent);                      // 6717
      }                                                                                                                // 6718
                                                                                                                       // 6719
      return $animate.enter(bottomSheet.element, options.parent)                                                       // 6720
        .then(function() {                                                                                             // 6721
          var focusable = $mdUtil.findFocusTarget(element) || angular.element(                                         // 6722
            element[0].querySelector('button') ||                                                                      // 6723
            element[0].querySelector('a') ||                                                                           // 6724
            element[0].querySelector('[ng-click]')                                                                     // 6725
          );                                                                                                           // 6726
          focusable.focus();                                                                                           // 6727
                                                                                                                       // 6728
          if (options.escapeToClose) {                                                                                 // 6729
            options.rootElementKeyupCallback = function(e) {                                                           // 6730
              if (e.keyCode === $mdConstant.KEY_CODE.ESCAPE) {                                                         // 6731
                $mdUtil.nextTick($mdBottomSheet.cancel,true);                                                          // 6732
              }                                                                                                        // 6733
            };                                                                                                         // 6734
            $rootElement.on('keyup', options.rootElementKeyupCallback);                                                // 6735
          }                                                                                                            // 6736
        });                                                                                                            // 6737
                                                                                                                       // 6738
    }                                                                                                                  // 6739
                                                                                                                       // 6740
    function onRemove(scope, element, options) {                                                                       // 6741
                                                                                                                       // 6742
      var bottomSheet = options.bottomSheet;                                                                           // 6743
                                                                                                                       // 6744
      $animate.leave(backdrop);                                                                                        // 6745
      return $animate.leave(bottomSheet.element).then(function() {                                                     // 6746
        if (options.disableParentScroll) {                                                                             // 6747
          options.restoreScroll();                                                                                     // 6748
          delete options.restoreScroll;                                                                                // 6749
        }                                                                                                              // 6750
                                                                                                                       // 6751
        bottomSheet.cleanup();                                                                                         // 6752
      });                                                                                                              // 6753
    }                                                                                                                  // 6754
                                                                                                                       // 6755
    /**                                                                                                                // 6756
     * BottomSheet class to apply bottom-sheet behavior to an element                                                  // 6757
     */                                                                                                                // 6758
    function BottomSheet(element, parent) {                                                                            // 6759
      var deregister = $mdGesture.register(parent, 'drag', { horizontal: false });                                     // 6760
      parent.on('$md.dragstart', onDragStart)                                                                          // 6761
        .on('$md.drag', onDrag)                                                                                        // 6762
        .on('$md.dragend', onDragEnd);                                                                                 // 6763
                                                                                                                       // 6764
      return {                                                                                                         // 6765
        element: element,                                                                                              // 6766
        cleanup: function cleanup() {                                                                                  // 6767
          deregister();                                                                                                // 6768
          parent.off('$md.dragstart', onDragStart);                                                                    // 6769
          parent.off('$md.drag', onDrag);                                                                              // 6770
          parent.off('$md.dragend', onDragEnd);                                                                        // 6771
        }                                                                                                              // 6772
      };                                                                                                               // 6773
                                                                                                                       // 6774
      function onDragStart(ev) {                                                                                       // 6775
        // Disable transitions on transform so that it feels fast                                                      // 6776
        element.css($mdConstant.CSS.TRANSITION_DURATION, '0ms');                                                       // 6777
      }                                                                                                                // 6778
                                                                                                                       // 6779
      function onDrag(ev) {                                                                                            // 6780
        var transform = ev.pointer.distanceY;                                                                          // 6781
        if (transform < 5) {                                                                                           // 6782
          // Slow down drag when trying to drag up, and stop after PADDING                                             // 6783
          transform = Math.max(-PADDING, transform / 2);                                                               // 6784
        }                                                                                                              // 6785
        element.css($mdConstant.CSS.TRANSFORM, 'translate3d(0,' + (PADDING + transform) + 'px,0)');                    // 6786
      }                                                                                                                // 6787
                                                                                                                       // 6788
      function onDragEnd(ev) {                                                                                         // 6789
        if (ev.pointer.distanceY > 0 &&                                                                                // 6790
            (ev.pointer.distanceY > 20 || Math.abs(ev.pointer.velocityY) > CLOSING_VELOCITY)) {                        // 6791
          var distanceRemaining = element.prop('offsetHeight') - ev.pointer.distanceY;                                 // 6792
          var transitionDuration = Math.min(distanceRemaining / ev.pointer.velocityY * 0.75, 500);                     // 6793
          element.css($mdConstant.CSS.TRANSITION_DURATION, transitionDuration + 'ms');                                 // 6794
          $mdUtil.nextTick($mdBottomSheet.cancel,true);                                                                // 6795
        } else {                                                                                                       // 6796
          element.css($mdConstant.CSS.TRANSITION_DURATION, '');                                                        // 6797
          element.css($mdConstant.CSS.TRANSFORM, '');                                                                  // 6798
        }                                                                                                              // 6799
      }                                                                                                                // 6800
    }                                                                                                                  // 6801
                                                                                                                       // 6802
  }                                                                                                                    // 6803
                                                                                                                       // 6804
}                                                                                                                      // 6805
MdBottomSheetProvider.$inject = ["$$interimElementProvider"];                                                          // 6806
                                                                                                                       // 6807
})();                                                                                                                  // 6808
(function(){                                                                                                           // 6809
"use strict";                                                                                                          // 6810
                                                                                                                       // 6811
/**                                                                                                                    // 6812
 * @ngdoc module                                                                                                       // 6813
 * @name material.components.chips                                                                                     // 6814
 */                                                                                                                    // 6815
/*                                                                                                                     // 6816
 * @see js folder for chips implementation                                                                             // 6817
 */                                                                                                                    // 6818
angular.module('material.components.chips', [                                                                          // 6819
  'material.core',                                                                                                     // 6820
  'material.components.autocomplete'                                                                                   // 6821
]);                                                                                                                    // 6822
                                                                                                                       // 6823
})();                                                                                                                  // 6824
(function(){                                                                                                           // 6825
"use strict";                                                                                                          // 6826
                                                                                                                       // 6827
/**                                                                                                                    // 6828
 * @ngdoc module                                                                                                       // 6829
 * @name material.components.dialog                                                                                    // 6830
 */                                                                                                                    // 6831
angular                                                                                                                // 6832
  .module('material.components.dialog', [                                                                              // 6833
    'material.core',                                                                                                   // 6834
    'material.components.backdrop'                                                                                     // 6835
  ])                                                                                                                   // 6836
  .directive('mdDialog', MdDialogDirective)                                                                            // 6837
  .provider('$mdDialog', MdDialogProvider);                                                                            // 6838
                                                                                                                       // 6839
/**                                                                                                                    // 6840
 * @ngdoc directive                                                                                                    // 6841
 * @name mdDialog                                                                                                      // 6842
 * @module material.components.dialog                                                                                  // 6843
 *                                                                                                                     // 6844
 * @restrict E                                                                                                         // 6845
 *                                                                                                                     // 6846
 * @description                                                                                                        // 6847
 * `<md-dialog>` - The dialog's template must be inside this element.                                                  // 6848
 *                                                                                                                     // 6849
 * Inside, use an `<md-dialog-content>` element for the dialog's content, and use                                      // 6850
 * an `<md-dialog-actions>` element for the dialog's actions.                                                          // 6851
 *                                                                                                                     // 6852
 * * ## CSS                                                                                                            // 6853
 * - `.md-dialog-content` - class that sets the padding on the content as the spec file                                // 6854
 *                                                                                                                     // 6855
 * @usage                                                                                                              // 6856
 * ### Dialog template                                                                                                 // 6857
 * <hljs lang="html">                                                                                                  // 6858
 * <md-dialog aria-label="List dialog">                                                                                // 6859
 *   <md-dialog-content>                                                                                               // 6860
 *     <md-list>                                                                                                       // 6861
 *       <md-list-item ng-repeat="item in items">                                                                      // 6862
 *         <p>Number {{item}}</p>                                                                                      // 6863
 *       </md-list-item>                                                                                               // 6864
 *     </md-list>                                                                                                      // 6865
 *   </md-dialog-content>                                                                                              // 6866
 *   <md-dialog-actions>                                                                                               // 6867
 *     <md-button ng-click="closeDialog()" class="md-primary">Close Dialog</md-button>                                 // 6868
 *   </md-dialog-actions>                                                                                              // 6869
 * </md-dialog>                                                                                                        // 6870
 * </hljs>                                                                                                             // 6871
 */                                                                                                                    // 6872
function MdDialogDirective($$rAF, $mdTheming, $mdDialog) {                                                             // 6873
  return {                                                                                                             // 6874
    restrict: 'E',                                                                                                     // 6875
    link: function(scope, element, attr) {                                                                             // 6876
      $mdTheming(element);                                                                                             // 6877
      $$rAF(function() {                                                                                               // 6878
        var images;                                                                                                    // 6879
        var content = element[0].querySelector('md-dialog-content');                                                   // 6880
                                                                                                                       // 6881
        if (content) {                                                                                                 // 6882
          images = content.getElementsByTagName('img');                                                                // 6883
          addOverflowClass();                                                                                          // 6884
          //-- delayed image loading may impact scroll height, check after images are loaded                           // 6885
          angular.element(images).on('load', addOverflowClass);                                                        // 6886
        }                                                                                                              // 6887
                                                                                                                       // 6888
        scope.$on('$destroy', function() {                                                                             // 6889
          $mdDialog.destroy(element);                                                                                  // 6890
        });                                                                                                            // 6891
                                                                                                                       // 6892
        /**                                                                                                            // 6893
         *                                                                                                             // 6894
         */                                                                                                            // 6895
        function addOverflowClass() {                                                                                  // 6896
          element.toggleClass('md-content-overflow', content.scrollHeight > content.clientHeight);                     // 6897
        }                                                                                                              // 6898
                                                                                                                       // 6899
                                                                                                                       // 6900
      });                                                                                                              // 6901
    }                                                                                                                  // 6902
  };                                                                                                                   // 6903
}                                                                                                                      // 6904
MdDialogDirective.$inject = ["$$rAF", "$mdTheming", "$mdDialog"];                                                      // 6905
                                                                                                                       // 6906
/**                                                                                                                    // 6907
 * @ngdoc service                                                                                                      // 6908
 * @name $mdDialog                                                                                                     // 6909
 * @module material.components.dialog                                                                                  // 6910
 *                                                                                                                     // 6911
 * @description                                                                                                        // 6912
 * `$mdDialog` opens a dialog over the app to inform users about critical information or require                       // 6913
 *  them to make decisions. There are two approaches for setup: a simple promise API                                   // 6914
 *  and regular object syntax.                                                                                         // 6915
 *                                                                                                                     // 6916
 * ## Restrictions                                                                                                     // 6917
 *                                                                                                                     // 6918
 * - The dialog is always given an isolate scope.                                                                      // 6919
 * - The dialog's template must have an outer `<md-dialog>` element.                                                   // 6920
 *   Inside, use an `<md-dialog-content>` element for the dialog's content, and use                                    // 6921
 *   an `<md-dialog-actions>` element for the dialog's actions.                                                        // 6922
 * - Dialogs must cover the entire application to keep interactions inside of them.                                    // 6923
 * Use the `parent` option to change where dialogs are appended.                                                       // 6924
 *                                                                                                                     // 6925
 * ## Sizing                                                                                                           // 6926
 * - Complex dialogs can be sized with `flex="percentage"`, i.e. `flex="66"`.                                          // 6927
 * - Default max-width is 80% of the `rootElement` or `parent`.                                                        // 6928
 *                                                                                                                     // 6929
 * ## CSS                                                                                                              // 6930
 * - `.md-dialog-content` - class that sets the padding on the content as the spec file                                // 6931
 *                                                                                                                     // 6932
 * @usage                                                                                                              // 6933
 * <hljs lang="html">                                                                                                  // 6934
 * <div  ng-app="demoApp" ng-controller="EmployeeController">                                                          // 6935
 *   <div>                                                                                                             // 6936
 *     <md-button ng-click="showAlert()" class="md-raised md-warn">                                                    // 6937
 *       Employee Alert!                                                                                               // 6938
 *       </md-button>                                                                                                  // 6939
 *   </div>                                                                                                            // 6940
 *   <div>                                                                                                             // 6941
 *     <md-button ng-click="showDialog($event)" class="md-raised">                                                     // 6942
 *       Custom Dialog                                                                                                 // 6943
 *       </md-button>                                                                                                  // 6944
 *   </div>                                                                                                            // 6945
 *   <div>                                                                                                             // 6946
 *     <md-button ng-click="closeAlert()" ng-disabled="!hasAlert()" class="md-raised">                                 // 6947
 *       Close Alert                                                                                                   // 6948
 *     </md-button>                                                                                                    // 6949
 *   </div>                                                                                                            // 6950
 *   <div>                                                                                                             // 6951
 *     <md-button ng-click="showGreeting($event)" class="md-raised md-primary" >                                       // 6952
 *       Greet Employee                                                                                                // 6953
 *       </md-button>                                                                                                  // 6954
 *   </div>                                                                                                            // 6955
 * </div>                                                                                                              // 6956
 * </hljs>                                                                                                             // 6957
 *                                                                                                                     // 6958
 * ### JavaScript: object syntax                                                                                       // 6959
 * <hljs lang="js">                                                                                                    // 6960
 * (function(angular, undefined){                                                                                      // 6961
 *   "use strict";                                                                                                     // 6962
 *                                                                                                                     // 6963
 *   angular                                                                                                           // 6964
 *    .module('demoApp', ['ngMaterial'])                                                                               // 6965
 *    .controller('AppCtrl', AppController);                                                                           // 6966
 *                                                                                                                     // 6967
 *   function AppController($scope, $mdDialog) {                                                                       // 6968
 *     var alert;                                                                                                      // 6969
 *     $scope.showAlert = showAlert;                                                                                   // 6970
 *     $scope.showDialog = showDialog;                                                                                 // 6971
 *     $scope.items = [1, 2, 3];                                                                                       // 6972
 *                                                                                                                     // 6973
 *     // Internal method                                                                                              // 6974
 *     function showAlert() {                                                                                          // 6975
 *       alert = $mdDialog.alert({                                                                                     // 6976
 *         title: 'Attention',                                                                                         // 6977
 *         textContent: 'This is an example of how easy dialogs can be!',                                              // 6978
 *         ok: 'Close'                                                                                                 // 6979
 *       });                                                                                                           // 6980
 *                                                                                                                     // 6981
 *       $mdDialog                                                                                                     // 6982
 *         .show( alert )                                                                                              // 6983
 *         .finally(function() {                                                                                       // 6984
 *           alert = undefined;                                                                                        // 6985
 *         });                                                                                                         // 6986
 *     }                                                                                                               // 6987
 *                                                                                                                     // 6988
 *     function showDialog($event) {                                                                                   // 6989
 *        var parentEl = angular.element(document.body);                                                               // 6990
 *        $mdDialog.show({                                                                                             // 6991
 *          parent: parentEl,                                                                                          // 6992
 *          targetEvent: $event,                                                                                       // 6993
 *          template:                                                                                                  // 6994
 *            '<md-dialog aria-label="List dialog">' +                                                                 // 6995
 *            '  <md-dialog-content>'+                                                                                 // 6996
 *            '    <md-list>'+                                                                                         // 6997
 *            '      <md-list-item ng-repeat="item in items">'+                                                        // 6998
 *            '       <p>Number {{item}}</p>' +                                                                        // 6999
 *            '      </md-item>'+                                                                                      // 7000
 *            '    </md-list>'+                                                                                        // 7001
 *            '  </md-dialog-content>' +                                                                               // 7002
 *            '  <md-dialog-actions>' +                                                                                // 7003
 *            '    <md-button ng-click="closeDialog()" class="md-primary">' +                                          // 7004
 *            '      Close Dialog' +                                                                                   // 7005
 *            '    </md-button>' +                                                                                     // 7006
 *            '  </md-dialog-actions>' +                                                                               // 7007
 *            '</md-dialog>',                                                                                          // 7008
 *          locals: {                                                                                                  // 7009
 *            items: $scope.items                                                                                      // 7010
 *          },                                                                                                         // 7011
 *          controller: DialogController                                                                               // 7012
 *       });                                                                                                           // 7013
 *       function DialogController($scope, $mdDialog, items) {                                                         // 7014
 *         $scope.items = items;                                                                                       // 7015
 *         $scope.closeDialog = function() {                                                                           // 7016
 *           $mdDialog.hide();                                                                                         // 7017
 *         }                                                                                                           // 7018
 *       }                                                                                                             // 7019
 *     }                                                                                                               // 7020
 *   }                                                                                                                 // 7021
 * })(angular);                                                                                                        // 7022
 * </hljs>                                                                                                             // 7023
 *                                                                                                                     // 7024
 * ### JavaScript: promise API syntax, custom dialog template                                                          // 7025
 * <hljs lang="js">                                                                                                    // 7026
 * (function(angular, undefined){                                                                                      // 7027
 *   "use strict";                                                                                                     // 7028
 *                                                                                                                     // 7029
 *   angular                                                                                                           // 7030
 *     .module('demoApp', ['ngMaterial'])                                                                              // 7031
 *     .controller('EmployeeController', EmployeeEditor)                                                               // 7032
 *     .controller('GreetingController', GreetingController);                                                          // 7033
 *                                                                                                                     // 7034
 *   // Fictitious Employee Editor to show how to use simple and complex dialogs.                                      // 7035
 *                                                                                                                     // 7036
 *   function EmployeeEditor($scope, $mdDialog) {                                                                      // 7037
 *     var alert;                                                                                                      // 7038
 *                                                                                                                     // 7039
 *     $scope.showAlert = showAlert;                                                                                   // 7040
 *     $scope.closeAlert = closeAlert;                                                                                 // 7041
 *     $scope.showGreeting = showCustomGreeting;                                                                       // 7042
 *                                                                                                                     // 7043
 *     $scope.hasAlert = function() { return !!alert };                                                                // 7044
 *     $scope.userName = $scope.userName || 'Bobby';                                                                   // 7045
 *                                                                                                                     // 7046
 *     // Dialog #1 - Show simple alert dialog and cache                                                               // 7047
 *     // reference to dialog instance                                                                                 // 7048
 *                                                                                                                     // 7049
 *     function showAlert() {                                                                                          // 7050
 *       alert = $mdDialog.alert()                                                                                     // 7051
 *         .title('Attention, ' + $scope.userName)                                                                     // 7052
 *         .textContent('This is an example of how easy dialogs can be!')                                              // 7053
 *         .ok('Close');                                                                                               // 7054
 *                                                                                                                     // 7055
 *       $mdDialog                                                                                                     // 7056
 *           .show( alert )                                                                                            // 7057
 *           .finally(function() {                                                                                     // 7058
 *             alert = undefined;                                                                                      // 7059
 *           });                                                                                                       // 7060
 *     }                                                                                                               // 7061
 *                                                                                                                     // 7062
 *     // Close the specified dialog instance and resolve with 'finished' flag                                         // 7063
 *     // Normally this is not needed, just use '$mdDialog.hide()' to close                                            // 7064
 *     // the most recent dialog popup.                                                                                // 7065
 *                                                                                                                     // 7066
 *     function closeAlert() {                                                                                         // 7067
 *       $mdDialog.hide( alert, "finished" );                                                                          // 7068
 *       alert = undefined;                                                                                            // 7069
 *     }                                                                                                               // 7070
 *                                                                                                                     // 7071
 *     // Dialog #2 - Demonstrate more complex dialogs construction and popup.                                         // 7072
 *                                                                                                                     // 7073
 *     function showCustomGreeting($event) {                                                                           // 7074
 *         $mdDialog.show({                                                                                            // 7075
 *           targetEvent: $event,                                                                                      // 7076
 *           template:                                                                                                 // 7077
 *             '<md-dialog>' +                                                                                         // 7078
 *                                                                                                                     // 7079
 *             '  <md-dialog-content>Hello {{ employee }}!</md-dialog-content>' +                                      // 7080
 *                                                                                                                     // 7081
 *             '  <md-dialog-actions>' +                                                                               // 7082
 *             '    <md-button ng-click="closeDialog()" class="md-primary">' +                                         // 7083
 *             '      Close Greeting' +                                                                                // 7084
 *             '    </md-button>' +                                                                                    // 7085
 *             '  </md-dialog-actions>' +                                                                              // 7086
 *             '</md-dialog>',                                                                                         // 7087
 *           controller: 'GreetingController',                                                                         // 7088
 *           onComplete: afterShowAnimation,                                                                           // 7089
 *           locals: { employee: $scope.userName }                                                                     // 7090
 *         });                                                                                                         // 7091
 *                                                                                                                     // 7092
 *         // When the 'enter' animation finishes...                                                                   // 7093
 *                                                                                                                     // 7094
 *         function afterShowAnimation(scope, element, options) {                                                      // 7095
 *            // post-show code here: DOM element focus, etc.                                                          // 7096
 *         }                                                                                                           // 7097
 *     }                                                                                                               // 7098
 *                                                                                                                     // 7099
 *     // Dialog #3 - Demonstrate use of ControllerAs and passing $scope to dialog                                     // 7100
 *     //             Here we used ng-controller="GreetingController as vm" and                                        // 7101
 *     //             $scope.vm === <controller instance>                                                              // 7102
 *                                                                                                                     // 7103
 *     function showCustomGreeting() {                                                                                 // 7104
 *                                                                                                                     // 7105
 *        $mdDialog.show({                                                                                             // 7106
 *           clickOutsideToClose: true,                                                                                // 7107
 *                                                                                                                     // 7108
 *           scope: $scope,        // use parent scope in template                                                     // 7109
 *           preserveScope: true,  // do not forget this if use parent scope                                           // 7110
                                                                                                                       // 7111
 *           // Since GreetingController is instantiated with ControllerAs syntax                                      // 7112
 *           // AND we are passing the parent '$scope' to the dialog, we MUST                                          // 7113
 *           // use 'vm.<xxx>' in the template markup                                                                  // 7114
 *                                                                                                                     // 7115
 *           template: '<md-dialog>' +                                                                                 // 7116
 *                     '  <md-dialog-content>' +                                                                       // 7117
 *                     '     Hi There {{vm.employee}}' +                                                               // 7118
 *                     '  </md-dialog-content>' +                                                                      // 7119
 *                     '</md-dialog>',                                                                                 // 7120
 *                                                                                                                     // 7121
 *           controller: function DialogController($scope, $mdDialog) {                                                // 7122
 *             $scope.closeDialog = function() {                                                                       // 7123
 *               $mdDialog.hide();                                                                                     // 7124
 *             }                                                                                                       // 7125
 *           }                                                                                                         // 7126
 *        });                                                                                                          // 7127
 *     }                                                                                                               // 7128
 *                                                                                                                     // 7129
 *   }                                                                                                                 // 7130
 *                                                                                                                     // 7131
 *   // Greeting controller used with the more complex 'showCustomGreeting()' custom dialog                            // 7132
 *                                                                                                                     // 7133
 *   function GreetingController($scope, $mdDialog, employee) {                                                        // 7134
 *     // Assigned from construction <code>locals</code> options...                                                    // 7135
 *     $scope.employee = employee;                                                                                     // 7136
 *                                                                                                                     // 7137
 *     $scope.closeDialog = function() {                                                                               // 7138
 *       // Easily hides most recent dialog shown...                                                                   // 7139
 *       // no specific instance reference is needed.                                                                  // 7140
 *       $mdDialog.hide();                                                                                             // 7141
 *     };                                                                                                              // 7142
 *   }                                                                                                                 // 7143
 *                                                                                                                     // 7144
 * })(angular);                                                                                                        // 7145
 * </hljs>                                                                                                             // 7146
 */                                                                                                                    // 7147
                                                                                                                       // 7148
/**                                                                                                                    // 7149
 * @ngdoc method                                                                                                       // 7150
 * @name $mdDialog#alert                                                                                               // 7151
 *                                                                                                                     // 7152
 * @description                                                                                                        // 7153
 * Builds a preconfigured dialog with the specified message.                                                           // 7154
 *                                                                                                                     // 7155
 * @returns {obj} an `$mdDialogPreset` with the chainable configuration methods:                                       // 7156
 *                                                                                                                     // 7157
 * - $mdDialogPreset#title(string) - Sets the alert title.                                                             // 7158
 * - $mdDialogPreset#textContent(string) - Sets the alert message.                                                     // 7159
 * - $mdDialogPreset#htmlContent(string) - Sets the alert message as HTML. Requires ngSanitize                         // 7160
 *     module to be loaded. HTML is not run through Angular's compiler.                                                // 7161
 * - $mdDialogPreset#ok(string) - Sets the alert "Okay" button text.                                                   // 7162
 * - $mdDialogPreset#theme(string) - Sets the theme of the alert dialog.                                               // 7163
 * - $mdDialogPreset#targetEvent(DOMClickEvent=) - A click's event object. When passed in as an option,                // 7164
 *     the location of the click will be used as the starting point for the opening animation                          // 7165
 *     of the the dialog.                                                                                              // 7166
 *                                                                                                                     // 7167
 */                                                                                                                    // 7168
                                                                                                                       // 7169
/**                                                                                                                    // 7170
 * @ngdoc method                                                                                                       // 7171
 * @name $mdDialog#confirm                                                                                             // 7172
 *                                                                                                                     // 7173
 * @description                                                                                                        // 7174
 * Builds a preconfigured dialog with the specified message. You can call show and the promise returned                // 7175
 * will be resolved only if the user clicks the confirm action on the dialog.                                          // 7176
 *                                                                                                                     // 7177
 * @returns {obj} an `$mdDialogPreset` with the chainable configuration methods:                                       // 7178
 *                                                                                                                     // 7179
 * Additionally, it supports the following methods:                                                                    // 7180
 *                                                                                                                     // 7181
 * - $mdDialogPreset#title(string) - Sets the confirm title.                                                           // 7182
 * - $mdDialogPreset#textContent(string) - Sets the confirm message.                                                   // 7183
 * - $mdDialogPreset#htmlContent(string) - Sets the confirm message as HTML. Requires ngSanitize                       // 7184
 *     module to be loaded. HTML is not run through Angular's compiler.                                                // 7185
 * - $mdDialogPreset#ok(string) - Sets the confirm "Okay" button text.                                                 // 7186
 * - $mdDialogPreset#cancel(string) - Sets the confirm "Cancel" button text.                                           // 7187
 * - $mdDialogPreset#theme(string) - Sets the theme of the confirm dialog.                                             // 7188
 * - $mdDialogPreset#targetEvent(DOMClickEvent=) - A click's event object. When passed in as an option,                // 7189
 *     the location of the click will be used as the starting point for the opening animation                          // 7190
 *     of the the dialog.                                                                                              // 7191
 *                                                                                                                     // 7192
 */                                                                                                                    // 7193
                                                                                                                       // 7194
/**                                                                                                                    // 7195
 * @ngdoc method                                                                                                       // 7196
 * @name $mdDialog#show                                                                                                // 7197
 *                                                                                                                     // 7198
 * @description                                                                                                        // 7199
 * Show a dialog with the specified options.                                                                           // 7200
 *                                                                                                                     // 7201
 * @param {object} optionsOrPreset Either provide an `$mdDialogPreset` returned from `alert()`, and                    // 7202
 * `confirm()`, or an options object with the following properties:                                                    // 7203
 *   - `templateUrl` - `{string=}`: The url of a template that will be used as the content                             // 7204
 *   of the dialog.                                                                                                    // 7205
 *   - `template` - `{string=}`: HTML template to show in the dialog. This **must** be trusted HTML                    // 7206
 *      with respect to Angular's [$sce service](https://docs.angularjs.org/api/ng/service/$sce).                      // 7207
 *      This template should **never** be constructed with any kind of user input or user data.                        // 7208
 *   - `autoWrap` - `{boolean=}`: Whether or not to automatically wrap the template with a                             // 7209
 *     `<md-dialog>` tag if one is not provided. Defaults to true. Can be disabled if you provide a                    // 7210
 *     custom dialog directive.                                                                                        // 7211
 *   - `targetEvent` - `{DOMClickEvent=}`: A click's event object. When passed in as an option,                        // 7212
 *     the location of the click will be used as the starting point for the opening animation                          // 7213
 *     of the the dialog.                                                                                              // 7214
 *   - `openFrom` - `{string|Element|object}`: The query selector, DOM element or the Rect object                      // 7215
 *     that is used to determine the bounds (top, left, height, width) from which the Dialog will                      // 7216
 *     originate.                                                                                                      // 7217
 *   - `closeTo` - `{string|Element|object}`: The query selector, DOM element or the Rect object                       // 7218
 *     that is used to determine the bounds (top, left, height, width) to which the Dialog will                        // 7219
 *     target.                                                                                                         // 7220
 *   - `scope` - `{object=}`: the scope to link the template / controller to. If none is specified,                    // 7221
 *     it will create a new isolate scope.                                                                             // 7222
 *     This scope will be destroyed when the dialog is removed unless `preserveScope` is set to true.                  // 7223
 *   - `preserveScope` - `{boolean=}`: whether to preserve the scope when the element is removed. Default is false     // 7224
 *   - `disableParentScroll` - `{boolean=}`: Whether to disable scrolling while the dialog is open.                    // 7225
 *     Default true.                                                                                                   // 7226
 *   - `hasBackdrop` - `{boolean=}`: Whether there should be an opaque backdrop behind the dialog.                     // 7227
 *     Default true.                                                                                                   // 7228
 *   - `clickOutsideToClose` - `{boolean=}`: Whether the user can click outside the dialog to                          // 7229
 *     close it. Default false.                                                                                        // 7230
 *   - `escapeToClose` - `{boolean=}`: Whether the user can press escape to close the dialog.                          // 7231
 *     Default true.                                                                                                   // 7232
 *   - `focusOnOpen` - `{boolean=}`: An option to override focus behavior on open. Only disable if                     // 7233
 *     focusing some other way, as focus management is required for dialogs to be accessible.                          // 7234
 *     Defaults to true.                                                                                               // 7235
 *   - `controller` - `{function|string=}`: The controller to associate with the dialog. The controller                // 7236
 *     will be injected with the local `$mdDialog`, which passes along a scope for the dialog.                         // 7237
 *   - `locals` - `{object=}`: An object containing key/value pairs. The keys will be used as names                    // 7238
 *     of values to inject into the controller. For example, `locals: {three: 3}` would inject                         // 7239
 *     `three` into the controller, with the value 3. If `bindToController` is true, they will be                      // 7240
 *     copied to the controller instead.                                                                               // 7241
 *   - `bindToController` - `bool`: bind the locals to the controller, instead of passing them in.                     // 7242
 *   - `resolve` - `{object=}`: Similar to locals, except it takes promises as values, and the                         // 7243
 *     dialog will not open until all of the promises resolve.                                                         // 7244
 *   - `controllerAs` - `{string=}`: An alias to assign the controller to on the scope.                                // 7245
 *   - `parent` - `{element=}`: The element to append the dialog to. Defaults to appending                             // 7246
 *     to the root element of the application.                                                                         // 7247
 *   - `onShowing` `{function=} Callback function used to announce the show() action is                                // 7248
 *     starting.                                                                                                       // 7249
 *   - `onComplete` `{function=}`: Callback function used to announce when the show() action is                        // 7250
 *     finished.                                                                                                       // 7251
 *   - `onRemoving` `{function=}`: Callback function used to announce the close/hide() action is                       // 7252
 *     starting. This allows developers to run custom animations in parallel the close animations.                     // 7253
 *   - `fullscreen` `{boolean=}`: An option to apply `.md-dialog-fullscreen` class on open.                            // 7254
 * @returns {promise} A promise that can be resolved with `$mdDialog.hide()` or                                        // 7255
 * rejected with `$mdDialog.cancel()`.                                                                                 // 7256
 */                                                                                                                    // 7257
                                                                                                                       // 7258
/**                                                                                                                    // 7259
 * @ngdoc method                                                                                                       // 7260
 * @name $mdDialog#hide                                                                                                // 7261
 *                                                                                                                     // 7262
 * @description                                                                                                        // 7263
 * Hide an existing dialog and resolve the promise returned from `$mdDialog.show()`.                                   // 7264
 *                                                                                                                     // 7265
 * @param {*=} response An argument for the resolved promise.                                                          // 7266
 *                                                                                                                     // 7267
 * @returns {promise} A promise that is resolved when the dialog has been closed.                                      // 7268
 */                                                                                                                    // 7269
                                                                                                                       // 7270
/**                                                                                                                    // 7271
 * @ngdoc method                                                                                                       // 7272
 * @name $mdDialog#cancel                                                                                              // 7273
 *                                                                                                                     // 7274
 * @description                                                                                                        // 7275
 * Hide an existing dialog and reject the promise returned from `$mdDialog.show()`.                                    // 7276
 *                                                                                                                     // 7277
 * @param {*=} response An argument for the rejected promise.                                                          // 7278
 *                                                                                                                     // 7279
 * @returns {promise} A promise that is resolved when the dialog has been closed.                                      // 7280
 */                                                                                                                    // 7281
                                                                                                                       // 7282
function MdDialogProvider($$interimElementProvider) {                                                                  // 7283
  // Elements to capture and redirect focus when the user presses tab at the dialog boundary.                          // 7284
  var topFocusTrap, bottomFocusTrap;                                                                                   // 7285
                                                                                                                       // 7286
  advancedDialogOptions.$inject = ["$mdDialog", "$mdTheming"];                                                         // 7287
  dialogDefaultOptions.$inject = ["$mdDialog", "$mdAria", "$mdUtil", "$mdConstant", "$animate", "$document", "$window", "$rootElement", "$log", "$injector"];
  return $$interimElementProvider('$mdDialog')                                                                         // 7289
    .setDefaults({                                                                                                     // 7290
      methods: ['disableParentScroll', 'hasBackdrop', 'clickOutsideToClose', 'escapeToClose',                          // 7291
          'targetEvent', 'closeTo', 'openFrom', 'parent', 'fullscreen'],                                               // 7292
      options: dialogDefaultOptions                                                                                    // 7293
    })                                                                                                                 // 7294
    .addPreset('alert', {                                                                                              // 7295
      methods: ['title', 'htmlContent', 'textContent', 'content', 'ariaLabel', 'ok', 'theme',                          // 7296
          'css'],                                                                                                      // 7297
      options: advancedDialogOptions                                                                                   // 7298
    })                                                                                                                 // 7299
    .addPreset('confirm', {                                                                                            // 7300
      methods: ['title', 'htmlContent', 'textContent', 'content', 'ariaLabel', 'ok', 'cancel',                         // 7301
          'theme', 'css'],                                                                                             // 7302
      options: advancedDialogOptions                                                                                   // 7303
    });                                                                                                                // 7304
                                                                                                                       // 7305
  /* @ngInject */                                                                                                      // 7306
  function advancedDialogOptions($mdDialog, $mdTheming) {                                                              // 7307
    return {                                                                                                           // 7308
      template: [                                                                                                      // 7309
        '<md-dialog md-theme="{{ dialog.theme }}" aria-label="{{ dialog.ariaLabel }}" ng-class="dialog.css">',         // 7310
        '  <md-dialog-content class="md-dialog-content" role="document" tabIndex="-1">',                               // 7311
        '    <h2 class="md-title">{{ dialog.title }}</h2>',                                                            // 7312
        '    <div ng-if="::dialog.mdHtmlContent" class="md-dialog-content-body" ',                                     // 7313
        '        ng-bind-html="::dialog.mdHtmlContent"></div>',                                                        // 7314
        '    <div ng-if="::!dialog.mdHtmlContent" class="md-dialog-content-body">',                                    // 7315
        '      <p>{{::dialog.mdTextContent}}</p>',                                                                     // 7316
        '    </div>',                                                                                                  // 7317
        '  </md-dialog-content>',                                                                                      // 7318
        '  <md-dialog-actions>',                                                                                       // 7319
        '    <md-button ng-if="dialog.$type == \'confirm\'"' +                                                         // 7320
        '               ng-click="dialog.abort()" class="md-primary">',                                                // 7321
        '      {{ dialog.cancel }}',                                                                                   // 7322
        '    </md-button>',                                                                                            // 7323
        '    <md-button ng-click="dialog.hide()" class="md-primary" md-autofocus="dialog.$type!=\'confirm\'">',        // 7324
        '      {{ dialog.ok }}',                                                                                       // 7325
        '    </md-button>',                                                                                            // 7326
        '  </md-dialog-actions>',                                                                                      // 7327
        '</md-dialog>'                                                                                                 // 7328
      ].join('').replace(/\s\s+/g, ''),                                                                                // 7329
      controller: function mdDialogCtrl() {                                                                            // 7330
        this.hide = function() {                                                                                       // 7331
          $mdDialog.hide(true);                                                                                        // 7332
        };                                                                                                             // 7333
        this.abort = function() {                                                                                      // 7334
          $mdDialog.cancel();                                                                                          // 7335
        };                                                                                                             // 7336
      },                                                                                                               // 7337
      controllerAs: 'dialog',                                                                                          // 7338
      bindToController: true,                                                                                          // 7339
      theme: $mdTheming.defaultTheme()                                                                                 // 7340
    };                                                                                                                 // 7341
  }                                                                                                                    // 7342
                                                                                                                       // 7343
  /* @ngInject */                                                                                                      // 7344
  function dialogDefaultOptions($mdDialog, $mdAria, $mdUtil, $mdConstant, $animate, $document, $window, $rootElement, $log, $injector) {
    return {                                                                                                           // 7346
      hasBackdrop: true,                                                                                               // 7347
      isolateScope: true,                                                                                              // 7348
      onShow: onShow,                                                                                                  // 7349
      onShowing: beforeShow,                                                                                           // 7350
      onRemove: onRemove,                                                                                              // 7351
      clickOutsideToClose: false,                                                                                      // 7352
      escapeToClose: true,                                                                                             // 7353
      targetEvent: null,                                                                                               // 7354
      closeTo: null,                                                                                                   // 7355
      openFrom: null,                                                                                                  // 7356
      focusOnOpen: true,                                                                                               // 7357
      disableParentScroll: true,                                                                                       // 7358
      autoWrap: true,                                                                                                  // 7359
      fullscreen: false,                                                                                               // 7360
      transformTemplate: function(template, options) {                                                                 // 7361
        return '<div class="md-dialog-container">' + validatedTemplate(template) + '</div>';                           // 7362
                                                                                                                       // 7363
        /**                                                                                                            // 7364
         * The specified template should contain a <md-dialog> wrapper element....                                     // 7365
         */                                                                                                            // 7366
        function validatedTemplate(template) {                                                                         // 7367
          if (options.autoWrap && !/<\/md-dialog>/g.test(template)) {                                                  // 7368
            return '<md-dialog>' + (template || '') + '</md-dialog>';                                                  // 7369
          } else {                                                                                                     // 7370
            return template || '';                                                                                     // 7371
          }                                                                                                            // 7372
        }                                                                                                              // 7373
      }                                                                                                                // 7374
    };                                                                                                                 // 7375
                                                                                                                       // 7376
    function beforeShow(scope, element, options, controller) {                                                         // 7377
      if (controller) {                                                                                                // 7378
        controller.mdHtmlContent = controller.htmlContent || options.htmlContent || '';                                // 7379
        controller.mdTextContent = controller.textContent || options.textContent ||                                    // 7380
            controller.content || options.content || '';                                                               // 7381
                                                                                                                       // 7382
        if (controller.mdHtmlContent && !$injector.has('$sanitize')) {                                                 // 7383
          throw Error('The ngSanitize module must be loaded in order to use htmlContent.');                            // 7384
        }                                                                                                              // 7385
                                                                                                                       // 7386
        if (controller.mdHtmlContent && controller.mdTextContent) {                                                    // 7387
          throw Error('md-dialog cannot have both `htmlContent` and `textContent`');                                   // 7388
        }                                                                                                              // 7389
      }                                                                                                                // 7390
    }                                                                                                                  // 7391
                                                                                                                       // 7392
    /** Show method for dialogs */                                                                                     // 7393
    function onShow(scope, element, options, controller) {                                                             // 7394
      angular.element($document[0].body).addClass('md-dialog-is-showing');                                             // 7395
                                                                                                                       // 7396
      captureParentAndFromToElements(options);                                                                         // 7397
      configureAria(element.find('md-dialog'), options);                                                               // 7398
      showBackdrop(scope, element, options);                                                                           // 7399
                                                                                                                       // 7400
      return dialogPopIn(element, options)                                                                             // 7401
        .then(function() {                                                                                             // 7402
          activateListeners(element, options);                                                                         // 7403
          lockScreenReader(element, options);                                                                          // 7404
          warnDeprecatedActions();                                                                                     // 7405
          focusOnOpen();                                                                                               // 7406
        });                                                                                                            // 7407
                                                                                                                       // 7408
      /**                                                                                                              // 7409
       * Check to see if they used the deprecated .md-actions class and log a warning                                  // 7410
       */                                                                                                              // 7411
      function warnDeprecatedActions() {                                                                               // 7412
        var badActions = element[0].querySelectorAll('.md-actions');                                                   // 7413
                                                                                                                       // 7414
        if (badActions.length > 0) {                                                                                   // 7415
          $log.warn('Using a class of md-actions is deprected, please use <md-dialog-actions>.');                      // 7416
        }                                                                                                              // 7417
      }                                                                                                                // 7418
                                                                                                                       // 7419
      /**                                                                                                              // 7420
       * For alerts, focus on content... otherwise focus on                                                            // 7421
       * the close button (or equivalent)                                                                              // 7422
       */                                                                                                              // 7423
      function focusOnOpen() {                                                                                         // 7424
        if (options.focusOnOpen) {                                                                                     // 7425
          var target = $mdUtil.findFocusTarget(element) || findCloseButton();                                          // 7426
          target.focus();                                                                                              // 7427
        }                                                                                                              // 7428
                                                                                                                       // 7429
        /**                                                                                                            // 7430
         * If no element with class dialog-close, try to find the last                                                 // 7431
         * button child in md-actions and assume it is a close button.                                                 // 7432
         *                                                                                                             // 7433
         * If we find no actions at all, log a warning to the console.                                                 // 7434
         */                                                                                                            // 7435
        function findCloseButton() {                                                                                   // 7436
          var closeButton = element[0].querySelector('.dialog-close');                                                 // 7437
          if (!closeButton) {                                                                                          // 7438
            var actionButtons = element[0].querySelectorAll('.md-actions button, md-dialog-actions button');           // 7439
            closeButton = actionButtons[actionButtons.length - 1];                                                     // 7440
          }                                                                                                            // 7441
          return angular.element(closeButton);                                                                         // 7442
        }                                                                                                              // 7443
      }                                                                                                                // 7444
    }                                                                                                                  // 7445
                                                                                                                       // 7446
    /**                                                                                                                // 7447
     * Remove function for all dialogs                                                                                 // 7448
     */                                                                                                                // 7449
    function onRemove(scope, element, options) {                                                                       // 7450
      options.deactivateListeners();                                                                                   // 7451
      options.unlockScreenReader();                                                                                    // 7452
      options.hideBackdrop(options.$destroy);                                                                          // 7453
                                                                                                                       // 7454
      // Remove the focus traps that we added earlier for keeping focus within the dialog.                             // 7455
      if (topFocusTrap && topFocusTrap.parentNode) {                                                                   // 7456
        topFocusTrap.parentNode.removeChild(topFocusTrap);                                                             // 7457
      }                                                                                                                // 7458
                                                                                                                       // 7459
      if (bottomFocusTrap && bottomFocusTrap.parentNode) {                                                             // 7460
        bottomFocusTrap.parentNode.removeChild(bottomFocusTrap);                                                       // 7461
      }                                                                                                                // 7462
                                                                                                                       // 7463
      // For navigation $destroy events, do a quick, non-animated removal,                                             // 7464
      // but for normal closes (from clicks, etc) animate the removal                                                  // 7465
      return !!options.$destroy ? detachAndClean() : animateRemoval().then( detachAndClean );                          // 7466
                                                                                                                       // 7467
      /**                                                                                                              // 7468
       * For normal closes, animate the removal.                                                                       // 7469
       * For forced closes (like $destroy events), skip the animations                                                 // 7470
       */                                                                                                              // 7471
      function animateRemoval() {                                                                                      // 7472
        return dialogPopOut(element, options);                                                                         // 7473
      }                                                                                                                // 7474
                                                                                                                       // 7475
      /**                                                                                                              // 7476
       * Detach the element                                                                                            // 7477
       */                                                                                                              // 7478
      function detachAndClean() {                                                                                      // 7479
        angular.element($document[0].body).removeClass('md-dialog-is-showing');                                        // 7480
        element.remove();                                                                                              // 7481
                                                                                                                       // 7482
        if (!options.$destroy) options.origin.focus();                                                                 // 7483
      }                                                                                                                // 7484
    }                                                                                                                  // 7485
                                                                                                                       // 7486
    /**                                                                                                                // 7487
     * Capture originator/trigger/from/to element information (if available)                                           // 7488
     * and the parent container for the dialog; defaults to the $rootElement                                           // 7489
     * unless overridden in the options.parent                                                                         // 7490
     */                                                                                                                // 7491
    function captureParentAndFromToElements(options) {                                                                 // 7492
          options.origin = angular.extend({                                                                            // 7493
            element: null,                                                                                             // 7494
            bounds: null,                                                                                              // 7495
            focus: angular.noop                                                                                        // 7496
          }, options.origin || {});                                                                                    // 7497
                                                                                                                       // 7498
          options.parent   = getDomElement(options.parent, $rootElement);                                              // 7499
          options.closeTo  = getBoundingClientRect(getDomElement(options.closeTo));                                    // 7500
          options.openFrom = getBoundingClientRect(getDomElement(options.openFrom));                                   // 7501
                                                                                                                       // 7502
          if ( options.targetEvent ) {                                                                                 // 7503
            options.origin   = getBoundingClientRect(options.targetEvent.target, options.origin);                      // 7504
          }                                                                                                            // 7505
                                                                                                                       // 7506
          /**                                                                                                          // 7507
           * Identify the bounding RECT for the target element                                                         // 7508
           *                                                                                                           // 7509
           */                                                                                                          // 7510
          function getBoundingClientRect (element, orig) {                                                             // 7511
            var source = angular.element((element || {}));                                                             // 7512
            if (source && source.length) {                                                                             // 7513
              // Compute and save the target element's bounding rect, so that if the                                   // 7514
              // element is hidden when the dialog closes, we can shrink the dialog                                    // 7515
              // back to the same position it expanded from.                                                           // 7516
              //                                                                                                       // 7517
              // Checking if the source is a rect object or a DOM element                                              // 7518
              var bounds = {top:0,left:0,height:0,width:0};                                                            // 7519
              var hasFn = angular.isFunction(source[0].getBoundingClientRect);                                         // 7520
                                                                                                                       // 7521
              return angular.extend(orig || {}, {                                                                      // 7522
                  element : hasFn ? source : undefined,                                                                // 7523
                  bounds  : hasFn ? source[0].getBoundingClientRect() : angular.extend({}, bounds, source[0]),         // 7524
                  focus   : angular.bind(source, source.focus),                                                        // 7525
              });                                                                                                      // 7526
            }                                                                                                          // 7527
          }                                                                                                            // 7528
                                                                                                                       // 7529
          /**                                                                                                          // 7530
           * If the specifier is a simple string selector, then query for                                              // 7531
           * the DOM element.                                                                                          // 7532
           */                                                                                                          // 7533
          function getDomElement(element, defaultElement) {                                                            // 7534
            if (angular.isString(element)) {                                                                           // 7535
              var simpleSelector = element,                                                                            // 7536
                container = $document[0].querySelectorAll(simpleSelector);                                             // 7537
                element = container.length ? container[0] : null;                                                      // 7538
            }                                                                                                          // 7539
                                                                                                                       // 7540
            // If we have a reference to a raw dom element, always wrap it in jqLite                                   // 7541
            return angular.element(element || defaultElement);                                                         // 7542
          }                                                                                                            // 7543
                                                                                                                       // 7544
        }                                                                                                              // 7545
                                                                                                                       // 7546
    /**                                                                                                                // 7547
     * Listen for escape keys and outside clicks to auto close                                                         // 7548
     */                                                                                                                // 7549
    function activateListeners(element, options) {                                                                     // 7550
      var window = angular.element($window);                                                                           // 7551
      var onWindowResize = $mdUtil.debounce(function(){                                                                // 7552
        stretchDialogContainerToViewport(element, options);                                                            // 7553
      }, 60);                                                                                                          // 7554
                                                                                                                       // 7555
      var removeListeners = [];                                                                                        // 7556
      var smartClose = function() {                                                                                    // 7557
        // Only 'confirm' dialogs have a cancel button... escape/clickOutside will                                     // 7558
        // cancel or fallback to hide.                                                                                 // 7559
        var closeFn = ( options.$type == 'alert' ) ? $mdDialog.hide : $mdDialog.cancel;                                // 7560
        $mdUtil.nextTick(closeFn, true);                                                                               // 7561
      };                                                                                                               // 7562
                                                                                                                       // 7563
      if (options.escapeToClose) {                                                                                     // 7564
        var parentTarget = options.parent;                                                                             // 7565
        var keyHandlerFn = function(ev) {                                                                              // 7566
          if (ev.keyCode === $mdConstant.KEY_CODE.ESCAPE) {                                                            // 7567
            ev.stopPropagation();                                                                                      // 7568
            ev.preventDefault();                                                                                       // 7569
                                                                                                                       // 7570
            smartClose();                                                                                              // 7571
          }                                                                                                            // 7572
        };                                                                                                             // 7573
                                                                                                                       // 7574
        // Add keydown listeners                                                                                       // 7575
        element.on('keydown', keyHandlerFn);                                                                           // 7576
        parentTarget.on('keydown', keyHandlerFn);                                                                      // 7577
                                                                                                                       // 7578
        // Queue remove listeners function                                                                             // 7579
        removeListeners.push(function() {                                                                              // 7580
                                                                                                                       // 7581
          element.off('keydown', keyHandlerFn);                                                                        // 7582
          parentTarget.off('keydown', keyHandlerFn);                                                                   // 7583
                                                                                                                       // 7584
        });                                                                                                            // 7585
      }                                                                                                                // 7586
                                                                                                                       // 7587
      // Register listener to update dialog on window resize                                                           // 7588
      window.on('resize', onWindowResize);                                                                             // 7589
                                                                                                                       // 7590
      removeListeners.push(function() {                                                                                // 7591
        window.off('resize', onWindowResize);                                                                          // 7592
      });                                                                                                              // 7593
                                                                                                                       // 7594
      if (options.clickOutsideToClose) {                                                                               // 7595
        var target = element;                                                                                          // 7596
        var sourceElem;                                                                                                // 7597
                                                                                                                       // 7598
        // Keep track of the element on which the mouse originally went down                                           // 7599
        // so that we can only close the backdrop when the 'click' started on it.                                      // 7600
        // A simple 'click' handler does not work,                                                                     // 7601
        // it sets the target object as the element the mouse went down on.                                            // 7602
        var mousedownHandler = function(ev) {                                                                          // 7603
          sourceElem = ev.target;                                                                                      // 7604
        };                                                                                                             // 7605
                                                                                                                       // 7606
        // We check if our original element and the target is the backdrop                                             // 7607
        // because if the original was the backdrop and the target was inside the dialog                               // 7608
        // we don't want to dialog to close.                                                                           // 7609
        var mouseupHandler = function(ev) {                                                                            // 7610
          if (sourceElem === target[0] && ev.target === target[0]) {                                                   // 7611
            ev.stopPropagation();                                                                                      // 7612
            ev.preventDefault();                                                                                       // 7613
                                                                                                                       // 7614
            smartClose();                                                                                              // 7615
          }                                                                                                            // 7616
        };                                                                                                             // 7617
                                                                                                                       // 7618
        // Add listeners                                                                                               // 7619
        target.on('mousedown', mousedownHandler);                                                                      // 7620
        target.on('mouseup', mouseupHandler);                                                                          // 7621
                                                                                                                       // 7622
        // Queue remove listeners function                                                                             // 7623
        removeListeners.push(function() {                                                                              // 7624
          target.off('mousedown', mousedownHandler);                                                                   // 7625
          target.off('mouseup', mouseupHandler);                                                                       // 7626
        });                                                                                                            // 7627
      }                                                                                                                // 7628
                                                                                                                       // 7629
      // Attach specific `remove` listener handler                                                                     // 7630
      options.deactivateListeners = function() {                                                                       // 7631
        removeListeners.forEach(function(removeFn) {                                                                   // 7632
          removeFn();                                                                                                  // 7633
        });                                                                                                            // 7634
        options.deactivateListeners = null;                                                                            // 7635
      };                                                                                                               // 7636
    }                                                                                                                  // 7637
                                                                                                                       // 7638
    /**                                                                                                                // 7639
     * Show modal backdrop element...                                                                                  // 7640
     */                                                                                                                // 7641
    function showBackdrop(scope, element, options) {                                                                   // 7642
                                                                                                                       // 7643
      if (options.disableParentScroll) {                                                                               // 7644
        // !! DO this before creating the backdrop; since disableScrollAround()                                        // 7645
        //    configures the scroll offset; which is used by mdBackDrop postLink()                                     // 7646
        options.restoreScroll = $mdUtil.disableScrollAround(element, options.parent);                                  // 7647
      }                                                                                                                // 7648
                                                                                                                       // 7649
      if (options.hasBackdrop) {                                                                                       // 7650
        options.backdrop = $mdUtil.createBackdrop(scope, "md-dialog-backdrop md-opaque");                              // 7651
        $animate.enter(options.backdrop, options.parent);                                                              // 7652
      }                                                                                                                // 7653
                                                                                                                       // 7654
      /**                                                                                                              // 7655
       * Hide modal backdrop element...                                                                                // 7656
       */                                                                                                              // 7657
      options.hideBackdrop = function hideBackdrop($destroy) {                                                         // 7658
        if (options.backdrop) {                                                                                        // 7659
          if ( !!$destroy ) options.backdrop.remove();                                                                 // 7660
          else              $animate.leave(options.backdrop);                                                          // 7661
        }                                                                                                              // 7662
                                                                                                                       // 7663
        if (options.disableParentScroll) {                                                                             // 7664
          options.restoreScroll();                                                                                     // 7665
          delete options.restoreScroll;                                                                                // 7666
        }                                                                                                              // 7667
                                                                                                                       // 7668
        options.hideBackdrop = null;                                                                                   // 7669
      }                                                                                                                // 7670
    }                                                                                                                  // 7671
                                                                                                                       // 7672
    /**                                                                                                                // 7673
     * Inject ARIA-specific attributes appropriate for Dialogs                                                         // 7674
     */                                                                                                                // 7675
    function configureAria(element, options) {                                                                         // 7676
                                                                                                                       // 7677
      var role = (options.$type === 'alert') ? 'alertdialog' : 'dialog';                                               // 7678
      var dialogContent = element.find('md-dialog-content');                                                           // 7679
      var dialogId = element.attr('id') || ('dialog_' + $mdUtil.nextUid());                                            // 7680
                                                                                                                       // 7681
      element.attr({                                                                                                   // 7682
        'role': role,                                                                                                  // 7683
        'tabIndex': '-1'                                                                                               // 7684
      });                                                                                                              // 7685
                                                                                                                       // 7686
      if (dialogContent.length === 0) {                                                                                // 7687
        dialogContent = element;                                                                                       // 7688
      }                                                                                                                // 7689
                                                                                                                       // 7690
      dialogContent.attr('id', dialogId);                                                                              // 7691
      element.attr('aria-describedby', dialogId);                                                                      // 7692
                                                                                                                       // 7693
      if (options.ariaLabel) {                                                                                         // 7694
        $mdAria.expect(element, 'aria-label', options.ariaLabel);                                                      // 7695
      }                                                                                                                // 7696
      else {                                                                                                           // 7697
        $mdAria.expectAsync(element, 'aria-label', function() {                                                        // 7698
          var words = dialogContent.text().split(/\s+/);                                                               // 7699
          if (words.length > 3) words = words.slice(0, 3).concat('...');                                               // 7700
          return words.join(' ');                                                                                      // 7701
        });                                                                                                            // 7702
      }                                                                                                                // 7703
                                                                                                                       // 7704
      // Set up elements before and after the dialog content to capture focus and                                      // 7705
      // redirect back into the dialog.                                                                                // 7706
      topFocusTrap = document.createElement('div');                                                                    // 7707
      topFocusTrap.classList.add('md-dialog-focus-trap');                                                              // 7708
      topFocusTrap.tabIndex = 0;                                                                                       // 7709
                                                                                                                       // 7710
      bottomFocusTrap = topFocusTrap.cloneNode(false);                                                                 // 7711
                                                                                                                       // 7712
      // When focus is about to move out of the dialog, we want to intercept it and redirect it                        // 7713
      // back to the dialog element.                                                                                   // 7714
      var focusHandler = function() {                                                                                  // 7715
        element.focus();                                                                                               // 7716
      };                                                                                                               // 7717
      topFocusTrap.addEventListener('focus', focusHandler);                                                            // 7718
      bottomFocusTrap.addEventListener('focus', focusHandler);                                                         // 7719
                                                                                                                       // 7720
      // The top focus trap inserted immeidately before the md-dialog element (as a sibling).                          // 7721
      // The bottom focus trap is inserted at the very end of the md-dialog element (as a child).                      // 7722
      element[0].parentNode.insertBefore(topFocusTrap, element[0]);                                                    // 7723
      element.append(bottomFocusTrap);                                                                                 // 7724
    }                                                                                                                  // 7725
                                                                                                                       // 7726
    /**                                                                                                                // 7727
     * Prevents screen reader interaction behind modal window                                                          // 7728
     * on swipe interfaces                                                                                             // 7729
     */                                                                                                                // 7730
    function lockScreenReader(element, options) {                                                                      // 7731
      var isHidden = true;                                                                                             // 7732
                                                                                                                       // 7733
      // get raw DOM node                                                                                              // 7734
      walkDOM(element[0]);                                                                                             // 7735
                                                                                                                       // 7736
      options.unlockScreenReader = function() {                                                                        // 7737
        isHidden = false;                                                                                              // 7738
        walkDOM(element[0]);                                                                                           // 7739
                                                                                                                       // 7740
        options.unlockScreenReader = null;                                                                             // 7741
      };                                                                                                               // 7742
                                                                                                                       // 7743
      /**                                                                                                              // 7744
       * Walk DOM to apply or remove aria-hidden on sibling nodes                                                      // 7745
       * and parent sibling nodes                                                                                      // 7746
       *                                                                                                               // 7747
       */                                                                                                              // 7748
      function walkDOM(element) {                                                                                      // 7749
        while (element.parentNode) {                                                                                   // 7750
          if (element === document.body) {                                                                             // 7751
            return;                                                                                                    // 7752
          }                                                                                                            // 7753
          var children = element.parentNode.children;                                                                  // 7754
          for (var i = 0; i < children.length; i++) {                                                                  // 7755
            // skip over child if it is an ascendant of the dialog                                                     // 7756
            // or a script or style tag                                                                                // 7757
            if (element !== children[i] && !isNodeOneOf(children[i], ['SCRIPT', 'STYLE'])) {                           // 7758
              children[i].setAttribute('aria-hidden', isHidden);                                                       // 7759
            }                                                                                                          // 7760
          }                                                                                                            // 7761
                                                                                                                       // 7762
          walkDOM(element = element.parentNode);                                                                       // 7763
        }                                                                                                              // 7764
      }                                                                                                                // 7765
    }                                                                                                                  // 7766
                                                                                                                       // 7767
    /**                                                                                                                // 7768
     * Ensure the dialog container fill-stretches to the viewport                                                      // 7769
     */                                                                                                                // 7770
    function stretchDialogContainerToViewport(container, options) {                                                    // 7771
      var isFixed = $window.getComputedStyle($document[0].body).position == 'fixed';                                   // 7772
      var backdrop = options.backdrop ? $window.getComputedStyle(options.backdrop[0]) : null;                          // 7773
      var height = backdrop ? Math.min($document[0].body.clientHeight, Math.ceil(Math.abs(parseInt(backdrop.height, 10)))) : 0;
                                                                                                                       // 7775
      container.css({                                                                                                  // 7776
        top: (isFixed ? $mdUtil.scrollTop(options.parent) : 0) + 'px',                                                 // 7777
        height: height ? height + 'px' : '100%'                                                                        // 7778
      });                                                                                                              // 7779
                                                                                                                       // 7780
      return container;                                                                                                // 7781
    }                                                                                                                  // 7782
                                                                                                                       // 7783
    /**                                                                                                                // 7784
     *  Dialog open and pop-in animation                                                                               // 7785
     */                                                                                                                // 7786
    function dialogPopIn(container, options) {                                                                         // 7787
      // Add the `md-dialog-container` to the DOM                                                                      // 7788
      options.parent.append(container);                                                                                // 7789
      stretchDialogContainerToViewport(container, options);                                                            // 7790
                                                                                                                       // 7791
      var dialogEl = container.find('md-dialog');                                                                      // 7792
      var animator = $mdUtil.dom.animator;                                                                             // 7793
      var buildTranslateToOrigin = animator.calculateZoomToOrigin;                                                     // 7794
      var translateOptions = {transitionInClass: 'md-transition-in', transitionOutClass: 'md-transition-out'};         // 7795
      var from = animator.toTransformCss(buildTranslateToOrigin(dialogEl, options.openFrom || options.origin));        // 7796
      var to = animator.toTransformCss("");  // defaults to center display (or parent or $rootElement)                 // 7797
                                                                                                                       // 7798
      if (options.fullscreen) {                                                                                        // 7799
        dialogEl.addClass('md-dialog-fullscreen');                                                                     // 7800
      }                                                                                                                // 7801
                                                                                                                       // 7802
      return animator                                                                                                  // 7803
        .translate3d(dialogEl, from, to, translateOptions)                                                             // 7804
        .then(function(animateReversal) {                                                                              // 7805
          // Build a reversal translate function synched to this translation...                                        // 7806
          options.reverseAnimate = function() {                                                                        // 7807
            delete options.reverseAnimate;                                                                             // 7808
                                                                                                                       // 7809
            if (options.closeTo) {                                                                                     // 7810
              // Using the opposite classes to create a close animation to the closeTo element                         // 7811
              translateOptions = {transitionInClass: 'md-transition-out', transitionOutClass: 'md-transition-in'};     // 7812
              from = to;                                                                                               // 7813
              to = animator.toTransformCss(buildTranslateToOrigin(dialogEl, options.closeTo));                         // 7814
                                                                                                                       // 7815
              return animator                                                                                          // 7816
                .translate3d(dialogEl, from, to,translateOptions);                                                     // 7817
            }                                                                                                          // 7818
                                                                                                                       // 7819
            return animateReversal(                                                                                    // 7820
              animator.toTransformCss(                                                                                 // 7821
                // in case the origin element has moved or is hidden,                                                  // 7822
                // let's recalculate the translateCSS                                                                  // 7823
                buildTranslateToOrigin(dialogEl, options.origin)                                                       // 7824
              )                                                                                                        // 7825
            );                                                                                                         // 7826
                                                                                                                       // 7827
          };                                                                                                           // 7828
          return true;                                                                                                 // 7829
        });                                                                                                            // 7830
    }                                                                                                                  // 7831
                                                                                                                       // 7832
    /**                                                                                                                // 7833
     * Dialog close and pop-out animation                                                                              // 7834
     */                                                                                                                // 7835
    function dialogPopOut(container, options) {                                                                        // 7836
      return options.reverseAnimate();                                                                                 // 7837
    }                                                                                                                  // 7838
                                                                                                                       // 7839
    /**                                                                                                                // 7840
     * Utility function to filter out raw DOM nodes                                                                    // 7841
     */                                                                                                                // 7842
    function isNodeOneOf(elem, nodeTypeArray) {                                                                        // 7843
      if (nodeTypeArray.indexOf(elem.nodeName) !== -1) {                                                               // 7844
        return true;                                                                                                   // 7845
      }                                                                                                                // 7846
    }                                                                                                                  // 7847
                                                                                                                       // 7848
  }                                                                                                                    // 7849
}                                                                                                                      // 7850
MdDialogProvider.$inject = ["$$interimElementProvider"];                                                               // 7851
                                                                                                                       // 7852
})();                                                                                                                  // 7853
(function(){                                                                                                           // 7854
"use strict";                                                                                                          // 7855
                                                                                                                       // 7856
/**                                                                                                                    // 7857
 * @ngdoc module                                                                                                       // 7858
 * @name material.components.divider                                                                                   // 7859
 * @description Divider module!                                                                                        // 7860
 */                                                                                                                    // 7861
angular.module('material.components.divider', [                                                                        // 7862
  'material.core'                                                                                                      // 7863
])                                                                                                                     // 7864
  .directive('mdDivider', MdDividerDirective);                                                                         // 7865
                                                                                                                       // 7866
/**                                                                                                                    // 7867
 * @ngdoc directive                                                                                                    // 7868
 * @name mdDivider                                                                                                     // 7869
 * @module material.components.divider                                                                                 // 7870
 * @restrict E                                                                                                         // 7871
 *                                                                                                                     // 7872
 * @description                                                                                                        // 7873
 * Dividers group and separate content within lists and page layouts using strong visual and spatial distinctions. This divider is a thin rule, lightweight enough to not distract the user from content.
 *                                                                                                                     // 7875
 * @param {boolean=} md-inset Add this attribute to activate the inset divider style.                                  // 7876
 * @usage                                                                                                              // 7877
 * <hljs lang="html">                                                                                                  // 7878
 * <md-divider></md-divider>                                                                                           // 7879
 *                                                                                                                     // 7880
 * <md-divider md-inset></md-divider>                                                                                  // 7881
 * </hljs>                                                                                                             // 7882
 *                                                                                                                     // 7883
 */                                                                                                                    // 7884
function MdDividerDirective($mdTheming) {                                                                              // 7885
  return {                                                                                                             // 7886
    restrict: 'E',                                                                                                     // 7887
    link: $mdTheming                                                                                                   // 7888
  };                                                                                                                   // 7889
}                                                                                                                      // 7890
MdDividerDirective.$inject = ["$mdTheming"];                                                                           // 7891
                                                                                                                       // 7892
})();                                                                                                                  // 7893
(function(){                                                                                                           // 7894
"use strict";                                                                                                          // 7895
                                                                                                                       // 7896
(function() {                                                                                                          // 7897
  'use strict';                                                                                                        // 7898
                                                                                                                       // 7899
  /**                                                                                                                  // 7900
   * @ngdoc module                                                                                                     // 7901
   * @name material.components.datepicker                                                                              // 7902
   * @description Datepicker                                                                                           // 7903
   */                                                                                                                  // 7904
  angular.module('material.components.datepicker', [                                                                   // 7905
    'material.core',                                                                                                   // 7906
    'material.components.icon',                                                                                        // 7907
    'material.components.virtualRepeat'                                                                                // 7908
  ]).directive('mdCalendar', calendarDirective);                                                                       // 7909
                                                                                                                       // 7910
                                                                                                                       // 7911
  // POST RELEASE                                                                                                      // 7912
  // TODO(jelbourn): Mac Cmd + left / right == Home / End                                                              // 7913
  // TODO(jelbourn): Clicking on the month label opens the month-picker.                                               // 7914
  // TODO(jelbourn): Minimum and maximum date                                                                          // 7915
  // TODO(jelbourn): Refactor month element creation to use cloneNode (performance).                                   // 7916
  // TODO(jelbourn): Define virtual scrolling constants (compactness) users can override.                              // 7917
  // TODO(jelbourn): Animated month transition on ng-model change (virtual-repeat)                                     // 7918
  // TODO(jelbourn): Scroll snapping (virtual repeat)                                                                  // 7919
  // TODO(jelbourn): Remove superfluous row from short months (virtual-repeat)                                         // 7920
  // TODO(jelbourn): Month headers stick to top when scrolling.                                                        // 7921
  // TODO(jelbourn): Previous month opacity is lowered when partially scrolled out of view.                            // 7922
  // TODO(jelbourn): Support md-calendar standalone on a page (as a tabstop w/ aria-live                               // 7923
  //     announcement and key handling).                                                                               // 7924
  // Read-only calendar (not just date-picker).                                                                        // 7925
                                                                                                                       // 7926
  /**                                                                                                                  // 7927
   * Height of one calendar month tbody. This must be made known to the virtual-repeat and is                          // 7928
   * subsequently used for scrolling to specific months.                                                               // 7929
   */                                                                                                                  // 7930
  var TBODY_HEIGHT = 265;                                                                                              // 7931
                                                                                                                       // 7932
  /**                                                                                                                  // 7933
   * Height of a calendar month with a single row. This is needed to calculate the offset for                          // 7934
   * rendering an extra month in virtual-repeat that only contains one row.                                            // 7935
   */                                                                                                                  // 7936
  var TBODY_SINGLE_ROW_HEIGHT = 45;                                                                                    // 7937
                                                                                                                       // 7938
  function calendarDirective() {                                                                                       // 7939
    return {                                                                                                           // 7940
      template:                                                                                                        // 7941
          '<table aria-hidden="true" class="md-calendar-day-header"><thead></thead></table>' +                         // 7942
          '<div class="md-calendar-scroll-mask">' +                                                                    // 7943
          '<md-virtual-repeat-container class="md-calendar-scroll-container" ' +                                       // 7944
                'md-offset-size="' + (TBODY_SINGLE_ROW_HEIGHT - TBODY_HEIGHT) + '">' +                                 // 7945
              '<table role="grid" tabindex="0" class="md-calendar" aria-readonly="true">' +                            // 7946
                '<tbody role="rowgroup" md-virtual-repeat="i in ctrl.items" md-calendar-month ' +                      // 7947
                    'md-month-offset="$index" class="md-calendar-month" ' +                                            // 7948
                    'md-start-index="ctrl.getSelectedMonthIndex()" ' +                                                 // 7949
                    'md-item-size="' + TBODY_HEIGHT + '"></tbody>' +                                                   // 7950
              '</table>' +                                                                                             // 7951
            '</md-virtual-repeat-container>' +                                                                         // 7952
          '</div>',                                                                                                    // 7953
      scope: {                                                                                                         // 7954
        minDate: '=mdMinDate',                                                                                         // 7955
        maxDate: '=mdMaxDate',                                                                                         // 7956
        dateFilter: '=mdDateFilter',                                                                                   // 7957
      },                                                                                                               // 7958
      require: ['ngModel', 'mdCalendar'],                                                                              // 7959
      controller: CalendarCtrl,                                                                                        // 7960
      controllerAs: 'ctrl',                                                                                            // 7961
      bindToController: true,                                                                                          // 7962
      link: function(scope, element, attrs, controllers) {                                                             // 7963
        var ngModelCtrl = controllers[0];                                                                              // 7964
        var mdCalendarCtrl = controllers[1];                                                                           // 7965
        mdCalendarCtrl.configureNgModel(ngModelCtrl);                                                                  // 7966
      }                                                                                                                // 7967
    };                                                                                                                 // 7968
  }                                                                                                                    // 7969
                                                                                                                       // 7970
  /** Class applied to the selected date cell/. */                                                                     // 7971
  var SELECTED_DATE_CLASS = 'md-calendar-selected-date';                                                               // 7972
                                                                                                                       // 7973
  /** Class applied to the focused date cell/. */                                                                      // 7974
  var FOCUSED_DATE_CLASS = 'md-focus';                                                                                 // 7975
                                                                                                                       // 7976
  /** Next identifier for calendar instance. */                                                                        // 7977
  var nextUniqueId = 0;                                                                                                // 7978
                                                                                                                       // 7979
  /** The first renderable date in the virtual-scrolling calendar (for all instances). */                              // 7980
  var firstRenderableDate = null;                                                                                      // 7981
                                                                                                                       // 7982
  /**                                                                                                                  // 7983
   * Controller for the mdCalendar component.                                                                          // 7984
   * @ngInject @constructor                                                                                            // 7985
   */                                                                                                                  // 7986
  function CalendarCtrl($element, $attrs, $scope, $animate, $q, $mdConstant,                                           // 7987
      $mdTheming, $$mdDateUtil, $mdDateLocale, $mdInkRipple, $mdUtil) {                                                // 7988
    $mdTheming($element);                                                                                              // 7989
    /**                                                                                                                // 7990
     * Dummy array-like object for virtual-repeat to iterate over. The length is the total                             // 7991
     * number of months that can be viewed. This is shorter than ideal because of (potential)                          // 7992
     * Firefox bug https://bugzilla.mozilla.org/show_bug.cgi?id=1181658.                                               // 7993
     */                                                                                                                // 7994
    this.items = {length: 2000};                                                                                       // 7995
                                                                                                                       // 7996
    if (this.maxDate && this.minDate) {                                                                                // 7997
      // Limit the number of months if min and max dates are set.                                                      // 7998
      var numMonths = $$mdDateUtil.getMonthDistance(this.minDate, this.maxDate) + 1;                                   // 7999
      numMonths = Math.max(numMonths, 1);                                                                              // 8000
      // Add an additional month as the final dummy month for rendering purposes.                                      // 8001
      numMonths += 1;                                                                                                  // 8002
      this.items.length = numMonths;                                                                                   // 8003
    }                                                                                                                  // 8004
                                                                                                                       // 8005
    /** @final {!angular.$animate} */                                                                                  // 8006
    this.$animate = $animate;                                                                                          // 8007
                                                                                                                       // 8008
    /** @final {!angular.$q} */                                                                                        // 8009
    this.$q = $q;                                                                                                      // 8010
                                                                                                                       // 8011
    /** @final */                                                                                                      // 8012
    this.$mdInkRipple = $mdInkRipple;                                                                                  // 8013
                                                                                                                       // 8014
    /** @final */                                                                                                      // 8015
    this.$mdUtil = $mdUtil;                                                                                            // 8016
                                                                                                                       // 8017
    /** @final */                                                                                                      // 8018
    this.keyCode = $mdConstant.KEY_CODE;                                                                               // 8019
                                                                                                                       // 8020
    /** @final */                                                                                                      // 8021
    this.dateUtil = $$mdDateUtil;                                                                                      // 8022
                                                                                                                       // 8023
    /** @final */                                                                                                      // 8024
    this.dateLocale = $mdDateLocale;                                                                                   // 8025
                                                                                                                       // 8026
    /** @final {!angular.JQLite} */                                                                                    // 8027
    this.$element = $element;                                                                                          // 8028
                                                                                                                       // 8029
    /** @final {!angular.Scope} */                                                                                     // 8030
    this.$scope = $scope;                                                                                              // 8031
                                                                                                                       // 8032
    /** @final {HTMLElement} */                                                                                        // 8033
    this.calendarElement = $element[0].querySelector('.md-calendar');                                                  // 8034
                                                                                                                       // 8035
    /** @final {HTMLElement} */                                                                                        // 8036
    this.calendarScroller = $element[0].querySelector('.md-virtual-repeat-scroller');                                  // 8037
                                                                                                                       // 8038
    /** @final {Date} */                                                                                               // 8039
    this.today = this.dateUtil.createDateAtMidnight();                                                                 // 8040
                                                                                                                       // 8041
    /** @type {Date} */                                                                                                // 8042
    this.firstRenderableDate = this.dateUtil.incrementMonths(this.today, -this.items.length / 2);                      // 8043
                                                                                                                       // 8044
    if (this.minDate && this.minDate > this.firstRenderableDate) {                                                     // 8045
      this.firstRenderableDate = this.minDate;                                                                         // 8046
    } else if (this.maxDate) {                                                                                         // 8047
      // Calculate the difference between the start date and max date.                                                 // 8048
      // Subtract 1 because it's an inclusive difference and 1 for the final dummy month.                              // 8049
      //                                                                                                               // 8050
      var monthDifference = this.items.length - 2;                                                                     // 8051
      this.firstRenderableDate = this.dateUtil.incrementMonths(this.maxDate, -(this.items.length - 2));                // 8052
    }                                                                                                                  // 8053
                                                                                                                       // 8054
                                                                                                                       // 8055
    /** @final {number} Unique ID for this calendar instance. */                                                       // 8056
    this.id = nextUniqueId++;                                                                                          // 8057
                                                                                                                       // 8058
    /** @type {!angular.NgModelController} */                                                                          // 8059
    this.ngModelCtrl = null;                                                                                           // 8060
                                                                                                                       // 8061
    /**                                                                                                                // 8062
     * The selected date. Keep track of this separately from the ng-model value so that we                             // 8063
     * can know, when the ng-model value changes, what the previous value was before it's updated                      // 8064
     * in the component's UI.                                                                                          // 8065
     *                                                                                                                 // 8066
     * @type {Date}                                                                                                    // 8067
     */                                                                                                                // 8068
    this.selectedDate = null;                                                                                          // 8069
                                                                                                                       // 8070
    /**                                                                                                                // 8071
     * The date that is currently focused or showing in the calendar. This will initially be set                       // 8072
     * to the ng-model value if set, otherwise to today. It will be updated as the user navigates                      // 8073
     * to other months. The cell corresponding to the displayDate does not necesarily always have                      // 8074
     * focus in the document (such as for cases when the user is scrolling the calendar).                              // 8075
     * @type {Date}                                                                                                    // 8076
     */                                                                                                                // 8077
    this.displayDate = null;                                                                                           // 8078
                                                                                                                       // 8079
    /**                                                                                                                // 8080
     * The date that has or should have focus.                                                                         // 8081
     * @type {Date}                                                                                                    // 8082
     */                                                                                                                // 8083
    this.focusDate = null;                                                                                             // 8084
                                                                                                                       // 8085
    /** @type {boolean} */                                                                                             // 8086
    this.isInitialized = false;                                                                                        // 8087
                                                                                                                       // 8088
    /** @type {boolean} */                                                                                             // 8089
    this.isMonthTransitionInProgress = false;                                                                          // 8090
                                                                                                                       // 8091
    // Unless the user specifies so, the calendar should not be a tab stop.                                            // 8092
    // This is necessary because ngAria might add a tabindex to anything with an ng-model                              // 8093
    // (based on whether or not the user has turned that particular feature on/off).                                   // 8094
    if (!$attrs['tabindex']) {                                                                                         // 8095
      $element.attr('tabindex', '-1');                                                                                 // 8096
    }                                                                                                                  // 8097
                                                                                                                       // 8098
    var self = this;                                                                                                   // 8099
                                                                                                                       // 8100
    /**                                                                                                                // 8101
     * Handles a click event on a date cell.                                                                           // 8102
     * Created here so that every cell can use the same function instance.                                             // 8103
     * @this {HTMLTableCellElement} The cell that was clicked.                                                         // 8104
     */                                                                                                                // 8105
    this.cellClickHandler = function() {                                                                               // 8106
      var cellElement = this;                                                                                          // 8107
      if (this.hasAttribute('data-timestamp')) {                                                                       // 8108
        $scope.$apply(function() {                                                                                     // 8109
          var timestamp = Number(cellElement.getAttribute('data-timestamp'));                                          // 8110
          self.setNgModelValue(self.dateUtil.createDateAtMidnight(timestamp));                                         // 8111
        });                                                                                                            // 8112
      }                                                                                                                // 8113
    };                                                                                                                 // 8114
                                                                                                                       // 8115
    this.attachCalendarEventListeners();                                                                               // 8116
  }                                                                                                                    // 8117
  CalendarCtrl.$inject = ["$element", "$attrs", "$scope", "$animate", "$q", "$mdConstant", "$mdTheming", "$$mdDateUtil", "$mdDateLocale", "$mdInkRipple", "$mdUtil"];
                                                                                                                       // 8119
                                                                                                                       // 8120
  /*** Initialization ***/                                                                                             // 8121
                                                                                                                       // 8122
  /**                                                                                                                  // 8123
   * Sets up the controller's reference to ngModelController.                                                          // 8124
   * @param {!angular.NgModelController} ngModelCtrl                                                                   // 8125
   */                                                                                                                  // 8126
  CalendarCtrl.prototype.configureNgModel = function(ngModelCtrl) {                                                    // 8127
    this.ngModelCtrl = ngModelCtrl;                                                                                    // 8128
                                                                                                                       // 8129
    var self = this;                                                                                                   // 8130
    ngModelCtrl.$render = function() {                                                                                 // 8131
      self.changeSelectedDate(self.ngModelCtrl.$viewValue);                                                            // 8132
    };                                                                                                                 // 8133
  };                                                                                                                   // 8134
                                                                                                                       // 8135
  /**                                                                                                                  // 8136
   * Initialize the calendar by building the months that are initially visible.                                        // 8137
   * Initialization should occur after the ngModel value is known.                                                     // 8138
   */                                                                                                                  // 8139
  CalendarCtrl.prototype.buildInitialCalendarDisplay = function() {                                                    // 8140
    this.buildWeekHeader();                                                                                            // 8141
    this.hideVerticalScrollbar();                                                                                      // 8142
                                                                                                                       // 8143
    this.displayDate = this.selectedDate || this.today;                                                                // 8144
    this.isInitialized = true;                                                                                         // 8145
  };                                                                                                                   // 8146
                                                                                                                       // 8147
  /**                                                                                                                  // 8148
   * Hides the vertical scrollbar on the calendar scroller by setting the width on the                                 // 8149
   * calendar scroller and the `overflow: hidden` wrapper around the scroller, and then setting                        // 8150
   * a padding-right on the scroller equal to the width of the browser's scrollbar.                                    // 8151
   *                                                                                                                   // 8152
   * This will cause a reflow.                                                                                         // 8153
   */                                                                                                                  // 8154
  CalendarCtrl.prototype.hideVerticalScrollbar = function() {                                                          // 8155
    var element = this.$element[0];                                                                                    // 8156
                                                                                                                       // 8157
    var scrollMask = element.querySelector('.md-calendar-scroll-mask');                                                // 8158
    var scroller = this.calendarScroller;                                                                              // 8159
                                                                                                                       // 8160
    var headerWidth = element.querySelector('.md-calendar-day-header').clientWidth;                                    // 8161
    var scrollbarWidth = scroller.offsetWidth - scroller.clientWidth;                                                  // 8162
                                                                                                                       // 8163
    scrollMask.style.width = headerWidth + 'px';                                                                       // 8164
    scroller.style.width = (headerWidth + scrollbarWidth) + 'px';                                                      // 8165
    scroller.style.paddingRight = scrollbarWidth + 'px';                                                               // 8166
  };                                                                                                                   // 8167
                                                                                                                       // 8168
                                                                                                                       // 8169
  /** Attach event listeners for the calendar. */                                                                      // 8170
  CalendarCtrl.prototype.attachCalendarEventListeners = function() {                                                   // 8171
    // Keyboard interaction.                                                                                           // 8172
    this.$element.on('keydown', angular.bind(this, this.handleKeyEvent));                                              // 8173
  };                                                                                                                   // 8174
                                                                                                                       // 8175
  /*** User input handling ***/                                                                                        // 8176
                                                                                                                       // 8177
  /**                                                                                                                  // 8178
   * Handles a key event in the calendar with the appropriate action. The action will either                           // 8179
   * be to select the focused date or to navigate to focus a new date.                                                 // 8180
   * @param {KeyboardEvent} event                                                                                      // 8181
   */                                                                                                                  // 8182
  CalendarCtrl.prototype.handleKeyEvent = function(event) {                                                            // 8183
    var self = this;                                                                                                   // 8184
    this.$scope.$apply(function() {                                                                                    // 8185
      // Capture escape and emit back up so that a wrapping component                                                  // 8186
      // (such as a date-picker) can decide to close.                                                                  // 8187
      if (event.which == self.keyCode.ESCAPE || event.which == self.keyCode.TAB) {                                     // 8188
        self.$scope.$emit('md-calendar-close');                                                                        // 8189
                                                                                                                       // 8190
        if (event.which == self.keyCode.TAB) {                                                                         // 8191
          event.preventDefault();                                                                                      // 8192
        }                                                                                                              // 8193
                                                                                                                       // 8194
        return;                                                                                                        // 8195
      }                                                                                                                // 8196
                                                                                                                       // 8197
      // Remaining key events fall into two categories: selection and navigation.                                      // 8198
      // Start by checking if this is a selection event.                                                               // 8199
      if (event.which === self.keyCode.ENTER) {                                                                        // 8200
        self.setNgModelValue(self.displayDate);                                                                        // 8201
        event.preventDefault();                                                                                        // 8202
        return;                                                                                                        // 8203
      }                                                                                                                // 8204
                                                                                                                       // 8205
      // Selection isn't occuring, so the key event is either navigation or nothing.                                   // 8206
      var date = self.getFocusDateFromKeyEvent(event);                                                                 // 8207
      if (date) {                                                                                                      // 8208
        date = self.boundDateByMinAndMax(date);                                                                        // 8209
        event.preventDefault();                                                                                        // 8210
        event.stopPropagation();                                                                                       // 8211
                                                                                                                       // 8212
        // Since this is a keyboard interaction, actually give the newly focused date keyboard                         // 8213
        // focus after the been brought into view.                                                                     // 8214
        self.changeDisplayDate(date).then(function () {                                                                // 8215
          self.focus(date);                                                                                            // 8216
        });                                                                                                            // 8217
      }                                                                                                                // 8218
    });                                                                                                                // 8219
  };                                                                                                                   // 8220
                                                                                                                       // 8221
  /**                                                                                                                  // 8222
   * Gets the date to focus as the result of a key event.                                                              // 8223
   * @param {KeyboardEvent} event                                                                                      // 8224
   * @returns {Date} Date to navigate to, or null if the key does not match a calendar shortcut.                       // 8225
   */                                                                                                                  // 8226
  CalendarCtrl.prototype.getFocusDateFromKeyEvent = function(event) {                                                  // 8227
    var dateUtil = this.dateUtil;                                                                                      // 8228
    var keyCode = this.keyCode;                                                                                        // 8229
                                                                                                                       // 8230
    switch (event.which) {                                                                                             // 8231
      case keyCode.RIGHT_ARROW: return dateUtil.incrementDays(this.displayDate, 1);                                    // 8232
      case keyCode.LEFT_ARROW: return dateUtil.incrementDays(this.displayDate, -1);                                    // 8233
      case keyCode.DOWN_ARROW:                                                                                         // 8234
        return event.metaKey ?                                                                                         // 8235
          dateUtil.incrementMonths(this.displayDate, 1) :                                                              // 8236
          dateUtil.incrementDays(this.displayDate, 7);                                                                 // 8237
      case keyCode.UP_ARROW:                                                                                           // 8238
        return event.metaKey ?                                                                                         // 8239
          dateUtil.incrementMonths(this.displayDate, -1) :                                                             // 8240
          dateUtil.incrementDays(this.displayDate, -7);                                                                // 8241
      case keyCode.PAGE_DOWN: return dateUtil.incrementMonths(this.displayDate, 1);                                    // 8242
      case keyCode.PAGE_UP: return dateUtil.incrementMonths(this.displayDate, -1);                                     // 8243
      case keyCode.HOME: return dateUtil.getFirstDateOfMonth(this.displayDate);                                        // 8244
      case keyCode.END: return dateUtil.getLastDateOfMonth(this.displayDate);                                          // 8245
      default: return null;                                                                                            // 8246
    }                                                                                                                  // 8247
  };                                                                                                                   // 8248
                                                                                                                       // 8249
  /**                                                                                                                  // 8250
   * Gets the "index" of the currently selected date as it would be in the virtual-repeat.                             // 8251
   * @returns {number}                                                                                                 // 8252
   */                                                                                                                  // 8253
  CalendarCtrl.prototype.getSelectedMonthIndex = function() {                                                          // 8254
    return this.dateUtil.getMonthDistance(this.firstRenderableDate,                                                    // 8255
        this.selectedDate || this.today);                                                                              // 8256
  };                                                                                                                   // 8257
                                                                                                                       // 8258
  /**                                                                                                                  // 8259
   * Scrolls to the month of the given date.                                                                           // 8260
   * @param {Date} date                                                                                                // 8261
   */                                                                                                                  // 8262
  CalendarCtrl.prototype.scrollToMonth = function(date) {                                                              // 8263
    if (!this.dateUtil.isValidDate(date)) {                                                                            // 8264
      return;                                                                                                          // 8265
    }                                                                                                                  // 8266
                                                                                                                       // 8267
    var monthDistance = this.dateUtil.getMonthDistance(this.firstRenderableDate, date);                                // 8268
    this.calendarScroller.scrollTop = monthDistance * TBODY_HEIGHT;                                                    // 8269
  };                                                                                                                   // 8270
                                                                                                                       // 8271
  /**                                                                                                                  // 8272
   * Sets the ng-model value for the calendar and emits a change event.                                                // 8273
   * @param {Date} date                                                                                                // 8274
   */                                                                                                                  // 8275
  CalendarCtrl.prototype.setNgModelValue = function(date) {                                                            // 8276
    this.$scope.$emit('md-calendar-change', date);                                                                     // 8277
    this.ngModelCtrl.$setViewValue(date);                                                                              // 8278
    this.ngModelCtrl.$render();                                                                                        // 8279
  };                                                                                                                   // 8280
                                                                                                                       // 8281
  /**                                                                                                                  // 8282
   * Focus the cell corresponding to the given date.                                                                   // 8283
   * @param {Date=} opt_date                                                                                           // 8284
   */                                                                                                                  // 8285
  CalendarCtrl.prototype.focus = function(opt_date) {                                                                  // 8286
    var date = opt_date || this.selectedDate || this.today;                                                            // 8287
                                                                                                                       // 8288
    var previousFocus = this.calendarElement.querySelector('.md-focus');                                               // 8289
    if (previousFocus) {                                                                                               // 8290
      previousFocus.classList.remove(FOCUSED_DATE_CLASS);                                                              // 8291
    }                                                                                                                  // 8292
                                                                                                                       // 8293
    var cellId = this.getDateId(date);                                                                                 // 8294
    var cell = document.getElementById(cellId);                                                                        // 8295
    if (cell) {                                                                                                        // 8296
      cell.classList.add(FOCUSED_DATE_CLASS);                                                                          // 8297
      cell.focus();                                                                                                    // 8298
    } else {                                                                                                           // 8299
      this.focusDate = date;                                                                                           // 8300
    }                                                                                                                  // 8301
  };                                                                                                                   // 8302
                                                                                                                       // 8303
  /**                                                                                                                  // 8304
   * If a date exceeds minDate or maxDate, returns date matching minDate or maxDate, respectively.                     // 8305
   * Otherwise, returns the date.                                                                                      // 8306
   * @param {Date} date                                                                                                // 8307
   * @return {Date}                                                                                                    // 8308
   */                                                                                                                  // 8309
  CalendarCtrl.prototype.boundDateByMinAndMax = function(date) {                                                       // 8310
    var boundDate = date;                                                                                              // 8311
    if (this.minDate && date < this.minDate) {                                                                         // 8312
      boundDate = new Date(this.minDate.getTime());                                                                    // 8313
    }                                                                                                                  // 8314
    if (this.maxDate && date > this.maxDate) {                                                                         // 8315
      boundDate = new Date(this.maxDate.getTime());                                                                    // 8316
    }                                                                                                                  // 8317
    return boundDate;                                                                                                  // 8318
  };                                                                                                                   // 8319
                                                                                                                       // 8320
  /*** Updating the displayed / selected date ***/                                                                     // 8321
                                                                                                                       // 8322
  /**                                                                                                                  // 8323
   * Change the selected date in the calendar (ngModel value has already been changed).                                // 8324
   * @param {Date} date                                                                                                // 8325
   */                                                                                                                  // 8326
  CalendarCtrl.prototype.changeSelectedDate = function(date) {                                                         // 8327
    var self = this;                                                                                                   // 8328
    var previousSelectedDate = this.selectedDate;                                                                      // 8329
    this.selectedDate = date;                                                                                          // 8330
    this.changeDisplayDate(date).then(function() {                                                                     // 8331
                                                                                                                       // 8332
      // Remove the selected class from the previously selected date, if any.                                          // 8333
      if (previousSelectedDate) {                                                                                      // 8334
        var prevDateCell =                                                                                             // 8335
            document.getElementById(self.getDateId(previousSelectedDate));                                             // 8336
        if (prevDateCell) {                                                                                            // 8337
          prevDateCell.classList.remove(SELECTED_DATE_CLASS);                                                          // 8338
          prevDateCell.setAttribute('aria-selected', 'false');                                                         // 8339
        }                                                                                                              // 8340
      }                                                                                                                // 8341
                                                                                                                       // 8342
      // Apply the select class to the new selected date if it is set.                                                 // 8343
      if (date) {                                                                                                      // 8344
        var dateCell = document.getElementById(self.getDateId(date));                                                  // 8345
        if (dateCell) {                                                                                                // 8346
          dateCell.classList.add(SELECTED_DATE_CLASS);                                                                 // 8347
          dateCell.setAttribute('aria-selected', 'true');                                                              // 8348
        }                                                                                                              // 8349
      }                                                                                                                // 8350
    });                                                                                                                // 8351
  };                                                                                                                   // 8352
                                                                                                                       // 8353
                                                                                                                       // 8354
  /**                                                                                                                  // 8355
   * Change the date that is being shown in the calendar. If the given date is in a different                          // 8356
   * month, the displayed month will be transitioned.                                                                  // 8357
   * @param {Date} date                                                                                                // 8358
   */                                                                                                                  // 8359
  CalendarCtrl.prototype.changeDisplayDate = function(date) {                                                          // 8360
    // Initialization is deferred until this function is called because we want to reflect                             // 8361
    // the starting value of ngModel.                                                                                  // 8362
    if (!this.isInitialized) {                                                                                         // 8363
      this.buildInitialCalendarDisplay();                                                                              // 8364
      return this.$q.when();                                                                                           // 8365
    }                                                                                                                  // 8366
                                                                                                                       // 8367
    // If trying to show an invalid date or a transition is in progress, do nothing.                                   // 8368
    if (!this.dateUtil.isValidDate(date) || this.isMonthTransitionInProgress) {                                        // 8369
      return this.$q.when();                                                                                           // 8370
    }                                                                                                                  // 8371
                                                                                                                       // 8372
    this.isMonthTransitionInProgress = true;                                                                           // 8373
    var animationPromise = this.animateDateChange(date);                                                               // 8374
                                                                                                                       // 8375
    this.displayDate = date;                                                                                           // 8376
                                                                                                                       // 8377
    var self = this;                                                                                                   // 8378
    animationPromise.then(function() {                                                                                 // 8379
      self.isMonthTransitionInProgress = false;                                                                        // 8380
    });                                                                                                                // 8381
                                                                                                                       // 8382
    return animationPromise;                                                                                           // 8383
  };                                                                                                                   // 8384
                                                                                                                       // 8385
  /**                                                                                                                  // 8386
   * Animates the transition from the calendar's current month to the given month.                                     // 8387
   * @param {Date} date                                                                                                // 8388
   * @returns {angular.$q.Promise} The animation promise.                                                              // 8389
   */                                                                                                                  // 8390
  CalendarCtrl.prototype.animateDateChange = function(date) {                                                          // 8391
    this.scrollToMonth(date);                                                                                          // 8392
    return this.$q.when();                                                                                             // 8393
  };                                                                                                                   // 8394
                                                                                                                       // 8395
  /*** Constructing the calendar table ***/                                                                            // 8396
                                                                                                                       // 8397
  /**                                                                                                                  // 8398
   * Builds and appends a day-of-the-week header to the calendar.                                                      // 8399
   * This should only need to be called once during initialization.                                                    // 8400
   */                                                                                                                  // 8401
  CalendarCtrl.prototype.buildWeekHeader = function() {                                                                // 8402
    var firstDayOfWeek = this.dateLocale.firstDayOfWeek;                                                               // 8403
    var shortDays = this.dateLocale.shortDays;                                                                         // 8404
                                                                                                                       // 8405
    var row = document.createElement('tr');                                                                            // 8406
    for (var i = 0; i < 7; i++) {                                                                                      // 8407
      var th = document.createElement('th');                                                                           // 8408
      th.textContent = shortDays[(i + firstDayOfWeek) % 7];                                                            // 8409
      row.appendChild(th);                                                                                             // 8410
    }                                                                                                                  // 8411
                                                                                                                       // 8412
    this.$element.find('thead').append(row);                                                                           // 8413
  };                                                                                                                   // 8414
                                                                                                                       // 8415
    /**                                                                                                                // 8416
   * Gets an identifier for a date unique to the calendar instance for internal                                        // 8417
   * purposes. Not to be displayed.                                                                                    // 8418
   * @param {Date} date                                                                                                // 8419
   * @returns {string}                                                                                                 // 8420
   */                                                                                                                  // 8421
  CalendarCtrl.prototype.getDateId = function(date) {                                                                  // 8422
    return [                                                                                                           // 8423
      'md',                                                                                                            // 8424
      this.id,                                                                                                         // 8425
      date.getFullYear(),                                                                                              // 8426
      date.getMonth(),                                                                                                 // 8427
      date.getDate()                                                                                                   // 8428
    ].join('-');                                                                                                       // 8429
  };                                                                                                                   // 8430
})();                                                                                                                  // 8431
                                                                                                                       // 8432
})();                                                                                                                  // 8433
(function(){                                                                                                           // 8434
"use strict";                                                                                                          // 8435
                                                                                                                       // 8436
(function() {                                                                                                          // 8437
  'use strict';                                                                                                        // 8438
                                                                                                                       // 8439
                                                                                                                       // 8440
  angular.module('material.components.datepicker')                                                                     // 8441
      .directive('mdCalendarMonth', mdCalendarMonthDirective);                                                         // 8442
                                                                                                                       // 8443
                                                                                                                       // 8444
  /**                                                                                                                  // 8445
   * Private directive consumed by md-calendar. Having this directive lets the calender use                            // 8446
   * md-virtual-repeat and also cleanly separates the month DOM construction functions from                            // 8447
   * the rest of the calendar controller logic.                                                                        // 8448
   */                                                                                                                  // 8449
  function mdCalendarMonthDirective() {                                                                                // 8450
    return {                                                                                                           // 8451
      require: ['^^mdCalendar', 'mdCalendarMonth'],                                                                    // 8452
      scope: {offset: '=mdMonthOffset'},                                                                               // 8453
      controller: CalendarMonthCtrl,                                                                                   // 8454
      controllerAs: 'mdMonthCtrl',                                                                                     // 8455
      bindToController: true,                                                                                          // 8456
      link: function(scope, element, attrs, controllers) {                                                             // 8457
        var calendarCtrl = controllers[0];                                                                             // 8458
        var monthCtrl = controllers[1];                                                                                // 8459
                                                                                                                       // 8460
        monthCtrl.calendarCtrl = calendarCtrl;                                                                         // 8461
        monthCtrl.generateContent();                                                                                   // 8462
                                                                                                                       // 8463
        // The virtual-repeat re-uses the same DOM elements, so there are only a limited number                        // 8464
        // of repeated items that are linked, and then those elements have their bindings updataed.                    // 8465
        // Since the months are not generated by bindings, we simply regenerate the entire thing                       // 8466
        // when the binding (offset) changes.                                                                          // 8467
        scope.$watch(function() { return monthCtrl.offset; }, function(offset, oldOffset) {                            // 8468
          if (offset != oldOffset) {                                                                                   // 8469
            monthCtrl.generateContent();                                                                               // 8470
          }                                                                                                            // 8471
        });                                                                                                            // 8472
      }                                                                                                                // 8473
    };                                                                                                                 // 8474
  }                                                                                                                    // 8475
                                                                                                                       // 8476
  /** Class applied to the cell for today. */                                                                          // 8477
  var TODAY_CLASS = 'md-calendar-date-today';                                                                          // 8478
                                                                                                                       // 8479
  /** Class applied to the selected date cell/. */                                                                     // 8480
  var SELECTED_DATE_CLASS = 'md-calendar-selected-date';                                                               // 8481
                                                                                                                       // 8482
  /** Class applied to the focused date cell/. */                                                                      // 8483
  var FOCUSED_DATE_CLASS = 'md-focus';                                                                                 // 8484
                                                                                                                       // 8485
  /**                                                                                                                  // 8486
   * Controller for a single calendar month.                                                                           // 8487
   * @ngInject @constructor                                                                                            // 8488
   */                                                                                                                  // 8489
  function CalendarMonthCtrl($element, $$mdDateUtil, $mdDateLocale) {                                                  // 8490
    this.dateUtil = $$mdDateUtil;                                                                                      // 8491
    this.dateLocale = $mdDateLocale;                                                                                   // 8492
    this.$element = $element;                                                                                          // 8493
    this.calendarCtrl = null;                                                                                          // 8494
                                                                                                                       // 8495
    /**                                                                                                                // 8496
     * Number of months from the start of the month "items" that the currently rendered month                          // 8497
     * occurs. Set via angular data binding.                                                                           // 8498
     * @type {number}                                                                                                  // 8499
     */                                                                                                                // 8500
    this.offset;                                                                                                       // 8501
                                                                                                                       // 8502
    /**                                                                                                                // 8503
     * Date cell to focus after appending the month to the document.                                                   // 8504
     * @type {HTMLElement}                                                                                             // 8505
     */                                                                                                                // 8506
    this.focusAfterAppend = null;                                                                                      // 8507
  }                                                                                                                    // 8508
  CalendarMonthCtrl.$inject = ["$element", "$$mdDateUtil", "$mdDateLocale"];                                           // 8509
                                                                                                                       // 8510
  /** Generate and append the content for this month to the directive element. */                                      // 8511
  CalendarMonthCtrl.prototype.generateContent = function() {                                                           // 8512
    var calendarCtrl = this.calendarCtrl;                                                                              // 8513
    var date = this.dateUtil.incrementMonths(calendarCtrl.firstRenderableDate, this.offset);                           // 8514
                                                                                                                       // 8515
    this.$element.empty();                                                                                             // 8516
    this.$element.append(this.buildCalendarForMonth(date));                                                            // 8517
                                                                                                                       // 8518
    if (this.focusAfterAppend) {                                                                                       // 8519
      this.focusAfterAppend.classList.add(FOCUSED_DATE_CLASS);                                                         // 8520
      this.focusAfterAppend.focus();                                                                                   // 8521
      this.focusAfterAppend = null;                                                                                    // 8522
    }                                                                                                                  // 8523
  };                                                                                                                   // 8524
                                                                                                                       // 8525
  /**                                                                                                                  // 8526
   * Creates a single cell to contain a date in the calendar with all appropriate                                      // 8527
   * attributes and classes added. If a date is given, the cell content will be set                                    // 8528
   * based on the date.                                                                                                // 8529
   * @param {Date=} opt_date                                                                                           // 8530
   * @returns {HTMLElement}                                                                                            // 8531
   */                                                                                                                  // 8532
  CalendarMonthCtrl.prototype.buildDateCell = function(opt_date) {                                                     // 8533
    var calendarCtrl = this.calendarCtrl;                                                                              // 8534
                                                                                                                       // 8535
    // TODO(jelbourn): cloneNode is likely a faster way of doing this.                                                 // 8536
    var cell = document.createElement('td');                                                                           // 8537
    cell.tabIndex = -1;                                                                                                // 8538
    cell.classList.add('md-calendar-date');                                                                            // 8539
    cell.setAttribute('role', 'gridcell');                                                                             // 8540
                                                                                                                       // 8541
    if (opt_date) {                                                                                                    // 8542
      cell.setAttribute('tabindex', '-1');                                                                             // 8543
      cell.setAttribute('aria-label', this.dateLocale.longDateFormatter(opt_date));                                    // 8544
      cell.id = calendarCtrl.getDateId(opt_date);                                                                      // 8545
                                                                                                                       // 8546
      // Use `data-timestamp` attribute because IE10 does not support the `dataset` property.                          // 8547
      cell.setAttribute('data-timestamp', opt_date.getTime());                                                         // 8548
                                                                                                                       // 8549
      // TODO(jelourn): Doing these comparisons for class addition during generation might be slow.                    // 8550
      // It may be better to finish the construction and then query the node and add the class.                        // 8551
      if (this.dateUtil.isSameDay(opt_date, calendarCtrl.today)) {                                                     // 8552
        cell.classList.add(TODAY_CLASS);                                                                               // 8553
      }                                                                                                                // 8554
                                                                                                                       // 8555
      if (this.dateUtil.isValidDate(calendarCtrl.selectedDate) &&                                                      // 8556
          this.dateUtil.isSameDay(opt_date, calendarCtrl.selectedDate)) {                                              // 8557
        cell.classList.add(SELECTED_DATE_CLASS);                                                                       // 8558
        cell.setAttribute('aria-selected', 'true');                                                                    // 8559
      }                                                                                                                // 8560
                                                                                                                       // 8561
      var cellText = this.dateLocale.dates[opt_date.getDate()];                                                        // 8562
                                                                                                                       // 8563
      if (this.isDateEnabled(opt_date)) {                                                                              // 8564
        // Add a indicator for select, hover, and focus states.                                                        // 8565
        var selectionIndicator = document.createElement('span');                                                       // 8566
        cell.appendChild(selectionIndicator);                                                                          // 8567
        selectionIndicator.classList.add('md-calendar-date-selection-indicator');                                      // 8568
        selectionIndicator.textContent = cellText;                                                                     // 8569
                                                                                                                       // 8570
        cell.addEventListener('click', calendarCtrl.cellClickHandler);                                                 // 8571
                                                                                                                       // 8572
        if (calendarCtrl.focusDate && this.dateUtil.isSameDay(opt_date, calendarCtrl.focusDate)) {                     // 8573
          this.focusAfterAppend = cell;                                                                                // 8574
        }                                                                                                              // 8575
      } else {                                                                                                         // 8576
        cell.classList.add('md-calendar-date-disabled');                                                               // 8577
        cell.textContent = cellText;                                                                                   // 8578
      }                                                                                                                // 8579
    }                                                                                                                  // 8580
                                                                                                                       // 8581
    return cell;                                                                                                       // 8582
  };                                                                                                                   // 8583
                                                                                                                       // 8584
  /**                                                                                                                  // 8585
   * Check whether date is in range and enabled                                                                        // 8586
   * @param {Date=} opt_date                                                                                           // 8587
   * @return {boolean} Whether the date is enabled.                                                                    // 8588
   */                                                                                                                  // 8589
  CalendarMonthCtrl.prototype.isDateEnabled = function(opt_date) {                                                     // 8590
    return this.dateUtil.isDateWithinRange(opt_date,                                                                   // 8591
          this.calendarCtrl.minDate, this.calendarCtrl.maxDate) &&                                                     // 8592
          (!angular.isFunction(this.calendarCtrl.dateFilter)                                                           // 8593
           || this.calendarCtrl.dateFilter(opt_date));                                                                 // 8594
  }                                                                                                                    // 8595
                                                                                                                       // 8596
  /**                                                                                                                  // 8597
   * Builds a `tr` element for the calendar grid.                                                                      // 8598
   * @param rowNumber The week number within the month.                                                                // 8599
   * @returns {HTMLElement}                                                                                            // 8600
   */                                                                                                                  // 8601
  CalendarMonthCtrl.prototype.buildDateRow = function(rowNumber) {                                                     // 8602
    var row = document.createElement('tr');                                                                            // 8603
    row.setAttribute('role', 'row');                                                                                   // 8604
                                                                                                                       // 8605
    // Because of an NVDA bug (with Firefox), the row needs an aria-label in order                                     // 8606
    // to prevent the entire row being read aloud when the user moves between rows.                                    // 8607
    // See http://community.nvda-project.org/ticket/4643.                                                              // 8608
    row.setAttribute('aria-label', this.dateLocale.weekNumberFormatter(rowNumber));                                    // 8609
                                                                                                                       // 8610
    return row;                                                                                                        // 8611
  };                                                                                                                   // 8612
                                                                                                                       // 8613
  /**                                                                                                                  // 8614
   * Builds the <tbody> content for the given date's month.                                                            // 8615
   * @param {Date=} opt_dateInMonth                                                                                    // 8616
   * @returns {DocumentFragment} A document fragment containing the <tr> elements.                                     // 8617
   */                                                                                                                  // 8618
  CalendarMonthCtrl.prototype.buildCalendarForMonth = function(opt_dateInMonth) {                                      // 8619
    var date = this.dateUtil.isValidDate(opt_dateInMonth) ? opt_dateInMonth : new Date();                              // 8620
                                                                                                                       // 8621
    var firstDayOfMonth = this.dateUtil.getFirstDateOfMonth(date);                                                     // 8622
    var firstDayOfTheWeek = this.getLocaleDay_(firstDayOfMonth);                                                       // 8623
    var numberOfDaysInMonth = this.dateUtil.getNumberOfDaysInMonth(date);                                              // 8624
                                                                                                                       // 8625
    // Store rows for the month in a document fragment so that we can append them all at once.                         // 8626
    var monthBody = document.createDocumentFragment();                                                                 // 8627
                                                                                                                       // 8628
    var rowNumber = 1;                                                                                                 // 8629
    var row = this.buildDateRow(rowNumber);                                                                            // 8630
    monthBody.appendChild(row);                                                                                        // 8631
                                                                                                                       // 8632
    // If this is the final month in the list of items, only the first week should render,                             // 8633
    // so we should return immediately after the first row is complete and has been                                    // 8634
    // attached to the body.                                                                                           // 8635
    var isFinalMonth = this.offset === this.calendarCtrl.items.length - 1;                                             // 8636
                                                                                                                       // 8637
    // Add a label for the month. If the month starts on a Sun/Mon/Tues, the month label                               // 8638
    // goes on a row above the first of the month. Otherwise, the month label takes up the first                       // 8639
    // two cells of the first row.                                                                                     // 8640
    var blankCellOffset = 0;                                                                                           // 8641
    var monthLabelCell = document.createElement('td');                                                                 // 8642
    monthLabelCell.classList.add('md-calendar-month-label');                                                           // 8643
    // If the entire month is after the max date, render the label as a disabled state.                                // 8644
    if (this.calendarCtrl.maxDate && firstDayOfMonth > this.calendarCtrl.maxDate) {                                    // 8645
      monthLabelCell.classList.add('md-calendar-month-label-disabled');                                                // 8646
    }                                                                                                                  // 8647
    monthLabelCell.textContent = this.dateLocale.monthHeaderFormatter(date);                                           // 8648
    if (firstDayOfTheWeek <= 2) {                                                                                      // 8649
      monthLabelCell.setAttribute('colspan', '7');                                                                     // 8650
                                                                                                                       // 8651
      var monthLabelRow = this.buildDateRow();                                                                         // 8652
      monthLabelRow.appendChild(monthLabelCell);                                                                       // 8653
      monthBody.insertBefore(monthLabelRow, row);                                                                      // 8654
                                                                                                                       // 8655
      if (isFinalMonth) {                                                                                              // 8656
        return monthBody;                                                                                              // 8657
      }                                                                                                                // 8658
    } else {                                                                                                           // 8659
      blankCellOffset = 2;                                                                                             // 8660
      monthLabelCell.setAttribute('colspan', '2');                                                                     // 8661
      row.appendChild(monthLabelCell);                                                                                 // 8662
    }                                                                                                                  // 8663
                                                                                                                       // 8664
    // Add a blank cell for each day of the week that occurs before the first of the month.                            // 8665
    // For example, if the first day of the month is a Tuesday, add blank cells for Sun and Mon.                       // 8666
    // The blankCellOffset is needed in cases where the first N cells are used by the month label.                     // 8667
    for (var i = blankCellOffset; i < firstDayOfTheWeek; i++) {                                                        // 8668
      row.appendChild(this.buildDateCell());                                                                           // 8669
    }                                                                                                                  // 8670
                                                                                                                       // 8671
    // Add a cell for each day of the month, keeping track of the day of the week so that                              // 8672
    // we know when to start a new row.                                                                                // 8673
    var dayOfWeek = firstDayOfTheWeek;                                                                                 // 8674
    var iterationDate = firstDayOfMonth;                                                                               // 8675
    for (var d = 1; d <= numberOfDaysInMonth; d++) {                                                                   // 8676
      // If we've reached the end of the week, start a new row.                                                        // 8677
      if (dayOfWeek === 7) {                                                                                           // 8678
        // We've finished the first row, so we're done if this is the final month.                                     // 8679
        if (isFinalMonth) {                                                                                            // 8680
          return monthBody;                                                                                            // 8681
        }                                                                                                              // 8682
        dayOfWeek = 0;                                                                                                 // 8683
        rowNumber++;                                                                                                   // 8684
        row = this.buildDateRow(rowNumber);                                                                            // 8685
        monthBody.appendChild(row);                                                                                    // 8686
      }                                                                                                                // 8687
                                                                                                                       // 8688
      iterationDate.setDate(d);                                                                                        // 8689
      var cell = this.buildDateCell(iterationDate);                                                                    // 8690
      row.appendChild(cell);                                                                                           // 8691
                                                                                                                       // 8692
      dayOfWeek++;                                                                                                     // 8693
    }                                                                                                                  // 8694
                                                                                                                       // 8695
    // Ensure that the last row of the month has 7 cells.                                                              // 8696
    while (row.childNodes.length < 7) {                                                                                // 8697
      row.appendChild(this.buildDateCell());                                                                           // 8698
    }                                                                                                                  // 8699
                                                                                                                       // 8700
    // Ensure that all months have 6 rows. This is necessary for now because the virtual-repeat                        // 8701
    // requires that all items have exactly the same height.                                                           // 8702
    while (monthBody.childNodes.length < 6) {                                                                          // 8703
      var whitespaceRow = this.buildDateRow();                                                                         // 8704
      for (var i = 0; i < 7; i++) {                                                                                    // 8705
        whitespaceRow.appendChild(this.buildDateCell());                                                               // 8706
      }                                                                                                                // 8707
      monthBody.appendChild(whitespaceRow);                                                                            // 8708
    }                                                                                                                  // 8709
                                                                                                                       // 8710
    return monthBody;                                                                                                  // 8711
  };                                                                                                                   // 8712
                                                                                                                       // 8713
  /**                                                                                                                  // 8714
   * Gets the day-of-the-week index for a date for the current locale.                                                 // 8715
   * @private                                                                                                          // 8716
   * @param {Date} date                                                                                                // 8717
   * @returns {number} The column index of the date in the calendar.                                                   // 8718
   */                                                                                                                  // 8719
  CalendarMonthCtrl.prototype.getLocaleDay_ = function(date) {                                                         // 8720
    return (date.getDay() + (7 - this.dateLocale.firstDayOfWeek)) % 7                                                  // 8721
  };                                                                                                                   // 8722
})();                                                                                                                  // 8723
                                                                                                                       // 8724
})();                                                                                                                  // 8725
(function(){                                                                                                           // 8726
"use strict";                                                                                                          // 8727
                                                                                                                       // 8728
(function() {                                                                                                          // 8729
  'use strict';                                                                                                        // 8730
                                                                                                                       // 8731
  /**                                                                                                                  // 8732
   * @ngdoc service                                                                                                    // 8733
   * @name $mdDateLocaleProvider                                                                                       // 8734
   * @module material.components.datepicker                                                                            // 8735
   *                                                                                                                   // 8736
   * @description                                                                                                      // 8737
   * The `$mdDateLocaleProvider` is the provider that creates the `$mdDateLocale` service.                             // 8738
   * This provider that allows the user to specify messages, formatters, and parsers for date                          // 8739
   * internationalization. The `$mdDateLocale` service itself is consumed by Angular Material                          // 8740
   * components that deal with dates.                                                                                  // 8741
   *                                                                                                                   // 8742
   * @property {(Array<string>)=} months Array of month names (in order).                                              // 8743
   * @property {(Array<string>)=} shortMonths Array of abbreviated month names.                                        // 8744
   * @property {(Array<string>)=} days Array of the days of the week (in order).                                       // 8745
   * @property {(Array<string>)=} shortDays Array of abbreviated dayes of the week.                                    // 8746
   * @property {(Array<string>)=} dates Array of dates of the month. Only necessary for locales                        // 8747
   *     using a numeral system other than [1, 2, 3...].                                                               // 8748
   * @property {(Array<string>)=} firstDayOfWeek The first day of the week. Sunday = 0, Monday = 1,                    // 8749
   *    etc.                                                                                                           // 8750
   * @property {(function(string): Date)=} parseDate Function to parse a date object from a string.                    // 8751
   * @property {(function(Date): string)=} formatDate Function to format a date object to a string.                    // 8752
   * @property {(function(Date): string)=} monthHeaderFormatter Function that returns the label for                    // 8753
   *     a month given a date.                                                                                         // 8754
   * @property {(function(number): string)=} weekNumberFormatter Function that returns a label for                     // 8755
   *     a week given the week number.                                                                                 // 8756
   * @property {(string)=} msgCalendar Translation of the label "Calendar" for the current locale.                     // 8757
   * @property {(string)=} msgOpenCalendar Translation of the button label "Open calendar" for the                     // 8758
   *     current locale.                                                                                               // 8759
   *                                                                                                                   // 8760
   * @usage                                                                                                            // 8761
   * <hljs lang="js">                                                                                                  // 8762
   *   myAppModule.config(function($mdDateLocaleProvider) {                                                            // 8763
   *                                                                                                                   // 8764
   *     // Example of a French localization.                                                                          // 8765
   *     $mdDateLocaleProvider.months = ['janvier', 'février', 'mars', ...];                                           // 8766
   *     $mdDateLocaleProvider.shortMonths = ['janv', 'févr', 'mars', ...];                                            // 8767
   *     $mdDateLocaleProvider.days = ['dimanche', 'lundi', 'mardi', ...];                                             // 8768
   *     $mdDateLocaleProvider.shortDays = ['Di', 'Lu', 'Ma', ...];                                                    // 8769
   *                                                                                                                   // 8770
   *     // Can change week display to start on Monday.                                                                // 8771
   *     $mdDateLocaleProvider.firstDayOfWeek = 1;                                                                     // 8772
   *                                                                                                                   // 8773
   *     // Optional.                                                                                                  // 8774
   *     $mdDateLocaleProvider.dates = [1, 2, 3, 4, 5, 6, ...];                                                        // 8775
   *                                                                                                                   // 8776
   *     // Example uses moment.js to parse and format dates.                                                          // 8777
   *     $mdDateLocaleProvider.parseDate = function(dateString) {                                                      // 8778
   *       var m = moment(dateString, 'L', true);                                                                      // 8779
   *       return m.isValid() ? m.toDate() : new Date(NaN);                                                            // 8780
   *     };                                                                                                            // 8781
   *                                                                                                                   // 8782
   *     $mdDateLocaleProvider.formatDate = function(date) {                                                           // 8783
   *       return moment(date).format('L');                                                                            // 8784
   *     };                                                                                                            // 8785
   *                                                                                                                   // 8786
   *     $mdDateLocaleProvider.monthHeaderFormatter = function(date) {                                                 // 8787
   *       return myShortMonths[date.getMonth()] + ' ' + date.getFullYear();                                           // 8788
   *     };                                                                                                            // 8789
   *                                                                                                                   // 8790
   *     // In addition to date display, date components also need localized messages                                  // 8791
   *     // for aria-labels for screen-reader users.                                                                   // 8792
   *                                                                                                                   // 8793
   *     $mdDateLocaleProvider.weekNumberFormatter = function(weekNumber) {                                            // 8794
   *       return 'Semaine ' + weekNumber;                                                                             // 8795
   *     };                                                                                                            // 8796
   *                                                                                                                   // 8797
   *     $mdDateLocaleProvider.msgCalendar = 'Calendrier';                                                             // 8798
   *     $mdDateLocaleProvider.msgOpenCalendar = 'Ouvrir le calendrier';                                               // 8799
   *                                                                                                                   // 8800
   * });                                                                                                               // 8801
   * </hljs>                                                                                                           // 8802
   *                                                                                                                   // 8803
   */                                                                                                                  // 8804
                                                                                                                       // 8805
  angular.module('material.components.datepicker').config(["$provide", function($provide) {                            // 8806
    // TODO(jelbourn): Assert provided values are correctly formatted. Need assertions.                                // 8807
                                                                                                                       // 8808
    /** @constructor */                                                                                                // 8809
    function DateLocaleProvider() {                                                                                    // 8810
      /** Array of full month names. E.g., ['January', 'Febuary', ...] */                                              // 8811
      this.months = null;                                                                                              // 8812
                                                                                                                       // 8813
      /** Array of abbreviated month names. E.g., ['Jan', 'Feb', ...] */                                               // 8814
      this.shortMonths = null;                                                                                         // 8815
                                                                                                                       // 8816
      /** Array of full day of the week names. E.g., ['Monday', 'Tuesday', ...] */                                     // 8817
      this.days = null;                                                                                                // 8818
                                                                                                                       // 8819
      /** Array of abbreviated dat of the week names. E.g., ['M', 'T', ...] */                                         // 8820
      this.shortDays = null;                                                                                           // 8821
                                                                                                                       // 8822
      /** Array of dates of a month (1 - 31). Characters might be different in some locales. */                        // 8823
      this.dates = null;                                                                                               // 8824
                                                                                                                       // 8825
      /** Index of the first day of the week. 0 = Sunday, 1 = Monday, etc. */                                          // 8826
      this.firstDayOfWeek = 0;                                                                                         // 8827
                                                                                                                       // 8828
      /**                                                                                                              // 8829
       * Function that converts the date portion of a Date to a string.                                                // 8830
       * @type {(function(Date): string)}                                                                              // 8831
       */                                                                                                              // 8832
      this.formatDate = null;                                                                                          // 8833
                                                                                                                       // 8834
      /**                                                                                                              // 8835
       * Function that converts a date string to a Date object (the date portion)                                      // 8836
       * @type {function(string): Date}                                                                                // 8837
       */                                                                                                              // 8838
      this.parseDate = null;                                                                                           // 8839
                                                                                                                       // 8840
      /**                                                                                                              // 8841
       * Function that formats a Date into a month header string.                                                      // 8842
       * @type {function(Date): string}                                                                                // 8843
       */                                                                                                              // 8844
      this.monthHeaderFormatter = null;                                                                                // 8845
                                                                                                                       // 8846
      /**                                                                                                              // 8847
       * Function that formats a week number into a label for the week.                                                // 8848
       * @type {function(number): string}                                                                              // 8849
       */                                                                                                              // 8850
      this.weekNumberFormatter = null;                                                                                 // 8851
                                                                                                                       // 8852
      /**                                                                                                              // 8853
       * Function that formats a date into a long aria-label that is read                                              // 8854
       * when the focused date changes.                                                                                // 8855
       * @type {function(Date): string}                                                                                // 8856
       */                                                                                                              // 8857
      this.longDateFormatter = null;                                                                                   // 8858
                                                                                                                       // 8859
      /**                                                                                                              // 8860
       * ARIA label for the calendar "dialog" used in the datepicker.                                                  // 8861
       * @type {string}                                                                                                // 8862
       */                                                                                                              // 8863
      this.msgCalendar = '';                                                                                           // 8864
                                                                                                                       // 8865
      /**                                                                                                              // 8866
       * ARIA label for the datepicker's "Open calendar" buttons.                                                      // 8867
       * @type {string}                                                                                                // 8868
       */                                                                                                              // 8869
      this.msgOpenCalendar = '';                                                                                       // 8870
    }                                                                                                                  // 8871
                                                                                                                       // 8872
    /**                                                                                                                // 8873
     * Factory function that returns an instance of the dateLocale service.                                            // 8874
     * @ngInject                                                                                                       // 8875
     * @param $locale                                                                                                  // 8876
     * @returns {DateLocale}                                                                                           // 8877
     */                                                                                                                // 8878
    DateLocaleProvider.prototype.$get = function($locale) {                                                            // 8879
      /**                                                                                                              // 8880
       * Default date-to-string formatting function.                                                                   // 8881
       * @param {!Date} date                                                                                           // 8882
       * @returns {string}                                                                                             // 8883
       */                                                                                                              // 8884
      function defaultFormatDate(date) {                                                                               // 8885
        if (!date) {                                                                                                   // 8886
          return '';                                                                                                   // 8887
        }                                                                                                              // 8888
                                                                                                                       // 8889
        // All of the dates created through ng-material *should* be set to midnight.                                   // 8890
        // If we encounter a date where the localeTime shows at 11pm instead of midnight,                              // 8891
        // we have run into an issue with DST where we need to increment the hour by one:                              // 8892
        // var d = new Date(1992, 9, 8, 0, 0, 0);                                                                      // 8893
        // d.toLocaleString(); // == "10/7/1992, 11:00:00 PM"                                                          // 8894
        var localeTime = date.toLocaleTimeString();                                                                    // 8895
        var formatDate = date;                                                                                         // 8896
        if (date.getHours() == 0 &&                                                                                    // 8897
            (localeTime.indexOf('11:') !== -1 || localeTime.indexOf('23:') !== -1)) {                                  // 8898
          formatDate = new Date(date.getFullYear(), date.getMonth(), date.getDate(), 1, 0, 0);                         // 8899
        }                                                                                                              // 8900
                                                                                                                       // 8901
        return formatDate.toLocaleDateString();                                                                        // 8902
      }                                                                                                                // 8903
                                                                                                                       // 8904
      /**                                                                                                              // 8905
       * Default string-to-date parsing function.                                                                      // 8906
       * @param {string} dateString                                                                                    // 8907
       * @returns {!Date}                                                                                              // 8908
       */                                                                                                              // 8909
      function defaultParseDate(dateString) {                                                                          // 8910
        return new Date(dateString);                                                                                   // 8911
      }                                                                                                                // 8912
                                                                                                                       // 8913
      /**                                                                                                              // 8914
       * Default function to determine whether a string makes sense to be                                              // 8915
       * parsed to a Date object.                                                                                      // 8916
       *                                                                                                               // 8917
       * This is very permissive and is just a basic sanity check to ensure that                                       // 8918
       * things like single integers aren't able to be parsed into dates.                                              // 8919
       * @param {string} dateString                                                                                    // 8920
       * @returns {boolean}                                                                                            // 8921
       */                                                                                                              // 8922
      function defaultIsDateComplete(dateString) {                                                                     // 8923
        dateString = dateString.trim();                                                                                // 8924
                                                                                                                       // 8925
        // Looks for three chunks of content (either numbers or text) separated                                        // 8926
        // by delimiters.                                                                                              // 8927
        var re = /^(([a-zA-Z]{3,}|[0-9]{1,4})([ \.,]+|[\/\-])){2}([a-zA-Z]{3,}|[0-9]{1,4})$/;                          // 8928
        return re.test(dateString);                                                                                    // 8929
      }                                                                                                                // 8930
                                                                                                                       // 8931
      /**                                                                                                              // 8932
       * Default date-to-string formatter to get a month header.                                                       // 8933
       * @param {!Date} date                                                                                           // 8934
       * @returns {string}                                                                                             // 8935
       */                                                                                                              // 8936
      function defaultMonthHeaderFormatter(date) {                                                                     // 8937
        return service.shortMonths[date.getMonth()] + ' ' + date.getFullYear();                                        // 8938
      }                                                                                                                // 8939
                                                                                                                       // 8940
      /**                                                                                                              // 8941
       * Default week number formatter.                                                                                // 8942
       * @param number                                                                                                 // 8943
       * @returns {string}                                                                                             // 8944
       */                                                                                                              // 8945
      function defaultWeekNumberFormatter(number) {                                                                    // 8946
        return 'Week ' + number;                                                                                       // 8947
      }                                                                                                                // 8948
                                                                                                                       // 8949
      /**                                                                                                              // 8950
       * Default formatter for date cell aria-labels.                                                                  // 8951
       * @param {!Date} date                                                                                           // 8952
       * @returns {string}                                                                                             // 8953
       */                                                                                                              // 8954
      function defaultLongDateFormatter(date) {                                                                        // 8955
        // Example: 'Thursday June 18 2015'                                                                            // 8956
        return [                                                                                                       // 8957
          service.days[date.getDay()],                                                                                 // 8958
          service.months[date.getMonth()],                                                                             // 8959
          service.dates[date.getDate()],                                                                               // 8960
          date.getFullYear()                                                                                           // 8961
        ].join(' ');                                                                                                   // 8962
      }                                                                                                                // 8963
                                                                                                                       // 8964
      // The default "short" day strings are the first character of each day,                                          // 8965
      // e.g., "Monday" => "M".                                                                                        // 8966
      var defaultShortDays = $locale.DATETIME_FORMATS.DAY.map(function(day) {                                          // 8967
        return day[0];                                                                                                 // 8968
      });                                                                                                              // 8969
                                                                                                                       // 8970
      // The default dates are simply the numbers 1 through 31.                                                        // 8971
      var defaultDates = Array(32);                                                                                    // 8972
      for (var i = 1; i <= 31; i++) {                                                                                  // 8973
        defaultDates[i] = i;                                                                                           // 8974
      }                                                                                                                // 8975
                                                                                                                       // 8976
      // Default ARIA messages are in English (US).                                                                    // 8977
      var defaultMsgCalendar = 'Calendar';                                                                             // 8978
      var defaultMsgOpenCalendar = 'Open calendar';                                                                    // 8979
                                                                                                                       // 8980
      var service = {                                                                                                  // 8981
        months: this.months || $locale.DATETIME_FORMATS.MONTH,                                                         // 8982
        shortMonths: this.shortMonths || $locale.DATETIME_FORMATS.SHORTMONTH,                                          // 8983
        days: this.days || $locale.DATETIME_FORMATS.DAY,                                                               // 8984
        shortDays: this.shortDays || defaultShortDays,                                                                 // 8985
        dates: this.dates || defaultDates,                                                                             // 8986
        firstDayOfWeek: this.firstDayOfWeek || 0,                                                                      // 8987
        formatDate: this.formatDate || defaultFormatDate,                                                              // 8988
        parseDate: this.parseDate || defaultParseDate,                                                                 // 8989
        isDateComplete: this.isDateComplete || defaultIsDateComplete,                                                  // 8990
        monthHeaderFormatter: this.monthHeaderFormatter || defaultMonthHeaderFormatter,                                // 8991
        weekNumberFormatter: this.weekNumberFormatter || defaultWeekNumberFormatter,                                   // 8992
        longDateFormatter: this.longDateFormatter || defaultLongDateFormatter,                                         // 8993
        msgCalendar: this.msgCalendar || defaultMsgCalendar,                                                           // 8994
        msgOpenCalendar: this.msgOpenCalendar || defaultMsgOpenCalendar                                                // 8995
      };                                                                                                               // 8996
                                                                                                                       // 8997
      return service;                                                                                                  // 8998
    };                                                                                                                 // 8999
    DateLocaleProvider.prototype.$get.$inject = ["$locale"];                                                           // 9000
                                                                                                                       // 9001
    $provide.provider('$mdDateLocale', new DateLocaleProvider());                                                      // 9002
  }]);                                                                                                                 // 9003
})();                                                                                                                  // 9004
                                                                                                                       // 9005
})();                                                                                                                  // 9006
(function(){                                                                                                           // 9007
"use strict";                                                                                                          // 9008
                                                                                                                       // 9009
(function() {                                                                                                          // 9010
  'use strict';                                                                                                        // 9011
                                                                                                                       // 9012
  // POST RELEASE                                                                                                      // 9013
  // TODO(jelbourn): Demo that uses moment.js                                                                          // 9014
  // TODO(jelbourn): make sure this plays well with validation and ngMessages.                                         // 9015
  // TODO(jelbourn): calendar pane doesn't open up outside of visible viewport.                                        // 9016
  // TODO(jelbourn): forward more attributes to the internal input (required, autofocus, etc.)                         // 9017
  // TODO(jelbourn): something better for mobile (calendar panel takes up entire screen?)                              // 9018
  // TODO(jelbourn): input behavior (masking? auto-complete?)                                                          // 9019
  // TODO(jelbourn): UTC mode                                                                                          // 9020
  // TODO(jelbourn): RTL                                                                                               // 9021
                                                                                                                       // 9022
                                                                                                                       // 9023
  angular.module('material.components.datepicker')                                                                     // 9024
      .directive('mdDatepicker', datePickerDirective);                                                                 // 9025
                                                                                                                       // 9026
  /**                                                                                                                  // 9027
   * @ngdoc directive                                                                                                  // 9028
   * @name mdDatepicker                                                                                                // 9029
   * @module material.components.datepicker                                                                            // 9030
   *                                                                                                                   // 9031
   * @param {Date} ng-model The component's model. Expects a JavaScript Date object.                                   // 9032
   * @param {expression=} ng-change Expression evaluated when the model value changes.                                 // 9033
   * @param {Date=} md-min-date Expression representing a min date (inclusive).                                        // 9034
   * @param {Date=} md-max-date Expression representing a max date (inclusive).                                        // 9035
   * @param {(function(Date): boolean)=} md-date-filter Function expecting a date and returning a boolean whether it can be selected or not.
   * @param {String=} md-placeholder The date input placeholder value.                                                 // 9037
   * @param {boolean=} ng-disabled Whether the datepicker is disabled.                                                 // 9038
   * @param {boolean=} ng-required Whether a value is required for the datepicker.                                     // 9039
   *                                                                                                                   // 9040
   * @description                                                                                                      // 9041
   * `<md-datepicker>` is a component used to select a single date.                                                    // 9042
   * For information on how to configure internationalization for the date picker,                                     // 9043
   * see `$mdDateLocaleProvider`.                                                                                      // 9044
   *                                                                                                                   // 9045
   * This component supports [ngMessages](https://docs.angularjs.org/api/ngMessages/directive/ngMessages).             // 9046
   * Supported attributes are:                                                                                         // 9047
   * * `required`: whether a required date is not set.                                                                 // 9048
   * * `mindate`: whether the selected date is before the minimum allowed date.                                        // 9049
   * * `maxdate`: whether the selected date is after the maximum allowed date.                                         // 9050
   *                                                                                                                   // 9051
   * @usage                                                                                                            // 9052
   * <hljs lang="html">                                                                                                // 9053
   *   <md-datepicker ng-model="birthday"></md-datepicker>                                                             // 9054
   * </hljs>                                                                                                           // 9055
   *                                                                                                                   // 9056
   */                                                                                                                  // 9057
  function datePickerDirective() {                                                                                     // 9058
    return {                                                                                                           // 9059
      template:                                                                                                        // 9060
          // Buttons are not in the tab order because users can open the calendar via keyboard                         // 9061
          // interaction on the text input, and multiple tab stops for one component (picker)                          // 9062
          // may be confusing.                                                                                         // 9063
          '<md-button class="md-datepicker-button md-icon-button" type="button" ' +                                    // 9064
              'tabindex="-1" aria-hidden="true" ' +                                                                    // 9065
              'ng-click="ctrl.openCalendarPane($event)">' +                                                            // 9066
            '<md-icon class="md-datepicker-calendar-icon" md-svg-icon="md-calendar"></md-icon>' +                      // 9067
          '</md-button>' +                                                                                             // 9068
          '<div class="md-datepicker-input-container" ' +                                                              // 9069
              'ng-class="{\'md-datepicker-focused\': ctrl.isFocused}">' +                                              // 9070
            '<input class="md-datepicker-input" aria-haspopup="true" ' +                                               // 9071
                'ng-focus="ctrl.setFocused(true)" ng-blur="ctrl.setFocused(false)">' +                                 // 9072
            '<md-button type="button" md-no-ink ' +                                                                    // 9073
                'class="md-datepicker-triangle-button md-icon-button" ' +                                              // 9074
                'ng-click="ctrl.openCalendarPane($event)" ' +                                                          // 9075
                'aria-label="{{::ctrl.dateLocale.msgOpenCalendar}}">' +                                                // 9076
              '<div class="md-datepicker-expand-triangle"></div>' +                                                    // 9077
            '</md-button>' +                                                                                           // 9078
          '</div>' +                                                                                                   // 9079
                                                                                                                       // 9080
          // This pane will be detached from here and re-attached to the document body.                                // 9081
          '<div class="md-datepicker-calendar-pane md-whiteframe-z1">' +                                               // 9082
            '<div class="md-datepicker-input-mask">' +                                                                 // 9083
              '<div class="md-datepicker-input-mask-opaque"></div>' +                                                  // 9084
            '</div>' +                                                                                                 // 9085
            '<div class="md-datepicker-calendar">' +                                                                   // 9086
              '<md-calendar role="dialog" aria-label="{{::ctrl.dateLocale.msgCalendar}}" ' +                           // 9087
                  'md-min-date="ctrl.minDate" md-max-date="ctrl.maxDate"' +                                            // 9088
                  'md-date-filter="ctrl.dateFilter"' +                                                                 // 9089
                  'ng-model="ctrl.date" ng-if="ctrl.isCalendarOpen">' +                                                // 9090
              '</md-calendar>' +                                                                                       // 9091
            '</div>' +                                                                                                 // 9092
          '</div>',                                                                                                    // 9093
      require: ['ngModel', 'mdDatepicker', '?^mdInputContainer'],                                                      // 9094
      scope: {                                                                                                         // 9095
        minDate: '=mdMinDate',                                                                                         // 9096
        maxDate: '=mdMaxDate',                                                                                         // 9097
        placeholder: '@mdPlaceholder',                                                                                 // 9098
        dateFilter: '=mdDateFilter'                                                                                    // 9099
      },                                                                                                               // 9100
      controller: DatePickerCtrl,                                                                                      // 9101
      controllerAs: 'ctrl',                                                                                            // 9102
      bindToController: true,                                                                                          // 9103
      link: function(scope, element, attr, controllers) {                                                              // 9104
        var ngModelCtrl = controllers[0];                                                                              // 9105
        var mdDatePickerCtrl = controllers[1];                                                                         // 9106
                                                                                                                       // 9107
        var mdInputContainer = controllers[2];                                                                         // 9108
        if (mdInputContainer) {                                                                                        // 9109
          throw Error('md-datepicker should not be placed inside md-input-container.');                                // 9110
        }                                                                                                              // 9111
                                                                                                                       // 9112
        mdDatePickerCtrl.configureNgModel(ngModelCtrl);                                                                // 9113
      }                                                                                                                // 9114
    };                                                                                                                 // 9115
  }                                                                                                                    // 9116
                                                                                                                       // 9117
  /** Additional offset for the input's `size` attribute, which is updated based on its content. */                    // 9118
  var EXTRA_INPUT_SIZE = 3;                                                                                            // 9119
                                                                                                                       // 9120
  /** Class applied to the container if the date is invalid. */                                                        // 9121
  var INVALID_CLASS = 'md-datepicker-invalid';                                                                         // 9122
                                                                                                                       // 9123
  /** Default time in ms to debounce input event by. */                                                                // 9124
  var DEFAULT_DEBOUNCE_INTERVAL = 500;                                                                                 // 9125
                                                                                                                       // 9126
  /**                                                                                                                  // 9127
   * Height of the calendar pane used to check if the pane is going outside the boundary of                            // 9128
   * the viewport. See calendar.scss for how $md-calendar-height is computed; an extra 20px is                         // 9129
   * also added to space the pane away from the exact edge of the screen.                                              // 9130
   *                                                                                                                   // 9131
   *  This is computed statically now, but can be changed to be measured if the circumstances                          // 9132
   *  of calendar sizing are changed.                                                                                  // 9133
   */                                                                                                                  // 9134
  var CALENDAR_PANE_HEIGHT = 368;                                                                                      // 9135
                                                                                                                       // 9136
  /**                                                                                                                  // 9137
   * Width of the calendar pane used to check if the pane is going outside the boundary of                             // 9138
   * the viewport. See calendar.scss for how $md-calendar-width is computed; an extra 20px is                          // 9139
   * also added to space the pane away from the exact edge of the screen.                                              // 9140
   *                                                                                                                   // 9141
   *  This is computed statically now, but can be changed to be measured if the circumstances                          // 9142
   *  of calendar sizing are changed.                                                                                  // 9143
   */                                                                                                                  // 9144
  var CALENDAR_PANE_WIDTH = 360;                                                                                       // 9145
                                                                                                                       // 9146
  /**                                                                                                                  // 9147
   * Controller for md-datepicker.                                                                                     // 9148
   *                                                                                                                   // 9149
   * @ngInject @constructor                                                                                            // 9150
   */                                                                                                                  // 9151
  function DatePickerCtrl($scope, $element, $attrs, $compile, $timeout, $window,                                       // 9152
      $mdConstant, $mdTheming, $mdUtil, $mdDateLocale, $$mdDateUtil, $$rAF) {                                          // 9153
    /** @final */                                                                                                      // 9154
    this.$compile = $compile;                                                                                          // 9155
                                                                                                                       // 9156
    /** @final */                                                                                                      // 9157
    this.$timeout = $timeout;                                                                                          // 9158
                                                                                                                       // 9159
    /** @final */                                                                                                      // 9160
    this.$window = $window;                                                                                            // 9161
                                                                                                                       // 9162
    /** @final */                                                                                                      // 9163
    this.dateLocale = $mdDateLocale;                                                                                   // 9164
                                                                                                                       // 9165
    /** @final */                                                                                                      // 9166
    this.dateUtil = $$mdDateUtil;                                                                                      // 9167
                                                                                                                       // 9168
    /** @final */                                                                                                      // 9169
    this.$mdConstant = $mdConstant;                                                                                    // 9170
                                                                                                                       // 9171
    /* @final */                                                                                                       // 9172
    this.$mdUtil = $mdUtil;                                                                                            // 9173
                                                                                                                       // 9174
    /** @final */                                                                                                      // 9175
    this.$$rAF = $$rAF;                                                                                                // 9176
                                                                                                                       // 9177
    /**                                                                                                                // 9178
     * The root document element. This is used for attaching a top-level click handler to                              // 9179
     * close the calendar panel when a click outside said panel occurs. We use `documentElement`                       // 9180
     * instead of body because, when scrolling is disabled, some browsers consider the body element                    // 9181
     * to be completely off the screen and propagate events directly to the html element.                              // 9182
     * @type {!angular.JQLite}                                                                                         // 9183
     */                                                                                                                // 9184
    this.documentElement = angular.element(document.documentElement);                                                  // 9185
                                                                                                                       // 9186
    /** @type {!angular.NgModelController} */                                                                          // 9187
    this.ngModelCtrl = null;                                                                                           // 9188
                                                                                                                       // 9189
    /** @type {HTMLInputElement} */                                                                                    // 9190
    this.inputElement = $element[0].querySelector('input');                                                            // 9191
                                                                                                                       // 9192
    /** @final {!angular.JQLite} */                                                                                    // 9193
    this.ngInputElement = angular.element(this.inputElement);                                                          // 9194
                                                                                                                       // 9195
    /** @type {HTMLElement} */                                                                                         // 9196
    this.inputContainer = $element[0].querySelector('.md-datepicker-input-container');                                 // 9197
                                                                                                                       // 9198
    /** @type {HTMLElement} Floating calendar pane. */                                                                 // 9199
    this.calendarPane = $element[0].querySelector('.md-datepicker-calendar-pane');                                     // 9200
                                                                                                                       // 9201
    /** @type {HTMLElement} Calendar icon button. */                                                                   // 9202
    this.calendarButton = $element[0].querySelector('.md-datepicker-button');                                          // 9203
                                                                                                                       // 9204
    /**                                                                                                                // 9205
     * Element covering everything but the input in the top of the floating calendar pane.                             // 9206
     * @type {HTMLElement}                                                                                             // 9207
     */                                                                                                                // 9208
    this.inputMask = $element[0].querySelector('.md-datepicker-input-mask-opaque');                                    // 9209
                                                                                                                       // 9210
    /** @final {!angular.JQLite} */                                                                                    // 9211
    this.$element = $element;                                                                                          // 9212
                                                                                                                       // 9213
    /** @final {!angular.Attributes} */                                                                                // 9214
    this.$attrs = $attrs;                                                                                              // 9215
                                                                                                                       // 9216
    /** @final {!angular.Scope} */                                                                                     // 9217
    this.$scope = $scope;                                                                                              // 9218
                                                                                                                       // 9219
    /** @type {Date} */                                                                                                // 9220
    this.date = null;                                                                                                  // 9221
                                                                                                                       // 9222
    /** @type {boolean} */                                                                                             // 9223
    this.isFocused = false;                                                                                            // 9224
                                                                                                                       // 9225
    /** @type {boolean} */                                                                                             // 9226
    this.isDisabled;                                                                                                   // 9227
    this.setDisabled($element[0].disabled || angular.isString($attrs['disabled']));                                    // 9228
                                                                                                                       // 9229
    /** @type {boolean} Whether the date-picker's calendar pane is open. */                                            // 9230
    this.isCalendarOpen = false;                                                                                       // 9231
                                                                                                                       // 9232
    /**                                                                                                                // 9233
     * Element from which the calendar pane was opened. Keep track of this so that we can return                       // 9234
     * focus to it when the pane is closed.                                                                            // 9235
     * @type {HTMLElement}                                                                                             // 9236
     */                                                                                                                // 9237
    this.calendarPaneOpenedFrom = null;                                                                                // 9238
                                                                                                                       // 9239
    this.calendarPane.id = 'md-date-pane' + $mdUtil.nextUid();                                                         // 9240
                                                                                                                       // 9241
    $mdTheming($element);                                                                                              // 9242
                                                                                                                       // 9243
    /** Pre-bound click handler is saved so that the event listener can be removed. */                                 // 9244
    this.bodyClickHandler = angular.bind(this, this.handleBodyClick);                                                  // 9245
                                                                                                                       // 9246
    /** Pre-bound resize handler so that the event listener can be removed. */                                         // 9247
    this.windowResizeHandler = $mdUtil.debounce(angular.bind(this, this.closeCalendarPane), 100);                      // 9248
                                                                                                                       // 9249
    // Unless the user specifies so, the datepicker should not be a tab stop.                                          // 9250
    // This is necessary because ngAria might add a tabindex to anything with an ng-model                              // 9251
    // (based on whether or not the user has turned that particular feature on/off).                                   // 9252
    if (!$attrs['tabindex']) {                                                                                         // 9253
      $element.attr('tabindex', '-1');                                                                                 // 9254
    }                                                                                                                  // 9255
                                                                                                                       // 9256
    this.installPropertyInterceptors();                                                                                // 9257
    this.attachChangeListeners();                                                                                      // 9258
    this.attachInteractionListeners();                                                                                 // 9259
                                                                                                                       // 9260
    var self = this;                                                                                                   // 9261
    $scope.$on('$destroy', function() {                                                                                // 9262
      self.detachCalendarPane();                                                                                       // 9263
    });                                                                                                                // 9264
  }                                                                                                                    // 9265
  DatePickerCtrl.$inject = ["$scope", "$element", "$attrs", "$compile", "$timeout", "$window", "$mdConstant", "$mdTheming", "$mdUtil", "$mdDateLocale", "$$mdDateUtil", "$$rAF"];
                                                                                                                       // 9267
  /**                                                                                                                  // 9268
   * Sets up the controller's reference to ngModelController.                                                          // 9269
   * @param {!angular.NgModelController} ngModelCtrl                                                                   // 9270
   */                                                                                                                  // 9271
  DatePickerCtrl.prototype.configureNgModel = function(ngModelCtrl) {                                                  // 9272
    this.ngModelCtrl = ngModelCtrl;                                                                                    // 9273
                                                                                                                       // 9274
    var self = this;                                                                                                   // 9275
    ngModelCtrl.$render = function() {                                                                                 // 9276
      var value = self.ngModelCtrl.$viewValue;                                                                         // 9277
                                                                                                                       // 9278
      if (value && !(value instanceof Date)) {                                                                         // 9279
        throw Error('The ng-model for md-datepicker must be a Date instance. ' +                                       // 9280
            'Currently the model is a: ' + (typeof value));                                                            // 9281
      }                                                                                                                // 9282
                                                                                                                       // 9283
      self.date = value;                                                                                               // 9284
      self.inputElement.value = self.dateLocale.formatDate(value);                                                     // 9285
      self.resizeInputElement();                                                                                       // 9286
      self.updateErrorState();                                                                                         // 9287
    };                                                                                                                 // 9288
  };                                                                                                                   // 9289
                                                                                                                       // 9290
  /**                                                                                                                  // 9291
   * Attach event listeners for both the text input and the md-calendar.                                               // 9292
   * Events are used instead of ng-model so that updates don't infinitely update the other                             // 9293
   * on a change. This should also be more performant than using a $watch.                                             // 9294
   */                                                                                                                  // 9295
  DatePickerCtrl.prototype.attachChangeListeners = function() {                                                        // 9296
    var self = this;                                                                                                   // 9297
                                                                                                                       // 9298
    self.$scope.$on('md-calendar-change', function(event, date) {                                                      // 9299
      self.ngModelCtrl.$setViewValue(date);                                                                            // 9300
      self.date = date;                                                                                                // 9301
      self.inputElement.value = self.dateLocale.formatDate(date);                                                      // 9302
      self.closeCalendarPane();                                                                                        // 9303
      self.resizeInputElement();                                                                                       // 9304
      self.updateErrorState();                                                                                         // 9305
    });                                                                                                                // 9306
                                                                                                                       // 9307
    self.ngInputElement.on('input', angular.bind(self, self.resizeInputElement));                                      // 9308
    // TODO(chenmike): Add ability for users to specify this interval.                                                 // 9309
    self.ngInputElement.on('input', self.$mdUtil.debounce(self.handleInputEvent,                                       // 9310
        DEFAULT_DEBOUNCE_INTERVAL, self));                                                                             // 9311
  };                                                                                                                   // 9312
                                                                                                                       // 9313
  /** Attach event listeners for user interaction. */                                                                  // 9314
  DatePickerCtrl.prototype.attachInteractionListeners = function() {                                                   // 9315
    var self = this;                                                                                                   // 9316
    var $scope = this.$scope;                                                                                          // 9317
    var keyCodes = this.$mdConstant.KEY_CODE;                                                                          // 9318
                                                                                                                       // 9319
    // Add event listener through angular so that we can triggerHandler in unit tests.                                 // 9320
    self.ngInputElement.on('keydown', function(event) {                                                                // 9321
      if (event.altKey && event.keyCode == keyCodes.DOWN_ARROW) {                                                      // 9322
        self.openCalendarPane(event);                                                                                  // 9323
        $scope.$digest();                                                                                              // 9324
      }                                                                                                                // 9325
    });                                                                                                                // 9326
                                                                                                                       // 9327
    $scope.$on('md-calendar-close', function() {                                                                       // 9328
      self.closeCalendarPane();                                                                                        // 9329
    });                                                                                                                // 9330
  };                                                                                                                   // 9331
                                                                                                                       // 9332
  /**                                                                                                                  // 9333
   * Capture properties set to the date-picker and imperitively handle internal changes.                               // 9334
   * This is done to avoid setting up additional $watches.                                                             // 9335
   */                                                                                                                  // 9336
  DatePickerCtrl.prototype.installPropertyInterceptors = function() {                                                  // 9337
    var self = this;                                                                                                   // 9338
                                                                                                                       // 9339
    if (this.$attrs['ngDisabled']) {                                                                                   // 9340
      // The expression is to be evaluated against the directive element's scope and not                               // 9341
      // the directive's isolate scope.                                                                                // 9342
      var scope = this.$scope.$parent;                                                                                 // 9343
                                                                                                                       // 9344
      if (scope) {                                                                                                     // 9345
        scope.$watch(this.$attrs['ngDisabled'], function(isDisabled) {                                                 // 9346
          self.setDisabled(isDisabled);                                                                                // 9347
        });                                                                                                            // 9348
      }                                                                                                                // 9349
    }                                                                                                                  // 9350
                                                                                                                       // 9351
    Object.defineProperty(this, 'placeholder', {                                                                       // 9352
      get: function() { return self.inputElement.placeholder; },                                                       // 9353
      set: function(value) { self.inputElement.placeholder = value || ''; }                                            // 9354
    });                                                                                                                // 9355
  };                                                                                                                   // 9356
                                                                                                                       // 9357
  /**                                                                                                                  // 9358
   * Sets whether the date-picker is disabled.                                                                         // 9359
   * @param {boolean} isDisabled                                                                                       // 9360
   */                                                                                                                  // 9361
  DatePickerCtrl.prototype.setDisabled = function(isDisabled) {                                                        // 9362
    this.isDisabled = isDisabled;                                                                                      // 9363
    this.inputElement.disabled = isDisabled;                                                                           // 9364
    this.calendarButton.disabled = isDisabled;                                                                         // 9365
  };                                                                                                                   // 9366
                                                                                                                       // 9367
  /**                                                                                                                  // 9368
   * Sets the custom ngModel.$error flags to be consumed by ngMessages. Flags are:                                     // 9369
   *   - mindate: whether the selected date is before the minimum date.                                                // 9370
   *   - maxdate: whether the selected flag is after the maximum date.                                                 // 9371
   *   - filtered: whether the selected date is allowed by the custom filtering function.                              // 9372
   *   - valid: whether the entered text input is a valid date                                                         // 9373
   *                                                                                                                   // 9374
   * The 'required' flag is handled automatically by ngModel.                                                          // 9375
   *                                                                                                                   // 9376
   * @param {Date=} opt_date Date to check. If not given, defaults to the datepicker's model value.                    // 9377
   */                                                                                                                  // 9378
  DatePickerCtrl.prototype.updateErrorState = function(opt_date) {                                                     // 9379
    var date = opt_date || this.date;                                                                                  // 9380
                                                                                                                       // 9381
    // Clear any existing errors to get rid of anything that's no longer relevant.                                     // 9382
    this.clearErrorState();                                                                                            // 9383
                                                                                                                       // 9384
    if (this.dateUtil.isValidDate(date)) {                                                                             // 9385
      // Force all dates to midnight in order to ignore the time portion.                                              // 9386
      date = this.dateUtil.createDateAtMidnight(date);                                                                 // 9387
                                                                                                                       // 9388
      if (this.dateUtil.isValidDate(this.minDate)) {                                                                   // 9389
        var minDate = this.dateUtil.createDateAtMidnight(this.minDate);                                                // 9390
        this.ngModelCtrl.$setValidity('mindate', date >= minDate);                                                     // 9391
      }                                                                                                                // 9392
                                                                                                                       // 9393
      if (this.dateUtil.isValidDate(this.maxDate)) {                                                                   // 9394
        var maxDate = this.dateUtil.createDateAtMidnight(this.maxDate);                                                // 9395
        this.ngModelCtrl.$setValidity('maxdate', date <= maxDate);                                                     // 9396
      }                                                                                                                // 9397
                                                                                                                       // 9398
      if (angular.isFunction(this.dateFilter)) {                                                                       // 9399
        this.ngModelCtrl.$setValidity('filtered', this.dateFilter(date));                                              // 9400
      }                                                                                                                // 9401
    } else {                                                                                                           // 9402
      // The date is seen as "not a valid date" if there is *something* set                                            // 9403
      // (i.e.., not null or undefined), but that something isn't a valid date.                                        // 9404
      this.ngModelCtrl.$setValidity('valid', date == null);                                                            // 9405
    }                                                                                                                  // 9406
                                                                                                                       // 9407
    // TODO(jelbourn): Change this to classList.toggle when we stop using PhantomJS in unit tests                      // 9408
    // because it doesn't conform to the DOMTokenList spec.                                                            // 9409
    // See https://github.com/ariya/phantomjs/issues/12782.                                                            // 9410
    if (!this.ngModelCtrl.$valid) {                                                                                    // 9411
      this.inputContainer.classList.add(INVALID_CLASS);                                                                // 9412
    }                                                                                                                  // 9413
  };                                                                                                                   // 9414
                                                                                                                       // 9415
  /** Clears any error flags set by `updateErrorState`. */                                                             // 9416
  DatePickerCtrl.prototype.clearErrorState = function() {                                                              // 9417
    this.inputContainer.classList.remove(INVALID_CLASS);                                                               // 9418
    ['mindate', 'maxdate', 'filtered', 'valid'].forEach(function(field) {                                              // 9419
      this.ngModelCtrl.$setValidity(field, true);                                                                      // 9420
    }, this);                                                                                                          // 9421
  };                                                                                                                   // 9422
                                                                                                                       // 9423
  /** Resizes the input element based on the size of its content. */                                                   // 9424
  DatePickerCtrl.prototype.resizeInputElement = function() {                                                           // 9425
    this.inputElement.size = this.inputElement.value.length + EXTRA_INPUT_SIZE;                                        // 9426
  };                                                                                                                   // 9427
                                                                                                                       // 9428
  /**                                                                                                                  // 9429
   * Sets the model value if the user input is a valid date.                                                           // 9430
   * Adds an invalid class to the input element if not.                                                                // 9431
   */                                                                                                                  // 9432
  DatePickerCtrl.prototype.handleInputEvent = function() {                                                             // 9433
    var inputString = this.inputElement.value;                                                                         // 9434
    var parsedDate = inputString ? this.dateLocale.parseDate(inputString) : null;                                      // 9435
    this.dateUtil.setDateTimeToMidnight(parsedDate);                                                                   // 9436
                                                                                                                       // 9437
    // An input string is valid if it is either empty (representing no date)                                           // 9438
    // or if it parses to a valid date that the user is allowed to select.                                             // 9439
    var isValidInput = inputString == '' || (                                                                          // 9440
      this.dateUtil.isValidDate(parsedDate) &&                                                                         // 9441
      this.dateLocale.isDateComplete(inputString) &&                                                                   // 9442
      this.isDateEnabled(parsedDate)                                                                                   // 9443
    );                                                                                                                 // 9444
                                                                                                                       // 9445
    // The datepicker's model is only updated when there is a valid input.                                             // 9446
    if (isValidInput) {                                                                                                // 9447
      this.ngModelCtrl.$setViewValue(parsedDate);                                                                      // 9448
      this.date = parsedDate;                                                                                          // 9449
    }                                                                                                                  // 9450
                                                                                                                       // 9451
    this.updateErrorState(parsedDate);                                                                                 // 9452
  };                                                                                                                   // 9453
                                                                                                                       // 9454
  /**                                                                                                                  // 9455
   * Check whether date is in range and enabled                                                                        // 9456
   * @param {Date=} opt_date                                                                                           // 9457
   * @return {boolean} Whether the date is enabled.                                                                    // 9458
   */                                                                                                                  // 9459
  DatePickerCtrl.prototype.isDateEnabled = function(opt_date) {                                                        // 9460
    return this.dateUtil.isDateWithinRange(opt_date, this.minDate, this.maxDate) &&                                    // 9461
          (!angular.isFunction(this.dateFilter) || this.dateFilter(opt_date));                                         // 9462
  };                                                                                                                   // 9463
                                                                                                                       // 9464
  /** Position and attach the floating calendar to the document. */                                                    // 9465
  DatePickerCtrl.prototype.attachCalendarPane = function() {                                                           // 9466
    var calendarPane = this.calendarPane;                                                                              // 9467
    calendarPane.style.transform = '';                                                                                 // 9468
    this.$element.addClass('md-datepicker-open');                                                                      // 9469
                                                                                                                       // 9470
    var elementRect = this.inputContainer.getBoundingClientRect();                                                     // 9471
    var bodyRect = document.body.getBoundingClientRect();                                                              // 9472
                                                                                                                       // 9473
    // Check to see if the calendar pane would go off the screen. If so, adjust position                               // 9474
    // accordingly to keep it within the viewport.                                                                     // 9475
    var paneTop = elementRect.top - bodyRect.top;                                                                      // 9476
    var paneLeft = elementRect.left - bodyRect.left;                                                                   // 9477
                                                                                                                       // 9478
    // If ng-material has disabled body scrolling (for example, if a dialog is open),                                  // 9479
    // then it's possible that the already-scrolled body has a negative top/left. In this case,                        // 9480
    // we want to treat the "real" top as (0 - bodyRect.top). In a normal scrolling situation,                         // 9481
    // though, the top of the viewport should just be the body's scroll position.                                      // 9482
    var viewportTop = (bodyRect.top < 0 && document.body.scrollTop == 0) ?                                             // 9483
        -bodyRect.top :                                                                                                // 9484
        document.body.scrollTop;                                                                                       // 9485
                                                                                                                       // 9486
    var viewportLeft = (bodyRect.left < 0 && document.body.scrollLeft == 0) ?                                          // 9487
        -bodyRect.left :                                                                                               // 9488
        document.body.scrollLeft;                                                                                      // 9489
                                                                                                                       // 9490
    var viewportBottom = viewportTop + this.$window.innerHeight;                                                       // 9491
    var viewportRight = viewportLeft + this.$window.innerWidth;                                                        // 9492
                                                                                                                       // 9493
    // If the right edge of the pane would be off the screen and shifting it left by the                               // 9494
    // difference would not go past the left edge of the screen. If the calendar pane is too                           // 9495
    // big to fit on the screen at all, move it to the left of the screen and scale the entire                         // 9496
    // element down to fit.                                                                                            // 9497
    if (paneLeft + CALENDAR_PANE_WIDTH > viewportRight) {                                                              // 9498
      if (viewportRight - CALENDAR_PANE_WIDTH > 0) {                                                                   // 9499
        paneLeft = viewportRight - CALENDAR_PANE_WIDTH;                                                                // 9500
      } else {                                                                                                         // 9501
        paneLeft = viewportLeft;                                                                                       // 9502
        var scale = this.$window.innerWidth / CALENDAR_PANE_WIDTH;                                                     // 9503
        calendarPane.style.transform = 'scale(' + scale + ')';                                                         // 9504
      }                                                                                                                // 9505
                                                                                                                       // 9506
      calendarPane.classList.add('md-datepicker-pos-adjusted');                                                        // 9507
    }                                                                                                                  // 9508
                                                                                                                       // 9509
    // If the bottom edge of the pane would be off the screen and shifting it up by the                                // 9510
    // difference would not go past the top edge of the screen.                                                        // 9511
    if (paneTop + CALENDAR_PANE_HEIGHT > viewportBottom &&                                                             // 9512
        viewportBottom - CALENDAR_PANE_HEIGHT > viewportTop) {                                                         // 9513
      paneTop = viewportBottom - CALENDAR_PANE_HEIGHT;                                                                 // 9514
      calendarPane.classList.add('md-datepicker-pos-adjusted');                                                        // 9515
    }                                                                                                                  // 9516
                                                                                                                       // 9517
    calendarPane.style.left = paneLeft + 'px';                                                                         // 9518
    calendarPane.style.top = paneTop + 'px';                                                                           // 9519
    document.body.appendChild(calendarPane);                                                                           // 9520
                                                                                                                       // 9521
    // The top of the calendar pane is a transparent box that shows the text input underneath.                         // 9522
    // Since the pane is floating, though, the page underneath the pane *adjacent* to the input is                     // 9523
    // also shown unless we cover it up. The inputMask does this by filling up the remaining space                     // 9524
    // based on the width of the input.                                                                                // 9525
    this.inputMask.style.left = elementRect.width + 'px';                                                              // 9526
                                                                                                                       // 9527
    // Add CSS class after one frame to trigger open animation.                                                        // 9528
    this.$$rAF(function() {                                                                                            // 9529
      calendarPane.classList.add('md-pane-open');                                                                      // 9530
    });                                                                                                                // 9531
  };                                                                                                                   // 9532
                                                                                                                       // 9533
  /** Detach the floating calendar pane from the document. */                                                          // 9534
  DatePickerCtrl.prototype.detachCalendarPane = function() {                                                           // 9535
    this.$element.removeClass('md-datepicker-open');                                                                   // 9536
    this.calendarPane.classList.remove('md-pane-open');                                                                // 9537
    this.calendarPane.classList.remove('md-datepicker-pos-adjusted');                                                  // 9538
                                                                                                                       // 9539
    if (this.calendarPane.parentNode) {                                                                                // 9540
      // Use native DOM removal because we do not want any of the angular state of this element                        // 9541
      // to be disposed.                                                                                               // 9542
      this.calendarPane.parentNode.removeChild(this.calendarPane);                                                     // 9543
    }                                                                                                                  // 9544
  };                                                                                                                   // 9545
                                                                                                                       // 9546
  /**                                                                                                                  // 9547
   * Open the floating calendar pane.                                                                                  // 9548
   * @param {Event} event                                                                                              // 9549
   */                                                                                                                  // 9550
  DatePickerCtrl.prototype.openCalendarPane = function(event) {                                                        // 9551
    if (!this.isCalendarOpen && !this.isDisabled) {                                                                    // 9552
      this.isCalendarOpen = true;                                                                                      // 9553
      this.calendarPaneOpenedFrom = event.target;                                                                      // 9554
                                                                                                                       // 9555
      // Because the calendar pane is attached directly to the body, it is possible that the                           // 9556
      // rest of the component (input, etc) is in a different scrolling container, such as                             // 9557
      // an md-content. This means that, if the container is scrolled, the pane would remain                           // 9558
      // stationary. To remedy this, we disable scrolling while the calendar pane is open, which                       // 9559
      // also matches the native behavior for things like `<select>` on Mac and Windows.                               // 9560
      this.$mdUtil.disableScrollAround(this.calendarPane);                                                             // 9561
                                                                                                                       // 9562
      this.attachCalendarPane();                                                                                       // 9563
      this.focusCalendar();                                                                                            // 9564
                                                                                                                       // 9565
      // Attach click listener inside of a timeout because, if this open call was triggered by a                       // 9566
      // click, we don't want it to be immediately propogated up to the body and handled.                              // 9567
      var self = this;                                                                                                 // 9568
      this.$mdUtil.nextTick(function() {                                                                               // 9569
        // Use 'touchstart` in addition to click in order to work on iOS Safari, where click                           // 9570
        // events aren't propogated under most circumstances.                                                          // 9571
        // See http://www.quirksmode.org/blog/archives/2014/02/mouse_event_bub.html                                    // 9572
        self.documentElement.on('click touchstart', self.bodyClickHandler);                                            // 9573
      }, false);                                                                                                       // 9574
                                                                                                                       // 9575
      window.addEventListener('resize', this.windowResizeHandler);                                                     // 9576
    }                                                                                                                  // 9577
  };                                                                                                                   // 9578
                                                                                                                       // 9579
  /** Close the floating calendar pane. */                                                                             // 9580
  DatePickerCtrl.prototype.closeCalendarPane = function() {                                                            // 9581
    if (this.isCalendarOpen) {                                                                                         // 9582
      this.isCalendarOpen = false;                                                                                     // 9583
      this.detachCalendarPane();                                                                                       // 9584
      this.calendarPaneOpenedFrom.focus();                                                                             // 9585
      this.calendarPaneOpenedFrom = null;                                                                              // 9586
      this.$mdUtil.enableScrolling();                                                                                  // 9587
                                                                                                                       // 9588
      this.ngModelCtrl.$setTouched();                                                                                  // 9589
                                                                                                                       // 9590
      this.documentElement.off('click touchstart', this.bodyClickHandler);                                             // 9591
      window.removeEventListener('resize', this.windowResizeHandler);                                                  // 9592
    }                                                                                                                  // 9593
  };                                                                                                                   // 9594
                                                                                                                       // 9595
  /** Gets the controller instance for the calendar in the floating pane. */                                           // 9596
  DatePickerCtrl.prototype.getCalendarCtrl = function() {                                                              // 9597
    return angular.element(this.calendarPane.querySelector('md-calendar')).controller('mdCalendar');                   // 9598
  };                                                                                                                   // 9599
                                                                                                                       // 9600
  /** Focus the calendar in the floating pane. */                                                                      // 9601
  DatePickerCtrl.prototype.focusCalendar = function() {                                                                // 9602
    // Use a timeout in order to allow the calendar to be rendered, as it is gated behind an ng-if.                    // 9603
    var self = this;                                                                                                   // 9604
    this.$mdUtil.nextTick(function() {                                                                                 // 9605
      self.getCalendarCtrl().focus();                                                                                  // 9606
    }, false);                                                                                                         // 9607
  };                                                                                                                   // 9608
                                                                                                                       // 9609
  /**                                                                                                                  // 9610
   * Sets whether the input is currently focused.                                                                      // 9611
   * @param {boolean} isFocused                                                                                        // 9612
   */                                                                                                                  // 9613
  DatePickerCtrl.prototype.setFocused = function(isFocused) {                                                          // 9614
    if (!isFocused) {                                                                                                  // 9615
      this.ngModelCtrl.$setTouched();                                                                                  // 9616
    }                                                                                                                  // 9617
    this.isFocused = isFocused;                                                                                        // 9618
  };                                                                                                                   // 9619
                                                                                                                       // 9620
  /**                                                                                                                  // 9621
   * Handles a click on the document body when the floating calendar pane is open.                                     // 9622
   * Closes the floating calendar pane if the click is not inside of it.                                               // 9623
   * @param {MouseEvent} event                                                                                         // 9624
   */                                                                                                                  // 9625
  DatePickerCtrl.prototype.handleBodyClick = function(event) {                                                         // 9626
    if (this.isCalendarOpen) {                                                                                         // 9627
      // TODO(jelbourn): way want to also include the md-datepicker itself in this check.                              // 9628
      var isInCalendar = this.$mdUtil.getClosest(event.target, 'md-calendar');                                         // 9629
      if (!isInCalendar) {                                                                                             // 9630
        this.closeCalendarPane();                                                                                      // 9631
      }                                                                                                                // 9632
                                                                                                                       // 9633
      this.$scope.$digest();                                                                                           // 9634
    }                                                                                                                  // 9635
  };                                                                                                                   // 9636
})();                                                                                                                  // 9637
                                                                                                                       // 9638
})();                                                                                                                  // 9639
(function(){                                                                                                           // 9640
"use strict";                                                                                                          // 9641
                                                                                                                       // 9642
(function() {                                                                                                          // 9643
  'use strict';                                                                                                        // 9644
                                                                                                                       // 9645
  /**                                                                                                                  // 9646
   * Utility for performing date calculations to facilitate operation of the calendar and                              // 9647
   * datepicker.                                                                                                       // 9648
   */                                                                                                                  // 9649
  angular.module('material.components.datepicker').factory('$$mdDateUtil', function() {                                // 9650
    return {                                                                                                           // 9651
      getFirstDateOfMonth: getFirstDateOfMonth,                                                                        // 9652
      getNumberOfDaysInMonth: getNumberOfDaysInMonth,                                                                  // 9653
      getDateInNextMonth: getDateInNextMonth,                                                                          // 9654
      getDateInPreviousMonth: getDateInPreviousMonth,                                                                  // 9655
      isInNextMonth: isInNextMonth,                                                                                    // 9656
      isInPreviousMonth: isInPreviousMonth,                                                                            // 9657
      getDateMidpoint: getDateMidpoint,                                                                                // 9658
      isSameMonthAndYear: isSameMonthAndYear,                                                                          // 9659
      getWeekOfMonth: getWeekOfMonth,                                                                                  // 9660
      incrementDays: incrementDays,                                                                                    // 9661
      incrementMonths: incrementMonths,                                                                                // 9662
      getLastDateOfMonth: getLastDateOfMonth,                                                                          // 9663
      isSameDay: isSameDay,                                                                                            // 9664
      getMonthDistance: getMonthDistance,                                                                              // 9665
      isValidDate: isValidDate,                                                                                        // 9666
      setDateTimeToMidnight: setDateTimeToMidnight,                                                                    // 9667
      createDateAtMidnight: createDateAtMidnight,                                                                      // 9668
      isDateWithinRange: isDateWithinRange                                                                             // 9669
    };                                                                                                                 // 9670
                                                                                                                       // 9671
    /**                                                                                                                // 9672
     * Gets the first day of the month for the given date's month.                                                     // 9673
     * @param {Date} date                                                                                              // 9674
     * @returns {Date}                                                                                                 // 9675
     */                                                                                                                // 9676
    function getFirstDateOfMonth(date) {                                                                               // 9677
      return new Date(date.getFullYear(), date.getMonth(), 1);                                                         // 9678
    }                                                                                                                  // 9679
                                                                                                                       // 9680
    /**                                                                                                                // 9681
     * Gets the number of days in the month for the given date's month.                                                // 9682
     * @param date                                                                                                     // 9683
     * @returns {number}                                                                                               // 9684
     */                                                                                                                // 9685
    function getNumberOfDaysInMonth(date) {                                                                            // 9686
      return new Date(date.getFullYear(), date.getMonth() + 1, 0).getDate();                                           // 9687
    }                                                                                                                  // 9688
                                                                                                                       // 9689
    /**                                                                                                                // 9690
     * Get an arbitrary date in the month after the given date's month.                                                // 9691
     * @param date                                                                                                     // 9692
     * @returns {Date}                                                                                                 // 9693
     */                                                                                                                // 9694
    function getDateInNextMonth(date) {                                                                                // 9695
      return new Date(date.getFullYear(), date.getMonth() + 1, 1);                                                     // 9696
    }                                                                                                                  // 9697
                                                                                                                       // 9698
    /**                                                                                                                // 9699
     * Get an arbitrary date in the month before the given date's month.                                               // 9700
     * @param date                                                                                                     // 9701
     * @returns {Date}                                                                                                 // 9702
     */                                                                                                                // 9703
    function getDateInPreviousMonth(date) {                                                                            // 9704
      return new Date(date.getFullYear(), date.getMonth() - 1, 1);                                                     // 9705
    }                                                                                                                  // 9706
                                                                                                                       // 9707
    /**                                                                                                                // 9708
     * Gets whether two dates have the same month and year.                                                            // 9709
     * @param {Date} d1                                                                                                // 9710
     * @param {Date} d2                                                                                                // 9711
     * @returns {boolean}                                                                                              // 9712
     */                                                                                                                // 9713
    function isSameMonthAndYear(d1, d2) {                                                                              // 9714
      return d1.getFullYear() === d2.getFullYear() && d1.getMonth() === d2.getMonth();                                 // 9715
    }                                                                                                                  // 9716
                                                                                                                       // 9717
    /**                                                                                                                // 9718
     * Gets whether two dates are the same day (not not necesarily the same time).                                     // 9719
     * @param {Date} d1                                                                                                // 9720
     * @param {Date} d2                                                                                                // 9721
     * @returns {boolean}                                                                                              // 9722
     */                                                                                                                // 9723
    function isSameDay(d1, d2) {                                                                                       // 9724
      return d1.getDate() == d2.getDate() && isSameMonthAndYear(d1, d2);                                               // 9725
    }                                                                                                                  // 9726
                                                                                                                       // 9727
    /**                                                                                                                // 9728
     * Gets whether a date is in the month immediately after some date.                                                // 9729
     * @param {Date} startDate The date from which to compare.                                                         // 9730
     * @param {Date} endDate The date to check.                                                                        // 9731
     * @returns {boolean}                                                                                              // 9732
     */                                                                                                                // 9733
    function isInNextMonth(startDate, endDate) {                                                                       // 9734
      var nextMonth = getDateInNextMonth(startDate);                                                                   // 9735
      return isSameMonthAndYear(nextMonth, endDate);                                                                   // 9736
    }                                                                                                                  // 9737
                                                                                                                       // 9738
    /**                                                                                                                // 9739
     * Gets whether a date is in the month immediately before some date.                                               // 9740
     * @param {Date} startDate The date from which to compare.                                                         // 9741
     * @param {Date} endDate The date to check.                                                                        // 9742
     * @returns {boolean}                                                                                              // 9743
     */                                                                                                                // 9744
    function isInPreviousMonth(startDate, endDate) {                                                                   // 9745
      var previousMonth = getDateInPreviousMonth(startDate);                                                           // 9746
      return isSameMonthAndYear(endDate, previousMonth);                                                               // 9747
    }                                                                                                                  // 9748
                                                                                                                       // 9749
    /**                                                                                                                // 9750
     * Gets the midpoint between two dates.                                                                            // 9751
     * @param {Date} d1                                                                                                // 9752
     * @param {Date} d2                                                                                                // 9753
     * @returns {Date}                                                                                                 // 9754
     */                                                                                                                // 9755
    function getDateMidpoint(d1, d2) {                                                                                 // 9756
      return createDateAtMidnight((d1.getTime() + d2.getTime()) / 2);                                                  // 9757
    }                                                                                                                  // 9758
                                                                                                                       // 9759
    /**                                                                                                                // 9760
     * Gets the week of the month that a given date occurs in.                                                         // 9761
     * @param {Date} date                                                                                              // 9762
     * @returns {number} Index of the week of the month (zero-based).                                                  // 9763
     */                                                                                                                // 9764
    function getWeekOfMonth(date) {                                                                                    // 9765
      var firstDayOfMonth = getFirstDateOfMonth(date);                                                                 // 9766
      return Math.floor((firstDayOfMonth.getDay() + date.getDate() - 1) / 7);                                          // 9767
    }                                                                                                                  // 9768
                                                                                                                       // 9769
    /**                                                                                                                // 9770
     * Gets a new date incremented by the given number of days. Number of days can be negative.                        // 9771
     * @param {Date} date                                                                                              // 9772
     * @param {number} numberOfDays                                                                                    // 9773
     * @returns {Date}                                                                                                 // 9774
     */                                                                                                                // 9775
    function incrementDays(date, numberOfDays) {                                                                       // 9776
      return new Date(date.getFullYear(), date.getMonth(), date.getDate() + numberOfDays);                             // 9777
    }                                                                                                                  // 9778
                                                                                                                       // 9779
    /**                                                                                                                // 9780
     * Gets a new date incremented by the given number of months. Number of months can be negative.                    // 9781
     * If the date of the given month does not match the target month, the date will be set to the                     // 9782
     * last day of the month.                                                                                          // 9783
     * @param {Date} date                                                                                              // 9784
     * @param {number} numberOfMonths                                                                                  // 9785
     * @returns {Date}                                                                                                 // 9786
     */                                                                                                                // 9787
    function incrementMonths(date, numberOfMonths) {                                                                   // 9788
      // If the same date in the target month does not actually exist, the Date object will                            // 9789
      // automatically advance *another* month by the number of missing days.                                          // 9790
      // For example, if you try to go from Jan. 30 to Feb. 30, you'll end up on March 2.                              // 9791
      // So, we check if the month overflowed and go to the last day of the target month instead.                      // 9792
      var dateInTargetMonth = new Date(date.getFullYear(), date.getMonth() + numberOfMonths, 1);                       // 9793
      var numberOfDaysInMonth = getNumberOfDaysInMonth(dateInTargetMonth);                                             // 9794
      if (numberOfDaysInMonth < date.getDate()) {                                                                      // 9795
        dateInTargetMonth.setDate(numberOfDaysInMonth);                                                                // 9796
      } else {                                                                                                         // 9797
        dateInTargetMonth.setDate(date.getDate());                                                                     // 9798
      }                                                                                                                // 9799
                                                                                                                       // 9800
      return dateInTargetMonth;                                                                                        // 9801
    }                                                                                                                  // 9802
                                                                                                                       // 9803
    /**                                                                                                                // 9804
     * Get the integer distance between two months. This *only* considers the month and year                           // 9805
     * portion of the Date instances.                                                                                  // 9806
     *                                                                                                                 // 9807
     * @param {Date} start                                                                                             // 9808
     * @param {Date} end                                                                                               // 9809
     * @returns {number} Number of months between `start` and `end`. If `end` is before `start`                        // 9810
     *     chronologically, this number will be negative.                                                              // 9811
     */                                                                                                                // 9812
    function getMonthDistance(start, end) {                                                                            // 9813
      return (12 * (end.getFullYear() - start.getFullYear())) + (end.getMonth() - start.getMonth());                   // 9814
    }                                                                                                                  // 9815
                                                                                                                       // 9816
    /**                                                                                                                // 9817
     * Gets the last day of the month for the given date.                                                              // 9818
     * @param {Date} date                                                                                              // 9819
     * @returns {Date}                                                                                                 // 9820
     */                                                                                                                // 9821
    function getLastDateOfMonth(date) {                                                                                // 9822
      return new Date(date.getFullYear(), date.getMonth(), getNumberOfDaysInMonth(date));                              // 9823
    }                                                                                                                  // 9824
                                                                                                                       // 9825
    /**                                                                                                                // 9826
     * Checks whether a date is valid.                                                                                 // 9827
     * @param {Date} date                                                                                              // 9828
     * @return {boolean} Whether the date is a valid Date.                                                             // 9829
     */                                                                                                                // 9830
    function isValidDate(date) {                                                                                       // 9831
      return date != null && date.getTime && !isNaN(date.getTime());                                                   // 9832
    }                                                                                                                  // 9833
                                                                                                                       // 9834
    /**                                                                                                                // 9835
     * Sets a date's time to midnight.                                                                                 // 9836
     * @param {Date} date                                                                                              // 9837
     */                                                                                                                // 9838
    function setDateTimeToMidnight(date) {                                                                             // 9839
      if (isValidDate(date)) {                                                                                         // 9840
        date.setHours(0, 0, 0, 0);                                                                                     // 9841
      }                                                                                                                // 9842
    }                                                                                                                  // 9843
                                                                                                                       // 9844
    /**                                                                                                                // 9845
     * Creates a date with the time set to midnight.                                                                   // 9846
     * Drop-in replacement for two forms of the Date constructor:                                                      // 9847
     * 1. No argument for Date representing now.                                                                       // 9848
     * 2. Single-argument value representing number of seconds since Unix Epoch                                        // 9849
     * or a Date object.                                                                                               // 9850
     * @param {number|Date=} opt_value                                                                                 // 9851
     * @return {Date} New date with time set to midnight.                                                              // 9852
     */                                                                                                                // 9853
    function createDateAtMidnight(opt_value) {                                                                         // 9854
      var date;                                                                                                        // 9855
      if (angular.isUndefined(opt_value)) {                                                                            // 9856
        date = new Date();                                                                                             // 9857
      } else {                                                                                                         // 9858
        date = new Date(opt_value);                                                                                    // 9859
      }                                                                                                                // 9860
      setDateTimeToMidnight(date);                                                                                     // 9861
      return date;                                                                                                     // 9862
    }                                                                                                                  // 9863
                                                                                                                       // 9864
     /**                                                                                                               // 9865
      * Checks if a date is within a min and max range, ignoring the time component.                                   // 9866
      * If minDate or maxDate are not dates, they are ignored.                                                         // 9867
      * @param {Date} date                                                                                             // 9868
      * @param {Date} minDate                                                                                          // 9869
      * @param {Date} maxDate                                                                                          // 9870
      */                                                                                                               // 9871
     function isDateWithinRange(date, minDate, maxDate) {                                                              // 9872
       var dateAtMidnight = createDateAtMidnight(date);                                                                // 9873
       var minDateAtMidnight = isValidDate(minDate) ? createDateAtMidnight(minDate) : null;                            // 9874
       var maxDateAtMidnight = isValidDate(maxDate) ? createDateAtMidnight(maxDate) : null;                            // 9875
       return (!minDateAtMidnight || minDateAtMidnight <= dateAtMidnight) &&                                           // 9876
           (!maxDateAtMidnight || maxDateAtMidnight >= dateAtMidnight);                                                // 9877
     }                                                                                                                 // 9878
  });                                                                                                                  // 9879
})();                                                                                                                  // 9880
                                                                                                                       // 9881
})();                                                                                                                  // 9882
(function(){                                                                                                           // 9883
"use strict";                                                                                                          // 9884
                                                                                                                       // 9885
/**                                                                                                                    // 9886
 * @ngdoc module                                                                                                       // 9887
 * @name material.components.content                                                                                   // 9888
 *                                                                                                                     // 9889
 * @description                                                                                                        // 9890
 * Scrollable content                                                                                                  // 9891
 */                                                                                                                    // 9892
angular.module('material.components.content', [                                                                        // 9893
  'material.core'                                                                                                      // 9894
])                                                                                                                     // 9895
  .directive('mdContent', mdContentDirective);                                                                         // 9896
                                                                                                                       // 9897
/**                                                                                                                    // 9898
 * @ngdoc directive                                                                                                    // 9899
 * @name mdContent                                                                                                     // 9900
 * @module material.components.content                                                                                 // 9901
 *                                                                                                                     // 9902
 * @restrict E                                                                                                         // 9903
 *                                                                                                                     // 9904
 * @description                                                                                                        // 9905
 * The `<md-content>` directive is a container element useful for scrollable content                                   // 9906
 *                                                                                                                     // 9907
 * @usage                                                                                                              // 9908
 *                                                                                                                     // 9909
 * - Add the `[layout-padding]` attribute to make the content padded.                                                  // 9910
 *                                                                                                                     // 9911
 * <hljs lang="html">                                                                                                  // 9912
 *  <md-content layout-padding>                                                                                        // 9913
 *      Lorem ipsum dolor sit amet, ne quod novum mei.                                                                 // 9914
 *  </md-content>                                                                                                      // 9915
 * </hljs>                                                                                                             // 9916
 *                                                                                                                     // 9917
 */                                                                                                                    // 9918
                                                                                                                       // 9919
function mdContentDirective($mdTheming) {                                                                              // 9920
  return {                                                                                                             // 9921
    restrict: 'E',                                                                                                     // 9922
    controller: ['$scope', '$element', ContentController],                                                             // 9923
    link: function(scope, element, attr) {                                                                             // 9924
      var node = element[0];                                                                                           // 9925
                                                                                                                       // 9926
      $mdTheming(element);                                                                                             // 9927
      scope.$broadcast('$mdContentLoaded', element);                                                                   // 9928
                                                                                                                       // 9929
      iosScrollFix(element[0]);                                                                                        // 9930
    }                                                                                                                  // 9931
  };                                                                                                                   // 9932
                                                                                                                       // 9933
  function ContentController($scope, $element) {                                                                       // 9934
    this.$scope = $scope;                                                                                              // 9935
    this.$element = $element;                                                                                          // 9936
  }                                                                                                                    // 9937
}                                                                                                                      // 9938
mdContentDirective.$inject = ["$mdTheming"];                                                                           // 9939
                                                                                                                       // 9940
function iosScrollFix(node) {                                                                                          // 9941
  // IOS FIX:                                                                                                          // 9942
  // If we scroll where there is no more room for the webview to scroll,                                               // 9943
  // by default the webview itself will scroll up and down, this looks really                                          // 9944
  // bad.  So if we are scrolling to the very top or bottom, add/subtract one                                          // 9945
  angular.element(node).on('$md.pressdown', function(ev) {                                                             // 9946
    // Only touch events                                                                                               // 9947
    if (ev.pointer.type !== 't') return;                                                                               // 9948
    // Don't let a child content's touchstart ruin it for us.                                                          // 9949
    if (ev.$materialScrollFixed) return;                                                                               // 9950
    ev.$materialScrollFixed = true;                                                                                    // 9951
                                                                                                                       // 9952
    if (node.scrollTop === 0) {                                                                                        // 9953
      node.scrollTop = 1;                                                                                              // 9954
    } else if (node.scrollHeight === node.scrollTop + node.offsetHeight) {                                             // 9955
      node.scrollTop -= 1;                                                                                             // 9956
    }                                                                                                                  // 9957
  });                                                                                                                  // 9958
}                                                                                                                      // 9959
                                                                                                                       // 9960
})();                                                                                                                  // 9961
(function(){                                                                                                           // 9962
"use strict";                                                                                                          // 9963
                                                                                                                       // 9964
(function() {                                                                                                          // 9965
  'use strict';                                                                                                        // 9966
                                                                                                                       // 9967
  /**                                                                                                                  // 9968
   * @ngdoc module                                                                                                     // 9969
   * @name material.components.fabActions                                                                              // 9970
   */                                                                                                                  // 9971
  angular                                                                                                              // 9972
    .module('material.components.fabActions', ['material.core'])                                                       // 9973
    .directive('mdFabActions', MdFabActionsDirective);                                                                 // 9974
                                                                                                                       // 9975
  /**                                                                                                                  // 9976
   * @ngdoc directive                                                                                                  // 9977
   * @name mdFabActions                                                                                                // 9978
   * @module material.components.fabActions                                                                            // 9979
   *                                                                                                                   // 9980
   * @restrict E                                                                                                       // 9981
   *                                                                                                                   // 9982
   * @description                                                                                                      // 9983
   * The `<md-fab-actions>` directive is used inside of a `<md-fab-speed-dial>` or                                     // 9984
   * `<md-fab-toolbar>` directive to mark an element (or elements) as the actions and setup the                        // 9985
   * proper event listeners.                                                                                           // 9986
   *                                                                                                                   // 9987
   * @usage                                                                                                            // 9988
   * See the `<md-fab-speed-dial>` or `<md-fab-toolbar>` directives for example usage.                                 // 9989
   */                                                                                                                  // 9990
  function MdFabActionsDirective() {                                                                                   // 9991
    return {                                                                                                           // 9992
      restrict: 'E',                                                                                                   // 9993
                                                                                                                       // 9994
      require: ['^?mdFabSpeedDial', '^?mdFabToolbar'],                                                                 // 9995
                                                                                                                       // 9996
      compile: function(element, attributes) {                                                                         // 9997
        var children = element.children();                                                                             // 9998
                                                                                                                       // 9999
        var hasNgRepeat = false;                                                                                       // 10000
                                                                                                                       // 10001
        angular.forEach(['', 'data-', 'x-'], function(prefix) {                                                        // 10002
          hasNgRepeat = hasNgRepeat || (children.attr(prefix + 'ng-repeat') ? true : false);                           // 10003
        });                                                                                                            // 10004
                                                                                                                       // 10005
        // Support both ng-repeat and static content                                                                   // 10006
        if (hasNgRepeat) {                                                                                             // 10007
          children.addClass('md-fab-action-item');                                                                     // 10008
        } else {                                                                                                       // 10009
          // Wrap every child in a new div and add a class that we can scale/fling independently                       // 10010
          children.wrap('<div class="md-fab-action-item">');                                                           // 10011
        }                                                                                                              // 10012
      }                                                                                                                // 10013
    }                                                                                                                  // 10014
  }                                                                                                                    // 10015
                                                                                                                       // 10016
})();                                                                                                                  // 10017
                                                                                                                       // 10018
})();                                                                                                                  // 10019
(function(){                                                                                                           // 10020
"use strict";                                                                                                          // 10021
                                                                                                                       // 10022
(function() {                                                                                                          // 10023
  'use strict';                                                                                                        // 10024
                                                                                                                       // 10025
  angular.module('material.components.fabShared', ['material.core'])                                                   // 10026
    .controller('FabController', FabController);                                                                       // 10027
                                                                                                                       // 10028
  function FabController($scope, $element, $animate, $mdUtil, $mdConstant, $timeout) {                                 // 10029
    var vm = this;                                                                                                     // 10030
                                                                                                                       // 10031
    // NOTE: We use async eval(s) below to avoid conflicts with any existing digest loops                              // 10032
                                                                                                                       // 10033
    vm.open = function() {                                                                                             // 10034
      $scope.$evalAsync("vm.isOpen = true");                                                                           // 10035
    };                                                                                                                 // 10036
                                                                                                                       // 10037
    vm.close = function() {                                                                                            // 10038
      // Async eval to avoid conflicts with existing digest loops                                                      // 10039
      $scope.$evalAsync("vm.isOpen = false");                                                                          // 10040
                                                                                                                       // 10041
      // Focus the trigger when the element closes so users can still tab to the next item                             // 10042
      $element.find('md-fab-trigger')[0].focus();                                                                      // 10043
    };                                                                                                                 // 10044
                                                                                                                       // 10045
    // Toggle the open/close state when the trigger is clicked                                                         // 10046
    vm.toggle = function() {                                                                                           // 10047
      $scope.$evalAsync("vm.isOpen = !vm.isOpen");                                                                     // 10048
    };                                                                                                                 // 10049
                                                                                                                       // 10050
    setupDefaults();                                                                                                   // 10051
    setupListeners();                                                                                                  // 10052
    setupWatchers();                                                                                                   // 10053
                                                                                                                       // 10054
    var initialAnimationAttempts = 0;                                                                                  // 10055
    fireInitialAnimations();                                                                                           // 10056
                                                                                                                       // 10057
    function setupDefaults() {                                                                                         // 10058
      // Set the default direction to 'down' if none is specified                                                      // 10059
      vm.direction = vm.direction || 'down';                                                                           // 10060
                                                                                                                       // 10061
      // Set the default to be closed                                                                                  // 10062
      vm.isOpen = vm.isOpen || false;                                                                                  // 10063
                                                                                                                       // 10064
      // Start the keyboard interaction at the first action                                                            // 10065
      resetActionIndex();                                                                                              // 10066
                                                                                                                       // 10067
      // Add an animations waiting class so we know not to run                                                         // 10068
      $element.addClass('md-animations-waiting');                                                                      // 10069
    }                                                                                                                  // 10070
                                                                                                                       // 10071
    function setupListeners() {                                                                                        // 10072
      var eventTypes = [                                                                                               // 10073
        'click', 'focusin', 'focusout'                                                                                 // 10074
      ];                                                                                                               // 10075
                                                                                                                       // 10076
      // Add our listeners                                                                                             // 10077
      angular.forEach(eventTypes, function(eventType) {                                                                // 10078
        $element.on(eventType, parseEvents);                                                                           // 10079
      });                                                                                                              // 10080
                                                                                                                       // 10081
      // Remove our listeners when destroyed                                                                           // 10082
      $scope.$on('$destroy', function() {                                                                              // 10083
        angular.forEach(eventTypes, function(eventType) {                                                              // 10084
          $element.off(eventType, parseEvents);                                                                        // 10085
        });                                                                                                            // 10086
                                                                                                                       // 10087
        // remove any attached keyboard handlers in case element is removed while                                      // 10088
        // speed dial is open                                                                                          // 10089
        disableKeyboard();                                                                                             // 10090
      });                                                                                                              // 10091
    }                                                                                                                  // 10092
                                                                                                                       // 10093
    var closeTimeout;                                                                                                  // 10094
    function parseEvents(event) {                                                                                      // 10095
      // If the event is a click, just handle it                                                                       // 10096
      if (event.type == 'click') {                                                                                     // 10097
        handleItemClick(event);                                                                                        // 10098
      }                                                                                                                // 10099
                                                                                                                       // 10100
      // If we focusout, set a timeout to close the element                                                            // 10101
      if (event.type == 'focusout' && !closeTimeout) {                                                                 // 10102
        closeTimeout = $timeout(function() {                                                                           // 10103
          vm.close();                                                                                                  // 10104
        }, 100, false);                                                                                                // 10105
      }                                                                                                                // 10106
                                                                                                                       // 10107
      // If we see a focusin and there is a timeout about to run, cancel it so we stay open                            // 10108
      if (event.type == 'focusin' && closeTimeout) {                                                                   // 10109
        $timeout.cancel(closeTimeout);                                                                                 // 10110
        closeTimeout = null;                                                                                           // 10111
      }                                                                                                                // 10112
    }                                                                                                                  // 10113
                                                                                                                       // 10114
    function resetActionIndex() {                                                                                      // 10115
      vm.currentActionIndex = -1;                                                                                      // 10116
    }                                                                                                                  // 10117
                                                                                                                       // 10118
    function setupWatchers() {                                                                                         // 10119
      // Watch for changes to the direction and update classes/attributes                                              // 10120
      $scope.$watch('vm.direction', function(newDir, oldDir) {                                                         // 10121
        // Add the appropriate classes so we can target the direction in the CSS                                       // 10122
        $animate.removeClass($element, 'md-' + oldDir);                                                                // 10123
        $animate.addClass($element, 'md-' + newDir);                                                                   // 10124
                                                                                                                       // 10125
        // Reset the action index since it may have changed                                                            // 10126
        resetActionIndex();                                                                                            // 10127
      });                                                                                                              // 10128
                                                                                                                       // 10129
      var trigger, actions;                                                                                            // 10130
                                                                                                                       // 10131
      // Watch for changes to md-open                                                                                  // 10132
      $scope.$watch('vm.isOpen', function(isOpen) {                                                                    // 10133
        // Reset the action index since it may have changed                                                            // 10134
        resetActionIndex();                                                                                            // 10135
                                                                                                                       // 10136
        // We can't get the trigger/actions outside of the watch because the component hasn't been                     // 10137
        // linked yet, so we wait until the first watch fires to cache them.                                           // 10138
        if (!trigger || !actions) {                                                                                    // 10139
          trigger = getTriggerElement();                                                                               // 10140
          actions = getActionsElement();                                                                               // 10141
        }                                                                                                              // 10142
                                                                                                                       // 10143
        if (isOpen) {                                                                                                  // 10144
          enableKeyboard();                                                                                            // 10145
        } else {                                                                                                       // 10146
          disableKeyboard();                                                                                           // 10147
        }                                                                                                              // 10148
                                                                                                                       // 10149
        var toAdd = isOpen ? 'md-is-open' : '';                                                                        // 10150
        var toRemove = isOpen ? '' : 'md-is-open';                                                                     // 10151
                                                                                                                       // 10152
        // Set the proper ARIA attributes                                                                              // 10153
        trigger.attr('aria-haspopup', true);                                                                           // 10154
        trigger.attr('aria-expanded', isOpen);                                                                         // 10155
        actions.attr('aria-hidden', !isOpen);                                                                          // 10156
                                                                                                                       // 10157
        // Animate the CSS classes                                                                                     // 10158
        $animate.setClass($element, toAdd, toRemove);                                                                  // 10159
      });                                                                                                              // 10160
    }                                                                                                                  // 10161
                                                                                                                       // 10162
    function fireInitialAnimations() {                                                                                 // 10163
      // If the element is actually visible on the screen                                                              // 10164
      if ($element[0].scrollHeight > 0) {                                                                              // 10165
        // Fire our animation                                                                                          // 10166
        $animate.addClass($element, 'md-animations-ready').then(function() {                                           // 10167
          // Remove the waiting class                                                                                  // 10168
          $element.removeClass('md-animations-waiting');                                                               // 10169
        });                                                                                                            // 10170
      }                                                                                                                // 10171
                                                                                                                       // 10172
      // Otherwise, try for up to 1 second before giving up                                                            // 10173
      else if (initialAnimationAttempts < 10) {                                                                        // 10174
        $timeout(fireInitialAnimations, 100);                                                                          // 10175
                                                                                                                       // 10176
        // Increment our counter                                                                                       // 10177
        initialAnimationAttempts = initialAnimationAttempts + 1;                                                       // 10178
      }                                                                                                                // 10179
    }                                                                                                                  // 10180
                                                                                                                       // 10181
    function enableKeyboard() {                                                                                        // 10182
      $element.on('keydown', keyPressed);                                                                              // 10183
                                                                                                                       // 10184
      // On the next tick, setup a check for outside clicks; we do this on the next tick to avoid                      // 10185
      // clicks/touches that result in the isOpen attribute changing (e.g. a bound radio button)                       // 10186
      $mdUtil.nextTick(function() {                                                                                    // 10187
        angular.element(document).on('click touchend', checkForOutsideClick);                                          // 10188
      });                                                                                                              // 10189
                                                                                                                       // 10190
      // TODO: On desktop, we should be able to reset the indexes so you cannot tab through, but                       // 10191
      // this breaks accessibility, especially on mobile, since you have no arrow keys to press                        // 10192
      //resetActionTabIndexes();                                                                                       // 10193
    }                                                                                                                  // 10194
                                                                                                                       // 10195
    function disableKeyboard() {                                                                                       // 10196
      $element.off('keydown', keyPressed);                                                                             // 10197
      angular.element(document).off('click touchend', checkForOutsideClick);                                           // 10198
    }                                                                                                                  // 10199
                                                                                                                       // 10200
    function checkForOutsideClick(event) {                                                                             // 10201
      if (event.target) {                                                                                              // 10202
        var closestTrigger = $mdUtil.getClosest(event.target, 'md-fab-trigger');                                       // 10203
        var closestActions = $mdUtil.getClosest(event.target, 'md-fab-actions');                                       // 10204
                                                                                                                       // 10205
        if (!closestTrigger && !closestActions) {                                                                      // 10206
          vm.close();                                                                                                  // 10207
        }                                                                                                              // 10208
      }                                                                                                                // 10209
    }                                                                                                                  // 10210
                                                                                                                       // 10211
    function keyPressed(event) {                                                                                       // 10212
      switch (event.which) {                                                                                           // 10213
        case $mdConstant.KEY_CODE.ESCAPE: vm.close(); event.preventDefault(); return false;                            // 10214
        case $mdConstant.KEY_CODE.LEFT_ARROW: doKeyLeft(event); return false;                                          // 10215
        case $mdConstant.KEY_CODE.UP_ARROW: doKeyUp(event); return false;                                              // 10216
        case $mdConstant.KEY_CODE.RIGHT_ARROW: doKeyRight(event); return false;                                        // 10217
        case $mdConstant.KEY_CODE.DOWN_ARROW: doKeyDown(event); return false;                                          // 10218
      }                                                                                                                // 10219
    }                                                                                                                  // 10220
                                                                                                                       // 10221
    function doActionPrev(event) {                                                                                     // 10222
      focusAction(event, -1);                                                                                          // 10223
    }                                                                                                                  // 10224
                                                                                                                       // 10225
    function doActionNext(event) {                                                                                     // 10226
      focusAction(event, 1);                                                                                           // 10227
    }                                                                                                                  // 10228
                                                                                                                       // 10229
    function focusAction(event, direction) {                                                                           // 10230
      var actions = resetActionTabIndexes();                                                                           // 10231
                                                                                                                       // 10232
      // Increment/decrement the counter with restrictions                                                             // 10233
      vm.currentActionIndex = vm.currentActionIndex + direction;                                                       // 10234
      vm.currentActionIndex = Math.min(actions.length - 1, vm.currentActionIndex);                                     // 10235
      vm.currentActionIndex = Math.max(0, vm.currentActionIndex);                                                      // 10236
                                                                                                                       // 10237
      // Focus the element                                                                                             // 10238
      var focusElement =  angular.element(actions[vm.currentActionIndex]).children()[0];                               // 10239
      angular.element(focusElement).attr('tabindex', 0);                                                               // 10240
      focusElement.focus();                                                                                            // 10241
                                                                                                                       // 10242
      // Make sure the event doesn't bubble and cause something else                                                   // 10243
      event.preventDefault();                                                                                          // 10244
      event.stopImmediatePropagation();                                                                                // 10245
    }                                                                                                                  // 10246
                                                                                                                       // 10247
    function resetActionTabIndexes() {                                                                                 // 10248
      // Grab all of the actions                                                                                       // 10249
      var actions = getActionsElement()[0].querySelectorAll('.md-fab-action-item');                                    // 10250
                                                                                                                       // 10251
      // Disable all other actions for tabbing                                                                         // 10252
      angular.forEach(actions, function(action) {                                                                      // 10253
        angular.element(angular.element(action).children()[0]).attr('tabindex', -1);                                   // 10254
      });                                                                                                              // 10255
                                                                                                                       // 10256
      return actions;                                                                                                  // 10257
    }                                                                                                                  // 10258
                                                                                                                       // 10259
    function doKeyLeft(event) {                                                                                        // 10260
      if (vm.direction === 'left') {                                                                                   // 10261
        doActionNext(event);                                                                                           // 10262
      } else {                                                                                                         // 10263
        doActionPrev(event);                                                                                           // 10264
      }                                                                                                                // 10265
    }                                                                                                                  // 10266
                                                                                                                       // 10267
    function doKeyUp(event) {                                                                                          // 10268
      if (vm.direction === 'down') {                                                                                   // 10269
        doActionPrev(event);                                                                                           // 10270
      } else {                                                                                                         // 10271
        doActionNext(event);                                                                                           // 10272
      }                                                                                                                // 10273
    }                                                                                                                  // 10274
                                                                                                                       // 10275
    function doKeyRight(event) {                                                                                       // 10276
      if (vm.direction === 'left') {                                                                                   // 10277
        doActionPrev(event);                                                                                           // 10278
      } else {                                                                                                         // 10279
        doActionNext(event);                                                                                           // 10280
      }                                                                                                                // 10281
    }                                                                                                                  // 10282
                                                                                                                       // 10283
    function doKeyDown(event) {                                                                                        // 10284
      if (vm.direction === 'up') {                                                                                     // 10285
        doActionPrev(event);                                                                                           // 10286
      } else {                                                                                                         // 10287
        doActionNext(event);                                                                                           // 10288
      }                                                                                                                // 10289
    }                                                                                                                  // 10290
                                                                                                                       // 10291
    function isTrigger(element) {                                                                                      // 10292
      return $mdUtil.getClosest(element, 'md-fab-trigger');                                                            // 10293
    }                                                                                                                  // 10294
                                                                                                                       // 10295
    function isAction(element) {                                                                                       // 10296
      return $mdUtil.getClosest(element, 'md-fab-actions');                                                            // 10297
    }                                                                                                                  // 10298
                                                                                                                       // 10299
    function handleItemClick(event) {                                                                                  // 10300
      if (isTrigger(event.target)) {                                                                                   // 10301
        vm.toggle();                                                                                                   // 10302
      }                                                                                                                // 10303
                                                                                                                       // 10304
      if (isAction(event.target)) {                                                                                    // 10305
        vm.close();                                                                                                    // 10306
      }                                                                                                                // 10307
    }                                                                                                                  // 10308
                                                                                                                       // 10309
    function getTriggerElement() {                                                                                     // 10310
      return $element.find('md-fab-trigger');                                                                          // 10311
    }                                                                                                                  // 10312
                                                                                                                       // 10313
    function getActionsElement() {                                                                                     // 10314
      return $element.find('md-fab-actions');                                                                          // 10315
    }                                                                                                                  // 10316
  }                                                                                                                    // 10317
  FabController.$inject = ["$scope", "$element", "$animate", "$mdUtil", "$mdConstant", "$timeout"];                    // 10318
})();                                                                                                                  // 10319
                                                                                                                       // 10320
})();                                                                                                                  // 10321
(function(){                                                                                                           // 10322
"use strict";                                                                                                          // 10323
                                                                                                                       // 10324
(function() {                                                                                                          // 10325
  'use strict';                                                                                                        // 10326
                                                                                                                       // 10327
  /**                                                                                                                  // 10328
   * The duration of the CSS animation in milliseconds.                                                                // 10329
   *                                                                                                                   // 10330
   * @type {number}                                                                                                    // 10331
   */                                                                                                                  // 10332
  var cssAnimationDuration = 300;                                                                                      // 10333
                                                                                                                       // 10334
  /**                                                                                                                  // 10335
   * @ngdoc module                                                                                                     // 10336
   * @name material.components.fabSpeedDial                                                                            // 10337
   */                                                                                                                  // 10338
  angular                                                                                                              // 10339
    // Declare our module                                                                                              // 10340
    .module('material.components.fabSpeedDial', [                                                                      // 10341
      'material.core',                                                                                                 // 10342
      'material.components.fabShared',                                                                                 // 10343
      'material.components.fabTrigger',                                                                                // 10344
      'material.components.fabActions'                                                                                 // 10345
    ])                                                                                                                 // 10346
                                                                                                                       // 10347
    // Register our directive                                                                                          // 10348
    .directive('mdFabSpeedDial', MdFabSpeedDialDirective)                                                              // 10349
                                                                                                                       // 10350
    // Register our custom animations                                                                                  // 10351
    .animation('.md-fling', MdFabSpeedDialFlingAnimation)                                                              // 10352
    .animation('.md-scale', MdFabSpeedDialScaleAnimation)                                                              // 10353
                                                                                                                       // 10354
    // Register a service for each animation so that we can easily inject them into unit tests                         // 10355
    .service('mdFabSpeedDialFlingAnimation', MdFabSpeedDialFlingAnimation)                                             // 10356
    .service('mdFabSpeedDialScaleAnimation', MdFabSpeedDialScaleAnimation);                                            // 10357
                                                                                                                       // 10358
  /**                                                                                                                  // 10359
   * @ngdoc directive                                                                                                  // 10360
   * @name mdFabSpeedDial                                                                                              // 10361
   * @module material.components.fabSpeedDial                                                                          // 10362
   *                                                                                                                   // 10363
   * @restrict E                                                                                                       // 10364
   *                                                                                                                   // 10365
   * @description                                                                                                      // 10366
   * The `<md-fab-speed-dial>` directive is used to present a series of popup elements (usually                        // 10367
   * `<md-button>`s) for quick access to common actions.                                                               // 10368
   *                                                                                                                   // 10369
   * There are currently two animations available by applying one of the following classes to                          // 10370
   * the component:                                                                                                    // 10371
   *                                                                                                                   // 10372
   *  - `md-fling` - The speed dial items appear from underneath the trigger and move into their                       // 10373
   *    appropriate positions.                                                                                         // 10374
   *  - `md-scale` - The speed dial items appear in their proper places by scaling from 0% to 100%.                    // 10375
   *                                                                                                                   // 10376
   * You may also easily position the trigger by applying one one of the following classes to the                      // 10377
   * `<md-fab-speed-dial>` element:                                                                                    // 10378
   *  - `md-fab-top-left`                                                                                              // 10379
   *  - `md-fab-top-right`                                                                                             // 10380
   *  - `md-fab-bottom-left`                                                                                           // 10381
   *  - `md-fab-bottom-right`                                                                                          // 10382
   *                                                                                                                   // 10383
   * These CSS classes use `position: absolute`, so you need to ensure that the container element                      // 10384
   * also uses `position: absolute` or `position: relative` in order for them to work.                                 // 10385
   *                                                                                                                   // 10386
   * Additionally, you may use the standard `ng-mouseenter` and `ng-mouseleave` directives to                          // 10387
   * open or close the speed dial. However, if you wish to allow users to hover over the empty                         // 10388
   * space where the actions will appear, you must also add the `md-hover-full` class to the speed                     // 10389
   * dial element. Without this, the hover effect will only occur on top of the trigger.                               // 10390
   *                                                                                                                   // 10391
   * See the demos for more information.                                                                               // 10392
   *                                                                                                                   // 10393
   * ## Troubleshooting                                                                                                // 10394
   *                                                                                                                   // 10395
   * If your speed dial shows the closing animation upon launch, you may need to use `ng-cloak` on                     // 10396
   * the parent container to ensure that it is only visible once ready. We have plans to remove this                   // 10397
   * necessity in the future.                                                                                          // 10398
   *                                                                                                                   // 10399
   * @usage                                                                                                            // 10400
   * <hljs lang="html">                                                                                                // 10401
   * <md-fab-speed-dial md-direction="up" class="md-fling">                                                            // 10402
   *   <md-fab-trigger>                                                                                                // 10403
   *     <md-button aria-label="Add..."><md-icon icon="/img/icons/plus.svg"></md-icon></md-button>                     // 10404
   *   </md-fab-trigger>                                                                                               // 10405
   *                                                                                                                   // 10406
   *   <md-fab-actions>                                                                                                // 10407
   *     <md-button aria-label="Add User">                                                                             // 10408
   *       <md-icon icon="/img/icons/user.svg"></md-icon>                                                              // 10409
   *     </md-button>                                                                                                  // 10410
   *                                                                                                                   // 10411
   *     <md-button aria-label="Add Group">                                                                            // 10412
   *       <md-icon icon="/img/icons/group.svg"></md-icon>                                                             // 10413
   *     </md-button>                                                                                                  // 10414
   *   </md-fab-actions>                                                                                               // 10415
   * </md-fab-speed-dial>                                                                                              // 10416
   * </hljs>                                                                                                           // 10417
   *                                                                                                                   // 10418
   * @param {string} md-direction From which direction you would like the speed dial to appear                         // 10419
   * relative to the trigger element.                                                                                  // 10420
   * @param {expression=} md-open Programmatically control whether or not the speed-dial is visible.                   // 10421
   */                                                                                                                  // 10422
  function MdFabSpeedDialDirective() {                                                                                 // 10423
    return {                                                                                                           // 10424
      restrict: 'E',                                                                                                   // 10425
                                                                                                                       // 10426
      scope: {                                                                                                         // 10427
        direction: '@?mdDirection',                                                                                    // 10428
        isOpen: '=?mdOpen'                                                                                             // 10429
      },                                                                                                               // 10430
                                                                                                                       // 10431
      bindToController: true,                                                                                          // 10432
      controller: 'FabController',                                                                                     // 10433
      controllerAs: 'vm',                                                                                              // 10434
                                                                                                                       // 10435
      link: FabSpeedDialLink                                                                                           // 10436
    };                                                                                                                 // 10437
                                                                                                                       // 10438
    function FabSpeedDialLink(scope, element) {                                                                        // 10439
      // Prepend an element to hold our CSS variables so we can use them in the animations below                       // 10440
      element.prepend('<div class="md-css-variables"></div>');                                                         // 10441
    }                                                                                                                  // 10442
  }                                                                                                                    // 10443
                                                                                                                       // 10444
  function MdFabSpeedDialFlingAnimation($timeout) {                                                                    // 10445
    function delayDone(done) { $timeout(done, cssAnimationDuration, false); }                                          // 10446
                                                                                                                       // 10447
    function runAnimation(element) {                                                                                   // 10448
      // Don't run if we are still waiting and we are not ready                                                        // 10449
      if (element.hasClass('md-animations-waiting') && !element.hasClass('md-animations-ready')) {                     // 10450
        return;                                                                                                        // 10451
      }                                                                                                                // 10452
                                                                                                                       // 10453
      var el = element[0];                                                                                             // 10454
      var ctrl = element.controller('mdFabSpeedDial');                                                                 // 10455
      var items = el.querySelectorAll('.md-fab-action-item');                                                          // 10456
                                                                                                                       // 10457
      // Grab our trigger element                                                                                      // 10458
      var triggerElement = el.querySelector('md-fab-trigger');                                                         // 10459
                                                                                                                       // 10460
      // Grab our element which stores CSS variables                                                                   // 10461
      var variablesElement = el.querySelector('.md-css-variables');                                                    // 10462
                                                                                                                       // 10463
      // Setup JS variables based on our CSS variables                                                                 // 10464
      var startZIndex = parseInt(window.getComputedStyle(variablesElement).zIndex);                                    // 10465
                                                                                                                       // 10466
      // Always reset the items to their natural position/state                                                        // 10467
      angular.forEach(items, function(item, index) {                                                                   // 10468
        var styles = item.style;                                                                                       // 10469
                                                                                                                       // 10470
        styles.transform = styles.webkitTransform = '';                                                                // 10471
        styles.transitionDelay = '';                                                                                   // 10472
        styles.opacity = 1;                                                                                            // 10473
                                                                                                                       // 10474
        // Make the items closest to the trigger have the highest z-index                                              // 10475
        styles.zIndex = (items.length - index) + startZIndex;                                                          // 10476
      });                                                                                                              // 10477
                                                                                                                       // 10478
      // Set the trigger to be above all of the actions so they disappear behind it.                                   // 10479
      triggerElement.style.zIndex = startZIndex + items.length + 1;                                                    // 10480
                                                                                                                       // 10481
      // If the control is closed, hide the items behind the trigger                                                   // 10482
      if (!ctrl.isOpen) {                                                                                              // 10483
        angular.forEach(items, function(item, index) {                                                                 // 10484
          var newPosition, axis;                                                                                       // 10485
          var styles = item.style;                                                                                     // 10486
                                                                                                                       // 10487
          // Make sure to account for differences in the dimensions of the trigger verses the items                    // 10488
          // so that we can properly center everything; this helps hide the item's shadows behind                      // 10489
          // the trigger.                                                                                              // 10490
          var triggerItemHeightOffset = (triggerElement.clientHeight - item.clientHeight) / 2;                         // 10491
          var triggerItemWidthOffset = (triggerElement.clientWidth - item.clientWidth) / 2;                            // 10492
                                                                                                                       // 10493
          switch (ctrl.direction) {                                                                                    // 10494
            case 'up':                                                                                                 // 10495
              newPosition = (item.scrollHeight * (index + 1) + triggerItemHeightOffset);                               // 10496
              axis = 'Y';                                                                                              // 10497
              break;                                                                                                   // 10498
            case 'down':                                                                                               // 10499
              newPosition = -(item.scrollHeight * (index + 1) + triggerItemHeightOffset);                              // 10500
              axis = 'Y';                                                                                              // 10501
              break;                                                                                                   // 10502
            case 'left':                                                                                               // 10503
              newPosition = (item.scrollWidth * (index + 1) + triggerItemWidthOffset);                                 // 10504
              axis = 'X';                                                                                              // 10505
              break;                                                                                                   // 10506
            case 'right':                                                                                              // 10507
              newPosition = -(item.scrollWidth * (index + 1) + triggerItemWidthOffset);                                // 10508
              axis = 'X';                                                                                              // 10509
              break;                                                                                                   // 10510
          }                                                                                                            // 10511
                                                                                                                       // 10512
          var newTranslate = 'translate' + axis + '(' + newPosition + 'px)';                                           // 10513
                                                                                                                       // 10514
          styles.transform = styles.webkitTransform = newTranslate;                                                    // 10515
        });                                                                                                            // 10516
      }                                                                                                                // 10517
    }                                                                                                                  // 10518
                                                                                                                       // 10519
    return {                                                                                                           // 10520
      addClass: function(element, className, done) {                                                                   // 10521
        if (element.hasClass('md-fling')) {                                                                            // 10522
          runAnimation(element);                                                                                       // 10523
          delayDone(done);                                                                                             // 10524
        } else {                                                                                                       // 10525
          done();                                                                                                      // 10526
        }                                                                                                              // 10527
      },                                                                                                               // 10528
      removeClass: function(element, className, done) {                                                                // 10529
        runAnimation(element);                                                                                         // 10530
        delayDone(done);                                                                                               // 10531
      }                                                                                                                // 10532
    }                                                                                                                  // 10533
  }                                                                                                                    // 10534
  MdFabSpeedDialFlingAnimation.$inject = ["$timeout"];                                                                 // 10535
                                                                                                                       // 10536
  function MdFabSpeedDialScaleAnimation($timeout) {                                                                    // 10537
    function delayDone(done) { $timeout(done, cssAnimationDuration, false); }                                          // 10538
                                                                                                                       // 10539
    var delay = 65;                                                                                                    // 10540
                                                                                                                       // 10541
    function runAnimation(element) {                                                                                   // 10542
      var el = element[0];                                                                                             // 10543
      var ctrl = element.controller('mdFabSpeedDial');                                                                 // 10544
      var items = el.querySelectorAll('.md-fab-action-item');                                                          // 10545
                                                                                                                       // 10546
      // Grab our element which stores CSS variables                                                                   // 10547
      var variablesElement = el.querySelector('.md-css-variables');                                                    // 10548
                                                                                                                       // 10549
      // Setup JS variables based on our CSS variables                                                                 // 10550
      var startZIndex = parseInt(window.getComputedStyle(variablesElement).zIndex);                                    // 10551
                                                                                                                       // 10552
      // Always reset the items to their natural position/state                                                        // 10553
      angular.forEach(items, function(item, index) {                                                                   // 10554
        var styles = item.style,                                                                                       // 10555
          offsetDelay = index * delay;                                                                                 // 10556
                                                                                                                       // 10557
        styles.opacity = ctrl.isOpen ? 1 : 0;                                                                          // 10558
        styles.transform = styles.webkitTransform = ctrl.isOpen ? 'scale(1)' : 'scale(0)';                             // 10559
        styles.transitionDelay = (ctrl.isOpen ? offsetDelay : (items.length - offsetDelay)) + 'ms';                    // 10560
                                                                                                                       // 10561
        // Make the items closest to the trigger have the highest z-index                                              // 10562
        styles.zIndex = (items.length - index) + startZIndex;                                                          // 10563
      });                                                                                                              // 10564
    }                                                                                                                  // 10565
                                                                                                                       // 10566
    return {                                                                                                           // 10567
      addClass: function(element, className, done) {                                                                   // 10568
        runAnimation(element);                                                                                         // 10569
        delayDone(done);                                                                                               // 10570
      },                                                                                                               // 10571
                                                                                                                       // 10572
      removeClass: function(element, className, done) {                                                                // 10573
        runAnimation(element);                                                                                         // 10574
        delayDone(done);                                                                                               // 10575
      }                                                                                                                // 10576
    }                                                                                                                  // 10577
  }                                                                                                                    // 10578
  MdFabSpeedDialScaleAnimation.$inject = ["$timeout"];                                                                 // 10579
})();                                                                                                                  // 10580
                                                                                                                       // 10581
})();                                                                                                                  // 10582
(function(){                                                                                                           // 10583
"use strict";                                                                                                          // 10584
                                                                                                                       // 10585
(function() {                                                                                                          // 10586
  'use strict';                                                                                                        // 10587
                                                                                                                       // 10588
  /**                                                                                                                  // 10589
   * @ngdoc module                                                                                                     // 10590
   * @name material.components.fabToolbar                                                                              // 10591
   */                                                                                                                  // 10592
  angular                                                                                                              // 10593
    // Declare our module                                                                                              // 10594
    .module('material.components.fabToolbar', [                                                                        // 10595
      'material.core',                                                                                                 // 10596
      'material.components.fabShared',                                                                                 // 10597
      'material.components.fabTrigger',                                                                                // 10598
      'material.components.fabActions'                                                                                 // 10599
    ])                                                                                                                 // 10600
                                                                                                                       // 10601
    // Register our directive                                                                                          // 10602
    .directive('mdFabToolbar', MdFabToolbarDirective)                                                                  // 10603
                                                                                                                       // 10604
    // Register our custom animations                                                                                  // 10605
    .animation('.md-fab-toolbar', MdFabToolbarAnimation)                                                               // 10606
                                                                                                                       // 10607
    // Register a service for the animation so that we can easily inject it into unit tests                            // 10608
    .service('mdFabToolbarAnimation', MdFabToolbarAnimation);                                                          // 10609
                                                                                                                       // 10610
  /**                                                                                                                  // 10611
   * @ngdoc directive                                                                                                  // 10612
   * @name mdFabToolbar                                                                                                // 10613
   * @module material.components.fabToolbar                                                                            // 10614
   *                                                                                                                   // 10615
   * @restrict E                                                                                                       // 10616
   *                                                                                                                   // 10617
   * @description                                                                                                      // 10618
   *                                                                                                                   // 10619
   * The `<md-fab-toolbar>` directive is used present a toolbar of elements (usually `<md-button>`s)                   // 10620
   * for quick access to common actions when a floating action button is activated (via click or                       // 10621
   * keyboard navigation).                                                                                             // 10622
   *                                                                                                                   // 10623
   * You may also easily position the trigger by applying one one of the following classes to the                      // 10624
   * `<md-fab-toolbar>` element:                                                                                       // 10625
   *  - `md-fab-top-left`                                                                                              // 10626
   *  - `md-fab-top-right`                                                                                             // 10627
   *  - `md-fab-bottom-left`                                                                                           // 10628
   *  - `md-fab-bottom-right`                                                                                          // 10629
   *                                                                                                                   // 10630
   * These CSS classes use `position: absolute`, so you need to ensure that the container element                      // 10631
   * also uses `position: absolute` or `position: relative` in order for them to work.                                 // 10632
   *                                                                                                                   // 10633
   * @usage                                                                                                            // 10634
   *                                                                                                                   // 10635
   * <hljs lang="html">                                                                                                // 10636
   * <md-fab-toolbar md-direction='left'>                                                                              // 10637
   *   <md-fab-trigger>                                                                                                // 10638
   *     <md-button aria-label="Add..."><md-icon icon="/img/icons/plus.svg"></md-icon></md-button>                     // 10639
   *   </md-fab-trigger>                                                                                               // 10640
   *                                                                                                                   // 10641
   *   <md-fab-actions>                                                                                                // 10642
   *     <md-button aria-label="Add User">                                                                             // 10643
   *       <md-icon icon="/img/icons/user.svg"></md-icon>                                                              // 10644
   *     </md-button>                                                                                                  // 10645
   *                                                                                                                   // 10646
   *     <md-button aria-label="Add Group">                                                                            // 10647
   *       <md-icon icon="/img/icons/group.svg"></md-icon>                                                             // 10648
   *     </md-button>                                                                                                  // 10649
   *   </md-fab-actions>                                                                                               // 10650
   * </md-fab-toolbar>                                                                                                 // 10651
   * </hljs>                                                                                                           // 10652
   *                                                                                                                   // 10653
   * @param {string} md-direction From which direction you would like the toolbar items to appear                      // 10654
   * relative to the trigger element. Supports `left` and `right` directions.                                          // 10655
   * @param {expression=} md-open Programmatically control whether or not the toolbar is visible.                      // 10656
   */                                                                                                                  // 10657
  function MdFabToolbarDirective() {                                                                                   // 10658
    return {                                                                                                           // 10659
      restrict: 'E',                                                                                                   // 10660
      transclude: true,                                                                                                // 10661
      template: '<div class="md-fab-toolbar-wrapper">' +                                                               // 10662
      '  <div class="md-fab-toolbar-content" ng-transclude></div>' +                                                   // 10663
      '</div>',                                                                                                        // 10664
                                                                                                                       // 10665
      scope: {                                                                                                         // 10666
        direction: '@?mdDirection',                                                                                    // 10667
        isOpen: '=?mdOpen'                                                                                             // 10668
      },                                                                                                               // 10669
                                                                                                                       // 10670
      bindToController: true,                                                                                          // 10671
      controller: 'FabController',                                                                                     // 10672
      controllerAs: 'vm',                                                                                              // 10673
                                                                                                                       // 10674
      link: link                                                                                                       // 10675
    };                                                                                                                 // 10676
                                                                                                                       // 10677
    function link(scope, element, attributes) {                                                                        // 10678
      // Add the base class for animations                                                                             // 10679
      element.addClass('md-fab-toolbar');                                                                              // 10680
                                                                                                                       // 10681
      // Prepend the background element to the trigger's button                                                        // 10682
      element.find('md-fab-trigger').find('button')                                                                    // 10683
        .prepend('<div class="md-fab-toolbar-background"></div>');                                                     // 10684
    }                                                                                                                  // 10685
  }                                                                                                                    // 10686
                                                                                                                       // 10687
  function MdFabToolbarAnimation() {                                                                                   // 10688
                                                                                                                       // 10689
    function runAnimation(element, className, done) {                                                                  // 10690
      // If no className was specified, don't do anything                                                              // 10691
      if (!className) {                                                                                                // 10692
        return;                                                                                                        // 10693
      }                                                                                                                // 10694
                                                                                                                       // 10695
      var el = element[0];                                                                                             // 10696
      var ctrl = element.controller('mdFabToolbar');                                                                   // 10697
                                                                                                                       // 10698
      // Grab the relevant child elements                                                                              // 10699
      var backgroundElement = el.querySelector('.md-fab-toolbar-background');                                          // 10700
      var triggerElement = el.querySelector('md-fab-trigger button');                                                  // 10701
      var toolbarElement = el.querySelector('md-toolbar');                                                             // 10702
      var iconElement = el.querySelector('md-fab-trigger button md-icon');                                             // 10703
      var actions = element.find('md-fab-actions').children();                                                         // 10704
                                                                                                                       // 10705
      // If we have both elements, use them to position the new background                                             // 10706
      if (triggerElement && backgroundElement) {                                                                       // 10707
        // Get our variables                                                                                           // 10708
        var color = window.getComputedStyle(triggerElement).getPropertyValue('background-color');                      // 10709
        var width = el.offsetWidth;                                                                                    // 10710
        var height = el.offsetHeight;                                                                                  // 10711
                                                                                                                       // 10712
        // Make it twice as big as it should be since we scale from the center                                         // 10713
        var scale = 2 * (width / triggerElement.offsetWidth);                                                          // 10714
                                                                                                                       // 10715
        // Set some basic styles no matter what animation we're doing                                                  // 10716
        backgroundElement.style.backgroundColor = color;                                                               // 10717
        backgroundElement.style.borderRadius = width + 'px';                                                           // 10718
                                                                                                                       // 10719
        // If we're open                                                                                               // 10720
        if (ctrl.isOpen) {                                                                                             // 10721
          // Turn on toolbar pointer events when closed                                                                // 10722
          toolbarElement.style.pointerEvents = 'initial';                                                              // 10723
                                                                                                                       // 10724
          backgroundElement.style.width = triggerElement.offsetWidth + 'px';                                           // 10725
          backgroundElement.style.height = triggerElement.offsetHeight + 'px';                                         // 10726
          backgroundElement.style.transform = 'scale(' + scale + ')';                                                  // 10727
                                                                                                                       // 10728
          // Set the next close animation to have the proper delays                                                    // 10729
          backgroundElement.style.transitionDelay = '0ms';                                                             // 10730
          iconElement && (iconElement.style.transitionDelay = '.3s');                                                  // 10731
                                                                                                                       // 10732
          // Apply a transition delay to actions                                                                       // 10733
          angular.forEach(actions, function(action, index) {                                                           // 10734
            action.style.transitionDelay = (actions.length - index) * 25 + 'ms';                                       // 10735
          });                                                                                                          // 10736
        } else {                                                                                                       // 10737
          // Turn off toolbar pointer events when closed                                                               // 10738
          toolbarElement.style.pointerEvents = 'none';                                                                 // 10739
                                                                                                                       // 10740
          // Scale it back down to the trigger's size                                                                  // 10741
          backgroundElement.style.transform = 'scale(1)';                                                              // 10742
                                                                                                                       // 10743
          // Reset the position                                                                                        // 10744
          backgroundElement.style.top = '0';                                                                           // 10745
                                                                                                                       // 10746
          if (element.hasClass('md-right')) {                                                                          // 10747
            backgroundElement.style.left = '0';                                                                        // 10748
            backgroundElement.style.right = null;                                                                      // 10749
          }                                                                                                            // 10750
                                                                                                                       // 10751
          if (element.hasClass('md-left')) {                                                                           // 10752
            backgroundElement.style.right = '0';                                                                       // 10753
            backgroundElement.style.left = null;                                                                       // 10754
          }                                                                                                            // 10755
                                                                                                                       // 10756
          // Set the next open animation to have the proper delays                                                     // 10757
          backgroundElement.style.transitionDelay = '200ms';                                                           // 10758
          iconElement && (iconElement.style.transitionDelay = '0ms');                                                  // 10759
                                                                                                                       // 10760
          // Apply a transition delay to actions                                                                       // 10761
          angular.forEach(actions, function(action, index) {                                                           // 10762
            action.style.transitionDelay = 200 + (index * 25) + 'ms';                                                  // 10763
          });                                                                                                          // 10764
        }                                                                                                              // 10765
      }                                                                                                                // 10766
    }                                                                                                                  // 10767
                                                                                                                       // 10768
    return {                                                                                                           // 10769
      addClass: function(element, className, done) {                                                                   // 10770
        runAnimation(element, className, done);                                                                        // 10771
        done();                                                                                                        // 10772
      },                                                                                                               // 10773
                                                                                                                       // 10774
      removeClass: function(element, className, done) {                                                                // 10775
        runAnimation(element, className, done);                                                                        // 10776
        done();                                                                                                        // 10777
      }                                                                                                                // 10778
    }                                                                                                                  // 10779
  }                                                                                                                    // 10780
})();                                                                                                                  // 10781
})();                                                                                                                  // 10782
(function(){                                                                                                           // 10783
"use strict";                                                                                                          // 10784
                                                                                                                       // 10785
/**                                                                                                                    // 10786
 * @ngdoc module                                                                                                       // 10787
 * @name material.components.gridList                                                                                  // 10788
 */                                                                                                                    // 10789
angular.module('material.components.gridList', ['material.core'])                                                      // 10790
       .directive('mdGridList', GridListDirective)                                                                     // 10791
       .directive('mdGridTile', GridTileDirective)                                                                     // 10792
       .directive('mdGridTileFooter', GridTileCaptionDirective)                                                        // 10793
       .directive('mdGridTileHeader', GridTileCaptionDirective)                                                        // 10794
       .factory('$mdGridLayout', GridLayoutFactory);                                                                   // 10795
                                                                                                                       // 10796
/**                                                                                                                    // 10797
 * @ngdoc directive                                                                                                    // 10798
 * @name mdGridList                                                                                                    // 10799
 * @module material.components.gridList                                                                                // 10800
 * @restrict E                                                                                                         // 10801
 * @description                                                                                                        // 10802
 * Grid lists are an alternative to standard list views. Grid lists are distinct                                       // 10803
 * from grids used for layouts and other visual presentations.                                                         // 10804
 *                                                                                                                     // 10805
 * A grid list is best suited to presenting a homogenous data type, typically                                          // 10806
 * images, and is optimized for visual comprehension and differentiating between                                       // 10807
 * like data types.                                                                                                    // 10808
 *                                                                                                                     // 10809
 * A grid list is a continuous element consisting of tessellated, regular                                              // 10810
 * subdivisions called cells that contain tiles (`md-grid-tile`).                                                      // 10811
 *                                                                                                                     // 10812
 * <img src="//material-design.storage.googleapis.com/publish/v_2/material_ext_publish/0Bx4BSt6jniD7OVlEaXZ5YmU1Xzg/components_grids_usage2.png"
 *    style="width: 300px; height: auto; margin-right: 16px;" alt="Concept of grid explained visually">                // 10814
 * <img src="//material-design.storage.googleapis.com/publish/v_2/material_ext_publish/0Bx4BSt6jniD7VGhsOE5idWlJWXM/components_grids_usage3.png"
 *    style="width: 300px; height: auto;" alt="Grid concepts legend">                                                  // 10816
 *                                                                                                                     // 10817
 * Cells are arrayed vertically and horizontally within the grid.                                                      // 10818
 *                                                                                                                     // 10819
 * Tiles hold content and can span one or more cells vertically or horizontally.                                       // 10820
 *                                                                                                                     // 10821
 * ### Responsive Attributes                                                                                           // 10822
 *                                                                                                                     // 10823
 * The `md-grid-list` directive supports "responsive" attributes, which allow                                          // 10824
 * different `md-cols`, `md-gutter` and `md-row-height` values depending on the                                        // 10825
 * currently matching media query.                                                                                     // 10826
 *                                                                                                                     // 10827
 * In order to set a responsive attribute, first define the fallback value with                                        // 10828
 * the standard attribute name, then add additional attributes with the                                                // 10829
 * following convention: `{base-attribute-name}-{media-query-name}="{value}"`                                          // 10830
 * (ie. `md-cols-lg="8"`)                                                                                              // 10831
 *                                                                                                                     // 10832
 * @param {number} md-cols Number of columns in the grid.                                                              // 10833
 * @param {string} md-row-height One of                                                                                // 10834
 * <ul>                                                                                                                // 10835
 *   <li>CSS length - Fixed height rows (eg. `8px` or `1rem`)</li>                                                     // 10836
 *   <li>`{width}:{height}` - Ratio of width to height (eg.                                                            // 10837
 *   `md-row-height="16:9"`)</li>                                                                                      // 10838
 *   <li>`"fit"` - Height will be determined by subdividing the available                                              // 10839
 *   height by the number of rows</li>                                                                                 // 10840
 * </ul>                                                                                                               // 10841
 * @param {string=} md-gutter The amount of space between tiles in CSS units                                           // 10842
 *     (default 1px)                                                                                                   // 10843
 * @param {expression=} md-on-layout Expression to evaluate after layout. Event                                        // 10844
 *     object is available as `$event`, and contains performance information.                                          // 10845
 *                                                                                                                     // 10846
 * @usage                                                                                                              // 10847
 * Basic:                                                                                                              // 10848
 * <hljs lang="html">                                                                                                  // 10849
 * <md-grid-list md-cols="5" md-gutter="1em" md-row-height="4:3">                                                      // 10850
 *   <md-grid-tile></md-grid-tile>                                                                                     // 10851
 * </md-grid-list>                                                                                                     // 10852
 * </hljs>                                                                                                             // 10853
 *                                                                                                                     // 10854
 * Fixed-height rows:                                                                                                  // 10855
 * <hljs lang="html">                                                                                                  // 10856
 * <md-grid-list md-cols="4" md-row-height="200px" ...>                                                                // 10857
 *   <md-grid-tile></md-grid-tile>                                                                                     // 10858
 * </md-grid-list>                                                                                                     // 10859
 * </hljs>                                                                                                             // 10860
 *                                                                                                                     // 10861
 * Fit rows:                                                                                                           // 10862
 * <hljs lang="html">                                                                                                  // 10863
 * <md-grid-list md-cols="4" md-row-height="fit" style="height: 400px;" ...>                                           // 10864
 *   <md-grid-tile></md-grid-tile>                                                                                     // 10865
 * </md-grid-list>                                                                                                     // 10866
 * </hljs>                                                                                                             // 10867
 *                                                                                                                     // 10868
 * Using responsive attributes:                                                                                        // 10869
 * <hljs lang="html">                                                                                                  // 10870
 * <md-grid-list                                                                                                       // 10871
 *     md-cols-sm="2"                                                                                                  // 10872
 *     md-cols-md="4"                                                                                                  // 10873
 *     md-cols-lg="8"                                                                                                  // 10874
 *     md-cols-gt-lg="12"                                                                                              // 10875
 *     ...>                                                                                                            // 10876
 *   <md-grid-tile></md-grid-tile>                                                                                     // 10877
 * </md-grid-list>                                                                                                     // 10878
 * </hljs>                                                                                                             // 10879
 */                                                                                                                    // 10880
function GridListDirective($interpolate, $mdConstant, $mdGridLayout, $mdMedia) {                                       // 10881
  return {                                                                                                             // 10882
    restrict: 'E',                                                                                                     // 10883
    controller: GridListController,                                                                                    // 10884
    scope: {                                                                                                           // 10885
      mdOnLayout: '&'                                                                                                  // 10886
    },                                                                                                                 // 10887
    link: postLink                                                                                                     // 10888
  };                                                                                                                   // 10889
                                                                                                                       // 10890
  function postLink(scope, element, attrs, ctrl) {                                                                     // 10891
    // Apply semantics                                                                                                 // 10892
    element.attr('role', 'list');                                                                                      // 10893
                                                                                                                       // 10894
    // Provide the controller with a way to trigger layouts.                                                           // 10895
    ctrl.layoutDelegate = layoutDelegate;                                                                              // 10896
                                                                                                                       // 10897
    var invalidateLayout = angular.bind(ctrl, ctrl.invalidateLayout),                                                  // 10898
        unwatchAttrs = watchMedia();                                                                                   // 10899
      scope.$on('$destroy', unwatchMedia);                                                                             // 10900
                                                                                                                       // 10901
    /**                                                                                                                // 10902
     * Watches for changes in media, invalidating layout as necessary.                                                 // 10903
     */                                                                                                                // 10904
    function watchMedia() {                                                                                            // 10905
      for (var mediaName in $mdConstant.MEDIA) {                                                                       // 10906
        $mdMedia(mediaName); // initialize                                                                             // 10907
        $mdMedia.getQuery($mdConstant.MEDIA[mediaName])                                                                // 10908
            .addListener(invalidateLayout);                                                                            // 10909
      }                                                                                                                // 10910
      return $mdMedia.watchResponsiveAttributes(                                                                       // 10911
          ['md-cols', 'md-row-height', 'md-gutter'], attrs, layoutIfMediaMatch);                                       // 10912
    }                                                                                                                  // 10913
                                                                                                                       // 10914
    function unwatchMedia() {                                                                                          // 10915
      ctrl.layoutDelegate = angular.noop;                                                                              // 10916
                                                                                                                       // 10917
      unwatchAttrs();                                                                                                  // 10918
      for (var mediaName in $mdConstant.MEDIA) {                                                                       // 10919
        $mdMedia.getQuery($mdConstant.MEDIA[mediaName])                                                                // 10920
            .removeListener(invalidateLayout);                                                                         // 10921
      }                                                                                                                // 10922
    }                                                                                                                  // 10923
                                                                                                                       // 10924
    /**                                                                                                                // 10925
     * Performs grid layout if the provided mediaName matches the currently                                            // 10926
     * active media type.                                                                                              // 10927
     */                                                                                                                // 10928
    function layoutIfMediaMatch(mediaName) {                                                                           // 10929
      if (mediaName == null) {                                                                                         // 10930
        // TODO(shyndman): It would be nice to only layout if we have                                                  // 10931
        // instances of attributes using this media type                                                               // 10932
        ctrl.invalidateLayout();                                                                                       // 10933
      } else if ($mdMedia(mediaName)) {                                                                                // 10934
        ctrl.invalidateLayout();                                                                                       // 10935
      }                                                                                                                // 10936
    }                                                                                                                  // 10937
                                                                                                                       // 10938
    var lastLayoutProps;                                                                                               // 10939
                                                                                                                       // 10940
    /**                                                                                                                // 10941
     * Invokes the layout engine, and uses its results to lay out our                                                  // 10942
     * tile elements.                                                                                                  // 10943
     *                                                                                                                 // 10944
     * @param {boolean} tilesInvalidated Whether tiles have been                                                       // 10945
     *    added/removed/moved since the last layout. This is to avoid situations                                       // 10946
     *    where tiles are replaced with properties identical to their removed                                          // 10947
     *    counterparts.                                                                                                // 10948
     */                                                                                                                // 10949
    function layoutDelegate(tilesInvalidated) {                                                                        // 10950
      var tiles = getTileElements();                                                                                   // 10951
      var props = {                                                                                                    // 10952
        tileSpans: getTileSpans(tiles),                                                                                // 10953
        colCount: getColumnCount(),                                                                                    // 10954
        rowMode: getRowMode(),                                                                                         // 10955
        rowHeight: getRowHeight(),                                                                                     // 10956
        gutter: getGutter()                                                                                            // 10957
      };                                                                                                               // 10958
                                                                                                                       // 10959
      if (!tilesInvalidated && angular.equals(props, lastLayoutProps)) {                                               // 10960
        return;                                                                                                        // 10961
      }                                                                                                                // 10962
                                                                                                                       // 10963
      var performance =                                                                                                // 10964
        $mdGridLayout(props.colCount, props.tileSpans, tiles)                                                          // 10965
          .map(function(tilePositions, rowCount) {                                                                     // 10966
            return {                                                                                                   // 10967
              grid: {                                                                                                  // 10968
                element: element,                                                                                      // 10969
                style: getGridStyle(props.colCount, rowCount,                                                          // 10970
                    props.gutter, props.rowMode, props.rowHeight)                                                      // 10971
              },                                                                                                       // 10972
              tiles: tilePositions.map(function(ps, i) {                                                               // 10973
                return {                                                                                               // 10974
                  element: angular.element(tiles[i]),                                                                  // 10975
                  style: getTileStyle(ps.position, ps.spans,                                                           // 10976
                      props.colCount, rowCount,                                                                        // 10977
                      props.gutter, props.rowMode, props.rowHeight)                                                    // 10978
                }                                                                                                      // 10979
              })                                                                                                       // 10980
            }                                                                                                          // 10981
          })                                                                                                           // 10982
          .reflow()                                                                                                    // 10983
          .performance();                                                                                              // 10984
                                                                                                                       // 10985
      // Report layout                                                                                                 // 10986
      scope.mdOnLayout({                                                                                               // 10987
        $event: {                                                                                                      // 10988
          performance: performance                                                                                     // 10989
        }                                                                                                              // 10990
      });                                                                                                              // 10991
                                                                                                                       // 10992
      lastLayoutProps = props;                                                                                         // 10993
    }                                                                                                                  // 10994
                                                                                                                       // 10995
    // Use $interpolate to do some simple string interpolation as a convenience.                                       // 10996
                                                                                                                       // 10997
    var startSymbol = $interpolate.startSymbol();                                                                      // 10998
    var endSymbol = $interpolate.endSymbol();                                                                          // 10999
                                                                                                                       // 11000
    // Returns an expression wrapped in the interpolator's start and end symbols.                                      // 11001
    function expr(exprStr) {                                                                                           // 11002
      return startSymbol + exprStr + endSymbol;                                                                        // 11003
    }                                                                                                                  // 11004
                                                                                                                       // 11005
    // The amount of space a single 1x1 tile would take up (either width or height), used as                           // 11006
    // a basis for other calculations. This consists of taking the base size percent (as would be                      // 11007
    // if evenly dividing the size between cells), and then subtracting the size of one gutter.                        // 11008
    // However, since there are no gutters on the edges, each tile only uses a fration                                 // 11009
    // (gutterShare = numGutters / numCells) of the gutter size. (Imagine having one gutter per                        // 11010
    // tile, and then breaking up the extra gutter on the edge evenly among the cells).                                // 11011
    var UNIT = $interpolate(expr('share') + '% - (' + expr('gutter') + ' * ' + expr('gutterShare') + ')');             // 11012
                                                                                                                       // 11013
    // The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.                        // 11014
    // The position comes the size of a 1x1 tile plus gutter for each previous tile in the                             // 11015
    // row/column (offset).                                                                                            // 11016
    var POSITION  = $interpolate('calc((' + expr('unit') + ' + ' + expr('gutter') + ') * ' + expr('offset') + ')');    // 11017
                                                                                                                       // 11018
    // The actual size of a tile, e.g., width or height, taking rowSpan or colSpan into account.                       // 11019
    // This is computed by multiplying the base unit by the rowSpan/colSpan, and then adding back                      // 11020
    // in the space that the gutter would normally have used (which was already accounted for in                       // 11021
    // the base unit calculation).                                                                                     // 11022
    var DIMENSION = $interpolate('calc((' + expr('unit') + ') * ' + expr('span') + ' + (' + expr('span') + ' - 1) * ' + expr('gutter') + ')');
                                                                                                                       // 11024
    /**                                                                                                                // 11025
     * Gets the styles applied to a tile element described by the given parameters.                                    // 11026
     * @param {{row: number, col: number}} position The row and column indices of the tile.                            // 11027
     * @param {{row: number, col: number}} spans The rowSpan and colSpan of the tile.                                  // 11028
     * @param {number} colCount The number of columns.                                                                 // 11029
     * @param {number} rowCount The number of rows.                                                                    // 11030
     * @param {string} gutter The amount of space between tiles. This will be something like                           // 11031
     *     '5px' or '2em'.                                                                                             // 11032
     * @param {string} rowMode The row height mode. Can be one of:                                                     // 11033
     *     'fixed': all rows have a fixed size, given by rowHeight,                                                    // 11034
     *     'ratio': row height defined as a ratio to width, or                                                         // 11035
     *     'fit': fit to the grid-list element height, divinding evenly among rows.                                    // 11036
     * @param {string|number} rowHeight The height of a row. This is only used for 'fixed' mode and                    // 11037
     *     for 'ratio' mode. For 'ratio' mode, this is the *ratio* of width-to-height (e.g., 0.75).                    // 11038
     * @returns {Object} Map of CSS properties to be applied to the style element. Will define                         // 11039
     *     values for top, left, width, height, marginTop, and paddingTop.                                             // 11040
     */                                                                                                                // 11041
    function getTileStyle(position, spans, colCount, rowCount, gutter, rowMode, rowHeight) {                           // 11042
      // TODO(shyndman): There are style caching opportunities here.                                                   // 11043
                                                                                                                       // 11044
      // Percent of the available horizontal space that one column takes up.                                           // 11045
      var hShare = (1 / colCount) * 100;                                                                               // 11046
                                                                                                                       // 11047
      // Fraction of the gutter size that each column takes up.                                                        // 11048
      var hGutterShare = (colCount - 1) / colCount;                                                                    // 11049
                                                                                                                       // 11050
      // Base horizontal size of a column.                                                                             // 11051
      var hUnit = UNIT({share: hShare, gutterShare: hGutterShare, gutter: gutter});                                    // 11052
                                                                                                                       // 11053
      // The width and horizontal position of each tile is always calculated the same way, but the                     // 11054
      // height and vertical position depends on the rowMode.                                                          // 11055
      var style = {                                                                                                    // 11056
        left: POSITION({ unit: hUnit, offset: position.col, gutter: gutter }),                                         // 11057
        width: DIMENSION({ unit: hUnit, span: spans.col, gutter: gutter }),                                            // 11058
        // resets                                                                                                      // 11059
        paddingTop: '',                                                                                                // 11060
        marginTop: '',                                                                                                 // 11061
        top: '',                                                                                                       // 11062
        height: ''                                                                                                     // 11063
      };                                                                                                               // 11064
                                                                                                                       // 11065
      switch (rowMode) {                                                                                               // 11066
        case 'fixed':                                                                                                  // 11067
          // In fixed mode, simply use the given rowHeight.                                                            // 11068
          style.top = POSITION({ unit: rowHeight, offset: position.row, gutter: gutter });                             // 11069
          style.height = DIMENSION({ unit: rowHeight, span: spans.row, gutter: gutter });                              // 11070
          break;                                                                                                       // 11071
                                                                                                                       // 11072
        case 'ratio':                                                                                                  // 11073
          // Percent of the available vertical space that one row takes up. Here, rowHeight holds                      // 11074
          // the ratio value. For example, if the width:height ratio is 4:3, rowHeight = 1.333.                        // 11075
          var vShare = hShare / rowHeight;                                                                             // 11076
                                                                                                                       // 11077
          // Base veritcal size of a row.                                                                              // 11078
          var vUnit = UNIT({ share: vShare, gutterShare: hGutterShare, gutter: gutter });                              // 11079
                                                                                                                       // 11080
          // padidngTop and marginTop are used to maintain the given aspect ratio, as                                  // 11081
          // a percentage-based value for these properties is applied to the *width* of the                            // 11082
          // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties                                // 11083
          style.paddingTop = DIMENSION({ unit: vUnit, span: spans.row, gutter: gutter});                               // 11084
          style.marginTop = POSITION({ unit: vUnit, offset: position.row, gutter: gutter });                           // 11085
          break;                                                                                                       // 11086
                                                                                                                       // 11087
        case 'fit':                                                                                                    // 11088
          // Fraction of the gutter size that each column takes up.                                                    // 11089
          var vGutterShare = (rowCount - 1) / rowCount;                                                                // 11090
                                                                                                                       // 11091
          // Percent of the available vertical space that one row takes up.                                            // 11092
          var vShare = (1 / rowCount) * 100;                                                                           // 11093
                                                                                                                       // 11094
          // Base vertical size of a row.                                                                              // 11095
          var vUnit = UNIT({share: vShare, gutterShare: vGutterShare, gutter: gutter});                                // 11096
                                                                                                                       // 11097
          style.top = POSITION({unit: vUnit, offset: position.row, gutter: gutter});                                   // 11098
          style.height = DIMENSION({unit: vUnit, span: spans.row, gutter: gutter});                                    // 11099
          break;                                                                                                       // 11100
      }                                                                                                                // 11101
                                                                                                                       // 11102
      return style;                                                                                                    // 11103
    }                                                                                                                  // 11104
                                                                                                                       // 11105
    function getGridStyle(colCount, rowCount, gutter, rowMode, rowHeight) {                                            // 11106
      var style = {};                                                                                                  // 11107
                                                                                                                       // 11108
      switch(rowMode) {                                                                                                // 11109
        case 'fixed':                                                                                                  // 11110
          style.height = DIMENSION({ unit: rowHeight, span: rowCount, gutter: gutter });                               // 11111
          style.paddingBottom = '';                                                                                    // 11112
          break;                                                                                                       // 11113
                                                                                                                       // 11114
        case 'ratio':                                                                                                  // 11115
          // rowHeight is width / height                                                                               // 11116
          var hGutterShare = colCount === 1 ? 0 : (colCount - 1) / colCount,                                           // 11117
              hShare = (1 / colCount) * 100,                                                                           // 11118
              vShare = hShare * (1 / rowHeight),                                                                       // 11119
              vUnit = UNIT({ share: vShare, gutterShare: hGutterShare, gutter: gutter });                              // 11120
                                                                                                                       // 11121
          style.height = '';                                                                                           // 11122
          style.paddingBottom = DIMENSION({ unit: vUnit, span: rowCount, gutter: gutter});                             // 11123
          break;                                                                                                       // 11124
                                                                                                                       // 11125
        case 'fit':                                                                                                    // 11126
          // noop, as the height is user set                                                                           // 11127
          break;                                                                                                       // 11128
      }                                                                                                                // 11129
                                                                                                                       // 11130
      return style;                                                                                                    // 11131
    }                                                                                                                  // 11132
                                                                                                                       // 11133
    function getTileElements() {                                                                                       // 11134
      return [].filter.call(element.children(), function(ele) {                                                        // 11135
        return ele.tagName == 'MD-GRID-TILE' && !ele.$$mdDestroyed;                                                    // 11136
      });                                                                                                              // 11137
    }                                                                                                                  // 11138
                                                                                                                       // 11139
    /**                                                                                                                // 11140
     * Gets an array of objects containing the rowspan and colspan for each tile.                                      // 11141
     * @returns {Array<{row: number, col: number}>}                                                                    // 11142
     */                                                                                                                // 11143
    function getTileSpans(tileElements) {                                                                              // 11144
      return [].map.call(tileElements, function(ele) {                                                                 // 11145
        var ctrl = angular.element(ele).controller('mdGridTile');                                                      // 11146
        return {                                                                                                       // 11147
          row: parseInt(                                                                                               // 11148
              $mdMedia.getResponsiveAttribute(ctrl.$attrs, 'md-rowspan'), 10) || 1,                                    // 11149
          col: parseInt(                                                                                               // 11150
              $mdMedia.getResponsiveAttribute(ctrl.$attrs, 'md-colspan'), 10) || 1                                     // 11151
        };                                                                                                             // 11152
      });                                                                                                              // 11153
    }                                                                                                                  // 11154
                                                                                                                       // 11155
    function getColumnCount() {                                                                                        // 11156
      var colCount = parseInt($mdMedia.getResponsiveAttribute(attrs, 'md-cols'), 10);                                  // 11157
      if (isNaN(colCount)) {                                                                                           // 11158
        throw 'md-grid-list: md-cols attribute was not found, or contained a non-numeric value';                       // 11159
      }                                                                                                                // 11160
      return colCount;                                                                                                 // 11161
    }                                                                                                                  // 11162
                                                                                                                       // 11163
    function getGutter() {                                                                                             // 11164
      return applyDefaultUnit($mdMedia.getResponsiveAttribute(attrs, 'md-gutter') || 1);                               // 11165
    }                                                                                                                  // 11166
                                                                                                                       // 11167
    function getRowHeight() {                                                                                          // 11168
      var rowHeight = $mdMedia.getResponsiveAttribute(attrs, 'md-row-height');                                         // 11169
      switch (getRowMode()) {                                                                                          // 11170
        case 'fixed':                                                                                                  // 11171
          return applyDefaultUnit(rowHeight);                                                                          // 11172
        case 'ratio':                                                                                                  // 11173
          var whRatio = rowHeight.split(':');                                                                          // 11174
          return parseFloat(whRatio[0]) / parseFloat(whRatio[1]);                                                      // 11175
        case 'fit':                                                                                                    // 11176
          return 0; // N/A                                                                                             // 11177
      }                                                                                                                // 11178
    }                                                                                                                  // 11179
                                                                                                                       // 11180
    function getRowMode() {                                                                                            // 11181
      var rowHeight = $mdMedia.getResponsiveAttribute(attrs, 'md-row-height');                                         // 11182
      if (rowHeight == 'fit') {                                                                                        // 11183
        return 'fit';                                                                                                  // 11184
      } else if (rowHeight.indexOf(':') !== -1) {                                                                      // 11185
        return 'ratio';                                                                                                // 11186
      } else {                                                                                                         // 11187
        return 'fixed';                                                                                                // 11188
      }                                                                                                                // 11189
    }                                                                                                                  // 11190
                                                                                                                       // 11191
    function applyDefaultUnit(val) {                                                                                   // 11192
      return /\D$/.test(val) ? val : val + 'px';                                                                       // 11193
    }                                                                                                                  // 11194
  }                                                                                                                    // 11195
}                                                                                                                      // 11196
GridListDirective.$inject = ["$interpolate", "$mdConstant", "$mdGridLayout", "$mdMedia"];                              // 11197
                                                                                                                       // 11198
/* @ngInject */                                                                                                        // 11199
function GridListController($mdUtil) {                                                                                 // 11200
  this.layoutInvalidated = false;                                                                                      // 11201
  this.tilesInvalidated = false;                                                                                       // 11202
  this.$timeout_ = $mdUtil.nextTick;                                                                                   // 11203
  this.layoutDelegate = angular.noop;                                                                                  // 11204
}                                                                                                                      // 11205
GridListController.$inject = ["$mdUtil"];                                                                              // 11206
                                                                                                                       // 11207
GridListController.prototype = {                                                                                       // 11208
  invalidateTiles: function() {                                                                                        // 11209
    this.tilesInvalidated = true;                                                                                      // 11210
    this.invalidateLayout();                                                                                           // 11211
  },                                                                                                                   // 11212
                                                                                                                       // 11213
  invalidateLayout: function() {                                                                                       // 11214
    if (this.layoutInvalidated) {                                                                                      // 11215
      return;                                                                                                          // 11216
    }                                                                                                                  // 11217
    this.layoutInvalidated = true;                                                                                     // 11218
    this.$timeout_(angular.bind(this, this.layout));                                                                   // 11219
  },                                                                                                                   // 11220
                                                                                                                       // 11221
  layout: function() {                                                                                                 // 11222
    try {                                                                                                              // 11223
      this.layoutDelegate(this.tilesInvalidated);                                                                      // 11224
    } finally {                                                                                                        // 11225
      this.layoutInvalidated = false;                                                                                  // 11226
      this.tilesInvalidated = false;                                                                                   // 11227
    }                                                                                                                  // 11228
  }                                                                                                                    // 11229
};                                                                                                                     // 11230
                                                                                                                       // 11231
                                                                                                                       // 11232
/* @ngInject */                                                                                                        // 11233
function GridLayoutFactory($mdUtil) {                                                                                  // 11234
  var defaultAnimator = GridTileAnimator;                                                                              // 11235
                                                                                                                       // 11236
  /**                                                                                                                  // 11237
   * Set the reflow animator callback                                                                                  // 11238
   */                                                                                                                  // 11239
  GridLayout.animateWith = function(customAnimator) {                                                                  // 11240
    defaultAnimator = !angular.isFunction(customAnimator) ? GridTileAnimator : customAnimator;                         // 11241
  };                                                                                                                   // 11242
                                                                                                                       // 11243
  return GridLayout;                                                                                                   // 11244
                                                                                                                       // 11245
  /**                                                                                                                  // 11246
   * Publish layout function                                                                                           // 11247
   */                                                                                                                  // 11248
  function GridLayout(colCount, tileSpans) {                                                                           // 11249
      var self, layoutInfo, gridStyles, layoutTime, mapTime, reflowTime;                                               // 11250
                                                                                                                       // 11251
      layoutTime = $mdUtil.time(function() {                                                                           // 11252
        layoutInfo = calculateGridFor(colCount, tileSpans);                                                            // 11253
      });                                                                                                              // 11254
                                                                                                                       // 11255
      return self = {                                                                                                  // 11256
                                                                                                                       // 11257
        /**                                                                                                            // 11258
         * An array of objects describing each tile's position in the grid.                                            // 11259
         */                                                                                                            // 11260
        layoutInfo: function() {                                                                                       // 11261
          return layoutInfo;                                                                                           // 11262
        },                                                                                                             // 11263
                                                                                                                       // 11264
        /**                                                                                                            // 11265
         * Maps grid positioning to an element and a set of styles using the                                           // 11266
         * provided updateFn.                                                                                          // 11267
         */                                                                                                            // 11268
        map: function(updateFn) {                                                                                      // 11269
          mapTime = $mdUtil.time(function() {                                                                          // 11270
            var info = self.layoutInfo();                                                                              // 11271
            gridStyles = updateFn(info.positioning, info.rowCount);                                                    // 11272
          });                                                                                                          // 11273
          return self;                                                                                                 // 11274
        },                                                                                                             // 11275
                                                                                                                       // 11276
        /**                                                                                                            // 11277
         * Default animator simply sets the element.css( <styles> ). An alternate                                      // 11278
         * animator can be provided as an argument. The function has the following                                     // 11279
         * signature:                                                                                                  // 11280
         *                                                                                                             // 11281
         *    function({grid: {element: JQLite, style: Object}, tiles: Array<{element: JQLite, style: Object}>)        // 11282
         */                                                                                                            // 11283
        reflow: function(animatorFn) {                                                                                 // 11284
          reflowTime = $mdUtil.time(function() {                                                                       // 11285
            var animator = animatorFn || defaultAnimator;                                                              // 11286
            animator(gridStyles.grid, gridStyles.tiles);                                                               // 11287
          });                                                                                                          // 11288
          return self;                                                                                                 // 11289
        },                                                                                                             // 11290
                                                                                                                       // 11291
        /**                                                                                                            // 11292
         * Timing for the most recent layout run.                                                                      // 11293
         */                                                                                                            // 11294
        performance: function() {                                                                                      // 11295
          return {                                                                                                     // 11296
            tileCount: tileSpans.length,                                                                               // 11297
            layoutTime: layoutTime,                                                                                    // 11298
            mapTime: mapTime,                                                                                          // 11299
            reflowTime: reflowTime,                                                                                    // 11300
            totalTime: layoutTime + mapTime + reflowTime                                                               // 11301
          };                                                                                                           // 11302
        }                                                                                                              // 11303
      };                                                                                                               // 11304
    }                                                                                                                  // 11305
                                                                                                                       // 11306
  /**                                                                                                                  // 11307
   * Default Gridlist animator simple sets the css for each element;                                                   // 11308
   * NOTE: any transitions effects must be manually set in the CSS.                                                    // 11309
   * e.g.                                                                                                              // 11310
   *                                                                                                                   // 11311
   *  md-grid-tile {                                                                                                   // 11312
   *    transition: all 700ms ease-out 50ms;                                                                           // 11313
   *  }                                                                                                                // 11314
   *                                                                                                                   // 11315
   */                                                                                                                  // 11316
  function GridTileAnimator(grid, tiles) {                                                                             // 11317
    grid.element.css(grid.style);                                                                                      // 11318
    tiles.forEach(function(t) {                                                                                        // 11319
      t.element.css(t.style);                                                                                          // 11320
    })                                                                                                                 // 11321
  }                                                                                                                    // 11322
                                                                                                                       // 11323
  /**                                                                                                                  // 11324
   * Calculates the positions of tiles.                                                                                // 11325
   *                                                                                                                   // 11326
   * The algorithm works as follows:                                                                                   // 11327
   *    An Array<Number> with length colCount (spaceTracker) keeps track of                                            // 11328
   *    available tiling positions, where elements of value 0 represents an                                            // 11329
   *    empty position. Space for a tile is reserved by finding a sequence of                                          // 11330
   *    0s with length <= than the tile's colspan. When such a space has been                                          // 11331
   *    found, the occupied tile positions are incremented by the tile's                                               // 11332
   *    rowspan value, as these positions have become unavailable for that                                             // 11333
   *    many rows.                                                                                                     // 11334
   *                                                                                                                   // 11335
   *    If the end of a row has been reached without finding space for the                                             // 11336
   *    tile, spaceTracker's elements are each decremented by 1 to a minimum                                           // 11337
   *    of 0. Rows are searched in this fashion until space is found.                                                  // 11338
   */                                                                                                                  // 11339
  function calculateGridFor(colCount, tileSpans) {                                                                     // 11340
    var curCol = 0,                                                                                                    // 11341
        curRow = 0,                                                                                                    // 11342
        spaceTracker = newSpaceTracker();                                                                              // 11343
                                                                                                                       // 11344
    return {                                                                                                           // 11345
      positioning: tileSpans.map(function(spans, i) {                                                                  // 11346
        return {                                                                                                       // 11347
          spans: spans,                                                                                                // 11348
          position: reserveSpace(spans, i)                                                                             // 11349
        };                                                                                                             // 11350
      }),                                                                                                              // 11351
      rowCount: curRow + Math.max.apply(Math, spaceTracker)                                                            // 11352
    };                                                                                                                 // 11353
                                                                                                                       // 11354
    function reserveSpace(spans, i) {                                                                                  // 11355
      if (spans.col > colCount) {                                                                                      // 11356
        throw 'md-grid-list: Tile at position ' + i + ' has a colspan ' +                                              // 11357
            '(' + spans.col + ') that exceeds the column count ' +                                                     // 11358
            '(' + colCount + ')';                                                                                      // 11359
      }                                                                                                                // 11360
                                                                                                                       // 11361
      var start = 0,                                                                                                   // 11362
          end = 0;                                                                                                     // 11363
                                                                                                                       // 11364
      // TODO(shyndman): This loop isn't strictly necessary if you can                                                 // 11365
      // determine the minimum number of rows before a space opens up. To do                                           // 11366
      // this, recognize that you've iterated across an entire row looking for                                         // 11367
      // space, and if so fast-forward by the minimum rowSpan count. Repeat                                            // 11368
      // until the required space opens up.                                                                            // 11369
      while (end - start < spans.col) {                                                                                // 11370
        if (curCol >= colCount) {                                                                                      // 11371
          nextRow();                                                                                                   // 11372
          continue;                                                                                                    // 11373
        }                                                                                                              // 11374
                                                                                                                       // 11375
        start = spaceTracker.indexOf(0, curCol);                                                                       // 11376
        if (start === -1 || (end = findEnd(start + 1)) === -1) {                                                       // 11377
          start = end = 0;                                                                                             // 11378
          nextRow();                                                                                                   // 11379
          continue;                                                                                                    // 11380
        }                                                                                                              // 11381
                                                                                                                       // 11382
        curCol = end + 1;                                                                                              // 11383
      }                                                                                                                // 11384
                                                                                                                       // 11385
      adjustRow(start, spans.col, spans.row);                                                                          // 11386
      curCol = start + spans.col;                                                                                      // 11387
                                                                                                                       // 11388
      return {                                                                                                         // 11389
        col: start,                                                                                                    // 11390
        row: curRow                                                                                                    // 11391
      };                                                                                                               // 11392
    }                                                                                                                  // 11393
                                                                                                                       // 11394
    function nextRow() {                                                                                               // 11395
      curCol = 0;                                                                                                      // 11396
      curRow++;                                                                                                        // 11397
      adjustRow(0, colCount, -1); // Decrement row spans by one                                                        // 11398
    }                                                                                                                  // 11399
                                                                                                                       // 11400
    function adjustRow(from, cols, by) {                                                                               // 11401
      for (var i = from; i < from + cols; i++) {                                                                       // 11402
        spaceTracker[i] = Math.max(spaceTracker[i] + by, 0);                                                           // 11403
      }                                                                                                                // 11404
    }                                                                                                                  // 11405
                                                                                                                       // 11406
    function findEnd(start) {                                                                                          // 11407
      var i;                                                                                                           // 11408
      for (i = start; i < spaceTracker.length; i++) {                                                                  // 11409
        if (spaceTracker[i] !== 0) {                                                                                   // 11410
          return i;                                                                                                    // 11411
        }                                                                                                              // 11412
      }                                                                                                                // 11413
                                                                                                                       // 11414
      if (i === spaceTracker.length) {                                                                                 // 11415
        return i;                                                                                                      // 11416
      }                                                                                                                // 11417
    }                                                                                                                  // 11418
                                                                                                                       // 11419
    function newSpaceTracker() {                                                                                       // 11420
      var tracker = [];                                                                                                // 11421
      for (var i = 0; i < colCount; i++) {                                                                             // 11422
        tracker.push(0);                                                                                               // 11423
      }                                                                                                                // 11424
      return tracker;                                                                                                  // 11425
    }                                                                                                                  // 11426
  }                                                                                                                    // 11427
}                                                                                                                      // 11428
GridLayoutFactory.$inject = ["$mdUtil"];                                                                               // 11429
                                                                                                                       // 11430
/**                                                                                                                    // 11431
 * @ngdoc directive                                                                                                    // 11432
 * @name mdGridTile                                                                                                    // 11433
 * @module material.components.gridList                                                                                // 11434
 * @restrict E                                                                                                         // 11435
 * @description                                                                                                        // 11436
 * Tiles contain the content of an `md-grid-list`. They span one or more grid                                          // 11437
 * cells vertically or horizontally, and use `md-grid-tile-{footer,header}` to                                         // 11438
 * display secondary content.                                                                                          // 11439
 *                                                                                                                     // 11440
 * ### Responsive Attributes                                                                                           // 11441
 *                                                                                                                     // 11442
 * The `md-grid-tile` directive supports "responsive" attributes, which allow                                          // 11443
 * different `md-rowspan` and `md-colspan` values depending on the currently                                           // 11444
 * matching media query.                                                                                               // 11445
 *                                                                                                                     // 11446
 * In order to set a responsive attribute, first define the fallback value with                                        // 11447
 * the standard attribute name, then add additional attributes with the                                                // 11448
 * following convention: `{base-attribute-name}-{media-query-name}="{value}"`                                          // 11449
 * (ie. `md-colspan-sm="4"`)                                                                                           // 11450
 *                                                                                                                     // 11451
 * @param {number=} md-colspan The number of columns to span (default 1). Cannot                                       // 11452
 *    exceed the number of columns in the grid. Supports interpolation.                                                // 11453
 * @param {number=} md-rowspan The number of rows to span (default 1). Supports                                        // 11454
 *     interpolation.                                                                                                  // 11455
 *                                                                                                                     // 11456
 * @usage                                                                                                              // 11457
 * With header:                                                                                                        // 11458
 * <hljs lang="html">                                                                                                  // 11459
 * <md-grid-tile>                                                                                                      // 11460
 *   <md-grid-tile-header>                                                                                             // 11461
 *     <h3>This is a header</h3>                                                                                       // 11462
 *   </md-grid-tile-header>                                                                                            // 11463
 * </md-grid-tile>                                                                                                     // 11464
 * </hljs>                                                                                                             // 11465
 *                                                                                                                     // 11466
 * With footer:                                                                                                        // 11467
 * <hljs lang="html">                                                                                                  // 11468
 * <md-grid-tile>                                                                                                      // 11469
 *   <md-grid-tile-footer>                                                                                             // 11470
 *     <h3>This is a footer</h3>                                                                                       // 11471
 *   </md-grid-tile-footer>                                                                                            // 11472
 * </md-grid-tile>                                                                                                     // 11473
 * </hljs>                                                                                                             // 11474
 *                                                                                                                     // 11475
 * Spanning multiple rows/columns:                                                                                     // 11476
 * <hljs lang="html">                                                                                                  // 11477
 * <md-grid-tile md-colspan="2" md-rowspan="3">                                                                        // 11478
 * </md-grid-tile>                                                                                                     // 11479
 * </hljs>                                                                                                             // 11480
 *                                                                                                                     // 11481
 * Responsive attributes:                                                                                              // 11482
 * <hljs lang="html">                                                                                                  // 11483
 * <md-grid-tile md-colspan="1" md-colspan-sm="3" md-colspan-md="5">                                                   // 11484
 * </md-grid-tile>                                                                                                     // 11485
 * </hljs>                                                                                                             // 11486
 */                                                                                                                    // 11487
function GridTileDirective($mdMedia) {                                                                                 // 11488
  return {                                                                                                             // 11489
    restrict: 'E',                                                                                                     // 11490
    require: '^mdGridList',                                                                                            // 11491
    template: '<figure ng-transclude></figure>',                                                                       // 11492
    transclude: true,                                                                                                  // 11493
    scope: {},                                                                                                         // 11494
    // Simple controller that exposes attributes to the grid directive                                                 // 11495
    controller: ["$attrs", function($attrs) {                                                                          // 11496
      this.$attrs = $attrs;                                                                                            // 11497
    }],                                                                                                                // 11498
    link: postLink                                                                                                     // 11499
  };                                                                                                                   // 11500
                                                                                                                       // 11501
  function postLink(scope, element, attrs, gridCtrl) {                                                                 // 11502
    // Apply semantics                                                                                                 // 11503
    element.attr('role', 'listitem');                                                                                  // 11504
                                                                                                                       // 11505
    // If our colspan or rowspan changes, trigger a layout                                                             // 11506
    var unwatchAttrs = $mdMedia.watchResponsiveAttributes(['md-colspan', 'md-rowspan'],                                // 11507
        attrs, angular.bind(gridCtrl, gridCtrl.invalidateLayout));                                                     // 11508
                                                                                                                       // 11509
    // Tile registration/deregistration                                                                                // 11510
    gridCtrl.invalidateTiles();                                                                                        // 11511
    scope.$on('$destroy', function() {                                                                                 // 11512
      // Mark the tile as destroyed so it is no longer considered in layout,                                           // 11513
      // even if the DOM element sticks around (like during a leave animation)                                         // 11514
      element[0].$$mdDestroyed = true;                                                                                 // 11515
      unwatchAttrs();                                                                                                  // 11516
      gridCtrl.invalidateLayout();                                                                                     // 11517
    });                                                                                                                // 11518
                                                                                                                       // 11519
    if (angular.isDefined(scope.$parent.$index)) {                                                                     // 11520
      scope.$watch(function() { return scope.$parent.$index; },                                                        // 11521
        function indexChanged(newIdx, oldIdx) {                                                                        // 11522
          if (newIdx === oldIdx) {                                                                                     // 11523
            return;                                                                                                    // 11524
          }                                                                                                            // 11525
          gridCtrl.invalidateTiles();                                                                                  // 11526
        });                                                                                                            // 11527
    }                                                                                                                  // 11528
  }                                                                                                                    // 11529
}                                                                                                                      // 11530
GridTileDirective.$inject = ["$mdMedia"];                                                                              // 11531
                                                                                                                       // 11532
                                                                                                                       // 11533
function GridTileCaptionDirective() {                                                                                  // 11534
  return {                                                                                                             // 11535
    template: '<figcaption ng-transclude></figcaption>',                                                               // 11536
    transclude: true                                                                                                   // 11537
  };                                                                                                                   // 11538
}                                                                                                                      // 11539
                                                                                                                       // 11540
})();                                                                                                                  // 11541
(function(){                                                                                                           // 11542
"use strict";                                                                                                          // 11543
                                                                                                                       // 11544
(function() {                                                                                                          // 11545
  'use strict';                                                                                                        // 11546
                                                                                                                       // 11547
  /**                                                                                                                  // 11548
   * @ngdoc module                                                                                                     // 11549
   * @name material.components.fabTrigger                                                                              // 11550
   */                                                                                                                  // 11551
  angular                                                                                                              // 11552
    .module('material.components.fabTrigger', ['material.core'])                                                       // 11553
    .directive('mdFabTrigger', MdFabTriggerDirective);                                                                 // 11554
                                                                                                                       // 11555
  /**                                                                                                                  // 11556
   * @ngdoc directive                                                                                                  // 11557
   * @name mdFabTrigger                                                                                                // 11558
   * @module material.components.fabSpeedDial                                                                          // 11559
   *                                                                                                                   // 11560
   * @restrict E                                                                                                       // 11561
   *                                                                                                                   // 11562
   * @description                                                                                                      // 11563
   * The `<md-fab-trigger>` directive is used inside of a `<md-fab-speed-dial>` or                                     // 11564
   * `<md-fab-toolbar>` directive to mark an element (or elements) as the trigger and setup the                        // 11565
   * proper event listeners.                                                                                           // 11566
   *                                                                                                                   // 11567
   * @usage                                                                                                            // 11568
   * See the `<md-fab-speed-dial>` or `<md-fab-toolbar>` directives for example usage.                                 // 11569
   */                                                                                                                  // 11570
  function MdFabTriggerDirective() {                                                                                   // 11571
    // TODO: Remove this completely?                                                                                   // 11572
    return {                                                                                                           // 11573
      restrict: 'E',                                                                                                   // 11574
                                                                                                                       // 11575
      require: ['^?mdFabSpeedDial', '^?mdFabToolbar']                                                                  // 11576
    };                                                                                                                 // 11577
  }                                                                                                                    // 11578
})();                                                                                                                  // 11579
                                                                                                                       // 11580
                                                                                                                       // 11581
})();                                                                                                                  // 11582
(function(){                                                                                                           // 11583
"use strict";                                                                                                          // 11584
                                                                                                                       // 11585
/**                                                                                                                    // 11586
 * @ngdoc module                                                                                                       // 11587
 * @name material.components.icon                                                                                      // 11588
 * @description                                                                                                        // 11589
 * Icon                                                                                                                // 11590
 */                                                                                                                    // 11591
angular.module('material.components.icon', [                                                                           // 11592
    'material.core'                                                                                                    // 11593
  ]);                                                                                                                  // 11594
                                                                                                                       // 11595
})();                                                                                                                  // 11596
(function(){                                                                                                           // 11597
"use strict";                                                                                                          // 11598
                                                                                                                       // 11599
/**                                                                                                                    // 11600
 * @ngdoc module                                                                                                       // 11601
 * @name material.components.input                                                                                     // 11602
 */                                                                                                                    // 11603
                                                                                                                       // 11604
angular.module('material.components.input', [                                                                          // 11605
    'material.core'                                                                                                    // 11606
  ])                                                                                                                   // 11607
  .directive('mdInputContainer', mdInputContainerDirective)                                                            // 11608
  .directive('label', labelDirective)                                                                                  // 11609
  .directive('input', inputTextareaDirective)                                                                          // 11610
  .directive('textarea', inputTextareaDirective)                                                                       // 11611
  .directive('mdMaxlength', mdMaxlengthDirective)                                                                      // 11612
  .directive('placeholder', placeholderDirective)                                                                      // 11613
  .directive('ngMessages', ngMessagesDirective)                                                                        // 11614
  .directive('ngMessage', ngMessageDirective)                                                                          // 11615
  .directive('ngMessageExp', ngMessageDirective)                                                                       // 11616
  .directive('mdSelectOnFocus', mdSelectOnFocusDirective)                                                              // 11617
                                                                                                                       // 11618
  .animation('.md-input-invalid', mdInputInvalidMessagesAnimation)                                                     // 11619
  .animation('.md-input-messages-animation', ngMessagesAnimation)                                                      // 11620
  .animation('.md-input-message-animation', ngMessageAnimation);                                                       // 11621
                                                                                                                       // 11622
/**                                                                                                                    // 11623
 * @ngdoc directive                                                                                                    // 11624
 * @name mdInputContainer                                                                                              // 11625
 * @module material.components.input                                                                                   // 11626
 *                                                                                                                     // 11627
 * @restrict E                                                                                                         // 11628
 *                                                                                                                     // 11629
 * @description                                                                                                        // 11630
 * `<md-input-container>` is the parent of any input or textarea element.                                              // 11631
 *                                                                                                                     // 11632
 * Input and textarea elements will not behave properly unless the md-input-container                                  // 11633
 * parent is provided.                                                                                                 // 11634
 *                                                                                                                     // 11635
 * @param md-is-error {expression=} When the given expression evaluates to true, the input container                   // 11636
 *   will go into error state. Defaults to erroring if the input has been touched and is invalid.                      // 11637
 * @param md-no-float {boolean=} When present, `placeholder` attributes on the input will not be converted to floating
 *   labels.                                                                                                           // 11639
 *                                                                                                                     // 11640
 * @usage                                                                                                              // 11641
 * <hljs lang="html">                                                                                                  // 11642
 *                                                                                                                     // 11643
 * <md-input-container>                                                                                                // 11644
 *   <label>Username</label>                                                                                           // 11645
 *   <input type="text" ng-model="user.name">                                                                          // 11646
 * </md-input-container>                                                                                               // 11647
 *                                                                                                                     // 11648
 * <md-input-container>                                                                                                // 11649
 *   <label>Description</label>                                                                                        // 11650
 *   <textarea ng-model="user.description"></textarea>                                                                 // 11651
 * </md-input-container>                                                                                               // 11652
 *                                                                                                                     // 11653
 * </hljs>                                                                                                             // 11654
 *                                                                                                                     // 11655
 * <h3>When disabling floating labels</h3>                                                                             // 11656
 * <hljs lang="html">                                                                                                  // 11657
 *                                                                                                                     // 11658
 * <md-input-container md-no-float>                                                                                    // 11659
 *   <input type="text" placeholder="Non-Floating Label">                                                              // 11660
 * </md-input-container>                                                                                               // 11661
 *                                                                                                                     // 11662
 * </hljs>                                                                                                             // 11663
 */                                                                                                                    // 11664
function mdInputContainerDirective($mdTheming, $parse) {                                                               // 11665
  ContainerCtrl.$inject = ["$scope", "$element", "$attrs", "$animate"];                                                // 11666
  return {                                                                                                             // 11667
    restrict: 'E',                                                                                                     // 11668
    link: postLink,                                                                                                    // 11669
    controller: ContainerCtrl                                                                                          // 11670
  };                                                                                                                   // 11671
                                                                                                                       // 11672
  function postLink(scope, element, attr) {                                                                            // 11673
    $mdTheming(element);                                                                                               // 11674
    if (element.find('md-icon').length) element.addClass('md-has-icon');                                               // 11675
  }                                                                                                                    // 11676
                                                                                                                       // 11677
  function ContainerCtrl($scope, $element, $attrs, $animate) {                                                         // 11678
    var self = this;                                                                                                   // 11679
                                                                                                                       // 11680
    self.isErrorGetter = $attrs.mdIsError && $parse($attrs.mdIsError);                                                 // 11681
                                                                                                                       // 11682
    self.delegateClick = function() {                                                                                  // 11683
      self.input.focus();                                                                                              // 11684
    };                                                                                                                 // 11685
    self.element = $element;                                                                                           // 11686
    self.setFocused = function(isFocused) {                                                                            // 11687
      $element.toggleClass('md-input-focused', !!isFocused);                                                           // 11688
    };                                                                                                                 // 11689
    self.setHasValue = function(hasValue) {                                                                            // 11690
      $element.toggleClass('md-input-has-value', !!hasValue);                                                          // 11691
    };                                                                                                                 // 11692
    self.setHasPlaceholder = function(hasPlaceholder) {                                                                // 11693
      $element.toggleClass('md-input-has-placeholder', !!hasPlaceholder);                                              // 11694
    };                                                                                                                 // 11695
    self.setInvalid = function(isInvalid) {                                                                            // 11696
      if (isInvalid) {                                                                                                 // 11697
        $animate.addClass($element, 'md-input-invalid');                                                               // 11698
      } else {                                                                                                         // 11699
        $animate.removeClass($element, 'md-input-invalid');                                                            // 11700
      }                                                                                                                // 11701
    };                                                                                                                 // 11702
    $scope.$watch(function() {                                                                                         // 11703
      return self.label && self.input;                                                                                 // 11704
    }, function(hasLabelAndInput) {                                                                                    // 11705
      if (hasLabelAndInput && !self.label.attr('for')) {                                                               // 11706
        self.label.attr('for', self.input.attr('id'));                                                                 // 11707
      }                                                                                                                // 11708
    });                                                                                                                // 11709
  }                                                                                                                    // 11710
}                                                                                                                      // 11711
mdInputContainerDirective.$inject = ["$mdTheming", "$parse"];                                                          // 11712
                                                                                                                       // 11713
function labelDirective() {                                                                                            // 11714
  return {                                                                                                             // 11715
    restrict: 'E',                                                                                                     // 11716
    require: '^?mdInputContainer',                                                                                     // 11717
    link: function(scope, element, attr, containerCtrl) {                                                              // 11718
      if (!containerCtrl || attr.mdNoFloat || element.hasClass('md-container-ignore')) return;                         // 11719
                                                                                                                       // 11720
      containerCtrl.label = element;                                                                                   // 11721
      scope.$on('$destroy', function() {                                                                               // 11722
        containerCtrl.label = null;                                                                                    // 11723
      });                                                                                                              // 11724
    }                                                                                                                  // 11725
  };                                                                                                                   // 11726
}                                                                                                                      // 11727
                                                                                                                       // 11728
/**                                                                                                                    // 11729
 * @ngdoc directive                                                                                                    // 11730
 * @name mdInput                                                                                                       // 11731
 * @restrict E                                                                                                         // 11732
 * @module material.components.input                                                                                   // 11733
 *                                                                                                                     // 11734
 * @description                                                                                                        // 11735
 * You can use any `<input>` or `<textarea>` element as a child of an `<md-input-container>`. This                     // 11736
 * allows you to build complex forms for data entry.                                                                   // 11737
 *                                                                                                                     // 11738
 * @param {number=} md-maxlength The maximum number of characters allowed in this input. If this is                    // 11739
 *   specified, a character counter will be shown underneath the input.<br/><br/>                                      // 11740
 *   The purpose of **`md-maxlength`** is exactly to show the max length counter text. If you don't                    // 11741
 *   want the counter text and only need "plain" validation, you can use the "simple" `ng-maxlength`                   // 11742
 *   or maxlength attributes.                                                                                          // 11743
 * @param {string=} aria-label Aria-label is required when no label is present.  A warning message                     // 11744
 *   will be logged in the console if not present.                                                                     // 11745
 * @param {string=} placeholder An alternative approach to using aria-label when the label is not                      // 11746
 *   PRESENT. The placeholder text is copied to the aria-label attribute.                                              // 11747
 * @param md-no-autogrow {boolean=} When present, textareas will not grow automatically.                               // 11748
 * @param md-detect-hidden {boolean=} When present, textareas will be sized properly when they are                     // 11749
 *   revealed after being hidden. This is off by default for performance reasons because it                            // 11750
 *   guarantees a reflow every digest cycle.                                                                           // 11751
 *                                                                                                                     // 11752
 * @usage                                                                                                              // 11753
 * <hljs lang="html">                                                                                                  // 11754
 * <md-input-container>                                                                                                // 11755
 *   <label>Color</label>                                                                                              // 11756
 *   <input type="text" ng-model="color" required md-maxlength="10">                                                   // 11757
 * </md-input-container>                                                                                               // 11758
 * </hljs>                                                                                                             // 11759
 *                                                                                                                     // 11760
 * <h3>With Errors</h3>                                                                                                // 11761
 *                                                                                                                     // 11762
 * `md-input-container` also supports errors using the standard `ng-messages` directives and                           // 11763
 * animates the messages when they become visible using from the `ngEnter`/`ngLeave` events or                         // 11764
 * the `ngShow`/`ngHide` events.                                                                                       // 11765
 *                                                                                                                     // 11766
 * By default, the messages will be hidden until the input is in an error state. This is based off                     // 11767
 * of the `md-is-error` expression of the `md-input-container`. This gives the user a chance to                        // 11768
 * fill out the form before the errors become visible.                                                                 // 11769
 *                                                                                                                     // 11770
 * <hljs lang="html">                                                                                                  // 11771
 * <form name="colorForm">                                                                                             // 11772
 *   <md-input-container>                                                                                              // 11773
 *     <label>Favorite Color</label>                                                                                   // 11774
 *     <input name="favoriteColor" ng-model="favoriteColor" required>                                                  // 11775
 *     <div ng-messages="userForm.lastName.$error">                                                                    // 11776
 *       <div ng-message="required">This is required!</div>                                                            // 11777
 *     </div>                                                                                                          // 11778
 *   </md-input-container>                                                                                             // 11779
 * </form>                                                                                                             // 11780
 * </hljs>                                                                                                             // 11781
 *                                                                                                                     // 11782
 * We automatically disable this auto-hiding functionality if you provide any of the following                         // 11783
 * visibility directives on the `ng-messages` container:                                                               // 11784
 *                                                                                                                     // 11785
 *  - `ng-if`                                                                                                          // 11786
 *  - `ng-show`/`ng-hide`                                                                                              // 11787
 *  - `ng-switch-when`/`ng-switch-default`                                                                             // 11788
 *                                                                                                                     // 11789
 * You can also disable this functionality manually by adding the `md-auto-hide="false"` expression                    // 11790
 * to the `ng-messages` container. This may be helpful if you always want to see the error messages                    // 11791
 * or if you are building your own visibilty directive.                                                                // 11792
 *                                                                                                                     // 11793
 * _<b>Note:</b> The `md-auto-hide` attribute is a static string that is  only checked upon                            // 11794
 * initialization of the `ng-messages` directive to see if it equals the string `false`._                              // 11795
 *                                                                                                                     // 11796
 * <hljs lang="html">                                                                                                  // 11797
 * <form name="userForm">                                                                                              // 11798
 *   <md-input-container>                                                                                              // 11799
 *     <label>Last Name</label>                                                                                        // 11800
 *     <input name="lastName" ng-model="lastName" required md-maxlength="10" minlength="4">                            // 11801
 *     <div ng-messages="userForm.lastName.$error" ng-show="userForm.lastName.$dirty">                                 // 11802
 *       <div ng-message="required">This is required!</div>                                                            // 11803
 *       <div ng-message="md-maxlength">That's too long!</div>                                                         // 11804
 *       <div ng-message="minlength">That's too short!</div>                                                           // 11805
 *     </div>                                                                                                          // 11806
 *   </md-input-container>                                                                                             // 11807
 *   <md-input-container>                                                                                              // 11808
 *     <label>Biography</label>                                                                                        // 11809
 *     <textarea name="bio" ng-model="biography" required md-maxlength="150"></textarea>                               // 11810
 *     <div ng-messages="userForm.bio.$error" ng-show="userForm.bio.$dirty">                                           // 11811
 *       <div ng-message="required">This is required!</div>                                                            // 11812
 *       <div ng-message="md-maxlength">That's too long!</div>                                                         // 11813
 *     </div>                                                                                                          // 11814
 *   </md-input-container>                                                                                             // 11815
 *   <md-input-container>                                                                                              // 11816
 *     <input aria-label='title' ng-model='title'>                                                                     // 11817
 *   </md-input-container>                                                                                             // 11818
 *   <md-input-container>                                                                                              // 11819
 *     <input placeholder='title' ng-model='title'>                                                                    // 11820
 *   </md-input-container>                                                                                             // 11821
 * </form>                                                                                                             // 11822
 * </hljs>                                                                                                             // 11823
 *                                                                                                                     // 11824
 * <h3>Notes</h3>                                                                                                      // 11825
 *                                                                                                                     // 11826
 * - Requires [ngMessages](https://docs.angularjs.org/api/ngMessages).                                                 // 11827
 * - Behaves like the [AngularJS input directive](https://docs.angularjs.org/api/ng/directive/input).                  // 11828
 *                                                                                                                     // 11829
 * The `md-input` and `md-input-container` directives use very specific positioning to achieve the                     // 11830
 * error animation effects. Therefore, it is *not* advised to use the Layout system inside of the                      // 11831
 * `<md-input-container>` tags. Instead, use relative or absolute positioning.                                         // 11832
 *                                                                                                                     // 11833
 */                                                                                                                    // 11834
                                                                                                                       // 11835
function inputTextareaDirective($mdUtil, $window, $mdAria) {                                                           // 11836
  return {                                                                                                             // 11837
    restrict: 'E',                                                                                                     // 11838
    require: ['^?mdInputContainer', '?ngModel'],                                                                       // 11839
    link: postLink                                                                                                     // 11840
  };                                                                                                                   // 11841
                                                                                                                       // 11842
  function postLink(scope, element, attr, ctrls) {                                                                     // 11843
                                                                                                                       // 11844
    var containerCtrl = ctrls[0];                                                                                      // 11845
    var hasNgModel = !!ctrls[1];                                                                                       // 11846
    var ngModelCtrl = ctrls[1] || $mdUtil.fakeNgModel();                                                               // 11847
    var isReadonly = angular.isDefined(attr.readonly);                                                                 // 11848
                                                                                                                       // 11849
    if (!containerCtrl) return;                                                                                        // 11850
    if (containerCtrl.input) {                                                                                         // 11851
      throw new Error("<md-input-container> can only have *one* <input>, <textarea> or <md-select> child element!");   // 11852
    }                                                                                                                  // 11853
    containerCtrl.input = element;                                                                                     // 11854
                                                                                                                       // 11855
    // Add an error spacer div after our input to provide space for the char counter and any ng-messages               // 11856
    var errorsSpacer = angular.element('<div class="md-errors-spacer">');                                              // 11857
    element.after(errorsSpacer);                                                                                       // 11858
                                                                                                                       // 11859
    if (!containerCtrl.label) {                                                                                        // 11860
      $mdAria.expect(element, 'aria-label', element.attr('placeholder'));                                              // 11861
    }                                                                                                                  // 11862
                                                                                                                       // 11863
    element.addClass('md-input');                                                                                      // 11864
    if (!element.attr('id')) {                                                                                         // 11865
      element.attr('id', 'input_' + $mdUtil.nextUid());                                                                // 11866
    }                                                                                                                  // 11867
                                                                                                                       // 11868
    if (element[0].tagName.toLowerCase() === 'textarea') {                                                             // 11869
      setupTextarea();                                                                                                 // 11870
    }                                                                                                                  // 11871
                                                                                                                       // 11872
    // If the input doesn't have an ngModel, it may have a static value. For that case,                                // 11873
    // we have to do one initial check to determine if the container should be in the                                  // 11874
    // "has a value" state.                                                                                            // 11875
    if (!hasNgModel) {                                                                                                 // 11876
      inputCheckValue();                                                                                               // 11877
    }                                                                                                                  // 11878
                                                                                                                       // 11879
    var isErrorGetter = containerCtrl.isErrorGetter || function() {                                                    // 11880
      return ngModelCtrl.$invalid && (ngModelCtrl.$touched || isParentFormSubmitted());                                // 11881
    };                                                                                                                 // 11882
                                                                                                                       // 11883
    var isParentFormSubmitted = function () {                                                                          // 11884
      var parent = $mdUtil.getClosest(element, 'form');                                                                // 11885
      var form = parent ? angular.element(parent).controller('form') : null;                                           // 11886
                                                                                                                       // 11887
      return form ? form.$submitted : false;                                                                           // 11888
    };                                                                                                                 // 11889
                                                                                                                       // 11890
    scope.$watch(isErrorGetter, containerCtrl.setInvalid);                                                             // 11891
                                                                                                                       // 11892
    ngModelCtrl.$parsers.push(ngModelPipelineCheckValue);                                                              // 11893
    ngModelCtrl.$formatters.push(ngModelPipelineCheckValue);                                                           // 11894
                                                                                                                       // 11895
    element.on('input', inputCheckValue);                                                                              // 11896
                                                                                                                       // 11897
    if (!isReadonly) {                                                                                                 // 11898
      element                                                                                                          // 11899
        .on('focus', function(ev) {                                                                                    // 11900
          $mdUtil.nextTick(function() {                                                                                // 11901
            containerCtrl.setFocused(true);                                                                            // 11902
          });                                                                                                          // 11903
        })                                                                                                             // 11904
        .on('blur', function(ev) {                                                                                     // 11905
          $mdUtil.nextTick(function() {                                                                                // 11906
            containerCtrl.setFocused(false);                                                                           // 11907
            inputCheckValue();                                                                                         // 11908
          });                                                                                                          // 11909
        });                                                                                                            // 11910
    }                                                                                                                  // 11911
                                                                                                                       // 11912
    //ngModelCtrl.$setTouched();                                                                                       // 11913
    //if( ngModelCtrl.$invalid ) containerCtrl.setInvalid();                                                           // 11914
                                                                                                                       // 11915
    scope.$on('$destroy', function() {                                                                                 // 11916
      containerCtrl.setFocused(false);                                                                                 // 11917
      containerCtrl.setHasValue(false);                                                                                // 11918
      containerCtrl.input = null;                                                                                      // 11919
    });                                                                                                                // 11920
                                                                                                                       // 11921
    /**                                                                                                                // 11922
     *                                                                                                                 // 11923
     */                                                                                                                // 11924
    function ngModelPipelineCheckValue(arg) {                                                                          // 11925
      containerCtrl.setHasValue(!ngModelCtrl.$isEmpty(arg));                                                           // 11926
      return arg;                                                                                                      // 11927
    }                                                                                                                  // 11928
                                                                                                                       // 11929
    function inputCheckValue() {                                                                                       // 11930
      // An input's value counts if its length > 0,                                                                    // 11931
      // or if the input's validity state says it has bad input (eg string in a number input)                          // 11932
      containerCtrl.setHasValue(element.val().length > 0 || (element[0].validity || {}).badInput);                     // 11933
    }                                                                                                                  // 11934
                                                                                                                       // 11935
    function setupTextarea() {                                                                                         // 11936
      if (angular.isDefined(element.attr('md-no-autogrow'))) {                                                         // 11937
        return;                                                                                                        // 11938
      }                                                                                                                // 11939
                                                                                                                       // 11940
      var node = element[0];                                                                                           // 11941
      var container = containerCtrl.element[0];                                                                        // 11942
                                                                                                                       // 11943
      var min_rows = NaN;                                                                                              // 11944
      var lineHeight = null;                                                                                           // 11945
      // can't check if height was or not explicity set,                                                               // 11946
      // so rows attribute will take precedence if present                                                             // 11947
      if (node.hasAttribute('rows')) {                                                                                 // 11948
        min_rows = parseInt(node.getAttribute('rows'));                                                                // 11949
      }                                                                                                                // 11950
                                                                                                                       // 11951
      var onChangeTextarea = $mdUtil.debounce(growTextarea, 1);                                                        // 11952
                                                                                                                       // 11953
      function pipelineListener(value) {                                                                               // 11954
        onChangeTextarea();                                                                                            // 11955
        return value;                                                                                                  // 11956
      }                                                                                                                // 11957
                                                                                                                       // 11958
      if (ngModelCtrl) {                                                                                               // 11959
        ngModelCtrl.$formatters.push(pipelineListener);                                                                // 11960
        ngModelCtrl.$viewChangeListeners.push(pipelineListener);                                                       // 11961
      } else {                                                                                                         // 11962
        onChangeTextarea();                                                                                            // 11963
      }                                                                                                                // 11964
      element.on('keydown input', onChangeTextarea);                                                                   // 11965
                                                                                                                       // 11966
      if (isNaN(min_rows)) {                                                                                           // 11967
        element.attr('rows', '1');                                                                                     // 11968
                                                                                                                       // 11969
        element.on('scroll', onScroll);                                                                                // 11970
      }                                                                                                                // 11971
                                                                                                                       // 11972
      angular.element($window).on('resize', onChangeTextarea);                                                         // 11973
                                                                                                                       // 11974
      scope.$on('$destroy', function() {                                                                               // 11975
        angular.element($window).off('resize', onChangeTextarea);                                                      // 11976
      });                                                                                                              // 11977
                                                                                                                       // 11978
      function growTextarea() {                                                                                        // 11979
        // sets the md-input-container height to avoid jumping around                                                  // 11980
        container.style.height = container.offsetHeight + 'px';                                                        // 11981
                                                                                                                       // 11982
        // temporarily disables element's flex so its height 'runs free'                                               // 11983
        element.addClass('md-no-flex');                                                                                // 11984
                                                                                                                       // 11985
        if (isNaN(min_rows)) {                                                                                         // 11986
          node.style.height = "auto";                                                                                  // 11987
          node.scrollTop = 0;                                                                                          // 11988
          var height = getHeight();                                                                                    // 11989
          if (height) node.style.height = height + 'px';                                                               // 11990
        } else {                                                                                                       // 11991
          node.setAttribute("rows", 1);                                                                                // 11992
                                                                                                                       // 11993
          if (!lineHeight) {                                                                                           // 11994
            node.style.minHeight = '0';                                                                                // 11995
                                                                                                                       // 11996
            lineHeight = element.prop('clientHeight');                                                                 // 11997
                                                                                                                       // 11998
            node.style.minHeight = null;                                                                               // 11999
          }                                                                                                            // 12000
                                                                                                                       // 12001
          var rows = Math.min(min_rows, Math.round(node.scrollHeight / lineHeight));                                   // 12002
          node.setAttribute("rows", rows);                                                                             // 12003
          node.style.height = lineHeight * rows + "px";                                                                // 12004
        }                                                                                                              // 12005
                                                                                                                       // 12006
        // reset everything back to normal                                                                             // 12007
        element.removeClass('md-no-flex');                                                                             // 12008
        container.style.height = 'auto';                                                                               // 12009
      }                                                                                                                // 12010
                                                                                                                       // 12011
      function getHeight() {                                                                                           // 12012
        var line = node.scrollHeight - node.offsetHeight;                                                              // 12013
        return node.offsetHeight + (line > 0 ? line : 0);                                                              // 12014
      }                                                                                                                // 12015
                                                                                                                       // 12016
      function onScroll(e) {                                                                                           // 12017
        node.scrollTop = 0;                                                                                            // 12018
        // for smooth new line adding                                                                                  // 12019
        var line = node.scrollHeight - node.offsetHeight;                                                              // 12020
        var height = node.offsetHeight + line;                                                                         // 12021
        node.style.height = height + 'px';                                                                             // 12022
      }                                                                                                                // 12023
                                                                                                                       // 12024
      // Attach a watcher to detect when the textarea gets shown.                                                      // 12025
      if (angular.isDefined(element.attr('md-detect-hidden'))) {                                                       // 12026
                                                                                                                       // 12027
        var handleHiddenChange = function() {                                                                          // 12028
          var wasHidden = false;                                                                                       // 12029
                                                                                                                       // 12030
          return function() {                                                                                          // 12031
            var isHidden = node.offsetHeight === 0;                                                                    // 12032
                                                                                                                       // 12033
            if (isHidden === false && wasHidden === true) {                                                            // 12034
              growTextarea();                                                                                          // 12035
            }                                                                                                          // 12036
                                                                                                                       // 12037
            wasHidden = isHidden;                                                                                      // 12038
          };                                                                                                           // 12039
        }();                                                                                                           // 12040
                                                                                                                       // 12041
        // Check every digest cycle whether the visibility of the textarea has changed.                                // 12042
        // Queue up to run after the digest cycle is complete.                                                         // 12043
        scope.$watch(function() {                                                                                      // 12044
          $mdUtil.nextTick(handleHiddenChange, false);                                                                 // 12045
          return true;                                                                                                 // 12046
        });                                                                                                            // 12047
      }                                                                                                                // 12048
    }                                                                                                                  // 12049
  }                                                                                                                    // 12050
}                                                                                                                      // 12051
inputTextareaDirective.$inject = ["$mdUtil", "$window", "$mdAria"];                                                    // 12052
                                                                                                                       // 12053
function mdMaxlengthDirective($animate, $mdUtil) {                                                                     // 12054
  return {                                                                                                             // 12055
    restrict: 'A',                                                                                                     // 12056
    require: ['ngModel', '^mdInputContainer'],                                                                         // 12057
    link: postLink                                                                                                     // 12058
  };                                                                                                                   // 12059
                                                                                                                       // 12060
  function postLink(scope, element, attr, ctrls) {                                                                     // 12061
    var maxlength;                                                                                                     // 12062
    var ngModelCtrl = ctrls[0];                                                                                        // 12063
    var containerCtrl = ctrls[1];                                                                                      // 12064
    var charCountEl, errorsSpacer;                                                                                     // 12065
                                                                                                                       // 12066
    // Wait until the next tick to ensure that the input has setup the errors spacer where we will                     // 12067
    // append our counter                                                                                              // 12068
    $mdUtil.nextTick(function() {                                                                                      // 12069
      errorsSpacer = angular.element(containerCtrl.element[0].querySelector('.md-errors-spacer'));                     // 12070
      charCountEl = angular.element('<div class="md-char-counter">');                                                  // 12071
                                                                                                                       // 12072
      // Append our character counter inside the errors spacer                                                         // 12073
      errorsSpacer.append(charCountEl);                                                                                // 12074
                                                                                                                       // 12075
      // Stop model from trimming. This makes it so whitespace                                                         // 12076
      // over the maxlength still counts as invalid.                                                                   // 12077
      attr.$set('ngTrim', 'false');                                                                                    // 12078
                                                                                                                       // 12079
      ngModelCtrl.$formatters.push(renderCharCount);                                                                   // 12080
      ngModelCtrl.$viewChangeListeners.push(renderCharCount);                                                          // 12081
      element.on('input keydown keyup', function() {                                                                   // 12082
        renderCharCount(); //make sure it's called with no args                                                        // 12083
      });                                                                                                              // 12084
                                                                                                                       // 12085
      scope.$watch(attr.mdMaxlength, function(value) {                                                                 // 12086
        maxlength = value;                                                                                             // 12087
        if (angular.isNumber(value) && value > 0) {                                                                    // 12088
          if (!charCountEl.parent().length) {                                                                          // 12089
            $animate.enter(charCountEl, errorsSpacer);                                                                 // 12090
          }                                                                                                            // 12091
          renderCharCount();                                                                                           // 12092
        } else {                                                                                                       // 12093
          $animate.leave(charCountEl);                                                                                 // 12094
        }                                                                                                              // 12095
      });                                                                                                              // 12096
                                                                                                                       // 12097
      ngModelCtrl.$validators['md-maxlength'] = function(modelValue, viewValue) {                                      // 12098
        if (!angular.isNumber(maxlength) || maxlength < 0) {                                                           // 12099
          return true;                                                                                                 // 12100
        }                                                                                                              // 12101
        return ( modelValue || element.val() || viewValue || '' ).length <= maxlength;                                 // 12102
      };                                                                                                               // 12103
    });                                                                                                                // 12104
                                                                                                                       // 12105
    function renderCharCount(value) {                                                                                  // 12106
      // If we have not been appended to the body yet; do not render                                                   // 12107
      if (!charCountEl.parent) {                                                                                       // 12108
        return value;                                                                                                  // 12109
      }                                                                                                                // 12110
                                                                                                                       // 12111
      // Force the value into a string since it may be a number,                                                       // 12112
      // which does not have a length property.                                                                        // 12113
      charCountEl.text(String(element.val() || value || '').length + '/' + maxlength);                                 // 12114
      return value;                                                                                                    // 12115
    }                                                                                                                  // 12116
  }                                                                                                                    // 12117
}                                                                                                                      // 12118
mdMaxlengthDirective.$inject = ["$animate", "$mdUtil"];                                                                // 12119
                                                                                                                       // 12120
function placeholderDirective($log) {                                                                                  // 12121
  return {                                                                                                             // 12122
    restrict: 'A',                                                                                                     // 12123
    require: '^^?mdInputContainer',                                                                                    // 12124
    priority: 200,                                                                                                     // 12125
    link: postLink                                                                                                     // 12126
  };                                                                                                                   // 12127
                                                                                                                       // 12128
  function postLink(scope, element, attr, inputContainer) {                                                            // 12129
    // If there is no input container, just return                                                                     // 12130
    if (!inputContainer) return;                                                                                       // 12131
                                                                                                                       // 12132
    var label = inputContainer.element.find('label');                                                                  // 12133
    var hasNoFloat = angular.isDefined(inputContainer.element.attr('md-no-float'));                                    // 12134
                                                                                                                       // 12135
    // If we have a label, or they specify the md-no-float attribute, just return                                      // 12136
    if ((label && label.length) || hasNoFloat) {                                                                       // 12137
      // Add a placeholder class so we can target it in the CSS                                                        // 12138
      inputContainer.setHasPlaceholder(true);                                                                          // 12139
      return;                                                                                                          // 12140
    }                                                                                                                  // 12141
                                                                                                                       // 12142
    // Otherwise, grab/remove the placeholder                                                                          // 12143
    var placeholderText = attr.placeholder;                                                                            // 12144
    element.removeAttr('placeholder');                                                                                 // 12145
                                                                                                                       // 12146
    // And add the placeholder text as a separate label                                                                // 12147
    if (inputContainer.input && inputContainer.input[0].nodeName != 'MD-SELECT') {                                     // 12148
      var placeholder = '<label ng-click="delegateClick()">' + placeholderText + '</label>';                           // 12149
                                                                                                                       // 12150
      inputContainer.element.addClass('md-icon-float');                                                                // 12151
      inputContainer.element.prepend(placeholder);                                                                     // 12152
    }                                                                                                                  // 12153
  }                                                                                                                    // 12154
}                                                                                                                      // 12155
placeholderDirective.$inject = ["$log"];                                                                               // 12156
                                                                                                                       // 12157
/**                                                                                                                    // 12158
 * @ngdoc directive                                                                                                    // 12159
 * @name mdSelectOnFocus                                                                                               // 12160
 * @module material.components.input                                                                                   // 12161
 *                                                                                                                     // 12162
 * @restrict A                                                                                                         // 12163
 *                                                                                                                     // 12164
 * @description                                                                                                        // 12165
 * The `md-select-on-focus` directive allows you to automatically select the element's input text on focus.            // 12166
 *                                                                                                                     // 12167
 * <h3>Notes</h3>                                                                                                      // 12168
 * - The use of `md-select-on-focus` is restricted to `<input>` and `<textarea>` elements.                             // 12169
 *                                                                                                                     // 12170
 * @usage                                                                                                              // 12171
 * <h3>Using with an Input</h3>                                                                                        // 12172
 * <hljs lang="html">                                                                                                  // 12173
 *                                                                                                                     // 12174
 * <md-input-container>                                                                                                // 12175
 *   <label>Auto Select</label>                                                                                        // 12176
 *   <input type="text" md-select-on-focus>                                                                            // 12177
 * </md-input-container>                                                                                               // 12178
 * </hljs>                                                                                                             // 12179
 *                                                                                                                     // 12180
 * <h3>Using with a Textarea</h3>                                                                                      // 12181
 * <hljs lang="html">                                                                                                  // 12182
 *                                                                                                                     // 12183
 * <md-input-container>                                                                                                // 12184
 *   <label>Auto Select</label>                                                                                        // 12185
 *   <textarea md-select-on-focus>This text will be selected on focus.</textarea>                                      // 12186
 * </md-input-container>                                                                                               // 12187
 *                                                                                                                     // 12188
 * </hljs>                                                                                                             // 12189
 */                                                                                                                    // 12190
function mdSelectOnFocusDirective() {                                                                                  // 12191
                                                                                                                       // 12192
  return {                                                                                                             // 12193
    restrict: 'A',                                                                                                     // 12194
    link: postLink                                                                                                     // 12195
  };                                                                                                                   // 12196
                                                                                                                       // 12197
  function postLink(scope, element, attr) {                                                                            // 12198
    if (element[0].nodeName !== 'INPUT' && element[0].nodeName !== "TEXTAREA") return;                                 // 12199
                                                                                                                       // 12200
    element.on('focus', onFocus);                                                                                      // 12201
                                                                                                                       // 12202
    scope.$on('$destroy', function() {                                                                                 // 12203
      element.off('focus', onFocus);                                                                                   // 12204
    });                                                                                                                // 12205
                                                                                                                       // 12206
    function onFocus() {                                                                                               // 12207
      // Use HTMLInputElement#select to fix firefox select issues                                                      // 12208
      element[0].select();                                                                                             // 12209
    }                                                                                                                  // 12210
  }                                                                                                                    // 12211
}                                                                                                                      // 12212
                                                                                                                       // 12213
var visibilityDirectives = ['ngIf', 'ngShow', 'ngHide', 'ngSwitchWhen', 'ngSwitchDefault'];                            // 12214
function ngMessagesDirective() {                                                                                       // 12215
  return {                                                                                                             // 12216
    restrict: 'EA',                                                                                                    // 12217
    link: postLink,                                                                                                    // 12218
                                                                                                                       // 12219
    // This is optional because we don't want target *all* ngMessage instances, just those inside of                   // 12220
    // mdInputContainer.                                                                                               // 12221
    require: '^^?mdInputContainer'                                                                                     // 12222
  };                                                                                                                   // 12223
                                                                                                                       // 12224
  function postLink(scope, element, attrs, inputContainer) {                                                           // 12225
    // If we are not a child of an input container, don't do anything                                                  // 12226
    if (!inputContainer) return;                                                                                       // 12227
                                                                                                                       // 12228
    // Add our animation class                                                                                         // 12229
    element.toggleClass('md-input-messages-animation', true);                                                          // 12230
                                                                                                                       // 12231
    // Add our md-auto-hide class to automatically hide/show messages when container is invalid                        // 12232
    element.toggleClass('md-auto-hide', true);                                                                         // 12233
                                                                                                                       // 12234
    // If we see some known visibility directives, remove the md-auto-hide class                                       // 12235
    if (attrs.mdAutoHide == 'false' || hasVisibiltyDirective(attrs)) {                                                 // 12236
      element.toggleClass('md-auto-hide', false);                                                                      // 12237
    }                                                                                                                  // 12238
  }                                                                                                                    // 12239
                                                                                                                       // 12240
  function hasVisibiltyDirective(attrs) {                                                                              // 12241
    return visibilityDirectives.some(function(attr) {                                                                  // 12242
      return attrs[attr];                                                                                              // 12243
    });                                                                                                                // 12244
  }                                                                                                                    // 12245
}                                                                                                                      // 12246
                                                                                                                       // 12247
function ngMessageDirective($mdUtil) {                                                                                 // 12248
  return {                                                                                                             // 12249
    restrict: 'EA',                                                                                                    // 12250
    compile: compile,                                                                                                  // 12251
    priority: 100                                                                                                      // 12252
  };                                                                                                                   // 12253
                                                                                                                       // 12254
  function compile(element) {                                                                                          // 12255
    var inputContainer = $mdUtil.getClosest(element, "md-input-container");                                            // 12256
                                                                                                                       // 12257
    // If we are not a child of an input container, don't do anything                                                  // 12258
    if (!inputContainer) return;                                                                                       // 12259
                                                                                                                       // 12260
    // Add our animation class                                                                                         // 12261
    element.toggleClass('md-input-message-animation', true);                                                           // 12262
                                                                                                                       // 12263
    return {};                                                                                                         // 12264
  }                                                                                                                    // 12265
}                                                                                                                      // 12266
ngMessageDirective.$inject = ["$mdUtil"];                                                                              // 12267
                                                                                                                       // 12268
function mdInputInvalidMessagesAnimation($q, $animateCss) {                                                            // 12269
  return {                                                                                                             // 12270
    addClass: function(element, className, done) {                                                                     // 12271
      var messages = getMessagesElement(element);                                                                      // 12272
                                                                                                                       // 12273
      if (className == "md-input-invalid" && messages.hasClass('md-auto-hide')) {                                      // 12274
        showInputMessages(element, $animateCss, $q).finally(done);                                                     // 12275
      } else {                                                                                                         // 12276
        done();                                                                                                        // 12277
      }                                                                                                                // 12278
    }                                                                                                                  // 12279
                                                                                                                       // 12280
    // NOTE: We do not need the removeClass method, because the message ng-leave animation will fire                   // 12281
  }                                                                                                                    // 12282
}                                                                                                                      // 12283
mdInputInvalidMessagesAnimation.$inject = ["$q", "$animateCss"];                                                       // 12284
                                                                                                                       // 12285
function ngMessagesAnimation($q, $animateCss) {                                                                        // 12286
  return {                                                                                                             // 12287
    enter: function(element, done) {                                                                                   // 12288
      showInputMessages(element, $animateCss, $q).finally(done);                                                       // 12289
    },                                                                                                                 // 12290
                                                                                                                       // 12291
    leave: function(element, done) {                                                                                   // 12292
      hideInputMessages(element, $animateCss, $q).finally(done);                                                       // 12293
    },                                                                                                                 // 12294
                                                                                                                       // 12295
    addClass: function(element, className, done) {                                                                     // 12296
      if (className == "ng-hide") {                                                                                    // 12297
        hideInputMessages(element, $animateCss, $q).finally(done);                                                     // 12298
      } else {                                                                                                         // 12299
        done();                                                                                                        // 12300
      }                                                                                                                // 12301
    },                                                                                                                 // 12302
                                                                                                                       // 12303
    removeClass: function(element, className, done) {                                                                  // 12304
      if (className == "ng-hide") {                                                                                    // 12305
        showInputMessages(element, $animateCss, $q).finally(done);                                                     // 12306
      } else {                                                                                                         // 12307
        done();                                                                                                        // 12308
      }                                                                                                                // 12309
    }                                                                                                                  // 12310
  }                                                                                                                    // 12311
}                                                                                                                      // 12312
ngMessagesAnimation.$inject = ["$q", "$animateCss"];                                                                   // 12313
                                                                                                                       // 12314
function ngMessageAnimation($animateCss) {                                                                             // 12315
  return {                                                                                                             // 12316
    enter: function(element, done) {                                                                                   // 12317
      var messages = getMessagesElement(element);                                                                      // 12318
                                                                                                                       // 12319
      // If we have the md-auto-hide class, the md-input-invalid animation will fire, so we can skip                   // 12320
      if (messages.hasClass('md-auto-hide')) {                                                                         // 12321
        done();                                                                                                        // 12322
        return;                                                                                                        // 12323
      }                                                                                                                // 12324
                                                                                                                       // 12325
      return showMessage(element, $animateCss);                                                                        // 12326
    },                                                                                                                 // 12327
                                                                                                                       // 12328
    leave: function(element, done) {                                                                                   // 12329
      return hideMessage(element, $animateCss);                                                                        // 12330
    }                                                                                                                  // 12331
  }                                                                                                                    // 12332
}                                                                                                                      // 12333
ngMessageAnimation.$inject = ["$animateCss"];                                                                          // 12334
                                                                                                                       // 12335
function showInputMessages(element, $animateCss, $q) {                                                                 // 12336
  var animators = [], animator;                                                                                        // 12337
  var messages = getMessagesElement(element);                                                                          // 12338
                                                                                                                       // 12339
  angular.forEach(messages.children(), function(child) {                                                               // 12340
    animator = showMessage(angular.element(child), $animateCss);                                                       // 12341
                                                                                                                       // 12342
    animators.push(animator.start());                                                                                  // 12343
  });                                                                                                                  // 12344
                                                                                                                       // 12345
  return $q.all(animators);                                                                                            // 12346
}                                                                                                                      // 12347
                                                                                                                       // 12348
function hideInputMessages(element, $animateCss, $q) {                                                                 // 12349
  var animators = [], animator;                                                                                        // 12350
  var messages = getMessagesElement(element);                                                                          // 12351
                                                                                                                       // 12352
  angular.forEach(messages.children(), function(child) {                                                               // 12353
    animator = hideMessage(angular.element(child), $animateCss);                                                       // 12354
                                                                                                                       // 12355
    animators.push(animator.start());                                                                                  // 12356
  });                                                                                                                  // 12357
                                                                                                                       // 12358
  return $q.all(animators);                                                                                            // 12359
}                                                                                                                      // 12360
                                                                                                                       // 12361
function showMessage(element, $animateCss) {                                                                           // 12362
  var height = element[0].offsetHeight;                                                                                // 12363
                                                                                                                       // 12364
  return $animateCss(element, {                                                                                        // 12365
    event: 'enter',                                                                                                    // 12366
    structural: true,                                                                                                  // 12367
    from: {"opacity": 0, "margin-top": -height + "px"},                                                                // 12368
    to: {"opacity": 1, "margin-top": "0"},                                                                             // 12369
    duration: 0.3                                                                                                      // 12370
  });                                                                                                                  // 12371
}                                                                                                                      // 12372
                                                                                                                       // 12373
function hideMessage(element, $animateCss) {                                                                           // 12374
  var height = element[0].offsetHeight;                                                                                // 12375
  var styles = window.getComputedStyle(element[0]);                                                                    // 12376
                                                                                                                       // 12377
  // If we are already hidden, just return an empty animation                                                          // 12378
  if (styles.opacity == 0) {                                                                                           // 12379
    return $animateCss(element, {});                                                                                   // 12380
  }                                                                                                                    // 12381
                                                                                                                       // 12382
  // Otherwise, animate                                                                                                // 12383
  return $animateCss(element, {                                                                                        // 12384
    event: 'leave',                                                                                                    // 12385
    structural: true,                                                                                                  // 12386
    from: {"opacity": 1, "margin-top": 0},                                                                             // 12387
    to: {"opacity": 0, "margin-top": -height + "px"},                                                                  // 12388
    duration: 0.3                                                                                                      // 12389
  });                                                                                                                  // 12390
}                                                                                                                      // 12391
                                                                                                                       // 12392
function getInputElement(element) {                                                                                    // 12393
  var inputContainer = element.controller('mdInputContainer');                                                         // 12394
                                                                                                                       // 12395
  return inputContainer.element;                                                                                       // 12396
}                                                                                                                      // 12397
                                                                                                                       // 12398
function getMessagesElement(element) {                                                                                 // 12399
  var input = getInputElement(element);                                                                                // 12400
  var selector = 'ng-messages,data-ng-messages,x-ng-messages,' +                                                       // 12401
    '[ng-messages],[data-ng-messages],[x-ng-messages]';                                                                // 12402
                                                                                                                       // 12403
  return angular.element(input[0].querySelector(selector));                                                            // 12404
}                                                                                                                      // 12405
                                                                                                                       // 12406
})();                                                                                                                  // 12407
(function(){                                                                                                           // 12408
"use strict";                                                                                                          // 12409
                                                                                                                       // 12410
/**                                                                                                                    // 12411
 * @ngdoc module                                                                                                       // 12412
 * @name material.components.menu-bar                                                                                  // 12413
 */                                                                                                                    // 12414
                                                                                                                       // 12415
angular.module('material.components.menuBar', [                                                                        // 12416
  'material.core',                                                                                                     // 12417
  'material.components.menu'                                                                                           // 12418
]);                                                                                                                    // 12419
                                                                                                                       // 12420
})();                                                                                                                  // 12421
(function(){                                                                                                           // 12422
"use strict";                                                                                                          // 12423
                                                                                                                       // 12424
/**                                                                                                                    // 12425
 * @ngdoc module                                                                                                       // 12426
 * @name material.components.list                                                                                      // 12427
 * @description                                                                                                        // 12428
 * List module                                                                                                         // 12429
 */                                                                                                                    // 12430
angular.module('material.components.list', [                                                                           // 12431
  'material.core'                                                                                                      // 12432
])                                                                                                                     // 12433
  .controller('MdListController', MdListController)                                                                    // 12434
  .directive('mdList', mdListDirective)                                                                                // 12435
  .directive('mdListItem', mdListItemDirective);                                                                       // 12436
                                                                                                                       // 12437
/**                                                                                                                    // 12438
 * @ngdoc directive                                                                                                    // 12439
 * @name mdList                                                                                                        // 12440
 * @module material.components.list                                                                                    // 12441
 *                                                                                                                     // 12442
 * @restrict E                                                                                                         // 12443
 *                                                                                                                     // 12444
 * @description                                                                                                        // 12445
 * The `<md-list>` directive is a list container for 1..n `<md-list-item>` tags.                                       // 12446
 *                                                                                                                     // 12447
 * @usage                                                                                                              // 12448
 * <hljs lang="html">                                                                                                  // 12449
 * <md-list>                                                                                                           // 12450
 *   <md-list-item class="md-2-line" ng-repeat="item in todos">                                                        // 12451
 *     <md-checkbox ng-model="item.done"></md-checkbox>                                                                // 12452
 *     <div class="md-list-item-text">                                                                                 // 12453
 *       <h3>{{item.title}}</h3>                                                                                       // 12454
 *       <p>{{item.description}}</p>                                                                                   // 12455
 *     </div>                                                                                                          // 12456
 *   </md-list-item>                                                                                                   // 12457
 * </md-list>                                                                                                          // 12458
 * </hljs>                                                                                                             // 12459
 */                                                                                                                    // 12460
                                                                                                                       // 12461
function mdListDirective($mdTheming) {                                                                                 // 12462
  return {                                                                                                             // 12463
    restrict: 'E',                                                                                                     // 12464
    compile: function(tEl) {                                                                                           // 12465
      tEl[0].setAttribute('role', 'list');                                                                             // 12466
      return $mdTheming;                                                                                               // 12467
    }                                                                                                                  // 12468
  };                                                                                                                   // 12469
}                                                                                                                      // 12470
mdListDirective.$inject = ["$mdTheming"];                                                                              // 12471
/**                                                                                                                    // 12472
 * @ngdoc directive                                                                                                    // 12473
 * @name mdListItem                                                                                                    // 12474
 * @module material.components.list                                                                                    // 12475
 *                                                                                                                     // 12476
 * @restrict E                                                                                                         // 12477
 *                                                                                                                     // 12478
 * @description                                                                                                        // 12479
 * The `<md-list-item>` directive is a container intended for row items in a `<md-list>` container.                    // 12480
 * The `md-2-line` and `md-3-line` classes can be added to a `<md-list-item>`                                          // 12481
 * to increase the height with 22px and 40px respectively.                                                             // 12482
 *                                                                                                                     // 12483
 * ## CSS                                                                                                              // 12484
 * `.md-avatar` - class for image avatars                                                                              // 12485
 *                                                                                                                     // 12486
 * `.md-avatar-icon` - class for icon avatars                                                                          // 12487
 *                                                                                                                     // 12488
 * `.md-offset` - on content without an avatar                                                                         // 12489
 *                                                                                                                     // 12490
 * @usage                                                                                                              // 12491
 * <hljs lang="html">                                                                                                  // 12492
 *  <md-list>                                                                                                          // 12493
 *    <md-list-item>                                                                                                   // 12494
 *      <img class="md-avatar" ng-src="path/to/img"/>                                                                  // 12495
 *      <span>Item content in list</span>                                                                              // 12496
 *    </md-list-item>                                                                                                  // 12497
 *    <md-list-item>                                                                                                   // 12498
 *      <md-icon class="md-avatar-icon" md-svg-icon="communication:phone"></md-icon>                                   // 12499
 *      <span>Item content in list</span>                                                                              // 12500
 *    </md-list-item>                                                                                                  // 12501
 *  </md-list>                                                                                                         // 12502
 * </hljs>                                                                                                             // 12503
 *                                                                                                                     // 12504
 * _**Note:** We automatically apply special styling when the inner contents are wrapped inside                        // 12505
 * of a `<md-button>` tag. This styling is automatically ignored for `class="md-secondary"` buttons                    // 12506
 * and you can include a class of `class="md-exclude"` if you need to use a non-secondary button                       // 12507
 * that is inside the list, but does not wrap the contents._                                                           // 12508
 */                                                                                                                    // 12509
function mdListItemDirective($mdAria, $mdConstant, $mdUtil, $timeout) {                                                // 12510
  var proxiedTypes = ['md-checkbox', 'md-switch'];                                                                     // 12511
  return {                                                                                                             // 12512
    restrict: 'E',                                                                                                     // 12513
    controller: 'MdListController',                                                                                    // 12514
    compile: function(tEl, tAttrs) {                                                                                   // 12515
      // Check for proxy controls (no ng-click on parent, and a control inside)                                        // 12516
      var secondaryItem = tEl[0].querySelector('.md-secondary');                                                       // 12517
      var hasProxiedElement;                                                                                           // 12518
      var proxyElement;                                                                                                // 12519
                                                                                                                       // 12520
      tEl[0].setAttribute('role', 'listitem');                                                                         // 12521
                                                                                                                       // 12522
      if (tAttrs.ngClick || tAttrs.ngHref || tAttrs.href || tAttrs.uiSref || tAttrs.ngAttrUiSref) {                    // 12523
        wrapIn('button');                                                                                              // 12524
      } else {                                                                                                         // 12525
        for (var i = 0, type; type = proxiedTypes[i]; ++i) {                                                           // 12526
          if (proxyElement = tEl[0].querySelector(type)) {                                                             // 12527
            hasProxiedElement = true;                                                                                  // 12528
            break;                                                                                                     // 12529
          }                                                                                                            // 12530
        }                                                                                                              // 12531
        if (hasProxiedElement) {                                                                                       // 12532
          wrapIn('div');                                                                                               // 12533
        } else if (!tEl[0].querySelector('md-button:not(.md-secondary):not(.md-exclude)')) {                           // 12534
          tEl.addClass('md-no-proxy');                                                                                 // 12535
        }                                                                                                              // 12536
      }                                                                                                                // 12537
      wrapSecondary();                                                                                                 // 12538
      setupToggleAria();                                                                                               // 12539
                                                                                                                       // 12540
                                                                                                                       // 12541
      function setupToggleAria() {                                                                                     // 12542
        var toggleTypes = ['md-switch', 'md-checkbox'];                                                                // 12543
        var toggle;                                                                                                    // 12544
                                                                                                                       // 12545
        for (var i = 0, toggleType; toggleType = toggleTypes[i]; ++i) {                                                // 12546
          if (toggle = tEl.find(toggleType)[0]) {                                                                      // 12547
            if (!toggle.hasAttribute('aria-label')) {                                                                  // 12548
              var p = tEl.find('p')[0];                                                                                // 12549
              if (!p) return;                                                                                          // 12550
              toggle.setAttribute('aria-label', 'Toggle ' + p.textContent);                                            // 12551
            }                                                                                                          // 12552
          }                                                                                                            // 12553
        }                                                                                                              // 12554
      }                                                                                                                // 12555
                                                                                                                       // 12556
      function wrapIn(type) {                                                                                          // 12557
        var container;                                                                                                 // 12558
        if (type == 'div') {                                                                                           // 12559
          container = angular.element('<div class="md-no-style md-list-item-inner">');                                 // 12560
          container.append(tEl.contents());                                                                            // 12561
          tEl.addClass('md-proxy-focus');                                                                              // 12562
        } else {                                                                                                       // 12563
          container = angular.element('<md-button class="md-no-style"><div class="md-list-item-inner"></div></md-button>');
          copyAttributes(tEl[0], container[0]);                                                                        // 12565
          container.children().eq(0).append(tEl.contents());                                                           // 12566
        }                                                                                                              // 12567
                                                                                                                       // 12568
        tEl[0].setAttribute('tabindex', '-1');                                                                         // 12569
        tEl.append(container);                                                                                         // 12570
      }                                                                                                                // 12571
                                                                                                                       // 12572
      function wrapSecondary() {                                                                                       // 12573
        if (secondaryItem && !isButton(secondaryItem) && secondaryItem.hasAttribute('ng-click')) {                     // 12574
          $mdAria.expect(secondaryItem, 'aria-label');                                                                 // 12575
          var buttonWrapper = angular.element('<md-button class="md-secondary-container md-icon-button">');            // 12576
          copyAttributes(secondaryItem, buttonWrapper[0]);                                                             // 12577
          secondaryItem.setAttribute('tabindex', '-1');                                                                // 12578
          secondaryItem.classList.remove('md-secondary');                                                              // 12579
          buttonWrapper.append(secondaryItem);                                                                         // 12580
          secondaryItem = buttonWrapper[0];                                                                            // 12581
        }                                                                                                              // 12582
                                                                                                                       // 12583
        // Check for a secondary item and move it outside                                                              // 12584
        if ( secondaryItem && (                                                                                        // 12585
            secondaryItem.hasAttribute('ng-click') ||                                                                  // 12586
            ( tAttrs.ngClick &&                                                                                        // 12587
            isProxiedElement(secondaryItem) )                                                                          // 12588
          )) {                                                                                                         // 12589
          tEl.addClass('md-with-secondary');                                                                           // 12590
          tEl.append(secondaryItem);                                                                                   // 12591
        }                                                                                                              // 12592
      }                                                                                                                // 12593
                                                                                                                       // 12594
      function copyAttributes(item, wrapper) {                                                                         // 12595
        var copiedAttrs = ['ng-if', 'ng-click', 'aria-label', 'ng-disabled',                                           // 12596
          'ui-sref', 'href', 'ng-href', 'ng-attr-ui-sref'];                                                            // 12597
        angular.forEach(copiedAttrs, function(attr) {                                                                  // 12598
          if (item.hasAttribute(attr)) {                                                                               // 12599
            wrapper.setAttribute(attr, item.getAttribute(attr));                                                       // 12600
            item.removeAttribute(attr);                                                                                // 12601
          }                                                                                                            // 12602
        });                                                                                                            // 12603
      }                                                                                                                // 12604
                                                                                                                       // 12605
      function isProxiedElement(el) {                                                                                  // 12606
        return proxiedTypes.indexOf(el.nodeName.toLowerCase()) != -1;                                                  // 12607
      }                                                                                                                // 12608
                                                                                                                       // 12609
      function isButton(el) {                                                                                          // 12610
        var nodeName = el.nodeName.toUpperCase();                                                                      // 12611
                                                                                                                       // 12612
        return nodeName == "MD-BUTTON" || nodeName == "BUTTON";                                                        // 12613
      }                                                                                                                // 12614
                                                                                                                       // 12615
      return postLink;                                                                                                 // 12616
                                                                                                                       // 12617
      function postLink($scope, $element, $attr, ctrl) {                                                               // 12618
                                                                                                                       // 12619
        var proxies    = [],                                                                                           // 12620
            firstChild = $element[0].firstElementChild,                                                                // 12621
            hasClick   = firstChild && hasClickEvent(firstChild);                                                      // 12622
                                                                                                                       // 12623
        computeProxies();                                                                                              // 12624
        computeClickable();                                                                                            // 12625
                                                                                                                       // 12626
        if ($element.hasClass('md-proxy-focus') && proxies.length) {                                                   // 12627
          angular.forEach(proxies, function(proxy) {                                                                   // 12628
            proxy = angular.element(proxy);                                                                            // 12629
                                                                                                                       // 12630
            $scope.mouseActive = false;                                                                                // 12631
            proxy.on('mousedown', function() {                                                                         // 12632
              $scope.mouseActive = true;                                                                               // 12633
              $timeout(function(){                                                                                     // 12634
                $scope.mouseActive = false;                                                                            // 12635
              }, 100);                                                                                                 // 12636
            })                                                                                                         // 12637
            .on('focus', function() {                                                                                  // 12638
              if ($scope.mouseActive === false) { $element.addClass('md-focused'); }                                   // 12639
              proxy.on('blur', function proxyOnBlur() {                                                                // 12640
                $element.removeClass('md-focused');                                                                    // 12641
                proxy.off('blur', proxyOnBlur);                                                                        // 12642
              });                                                                                                      // 12643
            });                                                                                                        // 12644
          });                                                                                                          // 12645
        }                                                                                                              // 12646
                                                                                                                       // 12647
        function hasClickEvent (element) {                                                                             // 12648
          var attr = element.attributes;                                                                               // 12649
          for (var i = 0; i < attr.length; i++) {                                                                      // 12650
            if ($attr.$normalize(attr[i].name) === 'ngClick') return true;                                             // 12651
          }                                                                                                            // 12652
          return false;                                                                                                // 12653
        }                                                                                                              // 12654
                                                                                                                       // 12655
        function computeProxies() {                                                                                    // 12656
          var children = $element.children();                                                                          // 12657
          if (children.length && !children[0].hasAttribute('ng-click')) {                                              // 12658
            angular.forEach(proxiedTypes, function(type) {                                                             // 12659
              angular.forEach(firstChild.querySelectorAll(type), function(child) {                                     // 12660
                proxies.push(child);                                                                                   // 12661
              });                                                                                                      // 12662
            });                                                                                                        // 12663
          }                                                                                                            // 12664
        }                                                                                                              // 12665
        function computeClickable() {                                                                                  // 12666
          if (proxies.length == 1 || hasClick) {                                                                       // 12667
            $element.addClass('md-clickable');                                                                         // 12668
                                                                                                                       // 12669
            if (!hasClick) {                                                                                           // 12670
              ctrl.attachRipple($scope, angular.element($element[0].querySelector('.md-no-style')));                   // 12671
            }                                                                                                          // 12672
          }                                                                                                            // 12673
        }                                                                                                              // 12674
                                                                                                                       // 12675
        if (!hasClick && !proxies.length) {                                                                            // 12676
          firstChild && firstChild.addEventListener('keypress', function(e) {                                          // 12677
            if (e.target.nodeName != 'INPUT' && e.target.nodeName != 'TEXTAREA' && !e.target.isContentEditable) {      // 12678
              var keyCode = e.which || e.keyCode;                                                                      // 12679
              if (keyCode == $mdConstant.KEY_CODE.SPACE) {                                                             // 12680
                if (firstChild) {                                                                                      // 12681
                  firstChild.click();                                                                                  // 12682
                  e.preventDefault();                                                                                  // 12683
                  e.stopPropagation();                                                                                 // 12684
                }                                                                                                      // 12685
              }                                                                                                        // 12686
            }                                                                                                          // 12687
          });                                                                                                          // 12688
        }                                                                                                              // 12689
                                                                                                                       // 12690
        $element.off('click');                                                                                         // 12691
        $element.off('keypress');                                                                                      // 12692
                                                                                                                       // 12693
        if (proxies.length == 1 && firstChild) {                                                                       // 12694
          $element.children().eq(0).on('click', function(e) {                                                          // 12695
            var parentButton = $mdUtil.getClosest(e.target, 'BUTTON');                                                 // 12696
            if (!parentButton && firstChild.contains(e.target)) {                                                      // 12697
              angular.forEach(proxies, function(proxy) {                                                               // 12698
                if (e.target !== proxy && !proxy.contains(e.target)) {                                                 // 12699
                  angular.element(proxy).triggerHandler('click');                                                      // 12700
                }                                                                                                      // 12701
              });                                                                                                      // 12702
            }                                                                                                          // 12703
          });                                                                                                          // 12704
        }                                                                                                              // 12705
      }                                                                                                                // 12706
    }                                                                                                                  // 12707
  };                                                                                                                   // 12708
}                                                                                                                      // 12709
mdListItemDirective.$inject = ["$mdAria", "$mdConstant", "$mdUtil", "$timeout"];                                       // 12710
                                                                                                                       // 12711
/*                                                                                                                     // 12712
 * @private                                                                                                            // 12713
 * @ngdoc controller                                                                                                   // 12714
 * @name MdListController                                                                                              // 12715
 * @module material.components.list                                                                                    // 12716
 *                                                                                                                     // 12717
 */                                                                                                                    // 12718
function MdListController($scope, $element, $mdListInkRipple) {                                                        // 12719
  var ctrl = this;                                                                                                     // 12720
  ctrl.attachRipple = attachRipple;                                                                                    // 12721
                                                                                                                       // 12722
  function attachRipple (scope, element) {                                                                             // 12723
    var options = {};                                                                                                  // 12724
    $mdListInkRipple.attach(scope, element, options);                                                                  // 12725
  }                                                                                                                    // 12726
}                                                                                                                      // 12727
MdListController.$inject = ["$scope", "$element", "$mdListInkRipple"];                                                 // 12728
                                                                                                                       // 12729
                                                                                                                       // 12730
})();                                                                                                                  // 12731
(function(){                                                                                                           // 12732
"use strict";                                                                                                          // 12733
                                                                                                                       // 12734
/**                                                                                                                    // 12735
 * @ngdoc module                                                                                                       // 12736
 * @name material.components.menu                                                                                      // 12737
 */                                                                                                                    // 12738
                                                                                                                       // 12739
angular.module('material.components.menu', [                                                                           // 12740
  'material.core',                                                                                                     // 12741
  'material.components.backdrop'                                                                                       // 12742
]);                                                                                                                    // 12743
                                                                                                                       // 12744
})();                                                                                                                  // 12745
(function(){                                                                                                           // 12746
"use strict";                                                                                                          // 12747
                                                                                                                       // 12748
/**                                                                                                                    // 12749
 * @ngdoc module                                                                                                       // 12750
 * @name material.components.progressCircular                                                                          // 12751
 * @description Circular Progress module!                                                                              // 12752
 */                                                                                                                    // 12753
angular.module('material.components.progressCircular', [                                                               // 12754
  'material.core'                                                                                                      // 12755
])                                                                                                                     // 12756
  .directive('mdProgressCircular', MdProgressCircularDirective);                                                       // 12757
                                                                                                                       // 12758
/**                                                                                                                    // 12759
 * @ngdoc directive                                                                                                    // 12760
 * @name mdProgressCircular                                                                                            // 12761
 * @module material.components.progressCircular                                                                        // 12762
 * @restrict E                                                                                                         // 12763
 *                                                                                                                     // 12764
* @description                                                                                                         // 12765
 * The circular progress directive is used to make loading content in your app as delightful and                       // 12766
 * painless as possible by minimizing the amount of visual change a user sees before they can view                     // 12767
 * and interact with content.                                                                                          // 12768
 *                                                                                                                     // 12769
 * For operations where the percentage of the operation completed can be determined, use a                             // 12770
 * determinate indicator. They give users a quick sense of how long an operation will take.                            // 12771
 *                                                                                                                     // 12772
 * For operations where the user is asked to wait a moment while something finishes up, and it’s                       // 12773
 * not necessary to expose what's happening behind the scenes and how long it will take, use an                        // 12774
 * indeterminate indicator.                                                                                            // 12775
 *                                                                                                                     // 12776
 * @param {string} md-mode Select from one of two modes: **'determinate'** and **'indeterminate'**.                    // 12777
 *                                                                                                                     // 12778
 * Note: if the `md-mode` value is set as undefined or specified as not 1 of the two (2) valid modes, then `.ng-hide`  // 12779
 * will be auto-applied as a style to the component.                                                                   // 12780
 *                                                                                                                     // 12781
 * Note: if not configured, the `md-mode="indeterminate"` will be auto injected as an attribute.                       // 12782
 * If `value=""` is also specified, however, then `md-mode="determinate"` would be auto-injected instead.              // 12783
 * @param {number=} value In determinate mode, this number represents the percentage of the                            // 12784
 *     circular progress. Default: 0                                                                                   // 12785
 * @param {number=} md-diameter This specifies the diameter of the circular progress. The value                        // 12786
 * may be a percentage (eg '25%') or a pixel-size value (eg '48'). If this attribute is                                // 12787
 * not present then a default value of '48px' is assumed.                                                              // 12788
 *                                                                                                                     // 12789
 * @usage                                                                                                              // 12790
 * <hljs lang="html">                                                                                                  // 12791
 * <md-progress-circular md-mode="determinate" value="..."></md-progress-circular>                                     // 12792
 *                                                                                                                     // 12793
 * <md-progress-circular md-mode="determinate" ng-value="..."></md-progress-circular>                                  // 12794
 *                                                                                                                     // 12795
 * <md-progress-circular md-mode="determinate" value="..." md-diameter="100"></md-progress-circular>                   // 12796
 *                                                                                                                     // 12797
 * <md-progress-circular md-mode="indeterminate"></md-progress-circular>                                               // 12798
 * </hljs>                                                                                                             // 12799
 */                                                                                                                    // 12800
function MdProgressCircularDirective($mdTheming, $mdUtil, $log) {                                                      // 12801
  var DEFAULT_PROGRESS_SIZE = 100;                                                                                     // 12802
  var DEFAULT_SCALING = 0.5;                                                                                           // 12803
                                                                                                                       // 12804
  var MODE_DETERMINATE = "determinate",                                                                                // 12805
      MODE_INDETERMINATE = "indeterminate";                                                                            // 12806
                                                                                                                       // 12807
                                                                                                                       // 12808
  return {                                                                                                             // 12809
    restrict: 'E',                                                                                                     // 12810
    scope : true,                                                                                                      // 12811
    template:                                                                                                          // 12812
        // The progress 'circle' is composed of two half-circles: the left side and the right                          // 12813
        // side. Each side has CSS applied to 'fill-in' the half-circle to the appropriate progress.                   // 12814
        '<div class="md-scale-wrapper">' +                                                                             // 12815
          '<div class="md-spinner-wrapper">' +                                                                         // 12816
            '<div class="md-inner">' +                                                                                 // 12817
              '<div class="md-gap"></div>' +                                                                           // 12818
              '<div class="md-left">' +                                                                                // 12819
                '<div class="md-half-circle"></div>' +                                                                 // 12820
              '</div>' +                                                                                               // 12821
              '<div class="md-right">' +                                                                               // 12822
                '<div class="md-half-circle"></div>' +                                                                 // 12823
              '</div>' +                                                                                               // 12824
            '</div>' +                                                                                                 // 12825
          '</div>' +                                                                                                   // 12826
        '</div>',                                                                                                      // 12827
    compile: compile                                                                                                   // 12828
  };                                                                                                                   // 12829
                                                                                                                       // 12830
  function compile(tElement) {                                                                                         // 12831
    // The javascript in this file is mainly responsible for setting the correct aria attributes.                      // 12832
    // The animation of the progress spinner is done entirely with just CSS.                                           // 12833
    tElement.attr('aria-valuemin', 0);                                                                                 // 12834
    tElement.attr('aria-valuemax', 100);                                                                               // 12835
    tElement.attr('role', 'progressbar');                                                                              // 12836
                                                                                                                       // 12837
    return postLink;                                                                                                   // 12838
  }                                                                                                                    // 12839
                                                                                                                       // 12840
  function postLink(scope, element, attr) {                                                                            // 12841
    $mdTheming(element);                                                                                               // 12842
                                                                                                                       // 12843
    var circle = element;                                                                                              // 12844
    var spinnerWrapper =  angular.element(element.children()[0]);                                                      // 12845
    var lastMode, toVendorCSS = $mdUtil.dom.animator.toCss;                                                            // 12846
                                                                                                                       // 12847
    element.attr('md-mode', mode());                                                                                   // 12848
                                                                                                                       // 12849
    updateScale();                                                                                                     // 12850
    validateMode();                                                                                                    // 12851
    watchAttributes();                                                                                                 // 12852
                                                                                                                       // 12853
    /**                                                                                                                // 12854
     * Watch the value and md-mode attributes                                                                          // 12855
     */                                                                                                                // 12856
    function watchAttributes() {                                                                                       // 12857
     attr.$observe('value', function(value) {                                                                          // 12858
           var percentValue = clamp(value);                                                                            // 12859
           element.attr('aria-valuenow', percentValue);                                                                // 12860
                                                                                                                       // 12861
           if (mode() == MODE_DETERMINATE) {                                                                           // 12862
             animateIndicator(percentValue);                                                                           // 12863
           }                                                                                                           // 12864
         });                                                                                                           // 12865
     attr.$observe('mdMode',function(mode){                                                                            // 12866
       switch( mode ) {                                                                                                // 12867
         case MODE_DETERMINATE:                                                                                        // 12868
         case MODE_INDETERMINATE:                                                                                      // 12869
           spinnerWrapper.removeClass('ng-hide');                                                                      // 12870
           if (lastMode) spinnerWrapper.removeClass(lastMode);                                                         // 12871
           spinnerWrapper.addClass( lastMode = "md-mode-" + mode );                                                    // 12872
           break;                                                                                                      // 12873
         default:                                                                                                      // 12874
           if (lastMode) spinnerWrapper.removeClass( lastMode );                                                       // 12875
           spinnerWrapper.addClass('ng-hide');                                                                         // 12876
           lastMode = undefined;                                                                                       // 12877
           break;                                                                                                      // 12878
       }                                                                                                               // 12879
     });                                                                                                               // 12880
    }                                                                                                                  // 12881
                                                                                                                       // 12882
    /**                                                                                                                // 12883
     * Update size/scaling of the progress indicator                                                                   // 12884
     * Watch the "value" and "md-mode" attributes                                                                      // 12885
     */                                                                                                                // 12886
    function updateScale() {                                                                                           // 12887
      // set the outer container to the size the user specified                                                        // 12888
      circle.css({                                                                                                     // 12889
        width: (100 * getDiameterRatio()) + 'px',                                                                      // 12890
        height: (100 * getDiameterRatio()) + 'px'                                                                      // 12891
      });                                                                                                              // 12892
      // the internal element is still 100px, so we have to scale it down to match the size                            // 12893
      circle.children().eq(0).css(toVendorCSS({                                                                        // 12894
        transform : $mdUtil.supplant('translate(-50%, -50%) scale( {0} )',[getDiameterRatio()])                        // 12895
      }));                                                                                                             // 12896
    }                                                                                                                  // 12897
                                                                                                                       // 12898
    /**                                                                                                                // 12899
     * Auto-defaults the mode to either `determinate` or `indeterminate` mode; if not specified                        // 12900
     */                                                                                                                // 12901
    function validateMode() {                                                                                          // 12902
      if ( angular.isUndefined(attr.mdMode) ) {                                                                        // 12903
        var hasValue = angular.isDefined(attr.value);                                                                  // 12904
        var mode = hasValue ? MODE_DETERMINATE : MODE_INDETERMINATE;                                                   // 12905
        var info = "Auto-adding the missing md-mode='{0}' to the ProgressCircular element";                            // 12906
                                                                                                                       // 12907
        $log.debug( $mdUtil.supplant(info, [mode]) );                                                                  // 12908
                                                                                                                       // 12909
        element.attr("md-mode",mode);                                                                                  // 12910
        attr['mdMode'] = mode;                                                                                         // 12911
      }                                                                                                                // 12912
    }                                                                                                                  // 12913
                                                                                                                       // 12914
    var leftC, rightC, gap;                                                                                            // 12915
                                                                                                                       // 12916
    /**                                                                                                                // 12917
     * Manually animate the Determinate indicator based on the specified                                               // 12918
     * percentage value (0-100).                                                                                       // 12919
     *                                                                                                                 // 12920
     * Note: this animation was previously done using SCSS.                                                            // 12921
     * - generated 54K of styles                                                                                       // 12922
     * - use attribute selectors which had poor performances in IE                                                     // 12923
     */                                                                                                                // 12924
    function animateIndicator(value) {                                                                                 // 12925
      if ( !mode() ) return;                                                                                           // 12926
                                                                                                                       // 12927
      leftC  = leftC  || angular.element(element[0].querySelector('.md-left > .md-half-circle'));                      // 12928
      rightC = rightC || angular.element(element[0].querySelector('.md-right > .md-half-circle'));                     // 12929
      gap    = gap    || angular.element(element[0].querySelector('.md-gap'));                                         // 12930
                                                                                                                       // 12931
      var gapStyles = removeEmptyValues({                                                                              // 12932
          borderBottomColor: (value <= 50) ? "transparent !important" : "",                                            // 12933
          transition: (value <= 50) ? "" : "borderBottomColor 0.1s linear"                                             // 12934
        }),                                                                                                            // 12935
        leftStyles = removeEmptyValues({                                                                               // 12936
          transition: (value <= 50) ? "transform 0.1s linear" : "",                                                    // 12937
          transform: $mdUtil.supplant("rotate({0}deg)", [value <= 50 ? 135 : (((value - 50) / 50 * 180) + 135)])       // 12938
        }),                                                                                                            // 12939
        rightStyles = removeEmptyValues({                                                                              // 12940
          transition: (value >= 50) ? "transform 0.1s linear" : "",                                                    // 12941
          transform: $mdUtil.supplant("rotate({0}deg)", [value >= 50 ? 45 : (value / 50 * 180 - 135)])                 // 12942
        });                                                                                                            // 12943
                                                                                                                       // 12944
      leftC.css(toVendorCSS(leftStyles));                                                                              // 12945
      rightC.css(toVendorCSS(rightStyles));                                                                            // 12946
      gap.css(toVendorCSS(gapStyles));                                                                                 // 12947
                                                                                                                       // 12948
    }                                                                                                                  // 12949
                                                                                                                       // 12950
    /**                                                                                                                // 12951
     * We will scale the progress circle based on the default diameter.                                                // 12952
     *                                                                                                                 // 12953
     * Determine the diameter percentage (defaults to 100%)                                                            // 12954
     * May be express as float, percentage, or integer                                                                 // 12955
     */                                                                                                                // 12956
    function getDiameterRatio() {                                                                                      // 12957
      if ( !attr.mdDiameter ) return DEFAULT_SCALING;                                                                  // 12958
                                                                                                                       // 12959
      var match = /([0-9]*)%/.exec(attr.mdDiameter);                                                                   // 12960
      var value = Math.max(0, (match && match[1]/100) || parseFloat(attr.mdDiameter));                                 // 12961
                                                                                                                       // 12962
      // should return ratio; DEFAULT_PROGRESS_SIZE === 100px is default size                                          // 12963
      return  (value > 1) ? value / DEFAULT_PROGRESS_SIZE : value;                                                     // 12964
    }                                                                                                                  // 12965
                                                                                                                       // 12966
    /**                                                                                                                // 12967
     * Is the md-mode a valid option?                                                                                  // 12968
     */                                                                                                                // 12969
    function mode() {                                                                                                  // 12970
      var value = (attr.mdMode || "").trim();                                                                          // 12971
      if ( value ) {                                                                                                   // 12972
        switch(value) {                                                                                                // 12973
          case MODE_DETERMINATE :                                                                                      // 12974
          case MODE_INDETERMINATE :                                                                                    // 12975
            break;                                                                                                     // 12976
          default:                                                                                                     // 12977
            value = undefined;                                                                                         // 12978
            break;                                                                                                     // 12979
        }                                                                                                              // 12980
      }                                                                                                                // 12981
      return value;                                                                                                    // 12982
    }                                                                                                                  // 12983
                                                                                                                       // 12984
  }                                                                                                                    // 12985
                                                                                                                       // 12986
  /**                                                                                                                  // 12987
   * Clamps the value to be between 0 and 100.                                                                         // 12988
   * @param {number} value The value to clamp.                                                                         // 12989
   * @returns {number}                                                                                                 // 12990
   */                                                                                                                  // 12991
  function clamp(value) {                                                                                              // 12992
    return Math.max(0, Math.min(value || 0, 100));                                                                     // 12993
  }                                                                                                                    // 12994
                                                                                                                       // 12995
  function removeEmptyValues(target) {                                                                                 // 12996
    for (var key in target) {                                                                                          // 12997
      if (target.hasOwnProperty(key)) {                                                                                // 12998
        if ( target[key] == "" ) delete target[key];                                                                   // 12999
      }                                                                                                                // 13000
    }                                                                                                                  // 13001
                                                                                                                       // 13002
    return target;                                                                                                     // 13003
  }                                                                                                                    // 13004
}                                                                                                                      // 13005
MdProgressCircularDirective.$inject = ["$mdTheming", "$mdUtil", "$log"];                                               // 13006
                                                                                                                       // 13007
})();                                                                                                                  // 13008
(function(){                                                                                                           // 13009
"use strict";                                                                                                          // 13010
                                                                                                                       // 13011
/**                                                                                                                    // 13012
 * @ngdoc module                                                                                                       // 13013
 * @name material.components.progressLinear                                                                            // 13014
 * @description Linear Progress module!                                                                                // 13015
 */                                                                                                                    // 13016
angular.module('material.components.progressLinear', [                                                                 // 13017
  'material.core'                                                                                                      // 13018
])                                                                                                                     // 13019
  .directive('mdProgressLinear', MdProgressLinearDirective);                                                           // 13020
                                                                                                                       // 13021
/**                                                                                                                    // 13022
 * @ngdoc directive                                                                                                    // 13023
 * @name mdProgressLinear                                                                                              // 13024
 * @module material.components.progressLinear                                                                          // 13025
 * @restrict E                                                                                                         // 13026
 *                                                                                                                     // 13027
 * @description                                                                                                        // 13028
 * The linear progress directive is used to make loading content                                                       // 13029
 * in your app as delightful and painless as possible by minimizing                                                    // 13030
 * the amount of visual change a user sees before they can view                                                        // 13031
 * and interact with content.                                                                                          // 13032
 *                                                                                                                     // 13033
 * Each operation should only be represented by one activity indicator                                                 // 13034
 * For example: one refresh operation should not display both a                                                        // 13035
 * refresh bar and an activity circle.                                                                                 // 13036
 *                                                                                                                     // 13037
 * For operations where the percentage of the operation completed                                                      // 13038
 * can be determined, use a determinate indicator. They give users                                                     // 13039
 * a quick sense of how long an operation will take.                                                                   // 13040
 *                                                                                                                     // 13041
 * For operations where the user is asked to wait a moment while                                                       // 13042
 * something finishes up, and it’s not necessary to expose what's                                                      // 13043
 * happening behind the scenes and how long it will take, use an                                                       // 13044
 * indeterminate indicator.                                                                                            // 13045
 *                                                                                                                     // 13046
 * @param {string} md-mode Select from one of four modes: determinate, indeterminate, buffer or query.                 // 13047
 *                                                                                                                     // 13048
 * Note: if the `md-mode` value is set as undefined or specified as 1 of the four (4) valid modes, then `.ng-hide`     // 13049
 * will be auto-applied as a style to the component.                                                                   // 13050
 *                                                                                                                     // 13051
 * Note: if not configured, the `md-mode="indeterminate"` will be auto injected as an attribute. If `value=""` is also specified, however,
 * then `md-mode="determinate"` would be auto-injected instead.                                                        // 13053
 * @param {number=} value In determinate and buffer modes, this number represents the percentage of the primary progress bar. Default: 0
 * @param {number=} md-buffer-value In the buffer mode, this number represents the percentage of the secondary progress bar. Default: 0
 *                                                                                                                     // 13056
 * @usage                                                                                                              // 13057
 * <hljs lang="html">                                                                                                  // 13058
 * <md-progress-linear md-mode="determinate" value="..."></md-progress-linear>                                         // 13059
 *                                                                                                                     // 13060
 * <md-progress-linear md-mode="determinate" ng-value="..."></md-progress-linear>                                      // 13061
 *                                                                                                                     // 13062
 * <md-progress-linear md-mode="indeterminate"></md-progress-linear>                                                   // 13063
 *                                                                                                                     // 13064
 * <md-progress-linear md-mode="buffer" value="..." md-buffer-value="..."></md-progress-linear>                        // 13065
 *                                                                                                                     // 13066
 * <md-progress-linear md-mode="query"></md-progress-linear>                                                           // 13067
 * </hljs>                                                                                                             // 13068
 */                                                                                                                    // 13069
function MdProgressLinearDirective($mdTheming, $mdUtil, $log) {                                                        // 13070
  var MODE_DETERMINATE = "determinate",                                                                                // 13071
      MODE_INDETERMINATE = "indeterminate",                                                                            // 13072
      MODE_BUFFER = "buffer",                                                                                          // 13073
      MODE_QUERY = "query";                                                                                            // 13074
                                                                                                                       // 13075
  return {                                                                                                             // 13076
    restrict: 'E',                                                                                                     // 13077
    template: '<div class="md-container">' +                                                                           // 13078
      '<div class="md-dashed"></div>' +                                                                                // 13079
      '<div class="md-bar md-bar1"></div>' +                                                                           // 13080
      '<div class="md-bar md-bar2"></div>' +                                                                           // 13081
      '</div>',                                                                                                        // 13082
    compile: compile                                                                                                   // 13083
  };                                                                                                                   // 13084
                                                                                                                       // 13085
  function compile(tElement, tAttrs, transclude) {                                                                     // 13086
    tElement.attr('aria-valuemin', 0);                                                                                 // 13087
    tElement.attr('aria-valuemax', 100);                                                                               // 13088
    tElement.attr('role', 'progressbar');                                                                              // 13089
                                                                                                                       // 13090
    return postLink;                                                                                                   // 13091
  }                                                                                                                    // 13092
  function postLink(scope, element, attr) {                                                                            // 13093
    $mdTheming(element);                                                                                               // 13094
                                                                                                                       // 13095
    var lastMode, toVendorCSS = $mdUtil.dom.animator.toCss;                                                            // 13096
    var bar1 = angular.element(element[0].querySelector('.md-bar1')),                                                  // 13097
        bar2 = angular.element(element[0].querySelector('.md-bar2')),                                                  // 13098
        container = angular.element(element[0].querySelector('.md-container'));                                        // 13099
                                                                                                                       // 13100
    element.attr('md-mode', mode());                                                                                   // 13101
                                                                                                                       // 13102
    validateMode();                                                                                                    // 13103
    watchAttributes();                                                                                                 // 13104
                                                                                                                       // 13105
    /**                                                                                                                // 13106
     * Watch the value, md-buffer-value, and md-mode attributes                                                        // 13107
     */                                                                                                                // 13108
    function watchAttributes() {                                                                                       // 13109
      attr.$observe('value', function(value) {                                                                         // 13110
        var percentValue = clamp(value);                                                                               // 13111
        element.attr('aria-valuenow', percentValue);                                                                   // 13112
                                                                                                                       // 13113
        if (mode() != MODE_QUERY) animateIndicator(bar2, percentValue);                                                // 13114
      });                                                                                                              // 13115
                                                                                                                       // 13116
      attr.$observe('mdBufferValue', function(value) {                                                                 // 13117
        animateIndicator(bar1, clamp(value));                                                                          // 13118
      });                                                                                                              // 13119
                                                                                                                       // 13120
      attr.$observe('mdMode',function(mode){                                                                           // 13121
        switch( mode ) {                                                                                               // 13122
          case MODE_QUERY:                                                                                             // 13123
          case MODE_BUFFER:                                                                                            // 13124
          case MODE_DETERMINATE:                                                                                       // 13125
          case MODE_INDETERMINATE:                                                                                     // 13126
            container.removeClass( 'ng-hide' + ' ' + lastMode );                                                       // 13127
            container.addClass( lastMode = "md-mode-" + mode );                                                        // 13128
            break;                                                                                                     // 13129
          default:                                                                                                     // 13130
            if (lastMode) container.removeClass( lastMode );                                                           // 13131
            container.addClass('ng-hide');                                                                             // 13132
            lastMode = undefined;                                                                                      // 13133
            break;                                                                                                     // 13134
        }                                                                                                              // 13135
      });                                                                                                              // 13136
    }                                                                                                                  // 13137
                                                                                                                       // 13138
    /**                                                                                                                // 13139
     * Auto-defaults the mode to either `determinate` or `indeterminate` mode; if not specified                        // 13140
     */                                                                                                                // 13141
    function validateMode() {                                                                                          // 13142
      if ( angular.isUndefined(attr.mdMode) ) {                                                                        // 13143
        var hasValue = angular.isDefined(attr.value);                                                                  // 13144
        var mode = hasValue ? MODE_DETERMINATE : MODE_INDETERMINATE;                                                   // 13145
        var info = "Auto-adding the missing md-mode='{0}' to the ProgressLinear element";                              // 13146
                                                                                                                       // 13147
        $log.debug( $mdUtil.supplant(info, [mode]) );                                                                  // 13148
                                                                                                                       // 13149
        element.attr("md-mode",mode);                                                                                  // 13150
        attr['mdMode'] = mode;                                                                                         // 13151
      }                                                                                                                // 13152
    }                                                                                                                  // 13153
                                                                                                                       // 13154
    /**                                                                                                                // 13155
     * Is the md-mode a valid option?                                                                                  // 13156
     */                                                                                                                // 13157
    function mode() {                                                                                                  // 13158
      var value = (attr.mdMode || "").trim();                                                                          // 13159
      if ( value ) {                                                                                                   // 13160
        switch(value) {                                                                                                // 13161
          case MODE_DETERMINATE:                                                                                       // 13162
          case MODE_INDETERMINATE:                                                                                     // 13163
          case MODE_BUFFER:                                                                                            // 13164
          case MODE_QUERY:                                                                                             // 13165
            break;                                                                                                     // 13166
          default:                                                                                                     // 13167
            value = undefined;                                                                                         // 13168
            break;                                                                                                     // 13169
        }                                                                                                              // 13170
      }                                                                                                                // 13171
      return value;                                                                                                    // 13172
    }                                                                                                                  // 13173
                                                                                                                       // 13174
    /**                                                                                                                // 13175
     * Manually set CSS to animate the Determinate indicator based on the specified                                    // 13176
     * percentage value (0-100).                                                                                       // 13177
     */                                                                                                                // 13178
    function animateIndicator(target, value) {                                                                         // 13179
      if ( !mode() ) return;                                                                                           // 13180
                                                                                                                       // 13181
      var to = $mdUtil.supplant("translateX({0}%) scale({1},1)", [ (value-100)/2, value/100 ]);                        // 13182
      var styles = toVendorCSS({ transform : to });                                                                    // 13183
      angular.element(target).css( styles );                                                                           // 13184
    }                                                                                                                  // 13185
  }                                                                                                                    // 13186
                                                                                                                       // 13187
  /**                                                                                                                  // 13188
   * Clamps the value to be between 0 and 100.                                                                         // 13189
   * @param {number} value The value to clamp.                                                                         // 13190
   * @returns {number}                                                                                                 // 13191
   */                                                                                                                  // 13192
  function clamp(value) {                                                                                              // 13193
    return Math.max(0, Math.min(value || 0, 100));                                                                     // 13194
  }                                                                                                                    // 13195
}                                                                                                                      // 13196
MdProgressLinearDirective.$inject = ["$mdTheming", "$mdUtil", "$log"];                                                 // 13197
                                                                                                                       // 13198
                                                                                                                       // 13199
})();                                                                                                                  // 13200
(function(){                                                                                                           // 13201
"use strict";                                                                                                          // 13202
                                                                                                                       // 13203
/**                                                                                                                    // 13204
 * @ngdoc module                                                                                                       // 13205
 * @name material.components.radioButton                                                                               // 13206
 * @description radioButton module!                                                                                    // 13207
 */                                                                                                                    // 13208
angular.module('material.components.radioButton', [                                                                    // 13209
  'material.core'                                                                                                      // 13210
])                                                                                                                     // 13211
  .directive('mdRadioGroup', mdRadioGroupDirective)                                                                    // 13212
  .directive('mdRadioButton', mdRadioButtonDirective);                                                                 // 13213
                                                                                                                       // 13214
/**                                                                                                                    // 13215
 * @ngdoc directive                                                                                                    // 13216
 * @module material.components.radioButton                                                                             // 13217
 * @name mdRadioGroup                                                                                                  // 13218
 *                                                                                                                     // 13219
 * @restrict E                                                                                                         // 13220
 *                                                                                                                     // 13221
 * @description                                                                                                        // 13222
 * The `<md-radio-group>` directive identifies a grouping                                                              // 13223
 * container for the 1..n grouped radio buttons; specified using nested                                                // 13224
 * `<md-radio-button>` tags.                                                                                           // 13225
 *                                                                                                                     // 13226
 * As per the [material design spec](http://www.google.com/design/spec/style/color.html#color-ui-color-application)    // 13227
 * the radio button is in the accent color by default. The primary color palette may be used with                      // 13228
 * the `md-primary` class.                                                                                             // 13229
 *                                                                                                                     // 13230
 * Note: `<md-radio-group>` and `<md-radio-button>` handle tabindex differently                                        // 13231
 * than the native `<input type='radio'>` controls. Whereas the native controls                                        // 13232
 * force the user to tab through all the radio buttons, `<md-radio-group>`                                             // 13233
 * is focusable, and by default the `<md-radio-button>`s are not.                                                      // 13234
 *                                                                                                                     // 13235
 * @param {string} ng-model Assignable angular expression to data-bind to.                                             // 13236
 * @param {boolean=} md-no-ink Use of attribute indicates flag to disable ink ripple effects.                          // 13237
 *                                                                                                                     // 13238
 * @usage                                                                                                              // 13239
 * <hljs lang="html">                                                                                                  // 13240
 * <md-radio-group ng-model="selected">                                                                                // 13241
 *                                                                                                                     // 13242
 *   <md-radio-button                                                                                                  // 13243
 *        ng-repeat="d in colorOptions"                                                                                // 13244
 *        ng-value="d.value" aria-label="{{ d.label }}">                                                               // 13245
 *                                                                                                                     // 13246
 *          {{ d.label }}                                                                                              // 13247
 *                                                                                                                     // 13248
 *   </md-radio-button>                                                                                                // 13249
 *                                                                                                                     // 13250
 * </md-radio-group>                                                                                                   // 13251
 * </hljs>                                                                                                             // 13252
 *                                                                                                                     // 13253
 */                                                                                                                    // 13254
function mdRadioGroupDirective($mdUtil, $mdConstant, $mdTheming, $timeout) {                                           // 13255
  RadioGroupController.prototype = createRadioGroupControllerProto();                                                  // 13256
                                                                                                                       // 13257
  return {                                                                                                             // 13258
    restrict: 'E',                                                                                                     // 13259
    controller: ['$element', RadioGroupController],                                                                    // 13260
    require: ['mdRadioGroup', '?ngModel'],                                                                             // 13261
    link: { pre: linkRadioGroup }                                                                                      // 13262
  };                                                                                                                   // 13263
                                                                                                                       // 13264
  function linkRadioGroup(scope, element, attr, ctrls) {                                                               // 13265
    $mdTheming(element);                                                                                               // 13266
    var rgCtrl = ctrls[0];                                                                                             // 13267
    var ngModelCtrl = ctrls[1] || $mdUtil.fakeNgModel();                                                               // 13268
                                                                                                                       // 13269
    rgCtrl.init(ngModelCtrl);                                                                                          // 13270
                                                                                                                       // 13271
    scope.mouseActive = false;                                                                                         // 13272
    element.attr({                                                                                                     // 13273
              'role': 'radiogroup',                                                                                    // 13274
              'tabIndex': element.attr('tabindex') || '0'                                                              // 13275
            })                                                                                                         // 13276
            .on('keydown', keydownListener)                                                                            // 13277
            .on('mousedown', function(event) {                                                                         // 13278
              scope.mouseActive = true;                                                                                // 13279
              $timeout(function() {                                                                                    // 13280
                scope.mouseActive = false;                                                                             // 13281
              }, 100);                                                                                                 // 13282
            })                                                                                                         // 13283
            .on('focus', function() {                                                                                  // 13284
              if(scope.mouseActive === false) { rgCtrl.$element.addClass('md-focused'); }                              // 13285
            })                                                                                                         // 13286
            .on('blur', function() { rgCtrl.$element.removeClass('md-focused'); });                                    // 13287
                                                                                                                       // 13288
    /**                                                                                                                // 13289
     *                                                                                                                 // 13290
     */                                                                                                                // 13291
    function setFocus() {                                                                                              // 13292
      if (!element.hasClass('md-focused')) { element.addClass('md-focused'); }                                         // 13293
    }                                                                                                                  // 13294
                                                                                                                       // 13295
    /**                                                                                                                // 13296
     *                                                                                                                 // 13297
     */                                                                                                                // 13298
    function keydownListener(ev) {                                                                                     // 13299
      var keyCode = ev.which || ev.keyCode;                                                                            // 13300
                                                                                                                       // 13301
      // Only listen to events that we originated ourselves                                                            // 13302
      // so that we don't trigger on things like arrow keys in                                                         // 13303
      // inputs.                                                                                                       // 13304
                                                                                                                       // 13305
      if (keyCode != $mdConstant.KEY_CODE.ENTER &&                                                                     // 13306
          ev.currentTarget != ev.target) {                                                                             // 13307
        return;                                                                                                        // 13308
      }                                                                                                                // 13309
                                                                                                                       // 13310
      switch (keyCode) {                                                                                               // 13311
        case $mdConstant.KEY_CODE.LEFT_ARROW:                                                                          // 13312
        case $mdConstant.KEY_CODE.UP_ARROW:                                                                            // 13313
          ev.preventDefault();                                                                                         // 13314
          rgCtrl.selectPrevious();                                                                                     // 13315
          setFocus();                                                                                                  // 13316
          break;                                                                                                       // 13317
                                                                                                                       // 13318
        case $mdConstant.KEY_CODE.RIGHT_ARROW:                                                                         // 13319
        case $mdConstant.KEY_CODE.DOWN_ARROW:                                                                          // 13320
          ev.preventDefault();                                                                                         // 13321
          rgCtrl.selectNext();                                                                                         // 13322
          setFocus();                                                                                                  // 13323
          break;                                                                                                       // 13324
                                                                                                                       // 13325
        case $mdConstant.KEY_CODE.ENTER:                                                                               // 13326
          var form = angular.element($mdUtil.getClosest(element[0], 'form'));                                          // 13327
          if (form.length > 0) {                                                                                       // 13328
            form.triggerHandler('submit');                                                                             // 13329
          }                                                                                                            // 13330
          break;                                                                                                       // 13331
      }                                                                                                                // 13332
                                                                                                                       // 13333
    }                                                                                                                  // 13334
  }                                                                                                                    // 13335
                                                                                                                       // 13336
  function RadioGroupController($element) {                                                                            // 13337
    this._radioButtonRenderFns = [];                                                                                   // 13338
    this.$element = $element;                                                                                          // 13339
  }                                                                                                                    // 13340
                                                                                                                       // 13341
  function createRadioGroupControllerProto() {                                                                         // 13342
    return {                                                                                                           // 13343
      init: function(ngModelCtrl) {                                                                                    // 13344
        this._ngModelCtrl = ngModelCtrl;                                                                               // 13345
        this._ngModelCtrl.$render = angular.bind(this, this.render);                                                   // 13346
      },                                                                                                               // 13347
      add: function(rbRender) {                                                                                        // 13348
        this._radioButtonRenderFns.push(rbRender);                                                                     // 13349
      },                                                                                                               // 13350
      remove: function(rbRender) {                                                                                     // 13351
        var index = this._radioButtonRenderFns.indexOf(rbRender);                                                      // 13352
        if (index !== -1) {                                                                                            // 13353
          this._radioButtonRenderFns.splice(index, 1);                                                                 // 13354
        }                                                                                                              // 13355
      },                                                                                                               // 13356
      render: function() {                                                                                             // 13357
        this._radioButtonRenderFns.forEach(function(rbRender) {                                                        // 13358
          rbRender();                                                                                                  // 13359
        });                                                                                                            // 13360
      },                                                                                                               // 13361
      setViewValue: function(value, eventType) {                                                                       // 13362
        this._ngModelCtrl.$setViewValue(value, eventType);                                                             // 13363
        // update the other radio buttons as well                                                                      // 13364
        this.render();                                                                                                 // 13365
      },                                                                                                               // 13366
      getViewValue: function() {                                                                                       // 13367
        return this._ngModelCtrl.$viewValue;                                                                           // 13368
      },                                                                                                               // 13369
      selectNext: function() {                                                                                         // 13370
        return changeSelectedButton(this.$element, 1);                                                                 // 13371
      },                                                                                                               // 13372
      selectPrevious: function() {                                                                                     // 13373
        return changeSelectedButton(this.$element, -1);                                                                // 13374
      },                                                                                                               // 13375
      setActiveDescendant: function (radioId) {                                                                        // 13376
        this.$element.attr('aria-activedescendant', radioId);                                                          // 13377
      }                                                                                                                // 13378
    };                                                                                                                 // 13379
  }                                                                                                                    // 13380
  /**                                                                                                                  // 13381
   * Change the radio group's selected button by a given increment.                                                    // 13382
   * If no button is selected, select the first button.                                                                // 13383
   */                                                                                                                  // 13384
  function changeSelectedButton(parent, increment) {                                                                   // 13385
    // Coerce all child radio buttons into an array, then wrap then in an iterator                                     // 13386
    var buttons = $mdUtil.iterator(parent[0].querySelectorAll('md-radio-button'), true);                               // 13387
                                                                                                                       // 13388
    if (buttons.count()) {                                                                                             // 13389
      var validate = function (button) {                                                                               // 13390
        // If disabled, then NOT valid                                                                                 // 13391
        return !angular.element(button).attr("disabled");                                                              // 13392
      };                                                                                                               // 13393
                                                                                                                       // 13394
      var selected = parent[0].querySelector('md-radio-button.md-checked');                                            // 13395
      var target = buttons[increment < 0 ? 'previous' : 'next'](selected, validate) || buttons.first();                // 13396
                                                                                                                       // 13397
      // Activate radioButton's click listener (triggerHandler won't create a real click event)                        // 13398
      angular.element(target).triggerHandler('click');                                                                 // 13399
                                                                                                                       // 13400
                                                                                                                       // 13401
    }                                                                                                                  // 13402
  }                                                                                                                    // 13403
                                                                                                                       // 13404
}                                                                                                                      // 13405
mdRadioGroupDirective.$inject = ["$mdUtil", "$mdConstant", "$mdTheming", "$timeout"];                                  // 13406
                                                                                                                       // 13407
/**                                                                                                                    // 13408
 * @ngdoc directive                                                                                                    // 13409
 * @module material.components.radioButton                                                                             // 13410
 * @name mdRadioButton                                                                                                 // 13411
 *                                                                                                                     // 13412
 * @restrict E                                                                                                         // 13413
 *                                                                                                                     // 13414
 * @description                                                                                                        // 13415
 * The `<md-radio-button>`directive is the child directive required to be used within `<md-radio-group>` elements.     // 13416
 *                                                                                                                     // 13417
 * While similar to the `<input type="radio" ng-model="" value="">` directive,                                         // 13418
 * the `<md-radio-button>` directive provides ink effects, ARIA support, and                                           // 13419
 * supports use within named radio groups.                                                                             // 13420
 *                                                                                                                     // 13421
 * @param {string} ngModel Assignable angular expression to data-bind to.                                              // 13422
 * @param {string=} ngChange Angular expression to be executed when input changes due to user                          // 13423
 *    interaction with the input element.                                                                              // 13424
 * @param {string} ngValue Angular expression which sets the value to which the expression should                      // 13425
 *    be set when selected.                                                                                            // 13426
 * @param {string} value The value to which the expression should be set when selected.                                // 13427
 * @param {string=} name Property name of the form under which the control is published.                               // 13428
 * @param {string=} aria-label Adds label to radio button for accessibility.                                           // 13429
 * Defaults to radio button's text. If no text content is available, a warning will be logged.                         // 13430
 *                                                                                                                     // 13431
 * @usage                                                                                                              // 13432
 * <hljs lang="html">                                                                                                  // 13433
 *                                                                                                                     // 13434
 * <md-radio-button value="1" aria-label="Label 1">                                                                    // 13435
 *   Label 1                                                                                                           // 13436
 * </md-radio-button>                                                                                                  // 13437
 *                                                                                                                     // 13438
 * <md-radio-button ng-model="color" ng-value="specialValue" aria-label="Green">                                       // 13439
 *   Green                                                                                                             // 13440
 * </md-radio-button>                                                                                                  // 13441
 *                                                                                                                     // 13442
 * </hljs>                                                                                                             // 13443
 *                                                                                                                     // 13444
 */                                                                                                                    // 13445
function mdRadioButtonDirective($mdAria, $mdUtil, $mdTheming) {                                                        // 13446
                                                                                                                       // 13447
  var CHECKED_CSS = 'md-checked';                                                                                      // 13448
                                                                                                                       // 13449
  return {                                                                                                             // 13450
    restrict: 'E',                                                                                                     // 13451
    require: '^mdRadioGroup',                                                                                          // 13452
    transclude: true,                                                                                                  // 13453
    template: '<div class="md-container" md-ink-ripple md-ink-ripple-checkbox>' +                                      // 13454
                '<div class="md-off"></div>' +                                                                         // 13455
                '<div class="md-on"></div>' +                                                                          // 13456
              '</div>' +                                                                                               // 13457
              '<div ng-transclude class="md-label"></div>',                                                            // 13458
    link: link                                                                                                         // 13459
  };                                                                                                                   // 13460
                                                                                                                       // 13461
  function link(scope, element, attr, rgCtrl) {                                                                        // 13462
    var lastChecked;                                                                                                   // 13463
                                                                                                                       // 13464
    $mdTheming(element);                                                                                               // 13465
    configureAria(element, scope);                                                                                     // 13466
                                                                                                                       // 13467
    initialize();                                                                                                      // 13468
                                                                                                                       // 13469
    /**                                                                                                                // 13470
     *                                                                                                                 // 13471
     */                                                                                                                // 13472
    function initialize(controller) {                                                                                  // 13473
      if ( !rgCtrl ) {                                                                                                 // 13474
        throw 'RadioGroupController not found.';                                                                       // 13475
      }                                                                                                                // 13476
                                                                                                                       // 13477
      rgCtrl.add(render);                                                                                              // 13478
      attr.$observe('value', render);                                                                                  // 13479
                                                                                                                       // 13480
      element                                                                                                          // 13481
        .on('click', listener)                                                                                         // 13482
        .on('$destroy', function() {                                                                                   // 13483
          rgCtrl.remove(render);                                                                                       // 13484
        });                                                                                                            // 13485
    }                                                                                                                  // 13486
                                                                                                                       // 13487
    /**                                                                                                                // 13488
     *                                                                                                                 // 13489
     */                                                                                                                // 13490
    function listener(ev) {                                                                                            // 13491
      if (element[0].hasAttribute('disabled')) return;                                                                 // 13492
                                                                                                                       // 13493
      scope.$apply(function() {                                                                                        // 13494
        rgCtrl.setViewValue(attr.value, ev && ev.type);                                                                // 13495
      });                                                                                                              // 13496
    }                                                                                                                  // 13497
                                                                                                                       // 13498
    /**                                                                                                                // 13499
     *  Add or remove the `.md-checked` class from the RadioButton (and conditionally its parent).                     // 13500
     *  Update the `aria-activedescendant` attribute.                                                                  // 13501
     */                                                                                                                // 13502
    function render() {                                                                                                // 13503
      var checked = (rgCtrl.getViewValue() == attr.value);                                                             // 13504
      if (checked === lastChecked) {                                                                                   // 13505
        return;                                                                                                        // 13506
      }                                                                                                                // 13507
                                                                                                                       // 13508
      lastChecked = checked;                                                                                           // 13509
      element.attr('aria-checked', checked);                                                                           // 13510
                                                                                                                       // 13511
      if (checked) {                                                                                                   // 13512
        markParentAsChecked(true);                                                                                     // 13513
        element.addClass(CHECKED_CSS);                                                                                 // 13514
                                                                                                                       // 13515
        rgCtrl.setActiveDescendant(element.attr('id'));                                                                // 13516
                                                                                                                       // 13517
      } else {                                                                                                         // 13518
        markParentAsChecked(false);                                                                                    // 13519
        element.removeClass(CHECKED_CSS);                                                                              // 13520
      }                                                                                                                // 13521
                                                                                                                       // 13522
      /**                                                                                                              // 13523
       * If the radioButton is inside a div, then add class so highlighting will work...                               // 13524
       */                                                                                                              // 13525
      function markParentAsChecked(addClass ) {                                                                        // 13526
        if ( element.parent()[0].nodeName != "MD-RADIO-GROUP") {                                                       // 13527
          element.parent()[ !!addClass ? 'addClass' : 'removeClass'](CHECKED_CSS);                                     // 13528
        }                                                                                                              // 13529
                                                                                                                       // 13530
      }                                                                                                                // 13531
    }                                                                                                                  // 13532
                                                                                                                       // 13533
    /**                                                                                                                // 13534
     * Inject ARIA-specific attributes appropriate for each radio button                                               // 13535
     */                                                                                                                // 13536
    function configureAria( element, scope ){                                                                          // 13537
      scope.ariaId = buildAriaID();                                                                                    // 13538
                                                                                                                       // 13539
      element.attr({                                                                                                   // 13540
        'id' :  scope.ariaId,                                                                                          // 13541
        'role' : 'radio',                                                                                              // 13542
        'aria-checked' : 'false'                                                                                       // 13543
      });                                                                                                              // 13544
                                                                                                                       // 13545
      $mdAria.expectWithText(element, 'aria-label');                                                                   // 13546
                                                                                                                       // 13547
      /**                                                                                                              // 13548
       * Build a unique ID for each radio button that will be used with aria-activedescendant.                         // 13549
       * Preserve existing ID if already specified.                                                                    // 13550
       * @returns {*|string}                                                                                           // 13551
       */                                                                                                              // 13552
      function buildAriaID() {                                                                                         // 13553
        return attr.id || ( 'radio' + "_" + $mdUtil.nextUid() );                                                       // 13554
      }                                                                                                                // 13555
    }                                                                                                                  // 13556
  }                                                                                                                    // 13557
}                                                                                                                      // 13558
mdRadioButtonDirective.$inject = ["$mdAria", "$mdUtil", "$mdTheming"];                                                 // 13559
                                                                                                                       // 13560
})();                                                                                                                  // 13561
(function(){                                                                                                           // 13562
"use strict";                                                                                                          // 13563
                                                                                                                       // 13564
/**                                                                                                                    // 13565
 * @ngdoc module                                                                                                       // 13566
 * @name material.components.select                                                                                    // 13567
 */                                                                                                                    // 13568
                                                                                                                       // 13569
/***************************************************                                                                   // 13570
                                                                                                                       // 13571
 ### TODO - POST RC1 ###                                                                                               // 13572
 - [ ] Abstract placement logic in $mdSelect service to $mdMenu service                                                // 13573
                                                                                                                       // 13574
 ***************************************************/                                                                  // 13575
                                                                                                                       // 13576
var SELECT_EDGE_MARGIN = 8;                                                                                            // 13577
var selectNextId = 0;                                                                                                  // 13578
                                                                                                                       // 13579
angular.module('material.components.select', [                                                                         // 13580
    'material.core',                                                                                                   // 13581
    'material.components.backdrop'                                                                                     // 13582
  ])                                                                                                                   // 13583
  .directive('mdSelect', SelectDirective)                                                                              // 13584
  .directive('mdSelectMenu', SelectMenuDirective)                                                                      // 13585
  .directive('mdOption', OptionDirective)                                                                              // 13586
  .directive('mdOptgroup', OptgroupDirective)                                                                          // 13587
  .provider('$mdSelect', SelectProvider);                                                                              // 13588
                                                                                                                       // 13589
/**                                                                                                                    // 13590
 * @ngdoc directive                                                                                                    // 13591
 * @name mdSelect                                                                                                      // 13592
 * @restrict E                                                                                                         // 13593
 * @module material.components.select                                                                                  // 13594
 *                                                                                                                     // 13595
 * @description Displays a select box, bound to an ng-model.                                                           // 13596
 *                                                                                                                     // 13597
 * @param {expression} ng-model The model!                                                                             // 13598
 * @param {boolean=} multiple Whether it's multiple.                                                                   // 13599
 * @param {expression=} md-on-close Expression to be evaluated when the select is closed.                              // 13600
 * @param {expression=} md-on-open Expression to be evaluated when opening the select.                                 // 13601
 * Will hide the select options and show a spinner until the evaluated promise resolves.                               // 13602
 * @param {string=} placeholder Placeholder hint text.                                                                 // 13603
 * @param {string=} aria-label Optional label for accessibility. Only necessary if no placeholder or                   // 13604
 * explicit label is present.                                                                                          // 13605
 * @param {string=} md-container-class Class list to get applied to the `.md-select-menu-container`                    // 13606
 * element (for custom styling).                                                                                       // 13607
 *                                                                                                                     // 13608
 * @usage                                                                                                              // 13609
 * With a placeholder (label and aria-label are added dynamically)                                                     // 13610
 * <hljs lang="html">                                                                                                  // 13611
 *   <md-input-container>                                                                                              // 13612
 *     <md-select                                                                                                      // 13613
 *       ng-model="someModel"                                                                                          // 13614
 *       placeholder="Select a state">                                                                                 // 13615
 *       <md-option ng-value="opt" ng-repeat="opt in neighborhoods2">{{ opt }}</md-option>                             // 13616
 *     </md-select>                                                                                                    // 13617
 *   </md-input-container>                                                                                             // 13618
 * </hljs>                                                                                                             // 13619
 *                                                                                                                     // 13620
 * With an explicit label                                                                                              // 13621
 * <hljs lang="html">                                                                                                  // 13622
 *   <md-input-container>                                                                                              // 13623
 *     <label>State</label>                                                                                            // 13624
 *     <md-select                                                                                                      // 13625
 *       ng-model="someModel">                                                                                         // 13626
 *       <md-option ng-value="opt" ng-repeat="opt in neighborhoods2">{{ opt }}</md-option>                             // 13627
 *     </md-select>                                                                                                    // 13628
 *   </md-input-container>                                                                                             // 13629
 * </hljs>                                                                                                             // 13630
 *                                                                                                                     // 13631
 * ## Selects and object equality                                                                                      // 13632
 * When using a `md-select` to pick from a list of objects, it is important to realize how javascript handles          // 13633
 * equality. Consider the following example:                                                                           // 13634
 * <hljs lang="js">                                                                                                    // 13635
 * angular.controller('MyCtrl', function($scope) {                                                                     // 13636
 *   $scope.users = [                                                                                                  // 13637
 *     { id: 1, name: 'Bob' },                                                                                         // 13638
 *     { id: 2, name: 'Alice' },                                                                                       // 13639
 *     { id: 3, name: 'Steve' }                                                                                        // 13640
 *   ];                                                                                                                // 13641
 *   $scope.selectedUser = { id: 1, name: 'Bob' };                                                                     // 13642
 * });                                                                                                                 // 13643
 * </hljs>                                                                                                             // 13644
 * <hljs lang="html">                                                                                                  // 13645
 * <div ng-controller="MyCtrl">                                                                                        // 13646
 *   <md-select ng-model="selectedUser">                                                                               // 13647
 *     <md-option ng-value="user" ng-repeat="user in users">{{ user.name }}</md-option>                                // 13648
 *   </md-select>                                                                                                      // 13649
 * </div>                                                                                                              // 13650
 * </hljs>                                                                                                             // 13651
 *                                                                                                                     // 13652
 * At first one might expect that the select should be populated with "Bob" as the selected user. However,             // 13653
 * this is not true. To determine whether something is selected,                                                       // 13654
 * `ngModelController` is looking at whether `$scope.selectedUser == (any user in $scope.users);`;                     // 13655
 *                                                                                                                     // 13656
 * Javascript's `==` operator does not check for deep equality (ie. that all properties                                // 13657
 * on the object are the same), but instead whether the objects are *the same object in memory*.                       // 13658
 * In this case, we have two instances of identical objects, but they exist in memory as unique                        // 13659
 * entities. Because of this, the select will have no value populated for a selected user.                             // 13660
 *                                                                                                                     // 13661
 * To get around this, `ngModelController` provides a `track by` option that allows us to specify a different          // 13662
 * expression which will be used for the equality operator. As such, we can update our `html` to                       // 13663
 * make use of this by specifying the `ng-model-options="{trackBy: '$value.id'}"` on the `md-select`                   // 13664
 * element. This converts our equality expression to be                                                                // 13665
 * `$scope.selectedUser.id == (any id in $scope.users.map(function(u) { return u.id; }));`                             // 13666
 * which results in Bob being selected as desired.                                                                     // 13667
 *                                                                                                                     // 13668
 * Working HTML:                                                                                                       // 13669
 * <hljs lang="html">                                                                                                  // 13670
 * <div ng-controller="MyCtrl">                                                                                        // 13671
 *   <md-select ng-model="selectedUser" ng-model-options="{trackBy: '$value.id'}">                                     // 13672
 *     <md-option ng-value="user" ng-repeat="user in users">{{ user.name }}</md-option>                                // 13673
 *   </md-select>                                                                                                      // 13674
 * </div>                                                                                                              // 13675
 * </hljs>                                                                                                             // 13676
 */                                                                                                                    // 13677
function SelectDirective($mdSelect, $mdUtil, $mdTheming, $mdAria, $compile, $parse) {                                  // 13678
  return {                                                                                                             // 13679
    restrict: 'E',                                                                                                     // 13680
    require: ['^?mdInputContainer', 'mdSelect', 'ngModel', '?^form'],                                                  // 13681
    compile: compile,                                                                                                  // 13682
    controller: function() {                                                                                           // 13683
    } // empty placeholder controller to be initialized in link                                                        // 13684
  };                                                                                                                   // 13685
                                                                                                                       // 13686
  function compile(element, attr) {                                                                                    // 13687
    // add the select value that will hold our placeholder or selected option value                                    // 13688
    var valueEl = angular.element('<md-select-value><span></span></md-select-value>');                                 // 13689
    valueEl.append('<span class="md-select-icon" aria-hidden="true"></span>');                                         // 13690
    valueEl.addClass('md-select-value');                                                                               // 13691
    if (!valueEl[0].hasAttribute('id')) {                                                                              // 13692
      valueEl.attr('id', 'select_value_label_' + $mdUtil.nextUid());                                                   // 13693
    }                                                                                                                  // 13694
                                                                                                                       // 13695
    // There's got to be an md-content inside. If there's not one, let's add it.                                       // 13696
    if (!element.find('md-content').length) {                                                                          // 13697
      element.append(angular.element('<md-content>').append(element.contents()));                                      // 13698
    }                                                                                                                  // 13699
                                                                                                                       // 13700
                                                                                                                       // 13701
    // Add progress spinner for md-options-loading                                                                     // 13702
    if (attr.mdOnOpen) {                                                                                               // 13703
                                                                                                                       // 13704
      // Show progress indicator while loading async                                                                   // 13705
      // Use ng-hide for `display:none` so the indicator does not interfere with the options list                      // 13706
      element                                                                                                          // 13707
        .find('md-content')                                                                                            // 13708
        .prepend(angular.element(                                                                                      // 13709
          '<div>' +                                                                                                    // 13710
          ' <md-progress-circular md-mode="{{progressMode}}" ng-hide="$$loadingAsyncDone"></md-progress-circular>' +   // 13711
          '</div>'                                                                                                     // 13712
        ));                                                                                                            // 13713
                                                                                                                       // 13714
      // Hide list [of item options] while loading async                                                               // 13715
      element                                                                                                          // 13716
        .find('md-option')                                                                                             // 13717
        .attr('ng-show', '$$loadingAsyncDone');                                                                        // 13718
    }                                                                                                                  // 13719
                                                                                                                       // 13720
    if (attr.name) {                                                                                                   // 13721
      var autofillClone = angular.element('<select class="md-visually-hidden">');                                      // 13722
      autofillClone.attr({                                                                                             // 13723
        'name': '.' + attr.name,                                                                                       // 13724
        'ng-model': attr.ngModel,                                                                                      // 13725
        'aria-hidden': 'true',                                                                                         // 13726
        'tabindex': '-1'                                                                                               // 13727
      });                                                                                                              // 13728
      var opts = element.find('md-option');                                                                            // 13729
      angular.forEach(opts, function(el) {                                                                             // 13730
        var newEl = angular.element('<option>' + el.innerHTML + '</option>');                                          // 13731
        if (el.hasAttribute('ng-value')) newEl.attr('ng-value', el.getAttribute('ng-value'));                          // 13732
        else if (el.hasAttribute('value')) newEl.attr('value', el.getAttribute('value'));                              // 13733
        autofillClone.append(newEl);                                                                                   // 13734
      });                                                                                                              // 13735
                                                                                                                       // 13736
      element.parent().append(autofillClone);                                                                          // 13737
    }                                                                                                                  // 13738
                                                                                                                       // 13739
    // Use everything that's left inside element.contents() as the contents of the menu                                // 13740
    var multiple = angular.isDefined(attr.multiple) ? 'multiple' : '';                                                 // 13741
    var selectTemplate = '' +                                                                                          // 13742
      '<div class="md-select-menu-container" aria-hidden="true">' +                                                    // 13743
      '<md-select-menu {0}>{1}</md-select-menu>' +                                                                     // 13744
      '</div>';                                                                                                        // 13745
                                                                                                                       // 13746
    selectTemplate = $mdUtil.supplant(selectTemplate, [multiple, element.html()]);                                     // 13747
    element.empty().append(valueEl);                                                                                   // 13748
    element.append(selectTemplate);                                                                                    // 13749
                                                                                                                       // 13750
    attr.tabindex = attr.tabindex || '0';                                                                              // 13751
                                                                                                                       // 13752
    return function postLink(scope, element, attr, ctrls) {                                                            // 13753
      var untouched = true;                                                                                            // 13754
      var isDisabled, ariaLabelBase;                                                                                   // 13755
                                                                                                                       // 13756
      var containerCtrl = ctrls[0];                                                                                    // 13757
      var mdSelectCtrl = ctrls[1];                                                                                     // 13758
      var ngModelCtrl = ctrls[2];                                                                                      // 13759
      var formCtrl = ctrls[3];                                                                                         // 13760
      // grab a reference to the select menu value label                                                               // 13761
      var valueEl = element.find('md-select-value');                                                                   // 13762
      var isReadonly = angular.isDefined(attr.readonly);                                                               // 13763
                                                                                                                       // 13764
      if (containerCtrl) {                                                                                             // 13765
        var isErrorGetter = containerCtrl.isErrorGetter || function() {                                                // 13766
            return ngModelCtrl.$invalid && ngModelCtrl.$touched;                                                       // 13767
          };                                                                                                           // 13768
                                                                                                                       // 13769
        if (containerCtrl.input) {                                                                                     // 13770
          throw new Error("<md-input-container> can only have *one* child <input>, <textarea> or <select> element!");  // 13771
        }                                                                                                              // 13772
                                                                                                                       // 13773
        containerCtrl.input = element;                                                                                 // 13774
        if (!containerCtrl.label) {                                                                                    // 13775
          $mdAria.expect(element, 'aria-label', element.attr('placeholder'));                                          // 13776
        }                                                                                                              // 13777
                                                                                                                       // 13778
        scope.$watch(isErrorGetter, containerCtrl.setInvalid);                                                         // 13779
      }                                                                                                                // 13780
                                                                                                                       // 13781
      var selectContainer, selectScope, selectMenuCtrl;                                                                // 13782
                                                                                                                       // 13783
      findSelectContainer();                                                                                           // 13784
      $mdTheming(element);                                                                                             // 13785
                                                                                                                       // 13786
      if (attr.name && formCtrl) {                                                                                     // 13787
        var selectEl = element.parent()[0].querySelector('select[name=".' + attr.name + '"]');                         // 13788
        $mdUtil.nextTick(function() {                                                                                  // 13789
          var controller = angular.element(selectEl).controller('ngModel');                                            // 13790
          if (controller) {                                                                                            // 13791
            formCtrl.$removeControl(controller);                                                                       // 13792
          }                                                                                                            // 13793
        });                                                                                                            // 13794
      }                                                                                                                // 13795
                                                                                                                       // 13796
      if (formCtrl && angular.isDefined(attr.multiple)) {                                                              // 13797
        $mdUtil.nextTick(function() {                                                                                  // 13798
          var hasModelValue = ngModelCtrl.$modelValue || ngModelCtrl.$viewValue;                                       // 13799
          if (hasModelValue) {                                                                                         // 13800
            formCtrl.$setPristine();                                                                                   // 13801
          }                                                                                                            // 13802
        });                                                                                                            // 13803
      }                                                                                                                // 13804
                                                                                                                       // 13805
      var originalRender = ngModelCtrl.$render;                                                                        // 13806
      ngModelCtrl.$render = function() {                                                                               // 13807
        originalRender();                                                                                              // 13808
        syncLabelText();                                                                                               // 13809
        syncAriaLabel();                                                                                               // 13810
        inputCheckValue();                                                                                             // 13811
      };                                                                                                               // 13812
                                                                                                                       // 13813
                                                                                                                       // 13814
      attr.$observe('placeholder', ngModelCtrl.$render);                                                               // 13815
                                                                                                                       // 13816
                                                                                                                       // 13817
      mdSelectCtrl.setLabelText = function(text) {                                                                     // 13818
        mdSelectCtrl.setIsPlaceholder(!text);                                                                          // 13819
        // Use placeholder attribute, otherwise fallback to the md-input-container label                               // 13820
        var tmpPlaceholder = attr.placeholder || (containerCtrl && containerCtrl.label ? containerCtrl.label.text() : '');
        text = text || tmpPlaceholder || '';                                                                           // 13822
        var target = valueEl.children().eq(0);                                                                         // 13823
        target.html(text);                                                                                             // 13824
      };                                                                                                               // 13825
                                                                                                                       // 13826
      mdSelectCtrl.setIsPlaceholder = function(isPlaceholder) {                                                        // 13827
        if (isPlaceholder) {                                                                                           // 13828
          valueEl.addClass('md-select-placeholder');                                                                   // 13829
          if (containerCtrl && containerCtrl.label) {                                                                  // 13830
            containerCtrl.label.addClass('md-placeholder');                                                            // 13831
          }                                                                                                            // 13832
        } else {                                                                                                       // 13833
          valueEl.removeClass('md-select-placeholder');                                                                // 13834
          if (containerCtrl && containerCtrl.label) {                                                                  // 13835
            containerCtrl.label.removeClass('md-placeholder');                                                         // 13836
          }                                                                                                            // 13837
        }                                                                                                              // 13838
      };                                                                                                               // 13839
                                                                                                                       // 13840
      if (!isReadonly) {                                                                                               // 13841
        element                                                                                                        // 13842
          .on('focus', function(ev) {                                                                                  // 13843
            // only set focus on if we don't currently have a selected value. This avoids the "bounce"                 // 13844
            // on the label transition because the focus will immediately switch to the open menu.                     // 13845
            if (containerCtrl && containerCtrl.element.hasClass('md-input-has-value')) {                               // 13846
              containerCtrl.setFocused(true);                                                                          // 13847
            }                                                                                                          // 13848
          });                                                                                                          // 13849
                                                                                                                       // 13850
        // Wait until postDigest so that we attach after ngModel's                                                     // 13851
        // blur listener so we can set untouched.                                                                      // 13852
        $mdUtil.nextTick(function () {                                                                                 // 13853
          element.on('blur', function() {                                                                              // 13854
            if (untouched) {                                                                                           // 13855
              untouched = false;                                                                                       // 13856
              ngModelCtrl.$setUntouched();                                                                             // 13857
            }                                                                                                          // 13858
                                                                                                                       // 13859
            if (selectScope.isOpen) return;                                                                            // 13860
            containerCtrl && containerCtrl.setFocused(false);                                                          // 13861
            inputCheckValue();                                                                                         // 13862
          });                                                                                                          // 13863
        });                                                                                                            // 13864
      }                                                                                                                // 13865
                                                                                                                       // 13866
      mdSelectCtrl.triggerClose = function() {                                                                         // 13867
        $parse(attr.mdOnClose)(scope);                                                                                 // 13868
      };                                                                                                               // 13869
                                                                                                                       // 13870
      scope.$$postDigest(function() {                                                                                  // 13871
        initAriaLabel();                                                                                               // 13872
        syncLabelText();                                                                                               // 13873
        syncAriaLabel();                                                                                               // 13874
      });                                                                                                              // 13875
                                                                                                                       // 13876
      function initAriaLabel() {                                                                                       // 13877
        var labelText = element.attr('aria-label') || element.attr('placeholder');                                     // 13878
        if (!labelText && containerCtrl && containerCtrl.label) {                                                      // 13879
          labelText = containerCtrl.label.text();                                                                      // 13880
        }                                                                                                              // 13881
        ariaLabelBase = labelText;                                                                                     // 13882
        $mdAria.expect(element, 'aria-label', labelText);                                                              // 13883
      }                                                                                                                // 13884
                                                                                                                       // 13885
      scope.$watch(selectMenuCtrl.selectedLabels, syncLabelText);                                                      // 13886
                                                                                                                       // 13887
      function syncLabelText() {                                                                                       // 13888
        if (selectContainer) {                                                                                         // 13889
          selectMenuCtrl = selectMenuCtrl || selectContainer.find('md-select-menu').controller('mdSelectMenu');        // 13890
          mdSelectCtrl.setLabelText(selectMenuCtrl.selectedLabels());                                                  // 13891
        }                                                                                                              // 13892
      }                                                                                                                // 13893
                                                                                                                       // 13894
      function syncAriaLabel() {                                                                                       // 13895
        if (!ariaLabelBase) return;                                                                                    // 13896
        var ariaLabels = selectMenuCtrl.selectedLabels({mode: 'aria'});                                                // 13897
        element.attr('aria-label', ariaLabels.length ? ariaLabelBase + ': ' + ariaLabels : ariaLabelBase);             // 13898
      }                                                                                                                // 13899
                                                                                                                       // 13900
      var deregisterWatcher;                                                                                           // 13901
      attr.$observe('ngMultiple', function(val) {                                                                      // 13902
        if (deregisterWatcher) deregisterWatcher();                                                                    // 13903
        var parser = $parse(val);                                                                                      // 13904
        deregisterWatcher = scope.$watch(function() {                                                                  // 13905
          return parser(scope);                                                                                        // 13906
        }, function(multiple, prevVal) {                                                                               // 13907
          if (multiple === undefined && prevVal === undefined) return; // assume compiler did a good job               // 13908
          if (multiple) {                                                                                              // 13909
            element.attr('multiple', 'multiple');                                                                      // 13910
          } else {                                                                                                     // 13911
            element.removeAttr('multiple');                                                                            // 13912
          }                                                                                                            // 13913
          element.attr('aria-multiselectable', multiple ? 'true' : 'false');                                           // 13914
          if (selectContainer) {                                                                                       // 13915
            selectMenuCtrl.setMultiple(multiple);                                                                      // 13916
            originalRender = ngModelCtrl.$render;                                                                      // 13917
            ngModelCtrl.$render = function() {                                                                         // 13918
              originalRender();                                                                                        // 13919
              syncLabelText();                                                                                         // 13920
              syncAriaLabel();                                                                                         // 13921
              inputCheckValue();                                                                                       // 13922
            };                                                                                                         // 13923
            ngModelCtrl.$render();                                                                                     // 13924
          }                                                                                                            // 13925
        });                                                                                                            // 13926
      });                                                                                                              // 13927
                                                                                                                       // 13928
      attr.$observe('disabled', function(disabled) {                                                                   // 13929
        if (angular.isString(disabled)) {                                                                              // 13930
          disabled = true;                                                                                             // 13931
        }                                                                                                              // 13932
        // Prevent click event being registered twice                                                                  // 13933
        if (isDisabled !== undefined && isDisabled === disabled) {                                                     // 13934
          return;                                                                                                      // 13935
        }                                                                                                              // 13936
        isDisabled = disabled;                                                                                         // 13937
        if (disabled) {                                                                                                // 13938
          element.attr({'tabindex': -1, 'aria-disabled': 'true'});                                                     // 13939
          element.off('click', openSelect);                                                                            // 13940
          element.off('keydown', handleKeypress);                                                                      // 13941
        } else {                                                                                                       // 13942
          element.attr({'tabindex': attr.tabindex, 'aria-disabled': 'false'});                                         // 13943
          element.on('click', openSelect);                                                                             // 13944
          element.on('keydown', handleKeypress);                                                                       // 13945
        }                                                                                                              // 13946
      });                                                                                                              // 13947
                                                                                                                       // 13948
      if (!attr.disabled && !attr.ngDisabled) {                                                                        // 13949
        element.attr({'tabindex': attr.tabindex, 'aria-disabled': 'false'});                                           // 13950
        element.on('click', openSelect);                                                                               // 13951
        element.on('keydown', handleKeypress);                                                                         // 13952
      }                                                                                                                // 13953
                                                                                                                       // 13954
                                                                                                                       // 13955
      var ariaAttrs = {                                                                                                // 13956
        role: 'listbox',                                                                                               // 13957
        'aria-expanded': 'false',                                                                                      // 13958
        'aria-multiselectable': attr.multiple !== undefined && !attr.ngMultiple ? 'true' : 'false'                     // 13959
      };                                                                                                               // 13960
                                                                                                                       // 13961
      if (!element[0].hasAttribute('id')) {                                                                            // 13962
        ariaAttrs.id = 'select_' + $mdUtil.nextUid();                                                                  // 13963
      }                                                                                                                // 13964
                                                                                                                       // 13965
      var containerId = 'select_container_' + $mdUtil.nextUid();                                                       // 13966
      selectContainer.attr('id', containerId);                                                                         // 13967
      ariaAttrs['aria-owns'] = containerId;                                                                            // 13968
      element.attr(ariaAttrs);                                                                                         // 13969
                                                                                                                       // 13970
      scope.$on('$destroy', function() {                                                                               // 13971
        $mdSelect                                                                                                      // 13972
          .destroy()                                                                                                   // 13973
          .finally(function() {                                                                                        // 13974
            if (containerCtrl) {                                                                                       // 13975
              containerCtrl.setFocused(false);                                                                         // 13976
              containerCtrl.setHasValue(false);                                                                        // 13977
              containerCtrl.input = null;                                                                              // 13978
            }                                                                                                          // 13979
            ngModelCtrl.$setTouched();                                                                                 // 13980
          });                                                                                                          // 13981
      });                                                                                                              // 13982
                                                                                                                       // 13983
                                                                                                                       // 13984
                                                                                                                       // 13985
      function inputCheckValue() {                                                                                     // 13986
        // The select counts as having a value if one or more options are selected,                                    // 13987
        // or if the input's validity state says it has bad input (eg string in a number input)                        // 13988
        containerCtrl && containerCtrl.setHasValue(selectMenuCtrl.selectedLabels().length > 0 || (element[0].validity || {}).badInput);
      }                                                                                                                // 13990
                                                                                                                       // 13991
      function findSelectContainer() {                                                                                 // 13992
        selectContainer = angular.element(                                                                             // 13993
          element[0].querySelector('.md-select-menu-container')                                                        // 13994
        );                                                                                                             // 13995
        selectScope = scope;                                                                                           // 13996
        if (attr.mdContainerClass) {                                                                                   // 13997
          var value = selectContainer[0].getAttribute('class') + ' ' + attr.mdContainerClass;                          // 13998
          selectContainer[0].setAttribute('class', value);                                                             // 13999
        }                                                                                                              // 14000
        selectMenuCtrl = selectContainer.find('md-select-menu').controller('mdSelectMenu');                            // 14001
        selectMenuCtrl.init(ngModelCtrl, attr.ngModel);                                                                // 14002
        element.on('$destroy', function() {                                                                            // 14003
          selectContainer.remove();                                                                                    // 14004
        });                                                                                                            // 14005
      }                                                                                                                // 14006
                                                                                                                       // 14007
      function handleKeypress(e) {                                                                                     // 14008
        var allowedCodes = [32, 13, 38, 40];                                                                           // 14009
        if (allowedCodes.indexOf(e.keyCode) != -1) {                                                                   // 14010
          // prevent page scrolling on interaction                                                                     // 14011
          e.preventDefault();                                                                                          // 14012
          openSelect(e);                                                                                               // 14013
        } else {                                                                                                       // 14014
          if (e.keyCode <= 90 && e.keyCode >= 31) {                                                                    // 14015
            e.preventDefault();                                                                                        // 14016
            var node = selectMenuCtrl.optNodeForKeyboardSearch(e);                                                     // 14017
            if (!node) return;                                                                                         // 14018
            var optionCtrl = angular.element(node).controller('mdOption');                                             // 14019
            if (!selectMenuCtrl.isMultiple) {                                                                          // 14020
              selectMenuCtrl.deselect(Object.keys(selectMenuCtrl.selected)[0]);                                        // 14021
            }                                                                                                          // 14022
            selectMenuCtrl.select(optionCtrl.hashKey, optionCtrl.value);                                               // 14023
            selectMenuCtrl.refreshViewValue();                                                                         // 14024
          }                                                                                                            // 14025
        }                                                                                                              // 14026
      }                                                                                                                // 14027
                                                                                                                       // 14028
      function openSelect() {                                                                                          // 14029
        selectScope.isOpen = true;                                                                                     // 14030
        element.attr('aria-expanded', 'true');                                                                         // 14031
                                                                                                                       // 14032
        $mdSelect.show({                                                                                               // 14033
          scope: selectScope,                                                                                          // 14034
          preserveScope: true,                                                                                         // 14035
          skipCompile: true,                                                                                           // 14036
          element: selectContainer,                                                                                    // 14037
          target: element[0],                                                                                          // 14038
          selectCtrl: mdSelectCtrl,                                                                                    // 14039
          preserveElement: true,                                                                                       // 14040
          hasBackdrop: true,                                                                                           // 14041
          loadingAsync: attr.mdOnOpen ? scope.$eval(attr.mdOnOpen) || true : false                                     // 14042
        }).finally(function() {                                                                                        // 14043
          selectScope.isOpen = false;                                                                                  // 14044
          element.focus();                                                                                             // 14045
          element.attr('aria-expanded', 'false');                                                                      // 14046
          ngModelCtrl.$setTouched();                                                                                   // 14047
        });                                                                                                            // 14048
      }                                                                                                                // 14049
    };                                                                                                                 // 14050
  }                                                                                                                    // 14051
}                                                                                                                      // 14052
SelectDirective.$inject = ["$mdSelect", "$mdUtil", "$mdTheming", "$mdAria", "$compile", "$parse"];                     // 14053
                                                                                                                       // 14054
function SelectMenuDirective($parse, $mdUtil, $mdTheming) {                                                            // 14055
                                                                                                                       // 14056
  SelectMenuController.$inject = ["$scope", "$attrs", "$element"];                                                     // 14057
  return {                                                                                                             // 14058
    restrict: 'E',                                                                                                     // 14059
    require: ['mdSelectMenu'],                                                                                         // 14060
    scope: true,                                                                                                       // 14061
    controller: SelectMenuController,                                                                                  // 14062
    link: {pre: preLink}                                                                                               // 14063
  };                                                                                                                   // 14064
                                                                                                                       // 14065
  // We use preLink instead of postLink to ensure that the select is initialized before                                // 14066
  // its child options run postLink.                                                                                   // 14067
  function preLink(scope, element, attr, ctrls) {                                                                      // 14068
    var selectCtrl = ctrls[0];                                                                                         // 14069
                                                                                                                       // 14070
    $mdTheming(element);                                                                                               // 14071
    element.on('click', clickListener);                                                                                // 14072
    element.on('keypress', keyListener);                                                                               // 14073
                                                                                                                       // 14074
    function keyListener(e) {                                                                                          // 14075
      if (e.keyCode == 13 || e.keyCode == 32) {                                                                        // 14076
        clickListener(e);                                                                                              // 14077
      }                                                                                                                // 14078
    }                                                                                                                  // 14079
                                                                                                                       // 14080
    function clickListener(ev) {                                                                                       // 14081
      var option = $mdUtil.getClosest(ev.target, 'md-option');                                                         // 14082
      var optionCtrl = option && angular.element(option).data('$mdOptionController');                                  // 14083
      if (!option || !optionCtrl) return;                                                                              // 14084
      if (option.hasAttribute('disabled')) {                                                                           // 14085
        ev.stopImmediatePropagation();                                                                                 // 14086
        return false;                                                                                                  // 14087
      }                                                                                                                // 14088
                                                                                                                       // 14089
      var optionHashKey = selectCtrl.hashGetter(optionCtrl.value);                                                     // 14090
      var isSelected = angular.isDefined(selectCtrl.selected[optionHashKey]);                                          // 14091
                                                                                                                       // 14092
      scope.$apply(function() {                                                                                        // 14093
        if (selectCtrl.isMultiple) {                                                                                   // 14094
          if (isSelected) {                                                                                            // 14095
            selectCtrl.deselect(optionHashKey);                                                                        // 14096
          } else {                                                                                                     // 14097
            selectCtrl.select(optionHashKey, optionCtrl.value);                                                        // 14098
          }                                                                                                            // 14099
        } else {                                                                                                       // 14100
          if (!isSelected) {                                                                                           // 14101
            selectCtrl.deselect(Object.keys(selectCtrl.selected)[0]);                                                  // 14102
            selectCtrl.select(optionHashKey, optionCtrl.value);                                                        // 14103
          }                                                                                                            // 14104
        }                                                                                                              // 14105
        selectCtrl.refreshViewValue();                                                                                 // 14106
      });                                                                                                              // 14107
    }                                                                                                                  // 14108
  }                                                                                                                    // 14109
                                                                                                                       // 14110
  function SelectMenuController($scope, $attrs, $element) {                                                            // 14111
    var self = this;                                                                                                   // 14112
    self.isMultiple = angular.isDefined($attrs.multiple);                                                              // 14113
    // selected is an object with keys matching all of the selected options' hashed values                             // 14114
    self.selected = {};                                                                                                // 14115
    // options is an object with keys matching every option's hash value,                                              // 14116
    // and values matching every option's controller.                                                                  // 14117
    self.options = {};                                                                                                 // 14118
                                                                                                                       // 14119
    $scope.$watchCollection(function() {                                                                               // 14120
      return self.options;                                                                                             // 14121
    }, function() {                                                                                                    // 14122
      self.ngModel.$render();                                                                                          // 14123
    });                                                                                                                // 14124
                                                                                                                       // 14125
    var deregisterCollectionWatch;                                                                                     // 14126
    var defaultIsEmpty;                                                                                                // 14127
    self.setMultiple = function(isMultiple) {                                                                          // 14128
      var ngModel = self.ngModel;                                                                                      // 14129
      defaultIsEmpty = defaultIsEmpty || ngModel.$isEmpty;                                                             // 14130
                                                                                                                       // 14131
      self.isMultiple = isMultiple;                                                                                    // 14132
      if (deregisterCollectionWatch) deregisterCollectionWatch();                                                      // 14133
                                                                                                                       // 14134
      if (self.isMultiple) {                                                                                           // 14135
        ngModel.$validators['md-multiple'] = validateArray;                                                            // 14136
        ngModel.$render = renderMultiple;                                                                              // 14137
                                                                                                                       // 14138
        // watchCollection on the model because by default ngModel only watches the model's                            // 14139
        // reference. This allowed the developer to also push and pop from their array.                                // 14140
        $scope.$watchCollection(self.modelBinding, function(value) {                                                   // 14141
          if (validateArray(value)) renderMultiple(value);                                                             // 14142
          self.ngModel.$setPristine();                                                                                 // 14143
        });                                                                                                            // 14144
                                                                                                                       // 14145
        ngModel.$isEmpty = function(value) {                                                                           // 14146
          return !value || value.length === 0;                                                                         // 14147
        };                                                                                                             // 14148
      } else {                                                                                                         // 14149
        delete ngModel.$validators['md-multiple'];                                                                     // 14150
        ngModel.$render = renderSingular;                                                                              // 14151
      }                                                                                                                // 14152
                                                                                                                       // 14153
      function validateArray(modelValue, viewValue) {                                                                  // 14154
        // If a value is truthy but not an array, reject it.                                                           // 14155
        // If value is undefined/falsy, accept that it's an empty array.                                               // 14156
        return angular.isArray(modelValue || viewValue || []);                                                         // 14157
      }                                                                                                                // 14158
    };                                                                                                                 // 14159
                                                                                                                       // 14160
    var searchStr = '';                                                                                                // 14161
    var clearSearchTimeout, optNodes, optText;                                                                         // 14162
    var CLEAR_SEARCH_AFTER = 300;                                                                                      // 14163
    self.optNodeForKeyboardSearch = function(e) {                                                                      // 14164
      clearSearchTimeout && clearTimeout(clearSearchTimeout);                                                          // 14165
      clearSearchTimeout = setTimeout(function() {                                                                     // 14166
        clearSearchTimeout = undefined;                                                                                // 14167
        searchStr = '';                                                                                                // 14168
        optText = undefined;                                                                                           // 14169
        optNodes = undefined;                                                                                          // 14170
      }, CLEAR_SEARCH_AFTER);                                                                                          // 14171
      searchStr += String.fromCharCode(e.keyCode);                                                                     // 14172
      var search = new RegExp('^' + searchStr, 'i');                                                                   // 14173
      if (!optNodes) {                                                                                                 // 14174
        optNodes = $element.find('md-option');                                                                         // 14175
        optText = new Array(optNodes.length);                                                                          // 14176
        angular.forEach(optNodes, function(el, i) {                                                                    // 14177
          optText[i] = el.textContent.trim();                                                                          // 14178
        });                                                                                                            // 14179
      }                                                                                                                // 14180
      for (var i = 0; i < optText.length; ++i) {                                                                       // 14181
        if (search.test(optText[i])) {                                                                                 // 14182
          return optNodes[i];                                                                                          // 14183
        }                                                                                                              // 14184
      }                                                                                                                // 14185
    };                                                                                                                 // 14186
                                                                                                                       // 14187
    self.init = function(ngModel, binding) {                                                                           // 14188
      self.ngModel = ngModel;                                                                                          // 14189
      self.modelBinding = binding;                                                                                     // 14190
                                                                                                                       // 14191
      // Allow users to provide `ng-model="foo" ng-model-options="{trackBy: 'foo.id'}"` so                             // 14192
      // that we can properly compare objects set on the model to the available options                                // 14193
      if (ngModel.$options && ngModel.$options.trackBy) {                                                              // 14194
        var trackByLocals = {};                                                                                        // 14195
        var trackByParsed = $parse(ngModel.$options.trackBy);                                                          // 14196
        self.hashGetter = function(value, valueScope) {                                                                // 14197
          trackByLocals.$value = value;                                                                                // 14198
          return trackByParsed(valueScope || $scope, trackByLocals);                                                   // 14199
        };                                                                                                             // 14200
        // If the user doesn't provide a trackBy, we automatically generate an id for every                            // 14201
        // value passed in                                                                                             // 14202
      } else {                                                                                                         // 14203
        self.hashGetter = function getHashValue(value) {                                                               // 14204
          if (angular.isObject(value)) {                                                                               // 14205
            return 'object_' + (value.$$mdSelectId || (value.$$mdSelectId = ++selectNextId));                          // 14206
          }                                                                                                            // 14207
          return value;                                                                                                // 14208
        };                                                                                                             // 14209
      }                                                                                                                // 14210
      self.setMultiple(self.isMultiple);                                                                               // 14211
    };                                                                                                                 // 14212
                                                                                                                       // 14213
    self.selectedLabels = function(opts) {                                                                             // 14214
      opts = opts || {};                                                                                               // 14215
      var mode = opts.mode || 'html';                                                                                  // 14216
      var selectedOptionEls = $mdUtil.nodesToArray($element[0].querySelectorAll('md-option[selected]'));               // 14217
      if (selectedOptionEls.length) {                                                                                  // 14218
        var mapFn;                                                                                                     // 14219
                                                                                                                       // 14220
        if (mode == 'html') {                                                                                          // 14221
          // Map the given element to its innerHTML string. If the element has a child ripple                          // 14222
          // container remove it from the HTML string, before returning the string.                                    // 14223
          mapFn = function(el) {                                                                                       // 14224
            var html = el.innerHTML;                                                                                   // 14225
            // Remove the ripple container from the selected option, copying it would cause a CSP violation.           // 14226
            var rippleContainer = el.querySelector('.md-ripple-container');                                            // 14227
            return rippleContainer ? html.replace(rippleContainer.outerHTML, '') : html;                               // 14228
          };                                                                                                           // 14229
        } else if (mode == 'aria') {                                                                                   // 14230
          mapFn = function(el) { return el.hasAttribute('aria-label') ? el.getAttribute('aria-label') : el.textContent; };
        }                                                                                                              // 14232
        return selectedOptionEls.map(mapFn).join(', ');                                                                // 14233
      } else {                                                                                                         // 14234
        return '';                                                                                                     // 14235
      }                                                                                                                // 14236
    };                                                                                                                 // 14237
                                                                                                                       // 14238
    self.select = function(hashKey, hashedValue) {                                                                     // 14239
      var option = self.options[hashKey];                                                                              // 14240
      option && option.setSelected(true);                                                                              // 14241
      self.selected[hashKey] = hashedValue;                                                                            // 14242
    };                                                                                                                 // 14243
    self.deselect = function(hashKey) {                                                                                // 14244
      var option = self.options[hashKey];                                                                              // 14245
      option && option.setSelected(false);                                                                             // 14246
      delete self.selected[hashKey];                                                                                   // 14247
    };                                                                                                                 // 14248
                                                                                                                       // 14249
    self.addOption = function(hashKey, optionCtrl) {                                                                   // 14250
      if (angular.isDefined(self.options[hashKey])) {                                                                  // 14251
        throw new Error('Duplicate md-option values are not allowed in a select. ' +                                   // 14252
          'Duplicate value "' + optionCtrl.value + '" found.');                                                        // 14253
      }                                                                                                                // 14254
      self.options[hashKey] = optionCtrl;                                                                              // 14255
                                                                                                                       // 14256
      // If this option's value was already in our ngModel, go ahead and select it.                                    // 14257
      if (angular.isDefined(self.selected[hashKey])) {                                                                 // 14258
        self.select(hashKey, optionCtrl.value);                                                                        // 14259
        self.refreshViewValue();                                                                                       // 14260
      }                                                                                                                // 14261
    };                                                                                                                 // 14262
    self.removeOption = function(hashKey) {                                                                            // 14263
      delete self.options[hashKey];                                                                                    // 14264
      // Don't deselect an option when it's removed - the user's ngModel should be allowed                             // 14265
      // to have values that do not match a currently available option.                                                // 14266
    };                                                                                                                 // 14267
                                                                                                                       // 14268
    self.refreshViewValue = function() {                                                                               // 14269
      var values = [];                                                                                                 // 14270
      var option;                                                                                                      // 14271
      for (var hashKey in self.selected) {                                                                             // 14272
        // If this hashKey has an associated option, push that option's value to the model.                            // 14273
        if ((option = self.options[hashKey])) {                                                                        // 14274
          values.push(option.value);                                                                                   // 14275
        } else {                                                                                                       // 14276
          // Otherwise, the given hashKey has no associated option, and we got it                                      // 14277
          // from an ngModel value at an earlier time. Push the unhashed value of                                      // 14278
          // this hashKey to the model.                                                                                // 14279
          // This allows the developer to put a value in the model that doesn't yet have                               // 14280
          // an associated option.                                                                                     // 14281
          values.push(self.selected[hashKey]);                                                                         // 14282
        }                                                                                                              // 14283
      }                                                                                                                // 14284
      var usingTrackBy = self.ngModel.$options && self.ngModel.$options.trackBy;                                       // 14285
                                                                                                                       // 14286
      var newVal = self.isMultiple ? values : values[0];                                                               // 14287
      var prevVal = self.ngModel.$modelValue;                                                                          // 14288
                                                                                                                       // 14289
      if (usingTrackBy ? !angular.equals(prevVal, newVal) : prevVal != newVal) {                                       // 14290
        self.ngModel.$setViewValue(newVal);                                                                            // 14291
        self.ngModel.$render();                                                                                        // 14292
      }                                                                                                                // 14293
    };                                                                                                                 // 14294
                                                                                                                       // 14295
    function renderMultiple() {                                                                                        // 14296
      var newSelectedValues = self.ngModel.$modelValue || self.ngModel.$viewValue || [];                               // 14297
      if (!angular.isArray(newSelectedValues)) return;                                                                 // 14298
                                                                                                                       // 14299
      var oldSelected = Object.keys(self.selected);                                                                    // 14300
                                                                                                                       // 14301
      var newSelectedHashes = newSelectedValues.map(self.hashGetter);                                                  // 14302
      var deselected = oldSelected.filter(function(hash) {                                                             // 14303
        return newSelectedHashes.indexOf(hash) === -1;                                                                 // 14304
      });                                                                                                              // 14305
                                                                                                                       // 14306
      deselected.forEach(self.deselect);                                                                               // 14307
      newSelectedHashes.forEach(function(hashKey, i) {                                                                 // 14308
        self.select(hashKey, newSelectedValues[i]);                                                                    // 14309
      });                                                                                                              // 14310
    }                                                                                                                  // 14311
                                                                                                                       // 14312
    function renderSingular() {                                                                                        // 14313
      var value = self.ngModel.$viewValue || self.ngModel.$modelValue;                                                 // 14314
      Object.keys(self.selected).forEach(self.deselect);                                                               // 14315
      self.select(self.hashGetter(value), value);                                                                      // 14316
    }                                                                                                                  // 14317
  }                                                                                                                    // 14318
                                                                                                                       // 14319
}                                                                                                                      // 14320
SelectMenuDirective.$inject = ["$parse", "$mdUtil", "$mdTheming"];                                                     // 14321
                                                                                                                       // 14322
function OptionDirective($mdButtonInkRipple, $mdUtil) {                                                                // 14323
                                                                                                                       // 14324
  OptionController.$inject = ["$element"];                                                                             // 14325
  return {                                                                                                             // 14326
    restrict: 'E',                                                                                                     // 14327
    require: ['mdOption', '^^mdSelectMenu'],                                                                           // 14328
    controller: OptionController,                                                                                      // 14329
    compile: compile                                                                                                   // 14330
  };                                                                                                                   // 14331
                                                                                                                       // 14332
  function compile(element, attr) {                                                                                    // 14333
    // Manual transclusion to avoid the extra inner <span> that ng-transclude generates                                // 14334
    element.append(angular.element('<div class="md-text">').append(element.contents()));                               // 14335
                                                                                                                       // 14336
    element.attr('tabindex', attr.tabindex || '0');                                                                    // 14337
    return postLink;                                                                                                   // 14338
  }                                                                                                                    // 14339
                                                                                                                       // 14340
  function postLink(scope, element, attr, ctrls) {                                                                     // 14341
    var optionCtrl = ctrls[0];                                                                                         // 14342
    var selectCtrl = ctrls[1];                                                                                         // 14343
                                                                                                                       // 14344
    if (angular.isDefined(attr.ngValue)) {                                                                             // 14345
      scope.$watch(attr.ngValue, setOptionValue);                                                                      // 14346
    } else if (angular.isDefined(attr.value)) {                                                                        // 14347
      setOptionValue(attr.value);                                                                                      // 14348
    } else {                                                                                                           // 14349
      scope.$watch(function() {                                                                                        // 14350
        return element.text().trim();                                                                                  // 14351
      }, setOptionValue);                                                                                              // 14352
    }                                                                                                                  // 14353
                                                                                                                       // 14354
    attr.$observe('disabled', function(disabled) {                                                                     // 14355
      if (disabled) {                                                                                                  // 14356
        element.attr('tabindex', '-1');                                                                                // 14357
      } else {                                                                                                         // 14358
        element.attr('tabindex', '0');                                                                                 // 14359
      }                                                                                                                // 14360
    });                                                                                                                // 14361
                                                                                                                       // 14362
    scope.$$postDigest(function() {                                                                                    // 14363
      attr.$observe('selected', function(selected) {                                                                   // 14364
        if (!angular.isDefined(selected)) return;                                                                      // 14365
        if (typeof selected == 'string') selected = true;                                                              // 14366
        if (selected) {                                                                                                // 14367
          if (!selectCtrl.isMultiple) {                                                                                // 14368
            selectCtrl.deselect(Object.keys(selectCtrl.selected)[0]);                                                  // 14369
          }                                                                                                            // 14370
          selectCtrl.select(optionCtrl.hashKey, optionCtrl.value);                                                     // 14371
        } else {                                                                                                       // 14372
          selectCtrl.deselect(optionCtrl.hashKey);                                                                     // 14373
        }                                                                                                              // 14374
        selectCtrl.refreshViewValue();                                                                                 // 14375
      });                                                                                                              // 14376
    });                                                                                                                // 14377
                                                                                                                       // 14378
    $mdButtonInkRipple.attach(scope, element);                                                                         // 14379
    configureAria();                                                                                                   // 14380
                                                                                                                       // 14381
    function setOptionValue(newValue, oldValue, prevAttempt) {                                                         // 14382
      if (!selectCtrl.hashGetter) {                                                                                    // 14383
        if (!prevAttempt) {                                                                                            // 14384
          scope.$$postDigest(function() {                                                                              // 14385
            setOptionValue(newValue, oldValue, true);                                                                  // 14386
          });                                                                                                          // 14387
        }                                                                                                              // 14388
        return;                                                                                                        // 14389
      }                                                                                                                // 14390
      var oldHashKey = selectCtrl.hashGetter(oldValue, scope);                                                         // 14391
      var newHashKey = selectCtrl.hashGetter(newValue, scope);                                                         // 14392
                                                                                                                       // 14393
      optionCtrl.hashKey = newHashKey;                                                                                 // 14394
      optionCtrl.value = newValue;                                                                                     // 14395
                                                                                                                       // 14396
      selectCtrl.removeOption(oldHashKey, optionCtrl);                                                                 // 14397
      selectCtrl.addOption(newHashKey, optionCtrl);                                                                    // 14398
    }                                                                                                                  // 14399
                                                                                                                       // 14400
    scope.$on('$destroy', function() {                                                                                 // 14401
      selectCtrl.removeOption(optionCtrl.hashKey, optionCtrl);                                                         // 14402
    });                                                                                                                // 14403
                                                                                                                       // 14404
    function configureAria() {                                                                                         // 14405
      var ariaAttrs = {                                                                                                // 14406
        'role': 'option',                                                                                              // 14407
        'aria-selected': 'false'                                                                                       // 14408
      };                                                                                                               // 14409
                                                                                                                       // 14410
      if (!element[0].hasAttribute('id')) {                                                                            // 14411
        ariaAttrs.id = 'select_option_' + $mdUtil.nextUid();                                                           // 14412
      }                                                                                                                // 14413
      element.attr(ariaAttrs);                                                                                         // 14414
    }                                                                                                                  // 14415
  }                                                                                                                    // 14416
                                                                                                                       // 14417
  function OptionController($element) {                                                                                // 14418
    this.selected = false;                                                                                             // 14419
    this.setSelected = function(isSelected) {                                                                          // 14420
      if (isSelected && !this.selected) {                                                                              // 14421
        $element.attr({                                                                                                // 14422
          'selected': 'selected',                                                                                      // 14423
          'aria-selected': 'true'                                                                                      // 14424
        });                                                                                                            // 14425
      } else if (!isSelected && this.selected) {                                                                       // 14426
        $element.removeAttr('selected');                                                                               // 14427
        $element.attr('aria-selected', 'false');                                                                       // 14428
      }                                                                                                                // 14429
      this.selected = isSelected;                                                                                      // 14430
    };                                                                                                                 // 14431
  }                                                                                                                    // 14432
                                                                                                                       // 14433
}                                                                                                                      // 14434
OptionDirective.$inject = ["$mdButtonInkRipple", "$mdUtil"];                                                           // 14435
                                                                                                                       // 14436
function OptgroupDirective() {                                                                                         // 14437
  return {                                                                                                             // 14438
    restrict: 'E',                                                                                                     // 14439
    compile: compile                                                                                                   // 14440
  };                                                                                                                   // 14441
  function compile(el, attrs) {                                                                                        // 14442
    var labelElement = el.find('label');                                                                               // 14443
    if (!labelElement.length) {                                                                                        // 14444
      labelElement = angular.element('<label>');                                                                       // 14445
      el.prepend(labelElement);                                                                                        // 14446
    }                                                                                                                  // 14447
    labelElement.addClass('md-container-ignore');                                                                      // 14448
    if (attrs.label) labelElement.text(attrs.label);                                                                   // 14449
  }                                                                                                                    // 14450
}                                                                                                                      // 14451
                                                                                                                       // 14452
function SelectProvider($$interimElementProvider) {                                                                    // 14453
  selectDefaultOptions.$inject = ["$mdSelect", "$mdConstant", "$mdUtil", "$window", "$q", "$$rAF", "$animateCss", "$animate", "$document"];
  return $$interimElementProvider('$mdSelect')                                                                         // 14455
    .setDefaults({                                                                                                     // 14456
      methods: ['target'],                                                                                             // 14457
      options: selectDefaultOptions                                                                                    // 14458
    });                                                                                                                // 14459
                                                                                                                       // 14460
  /* @ngInject */                                                                                                      // 14461
  function selectDefaultOptions($mdSelect, $mdConstant, $mdUtil, $window, $q, $$rAF, $animateCss, $animate, $document) {
    var ERRROR_TARGET_EXPECTED = "$mdSelect.show() expected a target element in options.target but got '{0}'!";        // 14463
    var animator = $mdUtil.dom.animator;                                                                               // 14464
                                                                                                                       // 14465
    return {                                                                                                           // 14466
      parent: 'body',                                                                                                  // 14467
      themable: true,                                                                                                  // 14468
      onShow: onShow,                                                                                                  // 14469
      onRemove: onRemove,                                                                                              // 14470
      hasBackdrop: true,                                                                                               // 14471
      disableParentScroll: true                                                                                        // 14472
    };                                                                                                                 // 14473
                                                                                                                       // 14474
    /**                                                                                                                // 14475
     * Interim-element onRemove logic....                                                                              // 14476
     */                                                                                                                // 14477
    function onRemove(scope, element, opts) {                                                                          // 14478
      opts = opts || { };                                                                                              // 14479
      opts.cleanupInteraction();                                                                                       // 14480
      opts.cleanupResizing();                                                                                          // 14481
      opts.hideBackdrop();                                                                                             // 14482
                                                                                                                       // 14483
      // For navigation $destroy events, do a quick, non-animated removal,                                             // 14484
      // but for normal closes (from clicks, etc) animate the removal                                                  // 14485
                                                                                                                       // 14486
      return  (opts.$destroy === true) ? cleanElement() : animateRemoval().then( cleanElement );                       // 14487
                                                                                                                       // 14488
      /**                                                                                                              // 14489
       * For normal closes (eg clicks), animate the removal.                                                           // 14490
       * For forced closes (like $destroy events from navigation),                                                     // 14491
       * skip the animations                                                                                           // 14492
       */                                                                                                              // 14493
      function animateRemoval() {                                                                                      // 14494
        return $animateCss(element, {addClass: 'md-leave'}).start();                                                   // 14495
      }                                                                                                                // 14496
                                                                                                                       // 14497
      /**                                                                                                              // 14498
       * Restore the element to a closed state                                                                         // 14499
       */                                                                                                              // 14500
      function cleanElement() {                                                                                        // 14501
                                                                                                                       // 14502
        element.removeClass('md-active');                                                                              // 14503
        element.attr('aria-hidden', 'true');                                                                           // 14504
        element[0].style.display = 'none';                                                                             // 14505
                                                                                                                       // 14506
        announceClosed(opts);                                                                                          // 14507
                                                                                                                       // 14508
        if (!opts.$destroy && opts.restoreFocus) {                                                                     // 14509
          opts.target.focus();                                                                                         // 14510
        }                                                                                                              // 14511
      }                                                                                                                // 14512
                                                                                                                       // 14513
    }                                                                                                                  // 14514
                                                                                                                       // 14515
    /**                                                                                                                // 14516
     * Interim-element onShow logic....                                                                                // 14517
     */                                                                                                                // 14518
    function onShow(scope, element, opts) {                                                                            // 14519
                                                                                                                       // 14520
      watchAsyncLoad();                                                                                                // 14521
      sanitizeAndConfigure(scope, opts);                                                                               // 14522
                                                                                                                       // 14523
      opts.hideBackdrop = showBackdrop(scope, element, opts);                                                          // 14524
                                                                                                                       // 14525
      return showDropDown(scope, element, opts)                                                                        // 14526
        .then(function(response) {                                                                                     // 14527
          element.attr('aria-hidden', 'false');                                                                        // 14528
          opts.alreadyOpen = true;                                                                                     // 14529
          opts.cleanupInteraction = activateInteraction();                                                             // 14530
          opts.cleanupResizing = activateResizing();                                                                   // 14531
                                                                                                                       // 14532
          return response;                                                                                             // 14533
        }, opts.hideBackdrop);                                                                                         // 14534
                                                                                                                       // 14535
      // ************************************                                                                          // 14536
      // Closure Functions                                                                                             // 14537
      // ************************************                                                                          // 14538
                                                                                                                       // 14539
      /**                                                                                                              // 14540
       *  Attach the select DOM element(s) and animate to the correct positions                                        // 14541
       *  and scalings...                                                                                              // 14542
       */                                                                                                              // 14543
      function showDropDown(scope, element, opts) {                                                                    // 14544
        opts.parent.append(element);                                                                                   // 14545
                                                                                                                       // 14546
        return $q(function(resolve, reject) {                                                                          // 14547
                                                                                                                       // 14548
          try {                                                                                                        // 14549
                                                                                                                       // 14550
            $animateCss(element, {removeClass: 'md-leave', duration: 0})                                               // 14551
              .start()                                                                                                 // 14552
              .then(positionAndFocusMenu)                                                                              // 14553
              .then(resolve);                                                                                          // 14554
                                                                                                                       // 14555
          } catch (e) {                                                                                                // 14556
            reject(e);                                                                                                 // 14557
          }                                                                                                            // 14558
                                                                                                                       // 14559
        });                                                                                                            // 14560
      }                                                                                                                // 14561
                                                                                                                       // 14562
      /**                                                                                                              // 14563
       * Initialize container and dropDown menu positions/scale, then animate                                          // 14564
       * to show... and autoFocus.                                                                                     // 14565
       */                                                                                                              // 14566
      function positionAndFocusMenu() {                                                                                // 14567
        return $q(function(resolve) {                                                                                  // 14568
          if (opts.isRemoved) return $q.reject(false);                                                                 // 14569
                                                                                                                       // 14570
          var info = calculateMenuPositions(scope, element, opts);                                                     // 14571
                                                                                                                       // 14572
          info.container.element.css(animator.toCss(info.container.styles));                                           // 14573
          info.dropDown.element.css(animator.toCss(info.dropDown.styles));                                             // 14574
                                                                                                                       // 14575
          $$rAF(function() {                                                                                           // 14576
            element.addClass('md-active');                                                                             // 14577
            info.dropDown.element.css(animator.toCss({transform: ''}));                                                // 14578
                                                                                                                       // 14579
            autoFocus(opts.focusedNode);                                                                               // 14580
            resolve();                                                                                                 // 14581
          });                                                                                                          // 14582
                                                                                                                       // 14583
        });                                                                                                            // 14584
      }                                                                                                                // 14585
                                                                                                                       // 14586
      /**                                                                                                              // 14587
       * Show modal backdrop element...                                                                                // 14588
       */                                                                                                              // 14589
      function showBackdrop(scope, element, options) {                                                                 // 14590
                                                                                                                       // 14591
        // If we are not within a dialog...                                                                            // 14592
        if (options.disableParentScroll && !$mdUtil.getClosest(options.target, 'MD-DIALOG')) {                         // 14593
          // !! DO this before creating the backdrop; since disableScrollAround()                                      // 14594
          //    configures the scroll offset; which is used by mdBackDrop postLink()                                   // 14595
          options.restoreScroll = $mdUtil.disableScrollAround(options.element, options.parent);                        // 14596
        } else {                                                                                                       // 14597
          options.disableParentScroll = false;                                                                         // 14598
        }                                                                                                              // 14599
                                                                                                                       // 14600
        if (options.hasBackdrop) {                                                                                     // 14601
          // Override duration to immediately show invisible backdrop                                                  // 14602
          options.backdrop = $mdUtil.createBackdrop(scope, "md-select-backdrop md-click-catcher");                     // 14603
          $animate.enter(options.backdrop, $document[0].body, null, {duration: 0});                                    // 14604
        }                                                                                                              // 14605
                                                                                                                       // 14606
        /**                                                                                                            // 14607
         * Hide modal backdrop element...                                                                              // 14608
         */                                                                                                            // 14609
        return function hideBackdrop() {                                                                               // 14610
          if (options.backdrop) options.backdrop.remove();                                                             // 14611
          if (options.disableParentScroll) options.restoreScroll();                                                    // 14612
                                                                                                                       // 14613
          delete options.restoreScroll;                                                                                // 14614
        };                                                                                                             // 14615
      }                                                                                                                // 14616
                                                                                                                       // 14617
      /**                                                                                                              // 14618
       *                                                                                                               // 14619
       */                                                                                                              // 14620
      function autoFocus(focusedNode) {                                                                                // 14621
        if (focusedNode && !focusedNode.hasAttribute('disabled')) {                                                    // 14622
          focusedNode.focus();                                                                                         // 14623
        }                                                                                                              // 14624
      }                                                                                                                // 14625
                                                                                                                       // 14626
      /**                                                                                                              // 14627
       * Check for valid opts and set some sane defaults                                                               // 14628
       */                                                                                                              // 14629
      function sanitizeAndConfigure(scope, options) {                                                                  // 14630
        var selectEl = element.find('md-select-menu');                                                                 // 14631
                                                                                                                       // 14632
        if (!options.target) {                                                                                         // 14633
          throw new Error($mdUtil.supplant(ERRROR_TARGET_EXPECTED, [options.target]));                                 // 14634
        }                                                                                                              // 14635
                                                                                                                       // 14636
        angular.extend(options, {                                                                                      // 14637
          isRemoved: false,                                                                                            // 14638
          target: angular.element(options.target), //make sure it's not a naked dom node                               // 14639
          parent: angular.element(options.parent),                                                                     // 14640
          selectEl: selectEl,                                                                                          // 14641
          contentEl: element.find('md-content'),                                                                       // 14642
          optionNodes: selectEl[0].getElementsByTagName('md-option')                                                   // 14643
        });                                                                                                            // 14644
      }                                                                                                                // 14645
                                                                                                                       // 14646
      /**                                                                                                              // 14647
       * Configure various resize listeners for screen changes                                                         // 14648
       */                                                                                                              // 14649
      function activateResizing() {                                                                                    // 14650
        var debouncedOnResize = (function(scope, target, options) {                                                    // 14651
                                                                                                                       // 14652
          return function() {                                                                                          // 14653
            if (options.isRemoved) return;                                                                             // 14654
                                                                                                                       // 14655
            var updates = calculateMenuPositions(scope, target, options);                                              // 14656
            var container = updates.container;                                                                         // 14657
            var dropDown = updates.dropDown;                                                                           // 14658
                                                                                                                       // 14659
            container.element.css(animator.toCss(container.styles));                                                   // 14660
            dropDown.element.css(animator.toCss(dropDown.styles));                                                     // 14661
          };                                                                                                           // 14662
                                                                                                                       // 14663
        })(scope, element, opts);                                                                                      // 14664
                                                                                                                       // 14665
        var window = angular.element($window);                                                                         // 14666
        window.on('resize', debouncedOnResize);                                                                        // 14667
        window.on('orientationchange', debouncedOnResize);                                                             // 14668
                                                                                                                       // 14669
        // Publish deactivation closure...                                                                             // 14670
        return function deactivateResizing() {                                                                         // 14671
                                                                                                                       // 14672
          // Disable resizing handlers                                                                                 // 14673
          window.off('resize', debouncedOnResize);                                                                     // 14674
          window.off('orientationchange', debouncedOnResize);                                                          // 14675
        };                                                                                                             // 14676
      }                                                                                                                // 14677
                                                                                                                       // 14678
      /**                                                                                                              // 14679
       *  If asynchronously loading, watch and update internal                                                         // 14680
       *  '$$loadingAsyncDone' flag                                                                                    // 14681
       */                                                                                                              // 14682
      function watchAsyncLoad() {                                                                                      // 14683
        if (opts.loadingAsync && !opts.isRemoved) {                                                                    // 14684
          scope.$$loadingAsyncDone = false;                                                                            // 14685
          scope.progressMode = 'indeterminate';                                                                        // 14686
                                                                                                                       // 14687
          $q.when(opts.loadingAsync)                                                                                   // 14688
            .then(function() {                                                                                         // 14689
              scope.$$loadingAsyncDone = true;                                                                         // 14690
              scope.progressMode = '';                                                                                 // 14691
              delete opts.loadingAsync;                                                                                // 14692
            }).then(function() {                                                                                       // 14693
              $$rAF(positionAndFocusMenu);                                                                             // 14694
            });                                                                                                        // 14695
        }                                                                                                              // 14696
      }                                                                                                                // 14697
                                                                                                                       // 14698
      /**                                                                                                              // 14699
       *                                                                                                               // 14700
       */                                                                                                              // 14701
      function activateInteraction() {                                                                                 // 14702
        if (opts.isRemoved) return;                                                                                    // 14703
                                                                                                                       // 14704
        var dropDown = opts.selectEl;                                                                                  // 14705
        var selectCtrl = dropDown.controller('mdSelectMenu') || {};                                                    // 14706
                                                                                                                       // 14707
        element.addClass('md-clickable');                                                                              // 14708
                                                                                                                       // 14709
        // Close on backdrop click                                                                                     // 14710
        opts.backdrop && opts.backdrop.on('click', onBackdropClick);                                                   // 14711
                                                                                                                       // 14712
        // Escape to close                                                                                             // 14713
        // Cycling of options, and closing on enter                                                                    // 14714
        dropDown.on('keydown', onMenuKeyDown);                                                                         // 14715
        dropDown.on('click', checkCloseMenu);                                                                          // 14716
                                                                                                                       // 14717
        return function cleanupInteraction() {                                                                         // 14718
          opts.backdrop && opts.backdrop.off('click', onBackdropClick);                                                // 14719
          dropDown.off('keydown', onMenuKeyDown);                                                                      // 14720
          dropDown.off('click', checkCloseMenu);                                                                       // 14721
                                                                                                                       // 14722
          element.removeClass('md-clickable');                                                                         // 14723
          opts.isRemoved = true;                                                                                       // 14724
        };                                                                                                             // 14725
                                                                                                                       // 14726
        // ************************************                                                                        // 14727
        // Closure Functions                                                                                           // 14728
        // ************************************                                                                        // 14729
                                                                                                                       // 14730
        function onBackdropClick(e) {                                                                                  // 14731
          e.preventDefault();                                                                                          // 14732
          e.stopPropagation();                                                                                         // 14733
          opts.restoreFocus = false;                                                                                   // 14734
          $mdUtil.nextTick($mdSelect.hide, true);                                                                      // 14735
        }                                                                                                              // 14736
                                                                                                                       // 14737
        function onMenuKeyDown(ev) {                                                                                   // 14738
          var keyCodes = $mdConstant.KEY_CODE;                                                                         // 14739
          ev.preventDefault();                                                                                         // 14740
          ev.stopPropagation();                                                                                        // 14741
                                                                                                                       // 14742
          switch (ev.keyCode) {                                                                                        // 14743
            case keyCodes.UP_ARROW:                                                                                    // 14744
              return focusPrevOption();                                                                                // 14745
            case keyCodes.DOWN_ARROW:                                                                                  // 14746
              return focusNextOption();                                                                                // 14747
            case keyCodes.SPACE:                                                                                       // 14748
            case keyCodes.ENTER:                                                                                       // 14749
              var option = $mdUtil.getClosest(ev.target, 'md-option');                                                 // 14750
              if (option) {                                                                                            // 14751
                dropDown.triggerHandler({                                                                              // 14752
                  type: 'click',                                                                                       // 14753
                  target: option                                                                                       // 14754
                });                                                                                                    // 14755
                ev.preventDefault();                                                                                   // 14756
              }                                                                                                        // 14757
              checkCloseMenu(ev);                                                                                      // 14758
              break;                                                                                                   // 14759
            case keyCodes.TAB:                                                                                         // 14760
            case keyCodes.ESCAPE:                                                                                      // 14761
              ev.stopPropagation();                                                                                    // 14762
              ev.preventDefault();                                                                                     // 14763
              opts.restoreFocus = true;                                                                                // 14764
              $mdUtil.nextTick($mdSelect.hide, true);                                                                  // 14765
              break;                                                                                                   // 14766
            default:                                                                                                   // 14767
              if (ev.keyCode >= 31 && ev.keyCode <= 90) {                                                              // 14768
                var optNode = dropDown.controller('mdSelectMenu').optNodeForKeyboardSearch(ev);                        // 14769
                opts.focusedNode = optNode || opts.focusedNode;                                                        // 14770
                optNode && optNode.focus();                                                                            // 14771
              }                                                                                                        // 14772
          }                                                                                                            // 14773
        }                                                                                                              // 14774
                                                                                                                       // 14775
        function focusOption(direction) {                                                                              // 14776
          var optionsArray = $mdUtil.nodesToArray(opts.optionNodes);                                                   // 14777
          var index = optionsArray.indexOf(opts.focusedNode);                                                          // 14778
                                                                                                                       // 14779
          var newOption;                                                                                               // 14780
                                                                                                                       // 14781
          do {                                                                                                         // 14782
            if (index === -1) {                                                                                        // 14783
              // We lost the previously focused element, reset to first option                                         // 14784
              index = 0;                                                                                               // 14785
            } else if (direction === 'next' && index < optionsArray.length - 1) {                                      // 14786
              index++;                                                                                                 // 14787
            } else if (direction === 'prev' && index > 0) {                                                            // 14788
              index--;                                                                                                 // 14789
            }                                                                                                          // 14790
            newOption = optionsArray[index];                                                                           // 14791
            if (newOption.hasAttribute('disabled')) newOption = undefined;                                             // 14792
          } while (!newOption && index < optionsArray.length - 1 && index > 0)                                         // 14793
          newOption && newOption.focus();                                                                              // 14794
          opts.focusedNode = newOption;                                                                                // 14795
        }                                                                                                              // 14796
                                                                                                                       // 14797
        function focusNextOption() {                                                                                   // 14798
          focusOption('next');                                                                                         // 14799
        }                                                                                                              // 14800
                                                                                                                       // 14801
        function focusPrevOption() {                                                                                   // 14802
          focusOption('prev');                                                                                         // 14803
        }                                                                                                              // 14804
                                                                                                                       // 14805
        function checkCloseMenu(ev) {                                                                                  // 14806
          if (ev && ( ev.type == 'click') && (ev.currentTarget != dropDown[0])) return;                                // 14807
          if ( mouseOnScrollbar() ) return;                                                                            // 14808
                                                                                                                       // 14809
          var option = $mdUtil.getClosest(ev.target, 'md-option');                                                     // 14810
          if (option && option.hasAttribute && !option.hasAttribute('disabled')) {                                     // 14811
            ev.preventDefault();                                                                                       // 14812
            ev.stopPropagation();                                                                                      // 14813
            if (!selectCtrl.isMultiple) {                                                                              // 14814
              opts.restoreFocus = true;                                                                                // 14815
                                                                                                                       // 14816
              $mdUtil.nextTick(function () {                                                                           // 14817
                $mdSelect.hide(selectCtrl.ngModel.$viewValue);                                                         // 14818
              }, true);                                                                                                // 14819
            }                                                                                                          // 14820
          }                                                                                                            // 14821
          /**                                                                                                          // 14822
           * check if the mouseup event was on a scrollbar                                                             // 14823
           */                                                                                                          // 14824
          function mouseOnScrollbar() {                                                                                // 14825
            var clickOnScrollbar = false;                                                                              // 14826
            if (ev && (ev.currentTarget.children.length > 0)) {                                                        // 14827
              var child = ev.currentTarget.children[0];                                                                // 14828
              var hasScrollbar = child.scrollHeight > child.clientHeight;                                              // 14829
              if (hasScrollbar && child.children.length > 0) {                                                         // 14830
                var relPosX = ev.pageX - ev.currentTarget.getBoundingClientRect().left;                                // 14831
                if (relPosX > child.querySelector('md-option').offsetWidth)                                            // 14832
                  clickOnScrollbar = true;                                                                             // 14833
              }                                                                                                        // 14834
            }                                                                                                          // 14835
            return clickOnScrollbar;                                                                                   // 14836
          }                                                                                                            // 14837
        }                                                                                                              // 14838
      }                                                                                                                // 14839
                                                                                                                       // 14840
    }                                                                                                                  // 14841
                                                                                                                       // 14842
    /**                                                                                                                // 14843
     * To notify listeners that the Select menu has closed,                                                            // 14844
     * trigger the [optional] user-defined expression                                                                  // 14845
     */                                                                                                                // 14846
    function announceClosed(opts) {                                                                                    // 14847
      var mdSelect = opts.selectCtrl;                                                                                  // 14848
      if (mdSelect) {                                                                                                  // 14849
        var menuController = opts.selectEl.controller('mdSelectMenu');                                                 // 14850
        mdSelect.setLabelText(menuController.selectedLabels());                                                        // 14851
        mdSelect.triggerClose();                                                                                       // 14852
      }                                                                                                                // 14853
    }                                                                                                                  // 14854
                                                                                                                       // 14855
                                                                                                                       // 14856
    /**                                                                                                                // 14857
     * Calculate the                                                                                                   // 14858
     */                                                                                                                // 14859
    function calculateMenuPositions(scope, element, opts) {                                                            // 14860
      var                                                                                                              // 14861
        containerNode = element[0],                                                                                    // 14862
        targetNode = opts.target[0].children[0], // target the label                                                   // 14863
        parentNode = $document[0].body,                                                                                // 14864
        selectNode = opts.selectEl[0],                                                                                 // 14865
        contentNode = opts.contentEl[0],                                                                               // 14866
        parentRect = parentNode.getBoundingClientRect(),                                                               // 14867
        targetRect = targetNode.getBoundingClientRect(),                                                               // 14868
        shouldOpenAroundTarget = false,                                                                                // 14869
        bounds = {                                                                                                     // 14870
          left: parentRect.left + SELECT_EDGE_MARGIN,                                                                  // 14871
          top: SELECT_EDGE_MARGIN,                                                                                     // 14872
          bottom: parentRect.height - SELECT_EDGE_MARGIN,                                                              // 14873
          right: parentRect.width - SELECT_EDGE_MARGIN - ($mdUtil.floatingScrollbars() ? 16 : 0)                       // 14874
        },                                                                                                             // 14875
        spaceAvailable = {                                                                                             // 14876
          top: targetRect.top - bounds.top,                                                                            // 14877
          left: targetRect.left - bounds.left,                                                                         // 14878
          right: bounds.right - (targetRect.left + targetRect.width),                                                  // 14879
          bottom: bounds.bottom - (targetRect.top + targetRect.height)                                                 // 14880
        },                                                                                                             // 14881
        maxWidth = parentRect.width - SELECT_EDGE_MARGIN * 2,                                                          // 14882
        selectedNode = selectNode.querySelector('md-option[selected]'),                                                // 14883
        optionNodes = selectNode.getElementsByTagName('md-option'),                                                    // 14884
        optgroupNodes = selectNode.getElementsByTagName('md-optgroup'),                                                // 14885
        isScrollable = calculateScrollable(element, contentNode),                                                      // 14886
        centeredNode;                                                                                                  // 14887
                                                                                                                       // 14888
      var loading = isPromiseLike(opts.loadingAsync);                                                                  // 14889
      if (!loading) {                                                                                                  // 14890
        // If a selected node, center around that                                                                      // 14891
        if (selectedNode) {                                                                                            // 14892
          centeredNode = selectedNode;                                                                                 // 14893
          // If there are option groups, center around the first option group                                          // 14894
        } else if (optgroupNodes.length) {                                                                             // 14895
          centeredNode = optgroupNodes[0];                                                                             // 14896
          // Otherwise - if we are not loading async - center around the first optionNode                              // 14897
        } else if (optionNodes.length) {                                                                               // 14898
          centeredNode = optionNodes[0];                                                                               // 14899
          // In case there are no options, center on whatever's in there... (eg progress indicator)                    // 14900
        } else {                                                                                                       // 14901
          centeredNode = contentNode.firstElementChild || contentNode;                                                 // 14902
        }                                                                                                              // 14903
      } else {                                                                                                         // 14904
        // If loading, center on progress indicator                                                                    // 14905
        centeredNode = contentNode.firstElementChild || contentNode;                                                   // 14906
      }                                                                                                                // 14907
                                                                                                                       // 14908
      if (contentNode.offsetWidth > maxWidth) {                                                                        // 14909
        contentNode.style['max-width'] = maxWidth + 'px';                                                              // 14910
      } else {                                                                                                         // 14911
        contentNode.style.maxWidth = null;                                                                             // 14912
      }                                                                                                                // 14913
      if (shouldOpenAroundTarget) {                                                                                    // 14914
        contentNode.style['min-width'] = targetRect.width + 'px';                                                      // 14915
      }                                                                                                                // 14916
                                                                                                                       // 14917
      // Remove padding before we compute the position of the menu                                                     // 14918
      if (isScrollable) {                                                                                              // 14919
        selectNode.classList.add('md-overflow');                                                                       // 14920
      }                                                                                                                // 14921
                                                                                                                       // 14922
      var focusedNode = centeredNode;                                                                                  // 14923
      if ((focusedNode.tagName || '').toUpperCase() === 'MD-OPTGROUP') {                                               // 14924
        focusedNode = optionNodes[0] || contentNode.firstElementChild || contentNode;                                  // 14925
        centeredNode = focusedNode;                                                                                    // 14926
      }                                                                                                                // 14927
      // Cache for autoFocus()                                                                                         // 14928
      opts.focusedNode = focusedNode;                                                                                  // 14929
                                                                                                                       // 14930
      // Get the selectMenuRect *after* max-width is possibly set above                                                // 14931
      containerNode.style.display = 'block';                                                                           // 14932
      var selectMenuRect = selectNode.getBoundingClientRect();                                                         // 14933
      var centeredRect = getOffsetRect(centeredNode);                                                                  // 14934
                                                                                                                       // 14935
      if (centeredNode) {                                                                                              // 14936
        var centeredStyle = $window.getComputedStyle(centeredNode);                                                    // 14937
        centeredRect.paddingLeft = parseInt(centeredStyle.paddingLeft, 10) || 0;                                       // 14938
        centeredRect.paddingRight = parseInt(centeredStyle.paddingRight, 10) || 0;                                     // 14939
      }                                                                                                                // 14940
                                                                                                                       // 14941
      if (isScrollable) {                                                                                              // 14942
        var scrollBuffer = contentNode.offsetHeight / 2;                                                               // 14943
        contentNode.scrollTop = centeredRect.top + centeredRect.height / 2 - scrollBuffer;                             // 14944
                                                                                                                       // 14945
        if (spaceAvailable.top < scrollBuffer) {                                                                       // 14946
          contentNode.scrollTop = Math.min(                                                                            // 14947
            centeredRect.top,                                                                                          // 14948
            contentNode.scrollTop + scrollBuffer - spaceAvailable.top                                                  // 14949
          );                                                                                                           // 14950
        } else if (spaceAvailable.bottom < scrollBuffer) {                                                             // 14951
          contentNode.scrollTop = Math.max(                                                                            // 14952
            centeredRect.top + centeredRect.height - selectMenuRect.height,                                            // 14953
            contentNode.scrollTop - scrollBuffer + spaceAvailable.bottom                                               // 14954
          );                                                                                                           // 14955
        }                                                                                                              // 14956
      }                                                                                                                // 14957
                                                                                                                       // 14958
      var left, top, transformOrigin, minWidth;                                                                        // 14959
      if (shouldOpenAroundTarget) {                                                                                    // 14960
        left = targetRect.left;                                                                                        // 14961
        top = targetRect.top + targetRect.height;                                                                      // 14962
        transformOrigin = '50% 0';                                                                                     // 14963
        if (top + selectMenuRect.height > bounds.bottom) {                                                             // 14964
          top = targetRect.top - selectMenuRect.height;                                                                // 14965
          transformOrigin = '50% 100%';                                                                                // 14966
        }                                                                                                              // 14967
      } else {                                                                                                         // 14968
        left = (targetRect.left + centeredRect.left - centeredRect.paddingLeft) + 2;                                   // 14969
        top = Math.floor(targetRect.top + targetRect.height / 2 - centeredRect.height / 2 -                            // 14970
            centeredRect.top + contentNode.scrollTop) + 2;                                                             // 14971
                                                                                                                       // 14972
        transformOrigin = (centeredRect.left + targetRect.width / 2) + 'px ' +                                         // 14973
          (centeredRect.top + centeredRect.height / 2 - contentNode.scrollTop) + 'px 0px';                             // 14974
                                                                                                                       // 14975
        minWidth = Math.min(targetRect.width + centeredRect.paddingLeft + centeredRect.paddingRight, maxWidth);        // 14976
      }                                                                                                                // 14977
                                                                                                                       // 14978
      // Keep left and top within the window                                                                           // 14979
      var containerRect = containerNode.getBoundingClientRect();                                                       // 14980
      var scaleX = Math.round(100 * Math.min(targetRect.width / selectMenuRect.width, 1.0)) / 100;                     // 14981
      var scaleY = Math.round(100 * Math.min(targetRect.height / selectMenuRect.height, 1.0)) / 100;                   // 14982
                                                                                                                       // 14983
      return {                                                                                                         // 14984
        container: {                                                                                                   // 14985
          element: angular.element(containerNode),                                                                     // 14986
          styles: {                                                                                                    // 14987
            left: Math.floor(clamp(bounds.left, left, bounds.right - containerRect.width)),                            // 14988
            top: Math.floor(clamp(bounds.top, top, bounds.bottom - containerRect.height)),                             // 14989
            'min-width': minWidth                                                                                      // 14990
          }                                                                                                            // 14991
        },                                                                                                             // 14992
        dropDown: {                                                                                                    // 14993
          element: angular.element(selectNode),                                                                        // 14994
          styles: {                                                                                                    // 14995
            transformOrigin: transformOrigin,                                                                          // 14996
            transform: !opts.alreadyOpen ? $mdUtil.supplant('scale({0},{1})', [scaleX, scaleY]) : ""                   // 14997
          }                                                                                                            // 14998
        }                                                                                                              // 14999
      };                                                                                                               // 15000
                                                                                                                       // 15001
    }                                                                                                                  // 15002
                                                                                                                       // 15003
  }                                                                                                                    // 15004
                                                                                                                       // 15005
  function isPromiseLike(obj) {                                                                                        // 15006
    return obj && angular.isFunction(obj.then);                                                                        // 15007
  }                                                                                                                    // 15008
                                                                                                                       // 15009
  function clamp(min, n, max) {                                                                                        // 15010
    return Math.max(min, Math.min(n, max));                                                                            // 15011
  }                                                                                                                    // 15012
                                                                                                                       // 15013
  function getOffsetRect(node) {                                                                                       // 15014
    return node ? {                                                                                                    // 15015
      left: node.offsetLeft,                                                                                           // 15016
      top: node.offsetTop,                                                                                             // 15017
      width: node.offsetWidth,                                                                                         // 15018
      height: node.offsetHeight                                                                                        // 15019
    } : {left: 0, top: 0, width: 0, height: 0};                                                                        // 15020
  }                                                                                                                    // 15021
                                                                                                                       // 15022
  function calculateScrollable(element, contentNode) {                                                                 // 15023
    var isScrollable = false;                                                                                          // 15024
                                                                                                                       // 15025
    try {                                                                                                              // 15026
      var oldDisplay = element[0].style.display;                                                                       // 15027
                                                                                                                       // 15028
      // Set the element's display to block so that this calculation is correct                                        // 15029
      element[0].style.display = 'block';                                                                              // 15030
                                                                                                                       // 15031
      isScrollable = contentNode.scrollHeight > contentNode.offsetHeight;                                              // 15032
                                                                                                                       // 15033
      // Reset it back afterwards                                                                                      // 15034
      element[0].style.display = oldDisplay;                                                                           // 15035
    } finally {                                                                                                        // 15036
      // Nothing to do                                                                                                 // 15037
    }                                                                                                                  // 15038
    return isScrollable;                                                                                               // 15039
  }                                                                                                                    // 15040
}                                                                                                                      // 15041
SelectProvider.$inject = ["$$interimElementProvider"];                                                                 // 15042
                                                                                                                       // 15043
                                                                                                                       // 15044
})();                                                                                                                  // 15045
(function(){                                                                                                           // 15046
"use strict";                                                                                                          // 15047
                                                                                                                       // 15048
/**                                                                                                                    // 15049
 * @ngdoc module                                                                                                       // 15050
 * @name material.components.showHide                                                                                  // 15051
 */                                                                                                                    // 15052
                                                                                                                       // 15053
// Add additional handlers to ng-show and ng-hide that notify directives                                               // 15054
// contained within that they should recompute their size.                                                             // 15055
// These run in addition to Angular's built-in ng-hide and ng-show directives.                                         // 15056
angular.module('material.components.showHide', [                                                                       // 15057
  'material.core'                                                                                                      // 15058
])                                                                                                                     // 15059
  .directive('ngShow', createDirective('ngShow', true))                                                                // 15060
  .directive('ngHide', createDirective('ngHide', false));                                                              // 15061
                                                                                                                       // 15062
                                                                                                                       // 15063
function createDirective(name, targetValue) {                                                                          // 15064
  return ['$mdUtil', function($mdUtil) {                                                                               // 15065
    return {                                                                                                           // 15066
      restrict: 'A',                                                                                                   // 15067
      multiElement: true,                                                                                              // 15068
      link: function($scope, $element, $attr) {                                                                        // 15069
        var unregister = $scope.$on('$md-resize-enable', function() {                                                  // 15070
          unregister();                                                                                                // 15071
                                                                                                                       // 15072
          $scope.$watch($attr[name], function(value) {                                                                 // 15073
            if (!!value === targetValue) {                                                                             // 15074
              $mdUtil.nextTick(function() {                                                                            // 15075
                $scope.$broadcast('$md-resize');                                                                       // 15076
              });                                                                                                      // 15077
              $mdUtil.dom.animator.waitTransitionEnd($element).then(function() {                                       // 15078
                $scope.$broadcast('$md-resize');                                                                       // 15079
              });                                                                                                      // 15080
            }                                                                                                          // 15081
          });                                                                                                          // 15082
        });                                                                                                            // 15083
      }                                                                                                                // 15084
    };                                                                                                                 // 15085
  }];                                                                                                                  // 15086
}                                                                                                                      // 15087
})();                                                                                                                  // 15088
(function(){                                                                                                           // 15089
"use strict";                                                                                                          // 15090
                                                                                                                       // 15091
/**                                                                                                                    // 15092
 * @ngdoc module                                                                                                       // 15093
 * @name material.components.sidenav                                                                                   // 15094
 *                                                                                                                     // 15095
 * @description                                                                                                        // 15096
 * A Sidenav QP component.                                                                                             // 15097
 */                                                                                                                    // 15098
angular                                                                                                                // 15099
  .module('material.components.sidenav', [                                                                             // 15100
    'material.core',                                                                                                   // 15101
    'material.components.backdrop'                                                                                     // 15102
  ])                                                                                                                   // 15103
  .factory('$mdSidenav', SidenavService )                                                                              // 15104
  .directive('mdSidenav', SidenavDirective)                                                                            // 15105
  .directive('mdSidenavFocus', SidenavFocusDirective)                                                                  // 15106
  .controller('$mdSidenavController', SidenavController);                                                              // 15107
                                                                                                                       // 15108
                                                                                                                       // 15109
/**                                                                                                                    // 15110
 * @ngdoc service                                                                                                      // 15111
 * @name $mdSidenav                                                                                                    // 15112
 * @module material.components.sidenav                                                                                 // 15113
 *                                                                                                                     // 15114
 * @description                                                                                                        // 15115
 * `$mdSidenav` makes it easy to interact with multiple sidenavs                                                       // 15116
 * in an app.                                                                                                          // 15117
 *                                                                                                                     // 15118
 * @usage                                                                                                              // 15119
 * <hljs lang="js">                                                                                                    // 15120
 * // Async lookup for sidenav instance; will resolve when the instance is available                                   // 15121
 * $mdSidenav(componentId).then(function(instance) {                                                                   // 15122
 *   $log.debug( componentId + "is now ready" );                                                                       // 15123
 * });                                                                                                                 // 15124
 * // Async toggle the given sidenav;                                                                                  // 15125
 * // when instance is known ready and lazy lookup is not needed.                                                      // 15126
 * $mdSidenav(componentId)                                                                                             // 15127
 *    .toggle()                                                                                                        // 15128
 *    .then(function(){                                                                                                // 15129
 *      $log.debug('toggled');                                                                                         // 15130
 *    });                                                                                                              // 15131
 * // Async open the given sidenav                                                                                     // 15132
 * $mdSidenav(componentId)                                                                                             // 15133
 *    .open()                                                                                                          // 15134
 *    .then(function(){                                                                                                // 15135
 *      $log.debug('opened');                                                                                          // 15136
 *    });                                                                                                              // 15137
 * // Async close the given sidenav                                                                                    // 15138
 * $mdSidenav(componentId)                                                                                             // 15139
 *    .close()                                                                                                         // 15140
 *    .then(function(){                                                                                                // 15141
 *      $log.debug('closed');                                                                                          // 15142
 *    });                                                                                                              // 15143
 * // Sync check to see if the specified sidenav is set to be open                                                     // 15144
 * $mdSidenav(componentId).isOpen();                                                                                   // 15145
 * // Sync check to whether given sidenav is locked open                                                               // 15146
 * // If this is true, the sidenav will be open regardless of close()                                                  // 15147
 * $mdSidenav(componentId).isLockedOpen();                                                                             // 15148
 * </hljs>                                                                                                             // 15149
 */                                                                                                                    // 15150
function SidenavService($mdComponentRegistry, $q) {                                                                    // 15151
  return function(handle) {                                                                                            // 15152
                                                                                                                       // 15153
    // Lookup the controller instance for the specified sidNav instance                                                // 15154
    var self;                                                                                                          // 15155
    var errorMsg = "SideNav '" + handle + "' is not available!";                                                       // 15156
    var instance = $mdComponentRegistry.get(handle);                                                                   // 15157
                                                                                                                       // 15158
    if(!instance) {                                                                                                    // 15159
      $mdComponentRegistry.notFoundError(handle);                                                                      // 15160
    }                                                                                                                  // 15161
                                                                                                                       // 15162
    return self = {                                                                                                    // 15163
      // -----------------                                                                                             // 15164
      // Sync methods                                                                                                  // 15165
      // -----------------                                                                                             // 15166
      isOpen: function() {                                                                                             // 15167
        return instance && instance.isOpen();                                                                          // 15168
      },                                                                                                               // 15169
      isLockedOpen: function() {                                                                                       // 15170
        return instance && instance.isLockedOpen();                                                                    // 15171
      },                                                                                                               // 15172
      // -----------------                                                                                             // 15173
      // Async methods                                                                                                 // 15174
      // -----------------                                                                                             // 15175
      toggle: function() {                                                                                             // 15176
        return instance ? instance.toggle() : $q.reject(errorMsg);                                                     // 15177
      },                                                                                                               // 15178
      open: function() {                                                                                               // 15179
        return instance ? instance.open() : $q.reject(errorMsg);                                                       // 15180
      },                                                                                                               // 15181
      close: function() {                                                                                              // 15182
        return instance ? instance.close() : $q.reject(errorMsg);                                                      // 15183
      },                                                                                                               // 15184
      then : function( callbackFn ) {                                                                                  // 15185
        var promise = instance ? $q.when(instance) : waitForInstance();                                                // 15186
        return promise.then( callbackFn || angular.noop );                                                             // 15187
      }                                                                                                                // 15188
    };                                                                                                                 // 15189
                                                                                                                       // 15190
    /**                                                                                                                // 15191
     * Deferred lookup of component instance using $component registry                                                 // 15192
     */                                                                                                                // 15193
    function waitForInstance() {                                                                                       // 15194
      return $mdComponentRegistry                                                                                      // 15195
                .when(handle)                                                                                          // 15196
                .then(function( it ){                                                                                  // 15197
                  instance = it;                                                                                       // 15198
                  return it;                                                                                           // 15199
                });                                                                                                    // 15200
    }                                                                                                                  // 15201
  };                                                                                                                   // 15202
}                                                                                                                      // 15203
SidenavService.$inject = ["$mdComponentRegistry", "$q"];                                                               // 15204
/**                                                                                                                    // 15205
 * @ngdoc directive                                                                                                    // 15206
 * @name mdSidenavFocus                                                                                                // 15207
 * @module material.components.sidenav                                                                                 // 15208
 *                                                                                                                     // 15209
 * @restrict A                                                                                                         // 15210
 *                                                                                                                     // 15211
 * @description                                                                                                        // 15212
 * `mdSidenavFocus` provides a way to specify the focused element when a sidenav opens.                                // 15213
 * This is completely optional, as the sidenav itself is focused by default.                                           // 15214
 *                                                                                                                     // 15215
 * @usage                                                                                                              // 15216
 * <hljs lang="html">                                                                                                  // 15217
 * <md-sidenav>                                                                                                        // 15218
 *   <form>                                                                                                            // 15219
 *     <md-input-container>                                                                                            // 15220
 *       <label for="testInput">Label</label>                                                                          // 15221
 *       <input id="testInput" type="text" md-sidenav-focus>                                                           // 15222
 *     </md-input-container>                                                                                           // 15223
 *   </form>                                                                                                           // 15224
 * </md-sidenav>                                                                                                       // 15225
 * </hljs>                                                                                                             // 15226
 **/                                                                                                                   // 15227
function SidenavFocusDirective() {                                                                                     // 15228
  return {                                                                                                             // 15229
    restrict: 'A',                                                                                                     // 15230
    require: '^mdSidenav',                                                                                             // 15231
    link: function(scope, element, attr, sidenavCtrl) {                                                                // 15232
      // @see $mdUtil.findFocusTarget(...)                                                                             // 15233
    }                                                                                                                  // 15234
  };                                                                                                                   // 15235
}                                                                                                                      // 15236
/**                                                                                                                    // 15237
 * @ngdoc directive                                                                                                    // 15238
 * @name mdSidenav                                                                                                     // 15239
 * @module material.components.sidenav                                                                                 // 15240
 * @restrict E                                                                                                         // 15241
 *                                                                                                                     // 15242
 * @description                                                                                                        // 15243
 *                                                                                                                     // 15244
 * A Sidenav component that can be opened and closed programatically.                                                  // 15245
 *                                                                                                                     // 15246
 * By default, upon opening it will slide out on top of the main content area.                                         // 15247
 *                                                                                                                     // 15248
 * For keyboard and screen reader accessibility, focus is sent to the sidenav wrapper by default.                      // 15249
 * It can be overridden with the `md-autofocus` directive on the child element you want focused.                       // 15250
 *                                                                                                                     // 15251
 * @usage                                                                                                              // 15252
 * <hljs lang="html">                                                                                                  // 15253
 * <div layout="row" ng-controller="MyController">                                                                     // 15254
 *   <md-sidenav md-component-id="left" class="md-sidenav-left">                                                       // 15255
 *     Left Nav!                                                                                                       // 15256
 *   </md-sidenav>                                                                                                     // 15257
 *                                                                                                                     // 15258
 *   <md-content>                                                                                                      // 15259
 *     Center Content                                                                                                  // 15260
 *     <md-button ng-click="openLeftMenu()">                                                                           // 15261
 *       Open Left Menu                                                                                                // 15262
 *     </md-button>                                                                                                    // 15263
 *   </md-content>                                                                                                     // 15264
 *                                                                                                                     // 15265
 *   <md-sidenav md-component-id="right"                                                                               // 15266
 *     md-is-locked-open="$mdMedia('min-width: 333px')"                                                                // 15267
 *     class="md-sidenav-right">                                                                                       // 15268
 *     <form>                                                                                                          // 15269
 *       <md-input-container>                                                                                          // 15270
 *         <label for="testInput">Test input</label>                                                                   // 15271
 *         <input id="testInput" type="text"                                                                           // 15272
 *                ng-model="data" md-autofocus>                                                                        // 15273
 *       </md-input-container>                                                                                         // 15274
 *     </form>                                                                                                         // 15275
 *   </md-sidenav>                                                                                                     // 15276
 * </div>                                                                                                              // 15277
 * </hljs>                                                                                                             // 15278
 *                                                                                                                     // 15279
 * <hljs lang="js">                                                                                                    // 15280
 * var app = angular.module('myApp', ['ngMaterial']);                                                                  // 15281
 * app.controller('MyController', function($scope, $mdSidenav) {                                                       // 15282
 *   $scope.openLeftMenu = function() {                                                                                // 15283
 *     $mdSidenav('left').toggle();                                                                                    // 15284
 *   };                                                                                                                // 15285
 * });                                                                                                                 // 15286
 * </hljs>                                                                                                             // 15287
 *                                                                                                                     // 15288
 * @param {expression=} md-is-open A model bound to whether the sidenav is opened.                                     // 15289
 * @param {string=} md-component-id componentId to use with $mdSidenav service.                                        // 15290
 * @param {expression=} md-is-locked-open When this expression evalutes to true,                                       // 15291
 * the sidenav 'locks open': it falls into the content's flow instead                                                  // 15292
 * of appearing over it. This overrides the `md-is-open` attribute.                                                    // 15293
 *                                                                                                                     // 15294
 * The $mdMedia() service is exposed to the is-locked-open attribute, which                                            // 15295
 * can be given a media query or one of the `sm`, `gt-sm`, `md`, `gt-md`, `lg` or `gt-lg` presets.                     // 15296
 * Examples:                                                                                                           // 15297
 *                                                                                                                     // 15298
 *   - `<md-sidenav md-is-locked-open="shouldLockOpen"></md-sidenav>`                                                  // 15299
 *   - `<md-sidenav md-is-locked-open="$mdMedia('min-width: 1000px')"></md-sidenav>`                                   // 15300
 *   - `<md-sidenav md-is-locked-open="$mdMedia('sm')"></md-sidenav>` (locks open on small screens)                    // 15301
 */                                                                                                                    // 15302
function SidenavDirective($mdMedia, $mdUtil, $mdConstant, $mdTheming, $animate, $compile, $parse, $log, $q, $document) {
  return {                                                                                                             // 15304
    restrict: 'E',                                                                                                     // 15305
    scope: {                                                                                                           // 15306
      isOpen: '=?mdIsOpen'                                                                                             // 15307
    },                                                                                                                 // 15308
    controller: '$mdSidenavController',                                                                                // 15309
    compile: function(element) {                                                                                       // 15310
      element.addClass('md-closed');                                                                                   // 15311
      element.attr('tabIndex', '-1');                                                                                  // 15312
      return postLink;                                                                                                 // 15313
    }                                                                                                                  // 15314
  };                                                                                                                   // 15315
                                                                                                                       // 15316
  /**                                                                                                                  // 15317
   * Directive Post Link function...                                                                                   // 15318
   */                                                                                                                  // 15319
  function postLink(scope, element, attr, sidenavCtrl) {                                                               // 15320
    var lastParentOverFlow;                                                                                            // 15321
    var triggeringElement = null;                                                                                      // 15322
    var promise = $q.when(true);                                                                                       // 15323
                                                                                                                       // 15324
    var isLockedOpenParsed = $parse(attr.mdIsLockedOpen);                                                              // 15325
    var isLocked = function() {                                                                                        // 15326
      return isLockedOpenParsed(scope.$parent, {                                                                       // 15327
        $media: function(arg) {                                                                                        // 15328
          $log.warn("$media is deprecated for is-locked-open. Use $mdMedia instead.");                                 // 15329
          return $mdMedia(arg);                                                                                        // 15330
        },                                                                                                             // 15331
        $mdMedia: $mdMedia                                                                                             // 15332
      });                                                                                                              // 15333
    };                                                                                                                 // 15334
    var backdrop = $mdUtil.createBackdrop(scope, "md-sidenav-backdrop md-opaque ng-enter");                            // 15335
                                                                                                                       // 15336
    $mdTheming.inherit(backdrop, element);                                                                             // 15337
                                                                                                                       // 15338
    element.on('$destroy', function() {                                                                                // 15339
      backdrop.remove();                                                                                               // 15340
      sidenavCtrl.destroy();                                                                                           // 15341
    });                                                                                                                // 15342
                                                                                                                       // 15343
    scope.$on('$destroy', function(){                                                                                  // 15344
      backdrop.remove()                                                                                                // 15345
    });                                                                                                                // 15346
                                                                                                                       // 15347
    scope.$watch(isLocked, updateIsLocked);                                                                            // 15348
    scope.$watch('isOpen', updateIsOpen);                                                                              // 15349
                                                                                                                       // 15350
                                                                                                                       // 15351
    // Publish special accessor for the Controller instance                                                            // 15352
    sidenavCtrl.$toggleOpen = toggleOpen;                                                                              // 15353
                                                                                                                       // 15354
    /**                                                                                                                // 15355
     * Toggle the DOM classes to indicate `locked`                                                                     // 15356
     * @param isLocked                                                                                                 // 15357
     */                                                                                                                // 15358
    function updateIsLocked(isLocked, oldValue) {                                                                      // 15359
      scope.isLockedOpen = isLocked;                                                                                   // 15360
      if (isLocked === oldValue) {                                                                                     // 15361
        element.toggleClass('md-locked-open', !!isLocked);                                                             // 15362
      } else {                                                                                                         // 15363
        $animate[isLocked ? 'addClass' : 'removeClass'](element, 'md-locked-open');                                    // 15364
      }                                                                                                                // 15365
      backdrop.toggleClass('md-locked-open', !!isLocked);                                                              // 15366
    }                                                                                                                  // 15367
                                                                                                                       // 15368
    /**                                                                                                                // 15369
     * Toggle the SideNav view and attach/detach listeners                                                             // 15370
     * @param isOpen                                                                                                   // 15371
     */                                                                                                                // 15372
    function updateIsOpen(isOpen) {                                                                                    // 15373
      // Support deprecated md-sidenav-focus attribute as fallback                                                     // 15374
      var focusEl = $mdUtil.findFocusTarget(element) || $mdUtil.findFocusTarget(element,'[md-sidenav-focus]') || element;
      var parent = element.parent();                                                                                   // 15376
                                                                                                                       // 15377
      parent[isOpen ? 'on' : 'off']('keydown', onKeyDown);                                                             // 15378
      backdrop[isOpen ? 'on' : 'off']('click', close);                                                                 // 15379
                                                                                                                       // 15380
      if ( isOpen ) {                                                                                                  // 15381
        // Capture upon opening..                                                                                      // 15382
        triggeringElement = $document[0].activeElement;                                                                // 15383
      }                                                                                                                // 15384
                                                                                                                       // 15385
      disableParentScroll(isOpen);                                                                                     // 15386
                                                                                                                       // 15387
      return promise = $q.all([                                                                                        // 15388
                isOpen ? $animate.enter(backdrop, parent) : $animate.leave(backdrop),                                  // 15389
                $animate[isOpen ? 'removeClass' : 'addClass'](element, 'md-closed')                                    // 15390
              ])                                                                                                       // 15391
              .then(function() {                                                                                       // 15392
                // Perform focus when animations are ALL done...                                                       // 15393
                if (scope.isOpen) {                                                                                    // 15394
                  focusEl && focusEl.focus();                                                                          // 15395
                }                                                                                                      // 15396
              });                                                                                                      // 15397
    }                                                                                                                  // 15398
                                                                                                                       // 15399
    /**                                                                                                                // 15400
     * Prevent parent scrolling (when the SideNav is open)                                                             // 15401
     */                                                                                                                // 15402
    function disableParentScroll(disabled) {                                                                           // 15403
      var parent = element.parent();                                                                                   // 15404
      if ( disabled && !lastParentOverFlow ) {                                                                         // 15405
                                                                                                                       // 15406
        lastParentOverFlow = parent.css('overflow');                                                                   // 15407
        parent.css('overflow', 'hidden');                                                                              // 15408
                                                                                                                       // 15409
      } else if (angular.isDefined(lastParentOverFlow)) {                                                              // 15410
                                                                                                                       // 15411
        parent.css('overflow', lastParentOverFlow);                                                                    // 15412
        lastParentOverFlow = undefined;                                                                                // 15413
                                                                                                                       // 15414
      }                                                                                                                // 15415
    }                                                                                                                  // 15416
                                                                                                                       // 15417
    /**                                                                                                                // 15418
     * Toggle the sideNav view and publish a promise to be resolved when                                               // 15419
     * the view animation finishes.                                                                                    // 15420
     *                                                                                                                 // 15421
     * @param isOpen                                                                                                   // 15422
     * @returns {*}                                                                                                    // 15423
     */                                                                                                                // 15424
    function toggleOpen( isOpen ) {                                                                                    // 15425
      if (scope.isOpen == isOpen ) {                                                                                   // 15426
                                                                                                                       // 15427
        return $q.when(true);                                                                                          // 15428
                                                                                                                       // 15429
      } else {                                                                                                         // 15430
        return $q(function(resolve){                                                                                   // 15431
          // Toggle value to force an async `updateIsOpen()` to run                                                    // 15432
          scope.isOpen = isOpen;                                                                                       // 15433
                                                                                                                       // 15434
          $mdUtil.nextTick(function() {                                                                                // 15435
            // When the current `updateIsOpen()` animation finishes                                                    // 15436
            promise.then(function(result) {                                                                            // 15437
                                                                                                                       // 15438
              if ( !scope.isOpen ) {                                                                                   // 15439
                // reset focus to originating element (if available) upon close                                        // 15440
                triggeringElement && triggeringElement.focus();                                                        // 15441
                triggeringElement = null;                                                                              // 15442
              }                                                                                                        // 15443
                                                                                                                       // 15444
              resolve(result);                                                                                         // 15445
            });                                                                                                        // 15446
          });                                                                                                          // 15447
                                                                                                                       // 15448
        });                                                                                                            // 15449
                                                                                                                       // 15450
      }                                                                                                                // 15451
    }                                                                                                                  // 15452
                                                                                                                       // 15453
    /**                                                                                                                // 15454
     * Auto-close sideNav when the `escape` key is pressed.                                                            // 15455
     * @param evt                                                                                                      // 15456
     */                                                                                                                // 15457
    function onKeyDown(ev) {                                                                                           // 15458
      var isEscape = (ev.keyCode === $mdConstant.KEY_CODE.ESCAPE);                                                     // 15459
      return isEscape ? close(ev) : $q.when(true);                                                                     // 15460
    }                                                                                                                  // 15461
                                                                                                                       // 15462
    /**                                                                                                                // 15463
     * With backdrop `clicks` or `escape` key-press, immediately                                                       // 15464
     * apply the CSS close transition... Then notify the controller                                                    // 15465
     * to close() and perform its own actions.                                                                         // 15466
     */                                                                                                                // 15467
    function close(ev) {                                                                                               // 15468
      ev.preventDefault();                                                                                             // 15469
                                                                                                                       // 15470
      return sidenavCtrl.close();                                                                                      // 15471
    }                                                                                                                  // 15472
                                                                                                                       // 15473
  }                                                                                                                    // 15474
}                                                                                                                      // 15475
SidenavDirective.$inject = ["$mdMedia", "$mdUtil", "$mdConstant", "$mdTheming", "$animate", "$compile", "$parse", "$log", "$q", "$document"];
                                                                                                                       // 15477
/*                                                                                                                     // 15478
 * @private                                                                                                            // 15479
 * @ngdoc controller                                                                                                   // 15480
 * @name SidenavController                                                                                             // 15481
 * @module material.components.sidenav                                                                                 // 15482
 *                                                                                                                     // 15483
 */                                                                                                                    // 15484
function SidenavController($scope, $element, $attrs, $mdComponentRegistry, $q) {                                       // 15485
                                                                                                                       // 15486
  var self = this;                                                                                                     // 15487
                                                                                                                       // 15488
  // Use Default internal method until overridden by directive postLink                                                // 15489
                                                                                                                       // 15490
  // Synchronous getters                                                                                               // 15491
  self.isOpen = function() { return !!$scope.isOpen; };                                                                // 15492
  self.isLockedOpen = function() { return !!$scope.isLockedOpen; };                                                    // 15493
                                                                                                                       // 15494
  // Async actions                                                                                                     // 15495
  self.open   = function() { return self.$toggleOpen( true );  };                                                      // 15496
  self.close  = function() { return self.$toggleOpen( false ); };                                                      // 15497
  self.toggle = function() { return self.$toggleOpen( !$scope.isOpen );  };                                            // 15498
  self.$toggleOpen = function(value) { return $q.when($scope.isOpen = value); };                                       // 15499
                                                                                                                       // 15500
  self.destroy = $mdComponentRegistry.register(self, $attrs.mdComponentId);                                            // 15501
}                                                                                                                      // 15502
SidenavController.$inject = ["$scope", "$element", "$attrs", "$mdComponentRegistry", "$q"];                            // 15503
                                                                                                                       // 15504
})();                                                                                                                  // 15505
(function(){                                                                                                           // 15506
"use strict";                                                                                                          // 15507
                                                                                                                       // 15508
  /**                                                                                                                  // 15509
   * @ngdoc module                                                                                                     // 15510
   * @name material.components.slider                                                                                  // 15511
   */                                                                                                                  // 15512
  angular.module('material.components.slider', [                                                                       // 15513
    'material.core'                                                                                                    // 15514
  ])                                                                                                                   // 15515
  .directive('mdSlider', SliderDirective);                                                                             // 15516
                                                                                                                       // 15517
/**                                                                                                                    // 15518
 * @ngdoc directive                                                                                                    // 15519
 * @name mdSlider                                                                                                      // 15520
 * @module material.components.slider                                                                                  // 15521
 * @restrict E                                                                                                         // 15522
 * @description                                                                                                        // 15523
 * The `<md-slider>` component allows the user to choose from a range of                                               // 15524
 * values.                                                                                                             // 15525
 *                                                                                                                     // 15526
 * As per the [material design spec](http://www.google.com/design/spec/style/color.html#color-ui-color-application)    // 15527
 * the slider is in the accent color by default. The primary color palette may be used with                            // 15528
 * the `md-primary` class.                                                                                             // 15529
 *                                                                                                                     // 15530
 * It has two modes: 'normal' mode, where the user slides between a wide range                                         // 15531
 * of values, and 'discrete' mode, where the user slides between only a few                                            // 15532
 * select values.                                                                                                      // 15533
 *                                                                                                                     // 15534
 * To enable discrete mode, add the `md-discrete` attribute to a slider,                                               // 15535
 * and use the `step` attribute to change the distance between                                                         // 15536
 * values the user is allowed to pick.                                                                                 // 15537
 *                                                                                                                     // 15538
 * @usage                                                                                                              // 15539
 * <h4>Normal Mode</h4>                                                                                                // 15540
 * <hljs lang="html">                                                                                                  // 15541
 * <md-slider ng-model="myValue" min="5" max="500">                                                                    // 15542
 * </md-slider>                                                                                                        // 15543
 * </hljs>                                                                                                             // 15544
 * <h4>Discrete Mode</h4>                                                                                              // 15545
 * <hljs lang="html">                                                                                                  // 15546
 * <md-slider md-discrete ng-model="myDiscreteValue" step="10" min="10" max="130">                                     // 15547
 * </md-slider>                                                                                                        // 15548
 * </hljs>                                                                                                             // 15549
 *                                                                                                                     // 15550
 * @param {boolean=} md-discrete Whether to enable discrete mode.                                                      // 15551
 * @param {number=} step The distance between values the user is allowed to pick. Default 1.                           // 15552
 * @param {number=} min The minimum value the user is allowed to pick. Default 0.                                      // 15553
 * @param {number=} max The maximum value the user is allowed to pick. Default 100.                                    // 15554
 */                                                                                                                    // 15555
function SliderDirective($$rAF, $window, $mdAria, $mdUtil, $mdConstant, $mdTheming, $mdGesture, $parse, $log) {        // 15556
  return {                                                                                                             // 15557
    scope: {},                                                                                                         // 15558
    require: '?ngModel',                                                                                               // 15559
    template:                                                                                                          // 15560
      '<div class="md-slider-wrapper">' +                                                                              // 15561
        '<div class="md-track-container">' +                                                                           // 15562
          '<div class="md-track"></div>' +                                                                             // 15563
          '<div class="md-track md-track-fill"></div>' +                                                               // 15564
          '<div class="md-track-ticks"></div>' +                                                                       // 15565
        '</div>' +                                                                                                     // 15566
        '<div class="md-thumb-container">' +                                                                           // 15567
          '<div class="md-thumb"></div>' +                                                                             // 15568
          '<div class="md-focus-thumb"></div>' +                                                                       // 15569
          '<div class="md-focus-ring"></div>' +                                                                        // 15570
          '<div class="md-sign">' +                                                                                    // 15571
            '<span class="md-thumb-text"></span>' +                                                                    // 15572
          '</div>' +                                                                                                   // 15573
          '<div class="md-disabled-thumb"></div>' +                                                                    // 15574
        '</div>' +                                                                                                     // 15575
      '</div>',                                                                                                        // 15576
    compile: compile                                                                                                   // 15577
  };                                                                                                                   // 15578
                                                                                                                       // 15579
  // **********************************************************                                                        // 15580
  // Private Methods                                                                                                   // 15581
  // **********************************************************                                                        // 15582
                                                                                                                       // 15583
  function compile (tElement, tAttrs) {                                                                                // 15584
    if (!tAttrs.tabindex) tElement.attr('tabindex', 0);                                                                // 15585
    tElement.attr('role', 'slider');                                                                                   // 15586
                                                                                                                       // 15587
    $mdAria.expect(tElement, 'aria-label');                                                                            // 15588
                                                                                                                       // 15589
    return postLink;                                                                                                   // 15590
  }                                                                                                                    // 15591
                                                                                                                       // 15592
  function postLink(scope, element, attr, ngModelCtrl) {                                                               // 15593
    $mdTheming(element);                                                                                               // 15594
    ngModelCtrl = ngModelCtrl || {                                                                                     // 15595
      // Mock ngModelController if it doesn't exist to give us                                                         // 15596
      // the minimum functionality needed                                                                              // 15597
      $setViewValue: function(val) {                                                                                   // 15598
        this.$viewValue = val;                                                                                         // 15599
        this.$viewChangeListeners.forEach(function(cb) { cb(); });                                                     // 15600
      },                                                                                                               // 15601
      $parsers: [],                                                                                                    // 15602
      $formatters: [],                                                                                                 // 15603
      $viewChangeListeners: []                                                                                         // 15604
    };                                                                                                                 // 15605
                                                                                                                       // 15606
    var isDisabledGetter = angular.noop;                                                                               // 15607
    if (attr.disabled != null) {                                                                                       // 15608
      isDisabledGetter = function() { return true; };                                                                  // 15609
    } else if (attr.ngDisabled) {                                                                                      // 15610
      isDisabledGetter = angular.bind(null, $parse(attr.ngDisabled), scope.$parent);                                   // 15611
    }                                                                                                                  // 15612
                                                                                                                       // 15613
    var thumb = angular.element(element[0].querySelector('.md-thumb'));                                                // 15614
    var thumbText = angular.element(element[0].querySelector('.md-thumb-text'));                                       // 15615
    var thumbContainer = thumb.parent();                                                                               // 15616
    var trackContainer = angular.element(element[0].querySelector('.md-track-container'));                             // 15617
    var activeTrack = angular.element(element[0].querySelector('.md-track-fill'));                                     // 15618
    var tickContainer = angular.element(element[0].querySelector('.md-track-ticks'));                                  // 15619
    var throttledRefreshDimensions = $mdUtil.throttle(refreshSliderDimensions, 5000);                                  // 15620
                                                                                                                       // 15621
    // Default values, overridable by attrs                                                                            // 15622
    angular.isDefined(attr.min) ? attr.$observe('min', updateMin) : updateMin(0);                                      // 15623
    angular.isDefined(attr.max) ? attr.$observe('max', updateMax) : updateMax(100);                                    // 15624
    angular.isDefined(attr.step)? attr.$observe('step', updateStep) : updateStep(1);                                   // 15625
                                                                                                                       // 15626
    // We have to manually stop the $watch on ngDisabled because it exists                                             // 15627
    // on the parent scope, and won't be automatically destroyed when                                                  // 15628
    // the component is destroyed.                                                                                     // 15629
    var stopDisabledWatch = angular.noop;                                                                              // 15630
    if (attr.ngDisabled) {                                                                                             // 15631
      stopDisabledWatch = scope.$parent.$watch(attr.ngDisabled, updateAriaDisabled);                                   // 15632
    }                                                                                                                  // 15633
                                                                                                                       // 15634
    $mdGesture.register(element, 'drag');                                                                              // 15635
                                                                                                                       // 15636
    element                                                                                                            // 15637
      .on('keydown', keydownListener)                                                                                  // 15638
      .on('$md.pressdown', onPressDown)                                                                                // 15639
      .on('$md.pressup', onPressUp)                                                                                    // 15640
      .on('$md.dragstart', onDragStart)                                                                                // 15641
      .on('$md.drag', onDrag)                                                                                          // 15642
      .on('$md.dragend', onDragEnd);                                                                                   // 15643
                                                                                                                       // 15644
    // On resize, recalculate the slider's dimensions and re-render                                                    // 15645
    function updateAll() {                                                                                             // 15646
      refreshSliderDimensions();                                                                                       // 15647
      ngModelRender();                                                                                                 // 15648
      redrawTicks();                                                                                                   // 15649
    }                                                                                                                  // 15650
    setTimeout(updateAll, 0);                                                                                          // 15651
                                                                                                                       // 15652
    var debouncedUpdateAll = $$rAF.throttle(updateAll);                                                                // 15653
    angular.element($window).on('resize', debouncedUpdateAll);                                                         // 15654
                                                                                                                       // 15655
    scope.$on('$destroy', function() {                                                                                 // 15656
      angular.element($window).off('resize', debouncedUpdateAll);                                                      // 15657
      stopDisabledWatch();                                                                                             // 15658
    });                                                                                                                // 15659
                                                                                                                       // 15660
    ngModelCtrl.$render = ngModelRender;                                                                               // 15661
    ngModelCtrl.$viewChangeListeners.push(ngModelRender);                                                              // 15662
    ngModelCtrl.$formatters.push(minMaxValidator);                                                                     // 15663
    ngModelCtrl.$formatters.push(stepValidator);                                                                       // 15664
                                                                                                                       // 15665
    /**                                                                                                                // 15666
     * Attributes                                                                                                      // 15667
     */                                                                                                                // 15668
    var min;                                                                                                           // 15669
    var max;                                                                                                           // 15670
    var step;                                                                                                          // 15671
    function updateMin(value) {                                                                                        // 15672
      min = parseFloat(value);                                                                                         // 15673
      element.attr('aria-valuemin', value);                                                                            // 15674
      updateAll();                                                                                                     // 15675
    }                                                                                                                  // 15676
    function updateMax(value) {                                                                                        // 15677
      max = parseFloat(value);                                                                                         // 15678
      element.attr('aria-valuemax', value);                                                                            // 15679
      updateAll();                                                                                                     // 15680
    }                                                                                                                  // 15681
    function updateStep(value) {                                                                                       // 15682
      step = parseFloat(value);                                                                                        // 15683
      redrawTicks();                                                                                                   // 15684
    }                                                                                                                  // 15685
    function updateAriaDisabled(isDisabled) {                                                                          // 15686
      element.attr('aria-disabled', !!isDisabled);                                                                     // 15687
    }                                                                                                                  // 15688
                                                                                                                       // 15689
    // Draw the ticks with canvas.                                                                                     // 15690
    // The alternative to drawing ticks with canvas is to draw one element for each tick,                              // 15691
    // which could quickly become a performance bottleneck.                                                            // 15692
    var tickCanvas, tickCtx;                                                                                           // 15693
    function redrawTicks() {                                                                                           // 15694
      if (!angular.isDefined(attr.mdDiscrete)) return;                                                                 // 15695
      if ( angular.isUndefined(step) )         return;                                                                 // 15696
                                                                                                                       // 15697
      if ( step <= 0 ) {                                                                                               // 15698
        var msg = 'Slider step value must be greater than zero when in discrete mode';                                 // 15699
        $log.error(msg);                                                                                               // 15700
        throw new Error(msg);                                                                                          // 15701
      }                                                                                                                // 15702
                                                                                                                       // 15703
      var numSteps = Math.floor( (max - min) / step );                                                                 // 15704
      if (!tickCanvas) {                                                                                               // 15705
        tickCanvas = angular.element('<canvas>').css('position', 'absolute');                                          // 15706
        tickContainer.append(tickCanvas);                                                                              // 15707
                                                                                                                       // 15708
        var trackTicksStyle = $window.getComputedStyle(tickContainer[0]);                                              // 15709
        tickCtx = tickCanvas[0].getContext('2d');                                                                      // 15710
        tickCtx.fillStyle = trackTicksStyle.backgroundColor || 'black';                                                // 15711
      }                                                                                                                // 15712
                                                                                                                       // 15713
      var dimensions = getSliderDimensions();                                                                          // 15714
      tickCanvas[0].width = dimensions.width;                                                                          // 15715
      tickCanvas[0].height = dimensions.height;                                                                        // 15716
                                                                                                                       // 15717
      var distance;                                                                                                    // 15718
      for (var i = 0; i <= numSteps; i++) {                                                                            // 15719
        distance = Math.floor(dimensions.width * (i / numSteps));                                                      // 15720
        tickCtx.fillRect(distance - 1, 0, 2, dimensions.height);                                                       // 15721
      }                                                                                                                // 15722
    }                                                                                                                  // 15723
                                                                                                                       // 15724
                                                                                                                       // 15725
    /**                                                                                                                // 15726
     * Refreshing Dimensions                                                                                           // 15727
     */                                                                                                                // 15728
    var sliderDimensions = {};                                                                                         // 15729
    refreshSliderDimensions();                                                                                         // 15730
    function refreshSliderDimensions() {                                                                               // 15731
      sliderDimensions = trackContainer[0].getBoundingClientRect();                                                    // 15732
    }                                                                                                                  // 15733
    function getSliderDimensions() {                                                                                   // 15734
      throttledRefreshDimensions();                                                                                    // 15735
      return sliderDimensions;                                                                                         // 15736
    }                                                                                                                  // 15737
                                                                                                                       // 15738
    /**                                                                                                                // 15739
     * left/right arrow listener                                                                                       // 15740
     */                                                                                                                // 15741
    function keydownListener(ev) {                                                                                     // 15742
      if(element[0].hasAttribute('disabled')) {                                                                        // 15743
        return;                                                                                                        // 15744
      }                                                                                                                // 15745
                                                                                                                       // 15746
      var changeAmount;                                                                                                // 15747
      if (ev.keyCode === $mdConstant.KEY_CODE.LEFT_ARROW) {                                                            // 15748
        changeAmount = -step;                                                                                          // 15749
      } else if (ev.keyCode === $mdConstant.KEY_CODE.RIGHT_ARROW) {                                                    // 15750
        changeAmount = step;                                                                                           // 15751
      }                                                                                                                // 15752
      if (changeAmount) {                                                                                              // 15753
        if (ev.metaKey || ev.ctrlKey || ev.altKey) {                                                                   // 15754
          changeAmount *= 4;                                                                                           // 15755
        }                                                                                                              // 15756
        ev.preventDefault();                                                                                           // 15757
        ev.stopPropagation();                                                                                          // 15758
        scope.$evalAsync(function() {                                                                                  // 15759
          setModelValue(ngModelCtrl.$viewValue + changeAmount);                                                        // 15760
        });                                                                                                            // 15761
      }                                                                                                                // 15762
    }                                                                                                                  // 15763
                                                                                                                       // 15764
    /**                                                                                                                // 15765
     * ngModel setters and validators                                                                                  // 15766
     */                                                                                                                // 15767
    function setModelValue(value) {                                                                                    // 15768
      ngModelCtrl.$setViewValue( minMaxValidator(stepValidator(value)) );                                              // 15769
    }                                                                                                                  // 15770
    function ngModelRender() {                                                                                         // 15771
      if (isNaN(ngModelCtrl.$viewValue)) {                                                                             // 15772
        ngModelCtrl.$viewValue = ngModelCtrl.$modelValue;                                                              // 15773
      }                                                                                                                // 15774
                                                                                                                       // 15775
      var percent = (ngModelCtrl.$viewValue - min) / (max - min);                                                      // 15776
      scope.modelValue = ngModelCtrl.$viewValue;                                                                       // 15777
      element.attr('aria-valuenow', ngModelCtrl.$viewValue);                                                           // 15778
      setSliderPercent(percent);                                                                                       // 15779
      thumbText.text( ngModelCtrl.$viewValue );                                                                        // 15780
    }                                                                                                                  // 15781
                                                                                                                       // 15782
    function minMaxValidator(value) {                                                                                  // 15783
      if (angular.isNumber(value)) {                                                                                   // 15784
        return Math.max(min, Math.min(max, value));                                                                    // 15785
      }                                                                                                                // 15786
    }                                                                                                                  // 15787
    function stepValidator(value) {                                                                                    // 15788
      if (angular.isNumber(value)) {                                                                                   // 15789
        var formattedValue = (Math.round((value - min) / step) * step + min);                                          // 15790
        // Format to 3 digits after the decimal point - fixes #2015.                                                   // 15791
        return (Math.round(formattedValue * 1000) / 1000);                                                             // 15792
      }                                                                                                                // 15793
    }                                                                                                                  // 15794
                                                                                                                       // 15795
    /**                                                                                                                // 15796
     * @param percent 0-1                                                                                              // 15797
     */                                                                                                                // 15798
    function setSliderPercent(percent) {                                                                               // 15799
                                                                                                                       // 15800
        percent = clamp(percent);                                                                                      // 15801
                                                                                                                       // 15802
        var percentStr = (percent * 100) + '%';                                                                        // 15803
                                                                                                                       // 15804
        activeTrack.css('width', percentStr);                                                                          // 15805
        thumbContainer.css('left',percentStr);                                                                         // 15806
                                                                                                                       // 15807
        element.toggleClass('md-min', percent === 0);                                                                  // 15808
        element.toggleClass('md-max', percent === 1);                                                                  // 15809
    }                                                                                                                  // 15810
                                                                                                                       // 15811
                                                                                                                       // 15812
    /**                                                                                                                // 15813
     * Slide listeners                                                                                                 // 15814
     */                                                                                                                // 15815
    var isDragging = false;                                                                                            // 15816
    var isDiscrete = angular.isDefined(attr.mdDiscrete);                                                               // 15817
                                                                                                                       // 15818
    function onPressDown(ev) {                                                                                         // 15819
      if (isDisabledGetter()) return;                                                                                  // 15820
                                                                                                                       // 15821
      element.addClass('md-active');                                                                                   // 15822
      element[0].focus();                                                                                              // 15823
      refreshSliderDimensions();                                                                                       // 15824
                                                                                                                       // 15825
      var exactVal = percentToValue( positionToPercent( ev.pointer.x ));                                               // 15826
      var closestVal = minMaxValidator( stepValidator(exactVal) );                                                     // 15827
      scope.$apply(function() {                                                                                        // 15828
        setModelValue( closestVal );                                                                                   // 15829
        setSliderPercent( valueToPercent(closestVal));                                                                 // 15830
      });                                                                                                              // 15831
    }                                                                                                                  // 15832
    function onPressUp(ev) {                                                                                           // 15833
      if (isDisabledGetter()) return;                                                                                  // 15834
                                                                                                                       // 15835
      element.removeClass('md-dragging md-active');                                                                    // 15836
                                                                                                                       // 15837
      var exactVal = percentToValue( positionToPercent( ev.pointer.x ));                                               // 15838
      var closestVal = minMaxValidator( stepValidator(exactVal) );                                                     // 15839
      scope.$apply(function() {                                                                                        // 15840
        setModelValue(closestVal);                                                                                     // 15841
        ngModelRender();                                                                                               // 15842
      });                                                                                                              // 15843
    }                                                                                                                  // 15844
    function onDragStart(ev) {                                                                                         // 15845
      if (isDisabledGetter()) return;                                                                                  // 15846
      isDragging = true;                                                                                               // 15847
      ev.stopPropagation();                                                                                            // 15848
                                                                                                                       // 15849
      element.addClass('md-dragging');                                                                                 // 15850
      setSliderFromEvent(ev);                                                                                          // 15851
    }                                                                                                                  // 15852
    function onDrag(ev) {                                                                                              // 15853
      if (!isDragging) return;                                                                                         // 15854
      ev.stopPropagation();                                                                                            // 15855
      setSliderFromEvent(ev);                                                                                          // 15856
    }                                                                                                                  // 15857
    function onDragEnd(ev) {                                                                                           // 15858
      if (!isDragging) return;                                                                                         // 15859
      ev.stopPropagation();                                                                                            // 15860
      isDragging = false;                                                                                              // 15861
    }                                                                                                                  // 15862
                                                                                                                       // 15863
    function setSliderFromEvent(ev) {                                                                                  // 15864
      // While panning discrete, update only the                                                                       // 15865
      // visual positioning but not the model value.                                                                   // 15866
      if ( isDiscrete ) adjustThumbPosition( ev.pointer.x );                                                           // 15867
      else              doSlide( ev.pointer.x );                                                                       // 15868
    }                                                                                                                  // 15869
                                                                                                                       // 15870
    /**                                                                                                                // 15871
     * Slide the UI by changing the model value                                                                        // 15872
     * @param x                                                                                                        // 15873
     */                                                                                                                // 15874
    function doSlide( x ) {                                                                                            // 15875
      scope.$evalAsync( function() {                                                                                   // 15876
        setModelValue( percentToValue( positionToPercent(x) ));                                                        // 15877
      });                                                                                                              // 15878
    }                                                                                                                  // 15879
                                                                                                                       // 15880
    /**                                                                                                                // 15881
     * Slide the UI without changing the model (while dragging/panning)                                                // 15882
     * @param x                                                                                                        // 15883
     */                                                                                                                // 15884
    function adjustThumbPosition( x ) {                                                                                // 15885
      var exactVal = percentToValue( positionToPercent( x ));                                                          // 15886
      var closestVal = minMaxValidator( stepValidator(exactVal) );                                                     // 15887
      setSliderPercent( positionToPercent(x) );                                                                        // 15888
      thumbText.text( closestVal );                                                                                    // 15889
    }                                                                                                                  // 15890
                                                                                                                       // 15891
    /**                                                                                                                // 15892
    * Clamps the value to be between 0 and 1.                                                                          // 15893
    * @param {number} value The value to clamp.                                                                        // 15894
    * @returns {number}                                                                                                // 15895
    */                                                                                                                 // 15896
    function clamp(value) {                                                                                            // 15897
      return Math.max(0, Math.min(value || 0, 1));                                                                     // 15898
    }                                                                                                                  // 15899
                                                                                                                       // 15900
    /**                                                                                                                // 15901
     * Convert horizontal position on slider to percentage value of offset from beginning...                           // 15902
     * @param x                                                                                                        // 15903
     * @returns {number}                                                                                               // 15904
     */                                                                                                                // 15905
    function positionToPercent( x ) {                                                                                  // 15906
      return Math.max(0, Math.min(1, (x - sliderDimensions.left) / (sliderDimensions.width)));                         // 15907
    }                                                                                                                  // 15908
                                                                                                                       // 15909
    /**                                                                                                                // 15910
     * Convert percentage offset on slide to equivalent model value                                                    // 15911
     * @param percent                                                                                                  // 15912
     * @returns {*}                                                                                                    // 15913
     */                                                                                                                // 15914
    function percentToValue( percent ) {                                                                               // 15915
      return (min + percent * (max - min));                                                                            // 15916
    }                                                                                                                  // 15917
                                                                                                                       // 15918
    function valueToPercent( val ) {                                                                                   // 15919
      return (val - min)/(max - min);                                                                                  // 15920
    }                                                                                                                  // 15921
  }                                                                                                                    // 15922
}                                                                                                                      // 15923
SliderDirective.$inject = ["$$rAF", "$window", "$mdAria", "$mdUtil", "$mdConstant", "$mdTheming", "$mdGesture", "$parse", "$log"];
                                                                                                                       // 15925
})();                                                                                                                  // 15926
(function(){                                                                                                           // 15927
"use strict";                                                                                                          // 15928
                                                                                                                       // 15929
/**                                                                                                                    // 15930
 * @ngdoc module                                                                                                       // 15931
 * @name material.components.sticky                                                                                    // 15932
 * @description                                                                                                        // 15933
 * Sticky effects for md                                                                                               // 15934
 *                                                                                                                     // 15935
 */                                                                                                                    // 15936
angular                                                                                                                // 15937
  .module('material.components.sticky', [                                                                              // 15938
    'material.core',                                                                                                   // 15939
    'material.components.content'                                                                                      // 15940
  ])                                                                                                                   // 15941
  .factory('$mdSticky', MdSticky);                                                                                     // 15942
                                                                                                                       // 15943
/**                                                                                                                    // 15944
 * @ngdoc service                                                                                                      // 15945
 * @name $mdSticky                                                                                                     // 15946
 * @module material.components.sticky                                                                                  // 15947
 *                                                                                                                     // 15948
 * @description                                                                                                        // 15949
 * The `$mdSticky`service provides a mixin to make elements sticky.                                                    // 15950
 *                                                                                                                     // 15951
 * By default the `$mdSticky` service compiles the cloned element, when not specified through the `elementClone`       // 15952
 * parameter, in the same scope as the actual element lives.                                                           // 15953
 *                                                                                                                     // 15954
 *                                                                                                                     // 15955
 * <h3>Notes</h3>                                                                                                      // 15956
 * When using an element which is containing a compiled directive, which changed its DOM structure during compilation,
 * you should compile the clone yourself using the plain template.<br/><br/>                                           // 15958
 * See the right usage below:                                                                                          // 15959
 * <hljs lang="js">                                                                                                    // 15960
 *   angular.module('myModule')                                                                                        // 15961
 *     .directive('stickySelect', function($mdSticky, $compile) {                                                      // 15962
 *       var SELECT_TEMPLATE =                                                                                         // 15963
 *         '<md-select ng-model="selected">' +                                                                         // 15964
 *           '<md-option>Option 1</md-option>' +                                                                       // 15965
 *         '</md-select>';                                                                                             // 15966
 *                                                                                                                     // 15967
 *       return {                                                                                                      // 15968
 *         restrict: 'E',                                                                                              // 15969
 *         replace: true,                                                                                              // 15970
 *         template: SELECT_TEMPLATE,                                                                                  // 15971
 *         link: function(scope,element) {                                                                             // 15972
 *           $mdSticky(scope, element, $compile(SELECT_TEMPLATE)(scope));                                              // 15973
 *         }                                                                                                           // 15974
 *       };                                                                                                            // 15975
 *     });                                                                                                             // 15976
 * </hljs>                                                                                                             // 15977
 *                                                                                                                     // 15978
 * @usage                                                                                                              // 15979
 * <hljs lang="js">                                                                                                    // 15980
 *   angular.module('myModule')                                                                                        // 15981
 *     .directive('stickyText', function($mdSticky, $compile) {                                                        // 15982
 *       return {                                                                                                      // 15983
 *         restrict: 'E',                                                                                              // 15984
 *         template: '<span>Sticky Text</span>',                                                                       // 15985
 *         link: function(scope,element) {                                                                             // 15986
 *           $mdSticky(scope, element);                                                                                // 15987
 *         }                                                                                                           // 15988
 *       };                                                                                                            // 15989
 *     });                                                                                                             // 15990
 * </hljs>                                                                                                             // 15991
 *                                                                                                                     // 15992
 * @returns A `$mdSticky` function that takes three arguments:                                                         // 15993
 *   - `scope`                                                                                                         // 15994
 *   - `element`: The element that will be 'sticky'                                                                    // 15995
 *   - `elementClone`: A clone of the element, that will be shown                                                      // 15996
 *     when the user starts scrolling past the original element.                                                       // 15997
 *     If not provided, it will use the result of `element.clone()` and compiles it in the given scope.                // 15998
 */                                                                                                                    // 15999
function MdSticky($document, $mdConstant, $$rAF, $mdUtil, $compile) {                                                  // 16000
                                                                                                                       // 16001
  var browserStickySupport = checkStickySupport();                                                                     // 16002
                                                                                                                       // 16003
  /**                                                                                                                  // 16004
   * Registers an element as sticky, used internally by directives to register themselves                              // 16005
   */                                                                                                                  // 16006
  return function registerStickyElement(scope, element, stickyClone) {                                                 // 16007
    var contentCtrl = element.controller('mdContent');                                                                 // 16008
    if (!contentCtrl) return;                                                                                          // 16009
                                                                                                                       // 16010
    if (browserStickySupport) {                                                                                        // 16011
      element.css({                                                                                                    // 16012
        position: browserStickySupport,                                                                                // 16013
        top: 0,                                                                                                        // 16014
        'z-index': 2                                                                                                   // 16015
      });                                                                                                              // 16016
    } else {                                                                                                           // 16017
      var $$sticky = contentCtrl.$element.data('$$sticky');                                                            // 16018
      if (!$$sticky) {                                                                                                 // 16019
        $$sticky = setupSticky(contentCtrl);                                                                           // 16020
        contentCtrl.$element.data('$$sticky', $$sticky);                                                               // 16021
      }                                                                                                                // 16022
                                                                                                                       // 16023
      // Compile our cloned element, when cloned in this service, into the given scope.                                // 16024
      var cloneElement = stickyClone || $compile(element.clone())(scope);                                              // 16025
                                                                                                                       // 16026
      var deregister = $$sticky.add(element, cloneElement);                                                            // 16027
      scope.$on('$destroy', deregister);                                                                               // 16028
    }                                                                                                                  // 16029
  };                                                                                                                   // 16030
                                                                                                                       // 16031
  function setupSticky(contentCtrl) {                                                                                  // 16032
    var contentEl = contentCtrl.$element;                                                                              // 16033
                                                                                                                       // 16034
    // Refresh elements is very expensive, so we use the debounced                                                     // 16035
    // version when possible.                                                                                          // 16036
    var debouncedRefreshElements = $$rAF.throttle(refreshElements);                                                    // 16037
                                                                                                                       // 16038
    // setupAugmentedScrollEvents gives us `$scrollstart` and `$scroll`,                                               // 16039
    // more reliable than `scroll` on android.                                                                         // 16040
    setupAugmentedScrollEvents(contentEl);                                                                             // 16041
    contentEl.on('$scrollstart', debouncedRefreshElements);                                                            // 16042
    contentEl.on('$scroll', onScroll);                                                                                 // 16043
                                                                                                                       // 16044
    var self;                                                                                                          // 16045
    return self = {                                                                                                    // 16046
      prev: null,                                                                                                      // 16047
      current: null, //the currently stickied item                                                                     // 16048
      next: null,                                                                                                      // 16049
      items: [],                                                                                                       // 16050
      add: add,                                                                                                        // 16051
      refreshElements: refreshElements                                                                                 // 16052
    };                                                                                                                 // 16053
                                                                                                                       // 16054
    /***************                                                                                                   // 16055
     * Public                                                                                                          // 16056
     ***************/                                                                                                  // 16057
    // Add an element and its sticky clone to this content's sticky collection                                         // 16058
    function add(element, stickyClone) {                                                                               // 16059
      stickyClone.addClass('md-sticky-clone');                                                                         // 16060
                                                                                                                       // 16061
      var item = {                                                                                                     // 16062
        element: element,                                                                                              // 16063
        clone: stickyClone                                                                                             // 16064
      };                                                                                                               // 16065
      self.items.push(item);                                                                                           // 16066
                                                                                                                       // 16067
      $mdUtil.nextTick(function() {                                                                                    // 16068
        contentEl.prepend(item.clone);                                                                                 // 16069
      });                                                                                                              // 16070
                                                                                                                       // 16071
      debouncedRefreshElements();                                                                                      // 16072
                                                                                                                       // 16073
      return function remove() {                                                                                       // 16074
        self.items.forEach(function(item, index) {                                                                     // 16075
          if (item.element[0] === element[0]) {                                                                        // 16076
            self.items.splice(index, 1);                                                                               // 16077
            item.clone.remove();                                                                                       // 16078
          }                                                                                                            // 16079
        });                                                                                                            // 16080
        debouncedRefreshElements();                                                                                    // 16081
      };                                                                                                               // 16082
    }                                                                                                                  // 16083
                                                                                                                       // 16084
    function refreshElements() {                                                                                       // 16085
      // Sort our collection of elements by their current position in the DOM.                                         // 16086
      // We need to do this because our elements' order of being added may not                                         // 16087
      // be the same as their order of display.                                                                        // 16088
      self.items.forEach(refreshPosition);                                                                             // 16089
      self.items = self.items.sort(function(a, b) {                                                                    // 16090
        return a.top < b.top ? -1 : 1;                                                                                 // 16091
      });                                                                                                              // 16092
                                                                                                                       // 16093
      // Find which item in the list should be active,                                                                 // 16094
      // based upon the content's current scroll position                                                              // 16095
      var item;                                                                                                        // 16096
      var currentScrollTop = contentEl.prop('scrollTop');                                                              // 16097
      for (var i = self.items.length - 1; i >= 0; i--) {                                                               // 16098
        if (currentScrollTop > self.items[i].top) {                                                                    // 16099
          item = self.items[i];                                                                                        // 16100
          break;                                                                                                       // 16101
        }                                                                                                              // 16102
      }                                                                                                                // 16103
      setCurrentItem(item);                                                                                            // 16104
    }                                                                                                                  // 16105
                                                                                                                       // 16106
    /***************                                                                                                   // 16107
     * Private                                                                                                         // 16108
     ***************/                                                                                                  // 16109
                                                                                                                       // 16110
    // Find the `top` of an item relative to the content element,                                                      // 16111
    // and also the height.                                                                                            // 16112
    function refreshPosition(item) {                                                                                   // 16113
      // Find the top of an item by adding to the offsetHeight until we reach the                                      // 16114
      // content element.                                                                                              // 16115
      var current = item.element[0];                                                                                   // 16116
      item.top = 0;                                                                                                    // 16117
      item.left = 0;                                                                                                   // 16118
      while (current && current !== contentEl[0]) {                                                                    // 16119
        item.top += current.offsetTop;                                                                                 // 16120
        item.left += current.offsetLeft;                                                                               // 16121
        if ( current.offsetParent ){                                                                                   // 16122
          item.right += current.offsetParent.offsetWidth - current.offsetWidth - current.offsetLeft; //Compute offsetRight
        }                                                                                                              // 16124
        current = current.offsetParent;                                                                                // 16125
      }                                                                                                                // 16126
      item.height = item.element.prop('offsetHeight');                                                                 // 16127
      item.clone.css('margin-left', item.left + 'px');                                                                 // 16128
      if ($mdUtil.floatingScrollbars()) {                                                                              // 16129
        item.clone.css('margin-right', '0');                                                                           // 16130
      }                                                                                                                // 16131
    }                                                                                                                  // 16132
                                                                                                                       // 16133
    // As we scroll, push in and select the correct sticky element.                                                    // 16134
    function onScroll() {                                                                                              // 16135
      var scrollTop = contentEl.prop('scrollTop');                                                                     // 16136
      var isScrollingDown = scrollTop > (onScroll.prevScrollTop || 0);                                                 // 16137
                                                                                                                       // 16138
      // Store the previous scroll so we know which direction we are scrolling                                         // 16139
      onScroll.prevScrollTop = scrollTop;                                                                              // 16140
                                                                                                                       // 16141
      //                                                                                                               // 16142
      // AT TOP (not scrolling)                                                                                        // 16143
      //                                                                                                               // 16144
      if (scrollTop === 0) {                                                                                           // 16145
        // If we're at the top, just clear the current item and return                                                 // 16146
        setCurrentItem(null);                                                                                          // 16147
        return;                                                                                                        // 16148
      }                                                                                                                // 16149
                                                                                                                       // 16150
      //                                                                                                               // 16151
      // SCROLLING DOWN (going towards the next item)                                                                  // 16152
      //                                                                                                               // 16153
      if (isScrollingDown) {                                                                                           // 16154
                                                                                                                       // 16155
        // If we've scrolled down past the next item's position, sticky it and return                                  // 16156
        if (self.next && self.next.top <= scrollTop) {                                                                 // 16157
          setCurrentItem(self.next);                                                                                   // 16158
          return;                                                                                                      // 16159
        }                                                                                                              // 16160
                                                                                                                       // 16161
        // If the next item is close to the current one, push the current one up out of the way                        // 16162
        if (self.current && self.next && self.next.top - scrollTop <= self.next.height) {                              // 16163
          translate(self.current, scrollTop + (self.next.top - self.next.height - scrollTop));                         // 16164
          return;                                                                                                      // 16165
        }                                                                                                              // 16166
      }                                                                                                                // 16167
                                                                                                                       // 16168
      //                                                                                                               // 16169
      // SCROLLING UP (not at the top & not scrolling down; must be scrolling up)                                      // 16170
      //                                                                                                               // 16171
      if (!isScrollingDown) {                                                                                          // 16172
                                                                                                                       // 16173
        // If we've scrolled up past the previous item's position, sticky it and return                                // 16174
        if (self.current && self.prev && scrollTop < self.current.top) {                                               // 16175
          setCurrentItem(self.prev);                                                                                   // 16176
          return;                                                                                                      // 16177
        }                                                                                                              // 16178
                                                                                                                       // 16179
        // If the next item is close to the current one, pull the current one down into view                           // 16180
        if (self.next && self.current && (scrollTop >= (self.next.top - self.current.height))) {                       // 16181
          translate(self.current, scrollTop + (self.next.top - scrollTop - self.current.height));                      // 16182
          return;                                                                                                      // 16183
        }                                                                                                              // 16184
      }                                                                                                                // 16185
                                                                                                                       // 16186
      //                                                                                                               // 16187
      // Otherwise, just move the current item to the proper place (scrolling up or down)                              // 16188
      //                                                                                                               // 16189
      if (self.current) {                                                                                              // 16190
        translate(self.current, scrollTop);                                                                            // 16191
      }                                                                                                                // 16192
    }                                                                                                                  // 16193
                                                                                                                       // 16194
    function setCurrentItem(item) {                                                                                    // 16195
      if (self.current === item) return;                                                                               // 16196
      // Deactivate currently active item                                                                              // 16197
      if (self.current) {                                                                                              // 16198
        translate(self.current, null);                                                                                 // 16199
        setStickyState(self.current, null);                                                                            // 16200
      }                                                                                                                // 16201
                                                                                                                       // 16202
      // Activate new item if given                                                                                    // 16203
      if (item) {                                                                                                      // 16204
        setStickyState(item, 'active');                                                                                // 16205
      }                                                                                                                // 16206
                                                                                                                       // 16207
      self.current = item;                                                                                             // 16208
      var index = self.items.indexOf(item);                                                                            // 16209
      // If index === -1, index + 1 = 0. It works out.                                                                 // 16210
      self.next = self.items[index + 1];                                                                               // 16211
      self.prev = self.items[index - 1];                                                                               // 16212
      setStickyState(self.next, 'next');                                                                               // 16213
      setStickyState(self.prev, 'prev');                                                                               // 16214
    }                                                                                                                  // 16215
                                                                                                                       // 16216
    function setStickyState(item, state) {                                                                             // 16217
      if (!item || item.state === state) return;                                                                       // 16218
      if (item.state) {                                                                                                // 16219
        item.clone.attr('sticky-prev-state', item.state);                                                              // 16220
        item.element.attr('sticky-prev-state', item.state);                                                            // 16221
      }                                                                                                                // 16222
      item.clone.attr('sticky-state', state);                                                                          // 16223
      item.element.attr('sticky-state', state);                                                                        // 16224
      item.state = state;                                                                                              // 16225
    }                                                                                                                  // 16226
                                                                                                                       // 16227
    function translate(item, amount) {                                                                                 // 16228
      if (!item) return;                                                                                               // 16229
      if (amount === null || amount === undefined) {                                                                   // 16230
        if (item.translateY) {                                                                                         // 16231
          item.translateY = null;                                                                                      // 16232
          item.clone.css($mdConstant.CSS.TRANSFORM, '');                                                               // 16233
        }                                                                                                              // 16234
      } else {                                                                                                         // 16235
        item.translateY = amount;                                                                                      // 16236
        item.clone.css(                                                                                                // 16237
          $mdConstant.CSS.TRANSFORM,                                                                                   // 16238
          'translate3d(' + item.left + 'px,' + amount + 'px,0)'                                                        // 16239
        );                                                                                                             // 16240
      }                                                                                                                // 16241
    }                                                                                                                  // 16242
  }                                                                                                                    // 16243
                                                                                                                       // 16244
  // Function to check for browser sticky support                                                                      // 16245
  function checkStickySupport($el) {                                                                                   // 16246
    var stickyProp;                                                                                                    // 16247
    var testEl = angular.element('<div>');                                                                             // 16248
    $document[0].body.appendChild(testEl[0]);                                                                          // 16249
                                                                                                                       // 16250
    var stickyProps = ['sticky', '-webkit-sticky'];                                                                    // 16251
    for (var i = 0; i < stickyProps.length; ++i) {                                                                     // 16252
      testEl.css({position: stickyProps[i], top: 0, 'z-index': 2});                                                    // 16253
      if (testEl.css('position') == stickyProps[i]) {                                                                  // 16254
        stickyProp = stickyProps[i];                                                                                   // 16255
        break;                                                                                                         // 16256
      }                                                                                                                // 16257
    }                                                                                                                  // 16258
    testEl.remove();                                                                                                   // 16259
    return stickyProp;                                                                                                 // 16260
  }                                                                                                                    // 16261
                                                                                                                       // 16262
  // Android 4.4 don't accurately give scroll events.                                                                  // 16263
  // To fix this problem, we setup a fake scroll event. We say:                                                        // 16264
  // > If a scroll or touchmove event has happened in the last DELAY milliseconds,                                     // 16265
  //   then send a `$scroll` event every animationFrame.                                                               // 16266
  // Additionally, we add $scrollstart and $scrollend events.                                                          // 16267
  function setupAugmentedScrollEvents(element) {                                                                       // 16268
    var SCROLL_END_DELAY = 200;                                                                                        // 16269
    var isScrolling;                                                                                                   // 16270
    var lastScrollTime;                                                                                                // 16271
    element.on('scroll touchmove', function() {                                                                        // 16272
      if (!isScrolling) {                                                                                              // 16273
        isScrolling = true;                                                                                            // 16274
        $$rAF.throttle(loopScrollEvent);                                                                               // 16275
        element.triggerHandler('$scrollstart');                                                                        // 16276
      }                                                                                                                // 16277
      element.triggerHandler('$scroll');                                                                               // 16278
      lastScrollTime = +$mdUtil.now();                                                                                 // 16279
    });                                                                                                                // 16280
                                                                                                                       // 16281
    function loopScrollEvent() {                                                                                       // 16282
      if (+$mdUtil.now() - lastScrollTime > SCROLL_END_DELAY) {                                                        // 16283
        isScrolling = false;                                                                                           // 16284
        element.triggerHandler('$scrollend');                                                                          // 16285
      } else {                                                                                                         // 16286
        element.triggerHandler('$scroll');                                                                             // 16287
        $$rAF.throttle(loopScrollEvent);                                                                               // 16288
      }                                                                                                                // 16289
    }                                                                                                                  // 16290
  }                                                                                                                    // 16291
                                                                                                                       // 16292
}                                                                                                                      // 16293
MdSticky.$inject = ["$document", "$mdConstant", "$$rAF", "$mdUtil", "$compile"];                                       // 16294
                                                                                                                       // 16295
})();                                                                                                                  // 16296
(function(){                                                                                                           // 16297
"use strict";                                                                                                          // 16298
                                                                                                                       // 16299
/**                                                                                                                    // 16300
 * @ngdoc module                                                                                                       // 16301
 * @name material.components.subheader                                                                                 // 16302
 * @description                                                                                                        // 16303
 * SubHeader module                                                                                                    // 16304
 *                                                                                                                     // 16305
 *  Subheaders are special list tiles that delineate distinct sections of a                                            // 16306
 *  list or grid list and are typically related to the current filtering or                                            // 16307
 *  sorting criteria. Subheader tiles are either displayed inline with tiles or                                        // 16308
 *  can be associated with content, for example, in an adjacent column.                                                // 16309
 *                                                                                                                     // 16310
 *  Upon scrolling, subheaders remain pinned to the top of the screen and remain                                       // 16311
 *  pinned until pushed on or off screen by the next subheader. @see [Material                                         // 16312
 *  Design Specifications](https://www.google.com/design/spec/components/subheaders.html)                              // 16313
 *                                                                                                                     // 16314
 *  > To improve the visual grouping of content, use the system color for your subheaders.                             // 16315
 *                                                                                                                     // 16316
 */                                                                                                                    // 16317
angular                                                                                                                // 16318
  .module('material.components.subheader', [                                                                           // 16319
    'material.core',                                                                                                   // 16320
    'material.components.sticky'                                                                                       // 16321
  ])                                                                                                                   // 16322
  .directive('mdSubheader', MdSubheaderDirective);                                                                     // 16323
                                                                                                                       // 16324
/**                                                                                                                    // 16325
 * @ngdoc directive                                                                                                    // 16326
 * @name mdSubheader                                                                                                   // 16327
 * @module material.components.subheader                                                                               // 16328
 *                                                                                                                     // 16329
 * @restrict E                                                                                                         // 16330
 *                                                                                                                     // 16331
 * @description                                                                                                        // 16332
 * The `<md-subheader>` directive is a subheader for a section. By default it is sticky.                               // 16333
 * You can make it not sticky by applying the `md-no-sticky` class to the subheader.                                   // 16334
 *                                                                                                                     // 16335
 *                                                                                                                     // 16336
 * @usage                                                                                                              // 16337
 * <hljs lang="html">                                                                                                  // 16338
 * <md-subheader>Online Friends</md-subheader>                                                                         // 16339
 * </hljs>                                                                                                             // 16340
 */                                                                                                                    // 16341
                                                                                                                       // 16342
function MdSubheaderDirective($mdSticky, $compile, $mdTheming, $mdUtil) {                                              // 16343
  return {                                                                                                             // 16344
    restrict: 'E',                                                                                                     // 16345
    replace: true,                                                                                                     // 16346
    transclude: true,                                                                                                  // 16347
    template: (                                                                                                        // 16348
    '<div class="md-subheader">' +                                                                                     // 16349
    '  <div class="md-subheader-inner">' +                                                                             // 16350
    '    <span class="md-subheader-content"></span>' +                                                                 // 16351
    '  </div>' +                                                                                                       // 16352
    '</div>'                                                                                                           // 16353
    ),                                                                                                                 // 16354
    link: function postLink(scope, element, attr, controllers, transclude) {                                           // 16355
      $mdTheming(element);                                                                                             // 16356
      var outerHTML = element[0].outerHTML;                                                                            // 16357
                                                                                                                       // 16358
      function getContent(el) {                                                                                        // 16359
        return angular.element(el[0].querySelector('.md-subheader-content'));                                          // 16360
      }                                                                                                                // 16361
                                                                                                                       // 16362
      // Transclude the user-given contents of the subheader                                                           // 16363
      // the conventional way.                                                                                         // 16364
      transclude(scope, function(clone) {                                                                              // 16365
        getContent(element).append(clone);                                                                             // 16366
      });                                                                                                              // 16367
                                                                                                                       // 16368
      // Create another clone, that uses the outer and inner contents                                                  // 16369
      // of the element, that will be 'stickied' as the user scrolls.                                                  // 16370
      if (!element.hasClass('md-no-sticky')) {                                                                         // 16371
        transclude(scope, function(clone) {                                                                            // 16372
          // If the user adds an ng-if or ng-repeat directly to the md-subheader element, the                          // 16373
          // compiled clone below will only be a comment tag (since they replace their elements with                   // 16374
          // a comment) which cannot be properly passed to the $mdSticky; so we wrap it in our own                     // 16375
          // DIV to ensure we have something $mdSticky can use                                                         // 16376
          var wrapperHtml = '<div class="md-subheader-wrapper">' + outerHTML + '</div>';                               // 16377
          var stickyClone = $compile(wrapperHtml)(scope);                                                              // 16378
                                                                                                                       // 16379
          // Append the sticky                                                                                         // 16380
          $mdSticky(scope, element, stickyClone);                                                                      // 16381
                                                                                                                       // 16382
          // Delay initialization until after any `ng-if`/`ng-repeat`/etc has finished before                          // 16383
          // attempting to create the clone                                                                            // 16384
          $mdUtil.nextTick(function() {                                                                                // 16385
            getContent(stickyClone).append(clone);                                                                     // 16386
          });                                                                                                          // 16387
        });                                                                                                            // 16388
      }                                                                                                                // 16389
    }                                                                                                                  // 16390
  }                                                                                                                    // 16391
}                                                                                                                      // 16392
MdSubheaderDirective.$inject = ["$mdSticky", "$compile", "$mdTheming", "$mdUtil"];                                     // 16393
                                                                                                                       // 16394
})();                                                                                                                  // 16395
(function(){                                                                                                           // 16396
"use strict";                                                                                                          // 16397
                                                                                                                       // 16398
/**                                                                                                                    // 16399
 * @ngdoc module                                                                                                       // 16400
 * @name material.components.swipe                                                                                     // 16401
 * @description Swipe module!                                                                                          // 16402
 */                                                                                                                    // 16403
/**                                                                                                                    // 16404
 * @ngdoc directive                                                                                                    // 16405
 * @module material.components.swipe                                                                                   // 16406
 * @name mdSwipeLeft                                                                                                   // 16407
 *                                                                                                                     // 16408
 * @restrict A                                                                                                         // 16409
 *                                                                                                                     // 16410
 * @description                                                                                                        // 16411
 * The md-swipe-left directive allows you to specify custom behavior when an element is swiped                         // 16412
 * left.                                                                                                               // 16413
 *                                                                                                                     // 16414
 * @usage                                                                                                              // 16415
 * <hljs lang="html">                                                                                                  // 16416
 * <div md-swipe-left="onSwipeLeft()">Swipe me left!</div>                                                             // 16417
 * </hljs>                                                                                                             // 16418
 */                                                                                                                    // 16419
/**                                                                                                                    // 16420
 * @ngdoc directive                                                                                                    // 16421
 * @module material.components.swipe                                                                                   // 16422
 * @name mdSwipeRight                                                                                                  // 16423
 *                                                                                                                     // 16424
 * @restrict A                                                                                                         // 16425
 *                                                                                                                     // 16426
 * @description                                                                                                        // 16427
 * The md-swipe-right directive allows you to specify custom behavior when an element is swiped                        // 16428
 * right.                                                                                                              // 16429
 *                                                                                                                     // 16430
 * @usage                                                                                                              // 16431
 * <hljs lang="html">                                                                                                  // 16432
 * <div md-swipe-right="onSwipeRight()">Swipe me right!</div>                                                          // 16433
 * </hljs>                                                                                                             // 16434
 */                                                                                                                    // 16435
/**                                                                                                                    // 16436
 * @ngdoc directive                                                                                                    // 16437
 * @module material.components.swipe                                                                                   // 16438
 * @name mdSwipeUp                                                                                                     // 16439
 *                                                                                                                     // 16440
 * @restrict A                                                                                                         // 16441
 *                                                                                                                     // 16442
 * @description                                                                                                        // 16443
 * The md-swipe-up directive allows you to specify custom behavior when an element is swiped                           // 16444
 * up.                                                                                                                 // 16445
 *                                                                                                                     // 16446
 * @usage                                                                                                              // 16447
 * <hljs lang="html">                                                                                                  // 16448
 * <div md-swipe-up="onSwipeUp()">Swipe me up!</div>                                                                   // 16449
 * </hljs>                                                                                                             // 16450
 */                                                                                                                    // 16451
/**                                                                                                                    // 16452
 * @ngdoc directive                                                                                                    // 16453
 * @module material.components.swipe                                                                                   // 16454
 * @name mdSwipeDown                                                                                                   // 16455
 *                                                                                                                     // 16456
 * @restrict A                                                                                                         // 16457
 *                                                                                                                     // 16458
 * @description                                                                                                        // 16459
 * The md-swipe-down directive allows you to specify custom behavior when an element is swiped                         // 16460
 * down.                                                                                                               // 16461
 *                                                                                                                     // 16462
 * @usage                                                                                                              // 16463
 * <hljs lang="html">                                                                                                  // 16464
 * <div md-swipe-down="onSwipDown()">Swipe me down!</div>                                                              // 16465
 * </hljs>                                                                                                             // 16466
 */                                                                                                                    // 16467
                                                                                                                       // 16468
angular.module('material.components.swipe', ['material.core'])                                                         // 16469
    .directive('mdSwipeLeft', getDirective('SwipeLeft'))                                                               // 16470
    .directive('mdSwipeRight', getDirective('SwipeRight'))                                                             // 16471
    .directive('mdSwipeUp', getDirective('SwipeUp'))                                                                   // 16472
    .directive('mdSwipeDown', getDirective('SwipeDown'));                                                              // 16473
                                                                                                                       // 16474
function getDirective(name) {                                                                                          // 16475
  var directiveName = 'md' + name;                                                                                     // 16476
  var eventName = '$md.' + name.toLowerCase();                                                                         // 16477
                                                                                                                       // 16478
    DirectiveFactory.$inject = ["$parse"];                                                                             // 16479
  return DirectiveFactory;                                                                                             // 16480
                                                                                                                       // 16481
  /* @ngInject */                                                                                                      // 16482
  function DirectiveFactory($parse) {                                                                                  // 16483
      return { restrict: 'A', link: postLink };                                                                        // 16484
      function postLink(scope, element, attr) {                                                                        // 16485
        var fn = $parse(attr[directiveName]);                                                                          // 16486
        element.on(eventName, function(ev) {                                                                           // 16487
          scope.$apply(function() { fn(scope, { $event: ev }); });                                                     // 16488
        });                                                                                                            // 16489
      }                                                                                                                // 16490
    }                                                                                                                  // 16491
}                                                                                                                      // 16492
                                                                                                                       // 16493
                                                                                                                       // 16494
                                                                                                                       // 16495
})();                                                                                                                  // 16496
(function(){                                                                                                           // 16497
"use strict";                                                                                                          // 16498
                                                                                                                       // 16499
/**                                                                                                                    // 16500
 * @private                                                                                                            // 16501
 * @ngdoc module                                                                                                       // 16502
 * @name material.components.switch                                                                                    // 16503
 */                                                                                                                    // 16504
                                                                                                                       // 16505
angular.module('material.components.switch', [                                                                         // 16506
  'material.core',                                                                                                     // 16507
  'material.components.checkbox'                                                                                       // 16508
])                                                                                                                     // 16509
  .directive('mdSwitch', MdSwitch);                                                                                    // 16510
                                                                                                                       // 16511
/**                                                                                                                    // 16512
 * @private                                                                                                            // 16513
 * @ngdoc directive                                                                                                    // 16514
 * @module material.components.switch                                                                                  // 16515
 * @name mdSwitch                                                                                                      // 16516
 * @restrict E                                                                                                         // 16517
 *                                                                                                                     // 16518
 * The switch directive is used very much like the normal [angular checkbox](https://docs.angularjs.org/api/ng/input/input%5Bcheckbox%5D).
 *                                                                                                                     // 16520
 * As per the [material design spec](http://www.google.com/design/spec/style/color.html#color-ui-color-application)    // 16521
 * the switch is in the accent color by default. The primary color palette may be used with                            // 16522
 * the `md-primary` class.                                                                                             // 16523
 *                                                                                                                     // 16524
 * @param {string} ng-model Assignable angular expression to data-bind to.                                             // 16525
 * @param {string=} name Property name of the form under which the control is published.                               // 16526
 * @param {expression=} ng-true-value The value to which the expression should be set when selected.                   // 16527
 * @param {expression=} ng-false-value The value to which the expression should be set when not selected.              // 16528
 * @param {string=} ng-change Angular expression to be executed when input changes due to user interaction with the input element.
 * @param {expression=} ng-disabled En/Disable based on the expression.                                                // 16530
 * @param {boolean=} md-no-ink Use of attribute indicates use of ripple ink effects.                                   // 16531
 * @param {string=} aria-label Publish the button label used by screen-readers for accessibility. Defaults to the switch's text.
 *                                                                                                                     // 16533
 * @usage                                                                                                              // 16534
 * <hljs lang="html">                                                                                                  // 16535
 * <md-switch ng-model="isActive" aria-label="Finished?">                                                              // 16536
 *   Finished ?                                                                                                        // 16537
 * </md-switch>                                                                                                        // 16538
 *                                                                                                                     // 16539
 * <md-switch md-no-ink ng-model="hasInk" aria-label="No Ink Effects">                                                 // 16540
 *   No Ink Effects                                                                                                    // 16541
 * </md-switch>                                                                                                        // 16542
 *                                                                                                                     // 16543
 * <md-switch ng-disabled="true" ng-model="isDisabled" aria-label="Disabled">                                          // 16544
 *   Disabled                                                                                                          // 16545
 * </md-switch>                                                                                                        // 16546
 *                                                                                                                     // 16547
 * </hljs>                                                                                                             // 16548
 */                                                                                                                    // 16549
function MdSwitch(mdCheckboxDirective, $mdUtil, $mdConstant, $parse, $$rAF, $mdGesture) {                              // 16550
  var checkboxDirective = mdCheckboxDirective[0];                                                                      // 16551
                                                                                                                       // 16552
  return {                                                                                                             // 16553
    restrict: 'E',                                                                                                     // 16554
    priority: 210, // Run before ngAria                                                                                // 16555
    transclude: true,                                                                                                  // 16556
    template:                                                                                                          // 16557
      '<div class="md-container">' +                                                                                   // 16558
        '<div class="md-bar"></div>' +                                                                                 // 16559
        '<div class="md-thumb-container">' +                                                                           // 16560
          '<div class="md-thumb" md-ink-ripple md-ink-ripple-checkbox></div>' +                                        // 16561
        '</div>'+                                                                                                      // 16562
      '</div>' +                                                                                                       // 16563
      '<div ng-transclude class="md-label"></div>',                                                                    // 16564
    require: '?ngModel',                                                                                               // 16565
    compile: mdSwitchCompile                                                                                           // 16566
  };                                                                                                                   // 16567
                                                                                                                       // 16568
  function mdSwitchCompile(element, attr) {                                                                            // 16569
    var checkboxLink = checkboxDirective.compile(element, attr);                                                       // 16570
    // No transition on initial load.                                                                                  // 16571
    element.addClass('md-dragging');                                                                                   // 16572
                                                                                                                       // 16573
    return function (scope, element, attr, ngModel) {                                                                  // 16574
      ngModel = ngModel || $mdUtil.fakeNgModel();                                                                      // 16575
                                                                                                                       // 16576
      var disabledGetter = null;                                                                                       // 16577
      if (attr.disabled != null) {                                                                                     // 16578
        disabledGetter = function() { return true; };                                                                  // 16579
      } else if (attr.ngDisabled) {                                                                                    // 16580
        disabledGetter = $parse(attr.ngDisabled);                                                                      // 16581
      }                                                                                                                // 16582
                                                                                                                       // 16583
      var thumbContainer = angular.element(element[0].querySelector('.md-thumb-container'));                           // 16584
      var switchContainer = angular.element(element[0].querySelector('.md-container'));                                // 16585
                                                                                                                       // 16586
      // no transition on initial load                                                                                 // 16587
      $$rAF(function() {                                                                                               // 16588
        element.removeClass('md-dragging');                                                                            // 16589
      });                                                                                                              // 16590
                                                                                                                       // 16591
      checkboxLink(scope, element, attr, ngModel);                                                                     // 16592
                                                                                                                       // 16593
      if (disabledGetter) {                                                                                            // 16594
        scope.$watch(disabledGetter, function(isDisabled) {                                                            // 16595
          element.attr('tabindex', isDisabled ? -1 : 0);                                                               // 16596
        });                                                                                                            // 16597
      }                                                                                                                // 16598
                                                                                                                       // 16599
      // These events are triggered by setup drag                                                                      // 16600
      $mdGesture.register(switchContainer, 'drag');                                                                    // 16601
      switchContainer                                                                                                  // 16602
        .on('$md.dragstart', onDragStart)                                                                              // 16603
        .on('$md.drag', onDrag)                                                                                        // 16604
        .on('$md.dragend', onDragEnd);                                                                                 // 16605
                                                                                                                       // 16606
      var drag;                                                                                                        // 16607
      function onDragStart(ev) {                                                                                       // 16608
        // Don't go if the switch is disabled.                                                                         // 16609
        if (disabledGetter && disabledGetter(scope)) return;                                                           // 16610
        ev.stopPropagation();                                                                                          // 16611
                                                                                                                       // 16612
        element.addClass('md-dragging');                                                                               // 16613
        drag = {width: thumbContainer.prop('offsetWidth')};                                                            // 16614
        element.removeClass('transition');                                                                             // 16615
      }                                                                                                                // 16616
                                                                                                                       // 16617
      function onDrag(ev) {                                                                                            // 16618
        if (!drag) return;                                                                                             // 16619
        ev.stopPropagation();                                                                                          // 16620
        ev.srcEvent && ev.srcEvent.preventDefault();                                                                   // 16621
                                                                                                                       // 16622
        var percent = ev.pointer.distanceX / drag.width;                                                               // 16623
                                                                                                                       // 16624
        //if checked, start from right. else, start from left                                                          // 16625
        var translate = ngModel.$viewValue ?  1 + percent : percent;                                                   // 16626
        // Make sure the switch stays inside its bounds, 0-1%                                                          // 16627
        translate = Math.max(0, Math.min(1, translate));                                                               // 16628
                                                                                                                       // 16629
        thumbContainer.css($mdConstant.CSS.TRANSFORM, 'translate3d(' + (100*translate) + '%,0,0)');                    // 16630
        drag.translate = translate;                                                                                    // 16631
      }                                                                                                                // 16632
                                                                                                                       // 16633
      function onDragEnd(ev) {                                                                                         // 16634
        if (!drag) return;                                                                                             // 16635
        ev.stopPropagation();                                                                                          // 16636
                                                                                                                       // 16637
        element.removeClass('md-dragging');                                                                            // 16638
        thumbContainer.css($mdConstant.CSS.TRANSFORM, '');                                                             // 16639
                                                                                                                       // 16640
        // We changed if there is no distance (this is a click a click),                                               // 16641
        // or if the drag distance is >50% of the total.                                                               // 16642
        var isChanged = ngModel.$viewValue ? drag.translate > 0.5 : drag.translate < 0.5;                              // 16643
        if (isChanged) {                                                                                               // 16644
          applyModelValue(!ngModel.$viewValue);                                                                        // 16645
        }                                                                                                              // 16646
        drag = null;                                                                                                   // 16647
      }                                                                                                                // 16648
                                                                                                                       // 16649
      function applyModelValue(newValue) {                                                                             // 16650
        scope.$apply(function() {                                                                                      // 16651
          ngModel.$setViewValue(newValue);                                                                             // 16652
          ngModel.$render();                                                                                           // 16653
        });                                                                                                            // 16654
      }                                                                                                                // 16655
                                                                                                                       // 16656
    };                                                                                                                 // 16657
  }                                                                                                                    // 16658
                                                                                                                       // 16659
                                                                                                                       // 16660
}                                                                                                                      // 16661
MdSwitch.$inject = ["mdCheckboxDirective", "$mdUtil", "$mdConstant", "$parse", "$$rAF", "$mdGesture"];                 // 16662
                                                                                                                       // 16663
})();                                                                                                                  // 16664
(function(){                                                                                                           // 16665
"use strict";                                                                                                          // 16666
                                                                                                                       // 16667
/**                                                                                                                    // 16668
  * @ngdoc module                                                                                                      // 16669
  * @name material.components.toast                                                                                    // 16670
  * @description                                                                                                       // 16671
  * Toast                                                                                                              // 16672
  */                                                                                                                   // 16673
angular.module('material.components.toast', [                                                                          // 16674
  'material.core',                                                                                                     // 16675
  'material.components.button'                                                                                         // 16676
])                                                                                                                     // 16677
  .directive('mdToast', MdToastDirective)                                                                              // 16678
  .provider('$mdToast', MdToastProvider);                                                                              // 16679
                                                                                                                       // 16680
/* @ngInject */                                                                                                        // 16681
function MdToastDirective($mdToast) {                                                                                  // 16682
  return {                                                                                                             // 16683
    restrict: 'E',                                                                                                     // 16684
    link: function postLink(scope, element, attr) {                                                                    // 16685
      // When navigation force destroys an interimElement, then                                                        // 16686
      // listen and $destroy() that interim instance...                                                                // 16687
      scope.$on('$destroy', function() {                                                                               // 16688
        $mdToast.destroy();                                                                                            // 16689
      });                                                                                                              // 16690
    }                                                                                                                  // 16691
  };                                                                                                                   // 16692
}                                                                                                                      // 16693
MdToastDirective.$inject = ["$mdToast"];                                                                               // 16694
                                                                                                                       // 16695
/**                                                                                                                    // 16696
  * @ngdoc service                                                                                                     // 16697
  * @name $mdToast                                                                                                     // 16698
  * @module material.components.toast                                                                                  // 16699
  *                                                                                                                    // 16700
  * @description                                                                                                       // 16701
  * `$mdToast` is a service to build a toast notification on any position                                              // 16702
  * on the screen with an optional duration, and provides a simple promise API.                                        // 16703
  *                                                                                                                    // 16704
  *                                                                                                                    // 16705
  * ## Restrictions on custom toasts                                                                                   // 16706
  * - The toast's template must have an outer `<md-toast>` element.                                                    // 16707
  * - For a toast action, use element with class `md-action`.                                                          // 16708
  * - Add the class `md-capsule` for curved corners.                                                                   // 16709
  *                                                                                                                    // 16710
  * ## Parent container notes                                                                                          // 16711
  *                                                                                                                    // 16712
  * The toast is positioned using absolute positioning relative to it's first non-static parent                        // 16713
  * container. Thus, if the requested parent container uses static positioning, we will temporarily                    // 16714
  * set it's positioning to `relative` while the toast is visible and reset it when the toast is                       // 16715
  * hidden.                                                                                                            // 16716
  *                                                                                                                    // 16717
  * Because of this, it is usually best to ensure that the parent container has a fixed height and                     // 16718
  * prevents scrolling by setting the `overflow: hidden;` style. Since the position is based off of                    // 16719
  * the parent's height, the toast may be mispositioned if you allow the parent to scroll.                             // 16720
  *                                                                                                                    // 16721
  * You can, however, have a scrollable element inside of the container; just make sure the                            // 16722
  * container itself does not scroll.                                                                                  // 16723
  *                                                                                                                    // 16724
  * <hljs lang="html">                                                                                                 // 16725
  * <div layout-fill id="toast-container">                                                                             // 16726
  *   <md-content>                                                                                                     // 16727
  *     I can have lots of content and scroll!                                                                         // 16728
  *   </md-content>                                                                                                    // 16729
  * </div>                                                                                                             // 16730
  * </hljs>                                                                                                            // 16731
  *                                                                                                                    // 16732
  * @usage                                                                                                             // 16733
  * <hljs lang="html">                                                                                                 // 16734
  * <div ng-controller="MyController">                                                                                 // 16735
  *   <md-button ng-click="openToast()">                                                                               // 16736
  *     Open a Toast!                                                                                                  // 16737
  *   </md-button>                                                                                                     // 16738
  * </div>                                                                                                             // 16739
  * </hljs>                                                                                                            // 16740
  *                                                                                                                    // 16741
  * <hljs lang="js">                                                                                                   // 16742
  * var app = angular.module('app', ['ngMaterial']);                                                                   // 16743
  * app.controller('MyController', function($scope, $mdToast) {                                                        // 16744
  *   $scope.openToast = function($event) {                                                                            // 16745
  *     $mdToast.show($mdToast.simple().textContent('Hello!'));                                                        // 16746
  *     // Could also do $mdToast.showSimple('Hello');                                                                 // 16747
  *   };                                                                                                               // 16748
  * });                                                                                                                // 16749
  * </hljs>                                                                                                            // 16750
  */                                                                                                                   // 16751
                                                                                                                       // 16752
/**                                                                                                                    // 16753
 * @ngdoc method                                                                                                       // 16754
 * @name $mdToast#showSimple                                                                                           // 16755
 *                                                                                                                     // 16756
 * @param {string} message The message to display inside the toast                                                     // 16757
 * @description                                                                                                        // 16758
 * Convenience method which builds and shows a simple toast.                                                           // 16759
 *                                                                                                                     // 16760
 * @returns {promise} A promise that can be resolved with `$mdToast.hide()` or                                         // 16761
 * rejected with `$mdToast.cancel()`.                                                                                  // 16762
 *                                                                                                                     // 16763
 */                                                                                                                    // 16764
                                                                                                                       // 16765
 /**                                                                                                                   // 16766
  * @ngdoc method                                                                                                      // 16767
  * @name $mdToast#simple                                                                                              // 16768
  *                                                                                                                    // 16769
  * @description                                                                                                       // 16770
  * Builds a preconfigured toast.                                                                                      // 16771
  *                                                                                                                    // 16772
  * @returns {obj} a `$mdToastPreset` with the following chainable configuration methods.                              // 16773
  *                                                                                                                    // 16774
  * _**Note:** These configuration methods are provided in addition to the methods provided by                         // 16775
  *   the `build()` and `show()` methods below._                                                                       // 16776
  *                                                                                                                    // 16777
  * - `.textContent(string)` - Sets the toast content to the specified string.                                         // 16778
  *                                                                                                                    // 16779
  * - `.action(string)` - Adds an action button. If clicked, the promise (returned from `show()`)                      // 16780
  * will resolve with the value `'ok'`; otherwise, it is resolved with `true` after a `hideDelay`                      // 16781
  * timeout.                                                                                                           // 16782
  *                                                                                                                    // 16783
  * - `.highlightAction(boolean)` - Whether or not the action button will have an additional                           // 16784
  * highlight class.                                                                                                   // 16785
  *                                                                                                                    // 16786
  * - `.capsule(boolean)` - Whether or not to add the `md-capsule` class to the toast to provide                       // 16787
  * rounded corners.                                                                                                   // 16788
  *                                                                                                                    // 16789
  * - `.theme(string)` - Sets the theme on the toast to the requested theme. Default is                                // 16790
  * `$mdThemingProvider`'s default.                                                                                    // 16791
  */                                                                                                                   // 16792
                                                                                                                       // 16793
/**                                                                                                                    // 16794
  * @ngdoc method                                                                                                      // 16795
  * @name $mdToast#updateTextContent                                                                                   // 16796
  *                                                                                                                    // 16797
  * @description                                                                                                       // 16798
  * Updates the content of an existing toast. Useful for updating things like counts, etc.                             // 16799
  *                                                                                                                    // 16800
  */                                                                                                                   // 16801
                                                                                                                       // 16802
 /**                                                                                                                   // 16803
  * @ngdoc method                                                                                                      // 16804
  * @name $mdToast#build                                                                                               // 16805
  *                                                                                                                    // 16806
  * @description                                                                                                       // 16807
  * Creates a custom `$mdToastPreset` that you can configure.                                                          // 16808
  *                                                                                                                    // 16809
  * @returns {obj} a `$mdToastPreset` with the chainable configuration methods for shows' options (see below).         // 16810
  */                                                                                                                   // 16811
                                                                                                                       // 16812
 /**                                                                                                                   // 16813
  * @ngdoc method                                                                                                      // 16814
  * @name $mdToast#show                                                                                                // 16815
  *                                                                                                                    // 16816
  * @description Shows the toast.                                                                                      // 16817
  *                                                                                                                    // 16818
  * @param {object} optionsOrPreset Either provide an `$mdToastPreset` returned from `simple()`                        // 16819
  * and `build()`, or an options object with the following properties:                                                 // 16820
  *                                                                                                                    // 16821
  *   - `templateUrl` - `{string=}`: The url of an html template file that will                                        // 16822
  *     be used as the content of the toast. Restrictions: the template must                                           // 16823
  *     have an outer `md-toast` element.                                                                              // 16824
  *   - `template` - `{string=}`: Same as templateUrl, except this is an actual                                        // 16825
  *     template string.                                                                                               // 16826
  *   - `autoWrap` - `{boolean=}`: Whether or not to automatically wrap the template content with a                    // 16827
  *     `<div class="md-toast-content">` if one is not provided. Defaults to true. Can be disabled if you provide a    // 16828
  *     custom toast directive.                                                                                        // 16829
  *   - `scope` - `{object=}`: the scope to link the template / controller to. If none is specified, it will create a new child scope.
  *     This scope will be destroyed when the toast is removed unless `preserveScope` is set to true.                  // 16831
  *   - `preserveScope` - `{boolean=}`: whether to preserve the scope when the element is removed. Default is false    // 16832
  *   - `hideDelay` - `{number=}`: How many milliseconds the toast should stay                                         // 16833
  *     active before automatically closing.  Set to 0 or false to have the toast stay open until                      // 16834
  *     closed manually. Default: 3000.                                                                                // 16835
  *   - `position` - `{string=}`: Where to place the toast. Available: any combination                                 // 16836
  *     of 'bottom', 'left', 'top', 'right'. Default: 'bottom left'.                                                   // 16837
  *   - `controller` - `{string=}`: The controller to associate with this toast.                                       // 16838
  *     The controller will be injected the local `$mdToast.hide( )`, which is a function                              // 16839
  *     used to hide the toast.                                                                                        // 16840
  *   - `locals` - `{string=}`: An object containing key/value pairs. The keys will                                    // 16841
  *     be used as names of values to inject into the controller. For example,                                         // 16842
  *     `locals: {three: 3}` would inject `three` into the controller with the value                                   // 16843
  *     of 3.                                                                                                          // 16844
  *   - `bindToController` - `bool`: bind the locals to the controller, instead of passing them in.                    // 16845
  *   - `resolve` - `{object=}`: Similar to locals, except it takes promises as values                                 // 16846
  *     and the toast will not open until the promises resolve.                                                        // 16847
  *   - `controllerAs` - `{string=}`: An alias to assign the controller to on the scope.                               // 16848
  *   - `parent` - `{element=}`: The element to append the toast to. Defaults to appending                             // 16849
  *     to the root element of the application.                                                                        // 16850
  *                                                                                                                    // 16851
  * @returns {promise} A promise that can be resolved with `$mdToast.hide()` or                                        // 16852
  * rejected with `$mdToast.cancel()`. `$mdToast.hide()` will resolve either with a Boolean                            // 16853
  * value == 'true' or the value passed as an argument to `$mdToast.hide()`.                                           // 16854
  * And `$mdToast.cancel()` will resolve the promise with a Boolean value == 'false'                                   // 16855
  */                                                                                                                   // 16856
                                                                                                                       // 16857
/**                                                                                                                    // 16858
  * @ngdoc method                                                                                                      // 16859
  * @name $mdToast#hide                                                                                                // 16860
  *                                                                                                                    // 16861
  * @description                                                                                                       // 16862
  * Hide an existing toast and resolve the promise returned from `$mdToast.show()`.                                    // 16863
  *                                                                                                                    // 16864
  * @param {*=} response An argument for the resolved promise.                                                         // 16865
  *                                                                                                                    // 16866
  * @returns {promise} a promise that is called when the existing element is removed from the DOM.                     // 16867
  * The promise is resolved with either a Boolean value == 'true' or the value passed as the                           // 16868
  * argument to `.hide()`.                                                                                             // 16869
  *                                                                                                                    // 16870
  */                                                                                                                   // 16871
                                                                                                                       // 16872
/**                                                                                                                    // 16873
  * @ngdoc method                                                                                                      // 16874
  * @name $mdToast#cancel                                                                                              // 16875
  *                                                                                                                    // 16876
  * @description                                                                                                       // 16877
  * `DEPRECATED` - The promise returned from opening a toast is used only to notify about the closing of the toast.    // 16878
  * As such, there isn't any reason to also allow that promise to be rejected,                                         // 16879
  * since it's not clear what the difference between resolve and reject would be.                                      // 16880
  *                                                                                                                    // 16881
  * Hide the existing toast and reject the promise returned from                                                       // 16882
  * `$mdToast.show()`.                                                                                                 // 16883
  *                                                                                                                    // 16884
  * @param {*=} response An argument for the rejected promise.                                                         // 16885
  *                                                                                                                    // 16886
  * @returns {promise} a promise that is called when the existing element is removed from the DOM                      // 16887
  * The promise is resolved with a Boolean value == 'false'.                                                           // 16888
  *                                                                                                                    // 16889
  */                                                                                                                   // 16890
                                                                                                                       // 16891
function MdToastProvider($$interimElementProvider) {                                                                   // 16892
  // Differentiate promise resolves: hide timeout (value == true) and hide action clicks (value == ok).                // 16893
  var ACTION_RESOLVE = 'ok';                                                                                           // 16894
                                                                                                                       // 16895
  var activeToastContent;                                                                                              // 16896
  var $mdToast = $$interimElementProvider('$mdToast')                                                                  // 16897
    .setDefaults({                                                                                                     // 16898
      methods: ['position', 'hideDelay', 'capsule', 'parent' ],                                                        // 16899
      options: toastDefaultOptions                                                                                     // 16900
    })                                                                                                                 // 16901
    .addPreset('simple', {                                                                                             // 16902
      argOption: 'textContent',                                                                                        // 16903
      methods: ['textContent', 'content', 'action', 'highlightAction', 'theme', 'parent'],                             // 16904
      options: /* @ngInject */ ["$mdToast", "$mdTheming", function($mdToast, $mdTheming) {                             // 16905
        var opts = {                                                                                                   // 16906
          template:                                                                                                    // 16907
            '<md-toast md-theme="{{ toast.theme }}" ng-class="{\'md-capsule\': toast.capsule}">' +                     // 16908
            '  <div class="md-toast-content">' +                                                                       // 16909
            '    <span flex role="alert" aria-relevant="all" aria-atomic="true">' +                                    // 16910
            '      {{ toast.content }}' +                                                                              // 16911
            '    </span>' +                                                                                            // 16912
            '    <md-button class="md-action" ng-if="toast.action" ng-click="toast.resolve()" ng-class="{\'md-highlight\': toast.highlightAction}">' +
            '      {{ toast.action }}' +                                                                               // 16914
            '    </md-button>' +                                                                                       // 16915
            '  </div>' +                                                                                               // 16916
            '</md-toast>',                                                                                             // 16917
          controller: /* @ngInject */ ["$scope", function mdToastCtrl($scope) {                                        // 16918
            var self = this;                                                                                           // 16919
            $scope.$watch(function() { return activeToastContent; }, function() {                                      // 16920
              self.content = activeToastContent;                                                                       // 16921
            });                                                                                                        // 16922
            this.resolve = function() {                                                                                // 16923
              $mdToast.hide( ACTION_RESOLVE );                                                                         // 16924
            };                                                                                                         // 16925
          }],                                                                                                          // 16926
          theme: $mdTheming.defaultTheme(),                                                                            // 16927
          controllerAs: 'toast',                                                                                       // 16928
          bindToController: true                                                                                       // 16929
        };                                                                                                             // 16930
        return opts;                                                                                                   // 16931
      }]                                                                                                               // 16932
    })                                                                                                                 // 16933
    .addMethod('updateTextContent', updateTextContent)                                                                 // 16934
    .addMethod('updateContent', updateTextContent);                                                                    // 16935
                                                                                                                       // 16936
    function updateTextContent(newContent) {                                                                           // 16937
      activeToastContent = newContent;                                                                                 // 16938
    }                                                                                                                  // 16939
                                                                                                                       // 16940
  toastDefaultOptions.$inject = ["$animate", "$mdToast", "$mdUtil", "$mdMedia"];                                       // 16941
    return $mdToast;                                                                                                   // 16942
                                                                                                                       // 16943
  /* @ngInject */                                                                                                      // 16944
  function toastDefaultOptions($animate, $mdToast, $mdUtil, $mdMedia) {                                                // 16945
    var SWIPE_EVENTS = '$md.swipeleft $md.swiperight $md.swipeup $md.swipedown';                                       // 16946
    return {                                                                                                           // 16947
      onShow: onShow,                                                                                                  // 16948
      onRemove: onRemove,                                                                                              // 16949
      position: 'bottom left',                                                                                         // 16950
      themable: true,                                                                                                  // 16951
      hideDelay: 3000,                                                                                                 // 16952
      autoWrap: true,                                                                                                  // 16953
      transformTemplate: function(template, options) {                                                                 // 16954
        var shouldAddWrapper = options.autoWrap && template && !/md-toast-content/g.test(template);                    // 16955
                                                                                                                       // 16956
        if (shouldAddWrapper) {                                                                                        // 16957
          // Root element of template will be <md-toast>. We need to wrap all of its content inside of                 // 16958
          // of <div class="md-toast-content">. All templates provided here should be static, developer-controlled     // 16959
          // content (meaning we're not attempting to guard against XSS).                                              // 16960
          var parsedTemplate = angular.element(template);                                                              // 16961
          var wrappedContent = '<div class="md-toast-content">' + parsedTemplate.html() + '</div>';                    // 16962
                                                                                                                       // 16963
          parsedTemplate.empty().append(wrappedContent);                                                               // 16964
                                                                                                                       // 16965
          // Underlying interimElement expects a template string.                                                      // 16966
          return parsedTemplate[0].outerHTML;                                                                          // 16967
        }                                                                                                              // 16968
                                                                                                                       // 16969
        return shouldAddWrapper ?                                                                                      // 16970
            '<div class="md-toast-content">' + template + '</div>' :                                                   // 16971
            template || '';                                                                                            // 16972
      }                                                                                                                // 16973
    };                                                                                                                 // 16974
                                                                                                                       // 16975
    function onShow(scope, element, options) {                                                                         // 16976
      activeToastContent = options.textContent || options.content; // support deprecated #content method               // 16977
                                                                                                                       // 16978
      var isSmScreen = !$mdMedia('gt-sm');                                                                             // 16979
                                                                                                                       // 16980
      element = $mdUtil.extractElementByName(element, 'md-toast', true);                                               // 16981
      options.onSwipe = function(ev, gesture) {                                                                        // 16982
        //Add the relevant swipe class to the element so it can animate correctly                                      // 16983
        var swipe = ev.type.replace('$md.','');                                                                        // 16984
        var direction = swipe.replace('swipe', '');                                                                    // 16985
                                                                                                                       // 16986
        // If the swipe direction is down/up but the toast came from top/bottom don't fade away                        // 16987
        // Unless the screen is small, then the toast always on bottom                                                 // 16988
        if ((direction === 'down' && options.position.indexOf('top') != -1 && !isSmScreen) ||                          // 16989
            (direction === 'up' && (options.position.indexOf('bottom') != -1 || isSmScreen))) {                        // 16990
          return;                                                                                                      // 16991
        }                                                                                                              // 16992
                                                                                                                       // 16993
        if ((direction === 'left' || direction === 'right') && isSmScreen) {                                           // 16994
          return;                                                                                                      // 16995
        }                                                                                                              // 16996
                                                                                                                       // 16997
        element.addClass('md-' + swipe);                                                                               // 16998
        $mdUtil.nextTick($mdToast.cancel);                                                                             // 16999
      };                                                                                                               // 17000
      options.openClass = toastOpenClass(options.position);                                                            // 17001
                                                                                                                       // 17002
                                                                                                                       // 17003
      // 'top left' -> 'md-top md-left'                                                                                // 17004
      options.parent.addClass(options.openClass);                                                                      // 17005
                                                                                                                       // 17006
      // static is the default position                                                                                // 17007
      if ($mdUtil.hasComputedStyle(options.parent, 'position', 'static')) {                                            // 17008
        options.parent.css('position', 'relative');                                                                    // 17009
      }                                                                                                                // 17010
                                                                                                                       // 17011
      element.on(SWIPE_EVENTS, options.onSwipe);                                                                       // 17012
      element.addClass(isSmScreen ? 'md-bottom' : options.position.split(' ').map(function(pos) {                      // 17013
        return 'md-' + pos;                                                                                            // 17014
      }).join(' '));                                                                                                   // 17015
                                                                                                                       // 17016
      if (options.parent) options.parent.addClass('md-toast-animating');                                               // 17017
      return $animate.enter(element, options.parent).then(function() {                                                 // 17018
        if (options.parent) options.parent.removeClass('md-toast-animating');                                          // 17019
      });                                                                                                              // 17020
    }                                                                                                                  // 17021
                                                                                                                       // 17022
    function onRemove(scope, element, options) {                                                                       // 17023
      element.off(SWIPE_EVENTS, options.onSwipe);                                                                      // 17024
      if (options.parent) options.parent.addClass('md-toast-animating');                                               // 17025
      if (options.openClass) options.parent.removeClass(options.openClass);                                            // 17026
                                                                                                                       // 17027
      return ((options.$destroy == true) ? element.remove() : $animate.leave(element))                                 // 17028
        .then(function () {                                                                                            // 17029
          if (options.parent) options.parent.removeClass('md-toast-animating');                                        // 17030
          if ($mdUtil.hasComputedStyle(options.parent, 'position', 'static')) {                                        // 17031
            options.parent.css('position', '');                                                                        // 17032
          }                                                                                                            // 17033
        });                                                                                                            // 17034
    }                                                                                                                  // 17035
                                                                                                                       // 17036
    function toastOpenClass(position) {                                                                                // 17037
      if (!$mdMedia('gt-sm')) {                                                                                        // 17038
        return 'md-toast-open-bottom';                                                                                 // 17039
      }                                                                                                                // 17040
                                                                                                                       // 17041
      return 'md-toast-open-' +                                                                                        // 17042
        (position.indexOf('top') > -1 ? 'top' : 'bottom');                                                             // 17043
    }                                                                                                                  // 17044
  }                                                                                                                    // 17045
                                                                                                                       // 17046
}                                                                                                                      // 17047
MdToastProvider.$inject = ["$$interimElementProvider"];                                                                // 17048
                                                                                                                       // 17049
})();                                                                                                                  // 17050
(function(){                                                                                                           // 17051
"use strict";                                                                                                          // 17052
                                                                                                                       // 17053
/**                                                                                                                    // 17054
 * @ngdoc module                                                                                                       // 17055
 * @name material.components.tabs                                                                                      // 17056
 * @description                                                                                                        // 17057
 *                                                                                                                     // 17058
 *  Tabs, created with the `<md-tabs>` directive provide *tabbed* navigation with different styles.                    // 17059
 *  The Tabs component consists of clickable tabs that are aligned horizontally side-by-side.                          // 17060
 *                                                                                                                     // 17061
 *  Features include support for:                                                                                      // 17062
 *                                                                                                                     // 17063
 *  - static or dynamic tabs,                                                                                          // 17064
 *  - responsive designs,                                                                                              // 17065
 *  - accessibility support (ARIA),                                                                                    // 17066
 *  - tab pagination,                                                                                                  // 17067
 *  - external or internal tab content,                                                                                // 17068
 *  - focus indicators and arrow-key navigations,                                                                      // 17069
 *  - programmatic lookup and access to tab controllers, and                                                           // 17070
 *  - dynamic transitions through different tab contents.                                                              // 17071
 *                                                                                                                     // 17072
 */                                                                                                                    // 17073
/*                                                                                                                     // 17074
 * @see js folder for tabs implementation                                                                              // 17075
 */                                                                                                                    // 17076
angular.module('material.components.tabs', [                                                                           // 17077
  'material.core',                                                                                                     // 17078
  'material.components.icon'                                                                                           // 17079
]);                                                                                                                    // 17080
                                                                                                                       // 17081
})();                                                                                                                  // 17082
(function(){                                                                                                           // 17083
"use strict";                                                                                                          // 17084
                                                                                                                       // 17085
/**                                                                                                                    // 17086
 * @ngdoc module                                                                                                       // 17087
 * @name material.components.toolbar                                                                                   // 17088
 */                                                                                                                    // 17089
angular.module('material.components.toolbar', [                                                                        // 17090
  'material.core',                                                                                                     // 17091
  'material.components.content'                                                                                        // 17092
])                                                                                                                     // 17093
  .directive('mdToolbar', mdToolbarDirective);                                                                         // 17094
                                                                                                                       // 17095
/**                                                                                                                    // 17096
 * @ngdoc directive                                                                                                    // 17097
 * @name mdToolbar                                                                                                     // 17098
 * @module material.components.toolbar                                                                                 // 17099
 * @restrict E                                                                                                         // 17100
 * @description                                                                                                        // 17101
 * `md-toolbar` is used to place a toolbar in your app.                                                                // 17102
 *                                                                                                                     // 17103
 * Toolbars are usually used above a content area to display the title of the                                          // 17104
 * current page, and show relevant action buttons for that page.                                                       // 17105
 *                                                                                                                     // 17106
 * You can change the height of the toolbar by adding either the                                                       // 17107
 * `md-medium-tall` or `md-tall` class to the toolbar.                                                                 // 17108
 *                                                                                                                     // 17109
 * @usage                                                                                                              // 17110
 * <hljs lang="html">                                                                                                  // 17111
 * <div layout="column" layout-fill>                                                                                   // 17112
 *   <md-toolbar>                                                                                                      // 17113
 *                                                                                                                     // 17114
 *     <div class="md-toolbar-tools">                                                                                  // 17115
 *       <span>My App's Title</span>                                                                                   // 17116
 *                                                                                                                     // 17117
 *       <!-- fill up the space between left and right area -->                                                        // 17118
 *       <span flex></span>                                                                                            // 17119
 *                                                                                                                     // 17120
 *       <md-button>                                                                                                   // 17121
 *         Right Bar Button                                                                                            // 17122
 *       </md-button>                                                                                                  // 17123
 *     </div>                                                                                                          // 17124
 *                                                                                                                     // 17125
 *   </md-toolbar>                                                                                                     // 17126
 *   <md-content>                                                                                                      // 17127
 *     Hello!                                                                                                          // 17128
 *   </md-content>                                                                                                     // 17129
 * </div>                                                                                                              // 17130
 * </hljs>                                                                                                             // 17131
 *                                                                                                                     // 17132
 * @param {boolean=} md-scroll-shrink Whether the header should shrink away as                                         // 17133
 * the user scrolls down, and reveal itself as the user scrolls up.                                                    // 17134
 *                                                                                                                     // 17135
 * _**Note (1):** for scrollShrink to work, the toolbar must be a sibling of a                                         // 17136
 * `md-content` element, placed before it. See the scroll shrink demo._                                                // 17137
 *                                                                                                                     // 17138
 * _**Note (2):** The `md-scroll-shrink` attribute is only parsed on component                                         // 17139
 * initialization, it does not watch for scope changes._                                                               // 17140
 *                                                                                                                     // 17141
 *                                                                                                                     // 17142
 * @param {number=} md-shrink-speed-factor How much to change the speed of the toolbar's                               // 17143
 * shrinking by. For example, if 0.25 is given then the toolbar will shrink                                            // 17144
 * at one fourth the rate at which the user scrolls down. Default 0.5.                                                 // 17145
 */                                                                                                                    // 17146
                                                                                                                       // 17147
function mdToolbarDirective($$rAF, $mdConstant, $mdUtil, $mdTheming, $animate) {                                       // 17148
  var translateY = angular.bind(null, $mdUtil.supplant, 'translate3d(0,{0}px,0)');                                     // 17149
                                                                                                                       // 17150
  return {                                                                                                             // 17151
    template: '',                                                                                                      // 17152
                                                                                                                       // 17153
    restrict: 'E',                                                                                                     // 17154
                                                                                                                       // 17155
    link: function(scope, element, attr) {                                                                             // 17156
                                                                                                                       // 17157
      $mdTheming(element);                                                                                             // 17158
                                                                                                                       // 17159
      if (angular.isDefined(attr.mdScrollShrink)) {                                                                    // 17160
        setupScrollShrink();                                                                                           // 17161
      }                                                                                                                // 17162
                                                                                                                       // 17163
      function setupScrollShrink() {                                                                                   // 17164
                                                                                                                       // 17165
        var toolbarHeight;                                                                                             // 17166
        var contentElement;                                                                                            // 17167
        var disableScrollShrink = angular.noop;                                                                        // 17168
                                                                                                                       // 17169
        // Current "y" position of scroll                                                                              // 17170
        // Store the last scroll top position                                                                          // 17171
        var y = 0;                                                                                                     // 17172
        var prevScrollTop = 0;                                                                                         // 17173
        var shrinkSpeedFactor = attr.mdShrinkSpeedFactor || 0.5;                                                       // 17174
                                                                                                                       // 17175
        var debouncedContentScroll = $$rAF.throttle(onContentScroll);                                                  // 17176
        var debouncedUpdateHeight = $mdUtil.debounce(updateToolbarHeight, 5 * 1000);                                   // 17177
                                                                                                                       // 17178
        // Wait for $mdContentLoaded event from mdContent directive.                                                   // 17179
        // If the mdContent element is a sibling of our toolbar, hook it up                                            // 17180
        // to scroll events.                                                                                           // 17181
                                                                                                                       // 17182
        scope.$on('$mdContentLoaded', onMdContentLoad);                                                                // 17183
                                                                                                                       // 17184
        // If the toolbar is used inside an ng-if statement, we may miss the                                           // 17185
        // $mdContentLoaded event, so we attempt to fake it if we have a                                               // 17186
        // md-content close enough.                                                                                    // 17187
                                                                                                                       // 17188
        attr.$observe('mdScrollShrink', onChangeScrollShrink);                                                         // 17189
                                                                                                                       // 17190
        // If the toolbar has ngShow or ngHide we need to update height immediately as it changed                      // 17191
        // and not wait for $mdUtil.debounce to happen                                                                 // 17192
                                                                                                                       // 17193
        if (attr.ngShow) { scope.$watch(attr.ngShow, updateToolbarHeight); }                                           // 17194
        if (attr.ngHide) { scope.$watch(attr.ngHide, updateToolbarHeight); }                                           // 17195
                                                                                                                       // 17196
        // If the scope is destroyed (which could happen with ng-if), make sure                                        // 17197
        // to disable scroll shrinking again                                                                           // 17198
                                                                                                                       // 17199
        scope.$on('$destroy', disableScrollShrink);                                                                    // 17200
                                                                                                                       // 17201
        /**                                                                                                            // 17202
         *                                                                                                             // 17203
         */                                                                                                            // 17204
        function onChangeScrollShrink(shrinkWithScroll) {                                                              // 17205
          var closestContent = element.parent().find('md-content');                                                    // 17206
                                                                                                                       // 17207
          // If we have a content element, fake the call; this might still fail                                        // 17208
          // if the content element isn't a sibling of the toolbar                                                     // 17209
                                                                                                                       // 17210
          if (!contentElement && closestContent.length) {                                                              // 17211
            onMdContentLoad(null, closestContent);                                                                     // 17212
          }                                                                                                            // 17213
                                                                                                                       // 17214
          // Evaluate the expression                                                                                   // 17215
          shrinkWithScroll = scope.$eval(shrinkWithScroll);                                                            // 17216
                                                                                                                       // 17217
          // Disable only if the attribute's expression evaluates to false                                             // 17218
          if (shrinkWithScroll === false) {                                                                            // 17219
            disableScrollShrink();                                                                                     // 17220
          } else {                                                                                                     // 17221
            disableScrollShrink = enableScrollShrink();                                                                // 17222
          }                                                                                                            // 17223
        }                                                                                                              // 17224
                                                                                                                       // 17225
        /**                                                                                                            // 17226
         *                                                                                                             // 17227
         */                                                                                                            // 17228
        function onMdContentLoad($event, newContentEl) {                                                               // 17229
          // Toolbar and content must be siblings                                                                      // 17230
          if (newContentEl && element.parent()[0] === newContentEl.parent()[0]) {                                      // 17231
            // unhook old content event listener if exists                                                             // 17232
            if (contentElement) {                                                                                      // 17233
              contentElement.off('scroll', debouncedContentScroll);                                                    // 17234
            }                                                                                                          // 17235
                                                                                                                       // 17236
            contentElement = newContentEl;                                                                             // 17237
            disableScrollShrink = enableScrollShrink();                                                                // 17238
          }                                                                                                            // 17239
        }                                                                                                              // 17240
                                                                                                                       // 17241
        /**                                                                                                            // 17242
         *                                                                                                             // 17243
         */                                                                                                            // 17244
        function onContentScroll(e) {                                                                                  // 17245
          var scrollTop = e ? e.target.scrollTop : prevScrollTop;                                                      // 17246
                                                                                                                       // 17247
          debouncedUpdateHeight();                                                                                     // 17248
                                                                                                                       // 17249
          y = Math.min(                                                                                                // 17250
            toolbarHeight / shrinkSpeedFactor,                                                                         // 17251
            Math.max(0, y + scrollTop - prevScrollTop)                                                                 // 17252
          );                                                                                                           // 17253
                                                                                                                       // 17254
          element.css($mdConstant.CSS.TRANSFORM, translateY([-y * shrinkSpeedFactor]));                                // 17255
          contentElement.css($mdConstant.CSS.TRANSFORM, translateY([(toolbarHeight - y) * shrinkSpeedFactor]));        // 17256
                                                                                                                       // 17257
          prevScrollTop = scrollTop;                                                                                   // 17258
                                                                                                                       // 17259
          $mdUtil.nextTick(function() {                                                                                // 17260
            var hasWhiteFrame = element.hasClass('md-whiteframe-z1');                                                  // 17261
                                                                                                                       // 17262
            if (hasWhiteFrame && !y) {                                                                                 // 17263
              $animate.removeClass(element, 'md-whiteframe-z1');                                                       // 17264
            } else if (!hasWhiteFrame && y) {                                                                          // 17265
              $animate.addClass(element, 'md-whiteframe-z1');                                                          // 17266
            }                                                                                                          // 17267
          });                                                                                                          // 17268
                                                                                                                       // 17269
        }                                                                                                              // 17270
                                                                                                                       // 17271
        /**                                                                                                            // 17272
         *                                                                                                             // 17273
         */                                                                                                            // 17274
        function enableScrollShrink() {                                                                                // 17275
          if (!contentElement)     return angular.noop;           // no md-content                                     // 17276
                                                                                                                       // 17277
          contentElement.on('scroll', debouncedContentScroll);                                                         // 17278
          contentElement.attr('scroll-shrink', 'true');                                                                // 17279
                                                                                                                       // 17280
          $$rAF(updateToolbarHeight);                                                                                  // 17281
                                                                                                                       // 17282
          return function disableScrollShrink() {                                                                      // 17283
            contentElement.off('scroll', debouncedContentScroll);                                                      // 17284
            contentElement.attr('scroll-shrink', 'false');                                                             // 17285
                                                                                                                       // 17286
            $$rAF(updateToolbarHeight);                                                                                // 17287
          }                                                                                                            // 17288
        }                                                                                                              // 17289
                                                                                                                       // 17290
        /**                                                                                                            // 17291
         *                                                                                                             // 17292
         */                                                                                                            // 17293
        function updateToolbarHeight() {                                                                               // 17294
          toolbarHeight = element.prop('offsetHeight');                                                                // 17295
          // Add a negative margin-top the size of the toolbar to the content el.                                      // 17296
          // The content will start transformed down the toolbarHeight amount,                                         // 17297
          // so everything looks normal.                                                                               // 17298
          //                                                                                                           // 17299
          // As the user scrolls down, the content will be transformed up slowly                                       // 17300
          // to put the content underneath where the toolbar was.                                                      // 17301
          var margin = (-toolbarHeight * shrinkSpeedFactor) + 'px';                                                    // 17302
                                                                                                                       // 17303
          contentElement.css({                                                                                         // 17304
            "margin-top": margin,                                                                                      // 17305
            "margin-bottom": margin                                                                                    // 17306
          });                                                                                                          // 17307
                                                                                                                       // 17308
          onContentScroll();                                                                                           // 17309
        }                                                                                                              // 17310
                                                                                                                       // 17311
      }                                                                                                                // 17312
                                                                                                                       // 17313
    }                                                                                                                  // 17314
  };                                                                                                                   // 17315
                                                                                                                       // 17316
}                                                                                                                      // 17317
mdToolbarDirective.$inject = ["$$rAF", "$mdConstant", "$mdUtil", "$mdTheming", "$animate"];                            // 17318
                                                                                                                       // 17319
})();                                                                                                                  // 17320
(function(){                                                                                                           // 17321
"use strict";                                                                                                          // 17322
                                                                                                                       // 17323
/**                                                                                                                    // 17324
 * @ngdoc module                                                                                                       // 17325
 * @name material.components.tooltip                                                                                   // 17326
 */                                                                                                                    // 17327
angular                                                                                                                // 17328
    .module('material.components.tooltip', [ 'material.core' ])                                                        // 17329
    .directive('mdTooltip', MdTooltipDirective);                                                                       // 17330
                                                                                                                       // 17331
/**                                                                                                                    // 17332
 * @ngdoc directive                                                                                                    // 17333
 * @name mdTooltip                                                                                                     // 17334
 * @module material.components.tooltip                                                                                 // 17335
 * @description                                                                                                        // 17336
 * Tooltips are used to describe elements that are interactive and primarily graphical (not textual).                  // 17337
 *                                                                                                                     // 17338
 * Place a `<md-tooltip>` as a child of the element it describes.                                                      // 17339
 *                                                                                                                     // 17340
 * A tooltip will activate when the user focuses, hovers over, or touches the parent.                                  // 17341
 *                                                                                                                     // 17342
 * @usage                                                                                                              // 17343
 * <hljs lang="html">                                                                                                  // 17344
 * <md-button class="md-fab md-accent" aria-label="Play">                                                              // 17345
 *   <md-tooltip>                                                                                                      // 17346
 *     Play Music                                                                                                      // 17347
 *   </md-tooltip>                                                                                                     // 17348
 *   <md-icon icon="img/icons/ic_play_arrow_24px.svg"></md-icon>                                                       // 17349
 * </md-button>                                                                                                        // 17350
 * </hljs>                                                                                                             // 17351
 *                                                                                                                     // 17352
 * @param {expression=} md-visible Boolean bound to whether the tooltip is currently visible.                          // 17353
 * @param {number=} md-delay How many milliseconds to wait to show the tooltip after the user focuses, hovers, or touches the parent. Defaults to 300ms.
 * @param {boolean=} md-autohide If present or provided with a boolean value, the tooltip will hide on mouse leave, regardless of focus
 * @param {string=} md-direction Which direction would you like the tooltip to go?  Supports left, right, top, and bottom.  Defaults to bottom.
 */                                                                                                                    // 17357
function MdTooltipDirective($timeout, $window, $$rAF, $document, $mdUtil, $mdTheming, $rootElement,                    // 17358
                            $animate, $q) {                                                                            // 17359
                                                                                                                       // 17360
  var TOOLTIP_SHOW_DELAY = 0;                                                                                          // 17361
  var TOOLTIP_WINDOW_EDGE_SPACE = 8;                                                                                   // 17362
                                                                                                                       // 17363
  return {                                                                                                             // 17364
    restrict: 'E',                                                                                                     // 17365
    transclude: true,                                                                                                  // 17366
    priority:210, // Before ngAria                                                                                     // 17367
    template: '<div class="md-content" ng-transclude></div>',                                                          // 17368
    scope: {                                                                                                           // 17369
      delay: '=?mdDelay',                                                                                              // 17370
      visible: '=?mdVisible',                                                                                          // 17371
      autohide: '=?mdAutohide',                                                                                        // 17372
      direction: '@?mdDirection'    // only expect raw or interpolated string value; not expression                    // 17373
    },                                                                                                                 // 17374
    link: postLink                                                                                                     // 17375
  };                                                                                                                   // 17376
                                                                                                                       // 17377
  function postLink(scope, element, attr) {                                                                            // 17378
                                                                                                                       // 17379
    $mdTheming(element);                                                                                               // 17380
                                                                                                                       // 17381
    var parent        = $mdUtil.getParentWithPointerEvents(element),                                                   // 17382
        content       = angular.element(element[0].getElementsByClassName('md-content')[0]),                           // 17383
        tooltipParent = angular.element(document.body),                                                                // 17384
        debouncedOnResize = $$rAF.throttle(function () { updatePosition(); });                                         // 17385
                                                                                                                       // 17386
    if ($animate.pin) $animate.pin(element, parent);                                                                   // 17387
                                                                                                                       // 17388
    // Initialize element                                                                                              // 17389
                                                                                                                       // 17390
    setDefaults();                                                                                                     // 17391
    manipulateElement();                                                                                               // 17392
    bindEvents();                                                                                                      // 17393
                                                                                                                       // 17394
    // Default origin transform point is 'center top'                                                                  // 17395
    // positionTooltip() is always relative to center top                                                              // 17396
    updateContentOrigin();                                                                                             // 17397
                                                                                                                       // 17398
    configureWatchers();                                                                                               // 17399
    addAriaLabel();                                                                                                    // 17400
                                                                                                                       // 17401
                                                                                                                       // 17402
    function setDefaults () {                                                                                          // 17403
      if (!angular.isDefined(attr.mdDelay)) scope.delay = TOOLTIP_SHOW_DELAY;                                          // 17404
    }                                                                                                                  // 17405
                                                                                                                       // 17406
    function updateContentOrigin() {                                                                                   // 17407
      var origin = 'center top';                                                                                       // 17408
      switch (scope.direction) {                                                                                       // 17409
        case 'left'  : origin =  'right center';  break;                                                               // 17410
        case 'right' : origin =  'left center';   break;                                                               // 17411
        case 'top'   : origin =  'center bottom'; break;                                                               // 17412
        case 'bottom': origin =  'center top';    break;                                                               // 17413
      }                                                                                                                // 17414
      content.css('transform-origin', origin);                                                                         // 17415
    }                                                                                                                  // 17416
                                                                                                                       // 17417
    function configureWatchers () {                                                                                    // 17418
      scope.$on('$destroy', function() {                                                                               // 17419
        scope.visible = false;                                                                                         // 17420
        element.remove();                                                                                              // 17421
        angular.element($window).off('resize', debouncedOnResize);                                                     // 17422
      });                                                                                                              // 17423
                                                                                                                       // 17424
      scope.$watch('visible', function (isVisible) {                                                                   // 17425
        if (isVisible) showTooltip();                                                                                  // 17426
        else hideTooltip();                                                                                            // 17427
      });                                                                                                              // 17428
                                                                                                                       // 17429
      scope.$watch('direction', updatePosition );                                                                      // 17430
    }                                                                                                                  // 17431
                                                                                                                       // 17432
    function addAriaLabel () {                                                                                         // 17433
      if (!parent.attr('aria-label') && !parent.text().trim()) {                                                       // 17434
        parent.attr('aria-label', element.text().trim());                                                              // 17435
      }                                                                                                                // 17436
    }                                                                                                                  // 17437
                                                                                                                       // 17438
    function manipulateElement () {                                                                                    // 17439
      element.detach();                                                                                                // 17440
      element.attr('role', 'tooltip');                                                                                 // 17441
    }                                                                                                                  // 17442
                                                                                                                       // 17443
    function bindEvents () {                                                                                           // 17444
      var mouseActive = false;                                                                                         // 17445
                                                                                                                       // 17446
      var ngWindow = angular.element($window);                                                                         // 17447
                                                                                                                       // 17448
      // add an mutationObserver when there is support for it                                                          // 17449
      // and the need for it in the form of viable host(parent[0])                                                     // 17450
      if (parent[0] && 'MutationObserver' in $window) {                                                                // 17451
        // use an mutationObserver to tackle #2602                                                                     // 17452
        var attributeObserver = new MutationObserver(function(mutations) {                                             // 17453
          mutations                                                                                                    // 17454
            .forEach(function (mutation) {                                                                             // 17455
              if (mutation.attributeName === 'disabled' && parent[0].disabled) {                                       // 17456
                setVisible(false);                                                                                     // 17457
                scope.$digest(); // make sure the elements gets updated                                                // 17458
              }                                                                                                        // 17459
            });                                                                                                        // 17460
        });                                                                                                            // 17461
                                                                                                                       // 17462
        attributeObserver.observe(parent[0], { attributes: true});                                                     // 17463
      }                                                                                                                // 17464
                                                                                                                       // 17465
      // Store whether the element was focused when the window loses focus.                                            // 17466
      var windowBlurHandler = function() {                                                                             // 17467
        elementFocusedOnWindowBlur = document.activeElement === parent[0];                                             // 17468
      };                                                                                                               // 17469
      var elementFocusedOnWindowBlur = false;                                                                          // 17470
                                                                                                                       // 17471
      function windowScrollHandler() {                                                                                 // 17472
        setVisible(false);                                                                                             // 17473
      }                                                                                                                // 17474
                                                                                                                       // 17475
      ngWindow.on('blur', windowBlurHandler);                                                                          // 17476
      ngWindow.on('resize', debouncedOnResize);                                                                        // 17477
      document.addEventListener('scroll', windowScrollHandler, true);                                                  // 17478
      scope.$on('$destroy', function() {                                                                               // 17479
        ngWindow.off('blur', windowBlurHandler);                                                                       // 17480
        ngWindow.off('resize', debouncedOnResize);                                                                     // 17481
        document.removeEventListener('scroll', windowScrollHandler, true);                                             // 17482
        attributeObserver && attributeObserver.disconnect();                                                           // 17483
      });                                                                                                              // 17484
                                                                                                                       // 17485
      var enterHandler = function(e) {                                                                                 // 17486
        // Prevent the tooltip from showing when the window is receiving focus.                                        // 17487
        if (e.type === 'focus' && elementFocusedOnWindowBlur) {                                                        // 17488
          elementFocusedOnWindowBlur = false;                                                                          // 17489
          return;                                                                                                      // 17490
        }                                                                                                              // 17491
        parent.on('blur mouseleave touchend touchcancel', leaveHandler );                                              // 17492
        setVisible(true);                                                                                              // 17493
      };                                                                                                               // 17494
      var leaveHandler = function () {                                                                                 // 17495
        var autohide = scope.hasOwnProperty('autohide') ? scope.autohide : attr.hasOwnProperty('mdAutohide');          // 17496
        if (autohide || mouseActive || ($document[0].activeElement !== parent[0]) ) {                                  // 17497
          parent.off('blur mouseleave touchend touchcancel', leaveHandler );                                           // 17498
          parent.triggerHandler("blur");                                                                               // 17499
          setVisible(false);                                                                                           // 17500
        }                                                                                                              // 17501
        mouseActive = false;                                                                                           // 17502
      };                                                                                                               // 17503
                                                                                                                       // 17504
      // to avoid `synthetic clicks` we listen to mousedown instead of `click`                                         // 17505
      parent.on('mousedown', function() { mouseActive = true; });                                                      // 17506
      parent.on('focus mouseenter touchstart', enterHandler );                                                         // 17507
                                                                                                                       // 17508
                                                                                                                       // 17509
    }                                                                                                                  // 17510
                                                                                                                       // 17511
    function setVisible (value) {                                                                                      // 17512
      setVisible.value = !!value;                                                                                      // 17513
      if (!setVisible.queued) {                                                                                        // 17514
        if (value) {                                                                                                   // 17515
          setVisible.queued = true;                                                                                    // 17516
          $timeout(function() {                                                                                        // 17517
            scope.visible = setVisible.value;                                                                          // 17518
            setVisible.queued = false;                                                                                 // 17519
          }, scope.delay);                                                                                             // 17520
        } else {                                                                                                       // 17521
          $mdUtil.nextTick(function() { scope.visible = false; });                                                     // 17522
        }                                                                                                              // 17523
      }                                                                                                                // 17524
    }                                                                                                                  // 17525
                                                                                                                       // 17526
    function showTooltip() {                                                                                           // 17527
      // Insert the element before positioning it, so we can get the position                                          // 17528
      // and check if we should display it                                                                             // 17529
      tooltipParent.append(element);                                                                                   // 17530
                                                                                                                       // 17531
      // Check if we should display it or not.                                                                         // 17532
      // This handles hide-* and show-* along with any user defined css                                                // 17533
      if ( $mdUtil.hasComputedStyle(element, 'display', 'none')) {                                                     // 17534
        scope.visible = false;                                                                                         // 17535
        element.detach();                                                                                              // 17536
        return;                                                                                                        // 17537
      }                                                                                                                // 17538
                                                                                                                       // 17539
      updatePosition();                                                                                                // 17540
                                                                                                                       // 17541
      angular.forEach([element, content], function (element) {                                                         // 17542
        $animate.addClass(element, 'md-show');                                                                         // 17543
      });                                                                                                              // 17544
    }                                                                                                                  // 17545
                                                                                                                       // 17546
    function hideTooltip() {                                                                                           // 17547
        var promises = [];                                                                                             // 17548
        angular.forEach([element, content], function (it) {                                                            // 17549
          if (it.parent() && it.hasClass('md-show')) {                                                                 // 17550
            promises.push($animate.removeClass(it, 'md-show'));                                                        // 17551
          }                                                                                                            // 17552
        });                                                                                                            // 17553
                                                                                                                       // 17554
        $q.all(promises)                                                                                               // 17555
          .then(function () {                                                                                          // 17556
            if (!scope.visible) element.detach();                                                                      // 17557
          });                                                                                                          // 17558
    }                                                                                                                  // 17559
                                                                                                                       // 17560
    function updatePosition() {                                                                                        // 17561
      if ( !scope.visible ) return;                                                                                    // 17562
                                                                                                                       // 17563
      updateContentOrigin();                                                                                           // 17564
      positionTooltip();                                                                                               // 17565
    }                                                                                                                  // 17566
                                                                                                                       // 17567
    function positionTooltip() {                                                                                       // 17568
      var tipRect = $mdUtil.offsetRect(element, tooltipParent);                                                        // 17569
      var parentRect = $mdUtil.offsetRect(parent, tooltipParent);                                                      // 17570
      var newPosition = getPosition(scope.direction);                                                                  // 17571
      var offsetParent = element.prop('offsetParent');                                                                 // 17572
                                                                                                                       // 17573
      // If the user provided a direction, just nudge the tooltip onto the screen                                      // 17574
      // Otherwise, recalculate based on 'top' since default is 'bottom'                                               // 17575
      if (scope.direction) {                                                                                           // 17576
        newPosition = fitInParent(newPosition);                                                                        // 17577
      } else if (offsetParent && newPosition.top > offsetParent.scrollHeight - tipRect.height - TOOLTIP_WINDOW_EDGE_SPACE) {
        newPosition = fitInParent(getPosition('top'));                                                                 // 17579
      }                                                                                                                // 17580
                                                                                                                       // 17581
      element.css({                                                                                                    // 17582
        left: newPosition.left + 'px',                                                                                 // 17583
        top: newPosition.top + 'px'                                                                                    // 17584
      });                                                                                                              // 17585
                                                                                                                       // 17586
      function fitInParent (pos) {                                                                                     // 17587
        var newPosition = { left: pos.left, top: pos.top };                                                            // 17588
        newPosition.left = Math.min( newPosition.left, tooltipParent.prop('scrollWidth') - tipRect.width - TOOLTIP_WINDOW_EDGE_SPACE );
        newPosition.left = Math.max( newPosition.left, TOOLTIP_WINDOW_EDGE_SPACE );                                    // 17590
        newPosition.top  = Math.min( newPosition.top,  tooltipParent.prop('scrollHeight') - tipRect.height - TOOLTIP_WINDOW_EDGE_SPACE );
        newPosition.top  = Math.max( newPosition.top,  TOOLTIP_WINDOW_EDGE_SPACE );                                    // 17592
        return newPosition;                                                                                            // 17593
      }                                                                                                                // 17594
                                                                                                                       // 17595
      function getPosition (dir) {                                                                                     // 17596
        return dir === 'left'                                                                                          // 17597
          ? { left: parentRect.left - tipRect.width - TOOLTIP_WINDOW_EDGE_SPACE,                                       // 17598
              top: parentRect.top + parentRect.height / 2 - tipRect.height / 2 }                                       // 17599
          : dir === 'right'                                                                                            // 17600
          ? { left: parentRect.left + parentRect.width + TOOLTIP_WINDOW_EDGE_SPACE,                                    // 17601
              top: parentRect.top + parentRect.height / 2 - tipRect.height / 2 }                                       // 17602
          : dir === 'top'                                                                                              // 17603
          ? { left: parentRect.left + parentRect.width / 2 - tipRect.width / 2,                                        // 17604
              top: parentRect.top - tipRect.height - TOOLTIP_WINDOW_EDGE_SPACE }                                       // 17605
          : { left: parentRect.left + parentRect.width / 2 - tipRect.width / 2,                                        // 17606
              top: parentRect.top + parentRect.height + TOOLTIP_WINDOW_EDGE_SPACE };                                   // 17607
      }                                                                                                                // 17608
    }                                                                                                                  // 17609
                                                                                                                       // 17610
  }                                                                                                                    // 17611
                                                                                                                       // 17612
}                                                                                                                      // 17613
MdTooltipDirective.$inject = ["$timeout", "$window", "$$rAF", "$document", "$mdUtil", "$mdTheming", "$rootElement", "$animate", "$q"];
                                                                                                                       // 17615
})();                                                                                                                  // 17616
(function(){                                                                                                           // 17617
"use strict";                                                                                                          // 17618
                                                                                                                       // 17619
/**                                                                                                                    // 17620
 * @ngdoc module                                                                                                       // 17621
 * @name material.components.virtualRepeat                                                                             // 17622
 */                                                                                                                    // 17623
angular.module('material.components.virtualRepeat', [                                                                  // 17624
  'material.core',                                                                                                     // 17625
  'material.components.showHide'                                                                                       // 17626
])                                                                                                                     // 17627
.directive('mdVirtualRepeatContainer', VirtualRepeatContainerDirective)                                                // 17628
.directive('mdVirtualRepeat', VirtualRepeatDirective);                                                                 // 17629
                                                                                                                       // 17630
                                                                                                                       // 17631
/**                                                                                                                    // 17632
 * @ngdoc directive                                                                                                    // 17633
 * @name mdVirtualRepeatContainer                                                                                      // 17634
 * @module material.components.virtualRepeat                                                                           // 17635
 * @restrict E                                                                                                         // 17636
 * @description                                                                                                        // 17637
 * `md-virtual-repeat-container` provides the scroll container for md-virtual-repeat.                                  // 17638
 *                                                                                                                     // 17639
 * Virtual repeat is a limited substitute for ng-repeat that renders only                                              // 17640
 * enough dom nodes to fill the container and recycling them as the user scrolls.                                      // 17641
 *                                                                                                                     // 17642
 * @usage                                                                                                              // 17643
 * <hljs lang="html">                                                                                                  // 17644
 *                                                                                                                     // 17645
 * <md-virtual-repeat-container md-top-index="topIndex">                                                               // 17646
 *   <div md-virtual-repeat="i in items" md-item-size="20">Hello {{i}}!</div>                                          // 17647
 * </md-virtual-repeat-container>                                                                                      // 17648
 * </hljs>                                                                                                             // 17649
 *                                                                                                                     // 17650
 * @param {number=} md-top-index Binds the index of the item that is at the top of the scroll                          // 17651
 *     container to $scope. It can both read and set the scroll position.                                              // 17652
 * @param {boolean=} md-orient-horizontal Whether the container should scroll horizontally                             // 17653
 *     (defaults to orientation and scrolling vertically).                                                             // 17654
 * @param {boolean=} md-auto-shrink When present, the container will shrink to fit                                     // 17655
 *     the number of items when that number is less than its original size.                                            // 17656
 * @param {number=} md-auto-shrink-min Minimum number of items that md-auto-shrink                                     // 17657
 *     will shrink to (default: 0).                                                                                    // 17658
 */                                                                                                                    // 17659
function VirtualRepeatContainerDirective() {                                                                           // 17660
  return {                                                                                                             // 17661
    controller: VirtualRepeatContainerController,                                                                      // 17662
    template: virtualRepeatContainerTemplate,                                                                          // 17663
    compile: function virtualRepeatContainerCompile($element, $attrs) {                                                // 17664
      $element                                                                                                         // 17665
          .addClass('md-virtual-repeat-container')                                                                     // 17666
          .addClass($attrs.hasOwnProperty('mdOrientHorizontal')                                                        // 17667
              ? 'md-orient-horizontal'                                                                                 // 17668
              : 'md-orient-vertical');                                                                                 // 17669
    }                                                                                                                  // 17670
  };                                                                                                                   // 17671
}                                                                                                                      // 17672
                                                                                                                       // 17673
                                                                                                                       // 17674
function virtualRepeatContainerTemplate($element) {                                                                    // 17675
  return '<div class="md-virtual-repeat-scroller">' +                                                                  // 17676
    '<div class="md-virtual-repeat-sizer"></div>' +                                                                    // 17677
    '<div class="md-virtual-repeat-offsetter">' +                                                                      // 17678
      $element[0].innerHTML +                                                                                          // 17679
    '</div></div>';                                                                                                    // 17680
}                                                                                                                      // 17681
                                                                                                                       // 17682
/**                                                                                                                    // 17683
 * Maximum size, in pixels, that can be explicitly set to an element. The actual value varies                          // 17684
 * between browsers, but IE11 has the very lowest size at a mere 1,533,917px. Ideally we could                         // 17685
 * *compute* this value, but Firefox always reports an element to have a size of zero if it                            // 17686
 * goes over the max, meaning that we'd have to binary search for the value.                                           // 17687
 * @const {number}                                                                                                     // 17688
 */                                                                                                                    // 17689
var MAX_ELEMENT_SIZE = 1533917;                                                                                        // 17690
                                                                                                                       // 17691
/**                                                                                                                    // 17692
 * Number of additional elements to render above and below the visible area inside                                     // 17693
 * of the virtual repeat container. A higher number results in less flicker when scrolling                             // 17694
 * very quickly in Safari, but comes with a higher rendering and dirty-checking cost.                                  // 17695
 * @const {number}                                                                                                     // 17696
 */                                                                                                                    // 17697
var NUM_EXTRA = 3;                                                                                                     // 17698
                                                                                                                       // 17699
/** @ngInject */                                                                                                       // 17700
function VirtualRepeatContainerController(                                                                             // 17701
    $$rAF, $mdUtil, $parse, $rootScope, $window, $scope, $element, $attrs) {                                           // 17702
  this.$rootScope = $rootScope;                                                                                        // 17703
  this.$scope = $scope;                                                                                                // 17704
  this.$element = $element;                                                                                            // 17705
  this.$attrs = $attrs;                                                                                                // 17706
                                                                                                                       // 17707
  /** @type {number} The width or height of the container */                                                           // 17708
  this.size = 0;                                                                                                       // 17709
  /** @type {number} The scroll width or height of the scroller */                                                     // 17710
  this.scrollSize = 0;                                                                                                 // 17711
  /** @type {number} The scrollLeft or scrollTop of the scroller */                                                    // 17712
  this.scrollOffset = 0;                                                                                               // 17713
  /** @type {boolean} Whether the scroller is oriented horizontally */                                                 // 17714
  this.horizontal = this.$attrs.hasOwnProperty('mdOrientHorizontal');                                                  // 17715
  /** @type {!VirtualRepeatController} The repeater inside of this container */                                        // 17716
  this.repeater = null;                                                                                                // 17717
  /** @type {boolean} Whether auto-shrink is enabled */                                                                // 17718
  this.autoShrink = this.$attrs.hasOwnProperty('mdAutoShrink');                                                        // 17719
  /** @type {number} Minimum number of items to auto-shrink to */                                                      // 17720
  this.autoShrinkMin = parseInt(this.$attrs.mdAutoShrinkMin, 10) || 0;                                                 // 17721
  /** @type {?number} Original container size when shrank */                                                           // 17722
  this.originalSize = null;                                                                                            // 17723
  /** @type {number} Amount to offset the total scroll size by. */                                                     // 17724
  this.offsetSize = parseInt(this.$attrs.mdOffsetSize, 10) || 0;                                                       // 17725
  /** @type {?string} height or width element style on the container prior to auto-shrinking. */                       // 17726
  this.oldElementSize = null;                                                                                          // 17727
                                                                                                                       // 17728
  if (this.$attrs.mdTopIndex) {                                                                                        // 17729
    /** @type {function(angular.Scope): number} Binds to topIndex on Angular scope */                                  // 17730
    this.bindTopIndex = $parse(this.$attrs.mdTopIndex);                                                                // 17731
    /** @type {number} The index of the item that is at the top of the scroll container */                             // 17732
    this.topIndex = this.bindTopIndex(this.$scope);                                                                    // 17733
                                                                                                                       // 17734
    if (!angular.isDefined(this.topIndex)) {                                                                           // 17735
      this.topIndex = 0;                                                                                               // 17736
      this.bindTopIndex.assign(this.$scope, 0);                                                                        // 17737
    }                                                                                                                  // 17738
                                                                                                                       // 17739
    this.$scope.$watch(this.bindTopIndex, angular.bind(this, function(newIndex) {                                      // 17740
      if (newIndex !== this.topIndex) {                                                                                // 17741
        this.scrollToIndex(newIndex);                                                                                  // 17742
      }                                                                                                                // 17743
    }));                                                                                                               // 17744
  } else {                                                                                                             // 17745
    this.topIndex = 0;                                                                                                 // 17746
  }                                                                                                                    // 17747
                                                                                                                       // 17748
  this.scroller = $element[0].getElementsByClassName('md-virtual-repeat-scroller')[0];                                 // 17749
  this.sizer = this.scroller.getElementsByClassName('md-virtual-repeat-sizer')[0];                                     // 17750
  this.offsetter = this.scroller.getElementsByClassName('md-virtual-repeat-offsetter')[0];                             // 17751
                                                                                                                       // 17752
  // After the dom stablizes, measure the initial size of the container and                                            // 17753
  // make a best effort at re-measuring as it changes.                                                                 // 17754
  var boundUpdateSize = angular.bind(this, this.updateSize);                                                           // 17755
                                                                                                                       // 17756
  $$rAF(angular.bind(this, function() {                                                                                // 17757
    boundUpdateSize();                                                                                                 // 17758
                                                                                                                       // 17759
    var debouncedUpdateSize = $mdUtil.debounce(boundUpdateSize, 10, null, false);                                      // 17760
    var jWindow = angular.element($window);                                                                            // 17761
                                                                                                                       // 17762
    // Make one more attempt to get the size if it is 0.                                                               // 17763
    // This is not by any means a perfect approach, but there's really no                                              // 17764
    // silver bullet here.                                                                                             // 17765
    if (!this.size) {                                                                                                  // 17766
      debouncedUpdateSize();                                                                                           // 17767
    }                                                                                                                  // 17768
                                                                                                                       // 17769
    jWindow.on('resize', debouncedUpdateSize);                                                                         // 17770
    $scope.$on('$destroy', function() {                                                                                // 17771
      jWindow.off('resize', debouncedUpdateSize);                                                                      // 17772
    });                                                                                                                // 17773
                                                                                                                       // 17774
    $scope.$emit('$md-resize-enable');                                                                                 // 17775
    $scope.$on('$md-resize', boundUpdateSize);                                                                         // 17776
  }));                                                                                                                 // 17777
}                                                                                                                      // 17778
VirtualRepeatContainerController.$inject = ["$$rAF", "$mdUtil", "$parse", "$rootScope", "$window", "$scope", "$element", "$attrs"];
                                                                                                                       // 17780
                                                                                                                       // 17781
/** Called by the md-virtual-repeat inside of the container at startup. */                                             // 17782
VirtualRepeatContainerController.prototype.register = function(repeaterCtrl) {                                         // 17783
  this.repeater = repeaterCtrl;                                                                                        // 17784
                                                                                                                       // 17785
  angular.element(this.scroller)                                                                                       // 17786
      .on('scroll wheel touchmove touchend', angular.bind(this, this.handleScroll_));                                  // 17787
};                                                                                                                     // 17788
                                                                                                                       // 17789
                                                                                                                       // 17790
/** @return {boolean} Whether the container is configured for horizontal scrolling. */                                 // 17791
VirtualRepeatContainerController.prototype.isHorizontal = function() {                                                 // 17792
  return this.horizontal;                                                                                              // 17793
};                                                                                                                     // 17794
                                                                                                                       // 17795
                                                                                                                       // 17796
/** @return {number} The size (width or height) of the container. */                                                   // 17797
VirtualRepeatContainerController.prototype.getSize = function() {                                                      // 17798
  return this.size;                                                                                                    // 17799
};                                                                                                                     // 17800
                                                                                                                       // 17801
                                                                                                                       // 17802
/**                                                                                                                    // 17803
 * Resizes the container.                                                                                              // 17804
 * @private                                                                                                            // 17805
 * @param {number} The new size to set.                                                                                // 17806
 */                                                                                                                    // 17807
VirtualRepeatContainerController.prototype.setSize_ = function(size) {                                                 // 17808
  var dimension = this.getDimensionName_();                                                                            // 17809
                                                                                                                       // 17810
  this.size = size;                                                                                                    // 17811
  this.$element[0].style[dimension] = size + 'px';                                                                     // 17812
};                                                                                                                     // 17813
                                                                                                                       // 17814
                                                                                                                       // 17815
VirtualRepeatContainerController.prototype.unsetSize_ = function() {                                                   // 17816
  this.$element[0].style[this.getDimensionName_()] = this.oldElementSize;                                              // 17817
  this.oldElementSize = null;                                                                                          // 17818
};                                                                                                                     // 17819
                                                                                                                       // 17820
                                                                                                                       // 17821
/** Instructs the container to re-measure its size. */                                                                 // 17822
VirtualRepeatContainerController.prototype.updateSize = function() {                                                   // 17823
  if (this.originalSize) return;                                                                                       // 17824
                                                                                                                       // 17825
  this.size = this.isHorizontal()                                                                                      // 17826
      ? this.$element[0].clientWidth                                                                                   // 17827
      : this.$element[0].clientHeight;                                                                                 // 17828
                                                                                                                       // 17829
  // Recheck the scroll position after updating the size. This resolves                                                // 17830
  // problems that can result if the scroll position was measured while the                                            // 17831
  // element was display: none or detached from the document.                                                          // 17832
  this.handleScroll_();                                                                                                // 17833
                                                                                                                       // 17834
  this.repeater && this.repeater.containerUpdated();                                                                   // 17835
};                                                                                                                     // 17836
                                                                                                                       // 17837
                                                                                                                       // 17838
/** @return {number} The container's scrollHeight or scrollWidth. */                                                   // 17839
VirtualRepeatContainerController.prototype.getScrollSize = function() {                                                // 17840
  return this.scrollSize;                                                                                              // 17841
};                                                                                                                     // 17842
                                                                                                                       // 17843
                                                                                                                       // 17844
VirtualRepeatContainerController.prototype.getDimensionName_ = function() {                                            // 17845
  return this.isHorizontal() ? 'width' : 'height';                                                                     // 17846
};                                                                                                                     // 17847
                                                                                                                       // 17848
                                                                                                                       // 17849
/**                                                                                                                    // 17850
 * Sets the scroller element to the specified size.                                                                    // 17851
 * @private                                                                                                            // 17852
 * @param {number} size The new size.                                                                                  // 17853
 */                                                                                                                    // 17854
VirtualRepeatContainerController.prototype.sizeScroller_ = function(size) {                                            // 17855
  var dimension =  this.getDimensionName_();                                                                           // 17856
  var crossDimension = this.isHorizontal() ? 'height' : 'width';                                                       // 17857
                                                                                                                       // 17858
  // Clear any existing dimensions.                                                                                    // 17859
  this.sizer.innerHTML = '';                                                                                           // 17860
                                                                                                                       // 17861
  // If the size falls within the browser's maximum explicit size for a single element, we can                         // 17862
  // set the size and be done. Otherwise, we have to create children that add up the the desired                       // 17863
  // size.                                                                                                             // 17864
  if (size < MAX_ELEMENT_SIZE) {                                                                                       // 17865
    this.sizer.style[dimension] = size + 'px';                                                                         // 17866
  } else {                                                                                                             // 17867
    this.sizer.style[dimension] = 'auto';                                                                              // 17868
    this.sizer.style[crossDimension] = 'auto';                                                                         // 17869
                                                                                                                       // 17870
    // Divide the total size we have to render into N max-size pieces.                                                 // 17871
    var numChildren = Math.floor(size / MAX_ELEMENT_SIZE);                                                             // 17872
                                                                                                                       // 17873
    // Element template to clone for each max-size piece.                                                              // 17874
    var sizerChild = document.createElement('div');                                                                    // 17875
    sizerChild.style[dimension] = MAX_ELEMENT_SIZE + 'px';                                                             // 17876
    sizerChild.style[crossDimension] = '1px';                                                                          // 17877
                                                                                                                       // 17878
    for (var i = 0; i < numChildren; i++) {                                                                            // 17879
      this.sizer.appendChild(sizerChild.cloneNode(false));                                                             // 17880
    }                                                                                                                  // 17881
                                                                                                                       // 17882
    // Re-use the element template for the remainder.                                                                  // 17883
    sizerChild.style[dimension] = (size - (numChildren * MAX_ELEMENT_SIZE)) + 'px';                                    // 17884
    this.sizer.appendChild(sizerChild);                                                                                // 17885
  }                                                                                                                    // 17886
};                                                                                                                     // 17887
                                                                                                                       // 17888
                                                                                                                       // 17889
/**                                                                                                                    // 17890
 * If auto-shrinking is enabled, shrinks or unshrinks as appropriate.                                                  // 17891
 * @private                                                                                                            // 17892
 * @param {number} size The new size.                                                                                  // 17893
 */                                                                                                                    // 17894
VirtualRepeatContainerController.prototype.autoShrink_ = function(size) {                                              // 17895
  var shrinkSize = Math.max(size, this.autoShrinkMin * this.repeater.getItemSize());                                   // 17896
  if (this.autoShrink && shrinkSize !== this.size) {                                                                   // 17897
    if (this.oldElementSize === null) {                                                                                // 17898
      this.oldElementSize = this.$element[0].style[this.getDimensionName_()];                                          // 17899
    }                                                                                                                  // 17900
                                                                                                                       // 17901
    var currentSize = this.originalSize || this.size;                                                                  // 17902
    if (!currentSize || shrinkSize < currentSize) {                                                                    // 17903
      if (!this.originalSize) {                                                                                        // 17904
        this.originalSize = this.size;                                                                                 // 17905
      }                                                                                                                // 17906
                                                                                                                       // 17907
      this.setSize_(shrinkSize);                                                                                       // 17908
    } else if (this.originalSize !== null) {                                                                           // 17909
      this.unsetSize_();                                                                                               // 17910
      this.originalSize = null;                                                                                        // 17911
      this.updateSize();                                                                                               // 17912
    }                                                                                                                  // 17913
                                                                                                                       // 17914
    this.repeater.containerUpdated();                                                                                  // 17915
  }                                                                                                                    // 17916
};                                                                                                                     // 17917
                                                                                                                       // 17918
                                                                                                                       // 17919
/**                                                                                                                    // 17920
 * Sets the scrollHeight or scrollWidth. Called by the repeater based on                                               // 17921
 * its item count and item size.                                                                                       // 17922
 * @param {number} itemsSize The total size of the items.                                                              // 17923
 */                                                                                                                    // 17924
VirtualRepeatContainerController.prototype.setScrollSize = function(itemsSize) {                                       // 17925
  var size = itemsSize + this.offsetSize;                                                                              // 17926
  if (this.scrollSize === size) return;                                                                                // 17927
                                                                                                                       // 17928
  this.sizeScroller_(size);                                                                                            // 17929
  this.autoShrink_(size);                                                                                              // 17930
  this.scrollSize = size;                                                                                              // 17931
};                                                                                                                     // 17932
                                                                                                                       // 17933
                                                                                                                       // 17934
/** @return {number} The container's current scroll offset. */                                                         // 17935
VirtualRepeatContainerController.prototype.getScrollOffset = function() {                                              // 17936
  return this.scrollOffset;                                                                                            // 17937
};                                                                                                                     // 17938
                                                                                                                       // 17939
/**                                                                                                                    // 17940
 * Scrolls to a given scrollTop position.                                                                              // 17941
 * @param {number} position                                                                                            // 17942
 */                                                                                                                    // 17943
VirtualRepeatContainerController.prototype.scrollTo = function(position) {                                             // 17944
  this.scroller[this.isHorizontal() ? 'scrollLeft' : 'scrollTop'] = position;                                          // 17945
  this.handleScroll_();                                                                                                // 17946
};                                                                                                                     // 17947
                                                                                                                       // 17948
/**                                                                                                                    // 17949
 * Scrolls the item with the given index to the top of the scroll container.                                           // 17950
 * @param {number} index                                                                                               // 17951
 */                                                                                                                    // 17952
VirtualRepeatContainerController.prototype.scrollToIndex = function(index) {                                           // 17953
  var itemSize = this.repeater.getItemSize();                                                                          // 17954
  var itemsLength = this.repeater.itemsLength;                                                                         // 17955
  if(index > itemsLength) {                                                                                            // 17956
    index = itemsLength - 1;                                                                                           // 17957
  }                                                                                                                    // 17958
  this.scrollTo(itemSize * index);                                                                                     // 17959
};                                                                                                                     // 17960
                                                                                                                       // 17961
VirtualRepeatContainerController.prototype.resetScroll = function() {                                                  // 17962
  this.scrollTo(0);                                                                                                    // 17963
};                                                                                                                     // 17964
                                                                                                                       // 17965
                                                                                                                       // 17966
VirtualRepeatContainerController.prototype.handleScroll_ = function() {                                                // 17967
  var offset = this.isHorizontal() ? this.scroller.scrollLeft : this.scroller.scrollTop;                               // 17968
  if (offset === this.scrollOffset || offset > this.scrollSize - this.size) return;                                    // 17969
                                                                                                                       // 17970
  var itemSize = this.repeater.getItemSize();                                                                          // 17971
  if (!itemSize) return;                                                                                               // 17972
                                                                                                                       // 17973
  var numItems = Math.max(0, Math.floor(offset / itemSize) - NUM_EXTRA);                                               // 17974
                                                                                                                       // 17975
  var transform = (this.isHorizontal() ? 'translateX(' : 'translateY(') +                                              // 17976
                  (numItems * itemSize) + 'px)';                                                                       // 17977
                                                                                                                       // 17978
  this.scrollOffset = offset;                                                                                          // 17979
  this.offsetter.style.webkitTransform = transform;                                                                    // 17980
  this.offsetter.style.transform = transform;                                                                          // 17981
                                                                                                                       // 17982
  if (this.bindTopIndex) {                                                                                             // 17983
    var topIndex = Math.floor(offset / itemSize);                                                                      // 17984
    if (topIndex !== this.topIndex && topIndex < this.repeater.getItemCount()) {                                       // 17985
      this.topIndex = topIndex;                                                                                        // 17986
      this.bindTopIndex.assign(this.$scope, topIndex);                                                                 // 17987
      if (!this.$rootScope.$$phase) this.$scope.$digest();                                                             // 17988
    }                                                                                                                  // 17989
  }                                                                                                                    // 17990
                                                                                                                       // 17991
  this.repeater.containerUpdated();                                                                                    // 17992
};                                                                                                                     // 17993
                                                                                                                       // 17994
                                                                                                                       // 17995
/**                                                                                                                    // 17996
 * @ngdoc directive                                                                                                    // 17997
 * @name mdVirtualRepeat                                                                                               // 17998
 * @module material.components.virtualRepeat                                                                           // 17999
 * @restrict A                                                                                                         // 18000
 * @priority 1000                                                                                                      // 18001
 * @description                                                                                                        // 18002
 * `md-virtual-repeat` specifies an element to repeat using virtual scrolling.                                         // 18003
 *                                                                                                                     // 18004
 * Virtual repeat is a limited substitute for ng-repeat that renders only                                              // 18005
 * enough dom nodes to fill the container and recycling them as the user scrolls.                                      // 18006
 * Arrays, but not objects are supported for iteration.                                                                // 18007
 * Track by, as alias, and (key, value) syntax are not supported.                                                      // 18008
 *                                                                                                                     // 18009
 * @usage                                                                                                              // 18010
 * <hljs lang="html">                                                                                                  // 18011
 * <md-virtual-repeat-container>                                                                                       // 18012
 *   <div md-virtual-repeat="i in items">Hello {{i}}!</div>                                                            // 18013
 * </md-virtual-repeat-container>                                                                                      // 18014
 *                                                                                                                     // 18015
 * <md-virtual-repeat-container md-orient-horizontal>                                                                  // 18016
 *   <div md-virtual-repeat="i in items" md-item-size="20">Hello {{i}}!</div>                                          // 18017
 * </md-virtual-repeat-container>                                                                                      // 18018
 * </hljs>                                                                                                             // 18019
 *                                                                                                                     // 18020
 * @param {number=} md-item-size The height or width of the repeated elements (which must be                           // 18021
 *   identical for each element). Optional. Will attempt to read the size from the dom if missing,                     // 18022
 *   but still assumes that all repeated nodes have same height or width.                                              // 18023
 * @param {string=} md-extra-name Evaluates to an additional name to which the current iterated item                   // 18024
 *   can be assigned on the repeated scope (needed for use in `md-autocomplete`).                                      // 18025
 * @param {boolean=} md-on-demand When present, treats the md-virtual-repeat argument as an object                     // 18026
 *   that can fetch rows rather than an array.                                                                         // 18027
 *                                                                                                                     // 18028
 *   **NOTE:** This object must implement the following interface with two (2) methods:                                // 18029
 *                                                                                                                     // 18030
 *   - `getItemAtIndex: function(index) [object]` The item at that index or null if it is not yet                      // 18031
 *     loaded (it should start downloading the item in that case).                                                     // 18032
 *   - `getLength: function() [number]` The data length to which the repeater container                                // 18033
 *     should be sized. Ideally, when the count is known, this method should return it.                                // 18034
 *     Otherwise, return a higher number than the currently loaded items to produce an                                 // 18035
 *     infinite-scroll behavior.                                                                                       // 18036
 */                                                                                                                    // 18037
function VirtualRepeatDirective($parse) {                                                                              // 18038
  return {                                                                                                             // 18039
    controller: VirtualRepeatController,                                                                               // 18040
    priority: 1000,                                                                                                    // 18041
    require: ['mdVirtualRepeat', '^^mdVirtualRepeatContainer'],                                                        // 18042
    restrict: 'A',                                                                                                     // 18043
    terminal: true,                                                                                                    // 18044
    transclude: 'element',                                                                                             // 18045
    compile: function VirtualRepeatCompile($element, $attrs) {                                                         // 18046
      var expression = $attrs.mdVirtualRepeat;                                                                         // 18047
      var match = expression.match(/^\s*([\s\S]+?)\s+in\s+([\s\S]+?)\s*$/);                                            // 18048
      var repeatName = match[1];                                                                                       // 18049
      var repeatListExpression = $parse(match[2]);                                                                     // 18050
      var extraName = $attrs.mdExtraName && $parse($attrs.mdExtraName);                                                // 18051
                                                                                                                       // 18052
      return function VirtualRepeatLink($scope, $element, $attrs, ctrl, $transclude) {                                 // 18053
        ctrl[0].link_(ctrl[1], $transclude, repeatName, repeatListExpression, extraName);                              // 18054
      };                                                                                                               // 18055
    }                                                                                                                  // 18056
  };                                                                                                                   // 18057
}                                                                                                                      // 18058
VirtualRepeatDirective.$inject = ["$parse"];                                                                           // 18059
                                                                                                                       // 18060
                                                                                                                       // 18061
/** @ngInject */                                                                                                       // 18062
function VirtualRepeatController($scope, $element, $attrs, $browser, $document, $rootScope,                            // 18063
    $$rAF) {                                                                                                           // 18064
  this.$scope = $scope;                                                                                                // 18065
  this.$element = $element;                                                                                            // 18066
  this.$attrs = $attrs;                                                                                                // 18067
  this.$browser = $browser;                                                                                            // 18068
  this.$document = $document;                                                                                          // 18069
  this.$rootScope = $rootScope;                                                                                        // 18070
  this.$$rAF = $$rAF;                                                                                                  // 18071
                                                                                                                       // 18072
  /** @type {boolean} Whether we are in on-demand mode. */                                                             // 18073
  this.onDemand = $attrs.hasOwnProperty('mdOnDemand');                                                                 // 18074
  /** @type {!Function} Backup reference to $browser.$$checkUrlChange */                                               // 18075
  this.browserCheckUrlChange = $browser.$$checkUrlChange;                                                              // 18076
  /** @type {number} Most recent starting repeat index (based on scroll offset) */                                     // 18077
  this.newStartIndex = 0;                                                                                              // 18078
  /** @type {number} Most recent ending repeat index (based on scroll offset) */                                       // 18079
  this.newEndIndex = 0;                                                                                                // 18080
  /** @type {number} Most recent end visible index (based on scroll offset) */                                         // 18081
  this.newVisibleEnd = 0;                                                                                              // 18082
  /** @type {number} Previous starting repeat index (based on scroll offset) */                                        // 18083
  this.startIndex = 0;                                                                                                 // 18084
  /** @type {number} Previous ending repeat index (based on scroll offset) */                                          // 18085
  this.endIndex = 0;                                                                                                   // 18086
  // TODO: measure width/height of first element from dom if not provided.                                             // 18087
  // getComputedStyle?                                                                                                 // 18088
  /** @type {?number} Height/width of repeated elements. */                                                            // 18089
  this.itemSize = $scope.$eval($attrs.mdItemSize) || null;                                                             // 18090
                                                                                                                       // 18091
  /** @type {boolean} Whether this is the first time that items are rendered. */                                       // 18092
  this.isFirstRender = true;                                                                                           // 18093
                                                                                                                       // 18094
  /**                                                                                                                  // 18095
   * @private {boolean} Whether the items in the list are already being updated. Used to prevent                       // 18096
   *     nested calls to virtualRepeatUpdate_.                                                                         // 18097
   */                                                                                                                  // 18098
  this.isVirtualRepeatUpdating_ = false;                                                                               // 18099
                                                                                                                       // 18100
  /** @type {number} Most recently seen length of items. */                                                            // 18101
  this.itemsLength = 0;                                                                                                // 18102
                                                                                                                       // 18103
  /**                                                                                                                  // 18104
   * @type {!Function} Unwatch callback for item size (when md-items-size is                                           // 18105
   *     not specified), or angular.noop otherwise.                                                                    // 18106
   */                                                                                                                  // 18107
  this.unwatchItemSize_ = angular.noop;                                                                                // 18108
                                                                                                                       // 18109
  /**                                                                                                                  // 18110
   * Presently rendered blocks by repeat index.                                                                        // 18111
   * @type {Object<number, !VirtualRepeatController.Block}                                                             // 18112
   */                                                                                                                  // 18113
  this.blocks = {};                                                                                                    // 18114
  /** @type {Array<!VirtualRepeatController.Block>} A pool of presently unused blocks. */                              // 18115
  this.pooledBlocks = [];                                                                                              // 18116
}                                                                                                                      // 18117
VirtualRepeatController.$inject = ["$scope", "$element", "$attrs", "$browser", "$document", "$rootScope", "$$rAF"];    // 18118
                                                                                                                       // 18119
                                                                                                                       // 18120
/**                                                                                                                    // 18121
 * An object representing a repeated item.                                                                             // 18122
 * @typedef {{element: !jqLite, new: boolean, scope: !angular.Scope}}                                                  // 18123
 */                                                                                                                    // 18124
VirtualRepeatController.Block;                                                                                         // 18125
                                                                                                                       // 18126
                                                                                                                       // 18127
/**                                                                                                                    // 18128
 * Called at startup by the md-virtual-repeat postLink function.                                                       // 18129
 * @param {!VirtualRepeatContainerController} container The container's controller.                                    // 18130
 * @param {!Function} transclude The repeated element's bound transclude function.                                     // 18131
 * @param {string} repeatName The left hand side of the repeat expression, indicating                                  // 18132
 *     the name for each item in the array.                                                                            // 18133
 * @param {!Function} repeatListExpression A compiled expression based on the right hand side                          // 18134
 *     of the repeat expression. Points to the array to repeat over.                                                   // 18135
 * @param {string|undefined} extraName The optional extra repeatName.                                                  // 18136
 */                                                                                                                    // 18137
VirtualRepeatController.prototype.link_ =                                                                              // 18138
    function(container, transclude, repeatName, repeatListExpression, extraName) {                                     // 18139
  this.container = container;                                                                                          // 18140
  this.transclude = transclude;                                                                                        // 18141
  this.repeatName = repeatName;                                                                                        // 18142
  this.rawRepeatListExpression = repeatListExpression;                                                                 // 18143
  this.extraName = extraName;                                                                                          // 18144
  this.sized = false;                                                                                                  // 18145
                                                                                                                       // 18146
  this.repeatListExpression = angular.bind(this, this.repeatListExpression_);                                          // 18147
                                                                                                                       // 18148
  this.container.register(this);                                                                                       // 18149
};                                                                                                                     // 18150
                                                                                                                       // 18151
                                                                                                                       // 18152
/** @private Attempts to set itemSize by measuring a repeated element in the dom */                                    // 18153
VirtualRepeatController.prototype.readItemSize_ = function() {                                                         // 18154
  if (this.itemSize) {                                                                                                 // 18155
    // itemSize was successfully read in a different asynchronous call.                                                // 18156
    return;                                                                                                            // 18157
  }                                                                                                                    // 18158
                                                                                                                       // 18159
  this.items = this.repeatListExpression(this.$scope);                                                                 // 18160
  this.parentNode = this.$element[0].parentNode;                                                                       // 18161
  var block = this.getBlock_(0);                                                                                       // 18162
  if (!block.element[0].parentNode) {                                                                                  // 18163
    this.parentNode.appendChild(block.element[0]);                                                                     // 18164
  }                                                                                                                    // 18165
                                                                                                                       // 18166
  this.itemSize = block.element[0][                                                                                    // 18167
      this.container.isHorizontal() ? 'offsetWidth' : 'offsetHeight'] || null;                                         // 18168
                                                                                                                       // 18169
  this.blocks[0] = block;                                                                                              // 18170
  this.poolBlock_(0);                                                                                                  // 18171
                                                                                                                       // 18172
  if (this.itemSize) {                                                                                                 // 18173
    this.containerUpdated();                                                                                           // 18174
  }                                                                                                                    // 18175
};                                                                                                                     // 18176
                                                                                                                       // 18177
                                                                                                                       // 18178
/**                                                                                                                    // 18179
 * Returns the user-specified repeat list, transforming it into an array-like                                          // 18180
 * object in the case of infinite scroll/dynamic load mode.                                                            // 18181
 * @param {!angular.Scope} The scope.                                                                                  // 18182
 * @return {!Array|!Object} An array or array-like object for iteration.                                               // 18183
 */                                                                                                                    // 18184
VirtualRepeatController.prototype.repeatListExpression_ = function(scope) {                                            // 18185
  var repeatList = this.rawRepeatListExpression(scope);                                                                // 18186
                                                                                                                       // 18187
  if (this.onDemand && repeatList) {                                                                                   // 18188
    var virtualList = new VirtualRepeatModelArrayLike(repeatList);                                                     // 18189
    virtualList.$$includeIndexes(this.newStartIndex, this.newVisibleEnd);                                              // 18190
    return virtualList;                                                                                                // 18191
  } else {                                                                                                             // 18192
    return repeatList;                                                                                                 // 18193
  }                                                                                                                    // 18194
};                                                                                                                     // 18195
                                                                                                                       // 18196
                                                                                                                       // 18197
/**                                                                                                                    // 18198
 * Called by the container. Informs us that the containers scroll or size has                                          // 18199
 * changed.                                                                                                            // 18200
 */                                                                                                                    // 18201
VirtualRepeatController.prototype.containerUpdated = function() {                                                      // 18202
  // If itemSize is unknown, attempt to measure it.                                                                    // 18203
  if (!this.itemSize) {                                                                                                // 18204
    this.unwatchItemSize_ = this.$scope.$watchCollection(                                                              // 18205
        this.repeatListExpression,                                                                                     // 18206
        angular.bind(this, function(items) {                                                                           // 18207
          if (items && items.length) {                                                                                 // 18208
            this.$$rAF(angular.bind(this, this.readItemSize_));                                                        // 18209
          }                                                                                                            // 18210
        }));                                                                                                           // 18211
    if (!this.$rootScope.$$phase) this.$scope.$digest();                                                               // 18212
                                                                                                                       // 18213
    return;                                                                                                            // 18214
  } else if (!this.sized) {                                                                                            // 18215
    this.items = this.repeatListExpression(this.$scope);                                                               // 18216
  }                                                                                                                    // 18217
                                                                                                                       // 18218
  if (!this.sized) {                                                                                                   // 18219
    this.unwatchItemSize_();                                                                                           // 18220
    this.sized = true;                                                                                                 // 18221
    this.$scope.$watchCollection(this.repeatListExpression,                                                            // 18222
        angular.bind(this, function(items, oldItems) {                                                                 // 18223
          if (!this.isVirtualRepeatUpdating_) {                                                                        // 18224
            this.virtualRepeatUpdate_(items, oldItems);                                                                // 18225
          }                                                                                                            // 18226
        }));                                                                                                           // 18227
  }                                                                                                                    // 18228
                                                                                                                       // 18229
  this.updateIndexes_();                                                                                               // 18230
                                                                                                                       // 18231
  if (this.newStartIndex !== this.startIndex ||                                                                        // 18232
      this.newEndIndex !== this.endIndex ||                                                                            // 18233
      this.container.getScrollOffset() > this.container.getScrollSize()) {                                             // 18234
    if (this.items instanceof VirtualRepeatModelArrayLike) {                                                           // 18235
      this.items.$$includeIndexes(this.newStartIndex, this.newEndIndex);                                               // 18236
    }                                                                                                                  // 18237
    this.virtualRepeatUpdate_(this.items, this.items);                                                                 // 18238
  }                                                                                                                    // 18239
};                                                                                                                     // 18240
                                                                                                                       // 18241
                                                                                                                       // 18242
/**                                                                                                                    // 18243
 * Called by the container. Returns the size of a single repeated item.                                                // 18244
 * @return {?number} Size of a repeated item.                                                                          // 18245
 */                                                                                                                    // 18246
VirtualRepeatController.prototype.getItemSize = function() {                                                           // 18247
  return this.itemSize;                                                                                                // 18248
};                                                                                                                     // 18249
                                                                                                                       // 18250
                                                                                                                       // 18251
/**                                                                                                                    // 18252
 * Called by the container. Returns the size of a single repeated item.                                                // 18253
 * @return {?number} Size of a repeated item.                                                                          // 18254
 */                                                                                                                    // 18255
VirtualRepeatController.prototype.getItemCount = function() {                                                          // 18256
  return this.itemsLength;                                                                                             // 18257
};                                                                                                                     // 18258
                                                                                                                       // 18259
                                                                                                                       // 18260
/**                                                                                                                    // 18261
 * Updates the order and visible offset of repeated blocks in response to scrolling                                    // 18262
 * or items updates.                                                                                                   // 18263
 * @private                                                                                                            // 18264
 */                                                                                                                    // 18265
VirtualRepeatController.prototype.virtualRepeatUpdate_ = function(items, oldItems) {                                   // 18266
  this.isVirtualRepeatUpdating_ = true;                                                                                // 18267
                                                                                                                       // 18268
  var itemsLength = items && items.length || 0;                                                                        // 18269
  var lengthChanged = false;                                                                                           // 18270
                                                                                                                       // 18271
  // If the number of items shrank, scroll up to the top.                                                              // 18272
  if (this.items && itemsLength < this.items.length && this.container.getScrollOffset() !== 0) {                       // 18273
    this.items = items;                                                                                                // 18274
    this.container.resetScroll();                                                                                      // 18275
    return;                                                                                                            // 18276
  }                                                                                                                    // 18277
                                                                                                                       // 18278
  if (itemsLength !== this.itemsLength) {                                                                              // 18279
    lengthChanged = true;                                                                                              // 18280
    this.itemsLength = itemsLength;                                                                                    // 18281
  }                                                                                                                    // 18282
                                                                                                                       // 18283
  this.items = items;                                                                                                  // 18284
  if (items !== oldItems || lengthChanged) {                                                                           // 18285
    this.updateIndexes_();                                                                                             // 18286
  }                                                                                                                    // 18287
                                                                                                                       // 18288
  this.parentNode = this.$element[0].parentNode;                                                                       // 18289
                                                                                                                       // 18290
  if (lengthChanged) {                                                                                                 // 18291
    this.container.setScrollSize(itemsLength * this.itemSize);                                                         // 18292
  }                                                                                                                    // 18293
                                                                                                                       // 18294
  if (this.isFirstRender) {                                                                                            // 18295
    this.isFirstRender = false;                                                                                        // 18296
    var startIndex = this.$attrs.mdStartIndex ?                                                                        // 18297
      this.$scope.$eval(this.$attrs.mdStartIndex) :                                                                    // 18298
      this.container.topIndex;                                                                                         // 18299
    this.container.scrollToIndex(startIndex);                                                                          // 18300
  }                                                                                                                    // 18301
                                                                                                                       // 18302
  // Detach and pool any blocks that are no longer in the viewport.                                                    // 18303
  Object.keys(this.blocks).forEach(function(blockIndex) {                                                              // 18304
    var index = parseInt(blockIndex, 10);                                                                              // 18305
    if (index < this.newStartIndex || index >= this.newEndIndex) {                                                     // 18306
      this.poolBlock_(index);                                                                                          // 18307
    }                                                                                                                  // 18308
  }, this);                                                                                                            // 18309
                                                                                                                       // 18310
  // Add needed blocks.                                                                                                // 18311
  // For performance reasons, temporarily block browser url checks as we digest                                        // 18312
  // the restored block scopes ($$checkUrlChange reads window.location to                                              // 18313
  // check for changes and trigger route change, etc, which we don't need when                                         // 18314
  // trying to scroll at 60fps).                                                                                       // 18315
  this.$browser.$$checkUrlChange = angular.noop;                                                                       // 18316
                                                                                                                       // 18317
  var i, block,                                                                                                        // 18318
      newStartBlocks = [],                                                                                             // 18319
      newEndBlocks = [];                                                                                               // 18320
                                                                                                                       // 18321
  // Collect blocks at the top.                                                                                        // 18322
  for (i = this.newStartIndex; i < this.newEndIndex && this.blocks[i] == null; i++) {                                  // 18323
    block = this.getBlock_(i);                                                                                         // 18324
    this.updateBlock_(block, i);                                                                                       // 18325
    newStartBlocks.push(block);                                                                                        // 18326
  }                                                                                                                    // 18327
                                                                                                                       // 18328
  // Update blocks that are already rendered.                                                                          // 18329
  for (; this.blocks[i] != null; i++) {                                                                                // 18330
    this.updateBlock_(this.blocks[i], i);                                                                              // 18331
  }                                                                                                                    // 18332
  var maxIndex = i - 1;                                                                                                // 18333
                                                                                                                       // 18334
  // Collect blocks at the end.                                                                                        // 18335
  for (; i < this.newEndIndex; i++) {                                                                                  // 18336
    block = this.getBlock_(i);                                                                                         // 18337
    this.updateBlock_(block, i);                                                                                       // 18338
    newEndBlocks.push(block);                                                                                          // 18339
  }                                                                                                                    // 18340
                                                                                                                       // 18341
  // Attach collected blocks to the document.                                                                          // 18342
  if (newStartBlocks.length) {                                                                                         // 18343
    this.parentNode.insertBefore(                                                                                      // 18344
        this.domFragmentFromBlocks_(newStartBlocks),                                                                   // 18345
        this.$element[0].nextSibling);                                                                                 // 18346
  }                                                                                                                    // 18347
  if (newEndBlocks.length) {                                                                                           // 18348
    this.parentNode.insertBefore(                                                                                      // 18349
        this.domFragmentFromBlocks_(newEndBlocks),                                                                     // 18350
        this.blocks[maxIndex] && this.blocks[maxIndex].element[0].nextSibling);                                        // 18351
  }                                                                                                                    // 18352
                                                                                                                       // 18353
  // Restore $$checkUrlChange.                                                                                         // 18354
  this.$browser.$$checkUrlChange = this.browserCheckUrlChange;                                                         // 18355
                                                                                                                       // 18356
  this.startIndex = this.newStartIndex;                                                                                // 18357
  this.endIndex = this.newEndIndex;                                                                                    // 18358
                                                                                                                       // 18359
  this.isVirtualRepeatUpdating_ = false;                                                                               // 18360
};                                                                                                                     // 18361
                                                                                                                       // 18362
                                                                                                                       // 18363
/**                                                                                                                    // 18364
 * @param {number} index Where the block is to be in the repeated list.                                                // 18365
 * @return {!VirtualRepeatController.Block} A new or pooled block to place at the specified index.                     // 18366
 * @private                                                                                                            // 18367
 */                                                                                                                    // 18368
VirtualRepeatController.prototype.getBlock_ = function(index) {                                                        // 18369
  if (this.pooledBlocks.length) {                                                                                      // 18370
    return this.pooledBlocks.pop();                                                                                    // 18371
  }                                                                                                                    // 18372
                                                                                                                       // 18373
  var block;                                                                                                           // 18374
  this.transclude(angular.bind(this, function(clone, scope) {                                                          // 18375
    block = {                                                                                                          // 18376
      element: clone,                                                                                                  // 18377
      new: true,                                                                                                       // 18378
      scope: scope                                                                                                     // 18379
    };                                                                                                                 // 18380
                                                                                                                       // 18381
    this.updateScope_(scope, index);                                                                                   // 18382
    this.parentNode.appendChild(clone[0]);                                                                             // 18383
  }));                                                                                                                 // 18384
                                                                                                                       // 18385
  return block;                                                                                                        // 18386
};                                                                                                                     // 18387
                                                                                                                       // 18388
                                                                                                                       // 18389
/**                                                                                                                    // 18390
 * Updates and if not in a digest cycle, digests the specified block's scope to the data                               // 18391
 * at the specified index.                                                                                             // 18392
 * @param {!VirtualRepeatController.Block} block The block whose scope should be updated.                              // 18393
 * @param {number} index The index to set.                                                                             // 18394
 * @private                                                                                                            // 18395
 */                                                                                                                    // 18396
VirtualRepeatController.prototype.updateBlock_ = function(block, index) {                                              // 18397
  this.blocks[index] = block;                                                                                          // 18398
                                                                                                                       // 18399
  if (!block.new &&                                                                                                    // 18400
      (block.scope.$index === index && block.scope[this.repeatName] === this.items[index])) {                          // 18401
    return;                                                                                                            // 18402
  }                                                                                                                    // 18403
  block.new = false;                                                                                                   // 18404
                                                                                                                       // 18405
  // Update and digest the block's scope.                                                                              // 18406
  this.updateScope_(block.scope, index);                                                                               // 18407
                                                                                                                       // 18408
  // Perform digest before reattaching the block.                                                                      // 18409
  // Any resulting synchronous dom mutations should be much faster as a result.                                        // 18410
  // This might break some directives, but I'm going to try it for now.                                                // 18411
  if (!this.$rootScope.$$phase) {                                                                                      // 18412
    block.scope.$digest();                                                                                             // 18413
  }                                                                                                                    // 18414
};                                                                                                                     // 18415
                                                                                                                       // 18416
                                                                                                                       // 18417
/**                                                                                                                    // 18418
 * Updates scope to the data at the specified index.                                                                   // 18419
 * @param {!angular.Scope} scope The scope which should be updated.                                                    // 18420
 * @param {number} index The index to set.                                                                             // 18421
 * @private                                                                                                            // 18422
 */                                                                                                                    // 18423
VirtualRepeatController.prototype.updateScope_ = function(scope, index) {                                              // 18424
  scope.$index = index;                                                                                                // 18425
  scope[this.repeatName] = this.items && this.items[index];                                                            // 18426
  if (this.extraName) scope[this.extraName(this.$scope)] = this.items[index];                                          // 18427
};                                                                                                                     // 18428
                                                                                                                       // 18429
                                                                                                                       // 18430
/**                                                                                                                    // 18431
 * Pools the block at the specified index (Pulls its element out of the dom and stores it).                            // 18432
 * @param {number} index The index at which the block to pool is stored.                                               // 18433
 * @private                                                                                                            // 18434
 */                                                                                                                    // 18435
VirtualRepeatController.prototype.poolBlock_ = function(index) {                                                       // 18436
  this.pooledBlocks.push(this.blocks[index]);                                                                          // 18437
  this.parentNode.removeChild(this.blocks[index].element[0]);                                                          // 18438
  delete this.blocks[index];                                                                                           // 18439
};                                                                                                                     // 18440
                                                                                                                       // 18441
                                                                                                                       // 18442
/**                                                                                                                    // 18443
 * Produces a dom fragment containing the elements from the list of blocks.                                            // 18444
 * @param {!Array<!VirtualRepeatController.Block>} blocks The blocks whose elements                                    // 18445
 *     should be added to the document fragment.                                                                       // 18446
 * @return {DocumentFragment}                                                                                          // 18447
 * @private                                                                                                            // 18448
 */                                                                                                                    // 18449
VirtualRepeatController.prototype.domFragmentFromBlocks_ = function(blocks) {                                          // 18450
  var fragment = this.$document[0].createDocumentFragment();                                                           // 18451
  blocks.forEach(function(block) {                                                                                     // 18452
    fragment.appendChild(block.element[0]);                                                                            // 18453
  });                                                                                                                  // 18454
  return fragment;                                                                                                     // 18455
};                                                                                                                     // 18456
                                                                                                                       // 18457
                                                                                                                       // 18458
/**                                                                                                                    // 18459
 * Updates start and end indexes based on length of repeated items and container size.                                 // 18460
 * @private                                                                                                            // 18461
 */                                                                                                                    // 18462
VirtualRepeatController.prototype.updateIndexes_ = function() {                                                        // 18463
  var itemsLength = this.items ? this.items.length : 0;                                                                // 18464
  var containerLength = Math.ceil(this.container.getSize() / this.itemSize);                                           // 18465
                                                                                                                       // 18466
  this.newStartIndex = Math.max(0, Math.min(                                                                           // 18467
      itemsLength - containerLength,                                                                                   // 18468
      Math.floor(this.container.getScrollOffset() / this.itemSize)));                                                  // 18469
  this.newVisibleEnd = this.newStartIndex + containerLength + NUM_EXTRA;                                               // 18470
  this.newEndIndex = Math.min(itemsLength, this.newVisibleEnd);                                                        // 18471
  this.newStartIndex = Math.max(0, this.newStartIndex - NUM_EXTRA);                                                    // 18472
};                                                                                                                     // 18473
                                                                                                                       // 18474
/**                                                                                                                    // 18475
 * This VirtualRepeatModelArrayLike class enforces the interface requirements                                          // 18476
 * for infinite scrolling within a mdVirtualRepeatContainer. An object with this                                       // 18477
 * interface must implement the following interface with two (2) methods:                                              // 18478
 *                                                                                                                     // 18479
 * getItemAtIndex: function(index) -> item at that index or null if it is not yet                                      // 18480
 *     loaded (It should start downloading the item in that case).                                                     // 18481
 *                                                                                                                     // 18482
 * getLength: function() -> number The data legnth to which the repeater container                                     // 18483
 *     should be sized. Ideally, when the count is known, this method should return it.                                // 18484
 *     Otherwise, return a higher number than the currently loaded items to produce an                                 // 18485
 *     infinite-scroll behavior.                                                                                       // 18486
 *                                                                                                                     // 18487
 * @usage                                                                                                              // 18488
 * <hljs lang="html">                                                                                                  // 18489
 *  <md-virtual-repeat-container md-orient-horizontal>                                                                 // 18490
 *    <div md-virtual-repeat="i in items" md-on-demand>                                                                // 18491
 *      Hello {{i}}!                                                                                                   // 18492
 *    </div>                                                                                                           // 18493
 *  </md-virtual-repeat-container>                                                                                     // 18494
 * </hljs>                                                                                                             // 18495
 *                                                                                                                     // 18496
 */                                                                                                                    // 18497
function VirtualRepeatModelArrayLike(model) {                                                                          // 18498
  if (!angular.isFunction(model.getItemAtIndex) ||                                                                     // 18499
      !angular.isFunction(model.getLength)) {                                                                          // 18500
    throw Error('When md-on-demand is enabled, the Object passed to md-virtual-repeat must implement ' +               // 18501
        'functions getItemAtIndex() and getLength() ');                                                                // 18502
  }                                                                                                                    // 18503
                                                                                                                       // 18504
  this.model = model;                                                                                                  // 18505
}                                                                                                                      // 18506
                                                                                                                       // 18507
                                                                                                                       // 18508
VirtualRepeatModelArrayLike.prototype.$$includeIndexes = function(start, end) {                                        // 18509
  for (var i = start; i < end; i++) {                                                                                  // 18510
    if (!this.hasOwnProperty(i)) {                                                                                     // 18511
      this[i] = this.model.getItemAtIndex(i);                                                                          // 18512
    }                                                                                                                  // 18513
  }                                                                                                                    // 18514
  this.length = this.model.getLength();                                                                                // 18515
};                                                                                                                     // 18516
                                                                                                                       // 18517
                                                                                                                       // 18518
function abstractMethod() {                                                                                            // 18519
  throw Error('Non-overridden abstract method called.');                                                               // 18520
}                                                                                                                      // 18521
                                                                                                                       // 18522
})();                                                                                                                  // 18523
(function(){                                                                                                           // 18524
"use strict";                                                                                                          // 18525
                                                                                                                       // 18526
/**                                                                                                                    // 18527
 * @ngdoc module                                                                                                       // 18528
 * @name material.components.whiteframe                                                                                // 18529
 */                                                                                                                    // 18530
angular                                                                                                                // 18531
  .module('material.components.whiteframe', ['material.core'])                                                         // 18532
  .directive('mdWhiteframe', MdWhiteframeDirective);                                                                   // 18533
                                                                                                                       // 18534
/**                                                                                                                    // 18535
 * @private                                                                                                            // 18536
 * @ngdoc directive                                                                                                    // 18537
 * @module material.components.whiteframe                                                                              // 18538
 * @name mdWhiteframe                                                                                                  // 18539
 * @restrict A                                                                                                         // 18540
 *                                                                                                                     // 18541
 * @description                                                                                                        // 18542
 * The md-whiteframe directive allows you to apply an elevation shadow to an element.                                  // 18543
 *                                                                                                                     // 18544
 * The attribute values needs to be a number between 1 and 24.                                                         // 18545
 *                                                                                                                     // 18546
 * ### Notes                                                                                                           // 18547
 * - If there is no value specified it defaults to 4dp.                                                                // 18548
 * - If the value is not valid it defaults to 4dp.                                                                     // 18549
                                                                                                                       // 18550
 * @usage                                                                                                              // 18551
 * <hljs lang="html">                                                                                                  // 18552
 * <div md-whiteframe="3">                                                                                             // 18553
 *   <span>Elevation of 3dp</span>                                                                                     // 18554
 * </div>                                                                                                              // 18555
 * </hljs>                                                                                                             // 18556
 */                                                                                                                    // 18557
function MdWhiteframeDirective($log) {                                                                                 // 18558
  var MIN_DP = 1;                                                                                                      // 18559
  var MAX_DP = 24;                                                                                                     // 18560
  var DEFAULT_DP = 4;                                                                                                  // 18561
                                                                                                                       // 18562
  return {                                                                                                             // 18563
    restrict: 'A',                                                                                                     // 18564
    link: postLink                                                                                                     // 18565
  };                                                                                                                   // 18566
                                                                                                                       // 18567
  function postLink(scope, element, attr) {                                                                            // 18568
    var elevation = parseInt(attr.mdWhiteframe, 10) || DEFAULT_DP;                                                     // 18569
                                                                                                                       // 18570
    if (elevation > MAX_DP || elevation < MIN_DP) {                                                                    // 18571
      $log.warn('md-whiteframe attribute value is invalid. It should be a number between ' + MIN_DP + ' and ' + MAX_DP, element[0]);
      elevation = DEFAULT_DP;                                                                                          // 18573
    }                                                                                                                  // 18574
                                                                                                                       // 18575
    element.addClass('md-whiteframe-' + elevation + 'dp');                                                             // 18576
  }                                                                                                                    // 18577
}                                                                                                                      // 18578
MdWhiteframeDirective.$inject = ["$log"];                                                                              // 18579
                                                                                                                       // 18580
                                                                                                                       // 18581
})();                                                                                                                  // 18582
(function(){                                                                                                           // 18583
"use strict";                                                                                                          // 18584
                                                                                                                       // 18585
angular                                                                                                                // 18586
    .module('material.components.autocomplete')                                                                        // 18587
    .controller('MdAutocompleteCtrl', MdAutocompleteCtrl);                                                             // 18588
                                                                                                                       // 18589
var ITEM_HEIGHT   = 41,                                                                                                // 18590
    MAX_HEIGHT    = 5.5 * ITEM_HEIGHT,                                                                                 // 18591
    MENU_PADDING  = 8,                                                                                                 // 18592
    INPUT_PADDING = 2; // Padding provided by `md-input-container`                                                     // 18593
                                                                                                                       // 18594
function MdAutocompleteCtrl ($scope, $element, $mdUtil, $mdConstant, $mdTheming, $window,                              // 18595
                             $animate, $rootElement, $attrs, $q) {                                                     // 18596
  //-- private variables                                                                                               // 18597
  var ctrl                 = this,                                                                                     // 18598
      itemParts            = $scope.itemsExpr.split(/ in /i),                                                          // 18599
      itemExpr             = itemParts[ 1 ],                                                                           // 18600
      elements             = null,                                                                                     // 18601
      cache                = {},                                                                                       // 18602
      noBlur               = false,                                                                                    // 18603
      selectedItemWatchers = [],                                                                                       // 18604
      hasFocus             = false,                                                                                    // 18605
      lastCount            = 0,                                                                                        // 18606
      promiseFetch         = false;                                                                                    // 18607
                                                                                                                       // 18608
  //-- public variables with handlers                                                                                  // 18609
  defineProperty('hidden', handleHiddenChange, true);                                                                  // 18610
                                                                                                                       // 18611
  //-- public variables                                                                                                // 18612
  ctrl.scope      = $scope;                                                                                            // 18613
  ctrl.parent     = $scope.$parent;                                                                                    // 18614
  ctrl.itemName   = itemParts[ 0 ];                                                                                    // 18615
  ctrl.matches    = [];                                                                                                // 18616
  ctrl.loading    = false;                                                                                             // 18617
  ctrl.hidden     = true;                                                                                              // 18618
  ctrl.index      = null;                                                                                              // 18619
  ctrl.messages   = [];                                                                                                // 18620
  ctrl.id         = $mdUtil.nextUid();                                                                                 // 18621
  ctrl.isDisabled = null;                                                                                              // 18622
  ctrl.isRequired = null;                                                                                              // 18623
  ctrl.hasNotFound = false;                                                                                            // 18624
                                                                                                                       // 18625
  //-- public methods                                                                                                  // 18626
  ctrl.keydown                       = keydown;                                                                        // 18627
  ctrl.blur                          = blur;                                                                           // 18628
  ctrl.focus                         = focus;                                                                          // 18629
  ctrl.clear                         = clearValue;                                                                     // 18630
  ctrl.select                        = select;                                                                         // 18631
  ctrl.listEnter                     = onListEnter;                                                                    // 18632
  ctrl.listLeave                     = onListLeave;                                                                    // 18633
  ctrl.mouseUp                       = onMouseup;                                                                      // 18634
  ctrl.getCurrentDisplayValue        = getCurrentDisplayValue;                                                         // 18635
  ctrl.registerSelectedItemWatcher   = registerSelectedItemWatcher;                                                    // 18636
  ctrl.unregisterSelectedItemWatcher = unregisterSelectedItemWatcher;                                                  // 18637
  ctrl.notFoundVisible               = notFoundVisible;                                                                // 18638
  ctrl.loadingIsVisible              = loadingIsVisible;                                                               // 18639
                                                                                                                       // 18640
  return init();                                                                                                       // 18641
                                                                                                                       // 18642
  //-- initialization methods                                                                                          // 18643
                                                                                                                       // 18644
  /**                                                                                                                  // 18645
   * Initialize the controller, setup watchers, gather elements                                                        // 18646
   */                                                                                                                  // 18647
  function init () {                                                                                                   // 18648
    $mdUtil.initOptionalProperties($scope, $attrs, { searchText: null, selectedItem: null });                          // 18649
    $mdTheming($element);                                                                                              // 18650
    configureWatchers();                                                                                               // 18651
    $mdUtil.nextTick(function () {                                                                                     // 18652
      gatherElements();                                                                                                // 18653
      moveDropdown();                                                                                                  // 18654
      focusElement();                                                                                                  // 18655
      $element.on('focus', focusElement);                                                                              // 18656
    });                                                                                                                // 18657
  }                                                                                                                    // 18658
                                                                                                                       // 18659
  /**                                                                                                                  // 18660
   * Calculates the dropdown's position and applies the new styles to the menu element                                 // 18661
   * @returns {*}                                                                                                      // 18662
   */                                                                                                                  // 18663
  function positionDropdown () {                                                                                       // 18664
    if (!elements) return $mdUtil.nextTick(positionDropdown, false, $scope);                                           // 18665
    var hrect  = elements.wrap.getBoundingClientRect(),                                                                // 18666
        vrect  = elements.snap.getBoundingClientRect(),                                                                // 18667
        root   = elements.root.getBoundingClientRect(),                                                                // 18668
        top    = vrect.bottom - root.top,                                                                              // 18669
        bot    = root.bottom - vrect.top,                                                                              // 18670
        left   = hrect.left - root.left,                                                                               // 18671
        width  = hrect.width,                                                                                          // 18672
        offset = getVerticalOffset(),                                                                                  // 18673
        styles;                                                                                                        // 18674
    // Adjust the width to account for the padding provided by `md-input-container`                                    // 18675
    if ($attrs.mdFloatingLabel) {                                                                                      // 18676
      left += INPUT_PADDING;                                                                                           // 18677
      width -= INPUT_PADDING * 2;                                                                                      // 18678
    }                                                                                                                  // 18679
    styles = {                                                                                                         // 18680
      left:     left + 'px',                                                                                           // 18681
      minWidth: width + 'px',                                                                                          // 18682
      maxWidth: Math.max(hrect.right - root.left, root.right - hrect.left) - MENU_PADDING + 'px'                       // 18683
    };                                                                                                                 // 18684
    if (top > bot && root.height - hrect.bottom - MENU_PADDING < MAX_HEIGHT) {                                         // 18685
      styles.top       = 'auto';                                                                                       // 18686
      styles.bottom    = bot + 'px';                                                                                   // 18687
      styles.maxHeight = Math.min(MAX_HEIGHT, hrect.top - root.top - MENU_PADDING) + 'px';                             // 18688
    } else {                                                                                                           // 18689
      styles.top       = (top - offset) + 'px';                                                                        // 18690
      styles.bottom    = 'auto';                                                                                       // 18691
      styles.maxHeight = Math.min(MAX_HEIGHT, root.bottom + $mdUtil.scrollTop() - hrect.bottom - MENU_PADDING) + 'px';
    }                                                                                                                  // 18693
                                                                                                                       // 18694
    elements.$.scrollContainer.css(styles);                                                                            // 18695
    $mdUtil.nextTick(correctHorizontalAlignment, false);                                                               // 18696
                                                                                                                       // 18697
    /**                                                                                                                // 18698
     * Calculates the vertical offset for floating label examples to account for ngMessages                            // 18699
     * @returns {number}                                                                                               // 18700
     */                                                                                                                // 18701
    function getVerticalOffset () {                                                                                    // 18702
      var offset = 0;                                                                                                  // 18703
      var inputContainer = $element.find('md-input-container');                                                        // 18704
      if (inputContainer.length) {                                                                                     // 18705
        var input = inputContainer.find('input');                                                                      // 18706
        offset = inputContainer.prop('offsetHeight');                                                                  // 18707
        offset -= input.prop('offsetTop');                                                                             // 18708
        offset -= input.prop('offsetHeight');                                                                          // 18709
        // add in the height left up top for the floating label text                                                   // 18710
        offset += inputContainer.prop('offsetTop');                                                                    // 18711
      }                                                                                                                // 18712
      return offset;                                                                                                   // 18713
    }                                                                                                                  // 18714
                                                                                                                       // 18715
    /**                                                                                                                // 18716
     * Makes sure that the menu doesn't go off of the screen on either side.                                           // 18717
     */                                                                                                                // 18718
    function correctHorizontalAlignment () {                                                                           // 18719
      var dropdown = elements.scrollContainer.getBoundingClientRect(),                                                 // 18720
          styles   = {};                                                                                               // 18721
      if (dropdown.right > root.right - MENU_PADDING) {                                                                // 18722
        styles.left = (hrect.right - dropdown.width) + 'px';                                                           // 18723
      }                                                                                                                // 18724
      elements.$.scrollContainer.css(styles);                                                                          // 18725
    }                                                                                                                  // 18726
  }                                                                                                                    // 18727
                                                                                                                       // 18728
  /**                                                                                                                  // 18729
   * Moves the dropdown menu to the body tag in order to avoid z-index and overflow issues.                            // 18730
   */                                                                                                                  // 18731
  function moveDropdown () {                                                                                           // 18732
    if (!elements.$.root.length) return;                                                                               // 18733
    $mdTheming(elements.$.scrollContainer);                                                                            // 18734
    elements.$.scrollContainer.detach();                                                                               // 18735
    elements.$.root.append(elements.$.scrollContainer);                                                                // 18736
    if ($animate.pin) $animate.pin(elements.$.scrollContainer, $rootElement);                                          // 18737
  }                                                                                                                    // 18738
                                                                                                                       // 18739
  /**                                                                                                                  // 18740
   * Sends focus to the input element.                                                                                 // 18741
   */                                                                                                                  // 18742
  function focusElement () {                                                                                           // 18743
    if ($scope.autofocus) elements.input.focus();                                                                      // 18744
  }                                                                                                                    // 18745
                                                                                                                       // 18746
  /**                                                                                                                  // 18747
   * Sets up any watchers used by autocomplete                                                                         // 18748
   */                                                                                                                  // 18749
  function configureWatchers () {                                                                                      // 18750
    var wait = parseInt($scope.delay, 10) || 0;                                                                        // 18751
    $attrs.$observe('disabled', function (value) { ctrl.isDisabled = !!value; });                                      // 18752
    $attrs.$observe('required', function (value) { ctrl.isRequired = !!value; });                                      // 18753
    $scope.$watch('searchText', wait ? $mdUtil.debounce(handleSearchText, wait) : handleSearchText);                   // 18754
    $scope.$watch('selectedItem', selectedItemChange);                                                                 // 18755
    angular.element($window).on('resize', positionDropdown);                                                           // 18756
    $scope.$on('$destroy', cleanup);                                                                                   // 18757
  }                                                                                                                    // 18758
                                                                                                                       // 18759
  /**                                                                                                                  // 18760
   * Removes any events or leftover elements created by this controller                                                // 18761
   */                                                                                                                  // 18762
  function cleanup () {                                                                                                // 18763
    if(!ctrl.hidden) {                                                                                                 // 18764
      $mdUtil.enableScrolling();                                                                                       // 18765
    }                                                                                                                  // 18766
                                                                                                                       // 18767
    angular.element($window).off('resize', positionDropdown);                                                          // 18768
    if ( elements ){                                                                                                   // 18769
      var items = 'ul scroller scrollContainer input'.split(' ');                                                      // 18770
      angular.forEach(items, function(key){                                                                            // 18771
        elements.$[key].remove();                                                                                      // 18772
      });                                                                                                              // 18773
    }                                                                                                                  // 18774
  }                                                                                                                    // 18775
                                                                                                                       // 18776
  /**                                                                                                                  // 18777
   * Gathers all of the elements needed for this controller                                                            // 18778
   */                                                                                                                  // 18779
  function gatherElements () {                                                                                         // 18780
    elements = {                                                                                                       // 18781
      main:  $element[0],                                                                                              // 18782
      scrollContainer: $element[0].getElementsByClassName('md-virtual-repeat-container')[0],                           // 18783
      scroller: $element[0].getElementsByClassName('md-virtual-repeat-scroller')[0],                                   // 18784
      ul:    $element.find('ul')[0],                                                                                   // 18785
      input: $element.find('input')[0],                                                                                // 18786
      wrap:  $element.find('md-autocomplete-wrap')[0],                                                                 // 18787
      root:  document.body                                                                                             // 18788
    };                                                                                                                 // 18789
    elements.li   = elements.ul.getElementsByTagName('li');                                                            // 18790
    elements.snap = getSnapTarget();                                                                                   // 18791
    elements.$    = getAngularElements(elements);                                                                      // 18792
  }                                                                                                                    // 18793
                                                                                                                       // 18794
  /**                                                                                                                  // 18795
   * Finds the element that the menu will base its position on                                                         // 18796
   * @returns {*}                                                                                                      // 18797
   */                                                                                                                  // 18798
  function getSnapTarget () {                                                                                          // 18799
    for (var element = $element; element.length; element = element.parent()) {                                         // 18800
      if (angular.isDefined(element.attr('md-autocomplete-snap'))) return element[ 0 ];                                // 18801
    }                                                                                                                  // 18802
    return elements.wrap;                                                                                              // 18803
  }                                                                                                                    // 18804
                                                                                                                       // 18805
  /**                                                                                                                  // 18806
   * Gathers angular-wrapped versions of each element                                                                  // 18807
   * @param elements                                                                                                   // 18808
   * @returns {{}}                                                                                                     // 18809
   */                                                                                                                  // 18810
  function getAngularElements (elements) {                                                                             // 18811
    var obj = {};                                                                                                      // 18812
    for (var key in elements) {                                                                                        // 18813
      if (elements.hasOwnProperty(key)) obj[ key ] = angular.element(elements[ key ]);                                 // 18814
    }                                                                                                                  // 18815
    return obj;                                                                                                        // 18816
  }                                                                                                                    // 18817
                                                                                                                       // 18818
  //-- event/change handlers                                                                                           // 18819
                                                                                                                       // 18820
  /**                                                                                                                  // 18821
   * Handles changes to the `hidden` property.                                                                         // 18822
   * @param hidden                                                                                                     // 18823
   * @param oldHidden                                                                                                  // 18824
   */                                                                                                                  // 18825
  function handleHiddenChange (hidden, oldHidden) {                                                                    // 18826
    if (!hidden && oldHidden) {                                                                                        // 18827
      positionDropdown();                                                                                              // 18828
                                                                                                                       // 18829
      if (elements) {                                                                                                  // 18830
        $mdUtil.nextTick(function () {                                                                                 // 18831
          $mdUtil.disableScrollAround(elements.ul);                                                                    // 18832
        }, false, $scope);                                                                                             // 18833
      }                                                                                                                // 18834
    } else if (hidden && !oldHidden) {                                                                                 // 18835
      $mdUtil.nextTick(function () {                                                                                   // 18836
        $mdUtil.enableScrolling();                                                                                     // 18837
      }, false, $scope);                                                                                               // 18838
    }                                                                                                                  // 18839
  }                                                                                                                    // 18840
                                                                                                                       // 18841
  /**                                                                                                                  // 18842
   * When the user mouses over the dropdown menu, ignore blur events.                                                  // 18843
   */                                                                                                                  // 18844
  function onListEnter () {                                                                                            // 18845
    noBlur = true;                                                                                                     // 18846
  }                                                                                                                    // 18847
                                                                                                                       // 18848
  /**                                                                                                                  // 18849
   * When the user's mouse leaves the menu, blur events may hide the menu again.                                       // 18850
   */                                                                                                                  // 18851
  function onListLeave () {                                                                                            // 18852
    if (!hasFocus) elements.input.focus();                                                                             // 18853
    noBlur = false;                                                                                                    // 18854
    ctrl.hidden = shouldHide();                                                                                        // 18855
  }                                                                                                                    // 18856
                                                                                                                       // 18857
  /**                                                                                                                  // 18858
   * When the mouse button is released, send focus back to the input field.                                            // 18859
   */                                                                                                                  // 18860
  function onMouseup () {                                                                                              // 18861
    elements.input.focus();                                                                                            // 18862
  }                                                                                                                    // 18863
                                                                                                                       // 18864
  /**                                                                                                                  // 18865
   * Handles changes to the selected item.                                                                             // 18866
   * @param selectedItem                                                                                               // 18867
   * @param previousSelectedItem                                                                                       // 18868
   */                                                                                                                  // 18869
  function selectedItemChange (selectedItem, previousSelectedItem) {                                                   // 18870
    if (selectedItem) {                                                                                                // 18871
      getDisplayValue(selectedItem).then(function (val) {                                                              // 18872
        $scope.searchText = val;                                                                                       // 18873
        handleSelectedItemChange(selectedItem, previousSelectedItem);                                                  // 18874
      });                                                                                                              // 18875
    }                                                                                                                  // 18876
                                                                                                                       // 18877
    if (selectedItem !== previousSelectedItem) announceItemChange();                                                   // 18878
  }                                                                                                                    // 18879
                                                                                                                       // 18880
  /**                                                                                                                  // 18881
   * Use the user-defined expression to announce changes each time a new item is selected                              // 18882
   */                                                                                                                  // 18883
  function announceItemChange () {                                                                                     // 18884
    angular.isFunction($scope.itemChange) && $scope.itemChange(getItemAsNameVal($scope.selectedItem));                 // 18885
  }                                                                                                                    // 18886
                                                                                                                       // 18887
  /**                                                                                                                  // 18888
   * Use the user-defined expression to announce changes each time the search text is changed                          // 18889
   */                                                                                                                  // 18890
  function announceTextChange () {                                                                                     // 18891
    angular.isFunction($scope.textChange) && $scope.textChange();                                                      // 18892
  }                                                                                                                    // 18893
                                                                                                                       // 18894
  /**                                                                                                                  // 18895
   * Calls any external watchers listening for the selected item.  Used in conjunction with                            // 18896
   * `registerSelectedItemWatcher`.                                                                                    // 18897
   * @param selectedItem                                                                                               // 18898
   * @param previousSelectedItem                                                                                       // 18899
   */                                                                                                                  // 18900
  function handleSelectedItemChange (selectedItem, previousSelectedItem) {                                             // 18901
    selectedItemWatchers.forEach(function (watcher) { watcher(selectedItem, previousSelectedItem); });                 // 18902
  }                                                                                                                    // 18903
                                                                                                                       // 18904
  /**                                                                                                                  // 18905
   * Register a function to be called when the selected item changes.                                                  // 18906
   * @param cb                                                                                                         // 18907
   */                                                                                                                  // 18908
  function registerSelectedItemWatcher (cb) {                                                                          // 18909
    if (selectedItemWatchers.indexOf(cb) == -1) {                                                                      // 18910
      selectedItemWatchers.push(cb);                                                                                   // 18911
    }                                                                                                                  // 18912
  }                                                                                                                    // 18913
                                                                                                                       // 18914
  /**                                                                                                                  // 18915
   * Unregister a function previously registered for selected item changes.                                            // 18916
   * @param cb                                                                                                         // 18917
   */                                                                                                                  // 18918
  function unregisterSelectedItemWatcher (cb) {                                                                        // 18919
    var i = selectedItemWatchers.indexOf(cb);                                                                          // 18920
    if (i != -1) {                                                                                                     // 18921
      selectedItemWatchers.splice(i, 1);                                                                               // 18922
    }                                                                                                                  // 18923
  }                                                                                                                    // 18924
                                                                                                                       // 18925
  /**                                                                                                                  // 18926
   * Handles changes to the searchText property.                                                                       // 18927
   * @param searchText                                                                                                 // 18928
   * @param previousSearchText                                                                                         // 18929
   */                                                                                                                  // 18930
  function handleSearchText (searchText, previousSearchText) {                                                         // 18931
    ctrl.index = getDefaultIndex();                                                                                    // 18932
    // do nothing on init                                                                                              // 18933
    if (searchText === previousSearchText) return;                                                                     // 18934
                                                                                                                       // 18935
    getDisplayValue($scope.selectedItem).then(function (val) {                                                         // 18936
      // clear selected item if search text no longer matches it                                                       // 18937
      if (searchText !== val) {                                                                                        // 18938
        $scope.selectedItem = null;                                                                                    // 18939
                                                                                                                       // 18940
        // trigger change event if available                                                                           // 18941
        if (searchText !== previousSearchText) announceTextChange();                                                   // 18942
                                                                                                                       // 18943
        // cancel results if search text is not long enough                                                            // 18944
        if (!isMinLengthMet()) {                                                                                       // 18945
          ctrl.matches = [];                                                                                           // 18946
          setLoading(false);                                                                                           // 18947
          updateMessages();                                                                                            // 18948
        } else {                                                                                                       // 18949
          handleQuery();                                                                                               // 18950
        }                                                                                                              // 18951
      }                                                                                                                // 18952
    });                                                                                                                // 18953
                                                                                                                       // 18954
  }                                                                                                                    // 18955
                                                                                                                       // 18956
  /**                                                                                                                  // 18957
   * Handles input blur event, determines if the dropdown should hide.                                                 // 18958
   */                                                                                                                  // 18959
  function blur () {                                                                                                   // 18960
    hasFocus = false;                                                                                                  // 18961
    if (!noBlur) {                                                                                                     // 18962
      ctrl.hidden = shouldHide();                                                                                      // 18963
    }                                                                                                                  // 18964
  }                                                                                                                    // 18965
                                                                                                                       // 18966
  /**                                                                                                                  // 18967
   * Force blur on input element                                                                                       // 18968
   * @param forceBlur                                                                                                  // 18969
   */                                                                                                                  // 18970
  function doBlur(forceBlur) {                                                                                         // 18971
    if (forceBlur) {                                                                                                   // 18972
      noBlur = false;                                                                                                  // 18973
      hasFocus = false;                                                                                                // 18974
    }                                                                                                                  // 18975
    elements.input.blur();                                                                                             // 18976
  }                                                                                                                    // 18977
                                                                                                                       // 18978
  /**                                                                                                                  // 18979
   * Handles input focus event, determines if the dropdown should show.                                                // 18980
   */                                                                                                                  // 18981
  function focus () {                                                                                                  // 18982
    hasFocus = true;                                                                                                   // 18983
    //-- if searchText is null, let's force it to be a string                                                          // 18984
    if (!angular.isString($scope.searchText)) $scope.searchText = '';                                                  // 18985
    ctrl.hidden = shouldHide();                                                                                        // 18986
    if (!ctrl.hidden) handleQuery();                                                                                   // 18987
  }                                                                                                                    // 18988
                                                                                                                       // 18989
  /**                                                                                                                  // 18990
   * Handles keyboard input.                                                                                           // 18991
   * @param event                                                                                                      // 18992
   */                                                                                                                  // 18993
  function keydown (event) {                                                                                           // 18994
    switch (event.keyCode) {                                                                                           // 18995
      case $mdConstant.KEY_CODE.DOWN_ARROW:                                                                            // 18996
        if (ctrl.loading) return;                                                                                      // 18997
        event.stopPropagation();                                                                                       // 18998
        event.preventDefault();                                                                                        // 18999
        ctrl.index   = Math.min(ctrl.index + 1, ctrl.matches.length - 1);                                              // 19000
        updateScroll();                                                                                                // 19001
        updateMessages();                                                                                              // 19002
        break;                                                                                                         // 19003
      case $mdConstant.KEY_CODE.UP_ARROW:                                                                              // 19004
        if (ctrl.loading) return;                                                                                      // 19005
        event.stopPropagation();                                                                                       // 19006
        event.preventDefault();                                                                                        // 19007
        ctrl.index   = ctrl.index < 0 ? ctrl.matches.length - 1 : Math.max(0, ctrl.index - 1);                         // 19008
        updateScroll();                                                                                                // 19009
        updateMessages();                                                                                              // 19010
        break;                                                                                                         // 19011
      case $mdConstant.KEY_CODE.TAB:                                                                                   // 19012
        // If we hit tab, assume that we've left the list so it will close                                             // 19013
        onListLeave();                                                                                                 // 19014
                                                                                                                       // 19015
        if (ctrl.hidden || ctrl.loading || ctrl.index < 0 || ctrl.matches.length < 1) return;                          // 19016
        select(ctrl.index);                                                                                            // 19017
        break;                                                                                                         // 19018
      case $mdConstant.KEY_CODE.ENTER:                                                                                 // 19019
        if (ctrl.hidden || ctrl.loading || ctrl.index < 0 || ctrl.matches.length < 1) return;                          // 19020
        if (hasSelection()) return;                                                                                    // 19021
        event.stopPropagation();                                                                                       // 19022
        event.preventDefault();                                                                                        // 19023
        select(ctrl.index);                                                                                            // 19024
        break;                                                                                                         // 19025
      case $mdConstant.KEY_CODE.ESCAPE:                                                                                // 19026
        event.stopPropagation();                                                                                       // 19027
        event.preventDefault();                                                                                        // 19028
        clearValue();                                                                                                  // 19029
                                                                                                                       // 19030
        // Force the component to blur if they hit escape                                                              // 19031
        doBlur(true);                                                                                                  // 19032
                                                                                                                       // 19033
        break;                                                                                                         // 19034
      default:                                                                                                         // 19035
    }                                                                                                                  // 19036
  }                                                                                                                    // 19037
                                                                                                                       // 19038
  //-- getters                                                                                                         // 19039
                                                                                                                       // 19040
  /**                                                                                                                  // 19041
   * Returns the minimum length needed to display the dropdown.                                                        // 19042
   * @returns {*}                                                                                                      // 19043
   */                                                                                                                  // 19044
  function getMinLength () {                                                                                           // 19045
    return angular.isNumber($scope.minLength) ? $scope.minLength : 1;                                                  // 19046
  }                                                                                                                    // 19047
                                                                                                                       // 19048
  /**                                                                                                                  // 19049
   * Returns the display value for an item.                                                                            // 19050
   * @param item                                                                                                       // 19051
   * @returns {*}                                                                                                      // 19052
   */                                                                                                                  // 19053
  function getDisplayValue (item) {                                                                                    // 19054
    return $q.when(getItemText(item) || item);                                                                         // 19055
                                                                                                                       // 19056
    /**                                                                                                                // 19057
     * Getter function to invoke user-defined expression (in the directive)                                            // 19058
     * to convert your object to a single string.                                                                      // 19059
     */                                                                                                                // 19060
    function getItemText (item) {                                                                                      // 19061
      return (item && $scope.itemText) ? $scope.itemText(getItemAsNameVal(item)) : null;                               // 19062
    }                                                                                                                  // 19063
  }                                                                                                                    // 19064
                                                                                                                       // 19065
  /**                                                                                                                  // 19066
   * Returns the locals object for compiling item templates.                                                           // 19067
   * @param item                                                                                                       // 19068
   * @returns {{}}                                                                                                     // 19069
   */                                                                                                                  // 19070
  function getItemAsNameVal (item) {                                                                                   // 19071
    if (!item) return undefined;                                                                                       // 19072
                                                                                                                       // 19073
    var locals = {};                                                                                                   // 19074
    if (ctrl.itemName) locals[ ctrl.itemName ] = item;                                                                 // 19075
                                                                                                                       // 19076
    return locals;                                                                                                     // 19077
  }                                                                                                                    // 19078
                                                                                                                       // 19079
  /**                                                                                                                  // 19080
   * Returns the default index based on whether or not autoselect is enabled.                                          // 19081
   * @returns {number}                                                                                                 // 19082
   */                                                                                                                  // 19083
  function getDefaultIndex () {                                                                                        // 19084
    return $scope.autoselect ? 0 : -1;                                                                                 // 19085
  }                                                                                                                    // 19086
                                                                                                                       // 19087
  /**                                                                                                                  // 19088
   * Sets the loading parameter and updates the hidden state.                                                          // 19089
   * @param value {boolean} Whether or not the component is currently loading.                                         // 19090
   */                                                                                                                  // 19091
  function setLoading(value) {                                                                                         // 19092
    if (ctrl.loading != value) {                                                                                       // 19093
      ctrl.loading = value;                                                                                            // 19094
    }                                                                                                                  // 19095
                                                                                                                       // 19096
    // Always refresh the hidden variable as something else might have changed                                         // 19097
    ctrl.hidden = shouldHide();                                                                                        // 19098
  }                                                                                                                    // 19099
                                                                                                                       // 19100
  /**                                                                                                                  // 19101
   * Determines if the menu should be hidden.                                                                          // 19102
   * @returns {boolean}                                                                                                // 19103
   */                                                                                                                  // 19104
  function shouldHide () {                                                                                             // 19105
    if (ctrl.loading && !hasMatches()) return true; // Hide while loading initial matches                              // 19106
    else if (hasSelection()) return true;           // Hide if there is already a selection                            // 19107
    else if (!hasFocus) return true;                // Hide if the input does not have focus                           // 19108
    else return !shouldShow();                      // Defer to standard show logic                                    // 19109
  }                                                                                                                    // 19110
                                                                                                                       // 19111
  /**                                                                                                                  // 19112
   * Determines if the menu should be shown.                                                                           // 19113
   * @returns {boolean}                                                                                                // 19114
   */                                                                                                                  // 19115
  function shouldShow() {                                                                                              // 19116
    return (isMinLengthMet() && hasMatches()) || notFoundVisible();                                                    // 19117
  }                                                                                                                    // 19118
                                                                                                                       // 19119
  /**                                                                                                                  // 19120
   * Returns true if the search text has matches.                                                                      // 19121
   * @returns {boolean}                                                                                                // 19122
   */                                                                                                                  // 19123
  function hasMatches() {                                                                                              // 19124
    return ctrl.matches.length ? true : false;                                                                         // 19125
  }                                                                                                                    // 19126
                                                                                                                       // 19127
  /**                                                                                                                  // 19128
   * Returns true if the autocomplete has a valid selection.                                                           // 19129
   * @returns {boolean}                                                                                                // 19130
   */                                                                                                                  // 19131
  function hasSelection() {                                                                                            // 19132
    return ctrl.scope.selectedItem ? true : false;                                                                     // 19133
  }                                                                                                                    // 19134
                                                                                                                       // 19135
  /**                                                                                                                  // 19136
   * Returns true if the loading indicator is, or should be, visible.                                                  // 19137
   * @returns {boolean}                                                                                                // 19138
   */                                                                                                                  // 19139
  function loadingIsVisible() {                                                                                        // 19140
    return ctrl.loading && !hasSelection();                                                                            // 19141
  }                                                                                                                    // 19142
                                                                                                                       // 19143
  /**                                                                                                                  // 19144
   * Returns the display value of the current item.                                                                    // 19145
   * @returns {*}                                                                                                      // 19146
   */                                                                                                                  // 19147
  function getCurrentDisplayValue () {                                                                                 // 19148
    return getDisplayValue(ctrl.matches[ ctrl.index ]);                                                                // 19149
  }                                                                                                                    // 19150
                                                                                                                       // 19151
  /**                                                                                                                  // 19152
   * Determines if the minimum length is met by the search text.                                                       // 19153
   * @returns {*}                                                                                                      // 19154
   */                                                                                                                  // 19155
  function isMinLengthMet () {                                                                                         // 19156
    return ($scope.searchText || '').length >= getMinLength();                                                         // 19157
  }                                                                                                                    // 19158
                                                                                                                       // 19159
  //-- actions                                                                                                         // 19160
                                                                                                                       // 19161
  /**                                                                                                                  // 19162
   * Defines a public property with a handler and a default value.                                                     // 19163
   * @param key                                                                                                        // 19164
   * @param handler                                                                                                    // 19165
   * @param value                                                                                                      // 19166
   */                                                                                                                  // 19167
  function defineProperty (key, handler, value) {                                                                      // 19168
    Object.defineProperty(ctrl, key, {                                                                                 // 19169
      get: function () { return value; },                                                                              // 19170
      set: function (newValue) {                                                                                       // 19171
        var oldValue = value;                                                                                          // 19172
        value        = newValue;                                                                                       // 19173
        handler(newValue, oldValue);                                                                                   // 19174
      }                                                                                                                // 19175
    });                                                                                                                // 19176
  }                                                                                                                    // 19177
                                                                                                                       // 19178
  /**                                                                                                                  // 19179
   * Selects the item at the given index.                                                                              // 19180
   * @param index                                                                                                      // 19181
   */                                                                                                                  // 19182
  function select (index) {                                                                                            // 19183
    //-- force form to update state for validation                                                                     // 19184
    $mdUtil.nextTick(function () {                                                                                     // 19185
      getDisplayValue(ctrl.matches[ index ]).then(function (val) {                                                     // 19186
        var ngModel = elements.$.input.controller('ngModel');                                                          // 19187
        ngModel.$setViewValue(val);                                                                                    // 19188
        ngModel.$render();                                                                                             // 19189
      }).finally(function () {                                                                                         // 19190
        $scope.selectedItem = ctrl.matches[ index ];                                                                   // 19191
        setLoading(false);                                                                                             // 19192
      });                                                                                                              // 19193
    }, false);                                                                                                         // 19194
  }                                                                                                                    // 19195
                                                                                                                       // 19196
  /**                                                                                                                  // 19197
   * Clears the searchText value and selected item.                                                                    // 19198
   */                                                                                                                  // 19199
  function clearValue () {                                                                                             // 19200
    // Set the loading to true so we don't see flashes of content                                                      // 19201
    setLoading(true);                                                                                                  // 19202
                                                                                                                       // 19203
    // Reset our variables                                                                                             // 19204
    ctrl.index = 0;                                                                                                    // 19205
    ctrl.matches = [];                                                                                                 // 19206
    $scope.searchText = '';                                                                                            // 19207
                                                                                                                       // 19208
    // Tell the select to fire and select nothing                                                                      // 19209
    select(-1);                                                                                                        // 19210
                                                                                                                       // 19211
    // Per http://www.w3schools.com/jsref/event_oninput.asp                                                            // 19212
    var eventObj = document.createEvent('CustomEvent');                                                                // 19213
    eventObj.initCustomEvent('input', true, true, { value: $scope.searchText });                                       // 19214
    elements.input.dispatchEvent(eventObj);                                                                            // 19215
                                                                                                                       // 19216
    elements.input.focus();                                                                                            // 19217
  }                                                                                                                    // 19218
                                                                                                                       // 19219
  /**                                                                                                                  // 19220
   * Fetches the results for the provided search text.                                                                 // 19221
   * @param searchText                                                                                                 // 19222
   */                                                                                                                  // 19223
  function fetchResults (searchText) {                                                                                 // 19224
    var items = $scope.$parent.$eval(itemExpr),                                                                        // 19225
        term  = searchText.toLowerCase();                                                                              // 19226
    if (angular.isArray(items)) {                                                                                      // 19227
      handleResults(items);                                                                                            // 19228
    } else if (items) {                                                                                                // 19229
      setLoading(true);                                                                                                // 19230
      promiseFetch = true;                                                                                             // 19231
      $mdUtil.nextTick(function () {                                                                                   // 19232
        if (items.success) items.success(handleResults);                                                               // 19233
        if (items.then)    items.then(handleResults);                                                                  // 19234
        if (items.finally) items.finally(function () {                                                                 // 19235
          setLoading(false);                                                                                           // 19236
          promiseFetch = false;                                                                                        // 19237
        });                                                                                                            // 19238
      },true, $scope);                                                                                                 // 19239
    }                                                                                                                  // 19240
    function handleResults (matches) {                                                                                 // 19241
      cache[ term ] = matches;                                                                                         // 19242
      if ((searchText || '') !== ($scope.searchText || '')) return; //-- just cache the results if old request         // 19243
      ctrl.matches = matches;                                                                                          // 19244
      ctrl.hidden  = shouldHide();                                                                                     // 19245
      if ($scope.selectOnMatch) selectItemOnMatch();                                                                   // 19246
      updateMessages();                                                                                                // 19247
      positionDropdown();                                                                                              // 19248
    }                                                                                                                  // 19249
  }                                                                                                                    // 19250
                                                                                                                       // 19251
  /**                                                                                                                  // 19252
   * Updates the ARIA messages                                                                                         // 19253
   */                                                                                                                  // 19254
  function updateMessages () {                                                                                         // 19255
    getCurrentDisplayValue().then(function (msg) {                                                                     // 19256
      ctrl.messages = [ getCountMessage(), msg ];                                                                      // 19257
    });                                                                                                                // 19258
  }                                                                                                                    // 19259
                                                                                                                       // 19260
  /**                                                                                                                  // 19261
   * Returns the ARIA message for how many results match the current query.                                            // 19262
   * @returns {*}                                                                                                      // 19263
   */                                                                                                                  // 19264
  function getCountMessage () {                                                                                        // 19265
    if (lastCount === ctrl.matches.length) return '';                                                                  // 19266
    lastCount = ctrl.matches.length;                                                                                   // 19267
    switch (ctrl.matches.length) {                                                                                     // 19268
      case 0:                                                                                                          // 19269
        return 'There are no matches available.';                                                                      // 19270
      case 1:                                                                                                          // 19271
        return 'There is 1 match available.';                                                                          // 19272
      default:                                                                                                         // 19273
        return 'There are ' + ctrl.matches.length + ' matches available.';                                             // 19274
    }                                                                                                                  // 19275
  }                                                                                                                    // 19276
                                                                                                                       // 19277
  /**                                                                                                                  // 19278
   * Makes sure that the focused element is within view.                                                               // 19279
   */                                                                                                                  // 19280
  function updateScroll () {                                                                                           // 19281
    if (!elements.li[0]) return;                                                                                       // 19282
    var height = elements.li[0].offsetHeight,                                                                          // 19283
        top = height * ctrl.index,                                                                                     // 19284
        bot = top + height,                                                                                            // 19285
        hgt = elements.scroller.clientHeight,                                                                          // 19286
        scrollTop = elements.scroller.scrollTop;                                                                       // 19287
    if (top < scrollTop) {                                                                                             // 19288
      scrollTo(top);                                                                                                   // 19289
    } else if (bot > scrollTop + hgt) {                                                                                // 19290
      scrollTo(bot - hgt);                                                                                             // 19291
    }                                                                                                                  // 19292
  }                                                                                                                    // 19293
                                                                                                                       // 19294
  function scrollTo (offset) {                                                                                         // 19295
    elements.$.scrollContainer.controller('mdVirtualRepeatContainer').scrollTo(offset);                                // 19296
  }                                                                                                                    // 19297
                                                                                                                       // 19298
  function notFoundVisible () {                                                                                        // 19299
    var textLength = (ctrl.scope.searchText || '').length;                                                             // 19300
                                                                                                                       // 19301
    return ctrl.hasNotFound && !hasMatches() && (!ctrl.loading || promiseFetch) && textLength >= getMinLength() && (hasFocus || noBlur) && !hasSelection();
  }                                                                                                                    // 19303
                                                                                                                       // 19304
  /**                                                                                                                  // 19305
   * Starts the query to gather the results for the current searchText.  Attempts to return cached                     // 19306
   * results first, then forwards the process to `fetchResults` if necessary.                                          // 19307
   */                                                                                                                  // 19308
  function handleQuery () {                                                                                            // 19309
    var searchText = $scope.searchText || '',                                                                          // 19310
        term       = searchText.toLowerCase();                                                                         // 19311
    //-- if results are cached, pull in cached results                                                                 // 19312
    if (!$scope.noCache && cache[ term ]) {                                                                            // 19313
      ctrl.matches = cache[ term ];                                                                                    // 19314
      updateMessages();                                                                                                // 19315
    } else {                                                                                                           // 19316
      fetchResults(searchText);                                                                                        // 19317
    }                                                                                                                  // 19318
                                                                                                                       // 19319
    ctrl.hidden = shouldHide();                                                                                        // 19320
  }                                                                                                                    // 19321
                                                                                                                       // 19322
  /**                                                                                                                  // 19323
   * If there is only one matching item and the search text matches its display value exactly,                         // 19324
   * automatically select that item.  Note: This function is only called if the user uses the                          // 19325
   * `md-select-on-match` flag.                                                                                        // 19326
   */                                                                                                                  // 19327
  function selectItemOnMatch () {                                                                                      // 19328
    var searchText = $scope.searchText,                                                                                // 19329
        matches    = ctrl.matches,                                                                                     // 19330
        item       = matches[ 0 ];                                                                                     // 19331
    if (matches.length === 1) getDisplayValue(item).then(function (displayValue) {                                     // 19332
      if (searchText == displayValue) select(0);                                                                       // 19333
    });                                                                                                                // 19334
  }                                                                                                                    // 19335
                                                                                                                       // 19336
}                                                                                                                      // 19337
MdAutocompleteCtrl.$inject = ["$scope", "$element", "$mdUtil", "$mdConstant", "$mdTheming", "$window", "$animate", "$rootElement", "$attrs", "$q"];
                                                                                                                       // 19339
})();                                                                                                                  // 19340
(function(){                                                                                                           // 19341
"use strict";                                                                                                          // 19342
                                                                                                                       // 19343
angular                                                                                                                // 19344
    .module('material.components.autocomplete')                                                                        // 19345
    .directive('mdAutocomplete', MdAutocomplete);                                                                      // 19346
                                                                                                                       // 19347
/**                                                                                                                    // 19348
 * @ngdoc directive                                                                                                    // 19349
 * @name mdAutocomplete                                                                                                // 19350
 * @module material.components.autocomplete                                                                            // 19351
 *                                                                                                                     // 19352
 * @description                                                                                                        // 19353
 * `<md-autocomplete>` is a special input component with a drop-down of all possible matches to a                      // 19354
 *     custom query. This component allows you to provide real-time suggestions as the user types                      // 19355
 *     in the input area.                                                                                              // 19356
 *                                                                                                                     // 19357
 * To start, you will need to specify the required parameters and provide a template for your                          // 19358
 *     results. The content inside `md-autocomplete` will be treated as a template.                                    // 19359
 *                                                                                                                     // 19360
 * In more complex cases, you may want to include other content such as a message to display when                      // 19361
 *     no matches were found.  You can do this by wrapping your template in `md-item-template` and                     // 19362
 *     adding a tag for `md-not-found`.  An example of this is shown below.                                            // 19363
 *                                                                                                                     // 19364
 * ### Validation                                                                                                      // 19365
 *                                                                                                                     // 19366
 * You can use `ng-messages` to include validation the same way that you would normally validate;                      // 19367
 *     however, if you want to replicate a standard input with a floating label, you will have to                      // 19368
 *     do the following:                                                                                               // 19369
 *                                                                                                                     // 19370
 * - Make sure that your template is wrapped in `md-item-template`                                                     // 19371
 * - Add your `ng-messages` code inside of `md-autocomplete`                                                           // 19372
 * - Add your validation properties to `md-autocomplete` (ie. `required`)                                              // 19373
 * - Add a `name` to `md-autocomplete` (to be used on the generated `input`)                                           // 19374
 *                                                                                                                     // 19375
 * There is an example below of how this should look.                                                                  // 19376
 *                                                                                                                     // 19377
 *                                                                                                                     // 19378
 * @param {expression} md-items An expression in the format of `item in items` to iterate over                         // 19379
 *     matches for your search.                                                                                        // 19380
 * @param {expression=} md-selected-item-change An expression to be run each time a new item is                        // 19381
 *     selected                                                                                                        // 19382
 * @param {expression=} md-search-text-change An expression to be run each time the search text                        // 19383
 *     updates                                                                                                         // 19384
 * @param {expression=} md-search-text A model to bind the search query text to                                        // 19385
 * @param {object=} md-selected-item A model to bind the selected item to                                              // 19386
 * @param {expression=} md-item-text An expression that will convert your object to a single string.                   // 19387
 * @param {string=} placeholder Placeholder text that will be forwarded to the input.                                  // 19388
 * @param {boolean=} md-no-cache Disables the internal caching that happens in autocomplete                            // 19389
 * @param {boolean=} ng-disabled Determines whether or not to disable the input field                                  // 19390
 * @param {number=} md-min-length Specifies the minimum length of text before autocomplete will                        // 19391
 *     make suggestions                                                                                                // 19392
 * @param {number=} md-delay Specifies the amount of time (in milliseconds) to wait before looking                     // 19393
 *     for results                                                                                                     // 19394
 * @param {boolean=} md-autofocus If true, the autocomplete will be automatically focused when a `$mdDialog`,          // 19395
 *     `$mdBottomsheet` or `$mdSidenav`, which contains the autocomplete, is opening. <br/><br/>                       // 19396
 *     Also the autocomplete will immediately focus the input element.                                                 // 19397
 * @param {boolean=} md-autoselect If true, the first item will be selected by default                                 // 19398
 * @param {string=} md-menu-class This will be applied to the dropdown menu for styling                                // 19399
 * @param {string=} md-floating-label This will add a floating label to autocomplete and wrap it in                    // 19400
 *     `md-input-container`                                                                                            // 19401
 * @param {string=} md-input-name The name attribute given to the input element to be used with                        // 19402
 *     FormController                                                                                                  // 19403
 * @param {string=} md-input-id An ID to be added to the input element                                                 // 19404
 * @param {number=} md-input-minlength The minimum length for the input's value for validation                         // 19405
 * @param {number=} md-input-maxlength The maximum length for the input's value for validation                         // 19406
 * @param {boolean=} md-select-on-match When set, autocomplete will automatically select exact                         // 19407
 *     the item if the search text is an exact match                                                                   // 19408
 *                                                                                                                     // 19409
 * @usage                                                                                                              // 19410
 * ### Basic Example                                                                                                   // 19411
 * <hljs lang="html">                                                                                                  // 19412
 *   <md-autocomplete                                                                                                  // 19413
 *       md-selected-item="selectedItem"                                                                               // 19414
 *       md-search-text="searchText"                                                                                   // 19415
 *       md-items="item in getMatches(searchText)"                                                                     // 19416
 *       md-item-text="item.display">                                                                                  // 19417
 *     <span md-highlight-text="searchText">{{item.display}}</span>                                                    // 19418
 *   </md-autocomplete>                                                                                                // 19419
 * </hljs>                                                                                                             // 19420
 *                                                                                                                     // 19421
 * ### Example with "not found" message                                                                                // 19422
 * <hljs lang="html">                                                                                                  // 19423
 * <md-autocomplete                                                                                                    // 19424
 *     md-selected-item="selectedItem"                                                                                 // 19425
 *     md-search-text="searchText"                                                                                     // 19426
 *     md-items="item in getMatches(searchText)"                                                                       // 19427
 *     md-item-text="item.display">                                                                                    // 19428
 *   <md-item-template>                                                                                                // 19429
 *     <span md-highlight-text="searchText">{{item.display}}</span>                                                    // 19430
 *   </md-item-template>                                                                                               // 19431
 *   <md-not-found>                                                                                                    // 19432
 *     No matches found.                                                                                               // 19433
 *   </md-not-found>                                                                                                   // 19434
 * </md-autocomplete>                                                                                                  // 19435
 * </hljs>                                                                                                             // 19436
 *                                                                                                                     // 19437
 * In this example, our code utilizes `md-item-template` and `md-not-found` to specify the                             // 19438
 *     different parts that make up our component.                                                                     // 19439
 *                                                                                                                     // 19440
 * ### Example with validation                                                                                         // 19441
 * <hljs lang="html">                                                                                                  // 19442
 * <form name="autocompleteForm">                                                                                      // 19443
 *   <md-autocomplete                                                                                                  // 19444
 *       required                                                                                                      // 19445
 *       md-input-name="autocomplete"                                                                                  // 19446
 *       md-selected-item="selectedItem"                                                                               // 19447
 *       md-search-text="searchText"                                                                                   // 19448
 *       md-items="item in getMatches(searchText)"                                                                     // 19449
 *       md-item-text="item.display">                                                                                  // 19450
 *     <md-item-template>                                                                                              // 19451
 *       <span md-highlight-text="searchText">{{item.display}}</span>                                                  // 19452
 *     </md-item-template>                                                                                             // 19453
 *     <div ng-messages="autocompleteForm.autocomplete.$error">                                                        // 19454
 *       <div ng-message="required">This field is required</div>                                                       // 19455
 *     </div>                                                                                                          // 19456
 *   </md-autocomplete>                                                                                                // 19457
 * </form>                                                                                                             // 19458
 * </hljs>                                                                                                             // 19459
 *                                                                                                                     // 19460
 * In this example, our code utilizes `md-item-template` and `md-not-found` to specify the                             // 19461
 *     different parts that make up our component.                                                                     // 19462
 */                                                                                                                    // 19463
                                                                                                                       // 19464
function MdAutocomplete () {                                                                                           // 19465
                                                                                                                       // 19466
  return {                                                                                                             // 19467
    controller:   'MdAutocompleteCtrl',                                                                                // 19468
    controllerAs: '$mdAutocompleteCtrl',                                                                               // 19469
    scope:        {                                                                                                    // 19470
      inputName:      '@mdInputName',                                                                                  // 19471
      inputMinlength: '@mdInputMinlength',                                                                             // 19472
      inputMaxlength: '@mdInputMaxlength',                                                                             // 19473
      searchText:     '=?mdSearchText',                                                                                // 19474
      selectedItem:   '=?mdSelectedItem',                                                                              // 19475
      itemsExpr:      '@mdItems',                                                                                      // 19476
      itemText:       '&mdItemText',                                                                                   // 19477
      placeholder:    '@placeholder',                                                                                  // 19478
      noCache:        '=?mdNoCache',                                                                                   // 19479
      selectOnMatch:  '=?mdSelectOnMatch',                                                                             // 19480
      itemChange:     '&?mdSelectedItemChange',                                                                        // 19481
      textChange:     '&?mdSearchTextChange',                                                                          // 19482
      minLength:      '=?mdMinLength',                                                                                 // 19483
      delay:          '=?mdDelay',                                                                                     // 19484
      autofocus:      '=?mdAutofocus',                                                                                 // 19485
      floatingLabel:  '@?mdFloatingLabel',                                                                             // 19486
      autoselect:     '=?mdAutoselect',                                                                                // 19487
      menuClass:      '@?mdMenuClass',                                                                                 // 19488
      inputId:        '@?mdInputId'                                                                                    // 19489
    },                                                                                                                 // 19490
    link: function(scope, element, attrs, controller) {                                                                // 19491
      // Retrieve the state of using a md-not-found template by using our attribute, which will                        // 19492
      // be added to the element in the template function.                                                             // 19493
      controller.hasNotFound = !!element.attr('md-has-not-found');                                                     // 19494
    },                                                                                                                 // 19495
    template:     function (element, attr) {                                                                           // 19496
      var noItemsTemplate = getNoItemsTemplate(),                                                                      // 19497
          itemTemplate    = getItemTemplate(),                                                                         // 19498
          leftover        = element.html(),                                                                            // 19499
          tabindex        = attr.tabindex;                                                                             // 19500
                                                                                                                       // 19501
      // Set our attribute for the link function above which runs later.                                               // 19502
      // We will set an attribute, because otherwise the stored variables will be trashed when                         // 19503
      // removing the element is hidden while retrieving the template. For example when using ngIf.                    // 19504
      if (noItemsTemplate) element.attr('md-has-not-found', true);                                                     // 19505
                                                                                                                       // 19506
      if (!attr.hasOwnProperty('tabindex')) element.attr('tabindex', '-1');                                            // 19507
                                                                                                                       // 19508
      return '\
        <md-autocomplete-wrap\
            layout="row"\
            ng-class="{ \'md-whiteframe-z1\': !floatingLabel, \'md-menu-showing\': !$mdAutocompleteCtrl.hidden }"\
            role="listbox">\
          ' + getInputElement() + '\
          <md-progress-linear\
              class="' + (attr.mdFloatingLabel ? 'md-inline' : '') + '"\
              ng-if="$mdAutocompleteCtrl.loadingIsVisible()"\
              md-mode="indeterminate"></md-progress-linear>\
          <md-virtual-repeat-container\
              md-auto-shrink\
              md-auto-shrink-min="1"\
              ng-mouseenter="$mdAutocompleteCtrl.listEnter()"\
              ng-mouseleave="$mdAutocompleteCtrl.listLeave()"\
              ng-mouseup="$mdAutocompleteCtrl.mouseUp()"\
              ng-hide="$mdAutocompleteCtrl.hidden"\
              class="md-autocomplete-suggestions-container md-whiteframe-z1"\
              ng-class="{ \'md-not-found\': $mdAutocompleteCtrl.notFoundVisible() }"\
              role="presentation">\
            <ul class="md-autocomplete-suggestions"\
                ng-class="::menuClass"\
                id="ul-{{$mdAutocompleteCtrl.id}}">\
              <li md-virtual-repeat="item in $mdAutocompleteCtrl.matches"\
                  ng-class="{ selected: $index === $mdAutocompleteCtrl.index }"\
                  ng-click="$mdAutocompleteCtrl.select($index)"\
                  md-extra-name="$mdAutocompleteCtrl.itemName">\
                  ' + itemTemplate + '\
                  </li>' + noItemsTemplate + '\
            </ul>\
          </md-virtual-repeat-container>\
        </md-autocomplete-wrap>\
        <aria-status\
            class="md-visually-hidden"\
            role="status"\
            aria-live="assertive">\
          <p ng-repeat="message in $mdAutocompleteCtrl.messages track by $index" ng-if="message">{{message}}</p>\
        </aria-status>';                                                                                               // 19546
                                                                                                                       // 19547
      function getItemTemplate() {                                                                                     // 19548
        var templateTag = element.find('md-item-template').detach(),                                                   // 19549
            html = templateTag.length ? templateTag.html() : element.html();                                           // 19550
        if (!templateTag.length) element.empty();                                                                      // 19551
        return '<md-autocomplete-parent-scope md-autocomplete-replace>' + html + '</md-autocomplete-parent-scope>';    // 19552
      }                                                                                                                // 19553
                                                                                                                       // 19554
      function getNoItemsTemplate() {                                                                                  // 19555
        var templateTag = element.find('md-not-found').detach(),                                                       // 19556
            template = templateTag.length ? templateTag.html() : '';                                                   // 19557
        return template                                                                                                // 19558
            ? '<li ng-if="$mdAutocompleteCtrl.notFoundVisible()"\
                         md-autocomplete-parent-scope>' + template + '</li>'                                           // 19560
            : '';                                                                                                      // 19561
                                                                                                                       // 19562
      }                                                                                                                // 19563
                                                                                                                       // 19564
      function getInputElement () {                                                                                    // 19565
        if (attr.mdFloatingLabel) {                                                                                    // 19566
          return '\
            <md-input-container flex ng-if="floatingLabel">\
              <label>{{floatingLabel}}</label>\
              <input type="search"\
                  ' + (tabindex != null ? 'tabindex="' + tabindex + '"' : '') + '\
                  id="{{ inputId || \'fl-input-\' + $mdAutocompleteCtrl.id }}"\
                  name="{{inputName}}"\
                  autocomplete="off"\
                  ng-required="$mdAutocompleteCtrl.isRequired"\
                  ng-minlength="inputMinlength"\
                  ng-maxlength="inputMaxlength"\
                  ng-disabled="$mdAutocompleteCtrl.isDisabled"\
                  ng-model="$mdAutocompleteCtrl.scope.searchText"\
                  ng-keydown="$mdAutocompleteCtrl.keydown($event)"\
                  ng-blur="$mdAutocompleteCtrl.blur()"\
                  ng-focus="$mdAutocompleteCtrl.focus()"\
                  aria-owns="ul-{{$mdAutocompleteCtrl.id}}"\
                  aria-label="{{floatingLabel}}"\
                  aria-autocomplete="list"\
                  aria-haspopup="true"\
                  aria-activedescendant=""\
                  aria-expanded="{{!$mdAutocompleteCtrl.hidden}}"/>\
              <div md-autocomplete-parent-scope md-autocomplete-replace>' + leftover + '</div>\
            </md-input-container>';                                                                                    // 19590
        } else {                                                                                                       // 19591
          return '\
            <input flex type="search"\
                ' + (tabindex != null ? 'tabindex="' + tabindex + '"' : '') + '\
                id="{{ inputId || \'input-\' + $mdAutocompleteCtrl.id }}"\
                name="{{inputName}}"\
                ng-if="!floatingLabel"\
                autocomplete="off"\
                ng-required="$mdAutocompleteCtrl.isRequired"\
                ng-disabled="$mdAutocompleteCtrl.isDisabled"\
                ng-model="$mdAutocompleteCtrl.scope.searchText"\
                ng-keydown="$mdAutocompleteCtrl.keydown($event)"\
                ng-blur="$mdAutocompleteCtrl.blur()"\
                ng-focus="$mdAutocompleteCtrl.focus()"\
                placeholder="{{placeholder}}"\
                aria-owns="ul-{{$mdAutocompleteCtrl.id}}"\
                aria-label="{{placeholder}}"\
                aria-autocomplete="list"\
                aria-haspopup="true"\
                aria-activedescendant=""\
                aria-expanded="{{!$mdAutocompleteCtrl.hidden}}"/>\
            <button\
                type="button"\
                tabindex="-1"\
                ng-if="$mdAutocompleteCtrl.scope.searchText && !$mdAutocompleteCtrl.isDisabled"\
                ng-click="$mdAutocompleteCtrl.clear()">\
              <md-icon md-svg-icon="md-close"></md-icon>\
              <span class="md-visually-hidden">Clear</span>\
            </button>\
                ';                                                                                                     // 19620
        }                                                                                                              // 19621
      }                                                                                                                // 19622
    }                                                                                                                  // 19623
  };                                                                                                                   // 19624
}                                                                                                                      // 19625
                                                                                                                       // 19626
})();                                                                                                                  // 19627
(function(){                                                                                                           // 19628
"use strict";                                                                                                          // 19629
                                                                                                                       // 19630
angular                                                                                                                // 19631
  .module('material.components.autocomplete')                                                                          // 19632
  .directive('mdAutocompleteParentScope', MdAutocompleteItemScopeDirective);                                           // 19633
                                                                                                                       // 19634
function MdAutocompleteItemScopeDirective($compile, $mdUtil) {                                                         // 19635
  return {                                                                                                             // 19636
    restrict: 'AE',                                                                                                    // 19637
    compile: compile,                                                                                                  // 19638
    terminal: true,                                                                                                    // 19639
    transclude: 'element'                                                                                              // 19640
  };                                                                                                                   // 19641
                                                                                                                       // 19642
  function compile(tElement, tAttr, transclude) {                                                                      // 19643
    return function postLink(scope, element, attr) {                                                                   // 19644
      var ctrl = scope.$mdAutocompleteCtrl;                                                                            // 19645
      var newScope = ctrl.parent.$new();                                                                               // 19646
      var itemName = ctrl.itemName;                                                                                    // 19647
                                                                                                                       // 19648
      // Watch for changes to our scope's variables and copy them to the new scope                                     // 19649
      watchVariable('$index', '$index');                                                                               // 19650
      watchVariable('item', itemName);                                                                                 // 19651
                                                                                                                       // 19652
      // Ensure that $digest calls on our scope trigger $digest on newScope.                                           // 19653
      connectScopes();                                                                                                 // 19654
                                                                                                                       // 19655
      // Link the element against newScope.                                                                            // 19656
      transclude(newScope, function(clone) {                                                                           // 19657
        element.after(clone);                                                                                          // 19658
      });                                                                                                              // 19659
                                                                                                                       // 19660
      /**                                                                                                              // 19661
       * Creates a watcher for variables that are copied from the parent scope                                         // 19662
       * @param variable                                                                                               // 19663
       * @param alias                                                                                                  // 19664
       */                                                                                                              // 19665
      function watchVariable(variable, alias) {                                                                        // 19666
        newScope[alias] = scope[variable];                                                                             // 19667
                                                                                                                       // 19668
        scope.$watch(variable, function(value) {                                                                       // 19669
          $mdUtil.nextTick(function() {                                                                                // 19670
            newScope[alias] = value;                                                                                   // 19671
          });                                                                                                          // 19672
        });                                                                                                            // 19673
      }                                                                                                                // 19674
                                                                                                                       // 19675
      /**                                                                                                              // 19676
       * Creates watchers on scope and newScope that ensure that for any                                               // 19677
       * $digest of scope, newScope is also $digested.                                                                 // 19678
       */                                                                                                              // 19679
      function connectScopes() {                                                                                       // 19680
        var scopeDigesting = false;                                                                                    // 19681
        var newScopeDigesting = false;                                                                                 // 19682
                                                                                                                       // 19683
        scope.$watch(function() {                                                                                      // 19684
          if (newScopeDigesting || scopeDigesting) {                                                                   // 19685
            return;                                                                                                    // 19686
          }                                                                                                            // 19687
                                                                                                                       // 19688
          scopeDigesting = true;                                                                                       // 19689
          scope.$$postDigest(function() {                                                                              // 19690
            if (!newScopeDigesting) {                                                                                  // 19691
              newScope.$digest();                                                                                      // 19692
            }                                                                                                          // 19693
                                                                                                                       // 19694
            scopeDigesting = newScopeDigesting = false;                                                                // 19695
          });                                                                                                          // 19696
        });                                                                                                            // 19697
                                                                                                                       // 19698
        newScope.$watch(function() {                                                                                   // 19699
          newScopeDigesting = true;                                                                                    // 19700
        });                                                                                                            // 19701
      }                                                                                                                // 19702
    };                                                                                                                 // 19703
  }                                                                                                                    // 19704
}                                                                                                                      // 19705
MdAutocompleteItemScopeDirective.$inject = ["$compile", "$mdUtil"];                                                    // 19706
})();                                                                                                                  // 19707
(function(){                                                                                                           // 19708
"use strict";                                                                                                          // 19709
                                                                                                                       // 19710
angular                                                                                                                // 19711
    .module('material.components.autocomplete')                                                                        // 19712
    .controller('MdHighlightCtrl', MdHighlightCtrl);                                                                   // 19713
                                                                                                                       // 19714
function MdHighlightCtrl ($scope, $element, $attrs) {                                                                  // 19715
  this.init = init;                                                                                                    // 19716
                                                                                                                       // 19717
  function init (termExpr, unsafeTextExpr) {                                                                           // 19718
    var text = null,                                                                                                   // 19719
        regex = null,                                                                                                  // 19720
        flags = $attrs.mdHighlightFlags || '',                                                                         // 19721
        watcher = $scope.$watch(function($scope) {                                                                     // 19722
          return {                                                                                                     // 19723
            term: termExpr($scope),                                                                                    // 19724
            unsafeText: unsafeTextExpr($scope)                                                                         // 19725
          };                                                                                                           // 19726
        }, function (state, prevState) {                                                                               // 19727
          if (text === null || state.unsafeText !== prevState.unsafeText) {                                            // 19728
            text = angular.element('<div>').text(state.unsafeText).html()                                              // 19729
          }                                                                                                            // 19730
          if (regex === null || state.term !== prevState.term) {                                                       // 19731
            regex = getRegExp(state.term, flags);                                                                      // 19732
          }                                                                                                            // 19733
                                                                                                                       // 19734
          $element.html(text.replace(regex, '<span class="highlight">$&</span>'));                                     // 19735
        }, true);                                                                                                      // 19736
    $element.on('$destroy', watcher);                                                                                  // 19737
  }                                                                                                                    // 19738
                                                                                                                       // 19739
  function sanitize (term) {                                                                                           // 19740
    return term && term.replace(/[\\\^\$\*\+\?\.\(\)\|\{}\[\]]/g, '\\$&');                                             // 19741
  }                                                                                                                    // 19742
                                                                                                                       // 19743
  function getRegExp (text, flags) {                                                                                   // 19744
    var str = '';                                                                                                      // 19745
    if (flags.indexOf('^') >= 1) str += '^';                                                                           // 19746
    str += text;                                                                                                       // 19747
    if (flags.indexOf('$') >= 1) str += '$';                                                                           // 19748
    return new RegExp(sanitize(str), flags.replace(/[\$\^]/g, ''));                                                    // 19749
  }                                                                                                                    // 19750
}                                                                                                                      // 19751
MdHighlightCtrl.$inject = ["$scope", "$element", "$attrs"];                                                            // 19752
                                                                                                                       // 19753
})();                                                                                                                  // 19754
(function(){                                                                                                           // 19755
"use strict";                                                                                                          // 19756
                                                                                                                       // 19757
angular                                                                                                                // 19758
    .module('material.components.autocomplete')                                                                        // 19759
    .directive('mdHighlightText', MdHighlight);                                                                        // 19760
                                                                                                                       // 19761
/**                                                                                                                    // 19762
 * @ngdoc directive                                                                                                    // 19763
 * @name mdHighlightText                                                                                               // 19764
 * @module material.components.autocomplete                                                                            // 19765
 *                                                                                                                     // 19766
 * @description                                                                                                        // 19767
 * The `md-highlight-text` directive allows you to specify text that should be highlighted within                      // 19768
 *     an element.  Highlighted text will be wrapped in `<span class="highlight"></span>` which can                    // 19769
 *     be styled through CSS.  Please note that child elements may not be used with this directive.                    // 19770
 *                                                                                                                     // 19771
 * @param {string} md-highlight-text A model to be searched for                                                        // 19772
 * @param {string=} md-highlight-flags A list of flags (loosely based on JavaScript RexExp flags).                     // 19773
 * #### **Supported flags**:                                                                                           // 19774
 * - `g`: Find all matches within the provided text                                                                    // 19775
 * - `i`: Ignore case when searching for matches                                                                       // 19776
 * - `$`: Only match if the text ends with the search term                                                             // 19777
 * - `^`: Only match if the text begins with the search term                                                           // 19778
 *                                                                                                                     // 19779
 * @usage                                                                                                              // 19780
 * <hljs lang="html">                                                                                                  // 19781
 * <input placeholder="Enter a search term..." ng-model="searchTerm" type="text" />                                    // 19782
 * <ul>                                                                                                                // 19783
 *   <li ng-repeat="result in results" md-highlight-text="searchTerm">                                                 // 19784
 *     {{result.text}}                                                                                                 // 19785
 *   </li>                                                                                                             // 19786
 * </ul>                                                                                                               // 19787
 * </hljs>                                                                                                             // 19788
 */                                                                                                                    // 19789
                                                                                                                       // 19790
function MdHighlight ($interpolate, $parse) {                                                                          // 19791
  return {                                                                                                             // 19792
    terminal: true,                                                                                                    // 19793
    controller: 'MdHighlightCtrl',                                                                                     // 19794
    compile: function mdHighlightCompile(tElement, tAttr) {                                                            // 19795
      var termExpr = $parse(tAttr.mdHighlightText);                                                                    // 19796
      var unsafeTextExpr = $interpolate(tElement.html());                                                              // 19797
                                                                                                                       // 19798
      return function mdHighlightLink(scope, element, attr, ctrl) {                                                    // 19799
        ctrl.init(termExpr, unsafeTextExpr);                                                                           // 19800
      };                                                                                                               // 19801
    }                                                                                                                  // 19802
  };                                                                                                                   // 19803
}                                                                                                                      // 19804
MdHighlight.$inject = ["$interpolate", "$parse"];                                                                      // 19805
                                                                                                                       // 19806
})();                                                                                                                  // 19807
(function(){                                                                                                           // 19808
"use strict";                                                                                                          // 19809
                                                                                                                       // 19810
angular                                                                                                                // 19811
    .module('material.components.chips')                                                                               // 19812
    .directive('mdChip', MdChip);                                                                                      // 19813
                                                                                                                       // 19814
/**                                                                                                                    // 19815
 * @ngdoc directive                                                                                                    // 19816
 * @name mdChip                                                                                                        // 19817
 * @module material.components.chips                                                                                   // 19818
 *                                                                                                                     // 19819
 * @description                                                                                                        // 19820
 * `<md-chip>` is a component used within `<md-chips>` and is responsible for rendering individual                     // 19821
 * chips.                                                                                                              // 19822
 *                                                                                                                     // 19823
 *                                                                                                                     // 19824
 * @usage                                                                                                              // 19825
 * <hljs lang="html">                                                                                                  // 19826
 *   <md-chip>{{$chip}}</md-chip>                                                                                      // 19827
 * </hljs>                                                                                                             // 19828
 *                                                                                                                     // 19829
 */                                                                                                                    // 19830
                                                                                                                       // 19831
// This hint text is hidden within a chip but used by screen readers to                                                // 19832
// inform the user how they can interact with a chip.                                                                  // 19833
var DELETE_HINT_TEMPLATE = '\
    <span ng-if="!$mdChipsCtrl.readonly" class="md-visually-hidden">\
      {{$mdChipsCtrl.deleteHint}}\
    </span>';                                                                                                          // 19837
                                                                                                                       // 19838
/**                                                                                                                    // 19839
 * MDChip Directive Definition                                                                                         // 19840
 *                                                                                                                     // 19841
 * @param $mdTheming                                                                                                   // 19842
 * @param $mdInkRipple                                                                                                 // 19843
 * @ngInject                                                                                                           // 19844
 */                                                                                                                    // 19845
function MdChip($mdTheming, $mdUtil) {                                                                                 // 19846
  var hintTemplate = $mdUtil.processTemplate(DELETE_HINT_TEMPLATE);                                                    // 19847
                                                                                                                       // 19848
  return {                                                                                                             // 19849
    restrict: 'E',                                                                                                     // 19850
    require: '^?mdChips',                                                                                              // 19851
    compile:  compile                                                                                                  // 19852
  };                                                                                                                   // 19853
                                                                                                                       // 19854
  function compile(element, attr) {                                                                                    // 19855
    // Append the delete template                                                                                      // 19856
    element.append($mdUtil.processTemplate(hintTemplate));                                                             // 19857
                                                                                                                       // 19858
    return function postLink(scope, element, attr, ctrl) {                                                             // 19859
      element.addClass('md-chip');                                                                                     // 19860
      $mdTheming(element);                                                                                             // 19861
                                                                                                                       // 19862
      if (ctrl) angular.element(element[0].querySelector('.md-chip-content'))                                          // 19863
          .on('blur', function () {                                                                                    // 19864
            ctrl.selectedChip = -1;                                                                                    // 19865
          });                                                                                                          // 19866
    };                                                                                                                 // 19867
  }                                                                                                                    // 19868
}                                                                                                                      // 19869
MdChip.$inject = ["$mdTheming", "$mdUtil"];                                                                            // 19870
                                                                                                                       // 19871
})();                                                                                                                  // 19872
(function(){                                                                                                           // 19873
"use strict";                                                                                                          // 19874
                                                                                                                       // 19875
angular                                                                                                                // 19876
    .module('material.components.chips')                                                                               // 19877
    .directive('mdChipRemove', MdChipRemove);                                                                          // 19878
                                                                                                                       // 19879
/**                                                                                                                    // 19880
 * @ngdoc directive                                                                                                    // 19881
 * @name mdChipRemove                                                                                                  // 19882
 * @module material.components.chips                                                                                   // 19883
 *                                                                                                                     // 19884
 * @description                                                                                                        // 19885
 * `<md-chip-remove>`                                                                                                  // 19886
 * Designates an element to be used as the delete button for a chip. This                                              // 19887
 * element is passed as a child of the `md-chips` element.                                                             // 19888
 *                                                                                                                     // 19889
 * @usage                                                                                                              // 19890
 * <hljs lang="html">                                                                                                  // 19891
 *   <md-chips><button md-chip-remove>DEL</button></md-chips>                                                          // 19892
 * </hljs>                                                                                                             // 19893
 */                                                                                                                    // 19894
                                                                                                                       // 19895
                                                                                                                       // 19896
/**                                                                                                                    // 19897
 * MdChipRemove Directive Definition.                                                                                  // 19898
 *                                                                                                                     // 19899
 * @param $compile                                                                                                     // 19900
 * @param $timeout                                                                                                     // 19901
 * @returns {{restrict: string, require: string[], link: Function, scope: boolean}}                                    // 19902
 * @constructor                                                                                                        // 19903
 */                                                                                                                    // 19904
function MdChipRemove ($timeout) {                                                                                     // 19905
  return {                                                                                                             // 19906
    restrict: 'A',                                                                                                     // 19907
    require: '^mdChips',                                                                                               // 19908
    scope: false,                                                                                                      // 19909
    link: postLink                                                                                                     // 19910
  };                                                                                                                   // 19911
                                                                                                                       // 19912
  function postLink(scope, element, attr, ctrl) {                                                                      // 19913
    element.on('click', function(event) {                                                                              // 19914
      scope.$apply(function() {                                                                                        // 19915
        ctrl.removeChip(scope.$$replacedScope.$index);                                                                 // 19916
      });                                                                                                              // 19917
    });                                                                                                                // 19918
                                                                                                                       // 19919
    // Child elements aren't available until after a $timeout tick as they are hidden by an                            // 19920
    // `ng-if`. see http://goo.gl/zIWfuw                                                                               // 19921
    $timeout(function() {                                                                                              // 19922
      element.attr({ tabindex: -1, 'aria-hidden': true });                                                             // 19923
      element.find('button').attr('tabindex', '-1');                                                                   // 19924
    });                                                                                                                // 19925
  }                                                                                                                    // 19926
}                                                                                                                      // 19927
MdChipRemove.$inject = ["$timeout"];                                                                                   // 19928
                                                                                                                       // 19929
})();                                                                                                                  // 19930
(function(){                                                                                                           // 19931
"use strict";                                                                                                          // 19932
                                                                                                                       // 19933
angular                                                                                                                // 19934
    .module('material.components.chips')                                                                               // 19935
    .directive('mdChipTransclude', MdChipTransclude);                                                                  // 19936
                                                                                                                       // 19937
function MdChipTransclude ($compile) {                                                                                 // 19938
  return {                                                                                                             // 19939
    restrict: 'EA',                                                                                                    // 19940
    terminal: true,                                                                                                    // 19941
    link: link,                                                                                                        // 19942
    scope: false                                                                                                       // 19943
  };                                                                                                                   // 19944
  function link (scope, element, attr) {                                                                               // 19945
    var ctrl = scope.$parent.$mdChipsCtrl,                                                                             // 19946
        newScope = ctrl.parent.$new(false, ctrl.parent);                                                               // 19947
    newScope.$$replacedScope = scope;                                                                                  // 19948
    newScope.$chip = scope.$chip;                                                                                      // 19949
    newScope.$index = scope.$index;                                                                                    // 19950
    newScope.$mdChipsCtrl = ctrl;                                                                                      // 19951
                                                                                                                       // 19952
    var newHtml = ctrl.$scope.$eval(attr.mdChipTransclude);                                                            // 19953
                                                                                                                       // 19954
    element.html(newHtml);                                                                                             // 19955
    $compile(element.contents())(newScope);                                                                            // 19956
  }                                                                                                                    // 19957
}                                                                                                                      // 19958
MdChipTransclude.$inject = ["$compile"];                                                                               // 19959
                                                                                                                       // 19960
})();                                                                                                                  // 19961
(function(){                                                                                                           // 19962
"use strict";                                                                                                          // 19963
                                                                                                                       // 19964
angular                                                                                                                // 19965
    .module('material.components.chips')                                                                               // 19966
    .controller('MdChipsCtrl', MdChipsCtrl);                                                                           // 19967
                                                                                                                       // 19968
/**                                                                                                                    // 19969
 * Controller for the MdChips component. Responsible for adding to and                                                 // 19970
 * removing from the list of chips, marking chips as selected, and binding to                                          // 19971
 * the models of various input components.                                                                             // 19972
 *                                                                                                                     // 19973
 * @param $scope                                                                                                       // 19974
 * @param $mdConstant                                                                                                  // 19975
 * @param $log                                                                                                         // 19976
 * @param $element                                                                                                     // 19977
 * @constructor                                                                                                        // 19978
 */                                                                                                                    // 19979
function MdChipsCtrl ($scope, $mdConstant, $log, $element, $timeout) {                                                 // 19980
  /** @type {$timeout} **/                                                                                             // 19981
  this.$timeout = $timeout;                                                                                            // 19982
                                                                                                                       // 19983
  /** @type {Object} */                                                                                                // 19984
  this.$mdConstant = $mdConstant;                                                                                      // 19985
                                                                                                                       // 19986
  /** @type {angular.$scope} */                                                                                        // 19987
  this.$scope = $scope;                                                                                                // 19988
                                                                                                                       // 19989
  /** @type {angular.$scope} */                                                                                        // 19990
  this.parent = $scope.$parent;                                                                                        // 19991
                                                                                                                       // 19992
  /** @type {$log} */                                                                                                  // 19993
  this.$log = $log;                                                                                                    // 19994
                                                                                                                       // 19995
  /** @type {$element} */                                                                                              // 19996
  this.$element = $element;                                                                                            // 19997
                                                                                                                       // 19998
  /** @type {angular.NgModelController} */                                                                             // 19999
  this.ngModelCtrl = null;                                                                                             // 20000
                                                                                                                       // 20001
  /** @type {angular.NgModelController} */                                                                             // 20002
  this.userInputNgModelCtrl = null;                                                                                    // 20003
                                                                                                                       // 20004
  /** @type {Element} */                                                                                               // 20005
  this.userInputElement = null;                                                                                        // 20006
                                                                                                                       // 20007
  /** @type {Array.<Object>} */                                                                                        // 20008
  this.items = [];                                                                                                     // 20009
                                                                                                                       // 20010
  /** @type {number} */                                                                                                // 20011
  this.selectedChip = -1;                                                                                              // 20012
                                                                                                                       // 20013
  /** @type {boolean} */                                                                                               // 20014
  this.hasAutocomplete = false;                                                                                        // 20015
                                                                                                                       // 20016
                                                                                                                       // 20017
  /**                                                                                                                  // 20018
   * Hidden hint text for how to delete a chip. Used to give context to screen readers.                                // 20019
   * @type {string}                                                                                                    // 20020
   */                                                                                                                  // 20021
  this.deleteHint = 'Press delete to remove this chip.';                                                               // 20022
                                                                                                                       // 20023
  /**                                                                                                                  // 20024
   * Hidden label for the delete button. Used to give context to screen readers.                                       // 20025
   * @type {string}                                                                                                    // 20026
   */                                                                                                                  // 20027
  this.deleteButtonLabel = 'Remove';                                                                                   // 20028
                                                                                                                       // 20029
  /**                                                                                                                  // 20030
   * Model used by the input element.                                                                                  // 20031
   * @type {string}                                                                                                    // 20032
   */                                                                                                                  // 20033
  this.chipBuffer = '';                                                                                                // 20034
                                                                                                                       // 20035
  /**                                                                                                                  // 20036
   * Whether to use the onAppend expression to transform the chip buffer                                               // 20037
   * before appending it to the list.                                                                                  // 20038
   * @type {boolean}                                                                                                   // 20039
   *                                                                                                                   // 20040
   *                                                                                                                   // 20041
   * @deprecated Will remove in 1.0.                                                                                   // 20042
   */                                                                                                                  // 20043
  this.useOnAppend = false;                                                                                            // 20044
                                                                                                                       // 20045
  /**                                                                                                                  // 20046
   * Whether to use the transformChip expression to transform the chip buffer                                          // 20047
   * before appending it to the list.                                                                                  // 20048
   * @type {boolean}                                                                                                   // 20049
   */                                                                                                                  // 20050
  this.useTransformChip = false;                                                                                       // 20051
                                                                                                                       // 20052
  /**                                                                                                                  // 20053
   * Whether to use the onAdd expression to notify of chip additions.                                                  // 20054
   * @type {boolean}                                                                                                   // 20055
   */                                                                                                                  // 20056
  this.useOnAdd = false;                                                                                               // 20057
                                                                                                                       // 20058
  /**                                                                                                                  // 20059
   * Whether to use the onRemove expression to notify of chip removals.                                                // 20060
   * @type {boolean}                                                                                                   // 20061
   */                                                                                                                  // 20062
  this.useOnRemove = false;                                                                                            // 20063
                                                                                                                       // 20064
  /**                                                                                                                  // 20065
   * Whether to use the onSelect expression to notify the component's user                                             // 20066
   * after selecting a chip from the list.                                                                             // 20067
   * @type {boolean}                                                                                                   // 20068
   */                                                                                                                  // 20069
  this.useOnSelect = false;                                                                                            // 20070
}                                                                                                                      // 20071
MdChipsCtrl.$inject = ["$scope", "$mdConstant", "$log", "$element", "$timeout"];                                       // 20072
                                                                                                                       // 20073
/**                                                                                                                    // 20074
 * Handles the keydown event on the input element: by default <enter> appends                                          // 20075
 * the buffer to the chip list, while backspace removes the last chip in the                                           // 20076
 * list if the current buffer is empty.                                                                                // 20077
 * @param event                                                                                                        // 20078
 */                                                                                                                    // 20079
MdChipsCtrl.prototype.inputKeydown = function(event) {                                                                 // 20080
  var chipBuffer = this.getChipBuffer();                                                                               // 20081
                                                                                                                       // 20082
  // If we have an autocomplete, and it handled the event, we have nothing to do                                       // 20083
  if (this.hasAutocomplete && event.isDefaultPrevented && event.isDefaultPrevented()) {                                // 20084
    return;                                                                                                            // 20085
  }                                                                                                                    // 20086
                                                                                                                       // 20087
  if (event.keyCode === this.$mdConstant.KEY_CODE.BACKSPACE) {                                                         // 20088
    if (chipBuffer) return;                                                                                            // 20089
    event.preventDefault();                                                                                            // 20090
    event.stopPropagation();                                                                                           // 20091
    if (this.items.length) this.selectAndFocusChipSafe(this.items.length - 1);                                         // 20092
    return;                                                                                                            // 20093
  }                                                                                                                    // 20094
                                                                                                                       // 20095
  // By default <enter> appends the buffer to the chip list.                                                           // 20096
  if (!this.separatorKeys || this.separatorKeys.length < 1) {                                                          // 20097
    this.separatorKeys = [this.$mdConstant.KEY_CODE.ENTER];                                                            // 20098
  }                                                                                                                    // 20099
                                                                                                                       // 20100
  // Support additional separator key codes in an array of `md-separator-keys`.                                        // 20101
  if (this.separatorKeys.indexOf(event.keyCode) !== -1) {                                                              // 20102
    if ((this.hasAutocomplete && this.requireMatch) || !chipBuffer) return;                                            // 20103
    event.preventDefault();                                                                                            // 20104
    this.appendChip(chipBuffer);                                                                                       // 20105
    this.resetChipBuffer();                                                                                            // 20106
  }                                                                                                                    // 20107
};                                                                                                                     // 20108
                                                                                                                       // 20109
/**                                                                                                                    // 20110
 * Handles the keydown event on the chip elements: backspace removes the selected chip, arrow                          // 20111
 * keys switch which chips is active                                                                                   // 20112
 * @param event                                                                                                        // 20113
 */                                                                                                                    // 20114
MdChipsCtrl.prototype.chipKeydown = function (event) {                                                                 // 20115
  if (this.getChipBuffer()) return;                                                                                    // 20116
  switch (event.keyCode) {                                                                                             // 20117
    case this.$mdConstant.KEY_CODE.BACKSPACE:                                                                          // 20118
    case this.$mdConstant.KEY_CODE.DELETE:                                                                             // 20119
      if (this.selectedChip < 0) return;                                                                               // 20120
      event.preventDefault();                                                                                          // 20121
      this.removeAndSelectAdjacentChip(this.selectedChip);                                                             // 20122
      break;                                                                                                           // 20123
    case this.$mdConstant.KEY_CODE.LEFT_ARROW:                                                                         // 20124
      event.preventDefault();                                                                                          // 20125
      if (this.selectedChip < 0) this.selectedChip = this.items.length;                                                // 20126
      if (this.items.length) this.selectAndFocusChipSafe(this.selectedChip - 1);                                       // 20127
      break;                                                                                                           // 20128
    case this.$mdConstant.KEY_CODE.RIGHT_ARROW:                                                                        // 20129
      event.preventDefault();                                                                                          // 20130
      this.selectAndFocusChipSafe(this.selectedChip + 1);                                                              // 20131
      break;                                                                                                           // 20132
    case this.$mdConstant.KEY_CODE.ESCAPE:                                                                             // 20133
    case this.$mdConstant.KEY_CODE.TAB:                                                                                // 20134
      if (this.selectedChip < 0) return;                                                                               // 20135
      event.preventDefault();                                                                                          // 20136
      this.onFocus();                                                                                                  // 20137
      break;                                                                                                           // 20138
  }                                                                                                                    // 20139
};                                                                                                                     // 20140
                                                                                                                       // 20141
/**                                                                                                                    // 20142
 * Get the input's placeholder - uses `placeholder` when list is empty and `secondary-placeholder`                     // 20143
 * when the list is non-empty. If `secondary-placeholder` is not provided, `placeholder` is used                       // 20144
 * always.                                                                                                             // 20145
 */                                                                                                                    // 20146
MdChipsCtrl.prototype.getPlaceholder = function() {                                                                    // 20147
  // Allow `secondary-placeholder` to be blank.                                                                        // 20148
  var useSecondary = (this.items.length &&                                                                             // 20149
      (this.secondaryPlaceholder == '' || this.secondaryPlaceholder));                                                 // 20150
  return useSecondary ? this.secondaryPlaceholder : this.placeholder;                                                  // 20151
};                                                                                                                     // 20152
                                                                                                                       // 20153
/**                                                                                                                    // 20154
 * Removes chip at {@code index} and selects the adjacent chip.                                                        // 20155
 * @param index                                                                                                        // 20156
 */                                                                                                                    // 20157
MdChipsCtrl.prototype.removeAndSelectAdjacentChip = function(index) {                                                  // 20158
  var selIndex = this.getAdjacentChipIndex(index);                                                                     // 20159
  this.removeChip(index);                                                                                              // 20160
  this.$timeout(angular.bind(this, function () {                                                                       // 20161
      this.selectAndFocusChipSafe(selIndex);                                                                           // 20162
  }));                                                                                                                 // 20163
};                                                                                                                     // 20164
                                                                                                                       // 20165
/**                                                                                                                    // 20166
 * Sets the selected chip index to -1.                                                                                 // 20167
 */                                                                                                                    // 20168
MdChipsCtrl.prototype.resetSelectedChip = function() {                                                                 // 20169
  this.selectedChip = -1;                                                                                              // 20170
};                                                                                                                     // 20171
                                                                                                                       // 20172
/**                                                                                                                    // 20173
 * Gets the index of an adjacent chip to select after deletion. Adjacency is                                           // 20174
 * determined as the next chip in the list, unless the target chip is the                                              // 20175
 * last in the list, then it is the chip immediately preceding the target. If                                          // 20176
 * there is only one item in the list, -1 is returned (select none).                                                   // 20177
 * The number returned is the index to select AFTER the target has been                                                // 20178
 * removed.                                                                                                            // 20179
 * If the current chip is not selected, then -1 is returned to select none.                                            // 20180
 */                                                                                                                    // 20181
MdChipsCtrl.prototype.getAdjacentChipIndex = function(index) {                                                         // 20182
  var len = this.items.length - 1;                                                                                     // 20183
  return (len == 0) ? -1 :                                                                                             // 20184
      (index == len) ? index -1 : index;                                                                               // 20185
};                                                                                                                     // 20186
                                                                                                                       // 20187
/**                                                                                                                    // 20188
 * Append the contents of the buffer to the chip list. This method will first                                          // 20189
 * call out to the md-transform-chip method, if provided.                                                              // 20190
 *                                                                                                                     // 20191
 * @param newChip                                                                                                      // 20192
 */                                                                                                                    // 20193
MdChipsCtrl.prototype.appendChip = function(newChip) {                                                                 // 20194
  if (this.useTransformChip && this.transformChip) {                                                                   // 20195
    var transformedChip = this.transformChip({'$chip': newChip});                                                      // 20196
                                                                                                                       // 20197
    // Check to make sure the chip is defined before assigning it, otherwise, we'll just assume                        // 20198
    // they want the string version.                                                                                   // 20199
    if (angular.isDefined(transformedChip)) {                                                                          // 20200
      newChip = transformedChip;                                                                                       // 20201
    }                                                                                                                  // 20202
  }                                                                                                                    // 20203
                                                                                                                       // 20204
  // If items contains an identical object to newChip, do not append                                                   // 20205
  if (angular.isObject(newChip)){                                                                                      // 20206
    var identical = this.items.some(function(item){                                                                    // 20207
      return angular.equals(newChip, item);                                                                            // 20208
    });                                                                                                                // 20209
    if(identical) return;                                                                                              // 20210
  }                                                                                                                    // 20211
                                                                                                                       // 20212
  // Check for a null (but not undefined), or existing chip and cancel appending                                       // 20213
  if (newChip == null || this.items.indexOf(newChip) + 1) return;                                                      // 20214
                                                                                                                       // 20215
  // Append the new chip onto our list                                                                                 // 20216
  var index = this.items.push(newChip);                                                                                // 20217
                                                                                                                       // 20218
  // If they provide the md-on-add attribute, notify them of the chip addition                                         // 20219
  if (this.useOnAdd && this.onAdd) {                                                                                   // 20220
    this.onAdd({ '$chip': newChip, '$index': index });                                                                 // 20221
  }                                                                                                                    // 20222
};                                                                                                                     // 20223
                                                                                                                       // 20224
/**                                                                                                                    // 20225
 * Sets whether to use the md-on-append expression. This expression is                                                 // 20226
 * bound to scope and controller in {@code MdChipsDirective} as                                                        // 20227
 * {@code onAppend}. Due to the nature of directive scope bindings, the                                                // 20228
 * controller cannot know on its own/from the scope whether an expression was                                          // 20229
 * actually provided.                                                                                                  // 20230
 *                                                                                                                     // 20231
 * @deprecated                                                                                                         // 20232
 *                                                                                                                     // 20233
 * TODO: Remove deprecated md-on-append functionality in 1.0                                                           // 20234
 */                                                                                                                    // 20235
MdChipsCtrl.prototype.useOnAppendExpression = function() {                                                             // 20236
  this.$log.warn("md-on-append is deprecated; please use md-transform-chip or md-on-add instead");                     // 20237
  if (!this.useTransformChip || !this.transformChip) {                                                                 // 20238
    this.useTransformChip = true;                                                                                      // 20239
    this.transformChip = this.onAppend;                                                                                // 20240
  }                                                                                                                    // 20241
};                                                                                                                     // 20242
                                                                                                                       // 20243
/**                                                                                                                    // 20244
 * Sets whether to use the md-transform-chip expression. This expression is                                            // 20245
 * bound to scope and controller in {@code MdChipsDirective} as                                                        // 20246
 * {@code transformChip}. Due to the nature of directive scope bindings, the                                           // 20247
 * controller cannot know on its own/from the scope whether an expression was                                          // 20248
 * actually provided.                                                                                                  // 20249
 */                                                                                                                    // 20250
MdChipsCtrl.prototype.useTransformChipExpression = function() {                                                        // 20251
  this.useTransformChip = true;                                                                                        // 20252
};                                                                                                                     // 20253
                                                                                                                       // 20254
/**                                                                                                                    // 20255
 * Sets whether to use the md-on-add expression. This expression is                                                    // 20256
 * bound to scope and controller in {@code MdChipsDirective} as                                                        // 20257
 * {@code onAdd}. Due to the nature of directive scope bindings, the                                                   // 20258
 * controller cannot know on its own/from the scope whether an expression was                                          // 20259
 * actually provided.                                                                                                  // 20260
 */                                                                                                                    // 20261
MdChipsCtrl.prototype.useOnAddExpression = function() {                                                                // 20262
  this.useOnAdd = true;                                                                                                // 20263
};                                                                                                                     // 20264
                                                                                                                       // 20265
/**                                                                                                                    // 20266
 * Sets whether to use the md-on-remove expression. This expression is                                                 // 20267
 * bound to scope and controller in {@code MdChipsDirective} as                                                        // 20268
 * {@code onRemove}. Due to the nature of directive scope bindings, the                                                // 20269
 * controller cannot know on its own/from the scope whether an expression was                                          // 20270
 * actually provided.                                                                                                  // 20271
 */                                                                                                                    // 20272
MdChipsCtrl.prototype.useOnRemoveExpression = function() {                                                             // 20273
  this.useOnRemove = true;                                                                                             // 20274
};                                                                                                                     // 20275
                                                                                                                       // 20276
/*                                                                                                                     // 20277
 * Sets whether to use the md-on-select expression. This expression is                                                 // 20278
 * bound to scope and controller in {@code MdChipsDirective} as                                                        // 20279
 * {@code onSelect}. Due to the nature of directive scope bindings, the                                                // 20280
 * controller cannot know on its own/from the scope whether an expression was                                          // 20281
 * actually provided.                                                                                                  // 20282
 */                                                                                                                    // 20283
MdChipsCtrl.prototype.useOnSelectExpression = function() {                                                             // 20284
  this.useOnSelect = true;                                                                                             // 20285
};                                                                                                                     // 20286
                                                                                                                       // 20287
/**                                                                                                                    // 20288
 * Gets the input buffer. The input buffer can be the model bound to the                                               // 20289
 * default input item {@code this.chipBuffer}, the {@code selectedItem}                                                // 20290
 * model of an {@code md-autocomplete}, or, through some magic, the model                                              // 20291
 * bound to any inpput or text area element found within a                                                             // 20292
 * {@code md-input-container} element.                                                                                 // 20293
 * @return {Object|string}                                                                                             // 20294
 */                                                                                                                    // 20295
MdChipsCtrl.prototype.getChipBuffer = function() {                                                                     // 20296
  return !this.userInputElement ? this.chipBuffer :                                                                    // 20297
      this.userInputNgModelCtrl ? this.userInputNgModelCtrl.$viewValue :                                               // 20298
          this.userInputElement[0].value;                                                                              // 20299
};                                                                                                                     // 20300
                                                                                                                       // 20301
/**                                                                                                                    // 20302
 * Resets the input buffer for either the internal input or user provided input element.                               // 20303
 */                                                                                                                    // 20304
MdChipsCtrl.prototype.resetChipBuffer = function() {                                                                   // 20305
  if (this.userInputElement) {                                                                                         // 20306
    if (this.userInputNgModelCtrl) {                                                                                   // 20307
      this.userInputNgModelCtrl.$setViewValue('');                                                                     // 20308
      this.userInputNgModelCtrl.$render();                                                                             // 20309
    } else {                                                                                                           // 20310
      this.userInputElement[0].value = '';                                                                             // 20311
    }                                                                                                                  // 20312
  } else {                                                                                                             // 20313
    this.chipBuffer = '';                                                                                              // 20314
  }                                                                                                                    // 20315
};                                                                                                                     // 20316
                                                                                                                       // 20317
/**                                                                                                                    // 20318
 * Removes the chip at the given index.                                                                                // 20319
 * @param index                                                                                                        // 20320
 */                                                                                                                    // 20321
MdChipsCtrl.prototype.removeChip = function(index) {                                                                   // 20322
  var removed = this.items.splice(index, 1);                                                                           // 20323
                                                                                                                       // 20324
  if (removed && removed.length && this.useOnRemove && this.onRemove) {                                                // 20325
    this.onRemove({ '$chip': removed[0], '$index': index });                                                           // 20326
  }                                                                                                                    // 20327
};                                                                                                                     // 20328
                                                                                                                       // 20329
MdChipsCtrl.prototype.removeChipAndFocusInput = function (index) {                                                     // 20330
  this.removeChip(index);                                                                                              // 20331
  this.onFocus();                                                                                                      // 20332
};                                                                                                                     // 20333
/**                                                                                                                    // 20334
 * Selects the chip at `index`,                                                                                        // 20335
 * @param index                                                                                                        // 20336
 */                                                                                                                    // 20337
MdChipsCtrl.prototype.selectAndFocusChipSafe = function(index) {                                                       // 20338
  if (!this.items.length) {                                                                                            // 20339
    this.selectChip(-1);                                                                                               // 20340
    this.onFocus();                                                                                                    // 20341
    return;                                                                                                            // 20342
  }                                                                                                                    // 20343
  if (index === this.items.length) return this.onFocus();                                                              // 20344
  index = Math.max(index, 0);                                                                                          // 20345
  index = Math.min(index, this.items.length - 1);                                                                      // 20346
  this.selectChip(index);                                                                                              // 20347
  this.focusChip(index);                                                                                               // 20348
};                                                                                                                     // 20349
                                                                                                                       // 20350
/**                                                                                                                    // 20351
 * Marks the chip at the given index as selected.                                                                      // 20352
 * @param index                                                                                                        // 20353
 */                                                                                                                    // 20354
MdChipsCtrl.prototype.selectChip = function(index) {                                                                   // 20355
  if (index >= -1 && index <= this.items.length) {                                                                     // 20356
    this.selectedChip = index;                                                                                         // 20357
                                                                                                                       // 20358
    // Fire the onSelect if provided                                                                                   // 20359
    if (this.useOnSelect && this.onSelect) {                                                                           // 20360
      this.onSelect({'$chip': this.items[this.selectedChip] });                                                        // 20361
    }                                                                                                                  // 20362
  } else {                                                                                                             // 20363
    this.$log.warn('Selected Chip index out of bounds; ignoring.');                                                    // 20364
  }                                                                                                                    // 20365
};                                                                                                                     // 20366
                                                                                                                       // 20367
/**                                                                                                                    // 20368
 * Selects the chip at `index` and gives it focus.                                                                     // 20369
 * @param index                                                                                                        // 20370
 */                                                                                                                    // 20371
MdChipsCtrl.prototype.selectAndFocusChip = function(index) {                                                           // 20372
  this.selectChip(index);                                                                                              // 20373
  if (index != -1) {                                                                                                   // 20374
    this.focusChip(index);                                                                                             // 20375
  }                                                                                                                    // 20376
};                                                                                                                     // 20377
                                                                                                                       // 20378
/**                                                                                                                    // 20379
 * Call `focus()` on the chip at `index`                                                                               // 20380
 */                                                                                                                    // 20381
MdChipsCtrl.prototype.focusChip = function(index) {                                                                    // 20382
  this.$element[0].querySelector('md-chip[index="' + index + '"] .md-chip-content').focus();                           // 20383
};                                                                                                                     // 20384
                                                                                                                       // 20385
/**                                                                                                                    // 20386
 * Configures the required interactions with the ngModel Controller.                                                   // 20387
 * Specifically, set {@code this.items} to the {@code NgModelCtrl#$viewVale}.                                          // 20388
 * @param ngModelCtrl                                                                                                  // 20389
 */                                                                                                                    // 20390
MdChipsCtrl.prototype.configureNgModel = function(ngModelCtrl) {                                                       // 20391
  this.ngModelCtrl = ngModelCtrl;                                                                                      // 20392
                                                                                                                       // 20393
  var self = this;                                                                                                     // 20394
  ngModelCtrl.$render = function() {                                                                                   // 20395
    // model is updated. do something.                                                                                 // 20396
    self.items = self.ngModelCtrl.$viewValue;                                                                          // 20397
  };                                                                                                                   // 20398
};                                                                                                                     // 20399
                                                                                                                       // 20400
MdChipsCtrl.prototype.onFocus = function () {                                                                          // 20401
  var input = this.$element[0].querySelector('input');                                                                 // 20402
  input && input.focus();                                                                                              // 20403
  this.resetSelectedChip();                                                                                            // 20404
};                                                                                                                     // 20405
                                                                                                                       // 20406
MdChipsCtrl.prototype.onInputFocus = function () {                                                                     // 20407
  this.inputHasFocus = true;                                                                                           // 20408
  this.resetSelectedChip();                                                                                            // 20409
};                                                                                                                     // 20410
                                                                                                                       // 20411
MdChipsCtrl.prototype.onInputBlur = function () {                                                                      // 20412
  this.inputHasFocus = false;                                                                                          // 20413
};                                                                                                                     // 20414
                                                                                                                       // 20415
/**                                                                                                                    // 20416
 * Configure event bindings on a user-provided input element.                                                          // 20417
 * @param inputElement                                                                                                 // 20418
 */                                                                                                                    // 20419
MdChipsCtrl.prototype.configureUserInput = function(inputElement) {                                                    // 20420
  this.userInputElement = inputElement;                                                                                // 20421
                                                                                                                       // 20422
  // Find the NgModelCtrl for the input element                                                                        // 20423
  var ngModelCtrl = inputElement.controller('ngModel');                                                                // 20424
  // `.controller` will look in the parent as well.                                                                    // 20425
  if (ngModelCtrl != this.ngModelCtrl) {                                                                               // 20426
    this.userInputNgModelCtrl = ngModelCtrl;                                                                           // 20427
  }                                                                                                                    // 20428
                                                                                                                       // 20429
  var scope = this.$scope;                                                                                             // 20430
  var ctrl = this;                                                                                                     // 20431
                                                                                                                       // 20432
  // Run all of the events using evalAsync because a focus may fire a blur in the same digest loop                     // 20433
  var scopeApplyFn = function(event, fn) {                                                                             // 20434
    scope.$evalAsync(angular.bind(ctrl, fn, event));                                                                   // 20435
  };                                                                                                                   // 20436
                                                                                                                       // 20437
  // Bind to keydown and focus events of input                                                                         // 20438
  inputElement                                                                                                         // 20439
      .attr({ tabindex: 0 })                                                                                           // 20440
      .on('keydown', function(event) { scopeApplyFn(event, ctrl.inputKeydown) })                                       // 20441
      .on('focus', function(event) { scopeApplyFn(event, ctrl.onInputFocus) })                                         // 20442
      .on('blur', function(event) { scopeApplyFn(event, ctrl.onInputBlur) })                                           // 20443
};                                                                                                                     // 20444
                                                                                                                       // 20445
MdChipsCtrl.prototype.configureAutocomplete = function(ctrl) {                                                         // 20446
  if ( ctrl ){                                                                                                         // 20447
    this.hasAutocomplete = true;                                                                                       // 20448
    ctrl.registerSelectedItemWatcher(angular.bind(this, function (item) {                                              // 20449
      if (item) {                                                                                                      // 20450
        this.appendChip(item);                                                                                         // 20451
        this.resetChipBuffer();                                                                                        // 20452
      }                                                                                                                // 20453
    }));                                                                                                               // 20454
                                                                                                                       // 20455
    this.$element.find('input')                                                                                        // 20456
        .on('focus',angular.bind(this, this.onInputFocus) )                                                            // 20457
        .on('blur', angular.bind(this, this.onInputBlur) );                                                            // 20458
  }                                                                                                                    // 20459
};                                                                                                                     // 20460
                                                                                                                       // 20461
MdChipsCtrl.prototype.hasFocus = function () {                                                                         // 20462
  return this.inputHasFocus || this.selectedChip >= 0;                                                                 // 20463
};                                                                                                                     // 20464
                                                                                                                       // 20465
})();                                                                                                                  // 20466
(function(){                                                                                                           // 20467
"use strict";                                                                                                          // 20468
                                                                                                                       // 20469
  angular                                                                                                              // 20470
      .module('material.components.chips')                                                                             // 20471
      .directive('mdChips', MdChips);                                                                                  // 20472
                                                                                                                       // 20473
  /**                                                                                                                  // 20474
   * @ngdoc directive                                                                                                  // 20475
   * @name mdChips                                                                                                     // 20476
   * @module material.components.chips                                                                                 // 20477
   *                                                                                                                   // 20478
   * @description                                                                                                      // 20479
   * `<md-chips>` is an input component for building lists of strings or objects. The list items are                   // 20480
   * displayed as 'chips'. This component can make use of an `<input>` element or an                                   // 20481
   * `<md-autocomplete>` element.                                                                                      // 20482
   *                                                                                                                   // 20483
   * ### Custom templates                                                                                              // 20484
   * A custom template may be provided to render the content of each chip. This is achieved by                         // 20485
   * specifying an `<md-chip-template>` element containing the custom content as a child of                            // 20486
   * `<md-chips>`.                                                                                                     // 20487
   *                                                                                                                   // 20488
   * Note: Any attributes on                                                                                           // 20489
   * `<md-chip-template>` will be dropped as only the innerHTML is used for the chip template. The                     // 20490
   * variables `$chip` and `$index` are available in the scope of `<md-chip-template>`, representing                   // 20491
   * the chip object and its index in the list of chips, respectively.                                                 // 20492
   * To override the chip delete control, include an element (ideally a button) with the attribute                     // 20493
   * `md-chip-remove`. A click listener to remove the chip will be added automatically. The element                    // 20494
   * is also placed as a sibling to the chip content (on which there are also click listeners) to                      // 20495
   * avoid a nested ng-click situation.                                                                                // 20496
   *                                                                                                                   // 20497
   * <h3> Pending Features </h3>                                                                                       // 20498
   * <ul style="padding-left:20px;">                                                                                   // 20499
   *                                                                                                                   // 20500
   *   <ul>Style                                                                                                       // 20501
   *     <li>Colours for hover, press states (ripple?).</li>                                                           // 20502
   *   </ul>                                                                                                           // 20503
   *                                                                                                                   // 20504
   *   <ul>Validation                                                                                                  // 20505
   *     <li>allow a validation callback</li>                                                                          // 20506
   *     <li>hilighting style for invalid chips</li>                                                                   // 20507
   *   </ul>                                                                                                           // 20508
   *                                                                                                                   // 20509
   *   <ul>Item mutation                                                                                               // 20510
   *     <li>Support `                                                                                                 // 20511
   *       <md-chip-edit>` template, show/hide the edit element on tap/click? double tap/double                        // 20512
   *       click?                                                                                                      // 20513
   *     </li>                                                                                                         // 20514
   *   </ul>                                                                                                           // 20515
   *                                                                                                                   // 20516
   *   <ul>Truncation and Disambiguation (?)                                                                           // 20517
   *     <li>Truncate chip text where possible, but do not truncate entries such that two are                          // 20518
   *     indistinguishable.</li>                                                                                       // 20519
   *   </ul>                                                                                                           // 20520
   *                                                                                                                   // 20521
   *   <ul>Drag and Drop                                                                                               // 20522
   *     <li>Drag and drop chips between related `<md-chips>` elements.                                                // 20523
   *     </li>                                                                                                         // 20524
   *   </ul>                                                                                                           // 20525
   * </ul>                                                                                                             // 20526
   *                                                                                                                   // 20527
   *  <span style="font-size:.8em;text-align:center">                                                                  // 20528
   *    Warning: This component is a WORK IN PROGRESS. If you use it now,                                              // 20529
   *    it will probably break on you in the future.                                                                   // 20530
   *  </span>                                                                                                          // 20531
   *                                                                                                                   // 20532
   * @param {string=|object=} ng-model A model to bind the list of items to                                            // 20533
   * @param {string=} placeholder Placeholder text that will be forwarded to the input.                                // 20534
   * @param {string=} secondary-placeholder Placeholder text that will be forwarded to the input,                      // 20535
   *    displayed when there is at least on item in the list                                                           // 20536
   * @param {boolean=} readonly Disables list manipulation (deleting or adding list items), hiding                     // 20537
   *    the input and delete buttons                                                                                   // 20538
   * @param {expression} md-transform-chip An expression of form `myFunction($chip)` that when called                  // 20539
   *    expects one of the following return values:                                                                    // 20540
   *    - an object representing the `$chip` input string                                                              // 20541
   *    - `undefined` to simply add the `$chip` input string, or                                                       // 20542
   *    - `null` to prevent the chip from being appended                                                               // 20543
   * @param {expression=} md-on-add An expression which will be called when a chip has been                            // 20544
   *    added.                                                                                                         // 20545
   * @param {expression=} md-on-remove An expression which will be called when a chip has been                         // 20546
   *    removed.                                                                                                       // 20547
   * @param {expression=} md-on-select An expression which will be called when a chip is selected.                     // 20548
   * @param {boolean} md-require-match If true, and the chips template contains an autocomplete,                       // 20549
   *    only allow selection of pre-defined chips (i.e. you cannot add new ones).                                      // 20550
   * @param {string=} delete-hint A string read by screen readers instructing users that pressing                      // 20551
   *    the delete key will remove the chip.                                                                           // 20552
   * @param {string=} delete-button-label A label for the delete button. Also hidden and read by                       // 20553
   *    screen readers.                                                                                                // 20554
   * @param {expression=} md-separator-keys An array of key codes used to separate chips.                              // 20555
   *                                                                                                                   // 20556
   * @usage                                                                                                            // 20557
   * <hljs lang="html">                                                                                                // 20558
   *   <md-chips                                                                                                       // 20559
   *       ng-model="myItems"                                                                                          // 20560
   *       placeholder="Add an item"                                                                                   // 20561
   *       readonly="isReadOnly">                                                                                      // 20562
   *   </md-chips>                                                                                                     // 20563
   * </hljs>                                                                                                           // 20564
   *                                                                                                                   // 20565
   */                                                                                                                  // 20566
                                                                                                                       // 20567
                                                                                                                       // 20568
  var MD_CHIPS_TEMPLATE = '\
      <md-chips-wrap\
          ng-if="!$mdChipsCtrl.readonly || $mdChipsCtrl.items.length > 0"\
          ng-keydown="$mdChipsCtrl.chipKeydown($event)"\
          ng-class="{ \'md-focused\': $mdChipsCtrl.hasFocus(), \'md-readonly\': !$mdChipsCtrl.ngModelCtrl }"\
          class="md-chips">\
        <md-chip ng-repeat="$chip in $mdChipsCtrl.items"\
            index="{{$index}}"\
            ng-class="{\'md-focused\': $mdChipsCtrl.selectedChip == $index, \'md-readonly\': $mdChipsCtrl.readonly}">\
          <div class="md-chip-content"\
              tabindex="-1"\
              aria-hidden="true"\
              ng-focus="!$mdChipsCtrl.readonly && $mdChipsCtrl.selectChip($index)"\
              md-chip-transclude="$mdChipsCtrl.chipContentsTemplate"></div>\
          <div ng-if="!$mdChipsCtrl.readonly"\
               class="md-chip-remove-container"\
               md-chip-transclude="$mdChipsCtrl.chipRemoveTemplate"></div>\
        </md-chip>\
        <div ng-if="!$mdChipsCtrl.readonly && $mdChipsCtrl.ngModelCtrl"\
            class="md-chip-input-container"\
            md-chip-transclude="$mdChipsCtrl.chipInputTemplate"></div>\
        </div>\
      </md-chips-wrap>';                                                                                               // 20591
                                                                                                                       // 20592
  var CHIP_INPUT_TEMPLATE = '\
        <input\
            class="md-input"\
            tabindex="0"\
            placeholder="{{$mdChipsCtrl.getPlaceholder()}}"\
            aria-label="{{$mdChipsCtrl.getPlaceholder()}}"\
            ng-model="$mdChipsCtrl.chipBuffer"\
            ng-focus="$mdChipsCtrl.onInputFocus()"\
            ng-blur="$mdChipsCtrl.onInputBlur()"\
            ng-keydown="$mdChipsCtrl.inputKeydown($event)">';                                                          // 20602
                                                                                                                       // 20603
  var CHIP_DEFAULT_TEMPLATE = '\
      <span>{{$chip}}</span>';                                                                                         // 20605
                                                                                                                       // 20606
  var CHIP_REMOVE_TEMPLATE = '\
      <button\
          class="md-chip-remove"\
          ng-if="!$mdChipsCtrl.readonly"\
          ng-click="$mdChipsCtrl.removeChipAndFocusInput($$replacedScope.$index)"\
          type="button"\
          aria-hidden="true"\
          tabindex="-1">\
        <md-icon md-svg-icon="md-close"></md-icon>\
        <span class="md-visually-hidden">\
          {{$mdChipsCtrl.deleteButtonLabel}}\
        </span>\
      </button>';                                                                                                      // 20619
                                                                                                                       // 20620
  /**                                                                                                                  // 20621
   * MDChips Directive Definition                                                                                      // 20622
   */                                                                                                                  // 20623
  function MdChips ($mdTheming, $mdUtil, $compile, $log, $timeout) {                                                   // 20624
    // Run our templates through $mdUtil.processTemplate() to allow custom start/end symbols                           // 20625
    var templates = getTemplates();                                                                                    // 20626
                                                                                                                       // 20627
    return {                                                                                                           // 20628
      template: function(element, attrs) {                                                                             // 20629
        // Clone the element into an attribute. By prepending the attribute                                            // 20630
        // name with '$', Angular won't write it into the DOM. The cloned                                              // 20631
        // element propagates to the link function via the attrs argument,                                             // 20632
        // where various contained-elements can be consumed.                                                           // 20633
        attrs['$mdUserTemplate'] = element.clone();                                                                    // 20634
        return templates.chips;                                                                                        // 20635
      },                                                                                                               // 20636
      require: ['mdChips'],                                                                                            // 20637
      restrict: 'E',                                                                                                   // 20638
      controller: 'MdChipsCtrl',                                                                                       // 20639
      controllerAs: '$mdChipsCtrl',                                                                                    // 20640
      bindToController: true,                                                                                          // 20641
      compile: compile,                                                                                                // 20642
      scope: {                                                                                                         // 20643
        readonly: '=readonly',                                                                                         // 20644
        placeholder: '@',                                                                                              // 20645
        secondaryPlaceholder: '@',                                                                                     // 20646
        transformChip: '&mdTransformChip',                                                                             // 20647
        onAppend: '&mdOnAppend',                                                                                       // 20648
        onAdd: '&mdOnAdd',                                                                                             // 20649
        onRemove: '&mdOnRemove',                                                                                       // 20650
        onSelect: '&mdOnSelect',                                                                                       // 20651
        deleteHint: '@',                                                                                               // 20652
        deleteButtonLabel: '@',                                                                                        // 20653
        separatorKeys: '=?mdSeparatorKeys',                                                                            // 20654
        requireMatch: '=?mdRequireMatch'                                                                               // 20655
      }                                                                                                                // 20656
    };                                                                                                                 // 20657
                                                                                                                       // 20658
    /**                                                                                                                // 20659
     * Builds the final template for `md-chips` and returns the postLink function.                                     // 20660
     *                                                                                                                 // 20661
     * Building the template involves 3 key components:                                                                // 20662
     * static chips                                                                                                    // 20663
     * chip template                                                                                                   // 20664
     * input control                                                                                                   // 20665
     *                                                                                                                 // 20666
     * If no `ng-model` is provided, only the static chip work needs to be done.                                       // 20667
     *                                                                                                                 // 20668
     * If no user-passed `md-chip-template` exists, the default template is used. This resulting                       // 20669
     * template is appended to the chip content element.                                                               // 20670
     *                                                                                                                 // 20671
     * The remove button may be overridden by passing an element with an md-chip-remove attribute.                     // 20672
     *                                                                                                                 // 20673
     * If an `input` or `md-autocomplete` element is provided by the caller, it is set aside for                       // 20674
     * transclusion later. The transclusion happens in `postLink` as the parent scope is required.                     // 20675
     * If no user input is provided, a default one is appended to the input container node in the                      // 20676
     * template.                                                                                                       // 20677
     *                                                                                                                 // 20678
     * Static Chips (i.e. `md-chip` elements passed from the caller) are gathered and set aside for                    // 20679
     * transclusion in the `postLink` function.                                                                        // 20680
     *                                                                                                                 // 20681
     *                                                                                                                 // 20682
     * @param element                                                                                                  // 20683
     * @param attr                                                                                                     // 20684
     * @returns {Function}                                                                                             // 20685
     */                                                                                                                // 20686
    function compile(element, attr) {                                                                                  // 20687
      // Grab the user template from attr and reset the attribute to null.                                             // 20688
      var userTemplate = attr['$mdUserTemplate'];                                                                      // 20689
      attr['$mdUserTemplate'] = null;                                                                                  // 20690
                                                                                                                       // 20691
      // Set the chip remove, chip contents and chip input templates. The link function will put                       // 20692
      // them on the scope for transclusion later.                                                                     // 20693
      var chipRemoveTemplate   = getTemplateByQuery('md-chips>*[md-chip-remove]') || templates.remove,                 // 20694
          chipContentsTemplate = getTemplateByQuery('md-chips>md-chip-template') || templates.default,                 // 20695
          chipInputTemplate    = getTemplateByQuery('md-chips>md-autocomplete')                                        // 20696
              || getTemplateByQuery('md-chips>input')                                                                  // 20697
              || templates.input,                                                                                      // 20698
          staticChips = userTemplate.find('md-chip');                                                                  // 20699
                                                                                                                       // 20700
      // Warn of malformed template. See #2545                                                                         // 20701
      if (userTemplate[0].querySelector('md-chip-template>*[md-chip-remove]')) {                                       // 20702
        $log.warn('invalid placement of md-chip-remove within md-chip-template.');                                     // 20703
      }                                                                                                                // 20704
                                                                                                                       // 20705
      function getTemplateByQuery (query) {                                                                            // 20706
        if (!attr.ngModel) return;                                                                                     // 20707
        var element = userTemplate[0].querySelector(query);                                                            // 20708
        return element && element.outerHTML;                                                                           // 20709
      }                                                                                                                // 20710
                                                                                                                       // 20711
      /**                                                                                                              // 20712
       * Configures controller and transcludes.                                                                        // 20713
       */                                                                                                              // 20714
      return function postLink(scope, element, attrs, controllers) {                                                   // 20715
        $mdUtil.initOptionalProperties(scope, attr);                                                                   // 20716
                                                                                                                       // 20717
        $mdTheming(element);                                                                                           // 20718
        var mdChipsCtrl = controllers[0];                                                                              // 20719
        mdChipsCtrl.chipContentsTemplate = chipContentsTemplate;                                                       // 20720
        mdChipsCtrl.chipRemoveTemplate   = chipRemoveTemplate;                                                         // 20721
        mdChipsCtrl.chipInputTemplate    = chipInputTemplate;                                                          // 20722
                                                                                                                       // 20723
        element                                                                                                        // 20724
            .attr({ 'aria-hidden': true, tabindex: -1 })                                                               // 20725
            .on('focus', function () { mdChipsCtrl.onFocus(); });                                                      // 20726
                                                                                                                       // 20727
        if (attr.ngModel) {                                                                                            // 20728
          mdChipsCtrl.configureNgModel(element.controller('ngModel'));                                                 // 20729
                                                                                                                       // 20730
          // If an `md-transform-chip` attribute was set, tell the controller to use the expression                    // 20731
          // before appending chips.                                                                                   // 20732
          if (attrs.mdTransformChip) mdChipsCtrl.useTransformChipExpression();                                         // 20733
                                                                                                                       // 20734
          // If an `md-on-append` attribute was set, tell the controller to use the expression                         // 20735
          // when appending chips.                                                                                     // 20736
          //                                                                                                           // 20737
          // DEPRECATED: Will remove in official 1.0 release                                                           // 20738
          if (attrs.mdOnAppend) mdChipsCtrl.useOnAppendExpression();                                                   // 20739
                                                                                                                       // 20740
          // If an `md-on-add` attribute was set, tell the controller to use the expression                            // 20741
          // when adding chips.                                                                                        // 20742
          if (attrs.mdOnAdd) mdChipsCtrl.useOnAddExpression();                                                         // 20743
                                                                                                                       // 20744
          // If an `md-on-remove` attribute was set, tell the controller to use the expression                         // 20745
          // when removing chips.                                                                                      // 20746
          if (attrs.mdOnRemove) mdChipsCtrl.useOnRemoveExpression();                                                   // 20747
                                                                                                                       // 20748
          // If an `md-on-select` attribute was set, tell the controller to use the expression                         // 20749
          // when selecting chips.                                                                                     // 20750
          if (attrs.mdOnSelect) mdChipsCtrl.useOnSelectExpression();                                                   // 20751
                                                                                                                       // 20752
          // The md-autocomplete and input elements won't be compiled until after this directive                       // 20753
          // is complete (due to their nested nature). Wait a tick before looking for them to                          // 20754
          // configure the controller.                                                                                 // 20755
          if (chipInputTemplate != templates.input) {                                                                  // 20756
            // The autocomplete will not appear until the readonly attribute is not true (i.e.                         // 20757
            // false or undefined), so we have to watch the readonly and then on the next tick                         // 20758
            // after the chip transclusion has run, we can configure the autocomplete and user                         // 20759
            // input.                                                                                                  // 20760
            scope.$watch('$mdChipsCtrl.readonly', function(readonly) {                                                 // 20761
              if (!readonly) {                                                                                         // 20762
                $mdUtil.nextTick(function(){                                                                           // 20763
                  if (chipInputTemplate.indexOf('<md-autocomplete') === 0)                                             // 20764
                    mdChipsCtrl                                                                                        // 20765
                        .configureAutocomplete(element.find('md-autocomplete')                                         // 20766
                            .controller('mdAutocomplete'));                                                            // 20767
                  mdChipsCtrl.configureUserInput(element.find('input'));                                               // 20768
                });                                                                                                    // 20769
              }                                                                                                        // 20770
            });                                                                                                        // 20771
          }                                                                                                            // 20772
                                                                                                                       // 20773
          // At the next tick, if we find an input, make sure it has the md-input class                                // 20774
          $mdUtil.nextTick(function() {                                                                                // 20775
            var input = element.find('input');                                                                         // 20776
                                                                                                                       // 20777
            input && input.toggleClass('md-input', true);                                                              // 20778
          });                                                                                                          // 20779
        }                                                                                                              // 20780
                                                                                                                       // 20781
        // Compile with the parent's scope and prepend any static chips to the wrapper.                                // 20782
        if (staticChips.length > 0) {                                                                                  // 20783
          var compiledStaticChips = $compile(staticChips.clone())(scope.$parent);                                      // 20784
          $timeout(function() { element.find('md-chips-wrap').prepend(compiledStaticChips); });                        // 20785
        }                                                                                                              // 20786
      };                                                                                                               // 20787
    }                                                                                                                  // 20788
                                                                                                                       // 20789
    function getTemplates() {                                                                                          // 20790
      return {                                                                                                         // 20791
        chips: $mdUtil.processTemplate(MD_CHIPS_TEMPLATE),                                                             // 20792
        input: $mdUtil.processTemplate(CHIP_INPUT_TEMPLATE),                                                           // 20793
        default: $mdUtil.processTemplate(CHIP_DEFAULT_TEMPLATE),                                                       // 20794
        remove: $mdUtil.processTemplate(CHIP_REMOVE_TEMPLATE)                                                          // 20795
      };                                                                                                               // 20796
    }                                                                                                                  // 20797
  }                                                                                                                    // 20798
  MdChips.$inject = ["$mdTheming", "$mdUtil", "$compile", "$log", "$timeout"];                                         // 20799
                                                                                                                       // 20800
})();                                                                                                                  // 20801
(function(){                                                                                                           // 20802
"use strict";                                                                                                          // 20803
                                                                                                                       // 20804
angular                                                                                                                // 20805
    .module('material.components.chips')                                                                               // 20806
    .controller('MdContactChipsCtrl', MdContactChipsCtrl);                                                             // 20807
                                                                                                                       // 20808
                                                                                                                       // 20809
                                                                                                                       // 20810
/**                                                                                                                    // 20811
 * Controller for the MdContactChips component                                                                         // 20812
 * @constructor                                                                                                        // 20813
 */                                                                                                                    // 20814
function MdContactChipsCtrl () {                                                                                       // 20815
  /** @type {Object} */                                                                                                // 20816
  this.selectedItem = null;                                                                                            // 20817
                                                                                                                       // 20818
  /** @type {string} */                                                                                                // 20819
  this.searchText = '';                                                                                                // 20820
}                                                                                                                      // 20821
                                                                                                                       // 20822
                                                                                                                       // 20823
MdContactChipsCtrl.prototype.queryContact = function(searchText) {                                                     // 20824
  var results = this.contactQuery({'$query': searchText});                                                             // 20825
  return this.filterSelected ?                                                                                         // 20826
      results.filter(angular.bind(this, this.filterSelectedContacts)) : results;                                       // 20827
};                                                                                                                     // 20828
                                                                                                                       // 20829
                                                                                                                       // 20830
MdContactChipsCtrl.prototype.itemName = function(item) {                                                               // 20831
  return item[this.contactName];                                                                                       // 20832
};                                                                                                                     // 20833
                                                                                                                       // 20834
                                                                                                                       // 20835
MdContactChipsCtrl.prototype.filterSelectedContacts = function(contact) {                                              // 20836
  return this.contacts.indexOf(contact) == -1;                                                                         // 20837
};                                                                                                                     // 20838
                                                                                                                       // 20839
})();                                                                                                                  // 20840
(function(){                                                                                                           // 20841
"use strict";                                                                                                          // 20842
                                                                                                                       // 20843
angular                                                                                                                // 20844
  .module('material.components.chips')                                                                                 // 20845
  .directive('mdContactChips', MdContactChips);                                                                        // 20846
                                                                                                                       // 20847
/**                                                                                                                    // 20848
 * @ngdoc directive                                                                                                    // 20849
 * @name mdContactChips                                                                                                // 20850
 * @module material.components.chips                                                                                   // 20851
 *                                                                                                                     // 20852
 * @description                                                                                                        // 20853
 * `<md-contact-chips>` is an input component based on `md-chips` and makes use of an                                  // 20854
 * `md-autocomplete` element. The component allows the caller to supply a query expression which                       // 20855
 * returns  a list of possible contacts. The user can select one of these and add it to the list of                    // 20856
 * chips.                                                                                                              // 20857
 *                                                                                                                     // 20858
 * You may also use the `md-highlight-text` directive along with its parameters to control the                         // 20859
 * appearance of the matched text inside of the contacts' autocomplete popup.                                          // 20860
 *                                                                                                                     // 20861
 * @param {string=|object=} ng-model A model to bind the list of items to                                              // 20862
 * @param {string=} placeholder Placeholder text that will be forwarded to the input.                                  // 20863
 * @param {string=} secondary-placeholder Placeholder text that will be forwarded to the input,                        // 20864
 *    displayed when there is at least on item in the list                                                             // 20865
 * @param {expression} md-contacts An expression expected to return contacts matching the search                       // 20866
 *    test, `$query`. If this expression involves a promise, a loading bar is displayed while                          // 20867
 *    waiting for it to resolve.                                                                                       // 20868
 * @param {string} md-contact-name The field name of the contact object representing the                               // 20869
 *    contact's name.                                                                                                  // 20870
 * @param {string} md-contact-email The field name of the contact object representing the                              // 20871
 *    contact's email address.                                                                                         // 20872
 * @param {string} md-contact-image The field name of the contact object representing the                              // 20873
 *    contact's image.                                                                                                 // 20874
 *                                                                                                                     // 20875
 *                                                                                                                     // 20876
 * @param {expression=} filter-selected Whether to filter selected contacts from the list of                           // 20877
 *    suggestions shown in the autocomplete. This attribute has been removed but may come back.                        // 20878
 *                                                                                                                     // 20879
 *                                                                                                                     // 20880
 *                                                                                                                     // 20881
 * @usage                                                                                                              // 20882
 * <hljs lang="html">                                                                                                  // 20883
 *   <md-contact-chips                                                                                                 // 20884
 *       ng-model="ctrl.contacts"                                                                                      // 20885
 *       md-contacts="ctrl.querySearch($query)"                                                                        // 20886
 *       md-contact-name="name"                                                                                        // 20887
 *       md-contact-image="image"                                                                                      // 20888
 *       md-contact-email="email"                                                                                      // 20889
 *       placeholder="To">                                                                                             // 20890
 *   </md-contact-chips>                                                                                               // 20891
 * </hljs>                                                                                                             // 20892
 *                                                                                                                     // 20893
 */                                                                                                                    // 20894
                                                                                                                       // 20895
                                                                                                                       // 20896
var MD_CONTACT_CHIPS_TEMPLATE = '\
      <md-chips class="md-contact-chips"\
          ng-model="$mdContactChipsCtrl.contacts"\
          md-require-match="$mdContactChipsCtrl.requireMatch"\
          md-autocomplete-snap>\
          <md-autocomplete\
              md-menu-class="md-contact-chips-suggestions"\
              md-selected-item="$mdContactChipsCtrl.selectedItem"\
              md-search-text="$mdContactChipsCtrl.searchText"\
              md-items="item in $mdContactChipsCtrl.queryContact($mdContactChipsCtrl.searchText)"\
              md-item-text="$mdContactChipsCtrl.itemName(item)"\
              md-no-cache="true"\
              md-autoselect\
              placeholder="{{$mdContactChipsCtrl.contacts.length == 0 ?\
                  $mdContactChipsCtrl.placeholder : $mdContactChipsCtrl.secondaryPlaceholder}}">\
            <div class="md-contact-suggestion">\
              <img \
                  ng-src="{{item[$mdContactChipsCtrl.contactImage]}}"\
                  alt="{{item[$mdContactChipsCtrl.contactName]}}"\
                  ng-if="item[$mdContactChipsCtrl.contactImage]" />\
              <span class="md-contact-name" md-highlight-text="$mdContactChipsCtrl.searchText"\
                    md-highlight-flags="{{$mdContactChipsCtrl.highlightFlags}}">\
                {{item[$mdContactChipsCtrl.contactName]}}\
              </span>\
              <span class="md-contact-email" >{{item[$mdContactChipsCtrl.contactEmail]}}</span>\
            </div>\
          </md-autocomplete>\
          <md-chip-template>\
            <div class="md-contact-avatar">\
              <img \
                  ng-src="{{$chip[$mdContactChipsCtrl.contactImage]}}"\
                  alt="{{$chip[$mdContactChipsCtrl.contactName]}}"\
                  ng-if="$chip[$mdContactChipsCtrl.contactImage]" />\
            </div>\
            <div class="md-contact-name">\
              {{$chip[$mdContactChipsCtrl.contactName]}}\
            </div>\
          </md-chip-template>\
      </md-chips>';                                                                                                    // 20935
                                                                                                                       // 20936
                                                                                                                       // 20937
/**                                                                                                                    // 20938
 * MDContactChips Directive Definition                                                                                 // 20939
 *                                                                                                                     // 20940
 * @param $mdTheming                                                                                                   // 20941
 * @returns {*}                                                                                                        // 20942
 * @ngInject                                                                                                           // 20943
 */                                                                                                                    // 20944
function MdContactChips($mdTheming, $mdUtil) {                                                                         // 20945
  return {                                                                                                             // 20946
    template: function(element, attrs) {                                                                               // 20947
      return MD_CONTACT_CHIPS_TEMPLATE;                                                                                // 20948
    },                                                                                                                 // 20949
    restrict: 'E',                                                                                                     // 20950
    controller: 'MdContactChipsCtrl',                                                                                  // 20951
    controllerAs: '$mdContactChipsCtrl',                                                                               // 20952
    bindToController: true,                                                                                            // 20953
    compile: compile,                                                                                                  // 20954
    scope: {                                                                                                           // 20955
      contactQuery: '&mdContacts',                                                                                     // 20956
      placeholder: '@',                                                                                                // 20957
      secondaryPlaceholder: '@',                                                                                       // 20958
      contactName: '@mdContactName',                                                                                   // 20959
      contactImage: '@mdContactImage',                                                                                 // 20960
      contactEmail: '@mdContactEmail',                                                                                 // 20961
      contacts: '=ngModel',                                                                                            // 20962
      requireMatch: '=?mdRequireMatch',                                                                                // 20963
      highlightFlags: '@?mdHighlightFlags'                                                                             // 20964
    }                                                                                                                  // 20965
  };                                                                                                                   // 20966
                                                                                                                       // 20967
  function compile(element, attr) {                                                                                    // 20968
    return function postLink(scope, element, attrs, controllers) {                                                     // 20969
                                                                                                                       // 20970
      $mdUtil.initOptionalProperties(scope, attr);                                                                     // 20971
      $mdTheming(element);                                                                                             // 20972
                                                                                                                       // 20973
      element.attr('tabindex', '-1');                                                                                  // 20974
    };                                                                                                                 // 20975
  }                                                                                                                    // 20976
}                                                                                                                      // 20977
MdContactChips.$inject = ["$mdTheming", "$mdUtil"];                                                                    // 20978
                                                                                                                       // 20979
})();                                                                                                                  // 20980
(function(){                                                                                                           // 20981
"use strict";                                                                                                          // 20982
                                                                                                                       // 20983
angular                                                                                                                // 20984
  .module('material.components.icon')                                                                                  // 20985
  .directive('mdIcon', ['$mdIcon', '$mdTheming', '$mdAria', mdIconDirective]);                                         // 20986
                                                                                                                       // 20987
/**                                                                                                                    // 20988
 * @ngdoc directive                                                                                                    // 20989
 * @name mdIcon                                                                                                        // 20990
 * @module material.components.icon                                                                                    // 20991
 *                                                                                                                     // 20992
 * @restrict E                                                                                                         // 20993
 *                                                                                                                     // 20994
 * @description                                                                                                        // 20995
 * The `md-icon` directive makes it easier to use vector-based icons in your app (as opposed to                        // 20996
 * raster-based icons types like PNG). The directive supports both icon fonts and SVG icons.                           // 20997
 *                                                                                                                     // 20998
 * Icons should be consider view-only elements that should not be used directly as buttons; instead nest a `<md-icon>`
 * inside a `md-button` to add hover and click features.                                                               // 21000
 *                                                                                                                     // 21001
 * ### Icon fonts                                                                                                      // 21002
 * Icon fonts are a technique in which you use a font where the glyphs in the font are                                 // 21003
 * your icons instead of text. Benefits include a straightforward way to bundle everything into a                      // 21004
 * single HTTP request, simple scaling, easy color changing, and more.                                                 // 21005
 *                                                                                                                     // 21006
 * `md-icon` lets you consume an icon font by letting you reference specific icons in that font                        // 21007
 * by name rather than character code.                                                                                 // 21008
 *                                                                                                                     // 21009
 * ### SVG                                                                                                             // 21010
 * For SVGs, the problem with using `<img>` or a CSS `background-image` is that you can't take                         // 21011
 * advantage of some SVG features, such as styling specific parts of the icon with CSS or SVG                          // 21012
 * animation.                                                                                                          // 21013
 *                                                                                                                     // 21014
 * `md-icon` makes it easier to use SVG icons by *inlining* the SVG into an `<svg>` element in the                     // 21015
 * document. The most straightforward way of referencing an SVG icon is via URL, just like a                           // 21016
 * traditional `<img>`. `$mdIconProvider`, as a convenience, lets you _name_ an icon so you can                        // 21017
 * reference it by name instead of URL throughout your templates.                                                      // 21018
 *                                                                                                                     // 21019
 * Additionally, you may not want to make separate HTTP requests for every icon, so you can bundle                     // 21020
 * your SVG icons together and pre-load them with $mdIconProvider as an icon set. An icon set can                      // 21021
 * also be given a name, which acts as a namespace for individual icons, so you can reference them                     // 21022
 * like `"social:cake"`.                                                                                               // 21023
 *                                                                                                                     // 21024
 * When using SVGs, both external SVGs (via URLs) or sets of SVGs [from icon sets] can be                              // 21025
 * easily loaded and used.When use font-icons, developers must following three (3) simple steps:                       // 21026
 *                                                                                                                     // 21027
 * <ol>                                                                                                                // 21028
 * <li>Load the font library. e.g.<br/>                                                                                // 21029
 *    &lt;link href="https://fonts.googleapis.com/icon?family=Material+Icons"                                          // 21030
 *    rel="stylesheet"&gt;                                                                                             // 21031
 * </li>                                                                                                               // 21032
 * <li> Use either (a) font-icon class names or (b) font ligatures to render the font glyph by using its textual name</li>
 * <li> Use &lt;md-icon md-font-icon="classname" /&gt; or <br/>                                                        // 21034
 *     use &lt;md-icon md-font-set="font library classname or alias"&gt; textual_name &lt;/md-icon&gt; or <br/>        // 21035
 *     use &lt;md-icon md-font-set="font library classname or alias"&gt; numerical_character_reference &lt;/md-icon&gt;
 * </li>                                                                                                               // 21037
 * </ol>                                                                                                               // 21038
 *                                                                                                                     // 21039
 * Full details for these steps can be found:                                                                          // 21040
 *                                                                                                                     // 21041
 * <ul>                                                                                                                // 21042
 * <li>http://google.github.io/material-design-icons/</li>                                                             // 21043
 * <li>http://google.github.io/material-design-icons/#icon-font-for-the-web</li>                                       // 21044
 * </ul>                                                                                                               // 21045
 *                                                                                                                     // 21046
 * The Material Design icon style <code>.material-icons</code> and the icon font references are published in           // 21047
 * Material Design Icons:                                                                                              // 21048
 *                                                                                                                     // 21049
 * <ul>                                                                                                                // 21050
 * <li>http://www.google.com/design/icons/</li>                                                                        // 21051
 * <li>https://www.google.com/design/icons/#ic_accessibility</li>                                                      // 21052
 * </ul>                                                                                                               // 21053
 *                                                                                                                     // 21054
 * <h2 id="material_design_icons">Material Design Icons</h2>                                                           // 21055
 * Using the Material Design Icon-Selector, developers can easily and quickly search for a Material Design font-icon and
 * determine its textual name and character reference code. Click on any icon to see the slide-up information          // 21057
 * panel with details regarding a SVG download or information on the font-icon usage.                                  // 21058
 *                                                                                                                     // 21059
 * <a href="https://www.google.com/design/icons/#ic_accessibility" target="_blank" style="border-bottom:none;">        // 21060
 * <img src="https://cloud.githubusercontent.com/assets/210413/7902490/fe8dd14c-0780-11e5-98fb-c821cc6475e6.png"       // 21061
 *      aria-label="Material Design Icon-Selector" style="max-width:75%;padding-left:10%">                             // 21062
 * </a>                                                                                                                // 21063
 *                                                                                                                     // 21064
 * <span class="image_caption">                                                                                        // 21065
 *  Click on the image above to link to the                                                                            // 21066
 *  <a href="https://www.google.com/design/icons/#ic_accessibility" target="_blank">Material Design Icon-Selector</a>.
 * </span>                                                                                                             // 21068
 *                                                                                                                     // 21069
 * @param {string} md-font-icon String name of CSS icon associated with the font-face will be used                     // 21070
 * to render the icon. Requires the fonts and the named CSS styles to be preloaded.                                    // 21071
 * @param {string} md-font-set CSS style name associated with the font library; which will be assigned as              // 21072
 * the class for the font-icon ligature. This value may also be an alias that is used to lookup the classname;         // 21073
 * internally use `$mdIconProvider.fontSet(<alias>)` to determine the style name.                                      // 21074
 * @param {string} md-svg-src String URL (or expression) used to load, cache, and display an                           // 21075
 *     external SVG.                                                                                                   // 21076
 * @param {string} md-svg-icon md-svg-icon String name used for lookup of the icon from the internal cache;            // 21077
 *     interpolated strings or expressions may also be used. Specific set names can be used with                       // 21078
 *     the syntax `<set name>:<icon name>`.<br/><br/>                                                                  // 21079
 * To use icon sets, developers are required to pre-register the sets using the `$mdIconProvider` service.             // 21080
 * @param {string=} aria-label Labels icon for accessibility. If an empty string is provided, icon                     // 21081
 * will be hidden from accessibility layer with `aria-hidden="true"`. If there's no aria-label on the icon             // 21082
 * nor a label on the parent element, a warning will be logged to the console.                                         // 21083
 * @param {string=} alt Labels icon for accessibility. If an empty string is provided, icon                            // 21084
 * will be hidden from accessibility layer with `aria-hidden="true"`. If there's no alt on the icon                    // 21085
 * nor a label on the parent element, a warning will be logged to the console.                                         // 21086
 *                                                                                                                     // 21087
 * @usage                                                                                                              // 21088
 * When using SVGs:                                                                                                    // 21089
 * <hljs lang="html">                                                                                                  // 21090
 *                                                                                                                     // 21091
 *  <!-- Icon ID; may contain optional icon set prefix; icons must registered using $mdIconProvider -->                // 21092
 *  <md-icon md-svg-icon="social:android"    aria-label="android " ></md-icon>                                         // 21093
 *                                                                                                                     // 21094
 *  <!-- Icon urls; may be preloaded in templateCache -->                                                              // 21095
 *  <md-icon md-svg-src="/android.svg"       aria-label="android " ></md-icon>                                         // 21096
 *  <md-icon md-svg-src="{{ getAndroid() }}" aria-label="android " ></md-icon>                                         // 21097
 *                                                                                                                     // 21098
 * </hljs>                                                                                                             // 21099
 *                                                                                                                     // 21100
 * Use the <code>$mdIconProvider</code> to configure your application with                                             // 21101
 * svg iconsets.                                                                                                       // 21102
 *                                                                                                                     // 21103
 * <hljs lang="js">                                                                                                    // 21104
 *  angular.module('appSvgIconSets', ['ngMaterial'])                                                                   // 21105
 *    .controller('DemoCtrl', function($scope) {})                                                                     // 21106
 *    .config(function($mdIconProvider) {                                                                              // 21107
 *      $mdIconProvider                                                                                                // 21108
 *         .iconSet('social', 'img/icons/sets/social-icons.svg', 24)                                                   // 21109
 *         .defaultIconSet('img/icons/sets/core-icons.svg', 24);                                                       // 21110
 *     });                                                                                                             // 21111
 * </hljs>                                                                                                             // 21112
 *                                                                                                                     // 21113
 *                                                                                                                     // 21114
 * When using Font Icons with classnames:                                                                              // 21115
 * <hljs lang="html">                                                                                                  // 21116
 *                                                                                                                     // 21117
 *  <md-icon md-font-icon="android" aria-label="android" ></md-icon>                                                   // 21118
 *  <md-icon class="icon_home"      aria-label="Home"    ></md-icon>                                                   // 21119
 *                                                                                                                     // 21120
 * </hljs>                                                                                                             // 21121
 *                                                                                                                     // 21122
 * When using Material Font Icons with ligatures:                                                                      // 21123
 * <hljs lang="html">                                                                                                  // 21124
 *  <!-- For Material Design Icons -->                                                                                 // 21125
 *  <!-- The class '.material-icons' is auto-added if a style has NOT been specified -->                               // 21126
 *  <md-icon> face </md-icon>                                                                                          // 21127
 *  <md-icon md-font-set="material-icons"> face </md-icon>                                                             // 21128
 *  <md-icon> #xE87C; </md-icon>                                                                                       // 21129
 *  <!-- The class '.material-icons' must be manually added if other styles are also specified-->                      // 21130
 *  <md-icon class="material-icons md-light md-48"> face </md-icon>                                                    // 21131
 * </hljs>                                                                                                             // 21132
 *                                                                                                                     // 21133
 * When using other Font-Icon libraries:                                                                               // 21134
 *                                                                                                                     // 21135
 * <hljs lang="js">                                                                                                    // 21136
 *  // Specify a font-icon style alias                                                                                 // 21137
 *  angular.config(function($mdIconProvider) {                                                                         // 21138
 *    $mdIconProvider.fontSet('fa', 'fontawesome');                                                                    // 21139
 *  });                                                                                                                // 21140
 * </hljs>                                                                                                             // 21141
 *                                                                                                                     // 21142
 * <hljs lang="html">                                                                                                  // 21143
 *  <md-icon md-font-set="fa">email</md-icon>                                                                          // 21144
 * </hljs>                                                                                                             // 21145
 *                                                                                                                     // 21146
 */                                                                                                                    // 21147
function mdIconDirective($mdIcon, $mdTheming, $mdAria ) {                                                              // 21148
                                                                                                                       // 21149
  return {                                                                                                             // 21150
    scope: {                                                                                                           // 21151
      fontSet : '@mdFontSet',                                                                                          // 21152
      fontIcon: '@mdFontIcon',                                                                                         // 21153
      svgIcon : '@mdSvgIcon',                                                                                          // 21154
      svgSrc  : '@mdSvgSrc'                                                                                            // 21155
    },                                                                                                                 // 21156
    restrict: 'E',                                                                                                     // 21157
    link : postLink                                                                                                    // 21158
  };                                                                                                                   // 21159
                                                                                                                       // 21160
                                                                                                                       // 21161
  /**                                                                                                                  // 21162
   * Directive postLink                                                                                                // 21163
   * Supports embedded SVGs, font-icons, & external SVGs                                                               // 21164
   */                                                                                                                  // 21165
  function postLink(scope, element, attr) {                                                                            // 21166
    $mdTheming(element);                                                                                               // 21167
                                                                                                                       // 21168
    prepareForFontIcon();                                                                                              // 21169
                                                                                                                       // 21170
    // If using a font-icon, then the textual name of the icon itself                                                  // 21171
    // provides the aria-label.                                                                                        // 21172
                                                                                                                       // 21173
    var label = attr.alt || scope.fontIcon || scope.svgIcon || element.text();                                         // 21174
    var attrName = attr.$normalize(attr.$attr.mdSvgIcon || attr.$attr.mdSvgSrc || '');                                 // 21175
                                                                                                                       // 21176
    if ( !attr['aria-label'] ) {                                                                                       // 21177
                                                                                                                       // 21178
      if (label != '' && !parentsHaveText() ) {                                                                        // 21179
                                                                                                                       // 21180
        $mdAria.expect(element, 'aria-label', label);                                                                  // 21181
        $mdAria.expect(element, 'role', 'img');                                                                        // 21182
                                                                                                                       // 21183
      } else if ( !element.text() ) {                                                                                  // 21184
        // If not a font-icon with ligature, then                                                                      // 21185
        // hide from the accessibility layer.                                                                          // 21186
                                                                                                                       // 21187
        $mdAria.expect(element, 'aria-hidden', 'true');                                                                // 21188
      }                                                                                                                // 21189
    }                                                                                                                  // 21190
                                                                                                                       // 21191
    if (attrName) {                                                                                                    // 21192
      // Use either pre-configured SVG or URL source, respectively.                                                    // 21193
      attr.$observe(attrName, function(attrVal) {                                                                      // 21194
                                                                                                                       // 21195
        element.empty();                                                                                               // 21196
        if (attrVal) {                                                                                                 // 21197
          $mdIcon(attrVal)                                                                                             // 21198
            .then(function(svg) {                                                                                      // 21199
              element.empty();                                                                                         // 21200
              element.append(svg);                                                                                     // 21201
            });                                                                                                        // 21202
        }                                                                                                              // 21203
                                                                                                                       // 21204
      });                                                                                                              // 21205
    }                                                                                                                  // 21206
                                                                                                                       // 21207
    function parentsHaveText() {                                                                                       // 21208
      var parent = element.parent();                                                                                   // 21209
      if (parent.attr('aria-label') || parent.text()) {                                                                // 21210
        return true;                                                                                                   // 21211
      }                                                                                                                // 21212
      else if(parent.parent().attr('aria-label') || parent.parent().text()) {                                          // 21213
        return true;                                                                                                   // 21214
      }                                                                                                                // 21215
      return false;                                                                                                    // 21216
    }                                                                                                                  // 21217
                                                                                                                       // 21218
    function prepareForFontIcon() {                                                                                    // 21219
      if (!scope.svgIcon && !scope.svgSrc) {                                                                           // 21220
        if (scope.fontIcon) {                                                                                          // 21221
          element.addClass('md-font ' + scope.fontIcon);                                                               // 21222
        }                                                                                                              // 21223
        element.addClass($mdIcon.fontSet(scope.fontSet));                                                              // 21224
      }                                                                                                                // 21225
    }                                                                                                                  // 21226
  }                                                                                                                    // 21227
}                                                                                                                      // 21228
                                                                                                                       // 21229
})();                                                                                                                  // 21230
(function(){                                                                                                           // 21231
"use strict";                                                                                                          // 21232
                                                                                                                       // 21233
  angular                                                                                                              // 21234
    .module('material.components.icon' )                                                                               // 21235
    .provider('$mdIcon', MdIconProvider);                                                                              // 21236
                                                                                                                       // 21237
  /**                                                                                                                  // 21238
    * @ngdoc service                                                                                                   // 21239
    * @name $mdIconProvider                                                                                            // 21240
    * @module material.components.icon                                                                                 // 21241
    *                                                                                                                  // 21242
    * @description                                                                                                     // 21243
    * `$mdIconProvider` is used only to register icon IDs with URLs. These configuration features allow                // 21244
    * icons and icon sets to be pre-registered and associated with source URLs **before** the `<md-icon />`            // 21245
    * directives are compiled.                                                                                         // 21246
    *                                                                                                                  // 21247
    * If using font-icons, the developer is responsible for loading the fonts.                                         // 21248
    *                                                                                                                  // 21249
    * If using SVGs, loading of the actual svg files are deferred to on-demand requests and are loaded                 // 21250
    * internally by the `$mdIcon` service using the `$http` service. When an SVG is requested by name/ID,              // 21251
    * the `$mdIcon` service searches its registry for the associated source URL;                                       // 21252
    * that URL is used to on-demand load and parse the SVG dynamically.                                                // 21253
    *                                                                                                                  // 21254
    * @usage                                                                                                           // 21255
    * <hljs lang="js">                                                                                                 // 21256
    *   app.config(function($mdIconProvider) {                                                                         // 21257
    *                                                                                                                  // 21258
    *     // Configure URLs for icons specified by [set:]id.                                                           // 21259
    *                                                                                                                  // 21260
    *     $mdIconProvider                                                                                              // 21261
    *          .defaultFontSet( 'fontawesome' )                                                                        // 21262
    *          .defaultIconSet('my/app/icons.svg')       // Register a default set of SVG icons                        // 21263
    *          .iconSet('social', 'my/app/social.svg')   // Register a named icon set of SVGs                          // 21264
    *          .icon('android', 'my/app/android.svg')    // Register a specific icon (by name)                         // 21265
    *          .icon('work:chair', 'my/app/chair.svg');  // Register icon in a specific set                            // 21266
    *   });                                                                                                            // 21267
    * </hljs>                                                                                                          // 21268
    *                                                                                                                  // 21269
    * SVG icons and icon sets can be easily pre-loaded and cached using either (a) a build process or (b) a runtime    // 21270
    * **startup** process (shown below):                                                                               // 21271
    *                                                                                                                  // 21272
    * <hljs lang="js">                                                                                                 // 21273
    *   app.config(function($mdIconProvider) {                                                                         // 21274
    *                                                                                                                  // 21275
    *     // Register a default set of SVG icon definitions                                                            // 21276
    *     $mdIconProvider.defaultIconSet('my/app/icons.svg')                                                           // 21277
    *                                                                                                                  // 21278
    *   })                                                                                                             // 21279
    *   .run(function($http, $templateCache){                                                                          // 21280
    *                                                                                                                  // 21281
    *     // Pre-fetch icons sources by URL and cache in the $templateCache...                                         // 21282
    *     // subsequent $http calls will look there first.                                                             // 21283
    *                                                                                                                  // 21284
    *     var urls = [ 'imy/app/icons.svg', 'img/icons/android.svg'];                                                  // 21285
    *                                                                                                                  // 21286
    *     angular.forEach(urls, function(url) {                                                                        // 21287
    *       $http.get(url, {cache: $templateCache});                                                                   // 21288
    *     });                                                                                                          // 21289
    *                                                                                                                  // 21290
    *   });                                                                                                            // 21291
    *                                                                                                                  // 21292
    * </hljs>                                                                                                          // 21293
    *                                                                                                                  // 21294
    * NOTE: the loaded SVG data is subsequently cached internally for future requests.                                 // 21295
    *                                                                                                                  // 21296
    */                                                                                                                 // 21297
                                                                                                                       // 21298
   /**                                                                                                                 // 21299
    * @ngdoc method                                                                                                    // 21300
    * @name $mdIconProvider#icon                                                                                       // 21301
    *                                                                                                                  // 21302
    * @description                                                                                                     // 21303
    * Register a source URL for a specific icon name; the name may include optional 'icon set' name prefix.            // 21304
    * These icons  will later be retrieved from the cache using `$mdIcon( <icon name> )`                               // 21305
    *                                                                                                                  // 21306
    * @param {string} id Icon name/id used to register the icon                                                        // 21307
    * @param {string} url specifies the external location for the data file. Used internally by `$http` to load the    // 21308
    * data or as part of the lookup in `$templateCache` if pre-loading was configured.                                 // 21309
    * @param {number=} viewBoxSize Sets the width and height the icon's viewBox.                                       // 21310
    * It is ignored for icons with an existing viewBox. Default size is 24.                                            // 21311
    *                                                                                                                  // 21312
    * @returns {obj} an `$mdIconProvider` reference; used to support method call chains for the API                    // 21313
    *                                                                                                                  // 21314
    * @usage                                                                                                           // 21315
    * <hljs lang="js">                                                                                                 // 21316
    *   app.config(function($mdIconProvider) {                                                                         // 21317
    *                                                                                                                  // 21318
    *     // Configure URLs for icons specified by [set:]id.                                                           // 21319
    *                                                                                                                  // 21320
    *     $mdIconProvider                                                                                              // 21321
    *          .icon('android', 'my/app/android.svg')    // Register a specific icon (by name)                         // 21322
    *          .icon('work:chair', 'my/app/chair.svg');  // Register icon in a specific set                            // 21323
    *   });                                                                                                            // 21324
    * </hljs>                                                                                                          // 21325
    *                                                                                                                  // 21326
    */                                                                                                                 // 21327
   /**                                                                                                                 // 21328
    * @ngdoc method                                                                                                    // 21329
    * @name $mdIconProvider#iconSet                                                                                    // 21330
    *                                                                                                                  // 21331
    * @description                                                                                                     // 21332
    * Register a source URL for a 'named' set of icons; group of SVG definitions where each definition                 // 21333
    * has an icon id. Individual icons can be subsequently retrieved from this cached set using                        // 21334
    * `$mdIcon(<icon set name>:<icon name>)`                                                                           // 21335
    *                                                                                                                  // 21336
    * @param {string} id Icon name/id used to register the iconset                                                     // 21337
    * @param {string} url specifies the external location for the data file. Used internally by `$http` to load the    // 21338
    * data or as part of the lookup in `$templateCache` if pre-loading was configured.                                 // 21339
    * @param {number=} viewBoxSize Sets the width and height of the viewBox of all icons in the set.                   // 21340
    * It is ignored for icons with an existing viewBox. All icons in the icon set should be the same size.             // 21341
    * Default value is 24.                                                                                             // 21342
    *                                                                                                                  // 21343
    * @returns {obj} an `$mdIconProvider` reference; used to support method call chains for the API                    // 21344
    *                                                                                                                  // 21345
    *                                                                                                                  // 21346
    * @usage                                                                                                           // 21347
    * <hljs lang="js">                                                                                                 // 21348
    *   app.config(function($mdIconProvider) {                                                                         // 21349
    *                                                                                                                  // 21350
    *     // Configure URLs for icons specified by [set:]id.                                                           // 21351
    *                                                                                                                  // 21352
    *     $mdIconProvider                                                                                              // 21353
    *          .iconSet('social', 'my/app/social.svg')   // Register a named icon set                                  // 21354
    *   });                                                                                                            // 21355
    * </hljs>                                                                                                          // 21356
    *                                                                                                                  // 21357
    */                                                                                                                 // 21358
   /**                                                                                                                 // 21359
    * @ngdoc method                                                                                                    // 21360
    * @name $mdIconProvider#defaultIconSet                                                                             // 21361
    *                                                                                                                  // 21362
    * @description                                                                                                     // 21363
    * Register a source URL for the default 'named' set of icons. Unless explicitly registered,                        // 21364
    * subsequent lookups of icons will failover to search this 'default' icon set.                                     // 21365
    * Icon can be retrieved from this cached, default set using `$mdIcon(<name>)`                                      // 21366
    *                                                                                                                  // 21367
    * @param {string} url specifies the external location for the data file. Used internally by `$http` to load the    // 21368
    * data or as part of the lookup in `$templateCache` if pre-loading was configured.                                 // 21369
    * @param {number=} viewBoxSize Sets the width and height of the viewBox of all icons in the set.                   // 21370
    * It is ignored for icons with an existing viewBox. All icons in the icon set should be the same size.             // 21371
    * Default value is 24.                                                                                             // 21372
    *                                                                                                                  // 21373
    * @returns {obj} an `$mdIconProvider` reference; used to support method call chains for the API                    // 21374
    *                                                                                                                  // 21375
    * @usage                                                                                                           // 21376
    * <hljs lang="js">                                                                                                 // 21377
    *   app.config(function($mdIconProvider) {                                                                         // 21378
    *                                                                                                                  // 21379
    *     // Configure URLs for icons specified by [set:]id.                                                           // 21380
    *                                                                                                                  // 21381
    *     $mdIconProvider                                                                                              // 21382
    *          .defaultIconSet( 'my/app/social.svg' )   // Register a default icon set                                 // 21383
    *   });                                                                                                            // 21384
    * </hljs>                                                                                                          // 21385
    *                                                                                                                  // 21386
    */                                                                                                                 // 21387
  /**                                                                                                                  // 21388
   * @ngdoc method                                                                                                     // 21389
   * @name $mdIconProvider#defaultFontSet                                                                              // 21390
   *                                                                                                                   // 21391
   * @description                                                                                                      // 21392
   * When using Font-Icons, Angular Material assumes the the Material Design icons will be used and automatically      // 21393
   * configures the default font-set == 'material-icons'. Note that the font-set references the font-icon library      // 21394
   * class style that should be applied to the `<md-icon>`.                                                            // 21395
   *                                                                                                                   // 21396
   * Configuring the default means that the attributes                                                                 // 21397
   * `md-font-set="material-icons"` or `class="material-icons"` do not need to be explicitly declared on the           // 21398
   * `<md-icon>` markup. For example:                                                                                  // 21399
   *                                                                                                                   // 21400
   *  `<md-icon> face </md-icon>`                                                                                      // 21401
   *  will render as                                                                                                   // 21402
   *  `<span class="material-icons"> face </span>`, and                                                                // 21403
   *                                                                                                                   // 21404
   *  `<md-icon md-font-set="fa"> face </md-icon>`                                                                     // 21405
   *  will render as                                                                                                   // 21406
   *  `<span class="fa"> face </span>`                                                                                 // 21407
   *                                                                                                                   // 21408
   * @param {string} name of the font-library style that should be applied to the md-icon DOM element                  // 21409
   *                                                                                                                   // 21410
   * @usage                                                                                                            // 21411
   * <hljs lang="js">                                                                                                  // 21412
   *   app.config(function($mdIconProvider) {                                                                          // 21413
   *     $mdIconProvider.defaultFontSet( 'fontawesome' );                                                              // 21414
   *   });                                                                                                             // 21415
   * </hljs>                                                                                                           // 21416
   *                                                                                                                   // 21417
   */                                                                                                                  // 21418
                                                                                                                       // 21419
   /**                                                                                                                 // 21420
    * @ngdoc method                                                                                                    // 21421
    * @name $mdIconProvider#defaultViewBoxSize                                                                         // 21422
    *                                                                                                                  // 21423
    * @description                                                                                                     // 21424
    * While `<md-icon />` markup can also be style with sizing CSS, this method configures                             // 21425
    * the default width **and** height used for all icons; unless overridden by specific CSS.                          // 21426
    * The default sizing is (24px, 24px).                                                                              // 21427
    * @param {number=} viewBoxSize Sets the width and height of the viewBox for an icon or an icon set.                // 21428
    * All icons in a set should be the same size. The default value is 24.                                             // 21429
    *                                                                                                                  // 21430
    * @returns {obj} an `$mdIconProvider` reference; used to support method call chains for the API                    // 21431
    *                                                                                                                  // 21432
    * @usage                                                                                                           // 21433
    * <hljs lang="js">                                                                                                 // 21434
    *   app.config(function($mdIconProvider) {                                                                         // 21435
    *                                                                                                                  // 21436
    *     // Configure URLs for icons specified by [set:]id.                                                           // 21437
    *                                                                                                                  // 21438
    *     $mdIconProvider                                                                                              // 21439
    *          .defaultViewBoxSize(36)   // Register a default icon size (width == height)                             // 21440
    *   });                                                                                                            // 21441
    * </hljs>                                                                                                          // 21442
    *                                                                                                                  // 21443
    */                                                                                                                 // 21444
                                                                                                                       // 21445
 var config = {                                                                                                        // 21446
   defaultViewBoxSize: 24,                                                                                             // 21447
   defaultFontSet: 'material-icons',                                                                                   // 21448
   fontSets : [ ]                                                                                                      // 21449
 };                                                                                                                    // 21450
                                                                                                                       // 21451
 function MdIconProvider() { }                                                                                         // 21452
                                                                                                                       // 21453
 MdIconProvider.prototype = {                                                                                          // 21454
   icon : function (id, url, viewBoxSize) {                                                                            // 21455
     if ( id.indexOf(':') == -1 ) id = '$default:' + id;                                                               // 21456
                                                                                                                       // 21457
     config[id] = new ConfigurationItem(url, viewBoxSize );                                                            // 21458
     return this;                                                                                                      // 21459
   },                                                                                                                  // 21460
                                                                                                                       // 21461
   iconSet : function (id, url, viewBoxSize) {                                                                         // 21462
     config[id] = new ConfigurationItem(url, viewBoxSize );                                                            // 21463
     return this;                                                                                                      // 21464
   },                                                                                                                  // 21465
                                                                                                                       // 21466
   defaultIconSet : function (url, viewBoxSize) {                                                                      // 21467
     var setName = '$default';                                                                                         // 21468
                                                                                                                       // 21469
     if ( !config[setName] ) {                                                                                         // 21470
       config[setName] = new ConfigurationItem(url, viewBoxSize );                                                     // 21471
     }                                                                                                                 // 21472
                                                                                                                       // 21473
     config[setName].viewBoxSize = viewBoxSize || config.defaultViewBoxSize;                                           // 21474
                                                                                                                       // 21475
     return this;                                                                                                      // 21476
   },                                                                                                                  // 21477
                                                                                                                       // 21478
   defaultViewBoxSize : function (viewBoxSize) {                                                                       // 21479
     config.defaultViewBoxSize = viewBoxSize;                                                                          // 21480
     return this;                                                                                                      // 21481
   },                                                                                                                  // 21482
                                                                                                                       // 21483
   /**                                                                                                                 // 21484
    * Register an alias name associated with a font-icon library style ;                                               // 21485
    */                                                                                                                 // 21486
   fontSet : function fontSet(alias, className) {                                                                      // 21487
    config.fontSets.push({                                                                                             // 21488
      alias : alias,                                                                                                   // 21489
      fontSet : className || alias                                                                                     // 21490
    });                                                                                                                // 21491
    return this;                                                                                                       // 21492
   },                                                                                                                  // 21493
                                                                                                                       // 21494
   /**                                                                                                                 // 21495
    * Specify a default style name associated with a font-icon library                                                 // 21496
    * fallback to Material Icons.                                                                                      // 21497
    *                                                                                                                  // 21498
    */                                                                                                                 // 21499
   defaultFontSet : function defaultFontSet(className) {                                                               // 21500
    config.defaultFontSet = !className ? '' : className;                                                               // 21501
    return this;                                                                                                       // 21502
   },                                                                                                                  // 21503
                                                                                                                       // 21504
   defaultIconSize : function defaultIconSize(iconSize) {                                                              // 21505
     config.defaultIconSize = iconSize;                                                                                // 21506
     return this;                                                                                                      // 21507
   },                                                                                                                  // 21508
                                                                                                                       // 21509
   preloadIcons: function ($templateCache) {                                                                           // 21510
     var iconProvider = this;                                                                                          // 21511
     var svgRegistry = [                                                                                               // 21512
       {                                                                                                               // 21513
         id : 'md-tabs-arrow',                                                                                         // 21514
         url: 'md-tabs-arrow.svg',                                                                                     // 21515
         svg: '<svg version="1.1" x="0px" y="0px" viewBox="0 0 24 24"><g><polygon points="15.4,7.4 14,6 8,12 14,18 15.4,16.6 10.8,12 "/></g></svg>'
       },                                                                                                              // 21517
       {                                                                                                               // 21518
         id : 'md-close',                                                                                              // 21519
         url: 'md-close.svg',                                                                                          // 21520
         svg: '<svg version="1.1" x="0px" y="0px" viewBox="0 0 24 24"><g><path d="M19 6.41l-1.41-1.41-5.59 5.59-5.59-5.59-1.41 1.41 5.59 5.59-5.59 5.59 1.41 1.41 5.59-5.59 5.59 5.59 1.41-1.41-5.59-5.59z"/></g></svg>'
       },                                                                                                              // 21522
       {                                                                                                               // 21523
         id:  'md-cancel',                                                                                             // 21524
         url: 'md-cancel.svg',                                                                                         // 21525
         svg: '<svg version="1.1" x="0px" y="0px" viewBox="0 0 24 24"><g><path d="M12 2c-5.53 0-10 4.47-10 10s4.47 10 10 10 10-4.47 10-10-4.47-10-10-10zm5 13.59l-1.41 1.41-3.59-3.59-3.59 3.59-1.41-1.41 3.59-3.59-3.59-3.59 1.41-1.41 3.59 3.59 3.59-3.59 1.41 1.41-3.59 3.59 3.59 3.59z"/></g></svg>'
       },                                                                                                              // 21527
       {                                                                                                               // 21528
         id:  'md-menu',                                                                                               // 21529
         url: 'md-menu.svg',                                                                                           // 21530
         svg: '<svg version="1.1" x="0px" y="0px" viewBox="0 0 24 24"><path d="M3,6H21V8H3V6M3,11H21V13H3V11M3,16H21V18H3V16Z" /></svg>'
       },                                                                                                              // 21532
       {                                                                                                               // 21533
         id:  'md-toggle-arrow',                                                                                       // 21534
         url: 'md-toggle-arrow-svg',                                                                                   // 21535
         svg: '<svg version="1.1" x="0px" y="0px" viewBox="0 0 48 48"><path d="M24 16l-12 12 2.83 2.83 9.17-9.17 9.17 9.17 2.83-2.83z"/><path d="M0 0h48v48h-48z" fill="none"/></svg>'
       },                                                                                                              // 21537
       {                                                                                                               // 21538
         id:  'md-calendar',                                                                                           // 21539
         url: 'md-calendar.svg',                                                                                       // 21540
         svg: '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path d="M19 3h-1V1h-2v2H8V1H6v2H5c-1.11 0-1.99.9-1.99 2L3 19c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 16H5V8h14v11zM7 10h5v5H7z"/></svg>'
       }                                                                                                               // 21542
     ];                                                                                                                // 21543
                                                                                                                       // 21544
     svgRegistry.forEach(function(asset){                                                                              // 21545
       iconProvider.icon(asset.id,  asset.url);                                                                        // 21546
       $templateCache.put(asset.url, asset.svg);                                                                       // 21547
     });                                                                                                               // 21548
                                                                                                                       // 21549
   },                                                                                                                  // 21550
                                                                                                                       // 21551
   $get : ['$http', '$q', '$log', '$templateCache', function($http, $q, $log, $templateCache) {                        // 21552
     this.preloadIcons($templateCache);                                                                                // 21553
     return MdIconService(config, $http, $q, $log, $templateCache);                                                    // 21554
   }]                                                                                                                  // 21555
 };                                                                                                                    // 21556
                                                                                                                       // 21557
   /**                                                                                                                 // 21558
    *  Configuration item stored in the Icon registry; used for lookups                                                // 21559
    *  to load if not already cached in the `loaded` cache                                                             // 21560
    */                                                                                                                 // 21561
   function ConfigurationItem(url, viewBoxSize) {                                                                      // 21562
     this.url = url;                                                                                                   // 21563
     this.viewBoxSize = viewBoxSize || config.defaultViewBoxSize;                                                      // 21564
   }                                                                                                                   // 21565
                                                                                                                       // 21566
 /**                                                                                                                   // 21567
  * @ngdoc service                                                                                                     // 21568
  * @name $mdIcon                                                                                                      // 21569
  * @module material.components.icon                                                                                   // 21570
  *                                                                                                                    // 21571
  * @description                                                                                                       // 21572
  * The `$mdIcon` service is a function used to lookup SVG icons.                                                      // 21573
  *                                                                                                                    // 21574
  * @param {string} id Query value for a unique Id or URL. If the argument is a URL, then the service will retrieve the icon element
  * from its internal cache or load the icon and cache it first. If the value is not a URL-type string, then an ID lookup is
  * performed. The Id may be a unique icon ID or may include an iconSet ID prefix.                                     // 21577
  *                                                                                                                    // 21578
  * For the **id** query to work properly, this means that all id-to-URL mappings must have been previously configured
  * using the `$mdIconProvider`.                                                                                       // 21580
  *                                                                                                                    // 21581
  * @returns {obj} Clone of the initial SVG DOM element; which was created from the SVG markup in the SVG data file.   // 21582
  *                                                                                                                    // 21583
  * @usage                                                                                                             // 21584
  * <hljs lang="js">                                                                                                   // 21585
  * function SomeDirective($mdIcon) {                                                                                  // 21586
  *                                                                                                                    // 21587
  *   // See if the icon has already been loaded, if not                                                               // 21588
  *   // then lookup the icon from the registry cache, load and cache                                                  // 21589
  *   // it for future requests.                                                                                       // 21590
  *   // NOTE: ID queries require configuration with $mdIconProvider                                                   // 21591
  *                                                                                                                    // 21592
  *   $mdIcon('android').then(function(iconEl)    { element.append(iconEl); });                                        // 21593
  *   $mdIcon('work:chair').then(function(iconEl) { element.append(iconEl); });                                        // 21594
  *                                                                                                                    // 21595
  *   // Load and cache the external SVG using a URL                                                                   // 21596
  *                                                                                                                    // 21597
  *   $mdIcon('img/icons/android.svg').then(function(iconEl) {                                                         // 21598
  *     element.append(iconEl);                                                                                        // 21599
  *   });                                                                                                              // 21600
  * };                                                                                                                 // 21601
  * </hljs>                                                                                                            // 21602
  *                                                                                                                    // 21603
  * NOTE: The `<md-icon />  ` directive internally uses the `$mdIcon` service to query, loaded, and instantiate        // 21604
  * SVG DOM elements.                                                                                                  // 21605
  */                                                                                                                   // 21606
                                                                                                                       // 21607
  /* @ngInject */                                                                                                      // 21608
 function MdIconService(config, $http, $q, $log, $templateCache) {                                                     // 21609
   var iconCache = {};                                                                                                 // 21610
   var urlRegex = /[-a-zA-Z0-9@:%_\+.~#?&//=]{2,256}\.[a-z]{2,4}\b(\/[-a-zA-Z0-9@:%_\+.~#?&//=]*)?/i;                  // 21611
                                                                                                                       // 21612
   Icon.prototype = { clone : cloneSVG, prepare: prepareAndStyle };                                                    // 21613
   getIcon.fontSet = findRegisteredFontSet;                                                                            // 21614
                                                                                                                       // 21615
   // Publish service...                                                                                               // 21616
   return getIcon;                                                                                                     // 21617
                                                                                                                       // 21618
   /**                                                                                                                 // 21619
    * Actual $mdIcon service is essentially a lookup function                                                          // 21620
    */                                                                                                                 // 21621
   function getIcon(id) {                                                                                              // 21622
     id = id || '';                                                                                                    // 21623
                                                                                                                       // 21624
     // If already loaded and cached, use a clone of the cached icon.                                                  // 21625
     // Otherwise either load by URL, or lookup in the registry and then load by URL, and cache.                       // 21626
                                                                                                                       // 21627
     if ( iconCache[id]         ) return $q.when( iconCache[id].clone() );                                             // 21628
     if ( urlRegex.test(id)     ) return loadByURL(id).then( cacheIcon(id) );                                          // 21629
     if ( id.indexOf(':') == -1 ) id = '$default:' + id;                                                               // 21630
                                                                                                                       // 21631
     var load = config[id] ? loadByID : loadFromIconSet;                                                               // 21632
     return load(id)                                                                                                   // 21633
         .then( cacheIcon(id) );                                                                                       // 21634
   }                                                                                                                   // 21635
                                                                                                                       // 21636
   /**                                                                                                                 // 21637
    * Lookup registered fontSet style using its alias...                                                               // 21638
    * If not found,                                                                                                    // 21639
    */                                                                                                                 // 21640
   function findRegisteredFontSet(alias) {                                                                             // 21641
      var useDefault = angular.isUndefined(alias) || !(alias && alias.length);                                         // 21642
      if ( useDefault ) return config.defaultFontSet;                                                                  // 21643
                                                                                                                       // 21644
      var result = alias;                                                                                              // 21645
      angular.forEach(config.fontSets, function(it){                                                                   // 21646
        if ( it.alias == alias ) result = it.fontSet || result;                                                        // 21647
      });                                                                                                              // 21648
                                                                                                                       // 21649
      return result;                                                                                                   // 21650
   }                                                                                                                   // 21651
                                                                                                                       // 21652
   /**                                                                                                                 // 21653
    * Prepare and cache the loaded icon for the specified `id`                                                         // 21654
    */                                                                                                                 // 21655
   function cacheIcon( id ) {                                                                                          // 21656
                                                                                                                       // 21657
     return function updateCache( icon ) {                                                                             // 21658
       iconCache[id] = isIcon(icon) ? icon : new Icon(icon, config[id]);                                               // 21659
                                                                                                                       // 21660
       return iconCache[id].clone();                                                                                   // 21661
     };                                                                                                                // 21662
   }                                                                                                                   // 21663
                                                                                                                       // 21664
   /**                                                                                                                 // 21665
    * Lookup the configuration in the registry, if !registered throw an error                                          // 21666
    * otherwise load the icon [on-demand] using the registered URL.                                                    // 21667
    *                                                                                                                  // 21668
    */                                                                                                                 // 21669
   function loadByID(id) {                                                                                             // 21670
    var iconConfig = config[id];                                                                                       // 21671
     return loadByURL(iconConfig.url).then(function(icon) {                                                            // 21672
       return new Icon(icon, iconConfig);                                                                              // 21673
     });                                                                                                               // 21674
   }                                                                                                                   // 21675
                                                                                                                       // 21676
   /**                                                                                                                 // 21677
    *    Loads the file as XML and uses querySelector( <id> ) to find                                                  // 21678
    *    the desired node...                                                                                           // 21679
    */                                                                                                                 // 21680
   function loadFromIconSet(id) {                                                                                      // 21681
     var setName = id.substring(0, id.lastIndexOf(':')) || '$default';                                                 // 21682
     var iconSetConfig = config[setName];                                                                              // 21683
                                                                                                                       // 21684
     return !iconSetConfig ? announceIdNotFound(id) : loadByURL(iconSetConfig.url).then(extractFromSet);               // 21685
                                                                                                                       // 21686
     function extractFromSet(set) {                                                                                    // 21687
       var iconName = id.slice(id.lastIndexOf(':') + 1);                                                               // 21688
       var icon = set.querySelector('#' + iconName);                                                                   // 21689
       return !icon ? announceIdNotFound(id) : new Icon(icon, iconSetConfig);                                          // 21690
     }                                                                                                                 // 21691
                                                                                                                       // 21692
     function announceIdNotFound(id) {                                                                                 // 21693
       var msg = 'icon ' + id + ' not found';                                                                          // 21694
      $log.warn(msg);                                                                                                  // 21695
                                                                                                                       // 21696
       return $q.reject(msg || id);                                                                                    // 21697
     }                                                                                                                 // 21698
   }                                                                                                                   // 21699
                                                                                                                       // 21700
   /**                                                                                                                 // 21701
    * Load the icon by URL (may use the $templateCache).                                                               // 21702
    * Extract the data for later conversion to Icon                                                                    // 21703
    */                                                                                                                 // 21704
   function loadByURL(url) {                                                                                           // 21705
     return $http                                                                                                      // 21706
       .get(url, { cache: $templateCache })                                                                            // 21707
       .then(function(response) {                                                                                      // 21708
         return angular.element('<div>').append(response.data).find('svg')[0];                                         // 21709
       }).catch(announceNotFound);                                                                                     // 21710
   }                                                                                                                   // 21711
                                                                                                                       // 21712
   /**                                                                                                                 // 21713
    * Catch HTTP or generic errors not related to incorrect icon IDs.                                                  // 21714
    */                                                                                                                 // 21715
   function announceNotFound(err) {                                                                                    // 21716
     var msg = angular.isString(err) ? err : (err.message || err.data || err.statusText);                              // 21717
     $log.warn(msg);                                                                                                   // 21718
                                                                                                                       // 21719
     return $q.reject(msg);                                                                                            // 21720
   }                                                                                                                   // 21721
                                                                                                                       // 21722
   /**                                                                                                                 // 21723
    * Check target signature to see if it is an Icon instance.                                                         // 21724
    */                                                                                                                 // 21725
   function isIcon(target) {                                                                                           // 21726
     return angular.isDefined(target.element) && angular.isDefined(target.config);                                     // 21727
   }                                                                                                                   // 21728
                                                                                                                       // 21729
   /**                                                                                                                 // 21730
    *  Define the Icon class                                                                                           // 21731
    */                                                                                                                 // 21732
   function Icon(el, config) {                                                                                         // 21733
     if (el && el.tagName != 'svg') {                                                                                  // 21734
       el = angular.element('<svg xmlns="http://www.w3.org/2000/svg">').append(el)[0];                                 // 21735
     }                                                                                                                 // 21736
                                                                                                                       // 21737
     // Inject the namespace if not available...                                                                       // 21738
     if ( !el.getAttribute('xmlns') ) {                                                                                // 21739
       el.setAttribute('xmlns', "http://www.w3.org/2000/svg");                                                         // 21740
     }                                                                                                                 // 21741
                                                                                                                       // 21742
     this.element = el;                                                                                                // 21743
     this.config = config;                                                                                             // 21744
     this.prepare();                                                                                                   // 21745
   }                                                                                                                   // 21746
                                                                                                                       // 21747
   /**                                                                                                                 // 21748
    *  Prepare the DOM element that will be cached in the                                                              // 21749
    *  loaded iconCache store.                                                                                         // 21750
    */                                                                                                                 // 21751
   function prepareAndStyle() {                                                                                        // 21752
     var viewBoxSize = this.config ? this.config.viewBoxSize : config.defaultViewBoxSize;                              // 21753
         angular.forEach({                                                                                             // 21754
           'fit'   : '',                                                                                               // 21755
           'height': '100%',                                                                                           // 21756
           'width' : '100%',                                                                                           // 21757
           'preserveAspectRatio': 'xMidYMid meet',                                                                     // 21758
           'viewBox' : this.element.getAttribute('viewBox') || ('0 0 ' + viewBoxSize + ' ' + viewBoxSize)              // 21759
         }, function(val, attr) {                                                                                      // 21760
           this.element.setAttribute(attr, val);                                                                       // 21761
         }, this);                                                                                                     // 21762
   }                                                                                                                   // 21763
                                                                                                                       // 21764
   /**                                                                                                                 // 21765
    * Clone the Icon DOM element.                                                                                      // 21766
    */                                                                                                                 // 21767
   function cloneSVG(){                                                                                                // 21768
     // If the element or any of its children have a style attribute, then a CSP policy without                        // 21769
     // 'unsafe-inline' in the style-src directive, will result in a violation.                                        // 21770
     return this.element.cloneNode(true);                                                                              // 21771
   }                                                                                                                   // 21772
                                                                                                                       // 21773
 }                                                                                                                     // 21774
 MdIconService.$inject = ["config", "$http", "$q", "$log", "$templateCache"];                                          // 21775
                                                                                                                       // 21776
})();                                                                                                                  // 21777
(function(){                                                                                                           // 21778
"use strict";                                                                                                          // 21779
                                                                                                                       // 21780
                                                                                                                       // 21781
angular                                                                                                                // 21782
  .module('material.components.menuBar')                                                                               // 21783
  .controller('MenuBarController', MenuBarController);                                                                 // 21784
                                                                                                                       // 21785
var BOUND_MENU_METHODS = ['handleKeyDown', 'handleMenuHover', 'scheduleOpenHoveredMenu', 'cancelScheduledOpen'];       // 21786
                                                                                                                       // 21787
/**                                                                                                                    // 21788
 * @ngInject                                                                                                           // 21789
 */                                                                                                                    // 21790
function MenuBarController($scope, $rootScope, $element, $attrs, $mdConstant, $document, $mdUtil, $timeout) {          // 21791
  this.$element = $element;                                                                                            // 21792
  this.$attrs = $attrs;                                                                                                // 21793
  this.$mdConstant = $mdConstant;                                                                                      // 21794
  this.$mdUtil = $mdUtil;                                                                                              // 21795
  this.$document = $document;                                                                                          // 21796
  this.$scope = $scope;                                                                                                // 21797
  this.$rootScope = $rootScope;                                                                                        // 21798
  this.$timeout = $timeout;                                                                                            // 21799
                                                                                                                       // 21800
  var self = this;                                                                                                     // 21801
  angular.forEach(BOUND_MENU_METHODS, function(methodName) {                                                           // 21802
    self[methodName] = angular.bind(self, self[methodName]);                                                           // 21803
  });                                                                                                                  // 21804
}                                                                                                                      // 21805
MenuBarController.$inject = ["$scope", "$rootScope", "$element", "$attrs", "$mdConstant", "$document", "$mdUtil", "$timeout"];
                                                                                                                       // 21807
MenuBarController.prototype.init = function() {                                                                        // 21808
  var $element = this.$element;                                                                                        // 21809
  var $mdUtil = this.$mdUtil;                                                                                          // 21810
  var $scope = this.$scope;                                                                                            // 21811
                                                                                                                       // 21812
  var self = this;                                                                                                     // 21813
  var deregisterFns = [];                                                                                              // 21814
  $element.on('keydown', this.handleKeyDown);                                                                          // 21815
  this.parentToolbar = $mdUtil.getClosest($element, 'MD-TOOLBAR');                                                     // 21816
                                                                                                                       // 21817
  deregisterFns.push(this.$rootScope.$on('$mdMenuOpen', function(event, el) {                                          // 21818
    if (self.getMenus().indexOf(el[0]) != -1) {                                                                        // 21819
      $element[0].classList.add('md-open');                                                                            // 21820
      el[0].classList.add('md-open');                                                                                  // 21821
      self.currentlyOpenMenu = el.controller('mdMenu');                                                                // 21822
      self.currentlyOpenMenu.registerContainerProxy(self.handleKeyDown);                                               // 21823
      self.enableOpenOnHover();                                                                                        // 21824
    }                                                                                                                  // 21825
  }));                                                                                                                 // 21826
                                                                                                                       // 21827
  deregisterFns.push(this.$rootScope.$on('$mdMenuClose', function(event, el, opts) {                                   // 21828
    var rootMenus = self.getMenus();                                                                                   // 21829
    if (rootMenus.indexOf(el[0]) != -1) {                                                                              // 21830
      $element[0].classList.remove('md-open');                                                                         // 21831
      el[0].classList.remove('md-open');                                                                               // 21832
    }                                                                                                                  // 21833
                                                                                                                       // 21834
    if ($element[0].contains(el[0])) {                                                                                 // 21835
      var parentMenu = el[0];                                                                                          // 21836
      while (parentMenu && rootMenus.indexOf(parentMenu) == -1) {                                                      // 21837
        parentMenu = $mdUtil.getClosest(parentMenu, 'MD-MENU', true);                                                  // 21838
      }                                                                                                                // 21839
      if (parentMenu) {                                                                                                // 21840
        if (!opts.skipFocus) parentMenu.querySelector('button:not([disabled])').focus();                               // 21841
        self.currentlyOpenMenu = undefined;                                                                            // 21842
        self.disableOpenOnHover();                                                                                     // 21843
        self.setKeyboardMode(true);                                                                                    // 21844
      }                                                                                                                // 21845
    }                                                                                                                  // 21846
  }));                                                                                                                 // 21847
                                                                                                                       // 21848
  $scope.$on('$destroy', function() {                                                                                  // 21849
    while (deregisterFns.length) {                                                                                     // 21850
      deregisterFns.shift()();                                                                                         // 21851
    }                                                                                                                  // 21852
  });                                                                                                                  // 21853
                                                                                                                       // 21854
                                                                                                                       // 21855
  this.setKeyboardMode(true);                                                                                          // 21856
};                                                                                                                     // 21857
                                                                                                                       // 21858
MenuBarController.prototype.setKeyboardMode = function(enabled) {                                                      // 21859
  if (enabled) this.$element[0].classList.add('md-keyboard-mode');                                                     // 21860
  else this.$element[0].classList.remove('md-keyboard-mode');                                                          // 21861
};                                                                                                                     // 21862
                                                                                                                       // 21863
MenuBarController.prototype.enableOpenOnHover = function() {                                                           // 21864
  if (this.openOnHoverEnabled) return;                                                                                 // 21865
  this.openOnHoverEnabled = true;                                                                                      // 21866
                                                                                                                       // 21867
  var parentToolbar;                                                                                                   // 21868
  if (parentToolbar = this.parentToolbar) {                                                                            // 21869
    parentToolbar.dataset.mdRestoreStyle = parentToolbar.getAttribute('style');                                        // 21870
    parentToolbar.style.position = 'relative';                                                                         // 21871
    parentToolbar.style.zIndex = 100;                                                                                  // 21872
  }                                                                                                                    // 21873
  angular                                                                                                              // 21874
    .element(this.getMenus())                                                                                          // 21875
    .on('mouseenter', this.handleMenuHover);                                                                           // 21876
};                                                                                                                     // 21877
                                                                                                                       // 21878
MenuBarController.prototype.handleMenuHover = function(e) {                                                            // 21879
  this.setKeyboardMode(false);                                                                                         // 21880
  if (this.openOnHoverEnabled) {                                                                                       // 21881
    this.scheduleOpenHoveredMenu(e);                                                                                   // 21882
  }                                                                                                                    // 21883
};                                                                                                                     // 21884
                                                                                                                       // 21885
                                                                                                                       // 21886
MenuBarController.prototype.disableOpenOnHover = function() {                                                          // 21887
  if (!this.openOnHoverEnabled) return;                                                                                // 21888
  this.openOnHoverEnabled = false;                                                                                     // 21889
  var parentToolbar;                                                                                                   // 21890
  if (parentToolbar = this.parentToolbar) {                                                                            // 21891
    parentToolbar.style.cssText = parentToolbar.dataset.mdRestoreStyle || '';                                          // 21892
  }                                                                                                                    // 21893
  angular                                                                                                              // 21894
    .element(this.getMenus())                                                                                          // 21895
    .off('mouseenter', this.handleMenuHover);                                                                          // 21896
};                                                                                                                     // 21897
                                                                                                                       // 21898
MenuBarController.prototype.scheduleOpenHoveredMenu = function(e) {                                                    // 21899
  var menuEl = angular.element(e.currentTarget);                                                                       // 21900
  var menuCtrl = menuEl.controller('mdMenu');                                                                          // 21901
  this.setKeyboardMode(false);                                                                                         // 21902
  this.scheduleOpenMenu(menuCtrl);                                                                                     // 21903
};                                                                                                                     // 21904
                                                                                                                       // 21905
MenuBarController.prototype.scheduleOpenMenu = function(menuCtrl) {                                                    // 21906
  var self = this;                                                                                                     // 21907
  var $timeout = this.$timeout;                                                                                        // 21908
  if (menuCtrl != self.currentlyOpenMenu) {                                                                            // 21909
    $timeout.cancel(self.pendingMenuOpen);                                                                             // 21910
    self.pendingMenuOpen = $timeout(function() {                                                                       // 21911
      self.pendingMenuOpen = undefined;                                                                                // 21912
      if (self.currentlyOpenMenu) {                                                                                    // 21913
        self.currentlyOpenMenu.close(true, { closeAll: true });                                                        // 21914
      }                                                                                                                // 21915
      menuCtrl.open();                                                                                                 // 21916
    }, 200, false);                                                                                                    // 21917
  }                                                                                                                    // 21918
};                                                                                                                     // 21919
                                                                                                                       // 21920
MenuBarController.prototype.handleKeyDown = function(e) {                                                              // 21921
  var keyCodes = this.$mdConstant.KEY_CODE;                                                                            // 21922
  var currentMenu = this.currentlyOpenMenu;                                                                            // 21923
  var wasOpen = currentMenu && currentMenu.isOpen;                                                                     // 21924
  this.setKeyboardMode(true);                                                                                          // 21925
  var handled, newMenu, newMenuCtrl;                                                                                   // 21926
  switch (e.keyCode) {                                                                                                 // 21927
    case keyCodes.DOWN_ARROW:                                                                                          // 21928
      if (currentMenu) {                                                                                               // 21929
        currentMenu.focusMenuContainer();                                                                              // 21930
      } else {                                                                                                         // 21931
        this.openFocusedMenu();                                                                                        // 21932
      }                                                                                                                // 21933
      handled = true;                                                                                                  // 21934
      break;                                                                                                           // 21935
    case keyCodes.UP_ARROW:                                                                                            // 21936
      currentMenu && currentMenu.close();                                                                              // 21937
      handled = true;                                                                                                  // 21938
      break;                                                                                                           // 21939
    case keyCodes.LEFT_ARROW:                                                                                          // 21940
      newMenu = this.focusMenu(-1);                                                                                    // 21941
      if (wasOpen) {                                                                                                   // 21942
        newMenuCtrl = angular.element(newMenu).controller('mdMenu');                                                   // 21943
        this.scheduleOpenMenu(newMenuCtrl);                                                                            // 21944
      }                                                                                                                // 21945
      handled = true;                                                                                                  // 21946
      break;                                                                                                           // 21947
    case keyCodes.RIGHT_ARROW:                                                                                         // 21948
      newMenu = this.focusMenu(+1);                                                                                    // 21949
      if (wasOpen) {                                                                                                   // 21950
        newMenuCtrl = angular.element(newMenu).controller('mdMenu');                                                   // 21951
        this.scheduleOpenMenu(newMenuCtrl);                                                                            // 21952
      }                                                                                                                // 21953
      handled = true;                                                                                                  // 21954
      break;                                                                                                           // 21955
  }                                                                                                                    // 21956
  if (handled) {                                                                                                       // 21957
    e && e.preventDefault && e.preventDefault();                                                                       // 21958
    e && e.stopImmediatePropagation && e.stopImmediatePropagation();                                                   // 21959
  }                                                                                                                    // 21960
};                                                                                                                     // 21961
                                                                                                                       // 21962
MenuBarController.prototype.focusMenu = function(direction) {                                                          // 21963
  var menus = this.getMenus();                                                                                         // 21964
  var focusedIndex = this.getFocusedMenuIndex();                                                                       // 21965
                                                                                                                       // 21966
  if (focusedIndex == -1) { focusedIndex = this.getOpenMenuIndex(); }                                                  // 21967
                                                                                                                       // 21968
  var changed = false;                                                                                                 // 21969
                                                                                                                       // 21970
  if (focusedIndex == -1) { focusedIndex = 0; }                                                                        // 21971
  else if (                                                                                                            // 21972
    direction < 0 && focusedIndex > 0 ||                                                                               // 21973
    direction > 0 && focusedIndex < menus.length - direction                                                           // 21974
  ) {                                                                                                                  // 21975
    focusedIndex += direction;                                                                                         // 21976
    changed = true;                                                                                                    // 21977
  }                                                                                                                    // 21978
  if (changed) {                                                                                                       // 21979
    menus[focusedIndex].querySelector('button').focus();                                                               // 21980
    return menus[focusedIndex];                                                                                        // 21981
  }                                                                                                                    // 21982
};                                                                                                                     // 21983
                                                                                                                       // 21984
MenuBarController.prototype.openFocusedMenu = function() {                                                             // 21985
  var menu = this.getFocusedMenu();                                                                                    // 21986
  menu && angular.element(menu).controller('mdMenu').open();                                                           // 21987
};                                                                                                                     // 21988
                                                                                                                       // 21989
MenuBarController.prototype.getMenus = function() {                                                                    // 21990
  var $element = this.$element;                                                                                        // 21991
  return this.$mdUtil.nodesToArray($element[0].children)                                                               // 21992
    .filter(function(el) { return el.nodeName == 'MD-MENU'; });                                                        // 21993
};                                                                                                                     // 21994
                                                                                                                       // 21995
MenuBarController.prototype.getFocusedMenu = function() {                                                              // 21996
  return this.getMenus()[this.getFocusedMenuIndex()];                                                                  // 21997
};                                                                                                                     // 21998
                                                                                                                       // 21999
MenuBarController.prototype.getFocusedMenuIndex = function() {                                                         // 22000
  var $mdUtil = this.$mdUtil;                                                                                          // 22001
  var focusedEl = $mdUtil.getClosest(                                                                                  // 22002
    this.$document[0].activeElement,                                                                                   // 22003
    'MD-MENU'                                                                                                          // 22004
  );                                                                                                                   // 22005
  if (!focusedEl) return -1;                                                                                           // 22006
                                                                                                                       // 22007
  var focusedIndex = this.getMenus().indexOf(focusedEl);                                                               // 22008
  return focusedIndex;                                                                                                 // 22009
                                                                                                                       // 22010
};                                                                                                                     // 22011
                                                                                                                       // 22012
MenuBarController.prototype.getOpenMenuIndex = function() {                                                            // 22013
  var menus = this.getMenus();                                                                                         // 22014
  for (var i = 0; i < menus.length; ++i) {                                                                             // 22015
    if (menus[i].classList.contains('md-open')) return i;                                                              // 22016
  }                                                                                                                    // 22017
  return -1;                                                                                                           // 22018
};                                                                                                                     // 22019
                                                                                                                       // 22020
                                                                                                                       // 22021
                                                                                                                       // 22022
                                                                                                                       // 22023
                                                                                                                       // 22024
                                                                                                                       // 22025
                                                                                                                       // 22026
                                                                                                                       // 22027
                                                                                                                       // 22028
})();                                                                                                                  // 22029
(function(){                                                                                                           // 22030
"use strict";                                                                                                          // 22031
                                                                                                                       // 22032
/**                                                                                                                    // 22033
 * @ngdoc directive                                                                                                    // 22034
 * @name mdMenuBar                                                                                                     // 22035
 * @module material.components.menu-bar                                                                                // 22036
 * @restrict E                                                                                                         // 22037
 * @description                                                                                                        // 22038
 *                                                                                                                     // 22039
 * Menu bars are containers that hold multiple menus. They change the behavior and appearence                          // 22040
 * of the `md-menu` directive to behave similar to an operating system provided menu.                                  // 22041
 *                                                                                                                     // 22042
 * @usage                                                                                                              // 22043
 * <hljs lang="html">                                                                                                  // 22044
 * <md-menu-bar>                                                                                                       // 22045
 *   <md-menu>                                                                                                         // 22046
 *     <button ng-click="$mdOpenMenu()">                                                                               // 22047
 *       File                                                                                                          // 22048
 *     </button>                                                                                                       // 22049
 *     <md-menu-content>                                                                                               // 22050
 *       <md-menu-item>                                                                                                // 22051
 *         <md-button ng-click="ctrl.sampleAction('share', $event)">                                                   // 22052
 *           Share...                                                                                                  // 22053
 *         </md-button>                                                                                                // 22054
 *       </md-menu-item>                                                                                               // 22055
 *       <md-menu-divider></md-menu-divider>                                                                           // 22056
 *       <md-menu-item>                                                                                                // 22057
 *       <md-menu-item>                                                                                                // 22058
 *         <md-menu>                                                                                                   // 22059
 *           <md-button ng-click="$mdOpenMenu()">New</md-button>                                                       // 22060
 *           <md-menu-content>                                                                                         // 22061
 *             <md-menu-item><md-button ng-click="ctrl.sampleAction('New Document', $event)">Document</md-button></md-menu-item>
 *             <md-menu-item><md-button ng-click="ctrl.sampleAction('New Spreadsheet', $event)">Spreadsheet</md-button></md-menu-item>
 *             <md-menu-item><md-button ng-click="ctrl.sampleAction('New Presentation', $event)">Presentation</md-button></md-menu-item>
 *             <md-menu-item><md-button ng-click="ctrl.sampleAction('New Form', $event)">Form</md-button></md-menu-item>
 *             <md-menu-item><md-button ng-click="ctrl.sampleAction('New Drawing', $event)">Drawing</md-button></md-menu-item>
 *           </md-menu-content>                                                                                        // 22067
 *         </md-menu>                                                                                                  // 22068
 *       </md-menu-item>                                                                                               // 22069
 *     </md-menu-content>                                                                                              // 22070
 *   </md-menu>                                                                                                        // 22071
 * </md-menu-bar>                                                                                                      // 22072
 * </hljs>                                                                                                             // 22073
 *                                                                                                                     // 22074
 * ## Menu Bar Controls                                                                                                // 22075
 *                                                                                                                     // 22076
 * You may place `md-menu-items` that function as controls within menu bars.                                           // 22077
 * There are two modes that are exposed via the `type` attribute of the `md-menu-item`.                                // 22078
 * `type="checkbox"` will function as a boolean control for the `ng-model` attribute of the                            // 22079
 * `md-menu-item`. `type="radio"` will function like a radio button, setting the `ngModel`                             // 22080
 * to the `string` value of the `value` attribute. If you need non-string values, you can use                          // 22081
 * `ng-value` to provide an expression (this is similar to how angular's native `input[type=radio]` works.             // 22082
 *                                                                                                                     // 22083
 * <hljs lang="html">                                                                                                  // 22084
 * <md-menu-bar>                                                                                                       // 22085
 *  <md-menu>                                                                                                          // 22086
 *    <button ng-click="$mdOpenMenu()">                                                                                // 22087
 *      Sample Menu                                                                                                    // 22088
 *    </button>                                                                                                        // 22089
 *    <md-menu-content>                                                                                                // 22090
 *      <md-menu-item type="checkbox" ng-model="settings.allowChanges">Allow changes</md-menu-item>                    // 22091
 *      <md-menu-divider></md-menu-divider>                                                                            // 22092
 *      <md-menu-item type="radio" ng-model="settings.mode" ng-value="1">Mode 1</md-menu-item>                         // 22093
 *      <md-menu-item type="radio" ng-model="settings.mode" ng-value="1">Mode 2</md-menu-item>                         // 22094
 *      <md-menu-item type="radio" ng-model="settings.mode" ng-value="1">Mode 3</md-menu-item>                         // 22095
 *    </md-menu-content>                                                                                               // 22096
 *  </md-menu>                                                                                                         // 22097
 * </md-menu-bar>                                                                                                      // 22098
 * </hljs>                                                                                                             // 22099
 *                                                                                                                     // 22100
 *                                                                                                                     // 22101
 * ### Nesting Menus                                                                                                   // 22102
 *                                                                                                                     // 22103
 * Menus may be nested within menu bars. This is commonly called cascading menus.                                      // 22104
 * To nest a menu place the nested menu inside the content of the `md-menu-item`.                                      // 22105
 * <hljs lang="html">                                                                                                  // 22106
 * <md-menu-item>                                                                                                      // 22107
 *   <md-menu>                                                                                                         // 22108
 *     <button ng-click="$mdOpenMenu()">New</md-button>                                                                // 22109
 *     <md-menu-content>                                                                                               // 22110
 *       <md-menu-item><md-button ng-click="ctrl.sampleAction('New Document', $event)">Document</md-button></md-menu-item>
 *       <md-menu-item><md-button ng-click="ctrl.sampleAction('New Spreadsheet', $event)">Spreadsheet</md-button></md-menu-item>
 *       <md-menu-item><md-button ng-click="ctrl.sampleAction('New Presentation', $event)">Presentation</md-button></md-menu-item>
 *       <md-menu-item><md-button ng-click="ctrl.sampleAction('New Form', $event)">Form</md-button></md-menu-item>     // 22114
 *       <md-menu-item><md-button ng-click="ctrl.sampleAction('New Drawing', $event)">Drawing</md-button></md-menu-item>
 *     </md-menu-content>                                                                                              // 22116
 *   </md-menu>                                                                                                        // 22117
 * </md-menu-item>                                                                                                     // 22118
 * </hljs>                                                                                                             // 22119
 *                                                                                                                     // 22120
 */                                                                                                                    // 22121
                                                                                                                       // 22122
angular                                                                                                                // 22123
  .module('material.components.menuBar')                                                                               // 22124
  .directive('mdMenuBar', MenuBarDirective);                                                                           // 22125
                                                                                                                       // 22126
/**                                                                                                                    // 22127
 *                                                                                                                     // 22128
 * @ngInjdect                                                                                                          // 22129
 */                                                                                                                    // 22130
function MenuBarDirective($mdUtil, $mdTheming) {                                                                       // 22131
  return {                                                                                                             // 22132
    restrict: 'E',                                                                                                     // 22133
    require: 'mdMenuBar',                                                                                              // 22134
    controller: 'MenuBarController',                                                                                   // 22135
                                                                                                                       // 22136
    compile: function compile(templateEl, templateAttrs) {                                                             // 22137
      if (!templateAttrs.ariaRole) {                                                                                   // 22138
        templateEl[0].setAttribute('role', 'menubar');                                                                 // 22139
      }                                                                                                                // 22140
      angular.forEach(templateEl[0].children, function(menuEl) {                                                       // 22141
        if (menuEl.nodeName == 'MD-MENU') {                                                                            // 22142
          if (!menuEl.hasAttribute('md-position-mode')) {                                                              // 22143
            menuEl.setAttribute('md-position-mode', 'left bottom');                                                    // 22144
            menuEl.querySelector('button,a').setAttribute('role', 'menuitem');                                         // 22145
          }                                                                                                            // 22146
          var contentEls = $mdUtil.nodesToArray(menuEl.querySelectorAll('md-menu-content'));                           // 22147
          angular.forEach(contentEls, function(contentEl) {                                                            // 22148
            contentEl.classList.add('md-menu-bar-menu');                                                               // 22149
            contentEl.classList.add('md-dense');                                                                       // 22150
            if (!contentEl.hasAttribute('width')) {                                                                    // 22151
              contentEl.setAttribute('width', 5);                                                                      // 22152
            }                                                                                                          // 22153
          });                                                                                                          // 22154
        }                                                                                                              // 22155
      });                                                                                                              // 22156
                                                                                                                       // 22157
      return function postLink(scope, el, attrs, ctrl) {                                                               // 22158
        $mdTheming(scope, el);                                                                                         // 22159
        ctrl.init();                                                                                                   // 22160
      };                                                                                                               // 22161
    }                                                                                                                  // 22162
  };                                                                                                                   // 22163
                                                                                                                       // 22164
}                                                                                                                      // 22165
MenuBarDirective.$inject = ["$mdUtil", "$mdTheming"];                                                                  // 22166
                                                                                                                       // 22167
})();                                                                                                                  // 22168
(function(){                                                                                                           // 22169
"use strict";                                                                                                          // 22170
                                                                                                                       // 22171
                                                                                                                       // 22172
angular                                                                                                                // 22173
  .module('material.components.menuBar')                                                                               // 22174
  .directive('mdMenuDivider', MenuDividerDirective);                                                                   // 22175
                                                                                                                       // 22176
                                                                                                                       // 22177
function MenuDividerDirective() {                                                                                      // 22178
  return {                                                                                                             // 22179
    restrict: 'E',                                                                                                     // 22180
    compile: function(templateEl, templateAttrs) {                                                                     // 22181
      if (!templateAttrs.role) {                                                                                       // 22182
        templateEl[0].setAttribute('role', 'separator');                                                               // 22183
      }                                                                                                                // 22184
    }                                                                                                                  // 22185
  };                                                                                                                   // 22186
}                                                                                                                      // 22187
                                                                                                                       // 22188
})();                                                                                                                  // 22189
(function(){                                                                                                           // 22190
"use strict";                                                                                                          // 22191
                                                                                                                       // 22192
                                                                                                                       // 22193
angular                                                                                                                // 22194
  .module('material.components.menuBar')                                                                               // 22195
  .controller('MenuItemController', MenuItemController);                                                               // 22196
                                                                                                                       // 22197
                                                                                                                       // 22198
/**                                                                                                                    // 22199
 * @ngInject                                                                                                           // 22200
 */                                                                                                                    // 22201
function MenuItemController($scope, $element, $attrs) {                                                                // 22202
  this.$element = $element;                                                                                            // 22203
  this.$attrs = $attrs;                                                                                                // 22204
  this.$scope = $scope;                                                                                                // 22205
}                                                                                                                      // 22206
MenuItemController.$inject = ["$scope", "$element", "$attrs"];                                                         // 22207
                                                                                                                       // 22208
MenuItemController.prototype.init = function(ngModel) {                                                                // 22209
  var $element = this.$element;                                                                                        // 22210
  var $attrs = this.$attrs;                                                                                            // 22211
                                                                                                                       // 22212
  this.ngModel = ngModel;                                                                                              // 22213
  if ($attrs.type == 'checkbox' || $attrs.type == 'radio') {                                                           // 22214
    this.mode  = $attrs.type;                                                                                          // 22215
    this.iconEl = $element[0].children[0];                                                                             // 22216
    this.buttonEl = $element[0].children[1];                                                                           // 22217
    if (ngModel) {                                                                                                     // 22218
      // Clear ngAria set attributes                                                                                   // 22219
      this.initClickListeners();                                                                                       // 22220
    }                                                                                                                  // 22221
  }                                                                                                                    // 22222
};                                                                                                                     // 22223
                                                                                                                       // 22224
// ngAria auto sets attributes on a menu-item with a ngModel.                                                          // 22225
// We don't want this because our content (buttons) get the focus                                                      // 22226
// and set their own aria attributes appropritately. Having both                                                       // 22227
// breaks NVDA / JAWS. This undeoes ngAria's attrs.                                                                    // 22228
MenuItemController.prototype.clearNgAria = function() {                                                                // 22229
  var el = this.$element[0];                                                                                           // 22230
  var clearAttrs = ['role', 'tabindex', 'aria-invalid', 'aria-checked'];                                               // 22231
  angular.forEach(clearAttrs, function(attr) {                                                                         // 22232
    el.removeAttribute(attr);                                                                                          // 22233
  });                                                                                                                  // 22234
};                                                                                                                     // 22235
                                                                                                                       // 22236
MenuItemController.prototype.initClickListeners = function() {                                                         // 22237
  var self = this;                                                                                                     // 22238
  var ngModel = this.ngModel;                                                                                          // 22239
  var $scope = this.$scope;                                                                                            // 22240
  var $attrs = this.$attrs;                                                                                            // 22241
  var $element = this.$element;                                                                                        // 22242
  var mode = this.mode;                                                                                                // 22243
                                                                                                                       // 22244
  this.handleClick = angular.bind(this, this.handleClick);                                                             // 22245
                                                                                                                       // 22246
  var icon = this.iconEl;                                                                                              // 22247
  var button = angular.element(this.buttonEl);                                                                         // 22248
  var handleClick = this.handleClick;                                                                                  // 22249
                                                                                                                       // 22250
  $attrs.$observe('disabled', setDisabled);                                                                            // 22251
  setDisabled($attrs.disabled);                                                                                        // 22252
                                                                                                                       // 22253
  ngModel.$render = function render() {                                                                                // 22254
    self.clearNgAria();                                                                                                // 22255
    if (isSelected()) {                                                                                                // 22256
      icon.style.display = '';                                                                                         // 22257
      button.attr('aria-checked', 'true');                                                                             // 22258
    } else {                                                                                                           // 22259
      icon.style.display = 'none';                                                                                     // 22260
      button.attr('aria-checked', 'false');                                                                            // 22261
    }                                                                                                                  // 22262
  };                                                                                                                   // 22263
                                                                                                                       // 22264
  $scope.$$postDigest(ngModel.$render);                                                                                // 22265
                                                                                                                       // 22266
  function isSelected() {                                                                                              // 22267
    if (mode == 'radio') {                                                                                             // 22268
      var val = $attrs.ngValue ? $scope.$eval($attrs.ngValue) : $attrs.value;                                          // 22269
      return ngModel.$modelValue == val;                                                                               // 22270
    } else {                                                                                                           // 22271
      return ngModel.$modelValue;                                                                                      // 22272
    }                                                                                                                  // 22273
  }                                                                                                                    // 22274
                                                                                                                       // 22275
  function setDisabled(disabled) {                                                                                     // 22276
    if (disabled) {                                                                                                    // 22277
      button.off('click', handleClick);                                                                                // 22278
    } else {                                                                                                           // 22279
      button.on('click', handleClick);                                                                                 // 22280
    }                                                                                                                  // 22281
  }                                                                                                                    // 22282
};                                                                                                                     // 22283
                                                                                                                       // 22284
MenuItemController.prototype.handleClick = function(e) {                                                               // 22285
  var mode = this.mode;                                                                                                // 22286
  var ngModel = this.ngModel;                                                                                          // 22287
  var $attrs = this.$attrs;                                                                                            // 22288
  var newVal;                                                                                                          // 22289
  if (mode == 'checkbox') {                                                                                            // 22290
    newVal = !ngModel.$modelValue;                                                                                     // 22291
  } else if (mode == 'radio') {                                                                                        // 22292
    newVal = $attrs.ngValue ? this.$scope.$eval($attrs.ngValue) : $attrs.value;                                        // 22293
  }                                                                                                                    // 22294
  ngModel.$setViewValue(newVal);                                                                                       // 22295
  ngModel.$render();                                                                                                   // 22296
};                                                                                                                     // 22297
                                                                                                                       // 22298
})();                                                                                                                  // 22299
(function(){                                                                                                           // 22300
"use strict";                                                                                                          // 22301
                                                                                                                       // 22302
                                                                                                                       // 22303
angular                                                                                                                // 22304
  .module('material.components.menuBar')                                                                               // 22305
  .directive('mdMenuItem', MenuItemDirective);                                                                         // 22306
                                                                                                                       // 22307
 /**                                                                                                                   // 22308
  *                                                                                                                    // 22309
  * @ngInjdect                                                                                                         // 22310
  */                                                                                                                   // 22311
function MenuItemDirective() {                                                                                         // 22312
  return {                                                                                                             // 22313
    require: ['mdMenuItem', '?ngModel'],                                                                               // 22314
    priority: 210, // ensure that our post link runs after ngAria                                                      // 22315
    compile: function(templateEl, templateAttrs) {                                                                     // 22316
      if (templateAttrs.type == 'checkbox' || templateAttrs.type == 'radio') {                                         // 22317
        var text = templateEl[0].textContent;                                                                          // 22318
        var buttonEl = angular.element('<md-button type="button"></md-button>');                                       // 22319
            buttonEl.html(text);                                                                                       // 22320
            buttonEl.attr('tabindex', '0');                                                                            // 22321
                                                                                                                       // 22322
        templateEl.html('');                                                                                           // 22323
        templateEl.append(angular.element('<md-icon md-svg-icon="check"></md-icon>'));                                 // 22324
        templateEl.append(buttonEl);                                                                                   // 22325
        templateEl[0].classList.add('md-indent');                                                                      // 22326
                                                                                                                       // 22327
        setDefault('role', (templateAttrs.type == 'checkbox') ? 'menuitemcheckbox' : 'menuitemradio', buttonEl);       // 22328
        angular.forEach(['ng-disabled'], moveAttrToButton);                                                            // 22329
                                                                                                                       // 22330
      } else {                                                                                                         // 22331
        setDefault('role', 'menuitem', templateEl[0].querySelector('md-button,button,a'));                             // 22332
      }                                                                                                                // 22333
                                                                                                                       // 22334
                                                                                                                       // 22335
      return function(scope, el, attrs, ctrls) {                                                                       // 22336
        var ctrl = ctrls[0];                                                                                           // 22337
        var ngModel = ctrls[1];                                                                                        // 22338
        ctrl.init(ngModel);                                                                                            // 22339
      };                                                                                                               // 22340
                                                                                                                       // 22341
      function setDefault(attr, val, el) {                                                                             // 22342
        el = el || templateEl;                                                                                         // 22343
        if (el instanceof angular.element) {                                                                           // 22344
          el = el[0];                                                                                                  // 22345
        }                                                                                                              // 22346
        if (!el.hasAttribute(attr)) {                                                                                  // 22347
          el.setAttribute(attr, val);                                                                                  // 22348
        }                                                                                                              // 22349
      }                                                                                                                // 22350
                                                                                                                       // 22351
      function moveAttrToButton(attr) {                                                                                // 22352
        if (templateEl[0].hasAttribute(attr)) {                                                                        // 22353
          var val = templateEl[0].getAttribute(attr);                                                                  // 22354
          buttonEl[0].setAttribute(attr, val);                                                                         // 22355
          templateEl[0].removeAttribute(attr);                                                                         // 22356
        }                                                                                                              // 22357
      }                                                                                                                // 22358
    },                                                                                                                 // 22359
    controller: 'MenuItemController'                                                                                   // 22360
  };                                                                                                                   // 22361
}                                                                                                                      // 22362
                                                                                                                       // 22363
})();                                                                                                                  // 22364
(function(){                                                                                                           // 22365
"use strict";                                                                                                          // 22366
                                                                                                                       // 22367
                                                                                                                       // 22368
                                                                                                                       // 22369
angular                                                                                                                // 22370
    .module('material.components.menu')                                                                                // 22371
    .controller('mdMenuCtrl', MenuController);                                                                         // 22372
                                                                                                                       // 22373
/**                                                                                                                    // 22374
 * @ngInject                                                                                                           // 22375
 */                                                                                                                    // 22376
function MenuController($mdMenu, $attrs, $element, $scope, $mdUtil, $timeout, $rootScope, $q) {                        // 22377
                                                                                                                       // 22378
  var menuContainer;                                                                                                   // 22379
  var self = this;                                                                                                     // 22380
  var triggerElement;                                                                                                  // 22381
                                                                                                                       // 22382
  this.nestLevel = parseInt($attrs.mdNestLevel, 10) || 0;                                                              // 22383
                                                                                                                       // 22384
  /**                                                                                                                  // 22385
   * Called by our linking fn to provide access to the menu-content                                                    // 22386
   * element removed during link                                                                                       // 22387
   */                                                                                                                  // 22388
  this.init = function init(setMenuContainer, opts) {                                                                  // 22389
    opts = opts || {};                                                                                                 // 22390
    menuContainer = setMenuContainer;                                                                                  // 22391
    // Default element for ARIA attributes has the ngClick or ngMouseenter expression                                  // 22392
    triggerElement = $element[0].querySelector('[ng-click],[ng-mouseenter]');                                          // 22393
    triggerElement.setAttribute('aria-expanded', 'false');                                                             // 22394
                                                                                                                       // 22395
    this.isInMenuBar = opts.isInMenuBar;                                                                               // 22396
    this.nestedMenus = $mdUtil.nodesToArray(menuContainer[0].querySelectorAll('.md-nested-menu'));                     // 22397
                                                                                                                       // 22398
    menuContainer.on('$mdInterimElementRemove', function() {                                                           // 22399
      self.isOpen = false;                                                                                             // 22400
    });                                                                                                                // 22401
                                                                                                                       // 22402
    var menuContainerId = 'menu_container_' + $mdUtil.nextUid();                                                       // 22403
    menuContainer.attr('id', menuContainerId);                                                                         // 22404
    angular.element(triggerElement).attr({                                                                             // 22405
      'aria-owns': menuContainerId,                                                                                    // 22406
      'aria-haspopup': 'true'                                                                                          // 22407
    });                                                                                                                // 22408
                                                                                                                       // 22409
    $scope.$on('$destroy', this.disableHoverListener);                                                                 // 22410
    menuContainer.on('$destroy', function() {                                                                          // 22411
      $mdMenu.destroy();                                                                                               // 22412
    });                                                                                                                // 22413
  };                                                                                                                   // 22414
                                                                                                                       // 22415
  var openMenuTimeout, menuItems, deregisterScopeListeners = [];                                                       // 22416
  this.enableHoverListener = function() {                                                                              // 22417
    deregisterScopeListeners.push($rootScope.$on('$mdMenuOpen', function(event, el) {                                  // 22418
      if (menuContainer[0].contains(el[0])) {                                                                          // 22419
        self.currentlyOpenMenu = el.controller('mdMenu');                                                              // 22420
        self.isAlreadyOpening = false;                                                                                 // 22421
        self.currentlyOpenMenu.registerContainerProxy(self.triggerContainerProxy.bind(self));                          // 22422
      }                                                                                                                // 22423
    }));                                                                                                               // 22424
    deregisterScopeListeners.push($rootScope.$on('$mdMenuClose', function(event, el) {                                 // 22425
      if (menuContainer[0].contains(el[0])) {                                                                          // 22426
        self.currentlyOpenMenu = undefined;                                                                            // 22427
      }                                                                                                                // 22428
    }));                                                                                                               // 22429
    menuItems = angular.element($mdUtil.nodesToArray(menuContainer[0].children[0].children));                          // 22430
    menuItems.on('mouseenter', self.handleMenuItemHover);                                                              // 22431
    menuItems.on('mouseleave', self.handleMenuItemMouseLeave);                                                         // 22432
  };                                                                                                                   // 22433
                                                                                                                       // 22434
  this.disableHoverListener = function() {                                                                             // 22435
    while (deregisterScopeListeners.length) {                                                                          // 22436
      deregisterScopeListeners.shift()();                                                                              // 22437
    }                                                                                                                  // 22438
    menuItems && menuItems.off('mouseenter', self.handleMenuItemHover);                                                // 22439
    menuItems && menuItems.off('mouseleave', self.handleMenuMouseLeave);                                               // 22440
  };                                                                                                                   // 22441
                                                                                                                       // 22442
  this.handleMenuItemHover = function(event) {                                                                         // 22443
    if (self.isAlreadyOpening) return;                                                                                 // 22444
    var nestedMenu = (                                                                                                 // 22445
      event.target.querySelector('md-menu')                                                                            // 22446
        || $mdUtil.getClosest(event.target, 'MD-MENU')                                                                 // 22447
    );                                                                                                                 // 22448
    openMenuTimeout = $timeout(function() {                                                                            // 22449
      if (nestedMenu) {                                                                                                // 22450
        nestedMenu = angular.element(nestedMenu).controller('mdMenu');                                                 // 22451
      }                                                                                                                // 22452
                                                                                                                       // 22453
      if (self.currentlyOpenMenu && self.currentlyOpenMenu != nestedMenu) {                                            // 22454
        var closeTo = self.nestLevel + 1;                                                                              // 22455
        self.currentlyOpenMenu.close(true, { closeTo: closeTo });                                                      // 22456
      } else if (nestedMenu && !nestedMenu.isOpen && nestedMenu.open) {                                                // 22457
        self.isAlreadyOpening = true;                                                                                  // 22458
        nestedMenu.open();                                                                                             // 22459
      }                                                                                                                // 22460
    }, nestedMenu ? 100 : 250);                                                                                        // 22461
    var focusableTarget = event.currentTarget.querySelector('.md-button:not([disabled])');                             // 22462
    focusableTarget && focusableTarget.focus();                                                                        // 22463
  };                                                                                                                   // 22464
                                                                                                                       // 22465
  this.handleMenuItemMouseLeave = function() {                                                                         // 22466
    if (openMenuTimeout) {                                                                                             // 22467
      $timeout.cancel(openMenuTimeout);                                                                                // 22468
      openMenuTimeout = undefined;                                                                                     // 22469
    }                                                                                                                  // 22470
  };                                                                                                                   // 22471
                                                                                                                       // 22472
                                                                                                                       // 22473
  /**                                                                                                                  // 22474
   * Uses the $mdMenu interim element service to open the menu contents                                                // 22475
   */                                                                                                                  // 22476
  this.open = function openMenu(ev) {                                                                                  // 22477
    ev && ev.stopPropagation();                                                                                        // 22478
    ev && ev.preventDefault();                                                                                         // 22479
    if (self.isOpen) return;                                                                                           // 22480
    self.enableHoverListener();                                                                                        // 22481
    self.isOpen = true;                                                                                                // 22482
    triggerElement = triggerElement || (ev ? ev.target : $element[0]);                                                 // 22483
    triggerElement.setAttribute('aria-expanded', 'true');                                                              // 22484
    $scope.$emit('$mdMenuOpen', $element);                                                                             // 22485
    $mdMenu.show({                                                                                                     // 22486
      scope: $scope,                                                                                                   // 22487
      mdMenuCtrl: self,                                                                                                // 22488
      nestLevel: self.nestLevel,                                                                                       // 22489
      element: menuContainer,                                                                                          // 22490
      target: triggerElement,                                                                                          // 22491
      preserveElement: true,                                                                                           // 22492
      parent: 'body'                                                                                                   // 22493
    }).finally(function() {                                                                                            // 22494
      triggerElement.setAttribute('aria-expanded', 'false');                                                           // 22495
      self.disableHoverListener();                                                                                     // 22496
    });                                                                                                                // 22497
  };                                                                                                                   // 22498
                                                                                                                       // 22499
  // Expose a open function to the child scope for html to use                                                         // 22500
  $scope.$mdOpenMenu = this.open;                                                                                      // 22501
                                                                                                                       // 22502
  $scope.$watch(function() { return self.isOpen; }, function(isOpen) {                                                 // 22503
    if (isOpen) {                                                                                                      // 22504
      menuContainer.attr('aria-hidden', 'false');                                                                      // 22505
      $element[0].classList.add('md-open');                                                                            // 22506
      angular.forEach(self.nestedMenus, function(el) {                                                                 // 22507
        el.classList.remove('md-open');                                                                                // 22508
      });                                                                                                              // 22509
    } else {                                                                                                           // 22510
      menuContainer.attr('aria-hidden', 'true');                                                                       // 22511
      $element[0].classList.remove('md-open');                                                                         // 22512
    }                                                                                                                  // 22513
    $scope.$mdMenuIsOpen = self.isOpen;                                                                                // 22514
  });                                                                                                                  // 22515
                                                                                                                       // 22516
  this.focusMenuContainer = function focusMenuContainer() {                                                            // 22517
    var focusTarget = menuContainer[0].querySelector('[md-menu-focus-target]');                                        // 22518
    if (!focusTarget) focusTarget = menuContainer[0].querySelector('.md-button');                                      // 22519
    focusTarget.focus();                                                                                               // 22520
  };                                                                                                                   // 22521
                                                                                                                       // 22522
  this.registerContainerProxy = function registerContainerProxy(handler) {                                             // 22523
    this.containerProxy = handler;                                                                                     // 22524
  };                                                                                                                   // 22525
                                                                                                                       // 22526
  this.triggerContainerProxy = function triggerContainerProxy(ev) {                                                    // 22527
    this.containerProxy && this.containerProxy(ev);                                                                    // 22528
  };                                                                                                                   // 22529
                                                                                                                       // 22530
  this.destroy = function() {                                                                                          // 22531
    return self.isOpen ? $mdMenu.destroy() : $q.when(false);                                                           // 22532
  };                                                                                                                   // 22533
                                                                                                                       // 22534
  // Use the $mdMenu interim element service to close the menu contents                                                // 22535
  this.close = function closeMenu(skipFocus, closeOpts) {                                                              // 22536
    if ( !self.isOpen ) return;                                                                                        // 22537
    self.isOpen = false;                                                                                               // 22538
                                                                                                                       // 22539
    var eventDetails = angular.extend({}, closeOpts, { skipFocus: skipFocus });                                        // 22540
    $scope.$emit('$mdMenuClose', $element, eventDetails);                                                              // 22541
    $mdMenu.hide(null, closeOpts);                                                                                     // 22542
                                                                                                                       // 22543
    if (!skipFocus) {                                                                                                  // 22544
      var el = self.restoreFocusTo || $element.find('button')[0];                                                      // 22545
      if (el instanceof angular.element) el = el[0];                                                                   // 22546
      if (el) el.focus();                                                                                              // 22547
    }                                                                                                                  // 22548
  };                                                                                                                   // 22549
                                                                                                                       // 22550
  /**                                                                                                                  // 22551
   * Build a nice object out of our string attribute which specifies the                                               // 22552
   * target mode for left and top positioning                                                                          // 22553
   */                                                                                                                  // 22554
  this.positionMode = function positionMode() {                                                                        // 22555
    var attachment = ($attrs.mdPositionMode || 'target').split(' ');                                                   // 22556
                                                                                                                       // 22557
    // If attachment is a single item, duplicate it for our second value.                                              // 22558
    // ie. 'target' -> 'target target'                                                                                 // 22559
    if (attachment.length == 1) {                                                                                      // 22560
      attachment.push(attachment[0]);                                                                                  // 22561
    }                                                                                                                  // 22562
                                                                                                                       // 22563
    return {                                                                                                           // 22564
      left: attachment[0],                                                                                             // 22565
      top: attachment[1]                                                                                               // 22566
    };                                                                                                                 // 22567
  };                                                                                                                   // 22568
                                                                                                                       // 22569
  /**                                                                                                                  // 22570
   * Build a nice object out of our string attribute which specifies                                                   // 22571
   * the offset of top and left in pixels.                                                                             // 22572
   */                                                                                                                  // 22573
  this.offsets = function offsets() {                                                                                  // 22574
    var position = ($attrs.mdOffset || '0 0').split(' ').map(parseFloat);                                              // 22575
    if (position.length == 2) {                                                                                        // 22576
      return {                                                                                                         // 22577
        left: position[0],                                                                                             // 22578
        top: position[1]                                                                                               // 22579
      };                                                                                                               // 22580
    } else if (position.length == 1) {                                                                                 // 22581
      return {                                                                                                         // 22582
        top: position[0],                                                                                              // 22583
        left: position[0]                                                                                              // 22584
      };                                                                                                               // 22585
    } else {                                                                                                           // 22586
      throw Error('Invalid offsets specified. Please follow format <x, y> or <n>');                                    // 22587
    }                                                                                                                  // 22588
  };                                                                                                                   // 22589
}                                                                                                                      // 22590
MenuController.$inject = ["$mdMenu", "$attrs", "$element", "$scope", "$mdUtil", "$timeout", "$rootScope", "$q"];       // 22591
                                                                                                                       // 22592
})();                                                                                                                  // 22593
(function(){                                                                                                           // 22594
"use strict";                                                                                                          // 22595
                                                                                                                       // 22596
/**                                                                                                                    // 22597
 * @ngdoc directive                                                                                                    // 22598
 * @name mdMenu                                                                                                        // 22599
 * @module material.components.menu                                                                                    // 22600
 * @restrict E                                                                                                         // 22601
 * @description                                                                                                        // 22602
 *                                                                                                                     // 22603
 * Menus are elements that open when clicked. They are useful for displaying                                           // 22604
 * additional options within the context of an action.                                                                 // 22605
 *                                                                                                                     // 22606
 * Every `md-menu` must specify exactly two child elements. The first element is what is                               // 22607
 * left in the DOM and is used to open the menu. This element is called the trigger element.                           // 22608
 * The trigger element's scope has access to `$mdOpenMenu($event)`                                                     // 22609
 * which it may call to open the menu. By passing $event as argument, the                                              // 22610
 * corresponding event is stopped from propagating up the DOM-tree.                                                    // 22611
 *                                                                                                                     // 22612
 * The second element is the `md-menu-content` element which represents the                                            // 22613
 * contents of the menu when it is open. Typically this will contain `md-menu-item`s,                                  // 22614
 * but you can do custom content as well.                                                                              // 22615
 *                                                                                                                     // 22616
 * <hljs lang="html">                                                                                                  // 22617
 * <md-menu>                                                                                                           // 22618
 *  <!-- Trigger element is a md-button with an icon -->                                                               // 22619
 *  <md-button ng-click="$mdOpenMenu($event)" class="md-icon-button" aria-label="Open sample menu">                    // 22620
 *    <md-icon md-svg-icon="call:phone"></md-icon>                                                                     // 22621
 *  </md-button>                                                                                                       // 22622
 *  <md-menu-content>                                                                                                  // 22623
 *    <md-menu-item><md-button ng-click="doSomething()">Do Something</md-button></md-menu-item>                        // 22624
 *  </md-menu-content>                                                                                                 // 22625
 * </md-menu>                                                                                                          // 22626
 * </hljs>                                                                                                             // 22627
                                                                                                                       // 22628
 * ## Sizing Menus                                                                                                     // 22629
 *                                                                                                                     // 22630
 * The width of the menu when it is open may be specified by specifying a `width`                                      // 22631
 * attribute on the `md-menu-content` element.                                                                         // 22632
 * See the [Material Design Spec](http://www.google.com/design/spec/components/menus.html#menus-specs)                 // 22633
 * for more information.                                                                                               // 22634
 *                                                                                                                     // 22635
 *                                                                                                                     // 22636
 * ## Aligning Menus                                                                                                   // 22637
 *                                                                                                                     // 22638
 * When a menu opens, it is important that the content aligns with the trigger element.                                // 22639
 * Failure to align menus can result in jarring experiences for users as content                                       // 22640
 * suddenly shifts. To help with this, `md-menu` provides serveral APIs to help                                        // 22641
 * with alignment.                                                                                                     // 22642
 *                                                                                                                     // 22643
 * ### Target Mode                                                                                                     // 22644
 *                                                                                                                     // 22645
 * By default, `md-menu` will attempt to align the `md-menu-content` by aligning                                       // 22646
 * designated child elements in both the trigger and the menu content.                                                 // 22647
 *                                                                                                                     // 22648
 * To specify the alignment element in the `trigger` you can use the `md-menu-origin`                                  // 22649
 * attribute on a child element. If no `md-menu-origin` is specified, the `md-menu`                                    // 22650
 * will be used as the origin element.                                                                                 // 22651
 *                                                                                                                     // 22652
 * Similarly, the `md-menu-content` may specify a `md-menu-align-target` for a                                         // 22653
 * `md-menu-item` to specify the node that it should try and align with.                                               // 22654
 *                                                                                                                     // 22655
 * In this example code, we specify an icon to be our origin element, and an                                           // 22656
 * icon in our menu content to be our alignment target. This ensures that both                                         // 22657
 * icons are aligned when the menu opens.                                                                              // 22658
 *                                                                                                                     // 22659
 * <hljs lang="html">                                                                                                  // 22660
 * <md-menu>                                                                                                           // 22661
 *  <md-button ng-click="$mdOpenMenu($event)" class="md-icon-button" aria-label="Open some menu">                      // 22662
 *    <md-icon md-menu-origin md-svg-icon="call:phone"></md-icon>                                                      // 22663
 *  </md-button>                                                                                                       // 22664
 *  <md-menu-content>                                                                                                  // 22665
 *    <md-menu-item>                                                                                                   // 22666
 *      <md-button ng-click="doSomething()" aria-label="Do something">                                                 // 22667
 *        <md-icon md-menu-align-target md-svg-icon="call:phone"></md-icon>                                            // 22668
 *        Do Something                                                                                                 // 22669
 *      </md-button>                                                                                                   // 22670
 *    </md-menu-item>                                                                                                  // 22671
 *  </md-menu-content>                                                                                                 // 22672
 * </md-menu>                                                                                                          // 22673
 * </hljs>                                                                                                             // 22674
 *                                                                                                                     // 22675
 * Sometimes we want to specify alignment on the right side of an element, for example                                 // 22676
 * if we have a menu on the right side a toolbar, we want to right align our menu content.                             // 22677
 *                                                                                                                     // 22678
 * We can specify the origin by using the `md-position-mode` attribute on both                                         // 22679
 * the `x` and `y` axis. Right now only the `x-axis` has more than one option.                                         // 22680
 * You may specify the default mode of `target target` or                                                              // 22681
 * `target-right target` to specify a right-oriented alignment target. See the                                         // 22682
 * position section of the demos for more examples.                                                                    // 22683
 *                                                                                                                     // 22684
 * ### Menu Offsets                                                                                                    // 22685
 *                                                                                                                     // 22686
 * It is sometimes unavoidable to need to have a deeper level of control for                                           // 22687
 * the positioning of a menu to ensure perfect alignment. `md-menu` provides                                           // 22688
 * the `md-offset` attribute to allow pixel level specificty of adjusting the                                          // 22689
 * exact positioning.                                                                                                  // 22690
 *                                                                                                                     // 22691
 * This offset is provided in the format of `x y` or `n` where `n` will be used                                        // 22692
 * in both the `x` and `y` axis.                                                                                       // 22693
 *                                                                                                                     // 22694
 * For example, to move a menu by `2px` from the top, we can use:                                                      // 22695
 * <hljs lang="html">                                                                                                  // 22696
 * <md-menu md-offset="2 0">                                                                                           // 22697
 *   <!-- menu-content -->                                                                                             // 22698
 * </md-menu>                                                                                                          // 22699
 * </hljs>                                                                                                             // 22700
                                                                                                                       // 22701
 * ### Preventing close                                                                                                // 22702
 *                                                                                                                     // 22703
 * Sometimes you would like to be able to click on a menu item without having the menu                                 // 22704
 * close. To do this, ngMaterial exposes the `md-prevent-menu-close` attribute which                                   // 22705
 * can be added to a button inside a menu to stop the menu from automatically closing.                                 // 22706
 * You can then close the menu programatically by injecting `$mdMenu` and calling                                      // 22707
 * `$mdMenu.hide()`.                                                                                                   // 22708
 *                                                                                                                     // 22709
 * <hljs lang="html">                                                                                                  // 22710
 * <md-menu-item>                                                                                                      // 22711
 *   <md-button ng-click="doSomething()" aria-label="Do something" md-prevent-menu-close="md-prevent-menu-close">      // 22712
 *     <md-icon md-menu-align-target md-svg-icon="call:phone"></md-icon>                                               // 22713
 *     Do Something                                                                                                    // 22714
 *   </md-button>                                                                                                      // 22715
 * </md-menu-item>                                                                                                     // 22716
 * </hljs>                                                                                                             // 22717
 *                                                                                                                     // 22718
 * @usage                                                                                                              // 22719
 * <hljs lang="html">                                                                                                  // 22720
 * <md-menu>                                                                                                           // 22721
 *  <md-button ng-click="$mdOpenMenu($event)" class="md-icon-button">                                                  // 22722
 *    <md-icon md-svg-icon="call:phone"></md-icon>                                                                     // 22723
 *  </md-button>                                                                                                       // 22724
 *  <md-menu-content>                                                                                                  // 22725
 *    <md-menu-item><md-button ng-click="doSomething()">Do Something</md-button></md-menu-item>                        // 22726
 *  </md-menu-content>                                                                                                 // 22727
 * </md-menu>                                                                                                          // 22728
 * </hljs>                                                                                                             // 22729
 *                                                                                                                     // 22730
 * @param {string} md-position-mode The position mode in the form of                                                   // 22731
 *           `x`, `y`. Default value is `target`,`target`. Right now the `x` axis                                      // 22732
 *           also suppports `target-right`.                                                                            // 22733
 * @param {string} md-offset An offset to apply to the dropdown after positioning                                      // 22734
 *           `x`, `y`. Default value is `0`,`0`.                                                                       // 22735
 *                                                                                                                     // 22736
 */                                                                                                                    // 22737
                                                                                                                       // 22738
angular                                                                                                                // 22739
    .module('material.components.menu')                                                                                // 22740
    .directive('mdMenu', MenuDirective);                                                                               // 22741
                                                                                                                       // 22742
/**                                                                                                                    // 22743
 * @ngInject                                                                                                           // 22744
 */                                                                                                                    // 22745
function MenuDirective($mdUtil) {                                                                                      // 22746
  var INVALID_PREFIX = 'Invalid HTML for md-menu: ';                                                                   // 22747
  return {                                                                                                             // 22748
    restrict: 'E',                                                                                                     // 22749
    require: ['mdMenu', '?^mdMenuBar'],                                                                                // 22750
    controller: 'mdMenuCtrl', // empty function to be built by link                                                    // 22751
    scope: true,                                                                                                       // 22752
    compile: compile                                                                                                   // 22753
  };                                                                                                                   // 22754
                                                                                                                       // 22755
  function compile(templateElement) {                                                                                  // 22756
    templateElement.addClass('md-menu');                                                                               // 22757
    var triggerElement = templateElement.children()[0];                                                                // 22758
    if (!triggerElement.hasAttribute('ng-click')) {                                                                    // 22759
      triggerElement = triggerElement.querySelector('[ng-click],[ng-mouseenter]') || triggerElement;                   // 22760
    }                                                                                                                  // 22761
    if (triggerElement && (                                                                                            // 22762
      triggerElement.nodeName == 'MD-BUTTON' ||                                                                        // 22763
      triggerElement.nodeName == 'BUTTON'                                                                              // 22764
    ) && !triggerElement.hasAttribute('type')) {                                                                       // 22765
      triggerElement.setAttribute('type', 'button');                                                                   // 22766
    }                                                                                                                  // 22767
                                                                                                                       // 22768
    if (templateElement.children().length != 2) {                                                                      // 22769
      throw Error(INVALID_PREFIX + 'Expected two children elements.');                                                 // 22770
    }                                                                                                                  // 22771
                                                                                                                       // 22772
    // Default element for ARIA attributes has the ngClick or ngMouseenter expression                                  // 22773
    triggerElement && triggerElement.setAttribute('aria-haspopup', 'true');                                            // 22774
                                                                                                                       // 22775
    var nestedMenus = templateElement[0].querySelectorAll('md-menu');                                                  // 22776
    var nestingDepth = parseInt(templateElement[0].getAttribute('md-nest-level'), 10) || 0;                            // 22777
    if (nestedMenus) {                                                                                                 // 22778
      angular.forEach($mdUtil.nodesToArray(nestedMenus), function(menuEl) {                                            // 22779
        if (!menuEl.hasAttribute('md-position-mode')) {                                                                // 22780
          menuEl.setAttribute('md-position-mode', 'cascade');                                                          // 22781
        }                                                                                                              // 22782
        menuEl.classList.add('md-nested-menu');                                                                        // 22783
        menuEl.setAttribute('md-nest-level', nestingDepth + 1);                                                        // 22784
      });                                                                                                              // 22785
    }                                                                                                                  // 22786
    return link;                                                                                                       // 22787
  }                                                                                                                    // 22788
                                                                                                                       // 22789
  function link(scope, element, attrs, ctrls) {                                                                        // 22790
    var mdMenuCtrl = ctrls[0];                                                                                         // 22791
    var isInMenuBar = ctrls[1] != undefined;                                                                           // 22792
    // Move everything into a md-menu-container and pass it to the controller                                          // 22793
    var menuContainer = angular.element(                                                                               // 22794
      '<div class="md-open-menu-container md-whiteframe-z2"></div>'                                                    // 22795
    );                                                                                                                 // 22796
    var menuContents = element.children()[1];                                                                          // 22797
    if (!menuContents.hasAttribute('role')) {                                                                          // 22798
      menuContents.setAttribute('role', 'menu');                                                                       // 22799
    }                                                                                                                  // 22800
    menuContainer.append(menuContents);                                                                                // 22801
                                                                                                                       // 22802
    element.on('$destroy', function() {                                                                                // 22803
      menuContainer.remove();                                                                                          // 22804
    });                                                                                                                // 22805
                                                                                                                       // 22806
    element.append(menuContainer);                                                                                     // 22807
    menuContainer[0].style.display = 'none';                                                                           // 22808
    mdMenuCtrl.init(menuContainer, { isInMenuBar: isInMenuBar });                                                      // 22809
  }                                                                                                                    // 22810
}                                                                                                                      // 22811
MenuDirective.$inject = ["$mdUtil"];                                                                                   // 22812
                                                                                                                       // 22813
})();                                                                                                                  // 22814
(function(){                                                                                                           // 22815
"use strict";                                                                                                          // 22816
                                                                                                                       // 22817
angular                                                                                                                // 22818
  .module('material.components.menu')                                                                                  // 22819
  .provider('$mdMenu', MenuProvider);                                                                                  // 22820
                                                                                                                       // 22821
/*                                                                                                                     // 22822
 * Interim element provider for the menu.                                                                              // 22823
 * Handles behavior for a menu while it is open, including:                                                            // 22824
 *    - handling animating the menu opening/closing                                                                    // 22825
 *    - handling key/mouse events on the menu element                                                                  // 22826
 *    - handling enabling/disabling scroll while the menu is open                                                      // 22827
 *    - handling redrawing during resizes and orientation changes                                                      // 22828
 *                                                                                                                     // 22829
 */                                                                                                                    // 22830
                                                                                                                       // 22831
function MenuProvider($$interimElementProvider) {                                                                      // 22832
  var MENU_EDGE_MARGIN = 8;                                                                                            // 22833
                                                                                                                       // 22834
  menuDefaultOptions.$inject = ["$mdUtil", "$mdTheming", "$mdConstant", "$document", "$window", "$q", "$$rAF", "$animateCss", "$animate"];
  return $$interimElementProvider('$mdMenu')                                                                           // 22836
    .setDefaults({                                                                                                     // 22837
      methods: ['target'],                                                                                             // 22838
      options: menuDefaultOptions                                                                                      // 22839
    });                                                                                                                // 22840
                                                                                                                       // 22841
  /* @ngInject */                                                                                                      // 22842
  function menuDefaultOptions($mdUtil, $mdTheming, $mdConstant, $document, $window, $q, $$rAF, $animateCss, $animate) {
    var animator = $mdUtil.dom.animator;                                                                               // 22844
                                                                                                                       // 22845
    return {                                                                                                           // 22846
      parent: 'body',                                                                                                  // 22847
      onShow: onShow,                                                                                                  // 22848
      onRemove: onRemove,                                                                                              // 22849
      hasBackdrop: true,                                                                                               // 22850
      disableParentScroll: true,                                                                                       // 22851
      skipCompile: true,                                                                                               // 22852
      preserveScope: true,                                                                                             // 22853
      skipHide: true,                                                                                                  // 22854
      themable: true                                                                                                   // 22855
    };                                                                                                                 // 22856
                                                                                                                       // 22857
    /**                                                                                                                // 22858
     * Show modal backdrop element...                                                                                  // 22859
     * @returns {function(): void} A function that removes this backdrop                                               // 22860
     */                                                                                                                // 22861
    function showBackdrop(scope, element, options) {                                                                   // 22862
      if (options.nestLevel) return angular.noop;                                                                      // 22863
                                                                                                                       // 22864
      // If we are not within a dialog...                                                                              // 22865
      if (options.disableParentScroll && !$mdUtil.getClosest(options.target, 'MD-DIALOG')) {                           // 22866
        // !! DO this before creating the backdrop; since disableScrollAround()                                        // 22867
        //    configures the scroll offset; which is used by mdBackDrop postLink()                                     // 22868
        options.restoreScroll = $mdUtil.disableScrollAround(options.element, options.parent);                          // 22869
      } else {                                                                                                         // 22870
        options.disableParentScroll = false;                                                                           // 22871
      }                                                                                                                // 22872
                                                                                                                       // 22873
      if (options.hasBackdrop) {                                                                                       // 22874
        options.backdrop = $mdUtil.createBackdrop(scope, "md-menu-backdrop md-click-catcher");                         // 22875
                                                                                                                       // 22876
        $animate.enter(options.backdrop, $document[0].body);                                                           // 22877
      }                                                                                                                // 22878
                                                                                                                       // 22879
      /**                                                                                                              // 22880
       * Hide and destroys the backdrop created by showBackdrop()                                                      // 22881
       */                                                                                                              // 22882
      return function hideBackdrop() {                                                                                 // 22883
        if (options.backdrop) options.backdrop.remove();                                                               // 22884
        if (options.disableParentScroll) options.restoreScroll();                                                      // 22885
      };                                                                                                               // 22886
    }                                                                                                                  // 22887
                                                                                                                       // 22888
    /**                                                                                                                // 22889
     * Removing the menu element from the DOM and remove all associated event listeners                                // 22890
     * and backdrop                                                                                                    // 22891
     */                                                                                                                // 22892
    function onRemove(scope, element, opts) {                                                                          // 22893
      opts.cleanupInteraction();                                                                                       // 22894
      opts.cleanupResizing();                                                                                          // 22895
      opts.hideBackdrop();                                                                                             // 22896
                                                                                                                       // 22897
      // For navigation $destroy events, do a quick, non-animated removal,                                             // 22898
      // but for normal closes (from clicks, etc) animate the removal                                                  // 22899
                                                                                                                       // 22900
      return (opts.$destroy === true) ? detachAndClean() : animateRemoval().then( detachAndClean );                    // 22901
                                                                                                                       // 22902
      /**                                                                                                              // 22903
       * For normal closes, animate the removal.                                                                       // 22904
       * For forced closes (like $destroy events), skip the animations                                                 // 22905
       */                                                                                                              // 22906
      function animateRemoval() {                                                                                      // 22907
        return $animateCss(element, {addClass: 'md-leave'}).start();                                                   // 22908
      }                                                                                                                // 22909
                                                                                                                       // 22910
      /**                                                                                                              // 22911
       * Detach the element                                                                                            // 22912
       */                                                                                                              // 22913
      function detachAndClean() {                                                                                      // 22914
        element.removeClass('md-active');                                                                              // 22915
        detachElement(element, opts);                                                                                  // 22916
        opts.alreadyOpen = false;                                                                                      // 22917
      }                                                                                                                // 22918
                                                                                                                       // 22919
    }                                                                                                                  // 22920
                                                                                                                       // 22921
    /**                                                                                                                // 22922
     * Inserts and configures the staged Menu element into the DOM, positioning it,                                    // 22923
     * and wiring up various interaction events                                                                        // 22924
     */                                                                                                                // 22925
    function onShow(scope, element, opts) {                                                                            // 22926
      sanitizeAndConfigure(opts);                                                                                      // 22927
                                                                                                                       // 22928
      // Wire up theming on our menu element                                                                           // 22929
      $mdTheming.inherit(opts.menuContentEl, opts.target);                                                             // 22930
                                                                                                                       // 22931
      // Register various listeners to move menu on resize/orientation change                                          // 22932
      opts.cleanupResizing = startRepositioningOnResize();                                                             // 22933
      opts.hideBackdrop = showBackdrop(scope, element, opts);                                                          // 22934
                                                                                                                       // 22935
      // Return the promise for when our menu is done animating in                                                     // 22936
      return showMenu()                                                                                                // 22937
        .then(function(response) {                                                                                     // 22938
          opts.alreadyOpen = true;                                                                                     // 22939
          opts.cleanupInteraction = activateInteraction();                                                             // 22940
          return response;                                                                                             // 22941
        });                                                                                                            // 22942
                                                                                                                       // 22943
      /**                                                                                                              // 22944
       * Place the menu into the DOM and call positioning related functions                                            // 22945
       */                                                                                                              // 22946
      function showMenu() {                                                                                            // 22947
        opts.parent.append(element);                                                                                   // 22948
        element[0].style.display = '';                                                                                 // 22949
                                                                                                                       // 22950
        return $q(function(resolve) {                                                                                  // 22951
          var position = calculateMenuPosition(element, opts);                                                         // 22952
                                                                                                                       // 22953
          element.removeClass('md-leave');                                                                             // 22954
                                                                                                                       // 22955
          // Animate the menu scaling, and opacity [from its position origin (default == top-left)]                    // 22956
          // to normal scale.                                                                                          // 22957
          $animateCss(element, {                                                                                       // 22958
            addClass: 'md-active',                                                                                     // 22959
            from: animator.toCss(position),                                                                            // 22960
            to: animator.toCss({transform: ''})                                                                        // 22961
          })                                                                                                           // 22962
          .start()                                                                                                     // 22963
          .then(resolve);                                                                                              // 22964
                                                                                                                       // 22965
        });                                                                                                            // 22966
      }                                                                                                                // 22967
                                                                                                                       // 22968
      /**                                                                                                              // 22969
       * Check for valid opts and set some sane defaults                                                               // 22970
       */                                                                                                              // 22971
      function sanitizeAndConfigure() {                                                                                // 22972
        if (!opts.target) {                                                                                            // 22973
          throw Error(                                                                                                 // 22974
            '$mdMenu.show() expected a target to animate from in options.target'                                       // 22975
          );                                                                                                           // 22976
        }                                                                                                              // 22977
        angular.extend(opts, {                                                                                         // 22978
          alreadyOpen: false,                                                                                          // 22979
          isRemoved: false,                                                                                            // 22980
          target: angular.element(opts.target), //make sure it's not a naked dom node                                  // 22981
          parent: angular.element(opts.parent),                                                                        // 22982
          menuContentEl: angular.element(element[0].querySelector('md-menu-content'))                                  // 22983
        });                                                                                                            // 22984
      }                                                                                                                // 22985
                                                                                                                       // 22986
      /**                                                                                                              // 22987
       * Configure various resize listeners for screen changes                                                         // 22988
       */                                                                                                              // 22989
      function startRepositioningOnResize() {                                                                          // 22990
                                                                                                                       // 22991
        var repositionMenu = (function(target, options) {                                                              // 22992
          return $$rAF.throttle(function() {                                                                           // 22993
            if (opts.isRemoved) return;                                                                                // 22994
            var position = calculateMenuPosition(target, options);                                                     // 22995
                                                                                                                       // 22996
            target.css(animator.toCss(position));                                                                      // 22997
          });                                                                                                          // 22998
        })(element, opts);                                                                                             // 22999
                                                                                                                       // 23000
        $window.addEventListener('resize', repositionMenu);                                                            // 23001
        $window.addEventListener('orientationchange', repositionMenu);                                                 // 23002
                                                                                                                       // 23003
        return function stopRepositioningOnResize() {                                                                  // 23004
                                                                                                                       // 23005
          // Disable resizing handlers                                                                                 // 23006
          $window.removeEventListener('resize', repositionMenu);                                                       // 23007
          $window.removeEventListener('orientationchange', repositionMenu);                                            // 23008
                                                                                                                       // 23009
        }                                                                                                              // 23010
      }                                                                                                                // 23011
                                                                                                                       // 23012
      /**                                                                                                              // 23013
       * Activate interaction on the menu. Wire up keyboard listerns for                                               // 23014
       * clicks, keypresses, backdrop closing, etc.                                                                    // 23015
       */                                                                                                              // 23016
      function activateInteraction() {                                                                                 // 23017
        element.addClass('md-clickable');                                                                              // 23018
                                                                                                                       // 23019
        // close on backdrop click                                                                                     // 23020
        if (opts.backdrop) opts.backdrop.on('click', onBackdropClick);                                                 // 23021
                                                                                                                       // 23022
        // Wire up keyboard listeners.                                                                                 // 23023
        // - Close on escape,                                                                                          // 23024
        // - focus next item on down arrow,                                                                            // 23025
        // - focus prev item on up                                                                                     // 23026
        opts.menuContentEl.on('keydown', onMenuKeyDown);                                                               // 23027
        opts.menuContentEl[0].addEventListener('click', captureClickListener, true);                                   // 23028
                                                                                                                       // 23029
        // kick off initial focus in the menu on the first element                                                     // 23030
        var focusTarget = opts.menuContentEl[0].querySelector('[md-menu-focus-target]');                               // 23031
        if ( !focusTarget ) {                                                                                          // 23032
          var firstChild = opts.menuContentEl[0].firstElementChild;                                                    // 23033
                                                                                                                       // 23034
          focusTarget = firstChild && (firstChild.querySelector('.md-button:not([disabled])') || firstChild.firstElementChild);
        }                                                                                                              // 23036
                                                                                                                       // 23037
        focusTarget && focusTarget.focus();                                                                            // 23038
                                                                                                                       // 23039
        return function cleanupInteraction() {                                                                         // 23040
          element.removeClass('md-clickable');                                                                         // 23041
          if (opts.backdrop) opts.backdrop.off('click', onBackdropClick);                                              // 23042
          opts.menuContentEl.off('keydown', onMenuKeyDown);                                                            // 23043
          opts.menuContentEl[0].removeEventListener('click', captureClickListener, true);                              // 23044
        };                                                                                                             // 23045
                                                                                                                       // 23046
        // ************************************                                                                        // 23047
        // internal functions                                                                                          // 23048
        // ************************************                                                                        // 23049
                                                                                                                       // 23050
        function onMenuKeyDown(ev) {                                                                                   // 23051
          var handled;                                                                                                 // 23052
          switch (ev.keyCode) {                                                                                        // 23053
            case $mdConstant.KEY_CODE.ESCAPE:                                                                          // 23054
              opts.mdMenuCtrl.close(false, { closeAll: true });                                                        // 23055
              handled = true;                                                                                          // 23056
              break;                                                                                                   // 23057
            case $mdConstant.KEY_CODE.UP_ARROW:                                                                        // 23058
              if (!focusMenuItem(ev, opts.menuContentEl, opts, -1) && !opts.nestLevel) {                               // 23059
                opts.mdMenuCtrl.triggerContainerProxy(ev);                                                             // 23060
              }                                                                                                        // 23061
              handled = true;                                                                                          // 23062
              break;                                                                                                   // 23063
            case $mdConstant.KEY_CODE.DOWN_ARROW:                                                                      // 23064
              if (!focusMenuItem(ev, opts.menuContentEl, opts, 1) && !opts.nestLevel) {                                // 23065
                opts.mdMenuCtrl.triggerContainerProxy(ev);                                                             // 23066
              }                                                                                                        // 23067
              handled = true;                                                                                          // 23068
              break;                                                                                                   // 23069
            case $mdConstant.KEY_CODE.LEFT_ARROW:                                                                      // 23070
              if (opts.nestLevel) {                                                                                    // 23071
                opts.mdMenuCtrl.close();                                                                               // 23072
              } else {                                                                                                 // 23073
                opts.mdMenuCtrl.triggerContainerProxy(ev);                                                             // 23074
              }                                                                                                        // 23075
              handled = true;                                                                                          // 23076
              break;                                                                                                   // 23077
            case $mdConstant.KEY_CODE.RIGHT_ARROW:                                                                     // 23078
              var parentMenu = $mdUtil.getClosest(ev.target, 'MD-MENU');                                               // 23079
              if (parentMenu && parentMenu != opts.parent[0]) {                                                        // 23080
                ev.target.click();                                                                                     // 23081
              } else {                                                                                                 // 23082
                opts.mdMenuCtrl.triggerContainerProxy(ev);                                                             // 23083
              }                                                                                                        // 23084
              handled = true;                                                                                          // 23085
              break;                                                                                                   // 23086
          }                                                                                                            // 23087
          if (handled) {                                                                                               // 23088
            ev.preventDefault();                                                                                       // 23089
            ev.stopImmediatePropagation();                                                                             // 23090
          }                                                                                                            // 23091
        }                                                                                                              // 23092
                                                                                                                       // 23093
        function onBackdropClick(e) {                                                                                  // 23094
          e.preventDefault();                                                                                          // 23095
          e.stopPropagation();                                                                                         // 23096
          scope.$apply(function() {                                                                                    // 23097
            opts.mdMenuCtrl.close(true, { closeAll: true });                                                           // 23098
          });                                                                                                          // 23099
        }                                                                                                              // 23100
                                                                                                                       // 23101
        // Close menu on menu item click, if said menu-item is not disabled                                            // 23102
        function captureClickListener(e) {                                                                             // 23103
          var target = e.target;                                                                                       // 23104
          // Traverse up the event until we get to the menuContentEl to see if                                         // 23105
          // there is an ng-click and that the ng-click is not disabled                                                // 23106
          do {                                                                                                         // 23107
            if (target == opts.menuContentEl[0]) return;                                                               // 23108
            if ((hasAnyAttribute(target, ['ng-click', 'ng-href', 'ui-sref']) ||                                        // 23109
                target.nodeName == 'BUTTON' || target.nodeName == 'MD-BUTTON') && !hasAnyAttribute(target, ['md-prevent-menu-close'])) {
              var closestMenu = $mdUtil.getClosest(target, 'MD-MENU');                                                 // 23111
              if (!target.hasAttribute('disabled') && (!closestMenu || closestMenu == opts.parent[0])) {               // 23112
                close();                                                                                               // 23113
              }                                                                                                        // 23114
              break;                                                                                                   // 23115
            }                                                                                                          // 23116
          } while (target = target.parentNode)                                                                         // 23117
                                                                                                                       // 23118
          function close() {                                                                                           // 23119
            scope.$apply(function() {                                                                                  // 23120
              opts.mdMenuCtrl.close(true, { closeAll: true });                                                         // 23121
            });                                                                                                        // 23122
          }                                                                                                            // 23123
                                                                                                                       // 23124
          function hasAnyAttribute(target, attrs) {                                                                    // 23125
            if (!target) return false;                                                                                 // 23126
            for (var i = 0, attr; attr = attrs[i]; ++i) {                                                              // 23127
              var altForms = [attr, 'data-' + attr, 'x-' + attr];                                                      // 23128
              for (var j = 0, rawAttr; rawAttr = altForms[j]; ++j) {                                                   // 23129
                if (target.hasAttribute(rawAttr)) {                                                                    // 23130
                  return true;                                                                                         // 23131
                }                                                                                                      // 23132
              }                                                                                                        // 23133
            }                                                                                                          // 23134
            return false;                                                                                              // 23135
          }                                                                                                            // 23136
        }                                                                                                              // 23137
                                                                                                                       // 23138
        opts.menuContentEl[0].addEventListener('click', captureClickListener, true);                                   // 23139
                                                                                                                       // 23140
        return function cleanupInteraction() {                                                                         // 23141
          element.removeClass('md-clickable');                                                                         // 23142
          opts.menuContentEl.off('keydown');                                                                           // 23143
          opts.menuContentEl[0].removeEventListener('click', captureClickListener, true);                              // 23144
        };                                                                                                             // 23145
      }                                                                                                                // 23146
    }                                                                                                                  // 23147
                                                                                                                       // 23148
    /**                                                                                                                // 23149
     * Takes a keypress event and focuses the next/previous menu                                                       // 23150
     * item from the emitting element                                                                                  // 23151
     * @param {event} e - The origin keypress event                                                                    // 23152
     * @param {angular.element} menuEl - The menu element                                                              // 23153
     * @param {object} opts - The interim element options for the mdMenu                                               // 23154
     * @param {number} direction - The direction to move in (+1 = next, -1 = prev)                                     // 23155
     */                                                                                                                // 23156
    function focusMenuItem(e, menuEl, opts, direction) {                                                               // 23157
      var currentItem = $mdUtil.getClosest(e.target, 'MD-MENU-ITEM');                                                  // 23158
                                                                                                                       // 23159
      var items = $mdUtil.nodesToArray(menuEl[0].children);                                                            // 23160
      var currentIndex = items.indexOf(currentItem);                                                                   // 23161
                                                                                                                       // 23162
      // Traverse through our elements in the specified direction (+/-1) and try to                                    // 23163
      // focus them until we find one that accepts focus                                                               // 23164
      var didFocus;                                                                                                    // 23165
      for (var i = currentIndex + direction; i >= 0 && i < items.length; i = i + direction) {                          // 23166
        var focusTarget = items[i].querySelector('.md-button');                                                        // 23167
        didFocus = attemptFocus(focusTarget);                                                                          // 23168
        if (didFocus) {                                                                                                // 23169
          break;                                                                                                       // 23170
        }                                                                                                              // 23171
      }                                                                                                                // 23172
      return didFocus;                                                                                                 // 23173
    }                                                                                                                  // 23174
                                                                                                                       // 23175
    /**                                                                                                                // 23176
     * Attempts to focus an element. Checks whether that element is the currently                                      // 23177
     * focused element after attempting.                                                                               // 23178
     * @param {HTMLElement} el - the element to attempt focus on                                                       // 23179
     * @returns {bool} - whether the element was successfully focused                                                  // 23180
     */                                                                                                                // 23181
    function attemptFocus(el) {                                                                                        // 23182
      if (el && el.getAttribute('tabindex') != -1) {                                                                   // 23183
        el.focus();                                                                                                    // 23184
        return ($document[0].activeElement == el);                                                                     // 23185
      }                                                                                                                // 23186
    }                                                                                                                  // 23187
                                                                                                                       // 23188
    /**                                                                                                                // 23189
     * Use browser to remove this element without triggering a $destroy event                                          // 23190
     */                                                                                                                // 23191
    function detachElement(element, opts) {                                                                            // 23192
      if (!opts.preserveElement) {                                                                                     // 23193
        if (toNode(element).parentNode === toNode(opts.parent)) {                                                      // 23194
          toNode(opts.parent).removeChild(toNode(element));                                                            // 23195
        }                                                                                                              // 23196
      } else {                                                                                                         // 23197
        toNode(element).style.display = 'none';                                                                        // 23198
      }                                                                                                                // 23199
    }                                                                                                                  // 23200
                                                                                                                       // 23201
    /**                                                                                                                // 23202
     * Computes menu position and sets the style on the menu container                                                 // 23203
     * @param {HTMLElement} el - the menu container element                                                            // 23204
     * @param {object} opts - the interim element options object                                                       // 23205
     */                                                                                                                // 23206
    function calculateMenuPosition(el, opts) {                                                                         // 23207
                                                                                                                       // 23208
      var containerNode = el[0],                                                                                       // 23209
        openMenuNode = el[0].firstElementChild,                                                                        // 23210
        openMenuNodeRect = openMenuNode.getBoundingClientRect(),                                                       // 23211
        boundryNode = $document[0].body,                                                                               // 23212
        boundryNodeRect = boundryNode.getBoundingClientRect();                                                         // 23213
                                                                                                                       // 23214
      var menuStyle = $window.getComputedStyle(openMenuNode);                                                          // 23215
                                                                                                                       // 23216
      var originNode = opts.target[0].querySelector('[md-menu-origin]') || opts.target[0],                             // 23217
        originNodeRect = originNode.getBoundingClientRect();                                                           // 23218
                                                                                                                       // 23219
      var bounds = {                                                                                                   // 23220
        left: boundryNodeRect.left + MENU_EDGE_MARGIN,                                                                 // 23221
        top: Math.max(boundryNodeRect.top, 0) + MENU_EDGE_MARGIN,                                                      // 23222
        bottom: Math.max(boundryNodeRect.bottom, Math.max(boundryNodeRect.top, 0) + boundryNodeRect.height) - MENU_EDGE_MARGIN,
        right: boundryNodeRect.right - MENU_EDGE_MARGIN                                                                // 23224
      };                                                                                                               // 23225
                                                                                                                       // 23226
      var alignTarget, alignTargetRect = { top:0, left : 0, right:0, bottom:0 }, existingOffsets  = { top:0, left : 0, right:0, bottom:0  };
      var positionMode = opts.mdMenuCtrl.positionMode();                                                               // 23228
                                                                                                                       // 23229
      if (positionMode.top == 'target' || positionMode.left == 'target' || positionMode.left == 'target-right') {      // 23230
        alignTarget = firstVisibleChild();                                                                             // 23231
        if ( alignTarget ) {                                                                                           // 23232
          // TODO: Allow centering on an arbitrary node, for now center on first menu-item's child                     // 23233
          alignTarget = alignTarget.firstElementChild || alignTarget;                                                  // 23234
          alignTarget = alignTarget.querySelector('[md-menu-align-target]') || alignTarget;                            // 23235
          alignTargetRect = alignTarget.getBoundingClientRect();                                                       // 23236
                                                                                                                       // 23237
          existingOffsets = {                                                                                          // 23238
            top: parseFloat(containerNode.style.top || 0),                                                             // 23239
            left: parseFloat(containerNode.style.left || 0)                                                            // 23240
          };                                                                                                           // 23241
        }                                                                                                              // 23242
      }                                                                                                                // 23243
                                                                                                                       // 23244
      var position = {};                                                                                               // 23245
      var transformOrigin = 'top ';                                                                                    // 23246
                                                                                                                       // 23247
      switch (positionMode.top) {                                                                                      // 23248
        case 'target':                                                                                                 // 23249
          position.top = existingOffsets.top + originNodeRect.top - alignTargetRect.top;                               // 23250
          break;                                                                                                       // 23251
        case 'cascade':                                                                                                // 23252
          position.top = originNodeRect.top - parseFloat(menuStyle.paddingTop) - originNode.style.top;                 // 23253
          break;                                                                                                       // 23254
        case 'bottom':                                                                                                 // 23255
          position.top = originNodeRect.top + originNodeRect.height;                                                   // 23256
          break;                                                                                                       // 23257
        default:                                                                                                       // 23258
          throw new Error('Invalid target mode "' + positionMode.top + '" specified for md-menu on Y axis.');          // 23259
      }                                                                                                                // 23260
                                                                                                                       // 23261
      switch (positionMode.left) {                                                                                     // 23262
        case 'target':                                                                                                 // 23263
          position.left = existingOffsets.left + originNodeRect.left - alignTargetRect.left;                           // 23264
          transformOrigin += 'left';                                                                                   // 23265
          break;                                                                                                       // 23266
        case 'target-right':                                                                                           // 23267
          position.left = originNodeRect.right - openMenuNodeRect.width + (openMenuNodeRect.right - alignTargetRect.right);
          transformOrigin += 'right';                                                                                  // 23269
          break;                                                                                                       // 23270
        case 'cascade':                                                                                                // 23271
          var willFitRight = (originNodeRect.right + openMenuNodeRect.width) < bounds.right;                           // 23272
          position.left = willFitRight ? originNodeRect.right - originNode.style.left : originNodeRect.left - originNode.style.left - openMenuNodeRect.width;
          transformOrigin += willFitRight ? 'left' : 'right';                                                          // 23274
          break;                                                                                                       // 23275
        case 'left':                                                                                                   // 23276
          position.left = originNodeRect.left;                                                                         // 23277
          transformOrigin += 'left';                                                                                   // 23278
          break;                                                                                                       // 23279
        default:                                                                                                       // 23280
          throw new Error('Invalid target mode "' + positionMode.left + '" specified for md-menu on X axis.');         // 23281
      }                                                                                                                // 23282
                                                                                                                       // 23283
      var offsets = opts.mdMenuCtrl.offsets();                                                                         // 23284
      position.top += offsets.top;                                                                                     // 23285
      position.left += offsets.left;                                                                                   // 23286
                                                                                                                       // 23287
      clamp(position);                                                                                                 // 23288
                                                                                                                       // 23289
      var scaleX = Math.round(100 * Math.min(originNodeRect.width / containerNode.offsetWidth, 1.0)) / 100;            // 23290
      var scaleY = Math.round(100 * Math.min(originNodeRect.height / containerNode.offsetHeight, 1.0)) / 100;          // 23291
                                                                                                                       // 23292
      return {                                                                                                         // 23293
        top: Math.round(position.top),                                                                                 // 23294
        left: Math.round(position.left),                                                                               // 23295
        // Animate a scale out if we aren't just repositioning                                                         // 23296
        transform: !opts.alreadyOpen ? $mdUtil.supplant('scale({0},{1})', [scaleX, scaleY]) : undefined,               // 23297
        transformOrigin: transformOrigin                                                                               // 23298
      };                                                                                                               // 23299
                                                                                                                       // 23300
      /**                                                                                                              // 23301
       * Clamps the repositioning of the menu within the confines of                                                   // 23302
       * bounding element (often the screen/body)                                                                      // 23303
       */                                                                                                              // 23304
      function clamp(pos) {                                                                                            // 23305
        pos.top = Math.max(Math.min(pos.top, bounds.bottom - containerNode.offsetHeight), bounds.top);                 // 23306
        pos.left = Math.max(Math.min(pos.left, bounds.right - containerNode.offsetWidth), bounds.left);                // 23307
      }                                                                                                                // 23308
                                                                                                                       // 23309
      /**                                                                                                              // 23310
       * Gets the first visible child in the openMenuNode                                                              // 23311
       * Necessary incase menu nodes are being dynamically hidden                                                      // 23312
       */                                                                                                              // 23313
      function firstVisibleChild() {                                                                                   // 23314
        for (var i = 0; i < openMenuNode.children.length; ++i) {                                                       // 23315
          if ($window.getComputedStyle(openMenuNode.children[i]).display != 'none') {                                  // 23316
            return openMenuNode.children[i];                                                                           // 23317
          }                                                                                                            // 23318
        }                                                                                                              // 23319
      }                                                                                                                // 23320
    }                                                                                                                  // 23321
  }                                                                                                                    // 23322
  function toNode(el) {                                                                                                // 23323
    if (el instanceof angular.element) {                                                                               // 23324
      el = el[0];                                                                                                      // 23325
    }                                                                                                                  // 23326
    return el;                                                                                                         // 23327
  }                                                                                                                    // 23328
}                                                                                                                      // 23329
MenuProvider.$inject = ["$$interimElementProvider"];                                                                   // 23330
                                                                                                                       // 23331
})();                                                                                                                  // 23332
(function(){                                                                                                           // 23333
"use strict";                                                                                                          // 23334
                                                                                                                       // 23335
/**                                                                                                                    // 23336
 * @ngdoc directive                                                                                                    // 23337
 * @name mdTab                                                                                                         // 23338
 * @module material.components.tabs                                                                                    // 23339
 *                                                                                                                     // 23340
 * @restrict E                                                                                                         // 23341
 *                                                                                                                     // 23342
 * @description                                                                                                        // 23343
 * Use the `<md-tab>` a nested directive used within `<md-tabs>` to specify a tab with a **label** and optional *view content*.
 *                                                                                                                     // 23345
 * If the `label` attribute is not specified, then an optional `<md-tab-label>` tag can be used to specify more        // 23346
 * complex tab header markup. If neither the **label** nor the **md-tab-label** are specified, then the nested         // 23347
 * markup of the `<md-tab>` is used as the tab header markup.                                                          // 23348
 *                                                                                                                     // 23349
 * Please note that if you use `<md-tab-label>`, your content **MUST** be wrapped in the `<md-tab-body>` tag.  This    // 23350
 * is to define a clear separation between the tab content and the tab label.                                          // 23351
 *                                                                                                                     // 23352
 * This container is used by the TabsController to show/hide the active tab's content view. This synchronization is    // 23353
 * automatically managed by the internal TabsController whenever the tab selection changes. Selection changes can      // 23354
 * be initiated via data binding changes, programmatic invocation, or user gestures.                                   // 23355
 *                                                                                                                     // 23356
 * @param {string=} label Optional attribute to specify a simple string as the tab label                               // 23357
 * @param {boolean=} ng-disabled If present, disabled tab selection.                                                   // 23358
 * @param {expression=} md-on-deselect Expression to be evaluated after the tab has been de-selected.                  // 23359
 * @param {expression=} md-on-select Expression to be evaluated after the tab has been selected.                       // 23360
 * @param {boolean=} md-active When true, sets the active tab.  Note: There can only be one active tab at a time.      // 23361
 *                                                                                                                     // 23362
 *                                                                                                                     // 23363
 * @usage                                                                                                              // 23364
 *                                                                                                                     // 23365
 * <hljs lang="html">                                                                                                  // 23366
 * <md-tab label="" disabled="" md-on-select="" md-on-deselect="" >                                                    // 23367
 *   <h3>My Tab content</h3>                                                                                           // 23368
 * </md-tab>                                                                                                           // 23369
 *                                                                                                                     // 23370
 * <md-tab >                                                                                                           // 23371
 *   <md-tab-label>                                                                                                    // 23372
 *     <h3>My Tab content</h3>                                                                                         // 23373
 *   </md-tab-label>                                                                                                   // 23374
 *   <md-tab-body>                                                                                                     // 23375
 *     <p>                                                                                                             // 23376
 *       Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium,             // 23377
 *       totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae               // 23378
 *       dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit,             // 23379
 *       sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt.                                // 23380
 *     </p>                                                                                                            // 23381
 *   </md-tab-body>                                                                                                    // 23382
 * </md-tab>                                                                                                           // 23383
 * </hljs>                                                                                                             // 23384
 *                                                                                                                     // 23385
 */                                                                                                                    // 23386
angular                                                                                                                // 23387
    .module('material.components.tabs')                                                                                // 23388
    .directive('mdTab', MdTab);                                                                                        // 23389
                                                                                                                       // 23390
function MdTab () {                                                                                                    // 23391
  return {                                                                                                             // 23392
    require:  '^?mdTabs',                                                                                              // 23393
    terminal: true,                                                                                                    // 23394
    compile:  function (element, attr) {                                                                               // 23395
      var label = firstChild(element, 'md-tab-label'),                                                                 // 23396
          body  = firstChild(element, 'md-tab-body');                                                                  // 23397
                                                                                                                       // 23398
      if (label.length == 0) {                                                                                         // 23399
        label = angular.element('<md-tab-label></md-tab-label>');                                                      // 23400
        if (attr.label) label.text(attr.label);                                                                        // 23401
        else label.append(element.contents());                                                                         // 23402
                                                                                                                       // 23403
        if (body.length == 0) {                                                                                        // 23404
          var contents = element.contents().detach();                                                                  // 23405
          body         = angular.element('<md-tab-body></md-tab-body>');                                               // 23406
          body.append(contents);                                                                                       // 23407
        }                                                                                                              // 23408
      }                                                                                                                // 23409
                                                                                                                       // 23410
      element.append(label);                                                                                           // 23411
      if (body.html()) element.append(body);                                                                           // 23412
                                                                                                                       // 23413
      return postLink;                                                                                                 // 23414
    },                                                                                                                 // 23415
    scope:    {                                                                                                        // 23416
      active:   '=?mdActive',                                                                                          // 23417
      disabled: '=?ngDisabled',                                                                                        // 23418
      select:   '&?mdOnSelect',                                                                                        // 23419
      deselect: '&?mdOnDeselect'                                                                                       // 23420
    }                                                                                                                  // 23421
  };                                                                                                                   // 23422
                                                                                                                       // 23423
  function postLink (scope, element, attr, ctrl) {                                                                     // 23424
    if (!ctrl) return;                                                                                                 // 23425
    var index = ctrl.getTabElementIndex(element),                                                                      // 23426
        body  = firstChild(element, 'md-tab-body').remove(),                                                           // 23427
        label = firstChild(element, 'md-tab-label').remove(),                                                          // 23428
        data  = ctrl.insertTab({                                                                                       // 23429
          scope:    scope,                                                                                             // 23430
          parent:   scope.$parent,                                                                                     // 23431
          index:    index,                                                                                             // 23432
          element:  element,                                                                                           // 23433
          template: body.html(),                                                                                       // 23434
          label:    label.html()                                                                                       // 23435
        }, index);                                                                                                     // 23436
                                                                                                                       // 23437
    scope.select   = scope.select || angular.noop;                                                                     // 23438
    scope.deselect = scope.deselect || angular.noop;                                                                   // 23439
                                                                                                                       // 23440
    scope.$watch('active', function (active) { if (active) ctrl.select(data.getIndex()); });                           // 23441
    scope.$watch('disabled', function () { ctrl.refreshIndex(); });                                                    // 23442
    scope.$watch(                                                                                                      // 23443
        function () {                                                                                                  // 23444
          return ctrl.getTabElementIndex(element);                                                                     // 23445
        },                                                                                                             // 23446
        function (newIndex) {                                                                                          // 23447
          data.index = newIndex;                                                                                       // 23448
          ctrl.updateTabOrder();                                                                                       // 23449
        }                                                                                                              // 23450
    );                                                                                                                 // 23451
    scope.$on('$destroy', function () { ctrl.removeTab(data); });                                                      // 23452
  }                                                                                                                    // 23453
                                                                                                                       // 23454
  function firstChild (element, tagName) {                                                                             // 23455
    var children = element[0].children;                                                                                // 23456
    for (var i = 0, len = children.length; i < len; i++) {                                                             // 23457
      var child = children[i];                                                                                         // 23458
      if (child.tagName === tagName.toUpperCase()) return angular.element(child);                                      // 23459
    }                                                                                                                  // 23460
    return angular.element();                                                                                          // 23461
  }                                                                                                                    // 23462
}                                                                                                                      // 23463
                                                                                                                       // 23464
})();                                                                                                                  // 23465
(function(){                                                                                                           // 23466
"use strict";                                                                                                          // 23467
                                                                                                                       // 23468
angular                                                                                                                // 23469
    .module('material.components.tabs')                                                                                // 23470
    .directive('mdTabItem', MdTabItem);                                                                                // 23471
                                                                                                                       // 23472
function MdTabItem () {                                                                                                // 23473
  return {                                                                                                             // 23474
    require: '^?mdTabs',                                                                                               // 23475
    link:    function link (scope, element, attr, ctrl) {                                                              // 23476
      if (!ctrl) return;                                                                                               // 23477
      ctrl.attachRipple(scope, element);                                                                               // 23478
    }                                                                                                                  // 23479
  };                                                                                                                   // 23480
}                                                                                                                      // 23481
                                                                                                                       // 23482
})();                                                                                                                  // 23483
(function(){                                                                                                           // 23484
"use strict";                                                                                                          // 23485
                                                                                                                       // 23486
angular                                                                                                                // 23487
    .module('material.components.tabs')                                                                                // 23488
    .directive('mdTabLabel', MdTabLabel);                                                                              // 23489
                                                                                                                       // 23490
function MdTabLabel () {                                                                                               // 23491
  return { terminal: true };                                                                                           // 23492
}                                                                                                                      // 23493
                                                                                                                       // 23494
                                                                                                                       // 23495
})();                                                                                                                  // 23496
(function(){                                                                                                           // 23497
"use strict";                                                                                                          // 23498
                                                                                                                       // 23499
angular.module('material.components.tabs')                                                                             // 23500
    .directive('mdTabScroll', MdTabScroll);                                                                            // 23501
                                                                                                                       // 23502
function MdTabScroll ($parse) {                                                                                        // 23503
  return {                                                                                                             // 23504
    restrict: 'A',                                                                                                     // 23505
    compile: function ($element, attr) {                                                                               // 23506
      var fn = $parse(attr.mdTabScroll, null, true);                                                                   // 23507
      return function ngEventHandler (scope, element) {                                                                // 23508
        element.on('mousewheel', function (event) {                                                                    // 23509
          scope.$apply(function () { fn(scope, { $event: event }); });                                                 // 23510
        });                                                                                                            // 23511
      };                                                                                                               // 23512
    }                                                                                                                  // 23513
  }                                                                                                                    // 23514
}                                                                                                                      // 23515
MdTabScroll.$inject = ["$parse"];                                                                                      // 23516
                                                                                                                       // 23517
})();                                                                                                                  // 23518
(function(){                                                                                                           // 23519
"use strict";                                                                                                          // 23520
                                                                                                                       // 23521
angular                                                                                                                // 23522
    .module('material.components.tabs')                                                                                // 23523
    .controller('MdTabsController', MdTabsController);                                                                 // 23524
                                                                                                                       // 23525
/**                                                                                                                    // 23526
 * @ngInject                                                                                                           // 23527
 */                                                                                                                    // 23528
function MdTabsController ($scope, $element, $window, $mdConstant, $mdTabInkRipple,                                    // 23529
                           $mdUtil, $animateCss, $attrs, $compile, $mdTheming) {                                       // 23530
  // define private properties                                                                                         // 23531
  var ctrl      = this,                                                                                                // 23532
      locked    = false,                                                                                               // 23533
      elements  = getElements(),                                                                                       // 23534
      queue     = [],                                                                                                  // 23535
      destroyed = false,                                                                                               // 23536
      loaded    = false;                                                                                               // 23537
                                                                                                                       // 23538
  // define one-way bindings                                                                                           // 23539
  defineOneWayBinding('stretchTabs', handleStretchTabs);                                                               // 23540
                                                                                                                       // 23541
  // define public properties with change handlers                                                                     // 23542
  defineProperty('focusIndex', handleFocusIndexChange, ctrl.selectedIndex || 0);                                       // 23543
  defineProperty('offsetLeft', handleOffsetChange, 0);                                                                 // 23544
  defineProperty('hasContent', handleHasContent, false);                                                               // 23545
  defineProperty('maxTabWidth', handleMaxTabWidth, getMaxTabWidth());                                                  // 23546
  defineProperty('shouldPaginate', handleShouldPaginate, false);                                                       // 23547
                                                                                                                       // 23548
  // define boolean attributes                                                                                         // 23549
  defineBooleanAttribute('noInkBar', handleInkBar);                                                                    // 23550
  defineBooleanAttribute('dynamicHeight', handleDynamicHeight);                                                        // 23551
  defineBooleanAttribute('noPagination');                                                                              // 23552
  defineBooleanAttribute('swipeContent');                                                                              // 23553
  defineBooleanAttribute('noDisconnect');                                                                              // 23554
  defineBooleanAttribute('autoselect');                                                                                // 23555
  defineBooleanAttribute('centerTabs', handleCenterTabs, false);                                                       // 23556
  defineBooleanAttribute('enableDisconnect');                                                                          // 23557
                                                                                                                       // 23558
  // define public properties                                                                                          // 23559
  ctrl.scope             = $scope;                                                                                     // 23560
  ctrl.parent            = $scope.$parent;                                                                             // 23561
  ctrl.tabs              = [];                                                                                         // 23562
  ctrl.lastSelectedIndex = null;                                                                                       // 23563
  ctrl.hasFocus          = false;                                                                                      // 23564
  ctrl.lastClick         = true;                                                                                       // 23565
  ctrl.shouldCenterTabs  = shouldCenterTabs();                                                                         // 23566
                                                                                                                       // 23567
  // define public methods                                                                                             // 23568
  ctrl.updatePagination   = $mdUtil.debounce(updatePagination, 100);                                                   // 23569
  ctrl.redirectFocus      = redirectFocus;                                                                             // 23570
  ctrl.attachRipple       = attachRipple;                                                                              // 23571
  ctrl.insertTab          = insertTab;                                                                                 // 23572
  ctrl.removeTab          = removeTab;                                                                                 // 23573
  ctrl.select             = select;                                                                                    // 23574
  ctrl.scroll             = scroll;                                                                                    // 23575
  ctrl.nextPage           = nextPage;                                                                                  // 23576
  ctrl.previousPage       = previousPage;                                                                              // 23577
  ctrl.keydown            = keydown;                                                                                   // 23578
  ctrl.canPageForward     = canPageForward;                                                                            // 23579
  ctrl.canPageBack        = canPageBack;                                                                               // 23580
  ctrl.refreshIndex       = refreshIndex;                                                                              // 23581
  ctrl.incrementIndex     = incrementIndex;                                                                            // 23582
  ctrl.getTabElementIndex = getTabElementIndex;                                                                        // 23583
  ctrl.updateInkBarStyles = $mdUtil.debounce(updateInkBarStyles, 100);                                                 // 23584
  ctrl.updateTabOrder     = $mdUtil.debounce(updateTabOrder, 100);                                                     // 23585
                                                                                                                       // 23586
  init();                                                                                                              // 23587
                                                                                                                       // 23588
  /**                                                                                                                  // 23589
   * Perform initialization for the controller, setup events and watcher(s)                                            // 23590
   */                                                                                                                  // 23591
  function init () {                                                                                                   // 23592
    ctrl.selectedIndex = ctrl.selectedIndex || 0;                                                                      // 23593
    compileTemplate();                                                                                                 // 23594
    configureWatchers();                                                                                               // 23595
    bindEvents();                                                                                                      // 23596
    $mdTheming($element);                                                                                              // 23597
    $mdUtil.nextTick(function () {                                                                                     // 23598
      updateHeightFromContent();                                                                                       // 23599
      adjustOffset();                                                                                                  // 23600
      updateInkBarStyles();                                                                                            // 23601
      ctrl.tabs[ ctrl.selectedIndex ] && ctrl.tabs[ ctrl.selectedIndex ].scope.select();                               // 23602
      loaded = true;                                                                                                   // 23603
      updatePagination();                                                                                              // 23604
    });                                                                                                                // 23605
  }                                                                                                                    // 23606
                                                                                                                       // 23607
  /**                                                                                                                  // 23608
   * Compiles the template provided by the user.  This is passed as an attribute from the tabs                         // 23609
   * directive's template function.                                                                                    // 23610
   */                                                                                                                  // 23611
  function compileTemplate () {                                                                                        // 23612
    var template = $attrs.$mdTabsTemplate,                                                                             // 23613
        element  = angular.element(elements.data);                                                                     // 23614
    element.html(template);                                                                                            // 23615
    $compile(element.contents())(ctrl.parent);                                                                         // 23616
    delete $attrs.$mdTabsTemplate;                                                                                     // 23617
  }                                                                                                                    // 23618
                                                                                                                       // 23619
  /**                                                                                                                  // 23620
   * Binds events used by the tabs component.                                                                          // 23621
   */                                                                                                                  // 23622
  function bindEvents () {                                                                                             // 23623
    angular.element($window).on('resize', handleWindowResize);                                                         // 23624
    $scope.$on('$destroy', cleanup);                                                                                   // 23625
  }                                                                                                                    // 23626
                                                                                                                       // 23627
  /**                                                                                                                  // 23628
   * Configure watcher(s) used by Tabs                                                                                 // 23629
   */                                                                                                                  // 23630
  function configureWatchers () {                                                                                      // 23631
    $scope.$watch('$mdTabsCtrl.selectedIndex', handleSelectedIndexChange);                                             // 23632
  }                                                                                                                    // 23633
                                                                                                                       // 23634
  /**                                                                                                                  // 23635
   * Creates a one-way binding manually rather than relying on Angular's isolated scope                                // 23636
   * @param key                                                                                                        // 23637
   * @param handler                                                                                                    // 23638
   */                                                                                                                  // 23639
  function defineOneWayBinding (key, handler) {                                                                        // 23640
    var attr = $attrs.$normalize('md-' + key);                                                                         // 23641
    if (handler) defineProperty(key, handler);                                                                         // 23642
    $attrs.$observe(attr, function (newValue) { ctrl[ key ] = newValue; });                                            // 23643
  }                                                                                                                    // 23644
                                                                                                                       // 23645
  /**                                                                                                                  // 23646
   * Defines boolean attributes with default value set to true.  (ie. md-stretch-tabs with no value                    // 23647
   * will be treated as being truthy)                                                                                  // 23648
   * @param key                                                                                                        // 23649
   * @param handler                                                                                                    // 23650
   */                                                                                                                  // 23651
  function defineBooleanAttribute (key, handler) {                                                                     // 23652
    var attr = $attrs.$normalize('md-' + key);                                                                         // 23653
    if (handler) defineProperty(key, handler);                                                                         // 23654
    if ($attrs.hasOwnProperty(attr)) updateValue($attrs[attr]);                                                        // 23655
    $attrs.$observe(attr, updateValue);                                                                                // 23656
    function updateValue (newValue) {                                                                                  // 23657
      ctrl[ key ] = newValue !== 'false';                                                                              // 23658
    }                                                                                                                  // 23659
  }                                                                                                                    // 23660
                                                                                                                       // 23661
  /**                                                                                                                  // 23662
   * Remove any events defined by this controller                                                                      // 23663
   */                                                                                                                  // 23664
  function cleanup () {                                                                                                // 23665
    destroyed = true;                                                                                                  // 23666
    angular.element($window).off('resize', handleWindowResize);                                                        // 23667
  }                                                                                                                    // 23668
                                                                                                                       // 23669
  // Change handlers                                                                                                   // 23670
                                                                                                                       // 23671
  /**                                                                                                                  // 23672
   * Toggles stretch tabs class and updates inkbar when tab stretching changes                                         // 23673
   * @param stretchTabs                                                                                                // 23674
   */                                                                                                                  // 23675
  function handleStretchTabs (stretchTabs) {                                                                           // 23676
    angular.element(elements.wrapper).toggleClass('md-stretch-tabs', shouldStretchTabs());                             // 23677
    updateInkBarStyles();                                                                                              // 23678
  }                                                                                                                    // 23679
                                                                                                                       // 23680
  function handleCenterTabs (newValue) {                                                                               // 23681
    ctrl.shouldCenterTabs = shouldCenterTabs();                                                                        // 23682
  }                                                                                                                    // 23683
                                                                                                                       // 23684
  function handleMaxTabWidth (newWidth, oldWidth) {                                                                    // 23685
    if (newWidth !== oldWidth) {                                                                                       // 23686
      angular.forEach(elements.tabs, function(tab) {                                                                   // 23687
        tab.style.maxWidth = newWidth + 'px';                                                                          // 23688
      });                                                                                                              // 23689
      $mdUtil.nextTick(ctrl.updateInkBarStyles);                                                                       // 23690
    }                                                                                                                  // 23691
  }                                                                                                                    // 23692
                                                                                                                       // 23693
  function handleShouldPaginate (newValue, oldValue) {                                                                 // 23694
    if (newValue !== oldValue) {                                                                                       // 23695
      ctrl.maxTabWidth      = getMaxTabWidth();                                                                        // 23696
      ctrl.shouldCenterTabs = shouldCenterTabs();                                                                      // 23697
      $mdUtil.nextTick(function () {                                                                                   // 23698
        ctrl.maxTabWidth = getMaxTabWidth();                                                                           // 23699
        adjustOffset(ctrl.selectedIndex);                                                                              // 23700
      });                                                                                                              // 23701
    }                                                                                                                  // 23702
  }                                                                                                                    // 23703
                                                                                                                       // 23704
  /**                                                                                                                  // 23705
   * Add/remove the `md-no-tab-content` class depending on `ctrl.hasContent`                                           // 23706
   * @param hasContent                                                                                                 // 23707
   */                                                                                                                  // 23708
  function handleHasContent (hasContent) {                                                                             // 23709
    $element[ hasContent ? 'removeClass' : 'addClass' ]('md-no-tab-content');                                          // 23710
  }                                                                                                                    // 23711
                                                                                                                       // 23712
  /**                                                                                                                  // 23713
   * Apply ctrl.offsetLeft to the paging element when it changes                                                       // 23714
   * @param left                                                                                                       // 23715
   */                                                                                                                  // 23716
  function handleOffsetChange (left) {                                                                                 // 23717
    var newValue = ctrl.shouldCenterTabs ? '' : '-' + left + 'px';                                                     // 23718
    angular.element(elements.paging).css($mdConstant.CSS.TRANSFORM, 'translate3d(' + newValue + ', 0, 0)');            // 23719
    $scope.$broadcast('$mdTabsPaginationChanged');                                                                     // 23720
  }                                                                                                                    // 23721
                                                                                                                       // 23722
  /**                                                                                                                  // 23723
   * Update the UI whenever `ctrl.focusIndex` is updated                                                               // 23724
   * @param newIndex                                                                                                   // 23725
   * @param oldIndex                                                                                                   // 23726
   */                                                                                                                  // 23727
  function handleFocusIndexChange (newIndex, oldIndex) {                                                               // 23728
    if (newIndex === oldIndex) return;                                                                                 // 23729
    if (!elements.tabs[ newIndex ]) return;                                                                            // 23730
    adjustOffset();                                                                                                    // 23731
    redirectFocus();                                                                                                   // 23732
  }                                                                                                                    // 23733
                                                                                                                       // 23734
  /**                                                                                                                  // 23735
   * Update the UI whenever the selected index changes. Calls user-defined select/deselect methods.                    // 23736
   * @param newValue                                                                                                   // 23737
   * @param oldValue                                                                                                   // 23738
   */                                                                                                                  // 23739
  function handleSelectedIndexChange (newValue, oldValue) {                                                            // 23740
    if (newValue === oldValue) return;                                                                                 // 23741
                                                                                                                       // 23742
    ctrl.selectedIndex     = getNearestSafeIndex(newValue);                                                            // 23743
    ctrl.lastSelectedIndex = oldValue;                                                                                 // 23744
    ctrl.updateInkBarStyles();                                                                                         // 23745
    updateHeightFromContent();                                                                                         // 23746
    adjustOffset(newValue);                                                                                            // 23747
    $scope.$broadcast('$mdTabsChanged');                                                                               // 23748
    ctrl.tabs[ oldValue ] && ctrl.tabs[ oldValue ].scope.deselect();                                                   // 23749
    ctrl.tabs[ newValue ] && ctrl.tabs[ newValue ].scope.select();                                                     // 23750
  }                                                                                                                    // 23751
                                                                                                                       // 23752
  function getTabElementIndex(tabEl){                                                                                  // 23753
    var tabs = $element[0].getElementsByTagName('md-tab');                                                             // 23754
    return Array.prototype.indexOf.call(tabs, tabEl[0]);                                                               // 23755
  }                                                                                                                    // 23756
                                                                                                                       // 23757
  /**                                                                                                                  // 23758
   * Queues up a call to `handleWindowResize` when a resize occurs while the tabs component is                         // 23759
   * hidden.                                                                                                           // 23760
   */                                                                                                                  // 23761
  function handleResizeWhenVisible () {                                                                                // 23762
    // if there is already a watcher waiting for resize, do nothing                                                    // 23763
    if (handleResizeWhenVisible.watcher) return;                                                                       // 23764
    // otherwise, we will abuse the $watch function to check for visible                                               // 23765
    handleResizeWhenVisible.watcher = $scope.$watch(function () {                                                      // 23766
      // since we are checking for DOM size, we use $mdUtil.nextTick() to wait for after the DOM updates               // 23767
      $mdUtil.nextTick(function () {                                                                                   // 23768
        // if the watcher has already run (ie. multiple digests in one cycle), do nothing                              // 23769
        if (!handleResizeWhenVisible.watcher) return;                                                                  // 23770
                                                                                                                       // 23771
        if ($element.prop('offsetParent')) {                                                                           // 23772
          handleResizeWhenVisible.watcher();                                                                           // 23773
          handleResizeWhenVisible.watcher = null;                                                                      // 23774
                                                                                                                       // 23775
          handleWindowResize();                                                                                        // 23776
        }                                                                                                              // 23777
      }, false);                                                                                                       // 23778
    });                                                                                                                // 23779
  }                                                                                                                    // 23780
                                                                                                                       // 23781
  // Event handlers / actions                                                                                          // 23782
                                                                                                                       // 23783
  /**                                                                                                                  // 23784
   * Handle user keyboard interactions                                                                                 // 23785
   * @param event                                                                                                      // 23786
   */                                                                                                                  // 23787
  function keydown (event) {                                                                                           // 23788
    switch (event.keyCode) {                                                                                           // 23789
      case $mdConstant.KEY_CODE.LEFT_ARROW:                                                                            // 23790
        event.preventDefault();                                                                                        // 23791
        incrementIndex(-1, true);                                                                                      // 23792
        break;                                                                                                         // 23793
      case $mdConstant.KEY_CODE.RIGHT_ARROW:                                                                           // 23794
        event.preventDefault();                                                                                        // 23795
        incrementIndex(1, true);                                                                                       // 23796
        break;                                                                                                         // 23797
      case $mdConstant.KEY_CODE.SPACE:                                                                                 // 23798
      case $mdConstant.KEY_CODE.ENTER:                                                                                 // 23799
        event.preventDefault();                                                                                        // 23800
        if (!locked) ctrl.selectedIndex = ctrl.focusIndex;                                                             // 23801
        break;                                                                                                         // 23802
    }                                                                                                                  // 23803
    ctrl.lastClick = false;                                                                                            // 23804
  }                                                                                                                    // 23805
                                                                                                                       // 23806
  /**                                                                                                                  // 23807
   * Update the selected index and trigger a click event on the original `md-tab` element in order                     // 23808
   * to fire user-added click events.                                                                                  // 23809
   * @param index                                                                                                      // 23810
   */                                                                                                                  // 23811
  function select (index) {                                                                                            // 23812
    if (!locked) ctrl.focusIndex = ctrl.selectedIndex = index;                                                         // 23813
    ctrl.lastClick = true;                                                                                             // 23814
    // nextTick is required to prevent errors in user-defined click events                                             // 23815
    $mdUtil.nextTick(function () {                                                                                     // 23816
      ctrl.tabs[ index ].element.triggerHandler('click');                                                              // 23817
    }, false);                                                                                                         // 23818
  }                                                                                                                    // 23819
                                                                                                                       // 23820
  /**                                                                                                                  // 23821
   * When pagination is on, this makes sure the selected index is in view.                                             // 23822
   * @param event                                                                                                      // 23823
   */                                                                                                                  // 23824
  function scroll (event) {                                                                                            // 23825
    if (!ctrl.shouldPaginate) return;                                                                                  // 23826
    event.preventDefault();                                                                                            // 23827
    ctrl.offsetLeft = fixOffset(ctrl.offsetLeft - event.wheelDelta);                                                   // 23828
  }                                                                                                                    // 23829
                                                                                                                       // 23830
  /**                                                                                                                  // 23831
   * Slides the tabs over approximately one page forward.                                                              // 23832
   */                                                                                                                  // 23833
  function nextPage () {                                                                                               // 23834
    var viewportWidth = elements.canvas.clientWidth,                                                                   // 23835
        totalWidth    = viewportWidth + ctrl.offsetLeft,                                                               // 23836
        i, tab;                                                                                                        // 23837
    for (i = 0; i < elements.tabs.length; i++) {                                                                       // 23838
      tab = elements.tabs[ i ];                                                                                        // 23839
      if (tab.offsetLeft + tab.offsetWidth > totalWidth) break;                                                        // 23840
    }                                                                                                                  // 23841
    ctrl.offsetLeft = fixOffset(tab.offsetLeft);                                                                       // 23842
  }                                                                                                                    // 23843
                                                                                                                       // 23844
  /**                                                                                                                  // 23845
   * Slides the tabs over approximately one page backward.                                                             // 23846
   */                                                                                                                  // 23847
  function previousPage () {                                                                                           // 23848
    var i, tab;                                                                                                        // 23849
    for (i = 0; i < elements.tabs.length; i++) {                                                                       // 23850
      tab = elements.tabs[ i ];                                                                                        // 23851
      if (tab.offsetLeft + tab.offsetWidth >= ctrl.offsetLeft) break;                                                  // 23852
    }                                                                                                                  // 23853
    ctrl.offsetLeft = fixOffset(tab.offsetLeft + tab.offsetWidth - elements.canvas.clientWidth);                       // 23854
  }                                                                                                                    // 23855
                                                                                                                       // 23856
  /**                                                                                                                  // 23857
   * Update size calculations when the window is resized.                                                              // 23858
   */                                                                                                                  // 23859
  function handleWindowResize () {                                                                                     // 23860
    ctrl.lastSelectedIndex = ctrl.selectedIndex;                                                                       // 23861
    ctrl.offsetLeft        = fixOffset(ctrl.offsetLeft);                                                               // 23862
    $mdUtil.nextTick(function () {                                                                                     // 23863
      ctrl.updateInkBarStyles();                                                                                       // 23864
      updatePagination();                                                                                              // 23865
    });                                                                                                                // 23866
  }                                                                                                                    // 23867
                                                                                                                       // 23868
  function handleInkBar (hide) {                                                                                       // 23869
    angular.element(elements.inkBar).toggleClass('ng-hide', hide);                                                     // 23870
  }                                                                                                                    // 23871
                                                                                                                       // 23872
  /**                                                                                                                  // 23873
   * Toggle dynamic height class when value changes                                                                    // 23874
   * @param value                                                                                                      // 23875
   */                                                                                                                  // 23876
  function handleDynamicHeight (value) {                                                                               // 23877
    $element.toggleClass('md-dynamic-height', value);                                                                  // 23878
  }                                                                                                                    // 23879
                                                                                                                       // 23880
  /**                                                                                                                  // 23881
   * Remove a tab from the data and select the nearest valid tab.                                                      // 23882
   * @param tabData                                                                                                    // 23883
   */                                                                                                                  // 23884
  function removeTab (tabData) {                                                                                       // 23885
    if (destroyed) return;                                                                                             // 23886
    var selectedIndex = ctrl.selectedIndex,                                                                            // 23887
        tab           = ctrl.tabs.splice(tabData.getIndex(), 1)[ 0 ];                                                  // 23888
    refreshIndex();                                                                                                    // 23889
    // when removing a tab, if the selected index did not change, we have to manually trigger the                      // 23890
    //   tab select/deselect events                                                                                    // 23891
    if (ctrl.selectedIndex === selectedIndex) {                                                                        // 23892
      tab.scope.deselect();                                                                                            // 23893
      ctrl.tabs[ ctrl.selectedIndex ] && ctrl.tabs[ ctrl.selectedIndex ].scope.select();                               // 23894
    }                                                                                                                  // 23895
    $mdUtil.nextTick(function () {                                                                                     // 23896
      updatePagination();                                                                                              // 23897
      ctrl.offsetLeft = fixOffset(ctrl.offsetLeft);                                                                    // 23898
    });                                                                                                                // 23899
  }                                                                                                                    // 23900
                                                                                                                       // 23901
  /**                                                                                                                  // 23902
   * Create an entry in the tabs array for a new tab at the specified index.                                           // 23903
   * @param tabData                                                                                                    // 23904
   * @param index                                                                                                      // 23905
   * @returns {*}                                                                                                      // 23906
   */                                                                                                                  // 23907
  function insertTab (tabData, index) {                                                                                // 23908
    var hasLoaded = loaded;                                                                                            // 23909
    var proto     = {                                                                                                  // 23910
          getIndex:     function () { return ctrl.tabs.indexOf(tab); },                                                // 23911
          isActive:     function () { return this.getIndex() === ctrl.selectedIndex; },                                // 23912
          isLeft:       function () { return this.getIndex() < ctrl.selectedIndex; },                                  // 23913
          isRight:      function () { return this.getIndex() > ctrl.selectedIndex; },                                  // 23914
          shouldRender: function () { return !ctrl.noDisconnect || this.isActive(); },                                 // 23915
          hasFocus:     function () {                                                                                  // 23916
            return !ctrl.lastClick                                                                                     // 23917
                && ctrl.hasFocus && this.getIndex() === ctrl.focusIndex;                                               // 23918
          },                                                                                                           // 23919
          id:           $mdUtil.nextUid()                                                                              // 23920
        },                                                                                                             // 23921
        tab       = angular.extend(proto, tabData);                                                                    // 23922
    if (angular.isDefined(index)) {                                                                                    // 23923
      ctrl.tabs.splice(index, 0, tab);                                                                                 // 23924
    } else {                                                                                                           // 23925
      ctrl.tabs.push(tab);                                                                                             // 23926
    }                                                                                                                  // 23927
    processQueue();                                                                                                    // 23928
    updateHasContent();                                                                                                // 23929
    $mdUtil.nextTick(function () {                                                                                     // 23930
      updatePagination();                                                                                              // 23931
      // if autoselect is enabled, select the newly added tab                                                          // 23932
      if (hasLoaded && ctrl.autoselect) $mdUtil.nextTick(function () {                                                 // 23933
        $mdUtil.nextTick(function () { select(ctrl.tabs.indexOf(tab)); });                                             // 23934
      });                                                                                                              // 23935
    });                                                                                                                // 23936
    return tab;                                                                                                        // 23937
  }                                                                                                                    // 23938
                                                                                                                       // 23939
  // Getter methods                                                                                                    // 23940
                                                                                                                       // 23941
  /**                                                                                                                  // 23942
   * Gathers references to all of the DOM elements used by this controller.                                            // 23943
   * @returns {{}}                                                                                                     // 23944
   */                                                                                                                  // 23945
  function getElements () {                                                                                            // 23946
    var elements = {};                                                                                                 // 23947
                                                                                                                       // 23948
    // gather tab bar elements                                                                                         // 23949
    elements.wrapper = $element[ 0 ].getElementsByTagName('md-tabs-wrapper')[ 0 ];                                     // 23950
    elements.data    = $element[ 0 ].getElementsByTagName('md-tab-data')[ 0 ];                                         // 23951
    elements.canvas  = elements.wrapper.getElementsByTagName('md-tabs-canvas')[ 0 ];                                   // 23952
    elements.paging  = elements.canvas.getElementsByTagName('md-pagination-wrapper')[ 0 ];                             // 23953
    elements.tabs    = elements.paging.getElementsByTagName('md-tab-item');                                            // 23954
    elements.dummies = elements.canvas.getElementsByTagName('md-dummy-tab');                                           // 23955
    elements.inkBar  = elements.paging.getElementsByTagName('md-ink-bar')[ 0 ];                                        // 23956
                                                                                                                       // 23957
    // gather tab content elements                                                                                     // 23958
    elements.contentsWrapper = $element[ 0 ].getElementsByTagName('md-tabs-content-wrapper')[ 0 ];                     // 23959
    elements.contents        = elements.contentsWrapper.getElementsByTagName('md-tab-content');                        // 23960
                                                                                                                       // 23961
    return elements;                                                                                                   // 23962
  }                                                                                                                    // 23963
                                                                                                                       // 23964
  /**                                                                                                                  // 23965
   * Determines whether or not the left pagination arrow should be enabled.                                            // 23966
   * @returns {boolean}                                                                                                // 23967
   */                                                                                                                  // 23968
  function canPageBack () {                                                                                            // 23969
    return ctrl.offsetLeft > 0;                                                                                        // 23970
  }                                                                                                                    // 23971
                                                                                                                       // 23972
  /**                                                                                                                  // 23973
   * Determines whether or not the right pagination arrow should be enabled.                                           // 23974
   * @returns {*|boolean}                                                                                              // 23975
   */                                                                                                                  // 23976
  function canPageForward () {                                                                                         // 23977
    var lastTab = elements.tabs[ elements.tabs.length - 1 ];                                                           // 23978
    return lastTab && lastTab.offsetLeft + lastTab.offsetWidth > elements.canvas.clientWidth +                         // 23979
        ctrl.offsetLeft;                                                                                               // 23980
  }                                                                                                                    // 23981
                                                                                                                       // 23982
  /**                                                                                                                  // 23983
   * Determines if the UI should stretch the tabs to fill the available space.                                         // 23984
   * @returns {*}                                                                                                      // 23985
   */                                                                                                                  // 23986
  function shouldStretchTabs () {                                                                                      // 23987
    switch (ctrl.stretchTabs) {                                                                                        // 23988
      case 'always':                                                                                                   // 23989
        return true;                                                                                                   // 23990
      case 'never':                                                                                                    // 23991
        return false;                                                                                                  // 23992
      default:                                                                                                         // 23993
        return !ctrl.shouldPaginate                                                                                    // 23994
            && $window.matchMedia('(max-width: 600px)').matches;                                                       // 23995
    }                                                                                                                  // 23996
  }                                                                                                                    // 23997
                                                                                                                       // 23998
  /**                                                                                                                  // 23999
   * Determines if the tabs should appear centered.                                                                    // 24000
   * @returns {string|boolean}                                                                                         // 24001
   */                                                                                                                  // 24002
  function shouldCenterTabs () {                                                                                       // 24003
    return ctrl.centerTabs && !ctrl.shouldPaginate;                                                                    // 24004
  }                                                                                                                    // 24005
                                                                                                                       // 24006
  /**                                                                                                                  // 24007
   * Determines if pagination is necessary to display the tabs within the available space.                             // 24008
   * @returns {boolean}                                                                                                // 24009
   */                                                                                                                  // 24010
  function shouldPaginate () {                                                                                         // 24011
    if (ctrl.noPagination || !loaded) return false;                                                                    // 24012
    var canvasWidth = $element.prop('clientWidth');                                                                    // 24013
    angular.forEach(getElements().dummies, function (tab) { canvasWidth -= tab.offsetWidth; });                        // 24014
    return canvasWidth < 0;                                                                                            // 24015
  }                                                                                                                    // 24016
                                                                                                                       // 24017
  /**                                                                                                                  // 24018
   * Finds the nearest tab index that is available.  This is primarily used for when the active                        // 24019
   * tab is removed.                                                                                                   // 24020
   * @param newIndex                                                                                                   // 24021
   * @returns {*}                                                                                                      // 24022
   */                                                                                                                  // 24023
  function getNearestSafeIndex (newIndex) {                                                                            // 24024
    if (newIndex === -1) return -1;                                                                                    // 24025
    var maxOffset = Math.max(ctrl.tabs.length - newIndex, newIndex),                                                   // 24026
        i, tab;                                                                                                        // 24027
    for (i = 0; i <= maxOffset; i++) {                                                                                 // 24028
      tab = ctrl.tabs[ newIndex + i ];                                                                                 // 24029
      if (tab && (tab.scope.disabled !== true)) return tab.getIndex();                                                 // 24030
      tab = ctrl.tabs[ newIndex - i ];                                                                                 // 24031
      if (tab && (tab.scope.disabled !== true)) return tab.getIndex();                                                 // 24032
    }                                                                                                                  // 24033
    return newIndex;                                                                                                   // 24034
  }                                                                                                                    // 24035
                                                                                                                       // 24036
  // Utility methods                                                                                                   // 24037
                                                                                                                       // 24038
  /**                                                                                                                  // 24039
   * Defines a property using a getter and setter in order to trigger a change handler without                         // 24040
   * using `$watch` to observe changes.                                                                                // 24041
   * @param key                                                                                                        // 24042
   * @param handler                                                                                                    // 24043
   * @param value                                                                                                      // 24044
   */                                                                                                                  // 24045
  function defineProperty (key, handler, value) {                                                                      // 24046
    Object.defineProperty(ctrl, key, {                                                                                 // 24047
      get: function () { return value; },                                                                              // 24048
      set: function (newValue) {                                                                                       // 24049
        var oldValue = value;                                                                                          // 24050
        value        = newValue;                                                                                       // 24051
        handler && handler(newValue, oldValue);                                                                        // 24052
      }                                                                                                                // 24053
    });                                                                                                                // 24054
  }                                                                                                                    // 24055
                                                                                                                       // 24056
  /**                                                                                                                  // 24057
   * Updates whether or not pagination should be displayed.                                                            // 24058
   */                                                                                                                  // 24059
  function updatePagination () {                                                                                       // 24060
    if (!shouldStretchTabs()) updatePagingWidth();                                                                     // 24061
    ctrl.maxTabWidth = getMaxTabWidth();                                                                               // 24062
    ctrl.shouldPaginate = shouldPaginate();                                                                            // 24063
  }                                                                                                                    // 24064
                                                                                                                       // 24065
  function updatePagingWidth() {                                                                                       // 24066
    var width = 1;                                                                                                     // 24067
    angular.forEach(getElements().dummies, function (element) {                                                        // 24068
      //-- Uses the larger value between `getBoundingClientRect().width` and `offsetWidth`.  This                      // 24069
      //   prevents `offsetWidth` value from being rounded down and causing wrapping issues, but                       // 24070
      //   also handles scenarios where `getBoundingClientRect()` is inaccurate (ie. tabs inside                       // 24071
      //   of a dialog)                                                                                                // 24072
      width += Math.max(element.offsetWidth, element.getBoundingClientRect().width);                                   // 24073
    });                                                                                                                // 24074
    angular.element(elements.paging).css('width', Math.ceil(width) + 'px');                                            // 24075
  }                                                                                                                    // 24076
                                                                                                                       // 24077
  function getMaxTabWidth () {                                                                                         // 24078
    return $element.prop('clientWidth');                                                                               // 24079
  }                                                                                                                    // 24080
                                                                                                                       // 24081
  /**                                                                                                                  // 24082
   * Re-orders the tabs and updates the selected and focus indexes to their new positions.                             // 24083
   * This is triggered by `tabDirective.js` when the user's tabs have been re-ordered.                                 // 24084
   */                                                                                                                  // 24085
  function updateTabOrder () {                                                                                         // 24086
    var selectedItem   = ctrl.tabs[ ctrl.selectedIndex ],                                                              // 24087
        focusItem      = ctrl.tabs[ ctrl.focusIndex ];                                                                 // 24088
    ctrl.tabs          = ctrl.tabs.sort(function (a, b) {                                                              // 24089
      return a.index - b.index;                                                                                        // 24090
    });                                                                                                                // 24091
    ctrl.selectedIndex = ctrl.tabs.indexOf(selectedItem);                                                              // 24092
    ctrl.focusIndex    = ctrl.tabs.indexOf(focusItem);                                                                 // 24093
  }                                                                                                                    // 24094
                                                                                                                       // 24095
  /**                                                                                                                  // 24096
   * This moves the selected or focus index left or right.  This is used by the keydown handler.                       // 24097
   * @param inc                                                                                                        // 24098
   */                                                                                                                  // 24099
  function incrementIndex (inc, focus) {                                                                               // 24100
    var newIndex,                                                                                                      // 24101
        key   = focus ? 'focusIndex' : 'selectedIndex',                                                                // 24102
        index = ctrl[ key ];                                                                                           // 24103
    for (newIndex = index + inc;                                                                                       // 24104
         ctrl.tabs[ newIndex ] && ctrl.tabs[ newIndex ].scope.disabled;                                                // 24105
         newIndex += inc) {}                                                                                           // 24106
    if (ctrl.tabs[ newIndex ]) {                                                                                       // 24107
      ctrl[ key ] = newIndex;                                                                                          // 24108
    }                                                                                                                  // 24109
  }                                                                                                                    // 24110
                                                                                                                       // 24111
  /**                                                                                                                  // 24112
   * This is used to forward focus to dummy elements.  This method is necessary to avoid animation                     // 24113
   * issues when attempting to focus an item that is out of view.                                                      // 24114
   */                                                                                                                  // 24115
  function redirectFocus () {                                                                                          // 24116
    getElements().dummies[ ctrl.focusIndex ].focus();                                                                  // 24117
  }                                                                                                                    // 24118
                                                                                                                       // 24119
  /**                                                                                                                  // 24120
   * Forces the pagination to move the focused tab into view.                                                          // 24121
   */                                                                                                                  // 24122
  function adjustOffset (index) {                                                                                      // 24123
    if (index == null) index = ctrl.focusIndex;                                                                        // 24124
    if (!elements.tabs[ index ]) return;                                                                               // 24125
    if (ctrl.shouldCenterTabs) return;                                                                                 // 24126
    var tab         = elements.tabs[ index ],                                                                          // 24127
        left        = tab.offsetLeft,                                                                                  // 24128
        right       = tab.offsetWidth + left;                                                                          // 24129
    ctrl.offsetLeft = Math.max(ctrl.offsetLeft, fixOffset(right - elements.canvas.clientWidth + 32 * 2));              // 24130
    ctrl.offsetLeft = Math.min(ctrl.offsetLeft, fixOffset(left));                                                      // 24131
  }                                                                                                                    // 24132
                                                                                                                       // 24133
  /**                                                                                                                  // 24134
   * Iterates through all queued functions and clears the queue.  This is used for functions that                      // 24135
   * are called before the UI is ready, such as size calculations.                                                     // 24136
   */                                                                                                                  // 24137
  function processQueue () {                                                                                           // 24138
    queue.forEach(function (func) { $mdUtil.nextTick(func); });                                                        // 24139
    queue = [];                                                                                                        // 24140
  }                                                                                                                    // 24141
                                                                                                                       // 24142
  /**                                                                                                                  // 24143
   * Determines if the tab content area is needed.                                                                     // 24144
   */                                                                                                                  // 24145
  function updateHasContent () {                                                                                       // 24146
    var hasContent  = false;                                                                                           // 24147
    angular.forEach(ctrl.tabs, function (tab) {                                                                        // 24148
      if (tab.template) hasContent = true;                                                                             // 24149
    });                                                                                                                // 24150
    ctrl.hasContent = hasContent;                                                                                      // 24151
  }                                                                                                                    // 24152
                                                                                                                       // 24153
  /**                                                                                                                  // 24154
   * Moves the indexes to their nearest valid values.                                                                  // 24155
   */                                                                                                                  // 24156
  function refreshIndex () {                                                                                           // 24157
    ctrl.selectedIndex = getNearestSafeIndex(ctrl.selectedIndex);                                                      // 24158
    ctrl.focusIndex    = getNearestSafeIndex(ctrl.focusIndex);                                                         // 24159
  }                                                                                                                    // 24160
                                                                                                                       // 24161
  /**                                                                                                                  // 24162
   * Calculates the content height of the current tab.                                                                 // 24163
   * @returns {*}                                                                                                      // 24164
   */                                                                                                                  // 24165
  function updateHeightFromContent () {                                                                                // 24166
    if (!ctrl.dynamicHeight) return $element.css('height', '');                                                        // 24167
    if (!ctrl.tabs.length) return queue.push(updateHeightFromContent);                                                 // 24168
                                                                                                                       // 24169
    var tabContent    = elements.contents[ ctrl.selectedIndex ],                                                       // 24170
        contentHeight = tabContent ? tabContent.offsetHeight : 0,                                                      // 24171
        tabsHeight    = elements.wrapper.offsetHeight,                                                                 // 24172
        newHeight     = contentHeight + tabsHeight,                                                                    // 24173
        currentHeight = $element.prop('clientHeight');                                                                 // 24174
                                                                                                                       // 24175
    if (currentHeight === newHeight) return;                                                                           // 24176
                                                                                                                       // 24177
    // Adjusts calculations for when the buttons are bottom-aligned since this relies on absolute                      // 24178
    // positioning.  This should probably be cleaned up if a cleaner solution is possible.                             // 24179
    if ($element.attr('md-align-tabs') === 'bottom') {                                                                 // 24180
      currentHeight -= tabsHeight;                                                                                     // 24181
      newHeight -= tabsHeight;                                                                                         // 24182
      // Need to include bottom border in these calculations                                                           // 24183
      if ($element.attr('md-border-bottom') !== undefined) ++currentHeight;                                            // 24184
    }                                                                                                                  // 24185
                                                                                                                       // 24186
    // Lock during animation so the user can't change tabs                                                             // 24187
    locked = true;                                                                                                     // 24188
                                                                                                                       // 24189
    var fromHeight = { height: currentHeight + 'px' },                                                                 // 24190
        toHeight = { height: newHeight + 'px' };                                                                       // 24191
                                                                                                                       // 24192
    // Set the height to the current, specific pixel height to fix a bug on iOS where the height                       // 24193
    // first animates to 0, then back to the proper height causing a visual glitch                                     // 24194
    $element.css(fromHeight);                                                                                          // 24195
                                                                                                                       // 24196
    // Animate the height from the old to the new                                                                      // 24197
    $animateCss($element, {                                                                                            // 24198
      from: fromHeight,                                                                                                // 24199
      to: toHeight,                                                                                                    // 24200
      easing: 'cubic-bezier(0.35, 0, 0.25, 1)',                                                                        // 24201
      duration: 0.5                                                                                                    // 24202
    }).start().done(function () {                                                                                      // 24203
      // Then (to fix the same iOS issue as above), disable transitions and remove the specific                        // 24204
      // pixel height so the height can size with browser width/content changes, etc.                                  // 24205
      $element.css({                                                                                                   // 24206
        transition: 'none',                                                                                            // 24207
        height: ''                                                                                                     // 24208
      });                                                                                                              // 24209
                                                                                                                       // 24210
      // In the next tick, re-allow transitions (if we do it all at once, $element.css is "smart"                      // 24211
      // enough to batch it for us instead of doing it immediately, which undoes the original                          // 24212
      // transition: none)                                                                                             // 24213
      $mdUtil.nextTick(function() {                                                                                    // 24214
        $element.css('transition', '');                                                                                // 24215
      });                                                                                                              // 24216
                                                                                                                       // 24217
      // And unlock so tab changes can occur                                                                           // 24218
      locked = false;                                                                                                  // 24219
    });                                                                                                                // 24220
  }                                                                                                                    // 24221
                                                                                                                       // 24222
  /**                                                                                                                  // 24223
   * Repositions the ink bar to the selected tab.                                                                      // 24224
   * @returns {*}                                                                                                      // 24225
   */                                                                                                                  // 24226
  function updateInkBarStyles () {                                                                                     // 24227
    if (!elements.tabs[ ctrl.selectedIndex ]) {                                                                        // 24228
      angular.element(elements.inkBar).css({ left: 'auto', right: 'auto' });                                           // 24229
      return;                                                                                                          // 24230
    }                                                                                                                  // 24231
    if (!ctrl.tabs.length) return queue.push(ctrl.updateInkBarStyles);                                                 // 24232
    // if the element is not visible, we will not be able to calculate sizes until it is                               // 24233
    // we should treat that as a resize event rather than just updating the ink bar                                    // 24234
    if (!$element.prop('offsetParent')) return handleResizeWhenVisible();                                              // 24235
    var index      = ctrl.selectedIndex,                                                                               // 24236
        totalWidth = elements.paging.offsetWidth,                                                                      // 24237
        tab        = elements.tabs[ index ],                                                                           // 24238
        left       = tab.offsetLeft,                                                                                   // 24239
        right      = totalWidth - left - tab.offsetWidth,                                                              // 24240
        tabWidth;                                                                                                      // 24241
    if (ctrl.shouldCenterTabs) {                                                                                       // 24242
      tabWidth = Array.prototype.slice.call(elements.tabs).reduce(function (value, element) {                          // 24243
        return value + element.offsetWidth;                                                                            // 24244
      }, 0);                                                                                                           // 24245
      if (totalWidth > tabWidth) $mdUtil.nextTick(updateInkBarStyles, false);                                          // 24246
    }                                                                                                                  // 24247
    updateInkBarClassName();                                                                                           // 24248
    angular.element(elements.inkBar).css({ left: left + 'px', right: right + 'px' });                                  // 24249
  }                                                                                                                    // 24250
                                                                                                                       // 24251
  /**                                                                                                                  // 24252
   * Adds left/right classes so that the ink bar will animate properly.                                                // 24253
   */                                                                                                                  // 24254
  function updateInkBarClassName () {                                                                                  // 24255
    var newIndex = ctrl.selectedIndex,                                                                                 // 24256
        oldIndex = ctrl.lastSelectedIndex,                                                                             // 24257
        ink      = angular.element(elements.inkBar);                                                                   // 24258
    if (!angular.isNumber(oldIndex)) return;                                                                           // 24259
    ink                                                                                                                // 24260
        .toggleClass('md-left', newIndex < oldIndex)                                                                   // 24261
        .toggleClass('md-right', newIndex > oldIndex);                                                                 // 24262
  }                                                                                                                    // 24263
                                                                                                                       // 24264
  /**                                                                                                                  // 24265
   * Takes an offset value and makes sure that it is within the min/max allowed values.                                // 24266
   * @param value                                                                                                      // 24267
   * @returns {*}                                                                                                      // 24268
   */                                                                                                                  // 24269
  function fixOffset (value) {                                                                                         // 24270
    if (!elements.tabs.length || !ctrl.shouldPaginate) return 0;                                                       // 24271
    var lastTab    = elements.tabs[ elements.tabs.length - 1 ],                                                        // 24272
        totalWidth = lastTab.offsetLeft + lastTab.offsetWidth;                                                         // 24273
    value          = Math.max(0, value);                                                                               // 24274
    value          = Math.min(totalWidth - elements.canvas.clientWidth, value);                                        // 24275
    return value;                                                                                                      // 24276
  }                                                                                                                    // 24277
                                                                                                                       // 24278
  /**                                                                                                                  // 24279
   * Attaches a ripple to the tab item element.                                                                        // 24280
   * @param scope                                                                                                      // 24281
   * @param element                                                                                                    // 24282
   */                                                                                                                  // 24283
  function attachRipple (scope, element) {                                                                             // 24284
    var options = { colorElement: angular.element(elements.inkBar) };                                                  // 24285
    $mdTabInkRipple.attach(scope, element, options);                                                                   // 24286
  }                                                                                                                    // 24287
}                                                                                                                      // 24288
MdTabsController.$inject = ["$scope", "$element", "$window", "$mdConstant", "$mdTabInkRipple", "$mdUtil", "$animateCss", "$attrs", "$compile", "$mdTheming"];
                                                                                                                       // 24290
})();                                                                                                                  // 24291
(function(){                                                                                                           // 24292
"use strict";                                                                                                          // 24293
                                                                                                                       // 24294
/**                                                                                                                    // 24295
 * @ngdoc directive                                                                                                    // 24296
 * @name mdTabs                                                                                                        // 24297
 * @module material.components.tabs                                                                                    // 24298
 *                                                                                                                     // 24299
 * @restrict E                                                                                                         // 24300
 *                                                                                                                     // 24301
 * @description                                                                                                        // 24302
 * The `<md-tabs>` directive serves as the container for 1..n `<md-tab>` child directives to produces a Tabs components.
 * In turn, the nested `<md-tab>` directive is used to specify a tab label for the **header button** and a [optional] tab view
 * content that will be associated with each tab button.                                                               // 24305
 *                                                                                                                     // 24306
 * Below is the markup for its simplest usage:                                                                         // 24307
 *                                                                                                                     // 24308
 *  <hljs lang="html">                                                                                                 // 24309
 *  <md-tabs>                                                                                                          // 24310
 *    <md-tab label="Tab #1"></md-tab>                                                                                 // 24311
 *    <md-tab label="Tab #2"></md-tab>                                                                                 // 24312
 *    <md-tab label="Tab #3"></md-tab>                                                                                 // 24313
 *  </md-tabs>                                                                                                         // 24314
 *  </hljs>                                                                                                            // 24315
 *                                                                                                                     // 24316
 * Tabs supports three (3) usage scenarios:                                                                            // 24317
 *                                                                                                                     // 24318
 *  1. Tabs (buttons only)                                                                                             // 24319
 *  2. Tabs with internal view content                                                                                 // 24320
 *  3. Tabs with external view content                                                                                 // 24321
 *                                                                                                                     // 24322
 * **Tab-only** support is useful when tab buttons are used for custom navigation regardless of any other components, content, or views.
 * **Tabs with internal views** are the traditional usages where each tab has associated view content and the view switching is managed internally by the Tabs component.
 * **Tabs with external view content** is often useful when content associated with each tab is independently managed and data-binding notifications announce tab selection changes.
 *                                                                                                                     // 24326
 * Additional features also include:                                                                                   // 24327
 *                                                                                                                     // 24328
 * *  Content can include any markup.                                                                                  // 24329
 * *  If a tab is disabled while active/selected, then the next tab will be auto-selected.                             // 24330
 *                                                                                                                     // 24331
 * ### Explanation of tab stretching                                                                                   // 24332
 *                                                                                                                     // 24333
 * Initially, tabs will have an inherent size.  This size will either be defined by how much space is needed to accommodate their text or set by the user through CSS.  Calculations will be based on this size.
 *                                                                                                                     // 24335
 * On mobile devices, tabs will be expanded to fill the available horizontal space.  When this happens, all tabs will become the same size.
 *                                                                                                                     // 24337
 * On desktops, by default, stretching will never occur.                                                               // 24338
 *                                                                                                                     // 24339
 * This default behavior can be overridden through the `md-stretch-tabs` attribute.  Here is a table showing when stretching will occur:
 *                                                                                                                     // 24341
 * `md-stretch-tabs` | mobile    | desktop                                                                             // 24342
 * ------------------|-----------|--------                                                                             // 24343
 * `auto`            | stretched | ---                                                                                 // 24344
 * `always`          | stretched | stretched                                                                           // 24345
 * `never`           | ---       | ---                                                                                 // 24346
 *                                                                                                                     // 24347
 * @param {integer=} md-selected Index of the active/selected tab                                                      // 24348
 * @param {boolean=} md-no-ink If present, disables ink ripple effects.                                                // 24349
 * @param {boolean=} md-no-ink-bar If present, disables the selection ink bar.                                         // 24350
 * @param {string=}  md-align-tabs Attribute to indicate position of tab buttons: `bottom` or `top`; default is `top`  // 24351
 * @param {string=} md-stretch-tabs Attribute to indicate whether or not to stretch tabs: `auto`, `always`, or `never`; default is `auto`
 * @param {boolean=} md-dynamic-height When enabled, the tab wrapper will resize based on the contents of the selected tab
 * @param {boolean=} md-border-bottom If present, shows a solid `1px` border between the tabs and their content        // 24354
 * @param {boolean=} md-center-tabs When enabled, tabs will be centered provided there is no need for pagination       // 24355
 * @param {boolean=} md-no-pagination When enabled, pagination will remain off                                         // 24356
 * @param {boolean=} md-swipe-content When enabled, swipe gestures will be enabled for the content area to jump between tabs
 * @param {boolean=} md-enable-disconnect When enabled, scopes will be disconnected for tabs that are not being displayed.  This provides a performance boost, but may also cause unexpected issues and is not recommended for most users.
 * @param {boolean=} md-autoselect When present, any tabs added after the initial load will be automatically selected  // 24359
 *                                                                                                                     // 24360
 * @usage                                                                                                              // 24361
 * <hljs lang="html">                                                                                                  // 24362
 * <md-tabs md-selected="selectedIndex" >                                                                              // 24363
 *   <img ng-src="img/angular.png" class="centered">                                                                   // 24364
 *   <md-tab                                                                                                           // 24365
 *       ng-repeat="tab in tabs | orderBy:predicate:reversed"                                                          // 24366
 *       md-on-select="onTabSelected(tab)"                                                                             // 24367
 *       md-on-deselect="announceDeselected(tab)"                                                                      // 24368
 *       ng-disabled="tab.disabled">                                                                                   // 24369
 *     <md-tab-label>                                                                                                  // 24370
 *       {{tab.title}}                                                                                                 // 24371
 *       <img src="img/removeTab.png" ng-click="removeTab(tab)" class="delete">                                        // 24372
 *     </md-tab-label>                                                                                                 // 24373
 *     <md-tab-body>                                                                                                   // 24374
 *       {{tab.content}}                                                                                               // 24375
 *     </md-tab-body>                                                                                                  // 24376
 *   </md-tab>                                                                                                         // 24377
 * </md-tabs>                                                                                                          // 24378
 * </hljs>                                                                                                             // 24379
 *                                                                                                                     // 24380
 */                                                                                                                    // 24381
angular                                                                                                                // 24382
    .module('material.components.tabs')                                                                                // 24383
    .directive('mdTabs', MdTabs);                                                                                      // 24384
                                                                                                                       // 24385
function MdTabs () {                                                                                                   // 24386
  return {                                                                                                             // 24387
    scope:            {                                                                                                // 24388
      selectedIndex: '=?mdSelected'                                                                                    // 24389
    },                                                                                                                 // 24390
    template:         function (element, attr) {                                                                       // 24391
      attr[ "$mdTabsTemplate" ] = element.html();                                                                      // 24392
      return '' +                                                                                                      // 24393
        '<md-tabs-wrapper> ' +                                                                                         // 24394
          '<md-tab-data></md-tab-data> ' +                                                                             // 24395
          '<md-prev-button ' +                                                                                         // 24396
              'tabindex="-1" ' +                                                                                       // 24397
              'role="button" ' +                                                                                       // 24398
              'aria-label="Previous Page" ' +                                                                          // 24399
              'aria-disabled="{{!$mdTabsCtrl.canPageBack()}}" ' +                                                      // 24400
              'ng-class="{ \'md-disabled\': !$mdTabsCtrl.canPageBack() }" ' +                                          // 24401
              'ng-if="$mdTabsCtrl.shouldPaginate" ' +                                                                  // 24402
              'ng-click="$mdTabsCtrl.previousPage()"> ' +                                                              // 24403
            '<md-icon md-svg-icon="md-tabs-arrow"></md-icon> ' +                                                       // 24404
          '</md-prev-button> ' +                                                                                       // 24405
          '<md-next-button ' +                                                                                         // 24406
              'tabindex="-1" ' +                                                                                       // 24407
              'role="button" ' +                                                                                       // 24408
              'aria-label="Next Page" ' +                                                                              // 24409
              'aria-disabled="{{!$mdTabsCtrl.canPageForward()}}" ' +                                                   // 24410
              'ng-class="{ \'md-disabled\': !$mdTabsCtrl.canPageForward() }" ' +                                       // 24411
              'ng-if="$mdTabsCtrl.shouldPaginate" ' +                                                                  // 24412
              'ng-click="$mdTabsCtrl.nextPage()"> ' +                                                                  // 24413
            '<md-icon md-svg-icon="md-tabs-arrow"></md-icon> ' +                                                       // 24414
          '</md-next-button> ' +                                                                                       // 24415
          '<md-tabs-canvas ' +                                                                                         // 24416
              'tabindex="{{ $mdTabsCtrl.hasFocus ? -1 : 0 }}" ' +                                                      // 24417
              'aria-activedescendant="tab-item-{{$mdTabsCtrl.tabs[$mdTabsCtrl.focusIndex].id}}" ' +                    // 24418
              'ng-focus="$mdTabsCtrl.redirectFocus()" ' +                                                              // 24419
              'ng-class="{ ' +                                                                                         // 24420
                  '\'md-paginated\': $mdTabsCtrl.shouldPaginate, ' +                                                   // 24421
                  '\'md-center-tabs\': $mdTabsCtrl.shouldCenterTabs ' +                                                // 24422
              '}" ' +                                                                                                  // 24423
              'ng-keydown="$mdTabsCtrl.keydown($event)" ' +                                                            // 24424
              'role="tablist"> ' +                                                                                     // 24425
            '<md-pagination-wrapper ' +                                                                                // 24426
                'ng-class="{ \'md-center-tabs\': $mdTabsCtrl.shouldCenterTabs }" ' +                                   // 24427
                'md-tab-scroll="$mdTabsCtrl.scroll($event)"> ' +                                                       // 24428
              '<md-tab-item ' +                                                                                        // 24429
                  'tabindex="-1" ' +                                                                                   // 24430
                  'class="md-tab" ' +                                                                                  // 24431
                  'ng-repeat="tab in $mdTabsCtrl.tabs" ' +                                                             // 24432
                  'role="tab" ' +                                                                                      // 24433
                  'aria-controls="tab-content-{{::tab.id}}" ' +                                                        // 24434
                  'aria-selected="{{tab.isActive()}}" ' +                                                              // 24435
                  'aria-disabled="{{tab.scope.disabled || \'false\'}}" ' +                                             // 24436
                  'ng-click="$mdTabsCtrl.select(tab.getIndex())" ' +                                                   // 24437
                  'ng-class="{ ' +                                                                                     // 24438
                      '\'md-active\':    tab.isActive(), ' +                                                           // 24439
                      '\'md-focused\':   tab.hasFocus(), ' +                                                           // 24440
                      '\'md-disabled\':  tab.scope.disabled ' +                                                        // 24441
                  '}" ' +                                                                                              // 24442
                  'ng-disabled="tab.scope.disabled" ' +                                                                // 24443
                  'md-swipe-left="$mdTabsCtrl.nextPage()" ' +                                                          // 24444
                  'md-swipe-right="$mdTabsCtrl.previousPage()" ' +                                                     // 24445
                  'md-tabs-template="::tab.label" ' +                                                                  // 24446
                  'md-scope="::tab.parent"></md-tab-item> ' +                                                          // 24447
              '<md-ink-bar></md-ink-bar> ' +                                                                           // 24448
            '</md-pagination-wrapper> ' +                                                                              // 24449
            '<div class="md-visually-hidden md-dummy-wrapper"> ' +                                                     // 24450
              '<md-dummy-tab ' +                                                                                       // 24451
                  'class="md-tab" ' +                                                                                  // 24452
                  'tabindex="-1" ' +                                                                                   // 24453
                  'id="tab-item-{{::tab.id}}" ' +                                                                      // 24454
                  'role="tab" ' +                                                                                      // 24455
                  'aria-controls="tab-content-{{::tab.id}}" ' +                                                        // 24456
                  'aria-selected="{{tab.isActive()}}" ' +                                                              // 24457
                  'aria-disabled="{{tab.scope.disabled || \'false\'}}" ' +                                             // 24458
                  'ng-focus="$mdTabsCtrl.hasFocus = true" ' +                                                          // 24459
                  'ng-blur="$mdTabsCtrl.hasFocus = false" ' +                                                          // 24460
                  'ng-repeat="tab in $mdTabsCtrl.tabs" ' +                                                             // 24461
                  'md-tabs-template="::tab.label" ' +                                                                  // 24462
                  'md-scope="::tab.parent"></md-dummy-tab> ' +                                                         // 24463
            '</div> ' +                                                                                                // 24464
          '</md-tabs-canvas> ' +                                                                                       // 24465
        '</md-tabs-wrapper> ' +                                                                                        // 24466
        '<md-tabs-content-wrapper ng-show="$mdTabsCtrl.hasContent && $mdTabsCtrl.selectedIndex >= 0"> ' +              // 24467
          '<md-tab-content ' +                                                                                         // 24468
              'id="tab-content-{{::tab.id}}" ' +                                                                       // 24469
              'role="tabpanel" ' +                                                                                     // 24470
              'aria-labelledby="tab-item-{{::tab.id}}" ' +                                                             // 24471
              'md-swipe-left="$mdTabsCtrl.swipeContent && $mdTabsCtrl.incrementIndex(1)" ' +                           // 24472
              'md-swipe-right="$mdTabsCtrl.swipeContent && $mdTabsCtrl.incrementIndex(-1)" ' +                         // 24473
              'ng-if="$mdTabsCtrl.hasContent" ' +                                                                      // 24474
              'ng-repeat="(index, tab) in $mdTabsCtrl.tabs" ' +                                                        // 24475
              'ng-class="{ ' +                                                                                         // 24476
                '\'md-no-transition\': $mdTabsCtrl.lastSelectedIndex == null, ' +                                      // 24477
                '\'md-active\':        tab.isActive(), ' +                                                             // 24478
                '\'md-left\':          tab.isLeft(), ' +                                                               // 24479
                '\'md-right\':         tab.isRight(), ' +                                                              // 24480
                '\'md-no-scroll\':     $mdTabsCtrl.dynamicHeight ' +                                                   // 24481
              '}"> ' +                                                                                                 // 24482
            '<div ' +                                                                                                  // 24483
                'md-tabs-template="::tab.template" ' +                                                                 // 24484
                'md-connected-if="tab.isActive()" ' +                                                                  // 24485
                'md-scope="::tab.parent" ' +                                                                           // 24486
                'ng-if="$mdTabsCtrl.enableDisconnect || tab.shouldRender()"></div> ' +                                 // 24487
          '</md-tab-content> ' +                                                                                       // 24488
        '</md-tabs-content-wrapper>';                                                                                  // 24489
    },                                                                                                                 // 24490
    controller:       'MdTabsController',                                                                              // 24491
    controllerAs:     '$mdTabsCtrl',                                                                                   // 24492
    bindToController: true                                                                                             // 24493
  };                                                                                                                   // 24494
}                                                                                                                      // 24495
                                                                                                                       // 24496
})();                                                                                                                  // 24497
(function(){                                                                                                           // 24498
"use strict";                                                                                                          // 24499
                                                                                                                       // 24500
angular                                                                                                                // 24501
    .module('material.components.tabs')                                                                                // 24502
    .directive('mdTabsTemplate', MdTabsTemplate);                                                                      // 24503
                                                                                                                       // 24504
function MdTabsTemplate ($compile, $mdUtil) {                                                                          // 24505
  return {                                                                                                             // 24506
    restrict: 'A',                                                                                                     // 24507
    link:     link,                                                                                                    // 24508
    scope:    {                                                                                                        // 24509
      template:     '=mdTabsTemplate',                                                                                 // 24510
      connected:    '=?mdConnectedIf',                                                                                 // 24511
      compileScope: '=mdScope'                                                                                         // 24512
    },                                                                                                                 // 24513
    require:  '^?mdTabs'                                                                                               // 24514
  };                                                                                                                   // 24515
  function link (scope, element, attr, ctrl) {                                                                         // 24516
    if (!ctrl) return;                                                                                                 // 24517
    var compileScope = ctrl.enableDisconnect ? scope.compileScope.$new() : scope.compileScope;                         // 24518
    element.html(scope.template);                                                                                      // 24519
    $compile(element.contents())(compileScope);                                                                        // 24520
    element.on('DOMSubtreeModified', function () {                                                                     // 24521
      ctrl.updatePagination();                                                                                         // 24522
      ctrl.updateInkBarStyles();                                                                                       // 24523
    });                                                                                                                // 24524
    return $mdUtil.nextTick(handleScope);                                                                              // 24525
                                                                                                                       // 24526
    function handleScope () {                                                                                          // 24527
      scope.$watch('connected', function (value) { value === false ? disconnect() : reconnect(); });                   // 24528
      scope.$on('$destroy', reconnect);                                                                                // 24529
    }                                                                                                                  // 24530
                                                                                                                       // 24531
    function disconnect () {                                                                                           // 24532
      if (ctrl.enableDisconnect) $mdUtil.disconnectScope(compileScope);                                                // 24533
    }                                                                                                                  // 24534
                                                                                                                       // 24535
    function reconnect () {                                                                                            // 24536
      if (ctrl.enableDisconnect) $mdUtil.reconnectScope(compileScope);                                                 // 24537
    }                                                                                                                  // 24538
  }                                                                                                                    // 24539
}                                                                                                                      // 24540
MdTabsTemplate.$inject = ["$compile", "$mdUtil"];                                                                      // 24541
                                                                                                                       // 24542
})();                                                                                                                  // 24543
(function(){                                                                                                           // 24544
angular.module("material.core").constant("$MD_THEME_CSS", "md-autocomplete.md-THEME_NAME-theme {  background: '{{background-50}}'; }  md-autocomplete.md-THEME_NAME-theme[disabled] {    background: '{{background-100}}'; }  md-autocomplete.md-THEME_NAME-theme button md-icon path {    fill: '{{background-600}}'; }  md-autocomplete.md-THEME_NAME-theme button:after {    background: '{{background-600-0.3}}'; }.md-autocomplete-suggestions-container.md-THEME_NAME-theme {  background: '{{background-50}}'; }  .md-autocomplete-suggestions-container.md-THEME_NAME-theme li {    color: '{{background-900}}'; }    .md-autocomplete-suggestions-container.md-THEME_NAME-theme li .highlight {      color: '{{background-600}}'; }    .md-autocomplete-suggestions-container.md-THEME_NAME-theme li:hover, .md-autocomplete-suggestions-container.md-THEME_NAME-theme li.selected {      background: '{{background-200}}'; }md-backdrop {  background-color: '{{background-900-0.0}}'; }  md-backdrop.md-opaque.md-THEME_NAME-theme {    background-color: '{{background-900-1.0}}'; }a.md-button.md-THEME_NAME-theme:not([disabled]):hover,.md-button.md-THEME_NAME-theme:not([disabled]):hover {  background-color: '{{background-500-0.2}}'; }a.md-button.md-THEME_NAME-theme:not([disabled]).md-focused,.md-button.md-THEME_NAME-theme:not([disabled]).md-focused {  background-color: '{{background-500-0.2}}'; }a.md-button.md-THEME_NAME-theme:not([disabled]).md-icon-button:hover,.md-button.md-THEME_NAME-theme:not([disabled]).md-icon-button:hover {  background-color: transparent; }a.md-button.md-THEME_NAME-theme.md-fab,.md-button.md-THEME_NAME-theme.md-fab {  background-color: '{{accent-color}}';  color: '{{accent-contrast}}'; }  a.md-button.md-THEME_NAME-theme.md-fab md-icon,  .md-button.md-THEME_NAME-theme.md-fab md-icon {    color: '{{accent-contrast}}'; }  a.md-button.md-THEME_NAME-theme.md-fab:not([disabled]):hover,  .md-button.md-THEME_NAME-theme.md-fab:not([disabled]):hover {    background-color: '{{accent-color}}'; }  a.md-button.md-THEME_NAME-theme.md-fab:not([disabled]).md-focused,  .md-button.md-THEME_NAME-theme.md-fab:not([disabled]).md-focused {    background-color: '{{accent-A700}}'; }a.md-button.md-THEME_NAME-theme.md-primary,.md-button.md-THEME_NAME-theme.md-primary {  color: '{{primary-color}}'; }  a.md-button.md-THEME_NAME-theme.md-primary.md-raised, a.md-button.md-THEME_NAME-theme.md-primary.md-fab,  .md-button.md-THEME_NAME-theme.md-primary.md-raised,  .md-button.md-THEME_NAME-theme.md-primary.md-fab {    color: '{{primary-contrast}}';    background-color: '{{primary-color}}'; }    a.md-button.md-THEME_NAME-theme.md-primary.md-raised:not([disabled]) md-icon, a.md-button.md-THEME_NAME-theme.md-primary.md-fab:not([disabled]) md-icon,    .md-button.md-THEME_NAME-theme.md-primary.md-raised:not([disabled]) md-icon,    .md-button.md-THEME_NAME-theme.md-primary.md-fab:not([disabled]) md-icon {      color: '{{primary-contrast}}'; }    a.md-button.md-THEME_NAME-theme.md-primary.md-raised:not([disabled]):hover, a.md-button.md-THEME_NAME-theme.md-primary.md-fab:not([disabled]):hover,    .md-button.md-THEME_NAME-theme.md-primary.md-raised:not([disabled]):hover,    .md-button.md-THEME_NAME-theme.md-primary.md-fab:not([disabled]):hover {      background-color: '{{primary-color}}'; }    a.md-button.md-THEME_NAME-theme.md-primary.md-raised:not([disabled]).md-focused, a.md-button.md-THEME_NAME-theme.md-primary.md-fab:not([disabled]).md-focused,    .md-button.md-THEME_NAME-theme.md-primary.md-raised:not([disabled]).md-focused,    .md-button.md-THEME_NAME-theme.md-primary.md-fab:not([disabled]).md-focused {      background-color: '{{primary-600}}'; }  a.md-button.md-THEME_NAME-theme.md-primary:not([disabled]) md-icon,  .md-button.md-THEME_NAME-theme.md-primary:not([disabled]) md-icon {    color: '{{primary-color}}'; }a.md-button.md-THEME_NAME-theme.md-fab,.md-button.md-THEME_NAME-theme.md-fab {  background-color: '{{accent-color}}';  color: '{{accent-contrast}}'; }  a.md-button.md-THEME_NAME-theme.md-fab:not([disabled]) .md-icon,  .md-button.md-THEME_NAME-theme.md-fab:not([disabled]) .md-icon {    color: '{{accent-contrast}}'; }  a.md-button.md-THEME_NAME-theme.md-fab:not([disabled]):hover,  .md-button.md-THEME_NAME-theme.md-fab:not([disabled]):hover {    background-color: '{{accent-color}}'; }  a.md-button.md-THEME_NAME-theme.md-fab:not([disabled]).md-focused,  .md-button.md-THEME_NAME-theme.md-fab:not([disabled]).md-focused {    background-color: '{{accent-A700}}'; }a.md-button.md-THEME_NAME-theme.md-raised,.md-button.md-THEME_NAME-theme.md-raised {  color: '{{background-900}}';  background-color: '{{background-50}}'; }  a.md-button.md-THEME_NAME-theme.md-raised:not([disabled]) md-icon,  .md-button.md-THEME_NAME-theme.md-raised:not([disabled]) md-icon {    color: '{{background-900}}'; }  a.md-button.md-THEME_NAME-theme.md-raised:not([disabled]):hover,  .md-button.md-THEME_NAME-theme.md-raised:not([disabled]):hover {    background-color: '{{background-50}}'; }  a.md-button.md-THEME_NAME-theme.md-raised:not([disabled]).md-focused,  .md-button.md-THEME_NAME-theme.md-raised:not([disabled]).md-focused {    background-color: '{{background-200}}'; }a.md-button.md-THEME_NAME-theme.md-warn,.md-button.md-THEME_NAME-theme.md-warn {  color: '{{warn-color}}'; }  a.md-button.md-THEME_NAME-theme.md-warn.md-raised, a.md-button.md-THEME_NAME-theme.md-warn.md-fab,  .md-button.md-THEME_NAME-theme.md-warn.md-raised,  .md-button.md-THEME_NAME-theme.md-warn.md-fab {    color: '{{warn-contrast}}';    background-color: '{{warn-color}}'; }    a.md-button.md-THEME_NAME-theme.md-warn.md-raised:not([disabled]) md-icon, a.md-button.md-THEME_NAME-theme.md-warn.md-fab:not([disabled]) md-icon,    .md-button.md-THEME_NAME-theme.md-warn.md-raised:not([disabled]) md-icon,    .md-button.md-THEME_NAME-theme.md-warn.md-fab:not([disabled]) md-icon {      color: '{{warn-contrast}}'; }    a.md-button.md-THEME_NAME-theme.md-warn.md-raised:not([disabled]):hover, a.md-button.md-THEME_NAME-theme.md-warn.md-fab:not([disabled]):hover,    .md-button.md-THEME_NAME-theme.md-warn.md-raised:not([disabled]):hover,    .md-button.md-THEME_NAME-theme.md-warn.md-fab:not([disabled]):hover {      background-color: '{{warn-color}}'; }    a.md-button.md-THEME_NAME-theme.md-warn.md-raised:not([disabled]).md-focused, a.md-button.md-THEME_NAME-theme.md-warn.md-fab:not([disabled]).md-focused,    .md-button.md-THEME_NAME-theme.md-warn.md-raised:not([disabled]).md-focused,    .md-button.md-THEME_NAME-theme.md-warn.md-fab:not([disabled]).md-focused {      background-color: '{{warn-700}}'; }  a.md-button.md-THEME_NAME-theme.md-warn:not([disabled]) md-icon,  .md-button.md-THEME_NAME-theme.md-warn:not([disabled]) md-icon {    color: '{{warn-color}}'; }a.md-button.md-THEME_NAME-theme.md-accent,.md-button.md-THEME_NAME-theme.md-accent {  color: '{{accent-color}}'; }  a.md-button.md-THEME_NAME-theme.md-accent.md-raised, a.md-button.md-THEME_NAME-theme.md-accent.md-fab,  .md-button.md-THEME_NAME-theme.md-accent.md-raised,  .md-button.md-THEME_NAME-theme.md-accent.md-fab {    color: '{{accent-contrast}}';    background-color: '{{accent-color}}'; }    a.md-button.md-THEME_NAME-theme.md-accent.md-raised:not([disabled]) md-icon, a.md-button.md-THEME_NAME-theme.md-accent.md-fab:not([disabled]) md-icon,    .md-button.md-THEME_NAME-theme.md-accent.md-raised:not([disabled]) md-icon,    .md-button.md-THEME_NAME-theme.md-accent.md-fab:not([disabled]) md-icon {      color: '{{accent-contrast}}'; }    a.md-button.md-THEME_NAME-theme.md-accent.md-raised:not([disabled]):hover, a.md-button.md-THEME_NAME-theme.md-accent.md-fab:not([disabled]):hover,    .md-button.md-THEME_NAME-theme.md-accent.md-raised:not([disabled]):hover,    .md-button.md-THEME_NAME-theme.md-accent.md-fab:not([disabled]):hover {      background-color: '{{accent-color}}'; }    a.md-button.md-THEME_NAME-theme.md-accent.md-raised:not([disabled]).md-focused, a.md-button.md-THEME_NAME-theme.md-accent.md-fab:not([disabled]).md-focused,    .md-button.md-THEME_NAME-theme.md-accent.md-raised:not([disabled]).md-focused,    .md-button.md-THEME_NAME-theme.md-accent.md-fab:not([disabled]).md-focused {      background-color: '{{accent-700}}'; }  a.md-button.md-THEME_NAME-theme.md-accent:not([disabled]) md-icon,  .md-button.md-THEME_NAME-theme.md-accent:not([disabled]) md-icon {    color: '{{accent-color}}'; }a.md-button.md-THEME_NAME-theme[disabled], a.md-button.md-THEME_NAME-theme.md-raised[disabled], a.md-button.md-THEME_NAME-theme.md-fab[disabled], a.md-button.md-THEME_NAME-theme.md-accent[disabled], a.md-button.md-THEME_NAME-theme.md-warn[disabled],.md-button.md-THEME_NAME-theme[disabled],.md-button.md-THEME_NAME-theme.md-raised[disabled],.md-button.md-THEME_NAME-theme.md-fab[disabled],.md-button.md-THEME_NAME-theme.md-accent[disabled],.md-button.md-THEME_NAME-theme.md-warn[disabled] {  color: '{{foreground-3}}' !important;  cursor: default; }  a.md-button.md-THEME_NAME-theme[disabled] md-icon, a.md-button.md-THEME_NAME-theme.md-raised[disabled] md-icon, a.md-button.md-THEME_NAME-theme.md-fab[disabled] md-icon, a.md-button.md-THEME_NAME-theme.md-accent[disabled] md-icon, a.md-button.md-THEME_NAME-theme.md-warn[disabled] md-icon,  .md-button.md-THEME_NAME-theme[disabled] md-icon,  .md-button.md-THEME_NAME-theme.md-raised[disabled] md-icon,  .md-button.md-THEME_NAME-theme.md-fab[disabled] md-icon,  .md-button.md-THEME_NAME-theme.md-accent[disabled] md-icon,  .md-button.md-THEME_NAME-theme.md-warn[disabled] md-icon {    color: '{{foreground-3}}'; }a.md-button.md-THEME_NAME-theme.md-raised[disabled], a.md-button.md-THEME_NAME-theme.md-fab[disabled],.md-button.md-THEME_NAME-theme.md-raised[disabled],.md-button.md-THEME_NAME-theme.md-fab[disabled] {  background-color: '{{foreground-4}}'; }a.md-button.md-THEME_NAME-theme[disabled],.md-button.md-THEME_NAME-theme[disabled] {  background-color: transparent; }md-card.md-THEME_NAME-theme {  background-color: '{{background-color}}';  border-radius: 2px; }  md-card.md-THEME_NAME-theme .md-card-image {    border-radius: 2px 2px 0 0; }  md-card.md-THEME_NAME-theme md-card-header md-card-avatar md-icon {    color: '{{background-color}}';    background-color: '{{foreground-3}}'; }  md-card.md-THEME_NAME-theme md-card-header md-card-header-text .md-subhead {    color: '{{foreground-2}}'; }  md-card.md-THEME_NAME-theme md-card-title md-card-title-text:not(:only-child) .md-subhead {    color: '{{foreground-2}}'; }md-checkbox.md-THEME_NAME-theme .md-ripple {  color: '{{accent-600}}'; }md-checkbox.md-THEME_NAME-theme.md-checked .md-ripple {  color: '{{background-600}}'; }md-checkbox.md-THEME_NAME-theme.md-checked.md-focused .md-container:before {  background-color: '{{accent-color-0.26}}'; }md-checkbox.md-THEME_NAME-theme .md-ink-ripple {  color: '{{foreground-2}}'; }md-checkbox.md-THEME_NAME-theme.md-checked .md-ink-ripple {  color: '{{accent-color-0.87}}'; }md-checkbox.md-THEME_NAME-theme .md-icon {  border-color: '{{foreground-2}}'; }md-checkbox.md-THEME_NAME-theme.md-checked .md-icon {  background-color: '{{accent-color-0.87}}'; }md-checkbox.md-THEME_NAME-theme.md-checked .md-icon:after {  border-color: '{{accent-contrast-0.87}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-primary .md-ripple {  color: '{{primary-600}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-primary.md-checked .md-ripple {  color: '{{background-600}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-primary .md-ink-ripple {  color: '{{foreground-2}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-primary.md-checked .md-ink-ripple {  color: '{{primary-color-0.87}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-primary .md-icon {  border-color: '{{foreground-2}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-primary.md-checked .md-icon {  background-color: '{{primary-color-0.87}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-primary.md-checked.md-focused .md-container:before {  background-color: '{{primary-color-0.26}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-primary.md-checked .md-icon:after {  border-color: '{{primary-contrast-0.87}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-warn .md-ripple {  color: '{{warn-600}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-warn .md-ink-ripple {  color: '{{foreground-2}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-warn.md-checked .md-ink-ripple {  color: '{{warn-color-0.87}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-warn .md-icon {  border-color: '{{foreground-2}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-warn.md-checked .md-icon {  background-color: '{{warn-color-0.87}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-warn.md-checked.md-focused:not([disabled]) .md-container:before {  background-color: '{{warn-color-0.26}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-warn.md-checked .md-icon:after {  border-color: '{{background-200}}'; }md-checkbox.md-THEME_NAME-theme[disabled] .md-icon {  border-color: '{{foreground-3}}'; }md-checkbox.md-THEME_NAME-theme[disabled].md-checked .md-icon {  background-color: '{{foreground-3}}'; }md-checkbox.md-THEME_NAME-theme[disabled].md-checked .md-icon:after {  border-color: '{{background-200}}'; }md-checkbox.md-THEME_NAME-theme[disabled] .md-label {  color: '{{foreground-3}}'; }md-bottom-sheet.md-THEME_NAME-theme {  background-color: '{{background-50}}';  border-top-color: '{{background-300}}'; }  md-bottom-sheet.md-THEME_NAME-theme.md-list md-list-item {    color: '{{foreground-1}}'; }  md-bottom-sheet.md-THEME_NAME-theme .md-subheader {    background-color: '{{background-50}}'; }  md-bottom-sheet.md-THEME_NAME-theme .md-subheader {    color: '{{foreground-1}}'; }md-chips.md-THEME_NAME-theme .md-chips {  box-shadow: 0 1px '{{background-300}}'; }  md-chips.md-THEME_NAME-theme .md-chips.md-focused {    box-shadow: 0 2px '{{primary-color}}'; }md-chips.md-THEME_NAME-theme .md-chip {  background: '{{background-300}}';  color: '{{background-800}}'; }  md-chips.md-THEME_NAME-theme .md-chip.md-focused {    background: '{{primary-color}}';    color: '{{primary-contrast}}'; }    md-chips.md-THEME_NAME-theme .md-chip.md-focused md-icon {      color: '{{primary-contrast}}'; }md-chips.md-THEME_NAME-theme md-chip-remove .md-button md-icon path {  fill: '{{background-500}}'; }.md-contact-suggestion span.md-contact-email {  color: '{{background-400}}'; }md-dialog.md-THEME_NAME-theme {  border-radius: 4px;  background-color: '{{background-color}}'; }  md-dialog.md-THEME_NAME-theme.md-content-overflow .md-actions, md-dialog.md-THEME_NAME-theme.md-content-overflow md-dialog-actions {    border-top-color: '{{foreground-4}}'; }md-divider.md-THEME_NAME-theme {  border-top-color: '{{foreground-4}}'; }.layout-row > md-divider.md-THEME_NAME-theme {  border-right-color: '{{foreground-4}}'; }/** Theme styles for mdCalendar. */.md-calendar.md-THEME_NAME-theme {  color: '{{foreground-1}}'; }  .md-calendar.md-THEME_NAME-theme tr:last-child td {    border-bottom-color: '{{background-200}}'; }.md-THEME_NAME-theme .md-calendar-day-header {  background: '{{background-hue-1}}';  color: '{{foreground-1}}'; }.md-THEME_NAME-theme .md-calendar-date.md-calendar-date-today .md-calendar-date-selection-indicator {  border: 1px solid '{{primary-500}}'; }.md-THEME_NAME-theme .md-calendar-date.md-calendar-date-today.md-calendar-date-disabled {  color: '{{primary-500-0.6}}'; }.md-THEME_NAME-theme .md-calendar-date.md-focus .md-calendar-date-selection-indicator {  background: '{{background-hue-1}}'; }.md-THEME_NAME-theme .md-calendar-date-selection-indicator:hover {  background: '{{background-hue-1}}'; }.md-THEME_NAME-theme .md-calendar-date.md-calendar-selected-date .md-calendar-date-selection-indicator,.md-THEME_NAME-theme .md-calendar-date.md-focus.md-calendar-selected-date .md-calendar-date-selection-indicator {  background: '{{primary-500}}';  color: '{{primary-500-contrast}}';  border-color: transparent; }.md-THEME_NAME-theme .md-calendar-date-disabled,.md-THEME_NAME-theme .md-calendar-month-label-disabled {  color: '{{foreground-3}}'; }/** Theme styles for mdDatepicker. */md-datepicker.md-THEME_NAME-theme {  background: '{{background-color}}'; }.md-THEME_NAME-theme .md-datepicker-input {  color: '{{background-contrast}}';  background: '{{background-color}}'; }  .md-THEME_NAME-theme .md-datepicker-input::-webkit-input-placeholder, .md-THEME_NAME-theme .md-datepicker-input::-moz-placeholder, .md-THEME_NAME-theme .md-datepicker-input:-moz-placeholder, .md-THEME_NAME-theme .md-datepicker-input:-ms-input-placeholder {    color: \"{{foreground-3}}\"; }.md-THEME_NAME-theme .md-datepicker-input-container {  border-bottom-color: '{{background-300}}'; }  .md-THEME_NAME-theme .md-datepicker-input-container.md-datepicker-focused {    border-bottom-color: '{{primary-500}}'; }  .md-THEME_NAME-theme .md-datepicker-input-container.md-datepicker-invalid {    border-bottom-color: '{{warn-A700}}'; }.md-THEME_NAME-theme .md-datepicker-calendar-pane {  border-color: '{{background-300}}'; }.md-THEME_NAME-theme .md-datepicker-triangle-button .md-datepicker-expand-triangle {  border-top-color: '{{foreground-3}}'; }.md-THEME_NAME-theme .md-datepicker-triangle-button:hover .md-datepicker-expand-triangle {  border-top-color: '{{foreground-2}}'; }.md-THEME_NAME-theme .md-datepicker-open .md-datepicker-calendar-icon {  fill: '{{primary-500}}'; }.md-THEME_NAME-theme .md-datepicker-calendar,.md-THEME_NAME-theme .md-datepicker-input-mask-opaque {  background: '{{background-color}}'; }md-content.md-THEME_NAME-theme {  color: '{{foreground-1}}';  background-color: '{{background-color}}'; }md-icon.md-THEME_NAME-theme {  color: '{{foreground-2}}'; }  md-icon.md-THEME_NAME-theme.md-primary {    color: '{{primary-color}}'; }  md-icon.md-THEME_NAME-theme.md-accent {    color: '{{accent-color}}'; }  md-icon.md-THEME_NAME-theme.md-warn {    color: '{{warn-color}}'; }md-input-container.md-THEME_NAME-theme .md-input {  color: '{{foreground-1}}';  border-color: '{{foreground-4}}';  text-shadow: '{{foreground-shadow}}'; }  md-input-container.md-THEME_NAME-theme .md-input::-webkit-input-placeholder, md-input-container.md-THEME_NAME-theme .md-input::-moz-placeholder, md-input-container.md-THEME_NAME-theme .md-input:-moz-placeholder, md-input-container.md-THEME_NAME-theme .md-input:-ms-input-placeholder {    color: \"{{foreground-3}}\"; }md-input-container.md-THEME_NAME-theme > md-icon {  color: '{{foreground-1}}'; }md-input-container.md-THEME_NAME-theme label,md-input-container.md-THEME_NAME-theme .md-placeholder {  text-shadow: '{{foreground-shadow}}';  color: '{{foreground-3}}'; }md-input-container.md-THEME_NAME-theme ng-messages :not(.md-char-counter), md-input-container.md-THEME_NAME-theme [ng-messages] :not(.md-char-counter),md-input-container.md-THEME_NAME-theme ng-message :not(.md-char-counter), md-input-container.md-THEME_NAME-theme data-ng-message :not(.md-char-counter), md-input-container.md-THEME_NAME-theme x-ng-message :not(.md-char-counter),md-input-container.md-THEME_NAME-theme [ng-message] :not(.md-char-counter), md-input-container.md-THEME_NAME-theme [data-ng-message] :not(.md-char-counter), md-input-container.md-THEME_NAME-theme [x-ng-message] :not(.md-char-counter),md-input-container.md-THEME_NAME-theme [ng-message-exp] :not(.md-char-counter), md-input-container.md-THEME_NAME-theme [data-ng-message-exp] :not(.md-char-counter), md-input-container.md-THEME_NAME-theme [x-ng-message-exp] :not(.md-char-counter) {  color: '{{warn-A700}}'; }md-input-container.md-THEME_NAME-theme:not(.md-input-invalid).md-input-has-value label {  color: '{{foreground-2}}'; }md-input-container.md-THEME_NAME-theme:not(.md-input-invalid).md-input-focused .md-input {  border-color: '{{primary-500}}'; }md-input-container.md-THEME_NAME-theme:not(.md-input-invalid).md-input-focused label {  color: '{{primary-500}}'; }md-input-container.md-THEME_NAME-theme:not(.md-input-invalid).md-input-focused md-icon {  color: '{{primary-500}}'; }md-input-container.md-THEME_NAME-theme:not(.md-input-invalid).md-input-focused.md-accent .md-input {  border-color: '{{accent-500}}'; }md-input-container.md-THEME_NAME-theme:not(.md-input-invalid).md-input-focused.md-accent label {  color: '{{accent-500}}'; }md-input-container.md-THEME_NAME-theme:not(.md-input-invalid).md-input-focused.md-warn .md-input {  border-color: '{{warn-A700}}'; }md-input-container.md-THEME_NAME-theme:not(.md-input-invalid).md-input-focused.md-warn label {  color: '{{warn-A700}}'; }md-input-container.md-THEME_NAME-theme.md-input-invalid .md-input {  border-color: '{{warn-A700}}'; }md-input-container.md-THEME_NAME-theme.md-input-invalid.md-input-focused label {  color: '{{warn-A700}}'; }md-input-container.md-THEME_NAME-theme.md-input-invalid ng-message, md-input-container.md-THEME_NAME-theme.md-input-invalid data-ng-message, md-input-container.md-THEME_NAME-theme.md-input-invalid x-ng-message,md-input-container.md-THEME_NAME-theme.md-input-invalid [ng-message], md-input-container.md-THEME_NAME-theme.md-input-invalid [data-ng-message], md-input-container.md-THEME_NAME-theme.md-input-invalid [x-ng-message],md-input-container.md-THEME_NAME-theme.md-input-invalid [ng-message-exp], md-input-container.md-THEME_NAME-theme.md-input-invalid [data-ng-message-exp], md-input-container.md-THEME_NAME-theme.md-input-invalid [x-ng-message-exp],md-input-container.md-THEME_NAME-theme.md-input-invalid .md-char-counter {  color: '{{warn-A700}}'; }md-input-container.md-THEME_NAME-theme .md-input[disabled],md-input-container.md-THEME_NAME-theme .md-input [disabled] {  border-bottom-color: transparent;  color: '{{foreground-3}}';  background-image: linear-gradient(to right, \"{{foreground-3}}\" 0%, \"{{foreground-3}}\" 33%, transparent 0%);  background-image: -ms-linear-gradient(left, transparent 0%, \"{{foreground-3}}\" 100%); }md-menu-bar.md-THEME_NAME-theme > button.md-button {  color: '{{foreground-2}}';  border-radius: 2px; }md-menu-bar.md-THEME_NAME-theme md-menu.md-open > button, md-menu-bar.md-THEME_NAME-theme md-menu > button:focus {  outline: none;  background: '{{background-200}}'; }md-menu-bar.md-THEME_NAME-theme.md-open:not(.md-keyboard-mode) md-menu:hover > button {  background-color: '{{ background-500-0.2}}'; }md-menu-bar.md-THEME_NAME-theme:not(.md-keyboard-mode):not(.md-open) md-menu button:hover,md-menu-bar.md-THEME_NAME-theme:not(.md-keyboard-mode):not(.md-open) md-menu button:focus {  background: transparent; }md-menu-content.md-THEME_NAME-theme .md-menu > .md-button:after {  color: '{{foreground-2}}'; }md-menu-content.md-THEME_NAME-theme .md-menu.md-open > .md-button {  background-color: '{{ background-500-0.2}}'; }md-toolbar.md-THEME_NAME-theme.md-menu-toolbar {  background-color: '{{background-color}}';  color: '{{foreground-1}}'; }  md-toolbar.md-THEME_NAME-theme.md-menu-toolbar md-toolbar-filler {    background-color: '{{primary-color}}';    color: '{{primary-contrast}}'; }    md-toolbar.md-THEME_NAME-theme.md-menu-toolbar md-toolbar-filler md-icon {      color: '{{primary-contrast}}'; }md-list.md-THEME_NAME-theme md-list-item.md-2-line .md-list-item-text h3, md-list.md-THEME_NAME-theme md-list-item.md-2-line .md-list-item-text h4,md-list.md-THEME_NAME-theme md-list-item.md-3-line .md-list-item-text h3,md-list.md-THEME_NAME-theme md-list-item.md-3-line .md-list-item-text h4 {  color: '{{foreground-1}}'; }md-list.md-THEME_NAME-theme md-list-item.md-2-line .md-list-item-text p,md-list.md-THEME_NAME-theme md-list-item.md-3-line .md-list-item-text p {  color: '{{foreground-2}}'; }md-list.md-THEME_NAME-theme .md-proxy-focus.md-focused div.md-no-style {  background-color: '{{background-100}}'; }md-list.md-THEME_NAME-theme md-list-item > .md-avatar-icon {  background-color: '{{foreground-3}}';  color: '{{background-color}}'; }md-list.md-THEME_NAME-theme md-list-item > md-icon {  color: '{{foreground-2}}'; }  md-list.md-THEME_NAME-theme md-list-item > md-icon.md-highlight {    color: '{{primary-color}}'; }    md-list.md-THEME_NAME-theme md-list-item > md-icon.md-highlight.md-accent {      color: '{{accent-color}}'; }md-menu-content.md-THEME_NAME-theme {  background-color: '{{background-color}}'; }  md-menu-content.md-THEME_NAME-theme md-menu-divider {    background-color: '{{foreground-4}}'; }md-progress-circular.md-THEME_NAME-theme {  background-color: transparent; }  md-progress-circular.md-THEME_NAME-theme .md-inner .md-gap {    border-top-color: '{{primary-color}}';    border-bottom-color: '{{primary-color}}'; }  md-progress-circular.md-THEME_NAME-theme .md-inner .md-left .md-half-circle, md-progress-circular.md-THEME_NAME-theme .md-inner .md-right .md-half-circle {    border-top-color: '{{primary-color}}'; }  md-progress-circular.md-THEME_NAME-theme .md-inner .md-right .md-half-circle {    border-right-color: '{{primary-color}}'; }  md-progress-circular.md-THEME_NAME-theme .md-inner .md-left .md-half-circle {    border-left-color: '{{primary-color}}'; }  md-progress-circular.md-THEME_NAME-theme.md-warn .md-inner .md-gap {    border-top-color: '{{warn-color}}';    border-bottom-color: '{{warn-color}}'; }  md-progress-circular.md-THEME_NAME-theme.md-warn .md-inner .md-left .md-half-circle, md-progress-circular.md-THEME_NAME-theme.md-warn .md-inner .md-right .md-half-circle {    border-top-color: '{{warn-color}}'; }  md-progress-circular.md-THEME_NAME-theme.md-warn .md-inner .md-right .md-half-circle {    border-right-color: '{{warn-color}}'; }  md-progress-circular.md-THEME_NAME-theme.md-warn .md-inner .md-left .md-half-circle {    border-left-color: '{{warn-color}}'; }  md-progress-circular.md-THEME_NAME-theme.md-accent .md-inner .md-gap {    border-top-color: '{{accent-color}}';    border-bottom-color: '{{accent-color}}'; }  md-progress-circular.md-THEME_NAME-theme.md-accent .md-inner .md-left .md-half-circle, md-progress-circular.md-THEME_NAME-theme.md-accent .md-inner .md-right .md-half-circle {    border-top-color: '{{accent-color}}'; }  md-progress-circular.md-THEME_NAME-theme.md-accent .md-inner .md-right .md-half-circle {    border-right-color: '{{accent-color}}'; }  md-progress-circular.md-THEME_NAME-theme.md-accent .md-inner .md-left .md-half-circle {    border-left-color: '{{accent-color}}'; }md-progress-linear.md-THEME_NAME-theme .md-container {  background-color: '{{primary-100}}'; }md-progress-linear.md-THEME_NAME-theme .md-bar {  background-color: '{{primary-color}}'; }md-progress-linear.md-THEME_NAME-theme.md-warn .md-container {  background-color: '{{warn-100}}'; }md-progress-linear.md-THEME_NAME-theme.md-warn .md-bar {  background-color: '{{warn-color}}'; }md-progress-linear.md-THEME_NAME-theme.md-accent .md-container {  background-color: '{{accent-100}}'; }md-progress-linear.md-THEME_NAME-theme.md-accent .md-bar {  background-color: '{{accent-color}}'; }md-progress-linear.md-THEME_NAME-theme[md-mode=buffer].md-warn .md-bar1 {  background-color: '{{warn-100}}'; }md-progress-linear.md-THEME_NAME-theme[md-mode=buffer].md-warn .md-dashed:before {  background: radial-gradient(\"{{warn-100}}\" 0%, \"{{warn-100}}\" 16%, transparent 42%); }md-progress-linear.md-THEME_NAME-theme[md-mode=buffer].md-accent .md-bar1 {  background-color: '{{accent-100}}'; }md-progress-linear.md-THEME_NAME-theme[md-mode=buffer].md-accent .md-dashed:before {  background: radial-gradient(\"{{accent-100}}\" 0%, \"{{accent-100}}\" 16%, transparent 42%); }md-radio-button.md-THEME_NAME-theme .md-off {  border-color: '{{foreground-2}}'; }md-radio-button.md-THEME_NAME-theme .md-on {  background-color: '{{accent-color-0.87}}'; }md-radio-button.md-THEME_NAME-theme.md-checked .md-off {  border-color: '{{accent-color-0.87}}'; }md-radio-button.md-THEME_NAME-theme.md-checked .md-ink-ripple {  color: '{{accent-color-0.87}}'; }md-radio-button.md-THEME_NAME-theme .md-container .md-ripple {  color: '{{accent-600}}'; }md-radio-group.md-THEME_NAME-theme:not([disabled]) .md-primary .md-on, md-radio-group.md-THEME_NAME-theme:not([disabled]).md-primary .md-on,md-radio-button.md-THEME_NAME-theme:not([disabled]) .md-primary .md-on,md-radio-button.md-THEME_NAME-theme:not([disabled]).md-primary .md-on {  background-color: '{{primary-color-0.87}}'; }md-radio-group.md-THEME_NAME-theme:not([disabled]) .md-primary .md-checked .md-off, md-radio-group.md-THEME_NAME-theme:not([disabled]) .md-primary.md-checked .md-off, md-radio-group.md-THEME_NAME-theme:not([disabled]).md-primary .md-checked .md-off, md-radio-group.md-THEME_NAME-theme:not([disabled]).md-primary.md-checked .md-off,md-radio-button.md-THEME_NAME-theme:not([disabled]) .md-primary .md-checked .md-off,md-radio-button.md-THEME_NAME-theme:not([disabled]) .md-primary.md-checked .md-off,md-radio-button.md-THEME_NAME-theme:not([disabled]).md-primary .md-checked .md-off,md-radio-button.md-THEME_NAME-theme:not([disabled]).md-primary.md-checked .md-off {  border-color: '{{primary-color-0.87}}'; }md-radio-group.md-THEME_NAME-theme:not([disabled]) .md-primary .md-checked .md-ink-ripple, md-radio-group.md-THEME_NAME-theme:not([disabled]) .md-primary.md-checked .md-ink-ripple, md-radio-group.md-THEME_NAME-theme:not([disabled]).md-primary .md-checked .md-ink-ripple, md-radio-group.md-THEME_NAME-theme:not([disabled]).md-primary.md-checked .md-ink-ripple,md-radio-button.md-THEME_NAME-theme:not([disabled]) .md-primary .md-checked .md-ink-ripple,md-radio-button.md-THEME_NAME-theme:not([disabled]) .md-primary.md-checked .md-ink-ripple,md-radio-button.md-THEME_NAME-theme:not([disabled]).md-primary .md-checked .md-ink-ripple,md-radio-button.md-THEME_NAME-theme:not([disabled]).md-primary.md-checked .md-ink-ripple {  color: '{{primary-color-0.87}}'; }md-radio-group.md-THEME_NAME-theme:not([disabled]) .md-primary .md-container .md-ripple, md-radio-group.md-THEME_NAME-theme:not([disabled]).md-primary .md-container .md-ripple,md-radio-button.md-THEME_NAME-theme:not([disabled]) .md-primary .md-container .md-ripple,md-radio-button.md-THEME_NAME-theme:not([disabled]).md-primary .md-container .md-ripple {  color: '{{primary-600}}'; }md-radio-group.md-THEME_NAME-theme:not([disabled]) .md-warn .md-on, md-radio-group.md-THEME_NAME-theme:not([disabled]).md-warn .md-on,md-radio-button.md-THEME_NAME-theme:not([disabled]) .md-warn .md-on,md-radio-button.md-THEME_NAME-theme:not([disabled]).md-warn .md-on {  background-color: '{{warn-color-0.87}}'; }md-radio-group.md-THEME_NAME-theme:not([disabled]) .md-warn .md-checked .md-off, md-radio-group.md-THEME_NAME-theme:not([disabled]) .md-warn.md-checked .md-off, md-radio-group.md-THEME_NAME-theme:not([disabled]).md-warn .md-checked .md-off, md-radio-group.md-THEME_NAME-theme:not([disabled]).md-warn.md-checked .md-off,md-radio-button.md-THEME_NAME-theme:not([disabled]) .md-warn .md-checked .md-off,md-radio-button.md-THEME_NAME-theme:not([disabled]) .md-warn.md-checked .md-off,md-radio-button.md-THEME_NAME-theme:not([disabled]).md-warn .md-checked .md-off,md-radio-button.md-THEME_NAME-theme:not([disabled]).md-warn.md-checked .md-off {  border-color: '{{warn-color-0.87}}'; }md-radio-group.md-THEME_NAME-theme:not([disabled]) .md-warn .md-checked .md-ink-ripple, md-radio-group.md-THEME_NAME-theme:not([disabled]) .md-warn.md-checked .md-ink-ripple, md-radio-group.md-THEME_NAME-theme:not([disabled]).md-warn .md-checked .md-ink-ripple, md-radio-group.md-THEME_NAME-theme:not([disabled]).md-warn.md-checked .md-ink-ripple,md-radio-button.md-THEME_NAME-theme:not([disabled]) .md-warn .md-checked .md-ink-ripple,md-radio-button.md-THEME_NAME-theme:not([disabled]) .md-warn.md-checked .md-ink-ripple,md-radio-button.md-THEME_NAME-theme:not([disabled]).md-warn .md-checked .md-ink-ripple,md-radio-button.md-THEME_NAME-theme:not([disabled]).md-warn.md-checked .md-ink-ripple {  color: '{{warn-color-0.87}}'; }md-radio-group.md-THEME_NAME-theme:not([disabled]) .md-warn .md-container .md-ripple, md-radio-group.md-THEME_NAME-theme:not([disabled]).md-warn .md-container .md-ripple,md-radio-button.md-THEME_NAME-theme:not([disabled]) .md-warn .md-container .md-ripple,md-radio-button.md-THEME_NAME-theme:not([disabled]).md-warn .md-container .md-ripple {  color: '{{warn-600}}'; }md-radio-group.md-THEME_NAME-theme[disabled],md-radio-button.md-THEME_NAME-theme[disabled] {  color: '{{foreground-3}}'; }  md-radio-group.md-THEME_NAME-theme[disabled] .md-container .md-off,  md-radio-button.md-THEME_NAME-theme[disabled] .md-container .md-off {    border-color: '{{foreground-3}}'; }  md-radio-group.md-THEME_NAME-theme[disabled] .md-container .md-on,  md-radio-button.md-THEME_NAME-theme[disabled] .md-container .md-on {    border-color: '{{foreground-3}}'; }md-radio-group.md-THEME_NAME-theme .md-checked .md-ink-ripple {  color: '{{accent-color-0.26}}'; }md-radio-group.md-THEME_NAME-theme.md-primary .md-checked:not([disabled]) .md-ink-ripple, md-radio-group.md-THEME_NAME-theme .md-checked:not([disabled]).md-primary .md-ink-ripple {  color: '{{primary-color-0.26}}'; }md-radio-group.md-THEME_NAME-theme .md-checked.md-primary .md-ink-ripple {  color: '{{warn-color-0.26}}'; }md-radio-group.md-THEME_NAME-theme.md-focused:not(:empty) .md-checked .md-container:before {  background-color: '{{accent-color-0.26}}'; }md-radio-group.md-THEME_NAME-theme.md-focused:not(:empty).md-primary .md-checked .md-container:before,md-radio-group.md-THEME_NAME-theme.md-focused:not(:empty) .md-checked.md-primary .md-container:before {  background-color: '{{primary-color-0.26}}'; }md-radio-group.md-THEME_NAME-theme.md-focused:not(:empty).md-warn .md-checked .md-container:before,md-radio-group.md-THEME_NAME-theme.md-focused:not(:empty) .md-checked.md-warn .md-container:before {  background-color: '{{warn-color-0.26}}'; }md-select.md-THEME_NAME-theme[disabled] .md-select-value {  border-bottom-color: transparent;  background-image: linear-gradient(to right, \"{{foreground-3}}\" 0%, \"{{foreground-3}}\" 33%, transparent 0%);  background-image: -ms-linear-gradient(left, transparent 0%, \"{{foreground-3}}\" 100%); }md-select.md-THEME_NAME-theme .md-select-value {  border-bottom-color: '{{foreground-4}}'; }  md-select.md-THEME_NAME-theme .md-select-value.md-select-placeholder {    color: '{{foreground-3}}'; }md-select.md-THEME_NAME-theme.ng-invalid.ng-dirty .md-select-value {  color: '{{warn-A700}}' !important;  border-bottom-color: '{{warn-A700}}' !important; }md-select.md-THEME_NAME-theme:not([disabled]):focus .md-select-value {  border-bottom-color: '{{primary-color}}';  color: '{{ foreground-1 }}'; }  md-select.md-THEME_NAME-theme:not([disabled]):focus .md-select-value.md-select-placeholder {    color: '{{ foreground-1 }}'; }md-select.md-THEME_NAME-theme:not([disabled]):focus.md-accent .md-select-value {  border-bottom-color: '{{accent-color}}'; }md-select.md-THEME_NAME-theme:not([disabled]):focus.md-warn .md-select-value {  border-bottom-color: '{{warn-color}}'; }md-select.md-THEME_NAME-theme[disabled] .md-select-value {  color: '{{foreground-3}}'; }  md-select.md-THEME_NAME-theme[disabled] .md-select-value.md-select-placeholder {    color: '{{foreground-3}}'; }md-select-menu.md-THEME_NAME-theme md-option[disabled] {  color: '{{foreground-3}}'; }md-select-menu.md-THEME_NAME-theme md-optgroup {  color: '{{foreground-2}}'; }  md-select-menu.md-THEME_NAME-theme md-optgroup md-option {    color: '{{foreground-1}}'; }md-select-menu.md-THEME_NAME-theme md-option[selected] {  color: '{{primary-500}}'; }  md-select-menu.md-THEME_NAME-theme md-option[selected]:focus {    color: '{{primary-600}}'; }  md-select-menu.md-THEME_NAME-theme md-option[selected].md-accent {    color: '{{accent-500}}'; }    md-select-menu.md-THEME_NAME-theme md-option[selected].md-accent:focus {      color: '{{accent-600}}'; }md-select-menu.md-THEME_NAME-theme md-option:focus:not([disabled]):not([selected]) {  background: '{{background-200}}'; }md-sidenav.md-THEME_NAME-theme {  background-color: '{{background-color}}'; }md-slider.md-THEME_NAME-theme .md-track {  background-color: '{{foreground-3}}'; }md-slider.md-THEME_NAME-theme .md-track-ticks {  background-color: '{{foreground-4}}'; }md-slider.md-THEME_NAME-theme .md-focus-thumb {  background-color: '{{foreground-2}}'; }md-slider.md-THEME_NAME-theme .md-focus-ring {  background-color: '{{accent-color}}'; }md-slider.md-THEME_NAME-theme .md-disabled-thumb {  border-color: '{{background-color}}'; }md-slider.md-THEME_NAME-theme.md-min .md-thumb:after {  background-color: '{{background-color}}'; }md-slider.md-THEME_NAME-theme .md-track.md-track-fill {  background-color: '{{accent-color}}'; }md-slider.md-THEME_NAME-theme .md-thumb:after {  border-color: '{{accent-color}}';  background-color: '{{accent-color}}'; }md-slider.md-THEME_NAME-theme .md-sign {  background-color: '{{accent-color}}'; }  md-slider.md-THEME_NAME-theme .md-sign:after {    border-top-color: '{{accent-color}}'; }md-slider.md-THEME_NAME-theme .md-thumb-text {  color: '{{accent-contrast}}'; }md-slider.md-THEME_NAME-theme.md-warn .md-focus-ring {  background-color: '{{warn-color}}'; }md-slider.md-THEME_NAME-theme.md-warn .md-track.md-track-fill {  background-color: '{{warn-color}}'; }md-slider.md-THEME_NAME-theme.md-warn .md-thumb:after {  border-color: '{{warn-color}}';  background-color: '{{warn-color}}'; }md-slider.md-THEME_NAME-theme.md-warn .md-sign {  background-color: '{{warn-color}}'; }  md-slider.md-THEME_NAME-theme.md-warn .md-sign:after {    border-top-color: '{{warn-color}}'; }md-slider.md-THEME_NAME-theme.md-warn .md-thumb-text {  color: '{{warn-contrast}}'; }md-slider.md-THEME_NAME-theme.md-primary .md-focus-ring {  background-color: '{{primary-color}}'; }md-slider.md-THEME_NAME-theme.md-primary .md-track.md-track-fill {  background-color: '{{primary-color}}'; }md-slider.md-THEME_NAME-theme.md-primary .md-thumb:after {  border-color: '{{primary-color}}';  background-color: '{{primary-color}}'; }md-slider.md-THEME_NAME-theme.md-primary .md-sign {  background-color: '{{primary-color}}'; }  md-slider.md-THEME_NAME-theme.md-primary .md-sign:after {    border-top-color: '{{primary-color}}'; }md-slider.md-THEME_NAME-theme.md-primary .md-thumb-text {  color: '{{primary-contrast}}'; }md-slider.md-THEME_NAME-theme[disabled] .md-thumb:after {  border-color: '{{foreground-3}}'; }md-slider.md-THEME_NAME-theme[disabled]:not(.md-min) .md-thumb:after {  background-color: '{{foreground-3}}'; }.md-subheader.md-THEME_NAME-theme {  color: '{{ foreground-2-0.23 }}';  background-color: '{{background-color}}'; }  .md-subheader.md-THEME_NAME-theme.md-primary {    color: '{{primary-color}}'; }  .md-subheader.md-THEME_NAME-theme.md-accent {    color: '{{accent-color}}'; }  .md-subheader.md-THEME_NAME-theme.md-warn {    color: '{{warn-color}}'; }md-switch.md-THEME_NAME-theme .md-ink-ripple {  color: '{{background-500}}'; }md-switch.md-THEME_NAME-theme .md-thumb {  background-color: '{{background-50}}'; }md-switch.md-THEME_NAME-theme .md-bar {  background-color: '{{background-500}}'; }md-switch.md-THEME_NAME-theme.md-checked .md-ink-ripple {  color: '{{accent-color}}'; }md-switch.md-THEME_NAME-theme.md-checked .md-thumb {  background-color: '{{accent-color}}'; }md-switch.md-THEME_NAME-theme.md-checked .md-bar {  background-color: '{{accent-color-0.5}}'; }md-switch.md-THEME_NAME-theme.md-checked.md-focused .md-thumb:before {  background-color: '{{accent-color-0.26}}'; }md-switch.md-THEME_NAME-theme.md-checked.md-primary .md-ink-ripple {  color: '{{primary-color}}'; }md-switch.md-THEME_NAME-theme.md-checked.md-primary .md-thumb {  background-color: '{{primary-color}}'; }md-switch.md-THEME_NAME-theme.md-checked.md-primary .md-bar {  background-color: '{{primary-color-0.5}}'; }md-switch.md-THEME_NAME-theme.md-checked.md-primary.md-focused .md-thumb:before {  background-color: '{{primary-color-0.26}}'; }md-switch.md-THEME_NAME-theme.md-checked.md-warn .md-ink-ripple {  color: '{{warn-color}}'; }md-switch.md-THEME_NAME-theme.md-checked.md-warn .md-thumb {  background-color: '{{warn-color}}'; }md-switch.md-THEME_NAME-theme.md-checked.md-warn .md-bar {  background-color: '{{warn-color-0.5}}'; }md-switch.md-THEME_NAME-theme.md-checked.md-warn.md-focused .md-thumb:before {  background-color: '{{warn-color-0.26}}'; }md-switch.md-THEME_NAME-theme[disabled] .md-thumb {  background-color: '{{background-400}}'; }md-switch.md-THEME_NAME-theme[disabled] .md-bar {  background-color: '{{foreground-4}}'; }md-toast.md-THEME_NAME-theme .md-toast-content {  background-color: #323232;  color: '{{background-50}}'; }  md-toast.md-THEME_NAME-theme .md-toast-content .md-button {    color: '{{background-50}}'; }    md-toast.md-THEME_NAME-theme .md-toast-content .md-button.md-highlight {      color: '{{primary-A200}}'; }      md-toast.md-THEME_NAME-theme .md-toast-content .md-button.md-highlight.md-accent {        color: '{{accent-A200}}'; }      md-toast.md-THEME_NAME-theme .md-toast-content .md-button.md-highlight.md-warn {        color: '{{warn-A200}}'; }md-tabs.md-THEME_NAME-theme md-tabs-wrapper {  background-color: transparent;  border-color: '{{foreground-4}}'; }md-tabs.md-THEME_NAME-theme .md-paginator md-icon {  color: '{{primary-color}}'; }md-tabs.md-THEME_NAME-theme md-ink-bar {  color: '{{accent-color}}';  background: '{{accent-color}}'; }md-tabs.md-THEME_NAME-theme .md-tab {  color: '{{foreground-2}}'; }  md-tabs.md-THEME_NAME-theme .md-tab[disabled], md-tabs.md-THEME_NAME-theme .md-tab[disabled] md-icon {    color: '{{foreground-3}}'; }  md-tabs.md-THEME_NAME-theme .md-tab.md-active, md-tabs.md-THEME_NAME-theme .md-tab.md-active md-icon, md-tabs.md-THEME_NAME-theme .md-tab.md-focused, md-tabs.md-THEME_NAME-theme .md-tab.md-focused md-icon {    color: '{{primary-color}}'; }  md-tabs.md-THEME_NAME-theme .md-tab.md-focused {    background: '{{primary-color-0.1}}'; }  md-tabs.md-THEME_NAME-theme .md-tab .md-ripple-container {    color: '{{accent-100}}'; }md-tabs.md-THEME_NAME-theme.md-accent > md-tabs-wrapper {  background-color: '{{accent-color}}'; }  md-tabs.md-THEME_NAME-theme.md-accent > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]) {    color: '{{accent-100}}'; }    md-tabs.md-THEME_NAME-theme.md-accent > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-active, md-tabs.md-THEME_NAME-theme.md-accent > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-active md-icon, md-tabs.md-THEME_NAME-theme.md-accent > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-focused, md-tabs.md-THEME_NAME-theme.md-accent > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-focused md-icon {      color: '{{accent-contrast}}'; }    md-tabs.md-THEME_NAME-theme.md-accent > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-focused {      background: '{{accent-contrast-0.1}}'; }  md-tabs.md-THEME_NAME-theme.md-accent > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-ink-bar {    color: '{{primary-600-1}}';    background: '{{primary-600-1}}'; }md-tabs.md-THEME_NAME-theme.md-primary > md-tabs-wrapper {  background-color: '{{primary-color}}'; }  md-tabs.md-THEME_NAME-theme.md-primary > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]) {    color: '{{primary-100}}'; }    md-tabs.md-THEME_NAME-theme.md-primary > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-active, md-tabs.md-THEME_NAME-theme.md-primary > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-active md-icon, md-tabs.md-THEME_NAME-theme.md-primary > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-focused, md-tabs.md-THEME_NAME-theme.md-primary > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-focused md-icon {      color: '{{primary-contrast}}'; }    md-tabs.md-THEME_NAME-theme.md-primary > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-focused {      background: '{{primary-contrast-0.1}}'; }md-tabs.md-THEME_NAME-theme.md-warn > md-tabs-wrapper {  background-color: '{{warn-color}}'; }  md-tabs.md-THEME_NAME-theme.md-warn > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]) {    color: '{{warn-100}}'; }    md-tabs.md-THEME_NAME-theme.md-warn > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-active, md-tabs.md-THEME_NAME-theme.md-warn > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-active md-icon, md-tabs.md-THEME_NAME-theme.md-warn > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-focused, md-tabs.md-THEME_NAME-theme.md-warn > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-focused md-icon {      color: '{{warn-contrast}}'; }    md-tabs.md-THEME_NAME-theme.md-warn > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-focused {      background: '{{warn-contrast-0.1}}'; }md-toolbar > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper {  background-color: '{{primary-color}}'; }  md-toolbar > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]) {    color: '{{primary-100}}'; }    md-toolbar > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-active, md-toolbar > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-active md-icon, md-toolbar > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-focused, md-toolbar > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-focused md-icon {      color: '{{primary-contrast}}'; }    md-toolbar > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-focused {      background: '{{primary-contrast-0.1}}'; }md-toolbar.md-accent > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper {  background-color: '{{accent-color}}'; }  md-toolbar.md-accent > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]) {    color: '{{accent-100}}'; }    md-toolbar.md-accent > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-active, md-toolbar.md-accent > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-active md-icon, md-toolbar.md-accent > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-focused, md-toolbar.md-accent > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-focused md-icon {      color: '{{accent-contrast}}'; }    md-toolbar.md-accent > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-focused {      background: '{{accent-contrast-0.1}}'; }  md-toolbar.md-accent > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-ink-bar {    color: '{{primary-600-1}}';    background: '{{primary-600-1}}'; }md-toolbar.md-warn > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper {  background-color: '{{warn-color}}'; }  md-toolbar.md-warn > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]) {    color: '{{warn-100}}'; }    md-toolbar.md-warn > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-active, md-toolbar.md-warn > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-active md-icon, md-toolbar.md-warn > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-focused, md-toolbar.md-warn > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-focused md-icon {      color: '{{warn-contrast}}'; }    md-toolbar.md-warn > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-focused {      background: '{{warn-contrast-0.1}}'; }md-toolbar.md-THEME_NAME-theme:not(.md-menu-toolbar) {  background-color: '{{primary-color}}';  color: '{{primary-contrast}}'; }  md-toolbar.md-THEME_NAME-theme:not(.md-menu-toolbar) md-icon {    color: '{{primary-contrast}}'; }  md-toolbar.md-THEME_NAME-theme:not(.md-menu-toolbar) .md-button:not(.md-raised) {    color: '{{primary-contrast}}'; }  md-toolbar.md-THEME_NAME-theme:not(.md-menu-toolbar).md-accent {    background-color: '{{accent-color}}';    color: '{{accent-contrast}}'; }  md-toolbar.md-THEME_NAME-theme:not(.md-menu-toolbar).md-warn {    background-color: '{{warn-color}}';    color: '{{warn-contrast}}'; }md-tooltip.md-THEME_NAME-theme {  color: '{{background-A100}}'; }  md-tooltip.md-THEME_NAME-theme .md-content {    background-color: '{{foreground-2}}'; }"); 
})();                                                                                                                  // 24546
                                                                                                                       // 24547
                                                                                                                       // 24548
})(window, window.angular);;window.ngMaterial={version:{full: "1.0.6"}};                                               // 24549
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);


/* Exports */
if (typeof Package === 'undefined') Package = {};
Package['angular:angular-material'] = {};

})();
