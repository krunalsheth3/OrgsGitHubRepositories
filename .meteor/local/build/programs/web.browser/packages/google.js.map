{"version":3,"sources":["meteor://ðŸ’»app/packages/google/template.google_configure.js","meteor://ðŸ’»app/packages/google/google_configure.js","meteor://ðŸ’»app/packages/google/google_client.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kG;;;;;;;;;;;;;;;;;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kG;;;;;;;;;;;;;;;;;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kG","file":"/packages/google.js","sourcesContent":["\nTemplate.__checkName(\"configureLoginServiceDialogForGoogle\");\nTemplate[\"configureLoginServiceDialogForGoogle\"] = new Template(\"Template.configureLoginServiceDialogForGoogle\", (function() {\n  var view = this;\n  return [ HTML.Raw(\"<p>\\n    First, you'll need to get a Google Client ID. Follow these steps:\\n  </p>\\n  \"), HTML.OL(\"\\n    \", HTML.Raw('<li>\\n      Visit <a href=\"https://console.developers.google.com/\" target=\"blank\">https://console.developers.google.com/</a>\\n    </li>'), \"\\n    \", HTML.Raw('<li>\\n      \"Create Project\", if needed. Wait for Google to finish provisioning.\\n    </li>'), \"\\n    \", HTML.Raw('<li>\\n      On the left sidebar, go to \"APIs &amp; auth\" and, underneath, \"Consent Screen\". Make sure to enter an email address and a product name, and save.\\n    </li>'), \"\\n    \", HTML.Raw('<li>\\n      On the left sidebar, go to \"APIs &amp; auth\" and then, \"Credentials\". \"Create New Client ID\", then select \"Web application\" as the type.\\n    </li>'), \"\\n    \", HTML.LI(\"\\n     Set Authorized Javascript Origins to: \", HTML.SPAN({\n    \"class\": \"url\"\n  }, Blaze.View(\"lookup:siteUrl\", function() {\n    return Spacebars.mustache(view.lookup(\"siteUrl\"));\n  })), \"\\n    \"), \"\\n    \", HTML.LI(\"\\n      Set Authorized Redirect URI to: \", HTML.SPAN({\n    \"class\": \"url\"\n  }, Blaze.View(\"lookup:siteUrl\", function() {\n    return Spacebars.mustache(view.lookup(\"siteUrl\"));\n  }), \"_oauth/google\"), \"\\n    \"), \"\\n    \", HTML.Raw('<li>\\n      Finish by clicking \"Create Client ID\".\\n    </li>'), \"\\n  \") ];\n}));\n","Template.configureLoginServiceDialogForGoogle.helpers({\n  siteUrl: function () {\n    return Meteor.absoluteUrl();\n  }\n});\n\nTemplate.configureLoginServiceDialogForGoogle.fields = function () {\n  return [\n    {property: 'clientId', label: 'Client ID'},\n    {property: 'secret', label: 'Client secret'}\n  ];\n};\n","Google = {};\n\n// Request Google credentials for the user\n// @param options {optional}\n// @param credentialRequestCompleteCallback {Function} Callback function to call on\n//   completion. Takes one argument, credentialToken on success, or Error on\n//   error.\nGoogle.requestCredential = function (options, credentialRequestCompleteCallback) {\n  // support both (options, callback) and (callback).\n  if (!credentialRequestCompleteCallback && typeof options === 'function') {\n    credentialRequestCompleteCallback = options;\n    options = {};\n  } else if (!options) {\n    options = {};\n  }\n\n  var config = ServiceConfiguration.configurations.findOne({service: 'google'});\n  if (!config) {\n    credentialRequestCompleteCallback && credentialRequestCompleteCallback(\n      new ServiceConfiguration.ConfigError());\n    return;\n  }\n\n  var credentialToken = Random.secret();\n\n  // always need this to get user id from google.\n  var requiredScope = ['profile'];\n  var scope = ['email'];\n  if (options.requestPermissions)\n    scope = options.requestPermissions;\n  scope = _.union(scope, requiredScope);\n\n  var loginUrlParameters = {};\n  if (config.loginUrlParameters){\n    _.extend(loginUrlParameters, config.loginUrlParameters)\n  }\n  if (options.loginUrlParameters){\n    _.extend(loginUrlParameters, options.loginUrlParameters)\n  }\n  var ILLEGAL_PARAMETERS = ['response_type', 'client_id', 'scope', 'redirect_uri', 'state'];\n    // validate options keys\n  _.each(_.keys(loginUrlParameters), function (key) {\n    if (_.contains(ILLEGAL_PARAMETERS, key))\n      throw new Error(\"Google.requestCredential: Invalid loginUrlParameter: \" + key);\n  });\n\n  // backwards compatible options\n  if (options.requestOfflineToken != null){\n    loginUrlParameters.access_type = options.requestOfflineToken ? 'offline' : 'online'\n  }\n  if (options.prompt != null) {\n    loginUrlParameters.prompt = options.prompt;\n  } else if (options.forceApprovalPrompt) {\n    loginUrlParameters.prompt = 'consent'\n  }\n\n  if (options.loginHint) {\n    loginUrlParameters.login_hint = options.loginHint;\n  }\n\n  var loginStyle = OAuth._loginStyle('google', config, options);\n  // https://developers.google.com/accounts/docs/OAuth2WebServer#formingtheurl\n  _.extend(loginUrlParameters, {\n    \"response_type\": \"code\",\n    \"client_id\":  config.clientId,\n    \"scope\": scope.join(' '), // space delimited\n    \"redirect_uri\": OAuth._redirectUri('google', config),\n    \"state\": OAuth._stateParam(loginStyle, credentialToken, options.redirectUrl)\n  });\n  var loginUrl = 'https://accounts.google.com/o/oauth2/auth?' +\n    _.map(loginUrlParameters, function(value, param){\n      return encodeURIComponent(param) + '=' + encodeURIComponent(value);\n    }).join(\"&\");\n\n  OAuth.launchLogin({\n    loginService: \"google\",\n    loginStyle: loginStyle,\n    loginUrl: loginUrl,\n    credentialRequestCompleteCallback: credentialRequestCompleteCallback,\n    credentialToken: credentialToken,\n    popupOptions: { height: 600 }\n  });\n};\n"]}