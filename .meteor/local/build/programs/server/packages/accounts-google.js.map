{"version":3,"sources":["meteor://ðŸ’»app/packages/accounts-google/google.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4G","file":"/packages/accounts-google.js","sourcesContent":["Accounts.oauth.registerService('google');\n\nif (Meteor.isClient) {\n  Meteor.loginWithGoogle = function(options, callback) {\n    // support a callback without options\n    if (! callback && typeof options === \"function\") {\n      callback = options;\n      options = null;\n    }\n\n    // Use Google's domain-specific login page if we want to restrict creation to\n    // a particular email domain. (Don't use it if restrictCreationByEmailDomain\n    // is a function.) Note that all this does is change Google's UI ---\n    // accounts-base/accounts_server.js still checks server-side that the server\n    // has the proper email address after the OAuth conversation.\n    if (typeof Accounts._options.restrictCreationByEmailDomain === 'string') {\n      options = _.extend({}, options || {});\n      options.loginUrlParameters = _.extend({}, options.loginUrlParameters || {});\n      options.loginUrlParameters.hd = Accounts._options.restrictCreationByEmailDomain;\n    }\n    var credentialRequestCompleteCallback = Accounts.oauth.credentialRequestCompleteHandler(callback);\n    Google.requestCredential(options, credentialRequestCompleteCallback);\n  };\n} else {\n  Accounts.addAutopublishFields({\n    forLoggedInUser: _.map(\n      // publish access token since it can be used from the client (if\n      // transmitted over ssl or on\n      // localhost). https://developers.google.com/accounts/docs/OAuth2UserAgent\n      // refresh token probably shouldn't be sent down.\n      Google.whitelistedFields.concat(['accessToken', 'expiresAt']), // don't publish refresh token\n      function (subfield) { return 'services.google.' + subfield; }),\n\n    forOtherUsers: _.map(\n      // even with autopublish, no legitimate web app should be\n      // publishing all users' emails\n      _.without(Google.whitelistedFields, 'email', 'verified_email'),\n      function (subfield) { return 'services.google.' + subfield; })\n  });\n}\n"]}