[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\n\n/* Package-scope variables */\nvar Counts, publishCount;\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                 //\n// packages/tmeasday_publish-counts/server/publish-counts.js                                                       //\n//                                                                                                                 //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                   //\nvar noWarnings = false;                                                                                            // 1\n                                                                                                                   // 2\nCounts = {};                                                                                                       // 3\nCounts.publish = function(self, name, cursor, options) {                                                           // 4\n  var initializing = true;                                                                                         // 5\n  var handle;                                                                                                      // 6\n  options = options || {};                                                                                         // 7\n                                                                                                                   // 8\n  var extraField, countFn;                                                                                         // 9\n                                                                                                                   // 10\n  if (options.countFromField) {                                                                                    // 11\n    extraField = options.countFromField;                                                                           // 12\n    if ('function' === typeof extraField) {                                                                        // 13\n      countFn = Counts._safeAccessorFunction(extraField);                                                          // 14\n    } else {                                                                                                       // 15\n      countFn = function(doc) {                                                                                    // 16\n        return doc[extraField] || 0;    // return 0 instead of undefined.                                          // 17\n      }                                                                                                            // 18\n    }                                                                                                              // 19\n  } else if (options.countFromFieldLength) {                                                                       // 20\n    extraField = options.countFromFieldLength;                                                                     // 21\n    if ('function' === typeof extraField) {                                                                        // 22\n      countFn = Counts._safeAccessorFunction(function (doc) {                                                      // 23\n        return extraField(doc).length;                                                                             // 24\n      });                                                                                                          // 25\n    } else {                                                                                                       // 26\n      countFn = function(doc) {                                                                                    // 27\n        if (doc[extraField]) {                                                                                     // 28\n          return doc[extraField].length;                                                                           // 29\n        } else {                                                                                                   // 30\n          return 0;                                                                                                // 31\n        }                                                                                                          // 32\n      }                                                                                                            // 33\n    }                                                                                                              // 34\n  }                                                                                                                // 35\n                                                                                                                   // 36\n                                                                                                                   // 37\n  if (countFn && options.nonReactive)                                                                              // 38\n    throw new Error(\"options.nonReactive is not yet supported with options.countFromFieldLength or options.countFromFieldSum\");\n                                                                                                                   // 40\n  if (cursor && cursor._cursorDescription) {                                                                       // 41\n    cursor._cursorDescription.options.fields =                                                                     // 42\n      Counts._optimizeQueryFields(cursor._cursorDescription.options.fields, extraField, options.noWarnings);       // 43\n  }                                                                                                                // 44\n                                                                                                                   // 45\n  var count = 0;                                                                                                   // 46\n  var observers = {                                                                                                // 47\n    added: function(doc) {                                                                                         // 48\n      if (countFn) {                                                                                               // 49\n        count += countFn(doc);                                                                                     // 50\n      } else {                                                                                                     // 51\n        count += 1;                                                                                                // 52\n      }                                                                                                            // 53\n                                                                                                                   // 54\n      if (!initializing)                                                                                           // 55\n        self.changed('counts', name, {count: count});                                                              // 56\n    },                                                                                                             // 57\n    removed: function(doc) {                                                                                       // 58\n      if (countFn) {                                                                                               // 59\n        count -= countFn(doc);                                                                                     // 60\n      } else {                                                                                                     // 61\n        count -= 1;                                                                                                // 62\n      }                                                                                                            // 63\n      self.changed('counts', name, {count: count});                                                                // 64\n    }                                                                                                              // 65\n  };                                                                                                               // 66\n                                                                                                                   // 67\n  if (countFn) {                                                                                                   // 68\n    observers.changed = function(newDoc, oldDoc) {                                                                 // 69\n      if (countFn) {                                                                                               // 70\n        count += countFn(newDoc) - countFn(oldDoc);                                                                // 71\n      }                                                                                                            // 72\n                                                                                                                   // 73\n      self.changed('counts', name, {count: count});                                                                // 74\n    };                                                                                                             // 75\n  }                                                                                                                // 76\n                                                                                                                   // 77\n  if (!countFn) {                                                                                                  // 78\n    self.added('counts', name, {count: cursor.count()});                                                           // 79\n    if (!options.noReady)                                                                                          // 80\n      self.ready();                                                                                                // 81\n  }                                                                                                                // 82\n                                                                                                                   // 83\n  if (!options.nonReactive)                                                                                        // 84\n    handle = cursor.observe(observers);                                                                            // 85\n                                                                                                                   // 86\n  if (countFn)                                                                                                     // 87\n    self.added('counts', name, {count: count});                                                                    // 88\n                                                                                                                   // 89\n  if (!options.noReady)                                                                                            // 90\n    self.ready();                                                                                                  // 91\n                                                                                                                   // 92\n  initializing = false;                                                                                            // 93\n                                                                                                                   // 94\n  self.onStop(function() {                                                                                         // 95\n    if (handle)                                                                                                    // 96\n      handle.stop();                                                                                               // 97\n  });                                                                                                              // 98\n                                                                                                                   // 99\n  return {                                                                                                         // 100\n    stop: function() {                                                                                             // 101\n      if (handle) {                                                                                                // 102\n        handle.stop();                                                                                             // 103\n        handle = undefined;                                                                                        // 104\n      }                                                                                                            // 105\n    }                                                                                                              // 106\n  };                                                                                                               // 107\n};                                                                                                                 // 108\n// back compatibility                                                                                              // 109\npublishCount = Counts.publish;                                                                                     // 110\n                                                                                                                   // 111\nCounts.noWarnings = function (noWarn) {                                                                            // 112\n  // suppress warnings if no arguments, or first argument is truthy                                                // 113\n  noWarnings = (0 == arguments.length || !!noWarn);                                                                // 114\n}                                                                                                                  // 115\n                                                                                                                   // 116\nCounts._safeAccessorFunction = function safeAccessorFunction (fn) {                                                // 117\n  // ensure that missing fields don't corrupt the count.  If the count field                                       // 118\n  // doesn't exist, then it has a zero count.                                                                      // 119\n  return function (doc) {                                                                                          // 120\n    try {                                                                                                          // 121\n      return fn(doc) || 0;    // return 0 instead of undefined                                                     // 122\n    }                                                                                                              // 123\n    catch (err) {                                                                                                  // 124\n      if (err instanceof TypeError) {   // attempted to access property of undefined (i.e. deep access).           // 125\n        return 0;                                                                                                  // 126\n      } else {                                                                                                     // 127\n        throw err;                                                                                                 // 128\n      }                                                                                                            // 129\n    }                                                                                                              // 130\n  };                                                                                                               // 131\n}                                                                                                                  // 132\n                                                                                                                   // 133\nCounts._optimizeQueryFields = function optimizeQueryFields (fields, extraField, noWarn) {                          // 134\n  switch (typeof extraField) {                                                                                     // 135\n    case 'function':      // accessor function used.                                                               // 136\n      if (undefined === fields) {                                                                                  // 137\n        // user did not place restrictions on cursor fields.                                                       // 138\n        Counts._warn(noWarn,                                                                                       // 139\n                      'publish-counts: Collection cursor has no field limits and will fetch entire documents.  ' +\n                      'consider specifying only required fields.');                                                // 141\n        // if cursor field limits are empty to begin with, leave them empty.  it is the                            // 142\n        // user's responsibility to specify field limits when using accessor functions.                            // 143\n      }                                                                                                            // 144\n      // else user specified restrictions on cursor fields.  Meteor will ensure _id is one of them.                // 145\n      // WARNING: unable to verify user included appropriate field for accessor function to work.  we can't hold their hand ;_;\n                                                                                                                   // 147\n      return fields;                                                                                               // 148\n                                                                                                                   // 149\n    case 'string':        // countFromField or countFromFieldLength has property name.                             // 150\n      // extra field is a property                                                                                 // 151\n                                                                                                                   // 152\n      // automatically set limits if none specified.  keep existing limits since user                              // 153\n      // may use a cursor transform and specify a dynamic field to count, but require other                        // 154\n      // fields in the transform process  (e.g. https://github.com/percolatestudio/publish-counts/issues/47).      // 155\n      fields = fields || {};                                                                                       // 156\n      // _id and extraField are required                                                                           // 157\n      fields._id = true;                                                                                           // 158\n      fields[extraField] = true;                                                                                   // 159\n                                                                                                                   // 160\n      if (2 < _.keys(fields).length)                                                                               // 161\n        Counts._warn(noWarn,                                                                                       // 162\n                      'publish-counts: unused fields detected in cursor fields option',                            // 163\n                      _.omit(fields, ['_id', extraField]));                                                        // 164\n                                                                                                                   // 165\n      // use modified field limits.  automatically defaults to _id and extraField if none specified by user.       // 166\n      return fields;                                                                                               // 167\n                                                                                                                   // 168\n    case 'undefined':     // basic count                                                                           // 169\n      if (fields && 0 < _.keys(_.omit(fields, ['_id'])).length)                                                    // 170\n        Counts._warn(noWarn,                                                                                       // 171\n                      'publish-counts: unused fields removed from cursor fields option.',                          // 172\n                      _.omit(fields, ['_id']));                                                                    // 173\n                                                                                                                   // 174\n      // dispose of user field limits, only _id is required                                                        // 175\n      fields = { _id:  true };                                                                                     // 176\n                                                                                                                   // 177\n      // use modified field limits.  automatically defaults to _id if none specified by user.                      // 178\n      return fields;                                                                                               // 179\n                                                                                                                   // 180\n    default:                                                                                                       // 181\n      throw new Error(\"unknown invocation of Count.publish() detected.\");                                          // 182\n  }                                                                                                                // 183\n}                                                                                                                  // 184\n                                                                                                                   // 185\nCounts._warn = function warn (noWarn) {                                                                            // 186\n  if (noWarnings || noWarn || 'production' == process.env.NODE_ENV)                                                // 187\n    return;                                                                                                        // 188\n                                                                                                                   // 189\n  var args = Array.prototype.slice.call(arguments, 1);                                                             // 190\n  console.warn.apply(console, args);                                                                               // 191\n}                                                                                                                  // 192\n                                                                                                                   // 193\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\nPackage['tmeasday:publish-counts'] = {\n  Counts: Counts,\n  publishCount: publishCount\n};\n\n})();\n","servePath":"/packages/tmeasday_publish-counts.js","sourceMap":{"version":3,"sources":["/packages/tmeasday_publish-counts/server/publish-counts.js"],"names":[],"mappingsyH","file":"/packages/tmeasday_publish-counts.js","sourcesContent":["var noWarnings = false;\n\nCounts = {};\nCounts.publish = function(self, name, cursor, options) {\n  var initializing = true;\n  var handle;\n  options = options || {};\n\n  var extraField, countFn;\n\n  if (options.countFromField) {\n    extraField = options.countFromField;\n    if ('function' === typeof extraField) {\n      countFn = Counts._safeAccessorFunction(extraField);\n    } else {\n      countFn = function(doc) {\n        return doc[extraField] || 0;    // return 0 instead of undefined.\n      }\n    }\n  } else if (options.countFromFieldLength) {\n    extraField = options.countFromFieldLength;\n    if ('function' === typeof extraField) {\n      countFn = Counts._safeAccessorFunction(function (doc) {\n        return extraField(doc).length;\n      });\n    } else {\n      countFn = function(doc) {\n        if (doc[extraField]) {\n          return doc[extraField].length;\n        } else {\n          return 0;\n        }\n      }\n    }\n  }\n\n\n  if (countFn && options.nonReactive)\n    throw new Error(\"options.nonReactive is not yet supported with options.countFromFieldLength or options.countFromFieldSum\");\n\n  if (cursor && cursor._cursorDescription) {\n    cursor._cursorDescription.options.fields =\n      Counts._optimizeQueryFields(cursor._cursorDescription.options.fields, extraField, options.noWarnings);\n  }\n\n  var count = 0;\n  var observers = {\n    added: function(doc) {\n      if (countFn) {\n        count += countFn(doc);\n      } else {\n        count += 1;\n      }\n\n      if (!initializing)\n        self.changed('counts', name, {count: count});\n    },\n    removed: function(doc) {\n      if (countFn) {\n        count -= countFn(doc);\n      } else {\n        count -= 1;\n      }\n      self.changed('counts', name, {count: count});\n    }\n  };\n\n  if (countFn) {\n    observers.changed = function(newDoc, oldDoc) {\n      if (countFn) {\n        count += countFn(newDoc) - countFn(oldDoc);\n      }\n\n      self.changed('counts', name, {count: count});\n    };\n  }\n\n  if (!countFn) {\n    self.added('counts', name, {count: cursor.count()});\n    if (!options.noReady)\n      self.ready();\n  }\n\n  if (!options.nonReactive)\n    handle = cursor.observe(observers);\n\n  if (countFn)\n    self.added('counts', name, {count: count});\n\n  if (!options.noReady)\n    self.ready();\n\n  initializing = false;\n\n  self.onStop(function() {\n    if (handle)\n      handle.stop();\n  });\n\n  return {\n    stop: function() {\n      if (handle) {\n        handle.stop();\n        handle = undefined;\n      }\n    }\n  };\n};\n// back compatibility\npublishCount = Counts.publish;\n\nCounts.noWarnings = function (noWarn) {\n  // suppress warnings if no arguments, or first argument is truthy\n  noWarnings = (0 == arguments.length || !!noWarn);\n}\n\nCounts._safeAccessorFunction = function safeAccessorFunction (fn) {\n  // ensure that missing fields don't corrupt the count.  If the count field\n  // doesn't exist, then it has a zero count.\n  return function (doc) {\n    try {\n      return fn(doc) || 0;    // return 0 instead of undefined\n    }\n    catch (err) {\n      if (err instanceof TypeError) {   // attempted to access property of undefined (i.e. deep access).\n        return 0;\n      } else {\n        throw err;\n      }\n    }\n  };\n}\n\nCounts._optimizeQueryFields = function optimizeQueryFields (fields, extraField, noWarn) {\n  switch (typeof extraField) {\n    case 'function':      // accessor function used.\n      if (undefined === fields) {\n        // user did not place restrictions on cursor fields.\n        Counts._warn(noWarn,\n                      'publish-counts: Collection cursor has no field limits and will fetch entire documents.  ' +\n                      'consider specifying only required fields.');\n        // if cursor field limits are empty to begin with, leave them empty.  it is the\n        // user's responsibility to specify field limits when using accessor functions.\n      }\n      // else user specified restrictions on cursor fields.  Meteor will ensure _id is one of them.\n      // WARNING: unable to verify user included appropriate field for accessor function to work.  we can't hold their hand ;_;\n\n      return fields;\n\n    case 'string':        // countFromField or countFromFieldLength has property name.\n      // extra field is a property\n\n      // automatically set limits if none specified.  keep existing limits since user\n      // may use a cursor transform and specify a dynamic field to count, but require other\n      // fields in the transform process  (e.g. https://github.com/percolatestudio/publish-counts/issues/47).\n      fields = fields || {};\n      // _id and extraField are required\n      fields._id = true;\n      fields[extraField] = true;\n\n      if (2 < _.keys(fields).length)\n        Counts._warn(noWarn,\n                      'publish-counts: unused fields detected in cursor fields option',\n                      _.omit(fields, ['_id', extraField]));\n\n      // use modified field limits.  automatically defaults to _id and extraField if none specified by user.\n      return fields;\n\n    case 'undefined':     // basic count\n      if (fields && 0 < _.keys(_.omit(fields, ['_id'])).length)\n        Counts._warn(noWarn,\n                      'publish-counts: unused fields removed from cursor fields option.',\n                      _.omit(fields, ['_id']));\n\n      // dispose of user field limits, only _id is required\n      fields = { _id:  true };\n\n      // use modified field limits.  automatically defaults to _id if none specified by user.\n      return fields;\n\n    default:\n      throw new Error(\"unknown invocation of Count.publish() detected.\");\n  }\n}\n\nCounts._warn = function warn (noWarn) {\n  if (noWarnings || noWarn || 'production' == process.env.NODE_ENV)\n    return;\n\n  var args = Array.prototype.slice.call(arguments, 1);\n  console.warn.apply(console, args);\n}\n"]}}]