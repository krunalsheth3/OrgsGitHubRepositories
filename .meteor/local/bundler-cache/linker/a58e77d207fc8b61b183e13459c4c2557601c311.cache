[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                         //\n// packages/angular_angular-aria/angular-aria.js                                                           //\n//                                                                                                         //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                           //\n/**                                                                                                        // 1\n * @license AngularJS v1.4.8                                                                               // 2\n * (c) 2010-2015 Google, Inc. http://angularjs.org                                                         // 3\n * License: MIT                                                                                            // 4\n */                                                                                                        // 5\n(function(window, angular, undefined) {'use strict';                                                       // 6\n                                                                                                           // 7\n/**                                                                                                        // 8\n * @ngdoc module                                                                                           // 9\n * @name ngAria                                                                                            // 10\n * @description                                                                                            // 11\n *                                                                                                         // 12\n * The `ngAria` module provides support for common                                                         // 13\n * [<abbr title=\"Accessible Rich Internet Applications\">ARIA</abbr>](http://www.w3.org/TR/wai-aria/)       // 14\n * attributes that convey state or semantic information about the application for users                    // 15\n * of assistive technologies, such as screen readers.                                                      // 16\n *                                                                                                         // 17\n * <div doc-module-components=\"ngAria\"></div>                                                              // 18\n *                                                                                                         // 19\n * ## Usage                                                                                                // 20\n *                                                                                                         // 21\n * For ngAria to do its magic, simply include the module `ngAria` as a dependency. The following           // 22\n * directives are supported:                                                                               // 23\n * `ngModel`, `ngDisabled`, `ngShow`, `ngHide`, `ngClick`, `ngDblClick`, and `ngMessages`.                 // 24\n *                                                                                                         // 25\n * Below is a more detailed breakdown of the attributes handled by ngAria:                                 // 26\n *                                                                                                         // 27\n * | Directive                                   | Supported Attributes                                                                   |\n * |---------------------------------------------|----------------------------------------------------------------------------------------|\n * | {@link ng.directive:ngDisabled ngDisabled}  | aria-disabled                                                                          |\n * | {@link ng.directive:ngShow ngShow}          | aria-hidden                                                                            |\n * | {@link ng.directive:ngHide ngHide}          | aria-hidden                                                                            |\n * | {@link ng.directive:ngDblclick ngDblclick}  | tabindex                                                                               |\n * | {@link module:ngMessages ngMessages}        | aria-live                                                                              |\n * | {@link ng.directive:ngModel ngModel}        | aria-checked, aria-valuemin, aria-valuemax, aria-valuenow, aria-invalid, aria-required, input roles |\n * | {@link ng.directive:ngClick ngClick}        | tabindex, keypress event, button role                                                               |\n *                                                                                                         // 37\n * Find out more information about each directive by reading the                                           // 38\n * {@link guide/accessibility ngAria Developer Guide}.                                                     // 39\n *                                                                                                         // 40\n * ##Example                                                                                               // 41\n * Using ngDisabled with ngAria:                                                                           // 42\n * ```html                                                                                                 // 43\n * <md-checkbox ng-disabled=\"disabled\">                                                                    // 44\n * ```                                                                                                     // 45\n * Becomes:                                                                                                // 46\n * ```html                                                                                                 // 47\n * <md-checkbox ng-disabled=\"disabled\" aria-disabled=\"true\">                                               // 48\n * ```                                                                                                     // 49\n *                                                                                                         // 50\n * ##Disabling Attributes                                                                                  // 51\n * It's possible to disable individual attributes added by ngAria with the                                 // 52\n * {@link ngAria.$ariaProvider#config config} method. For more details, see the                            // 53\n * {@link guide/accessibility Developer Guide}.                                                            // 54\n */                                                                                                        // 55\n /* global -ngAriaModule */                                                                                // 56\nvar ngAriaModule = angular.module('ngAria', ['ng']).                                                       // 57\n                        provider('$aria', $AriaProvider);                                                  // 58\n                                                                                                           // 59\n/**                                                                                                        // 60\n* Internal Utilities                                                                                       // 61\n*/                                                                                                         // 62\nvar nodeBlackList = ['BUTTON', 'A', 'INPUT', 'TEXTAREA', 'SELECT', 'DETAILS', 'SUMMARY'];                  // 63\n                                                                                                           // 64\nvar isNodeOneOf = function(elem, nodeTypeArray) {                                                          // 65\n  if (nodeTypeArray.indexOf(elem[0].nodeName) !== -1) {                                                    // 66\n    return true;                                                                                           // 67\n  }                                                                                                        // 68\n};                                                                                                         // 69\n/**                                                                                                        // 70\n * @ngdoc provider                                                                                         // 71\n * @name $ariaProvider                                                                                     // 72\n *                                                                                                         // 73\n * @description                                                                                            // 74\n *                                                                                                         // 75\n * Used for configuring the ARIA attributes injected and managed by ngAria.                                // 76\n *                                                                                                         // 77\n * ```js                                                                                                   // 78\n * angular.module('myApp', ['ngAria'], function config($ariaProvider) {                                    // 79\n *   $ariaProvider.config({                                                                                // 80\n *     ariaValue: true,                                                                                    // 81\n *     tabindex: false                                                                                     // 82\n *   });                                                                                                   // 83\n * });                                                                                                     // 84\n *```                                                                                                      // 85\n *                                                                                                         // 86\n * ## Dependencies                                                                                         // 87\n * Requires the {@link ngAria} module to be installed.                                                     // 88\n *                                                                                                         // 89\n */                                                                                                        // 90\nfunction $AriaProvider() {                                                                                 // 91\n  var config = {                                                                                           // 92\n    ariaHidden: true,                                                                                      // 93\n    ariaChecked: true,                                                                                     // 94\n    ariaDisabled: true,                                                                                    // 95\n    ariaRequired: true,                                                                                    // 96\n    ariaInvalid: true,                                                                                     // 97\n    ariaMultiline: true,                                                                                   // 98\n    ariaValue: true,                                                                                       // 99\n    tabindex: true,                                                                                        // 100\n    bindKeypress: true,                                                                                    // 101\n    bindRoleForClick: true                                                                                 // 102\n  };                                                                                                       // 103\n                                                                                                           // 104\n  /**                                                                                                      // 105\n   * @ngdoc method                                                                                         // 106\n   * @name $ariaProvider#config                                                                            // 107\n   *                                                                                                       // 108\n   * @param {object} config object to enable/disable specific ARIA attributes                              // 109\n   *                                                                                                       // 110\n   *  - **ariaHidden** – `{boolean}` – Enables/disables aria-hidden tags                                   // 111\n   *  - **ariaChecked** – `{boolean}` – Enables/disables aria-checked tags                                 // 112\n   *  - **ariaDisabled** – `{boolean}` – Enables/disables aria-disabled tags                               // 113\n   *  - **ariaRequired** – `{boolean}` – Enables/disables aria-required tags                               // 114\n   *  - **ariaInvalid** – `{boolean}` – Enables/disables aria-invalid tags                                 // 115\n   *  - **ariaMultiline** – `{boolean}` – Enables/disables aria-multiline tags                             // 116\n   *  - **ariaValue** – `{boolean}` – Enables/disables aria-valuemin, aria-valuemax and aria-valuenow tags\n   *  - **tabindex** – `{boolean}` – Enables/disables tabindex tags                                        // 118\n   *  - **bindKeypress** – `{boolean}` – Enables/disables keypress event binding on `&lt;div&gt;` and      // 119\n   *    `&lt;li&gt;` elements with ng-click                                                                // 120\n   *  - **bindRoleForClick** – `{boolean}` – Adds role=button to non-interactive elements like `div`       // 121\n   *    using ng-click, making them more accessible to users of assistive technologies                     // 122\n   *                                                                                                       // 123\n   * @description                                                                                          // 124\n   * Enables/disables various ARIA attributes                                                              // 125\n   */                                                                                                      // 126\n  this.config = function(newConfig) {                                                                      // 127\n    config = angular.extend(config, newConfig);                                                            // 128\n  };                                                                                                       // 129\n                                                                                                           // 130\n  function watchExpr(attrName, ariaAttr, nodeBlackList, negate) {                                          // 131\n    return function(scope, elem, attr) {                                                                   // 132\n      var ariaCamelName = attr.$normalize(ariaAttr);                                                       // 133\n      if (config[ariaCamelName] && !isNodeOneOf(elem, nodeBlackList) && !attr[ariaCamelName]) {            // 134\n        scope.$watch(attr[attrName], function(boolVal) {                                                   // 135\n          // ensure boolean value                                                                          // 136\n          boolVal = negate ? !boolVal : !!boolVal;                                                         // 137\n          elem.attr(ariaAttr, boolVal);                                                                    // 138\n        });                                                                                                // 139\n      }                                                                                                    // 140\n    };                                                                                                     // 141\n  }                                                                                                        // 142\n  /**                                                                                                      // 143\n   * @ngdoc service                                                                                        // 144\n   * @name $aria                                                                                           // 145\n   *                                                                                                       // 146\n   * @description                                                                                          // 147\n   * @priority 200                                                                                         // 148\n   *                                                                                                       // 149\n   * The $aria service contains helper methods for applying common                                         // 150\n   * [ARIA](http://www.w3.org/TR/wai-aria/) attributes to HTML directives.                                 // 151\n   *                                                                                                       // 152\n   * ngAria injects common accessibility attributes that tell assistive technologies when HTML             // 153\n   * elements are enabled, selected, hidden, and more. To see how this is performed with ngAria,           // 154\n   * let's review a code snippet from ngAria itself:                                                       // 155\n   *                                                                                                       // 156\n   *```js                                                                                                  // 157\n   * ngAriaModule.directive('ngDisabled', ['$aria', function($aria) {                                      // 158\n   *   return $aria.$$watchExpr('ngDisabled', 'aria-disabled');                                            // 159\n   * }])                                                                                                   // 160\n   *```                                                                                                    // 161\n   * Shown above, the ngAria module creates a directive with the same signature as the                     // 162\n   * traditional `ng-disabled` directive. But this ngAria version is dedicated to                          // 163\n   * solely managing accessibility attributes. The internal `$aria` service is used to watch the           // 164\n   * boolean attribute `ngDisabled`. If it has not been explicitly set by the developer,                   // 165\n   * `aria-disabled` is injected as an attribute with its value synchronized to the value in               // 166\n   * `ngDisabled`.                                                                                         // 167\n   *                                                                                                       // 168\n   * Because ngAria hooks into the `ng-disabled` directive, developers do not have to do                   // 169\n   * anything to enable this feature. The `aria-disabled` attribute is automatically managed               // 170\n   * simply as a silent side-effect of using `ng-disabled` with the ngAria module.                         // 171\n   *                                                                                                       // 172\n   * The full list of directives that interface with ngAria:                                               // 173\n   * * **ngModel**                                                                                         // 174\n   * * **ngShow**                                                                                          // 175\n   * * **ngHide**                                                                                          // 176\n   * * **ngClick**                                                                                         // 177\n   * * **ngDblclick**                                                                                      // 178\n   * * **ngMessages**                                                                                      // 179\n   * * **ngDisabled**                                                                                      // 180\n   *                                                                                                       // 181\n   * Read the {@link guide/accessibility ngAria Developer Guide} for a thorough explanation of each        // 182\n   * directive.                                                                                            // 183\n   *                                                                                                       // 184\n   *                                                                                                       // 185\n   * ## Dependencies                                                                                       // 186\n   * Requires the {@link ngAria} module to be installed.                                                   // 187\n   */                                                                                                      // 188\n  this.$get = function() {                                                                                 // 189\n    return {                                                                                               // 190\n      config: function(key) {                                                                              // 191\n        return config[key];                                                                                // 192\n      },                                                                                                   // 193\n      $$watchExpr: watchExpr                                                                               // 194\n    };                                                                                                     // 195\n  };                                                                                                       // 196\n}                                                                                                          // 197\n                                                                                                           // 198\n                                                                                                           // 199\nngAriaModule.directive('ngShow', ['$aria', function($aria) {                                               // 200\n  return $aria.$$watchExpr('ngShow', 'aria-hidden', [], true);                                             // 201\n}])                                                                                                        // 202\n.directive('ngHide', ['$aria', function($aria) {                                                           // 203\n  return $aria.$$watchExpr('ngHide', 'aria-hidden', [], false);                                            // 204\n}])                                                                                                        // 205\n.directive('ngModel', ['$aria', function($aria) {                                                          // 206\n                                                                                                           // 207\n  function shouldAttachAttr(attr, normalizedAttr, elem) {                                                  // 208\n    return $aria.config(normalizedAttr) && !elem.attr(attr);                                               // 209\n  }                                                                                                        // 210\n                                                                                                           // 211\n  function shouldAttachRole(role, elem) {                                                                  // 212\n    return !elem.attr('role') && (elem.attr('type') === role) && (elem[0].nodeName !== 'INPUT');           // 213\n  }                                                                                                        // 214\n                                                                                                           // 215\n  function getShape(attr, elem) {                                                                          // 216\n    var type = attr.type,                                                                                  // 217\n        role = attr.role;                                                                                  // 218\n                                                                                                           // 219\n    return ((type || role) === 'checkbox' || role === 'menuitemcheckbox') ? 'checkbox' :                   // 220\n           ((type || role) === 'radio'    || role === 'menuitemradio') ? 'radio' :                         // 221\n           (type === 'range'              || role === 'progressbar' || role === 'slider') ? 'range' :      // 222\n           (type || role) === 'textbox'   || elem[0].nodeName === 'TEXTAREA' ? 'multiline' : '';           // 223\n  }                                                                                                        // 224\n                                                                                                           // 225\n  return {                                                                                                 // 226\n    restrict: 'A',                                                                                         // 227\n    require: '?ngModel',                                                                                   // 228\n    priority: 200, //Make sure watches are fired after any other directives that affect the ngModel value  // 229\n    compile: function(elem, attr) {                                                                        // 230\n      var shape = getShape(attr, elem);                                                                    // 231\n                                                                                                           // 232\n      return {                                                                                             // 233\n        pre: function(scope, elem, attr, ngModel) {                                                        // 234\n          if (shape === 'checkbox' && attr.type !== 'checkbox') {                                          // 235\n            //Use the input[checkbox] $isEmpty implementation for elements with checkbox roles             // 236\n            ngModel.$isEmpty = function(value) {                                                           // 237\n              return value === false;                                                                      // 238\n            };                                                                                             // 239\n          }                                                                                                // 240\n        },                                                                                                 // 241\n        post: function(scope, elem, attr, ngModel) {                                                       // 242\n          var needsTabIndex = shouldAttachAttr('tabindex', 'tabindex', elem)                               // 243\n                                && !isNodeOneOf(elem, nodeBlackList);                                      // 244\n                                                                                                           // 245\n          function ngAriaWatchModelValue() {                                                               // 246\n            return ngModel.$modelValue;                                                                    // 247\n          }                                                                                                // 248\n                                                                                                           // 249\n          function getRadioReaction() {                                                                    // 250\n            if (needsTabIndex) {                                                                           // 251\n              needsTabIndex = false;                                                                       // 252\n              return function ngAriaRadioReaction(newVal) {                                                // 253\n                var boolVal = (attr.value == ngModel.$viewValue);                                          // 254\n                elem.attr('aria-checked', boolVal);                                                        // 255\n                elem.attr('tabindex', 0 - !boolVal);                                                       // 256\n              };                                                                                           // 257\n            } else {                                                                                       // 258\n              return function ngAriaRadioReaction(newVal) {                                                // 259\n                elem.attr('aria-checked', (attr.value == ngModel.$viewValue));                             // 260\n              };                                                                                           // 261\n            }                                                                                              // 262\n          }                                                                                                // 263\n                                                                                                           // 264\n          function ngAriaCheckboxReaction() {                                                              // 265\n            elem.attr('aria-checked', !ngModel.$isEmpty(ngModel.$viewValue));                              // 266\n          }                                                                                                // 267\n                                                                                                           // 268\n          switch (shape) {                                                                                 // 269\n            case 'radio':                                                                                  // 270\n            case 'checkbox':                                                                               // 271\n              if (shouldAttachRole(shape, elem)) {                                                         // 272\n                elem.attr('role', shape);                                                                  // 273\n              }                                                                                            // 274\n              if (shouldAttachAttr('aria-checked', 'ariaChecked', elem)) {                                 // 275\n                scope.$watch(ngAriaWatchModelValue, shape === 'radio' ?                                    // 276\n                    getRadioReaction() : ngAriaCheckboxReaction);                                          // 277\n              }                                                                                            // 278\n              if (needsTabIndex) {                                                                         // 279\n                elem.attr('tabindex', 0);                                                                  // 280\n              }                                                                                            // 281\n              break;                                                                                       // 282\n            case 'range':                                                                                  // 283\n              if (shouldAttachRole(shape, elem)) {                                                         // 284\n                elem.attr('role', 'slider');                                                               // 285\n              }                                                                                            // 286\n              if ($aria.config('ariaValue')) {                                                             // 287\n                var needsAriaValuemin = !elem.attr('aria-valuemin') &&                                     // 288\n                    (attr.hasOwnProperty('min') || attr.hasOwnProperty('ngMin'));                          // 289\n                var needsAriaValuemax = !elem.attr('aria-valuemax') &&                                     // 290\n                    (attr.hasOwnProperty('max') || attr.hasOwnProperty('ngMax'));                          // 291\n                var needsAriaValuenow = !elem.attr('aria-valuenow');                                       // 292\n                                                                                                           // 293\n                if (needsAriaValuemin) {                                                                   // 294\n                  attr.$observe('min', function ngAriaValueMinReaction(newVal) {                           // 295\n                    elem.attr('aria-valuemin', newVal);                                                    // 296\n                  });                                                                                      // 297\n                }                                                                                          // 298\n                if (needsAriaValuemax) {                                                                   // 299\n                  attr.$observe('max', function ngAriaValueMinReaction(newVal) {                           // 300\n                    elem.attr('aria-valuemax', newVal);                                                    // 301\n                  });                                                                                      // 302\n                }                                                                                          // 303\n                if (needsAriaValuenow) {                                                                   // 304\n                  scope.$watch(ngAriaWatchModelValue, function ngAriaValueNowReaction(newVal) {            // 305\n                    elem.attr('aria-valuenow', newVal);                                                    // 306\n                  });                                                                                      // 307\n                }                                                                                          // 308\n              }                                                                                            // 309\n              if (needsTabIndex) {                                                                         // 310\n                elem.attr('tabindex', 0);                                                                  // 311\n              }                                                                                            // 312\n              break;                                                                                       // 313\n            case 'multiline':                                                                              // 314\n              if (shouldAttachAttr('aria-multiline', 'ariaMultiline', elem)) {                             // 315\n                elem.attr('aria-multiline', true);                                                         // 316\n              }                                                                                            // 317\n              break;                                                                                       // 318\n          }                                                                                                // 319\n                                                                                                           // 320\n          if (ngModel.$validators.required && shouldAttachAttr('aria-required', 'ariaRequired', elem)) {   // 321\n            scope.$watch(function ngAriaRequiredWatch() {                                                  // 322\n              return ngModel.$error.required;                                                              // 323\n            }, function ngAriaRequiredReaction(newVal) {                                                   // 324\n              elem.attr('aria-required', !!newVal);                                                        // 325\n            });                                                                                            // 326\n          }                                                                                                // 327\n                                                                                                           // 328\n          if (shouldAttachAttr('aria-invalid', 'ariaInvalid', elem)) {                                     // 329\n            scope.$watch(function ngAriaInvalidWatch() {                                                   // 330\n              return ngModel.$invalid;                                                                     // 331\n            }, function ngAriaInvalidReaction(newVal) {                                                    // 332\n              elem.attr('aria-invalid', !!newVal);                                                         // 333\n            });                                                                                            // 334\n          }                                                                                                // 335\n        }                                                                                                  // 336\n      };                                                                                                   // 337\n    }                                                                                                      // 338\n  };                                                                                                       // 339\n}])                                                                                                        // 340\n.directive('ngDisabled', ['$aria', function($aria) {                                                       // 341\n  return $aria.$$watchExpr('ngDisabled', 'aria-disabled', []);                                             // 342\n}])                                                                                                        // 343\n.directive('ngMessages', function() {                                                                      // 344\n  return {                                                                                                 // 345\n    restrict: 'A',                                                                                         // 346\n    require: '?ngMessages',                                                                                // 347\n    link: function(scope, elem, attr, ngMessages) {                                                        // 348\n      if (!elem.attr('aria-live')) {                                                                       // 349\n        elem.attr('aria-live', 'assertive');                                                               // 350\n      }                                                                                                    // 351\n    }                                                                                                      // 352\n  };                                                                                                       // 353\n})                                                                                                         // 354\n.directive('ngClick',['$aria', '$parse', function($aria, $parse) {                                         // 355\n  return {                                                                                                 // 356\n    restrict: 'A',                                                                                         // 357\n    compile: function(elem, attr) {                                                                        // 358\n      var fn = $parse(attr.ngClick, /* interceptorFn */ null, /* expensiveChecks */ true);                 // 359\n      return function(scope, elem, attr) {                                                                 // 360\n                                                                                                           // 361\n        if (!isNodeOneOf(elem, nodeBlackList)) {                                                           // 362\n                                                                                                           // 363\n          if ($aria.config('bindRoleForClick') && !elem.attr('role')) {                                    // 364\n            elem.attr('role', 'button');                                                                   // 365\n          }                                                                                                // 366\n                                                                                                           // 367\n          if ($aria.config('tabindex') && !elem.attr('tabindex')) {                                        // 368\n            elem.attr('tabindex', 0);                                                                      // 369\n          }                                                                                                // 370\n                                                                                                           // 371\n          if ($aria.config('bindKeypress') && !attr.ngKeypress) {                                          // 372\n            elem.on('keypress', function(event) {                                                          // 373\n              var keyCode = event.which || event.keyCode;                                                  // 374\n              if (keyCode === 32 || keyCode === 13) {                                                      // 375\n                scope.$apply(callback);                                                                    // 376\n              }                                                                                            // 377\n                                                                                                           // 378\n              function callback() {                                                                        // 379\n                fn(scope, { $event: event });                                                              // 380\n              }                                                                                            // 381\n            });                                                                                            // 382\n          }                                                                                                // 383\n        }                                                                                                  // 384\n      };                                                                                                   // 385\n    }                                                                                                      // 386\n  };                                                                                                       // 387\n}])                                                                                                        // 388\n.directive('ngDblclick', ['$aria', function($aria) {                                                       // 389\n  return function(scope, elem, attr) {                                                                     // 390\n    if ($aria.config('tabindex') && !elem.attr('tabindex') && !isNodeOneOf(elem, nodeBlackList)) {         // 391\n      elem.attr('tabindex', 0);                                                                            // 392\n    }                                                                                                      // 393\n  };                                                                                                       // 394\n}]);                                                                                                       // 395\n                                                                                                           // 396\n                                                                                                           // 397\n})(window, window.angular);                                                                                // 398\n                                                                                                           // 399\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\nPackage['angular:angular-aria'] = {};\n\n})();\n","servePath":"/packages/angular_angular-aria.js","sourceMap":{"version":3,"sources":["/packages/angular_angular-aria/angular-aria.js"],"names":[],"mappingsiH","file":"/packages/angular_angular-aria.js","sourcesContent":["/**\n * @license AngularJS v1.4.8\n * (c) 2010-2015 Google, Inc. http://angularjs.org\n * License: MIT\n */\n(function(window, angular, undefined) {'use strict';\n\n/**\n * @ngdoc module\n * @name ngAria\n * @description\n *\n * The `ngAria` module provides support for common\n * [<abbr title=\"Accessible Rich Internet Applications\">ARIA</abbr>](http://www.w3.org/TR/wai-aria/)\n * attributes that convey state or semantic information about the application for users\n * of assistive technologies, such as screen readers.\n *\n * <div doc-module-components=\"ngAria\"></div>\n *\n * ## Usage\n *\n * For ngAria to do its magic, simply include the module `ngAria` as a dependency. The following\n * directives are supported:\n * `ngModel`, `ngDisabled`, `ngShow`, `ngHide`, `ngClick`, `ngDblClick`, and `ngMessages`.\n *\n * Below is a more detailed breakdown of the attributes handled by ngAria:\n *\n * | Directive                                   | Supported Attributes                                                                   |\n * |---------------------------------------------|----------------------------------------------------------------------------------------|\n * | {@link ng.directive:ngDisabled ngDisabled}  | aria-disabled                                                                          |\n * | {@link ng.directive:ngShow ngShow}          | aria-hidden                                                                            |\n * | {@link ng.directive:ngHide ngHide}          | aria-hidden                                                                            |\n * | {@link ng.directive:ngDblclick ngDblclick}  | tabindex                                                                               |\n * | {@link module:ngMessages ngMessages}        | aria-live                                                                              |\n * | {@link ng.directive:ngModel ngModel}        | aria-checked, aria-valuemin, aria-valuemax, aria-valuenow, aria-invalid, aria-required, input roles |\n * | {@link ng.directive:ngClick ngClick}        | tabindex, keypress event, button role                                                               |\n *\n * Find out more information about each directive by reading the\n * {@link guide/accessibility ngAria Developer Guide}.\n *\n * ##Example\n * Using ngDisabled with ngAria:\n * ```html\n * <md-checkbox ng-disabled=\"disabled\">\n * ```\n * Becomes:\n * ```html\n * <md-checkbox ng-disabled=\"disabled\" aria-disabled=\"true\">\n * ```\n *\n * ##Disabling Attributes\n * It's possible to disable individual attributes added by ngAria with the\n * {@link ngAria.$ariaProvider#config config} method. For more details, see the\n * {@link guide/accessibility Developer Guide}.\n */\n /* global -ngAriaModule */\nvar ngAriaModule = angular.module('ngAria', ['ng']).\n                        provider('$aria', $AriaProvider);\n\n/**\n* Internal Utilities\n*/\nvar nodeBlackList = ['BUTTON', 'A', 'INPUT', 'TEXTAREA', 'SELECT', 'DETAILS', 'SUMMARY'];\n\nvar isNodeOneOf = function(elem, nodeTypeArray) {\n  if (nodeTypeArray.indexOf(elem[0].nodeName) !== -1) {\n    return true;\n  }\n};\n/**\n * @ngdoc provider\n * @name $ariaProvider\n *\n * @description\n *\n * Used for configuring the ARIA attributes injected and managed by ngAria.\n *\n * ```js\n * angular.module('myApp', ['ngAria'], function config($ariaProvider) {\n *   $ariaProvider.config({\n *     ariaValue: true,\n *     tabindex: false\n *   });\n * });\n *```\n *\n * ## Dependencies\n * Requires the {@link ngAria} module to be installed.\n *\n */\nfunction $AriaProvider() {\n  var config = {\n    ariaHidden: true,\n    ariaChecked: true,\n    ariaDisabled: true,\n    ariaRequired: true,\n    ariaInvalid: true,\n    ariaMultiline: true,\n    ariaValue: true,\n    tabindex: true,\n    bindKeypress: true,\n    bindRoleForClick: true\n  };\n\n  /**\n   * @ngdoc method\n   * @name $ariaProvider#config\n   *\n   * @param {object} config object to enable/disable specific ARIA attributes\n   *\n   *  - **ariaHidden** – `{boolean}` – Enables/disables aria-hidden tags\n   *  - **ariaChecked** – `{boolean}` – Enables/disables aria-checked tags\n   *  - **ariaDisabled** – `{boolean}` – Enables/disables aria-disabled tags\n   *  - **ariaRequired** – `{boolean}` – Enables/disables aria-required tags\n   *  - **ariaInvalid** – `{boolean}` – Enables/disables aria-invalid tags\n   *  - **ariaMultiline** – `{boolean}` – Enables/disables aria-multiline tags\n   *  - **ariaValue** – `{boolean}` – Enables/disables aria-valuemin, aria-valuemax and aria-valuenow tags\n   *  - **tabindex** – `{boolean}` – Enables/disables tabindex tags\n   *  - **bindKeypress** – `{boolean}` – Enables/disables keypress event binding on `&lt;div&gt;` and\n   *    `&lt;li&gt;` elements with ng-click\n   *  - **bindRoleForClick** – `{boolean}` – Adds role=button to non-interactive elements like `div`\n   *    using ng-click, making them more accessible to users of assistive technologies\n   *\n   * @description\n   * Enables/disables various ARIA attributes\n   */\n  this.config = function(newConfig) {\n    config = angular.extend(config, newConfig);\n  };\n\n  function watchExpr(attrName, ariaAttr, nodeBlackList, negate) {\n    return function(scope, elem, attr) {\n      var ariaCamelName = attr.$normalize(ariaAttr);\n      if (config[ariaCamelName] && !isNodeOneOf(elem, nodeBlackList) && !attr[ariaCamelName]) {\n        scope.$watch(attr[attrName], function(boolVal) {\n          // ensure boolean value\n          boolVal = negate ? !boolVal : !!boolVal;\n          elem.attr(ariaAttr, boolVal);\n        });\n      }\n    };\n  }\n  /**\n   * @ngdoc service\n   * @name $aria\n   *\n   * @description\n   * @priority 200\n   *\n   * The $aria service contains helper methods for applying common\n   * [ARIA](http://www.w3.org/TR/wai-aria/) attributes to HTML directives.\n   *\n   * ngAria injects common accessibility attributes that tell assistive technologies when HTML\n   * elements are enabled, selected, hidden, and more. To see how this is performed with ngAria,\n   * let's review a code snippet from ngAria itself:\n   *\n   *```js\n   * ngAriaModule.directive('ngDisabled', ['$aria', function($aria) {\n   *   return $aria.$$watchExpr('ngDisabled', 'aria-disabled');\n   * }])\n   *```\n   * Shown above, the ngAria module creates a directive with the same signature as the\n   * traditional `ng-disabled` directive. But this ngAria version is dedicated to\n   * solely managing accessibility attributes. The internal `$aria` service is used to watch the\n   * boolean attribute `ngDisabled`. If it has not been explicitly set by the developer,\n   * `aria-disabled` is injected as an attribute with its value synchronized to the value in\n   * `ngDisabled`.\n   *\n   * Because ngAria hooks into the `ng-disabled` directive, developers do not have to do\n   * anything to enable this feature. The `aria-disabled` attribute is automatically managed\n   * simply as a silent side-effect of using `ng-disabled` with the ngAria module.\n   *\n   * The full list of directives that interface with ngAria:\n   * * **ngModel**\n   * * **ngShow**\n   * * **ngHide**\n   * * **ngClick**\n   * * **ngDblclick**\n   * * **ngMessages**\n   * * **ngDisabled**\n   *\n   * Read the {@link guide/accessibility ngAria Developer Guide} for a thorough explanation of each\n   * directive.\n   *\n   *\n   * ## Dependencies\n   * Requires the {@link ngAria} module to be installed.\n   */\n  this.$get = function() {\n    return {\n      config: function(key) {\n        return config[key];\n      },\n      $$watchExpr: watchExpr\n    };\n  };\n}\n\n\nngAriaModule.directive('ngShow', ['$aria', function($aria) {\n  return $aria.$$watchExpr('ngShow', 'aria-hidden', [], true);\n}])\n.directive('ngHide', ['$aria', function($aria) {\n  return $aria.$$watchExpr('ngHide', 'aria-hidden', [], false);\n}])\n.directive('ngModel', ['$aria', function($aria) {\n\n  function shouldAttachAttr(attr, normalizedAttr, elem) {\n    return $aria.config(normalizedAttr) && !elem.attr(attr);\n  }\n\n  function shouldAttachRole(role, elem) {\n    return !elem.attr('role') && (elem.attr('type') === role) && (elem[0].nodeName !== 'INPUT');\n  }\n\n  function getShape(attr, elem) {\n    var type = attr.type,\n        role = attr.role;\n\n    return ((type || role) === 'checkbox' || role === 'menuitemcheckbox') ? 'checkbox' :\n           ((type || role) === 'radio'    || role === 'menuitemradio') ? 'radio' :\n           (type === 'range'              || role === 'progressbar' || role === 'slider') ? 'range' :\n           (type || role) === 'textbox'   || elem[0].nodeName === 'TEXTAREA' ? 'multiline' : '';\n  }\n\n  return {\n    restrict: 'A',\n    require: '?ngModel',\n    priority: 200, //Make sure watches are fired after any other directives that affect the ngModel value\n    compile: function(elem, attr) {\n      var shape = getShape(attr, elem);\n\n      return {\n        pre: function(scope, elem, attr, ngModel) {\n          if (shape === 'checkbox' && attr.type !== 'checkbox') {\n            //Use the input[checkbox] $isEmpty implementation for elements with checkbox roles\n            ngModel.$isEmpty = function(value) {\n              return value === false;\n            };\n          }\n        },\n        post: function(scope, elem, attr, ngModel) {\n          var needsTabIndex = shouldAttachAttr('tabindex', 'tabindex', elem)\n                                && !isNodeOneOf(elem, nodeBlackList);\n\n          function ngAriaWatchModelValue() {\n            return ngModel.$modelValue;\n          }\n\n          function getRadioReaction() {\n            if (needsTabIndex) {\n              needsTabIndex = false;\n              return function ngAriaRadioReaction(newVal) {\n                var boolVal = (attr.value == ngModel.$viewValue);\n                elem.attr('aria-checked', boolVal);\n                elem.attr('tabindex', 0 - !boolVal);\n              };\n            } else {\n              return function ngAriaRadioReaction(newVal) {\n                elem.attr('aria-checked', (attr.value == ngModel.$viewValue));\n              };\n            }\n          }\n\n          function ngAriaCheckboxReaction() {\n            elem.attr('aria-checked', !ngModel.$isEmpty(ngModel.$viewValue));\n          }\n\n          switch (shape) {\n            case 'radio':\n            case 'checkbox':\n              if (shouldAttachRole(shape, elem)) {\n                elem.attr('role', shape);\n              }\n              if (shouldAttachAttr('aria-checked', 'ariaChecked', elem)) {\n                scope.$watch(ngAriaWatchModelValue, shape === 'radio' ?\n                    getRadioReaction() : ngAriaCheckboxReaction);\n              }\n              if (needsTabIndex) {\n                elem.attr('tabindex', 0);\n              }\n              break;\n            case 'range':\n              if (shouldAttachRole(shape, elem)) {\n                elem.attr('role', 'slider');\n              }\n              if ($aria.config('ariaValue')) {\n                var needsAriaValuemin = !elem.attr('aria-valuemin') &&\n                    (attr.hasOwnProperty('min') || attr.hasOwnProperty('ngMin'));\n                var needsAriaValuemax = !elem.attr('aria-valuemax') &&\n                    (attr.hasOwnProperty('max') || attr.hasOwnProperty('ngMax'));\n                var needsAriaValuenow = !elem.attr('aria-valuenow');\n\n                if (needsAriaValuemin) {\n                  attr.$observe('min', function ngAriaValueMinReaction(newVal) {\n                    elem.attr('aria-valuemin', newVal);\n                  });\n                }\n                if (needsAriaValuemax) {\n                  attr.$observe('max', function ngAriaValueMinReaction(newVal) {\n                    elem.attr('aria-valuemax', newVal);\n                  });\n                }\n                if (needsAriaValuenow) {\n                  scope.$watch(ngAriaWatchModelValue, function ngAriaValueNowReaction(newVal) {\n                    elem.attr('aria-valuenow', newVal);\n                  });\n                }\n              }\n              if (needsTabIndex) {\n                elem.attr('tabindex', 0);\n              }\n              break;\n            case 'multiline':\n              if (shouldAttachAttr('aria-multiline', 'ariaMultiline', elem)) {\n                elem.attr('aria-multiline', true);\n              }\n              break;\n          }\n\n          if (ngModel.$validators.required && shouldAttachAttr('aria-required', 'ariaRequired', elem)) {\n            scope.$watch(function ngAriaRequiredWatch() {\n              return ngModel.$error.required;\n            }, function ngAriaRequiredReaction(newVal) {\n              elem.attr('aria-required', !!newVal);\n            });\n          }\n\n          if (shouldAttachAttr('aria-invalid', 'ariaInvalid', elem)) {\n            scope.$watch(function ngAriaInvalidWatch() {\n              return ngModel.$invalid;\n            }, function ngAriaInvalidReaction(newVal) {\n              elem.attr('aria-invalid', !!newVal);\n            });\n          }\n        }\n      };\n    }\n  };\n}])\n.directive('ngDisabled', ['$aria', function($aria) {\n  return $aria.$$watchExpr('ngDisabled', 'aria-disabled', []);\n}])\n.directive('ngMessages', function() {\n  return {\n    restrict: 'A',\n    require: '?ngMessages',\n    link: function(scope, elem, attr, ngMessages) {\n      if (!elem.attr('aria-live')) {\n        elem.attr('aria-live', 'assertive');\n      }\n    }\n  };\n})\n.directive('ngClick',['$aria', '$parse', function($aria, $parse) {\n  return {\n    restrict: 'A',\n    compile: function(elem, attr) {\n      var fn = $parse(attr.ngClick, /* interceptorFn */ null, /* expensiveChecks */ true);\n      return function(scope, elem, attr) {\n\n        if (!isNodeOneOf(elem, nodeBlackList)) {\n\n          if ($aria.config('bindRoleForClick') && !elem.attr('role')) {\n            elem.attr('role', 'button');\n          }\n\n          if ($aria.config('tabindex') && !elem.attr('tabindex')) {\n            elem.attr('tabindex', 0);\n          }\n\n          if ($aria.config('bindKeypress') && !attr.ngKeypress) {\n            elem.on('keypress', function(event) {\n              var keyCode = event.which || event.keyCode;\n              if (keyCode === 32 || keyCode === 13) {\n                scope.$apply(callback);\n              }\n\n              function callback() {\n                fn(scope, { $event: event });\n              }\n            });\n          }\n        }\n      };\n    }\n  };\n}])\n.directive('ngDblclick', ['$aria', function($aria) {\n  return function(scope, elem, attr) {\n    if ($aria.config('tabindex') && !elem.attr('tabindex') && !isNodeOneOf(elem, nodeBlackList)) {\n      elem.attr('tabindex', 0);\n    }\n  };\n}]);\n\n\n})(window, window.angular);\n"]}}]