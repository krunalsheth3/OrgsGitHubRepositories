[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar _ = Package.underscore._;\nvar Random = Package.random.Random;\nvar check = Package.check.check;\nvar Match = Package.check.Match;\nvar WebApp = Package.webapp.WebApp;\nvar main = Package.webapp.main;\nvar WebAppInternals = Package.webapp.WebAppInternals;\nvar Accounts = Package['accounts-base'].Accounts;\nvar AccountsServer = Package['accounts-base'].AccountsServer;\nvar OAuth = Package.oauth.OAuth;\nvar Oauth = Package.oauth.Oauth;\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                 //\n// packages/accounts-oauth/oauth_common.js                                                                         //\n//                                                                                                                 //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                   //\nAccounts.oauth = {};                                                                                               // 1\n                                                                                                                   // 2\nvar services = {};                                                                                                 // 3\n                                                                                                                   // 4\n// Helper for registering OAuth based accounts packages.                                                           // 5\n// On the server, adds an index to the user collection.                                                            // 6\nAccounts.oauth.registerService = function (name) {                                                                 // 7\n  if (_.has(services, name))                                                                                       // 8\n    throw new Error(\"Duplicate service: \" + name);                                                                 // 9\n  services[name] = true;                                                                                           // 10\n                                                                                                                   // 11\n  if (Meteor.server) {                                                                                             // 12\n    // Accounts.updateOrCreateUserFromExternalService does a lookup by this id,                                    // 13\n    // so this should be a unique index. You might want to add indexes for other                                   // 14\n    // fields returned by your service (eg services.github.login) but you can do                                   // 15\n    // that in your app.                                                                                           // 16\n    Meteor.users._ensureIndex('services.' + name + '.id',                                                          // 17\n                              {unique: 1, sparse: 1});                                                             // 18\n  }                                                                                                                // 19\n};                                                                                                                 // 20\n                                                                                                                   // 21\n// Removes a previously registered service.                                                                        // 22\n// This will disable logging in with this service, and serviceNames() will not                                     // 23\n// contain it.                                                                                                     // 24\n// It's worth noting that already logged in users will remain logged in unless                                     // 25\n// you manually expire their sessions.                                                                             // 26\nAccounts.oauth.unregisterService = function (name) {                                                               // 27\n  if (!_.has(services, name))                                                                                      // 28\n    throw new Error(\"Service not found: \" + name);                                                                 // 29\n  delete services[name];                                                                                           // 30\n};                                                                                                                 // 31\n                                                                                                                   // 32\nAccounts.oauth.serviceNames = function () {                                                                        // 33\n  return _.keys(services);                                                                                         // 34\n};                                                                                                                 // 35\n                                                                                                                   // 36\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                 //\n// packages/accounts-oauth/oauth_server.js                                                                         //\n//                                                                                                                 //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                   //\n// Listen to calls to `login` with an oauth option set. This is where                                              // 1\n// users actually get logged in to meteor via oauth.                                                               // 2\nAccounts.registerLoginHandler(function (options) {                                                                 // 3\n  if (!options.oauth)                                                                                              // 4\n    return undefined; // don't handle                                                                              // 5\n                                                                                                                   // 6\n  check(options.oauth, {                                                                                           // 7\n    credentialToken: String,                                                                                       // 8\n    // When an error occurs while retrieving the access token, we store                                            // 9\n    // the error in the pending credentials table, with a secret of                                                // 10\n    // null. The client can call the login method with a secret of null                                            // 11\n    // to retrieve the error.                                                                                      // 12\n    credentialSecret: Match.OneOf(null, String)                                                                    // 13\n  });                                                                                                              // 14\n                                                                                                                   // 15\n  var result = OAuth.retrieveCredential(options.oauth.credentialToken,                                             // 16\n                                        options.oauth.credentialSecret);                                           // 17\n                                                                                                                   // 18\n  if (!result) {                                                                                                   // 19\n    // OAuth credentialToken is not recognized, which could be either                                              // 20\n    // because the popup was closed by the user before completion, or                                              // 21\n    // some sort of error where the oauth provider didn't talk to our                                              // 22\n    // server correctly and closed the popup somehow.                                                              // 23\n    //                                                                                                             // 24\n    // We assume it was user canceled and report it as such, using a                                               // 25\n    // numeric code that the client recognizes (XXX this will get                                                  // 26\n    // replaced by a symbolic error code at some point                                                             // 27\n    // https://trello.com/c/kMkw800Z/53-official-ddp-specification). This                                          // 28\n    // will mask failures where things are misconfigured such that the                                             // 29\n    // server doesn't see the request but does close the window. This                                              // 30\n    // seems unlikely.                                                                                             // 31\n    //                                                                                                             // 32\n    // XXX we want `type` to be the service name such as \"facebook\"                                                // 33\n    return { type: \"oauth\",                                                                                        // 34\n             error: new Meteor.Error(                                                                              // 35\n               Accounts.LoginCancelledError.numericError,                                                          // 36\n               \"No matching login attempt found\") };                                                               // 37\n  }                                                                                                                // 38\n                                                                                                                   // 39\n  if (result instanceof Error)                                                                                     // 40\n    // We tried to login, but there was a fatal error. Report it back                                              // 41\n    // to the user.                                                                                                // 42\n    throw result;                                                                                                  // 43\n  else {                                                                                                           // 44\n    if (!_.contains(Accounts.oauth.serviceNames(), result.serviceName)) {                                          // 45\n      // serviceName was not found in the registered services list.                                                // 46\n      // This could happen because the service never registered itself or                                          // 47\n      // unregisterService was called on it.                                                                       // 48\n      return { type: \"oauth\",                                                                                      // 49\n               error: new Meteor.Error(                                                                            // 50\n                 Accounts.LoginCancelledError.numericError,                                                        // 51\n                 \"No registered oauth service found for: \" + result.serviceName) };                                // 52\n                                                                                                                   // 53\n    }                                                                                                              // 54\n    return Accounts.updateOrCreateUserFromExternalService(result.serviceName, result.serviceData, result.options);\n  }                                                                                                                // 56\n});                                                                                                                // 57\n                                                                                                                   // 58\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\nPackage['accounts-oauth'] = {};\n\n})();\n","servePath":"/packages/accounts-oauth.js","sourceMap":{"version":3,"sources":["/packages/accounts-oauth/oauth_common.js","/packages/accounts-oauth/oauth_server.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wH;;;;;;;;;;;;;;;;;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wH","file":"/packages/accounts-oauth.js","sourcesContent":["Accounts.oauth = {};\n\nvar services = {};\n\n// Helper for registering OAuth based accounts packages.\n// On the server, adds an index to the user collection.\nAccounts.oauth.registerService = function (name) {\n  if (_.has(services, name))\n    throw new Error(\"Duplicate service: \" + name);\n  services[name] = true;\n\n  if (Meteor.server) {\n    // Accounts.updateOrCreateUserFromExternalService does a lookup by this id,\n    // so this should be a unique index. You might want to add indexes for other\n    // fields returned by your service (eg services.github.login) but you can do\n    // that in your app.\n    Meteor.users._ensureIndex('services.' + name + '.id',\n                              {unique: 1, sparse: 1});\n  }\n};\n\n// Removes a previously registered service.\n// This will disable logging in with this service, and serviceNames() will not\n// contain it.\n// It's worth noting that already logged in users will remain logged in unless\n// you manually expire their sessions.\nAccounts.oauth.unregisterService = function (name) {\n  if (!_.has(services, name))\n    throw new Error(\"Service not found: \" + name);\n  delete services[name];\n};\n\nAccounts.oauth.serviceNames = function () {\n  return _.keys(services);\n};\n","// Listen to calls to `login` with an oauth option set. This is where\n// users actually get logged in to meteor via oauth.\nAccounts.registerLoginHandler(function (options) {\n  if (!options.oauth)\n    return undefined; // don't handle\n\n  check(options.oauth, {\n    credentialToken: String,\n    // When an error occurs while retrieving the access token, we store\n    // the error in the pending credentials table, with a secret of\n    // null. The client can call the login method with a secret of null\n    // to retrieve the error.\n    credentialSecret: Match.OneOf(null, String)\n  });\n\n  var result = OAuth.retrieveCredential(options.oauth.credentialToken,\n                                        options.oauth.credentialSecret);\n\n  if (!result) {\n    // OAuth credentialToken is not recognized, which could be either\n    // because the popup was closed by the user before completion, or\n    // some sort of error where the oauth provider didn't talk to our\n    // server correctly and closed the popup somehow.\n    //\n    // We assume it was user canceled and report it as such, using a\n    // numeric code that the client recognizes (XXX this will get\n    // replaced by a symbolic error code at some point\n    // https://trello.com/c/kMkw800Z/53-official-ddp-specification). This\n    // will mask failures where things are misconfigured such that the\n    // server doesn't see the request but does close the window. This\n    // seems unlikely.\n    //\n    // XXX we want `type` to be the service name such as \"facebook\"\n    return { type: \"oauth\",\n             error: new Meteor.Error(\n               Accounts.LoginCancelledError.numericError,\n               \"No matching login attempt found\") };\n  }\n\n  if (result instanceof Error)\n    // We tried to login, but there was a fatal error. Report it back\n    // to the user.\n    throw result;\n  else {\n    if (!_.contains(Accounts.oauth.serviceNames(), result.serviceName)) {\n      // serviceName was not found in the registered services list.\n      // This could happen because the service never registered itself or\n      // unregisterService was called on it.\n      return { type: \"oauth\",\n               error: new Meteor.Error(\n                 Accounts.LoginCancelledError.numericError,\n                 \"No registered oauth service found for: \" + result.serviceName) };\n\n    }\n    return Accounts.updateOrCreateUserFromExternalService(result.serviceName, result.serviceData, result.options);\n  }\n});\n"]}}]