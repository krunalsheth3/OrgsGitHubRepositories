[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar OAuth = Package.oauth.OAuth;\nvar Oauth = Package.oauth.Oauth;\nvar HTTP = Package.http.HTTP;\nvar HTTPInternals = Package.http.HTTPInternals;\nvar _ = Package.underscore._;\nvar ServiceConfiguration = Package['service-configuration'].ServiceConfiguration;\n\n/* Package-scope variables */\nvar Google;\n\n(function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                              //\n// packages/google/google_server.js                                                             //\n//                                                                                              //\n//////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                //\nGoogle = {};                                                                                    // 1\n                                                                                                // 2\n// https://developers.google.com/accounts/docs/OAuth2Login#userinfocall                         // 3\nGoogle.whitelistedFields = ['id', 'email', 'verified_email', 'name', 'given_name',              // 4\n                   'family_name', 'picture', 'locale', 'timezone', 'gender'];                   // 5\n                                                                                                // 6\n                                                                                                // 7\nOAuth.registerService('google', 2, null, function(query) {                                      // 8\n                                                                                                // 9\n  var response = getTokens(query);                                                              // 10\n  var expiresAt = (+new Date) + (1000 * parseInt(response.expiresIn, 10));                      // 11\n  var accessToken = response.accessToken;                                                       // 12\n  var idToken = response.idToken;                                                               // 13\n  var scopes = getScopes(accessToken);                                                          // 14\n  var identity = getIdentity(accessToken);                                                      // 15\n                                                                                                // 16\n  var serviceData = {                                                                           // 17\n    accessToken: accessToken,                                                                   // 18\n    idToken: idToken,                                                                           // 19\n    expiresAt: expiresAt,                                                                       // 20\n    scope: scopes                                                                               // 21\n  };                                                                                            // 22\n                                                                                                // 23\n  var fields = _.pick(identity, Google.whitelistedFields);                                      // 24\n  _.extend(serviceData, fields);                                                                // 25\n                                                                                                // 26\n  // only set the token in serviceData if it's there. this ensures                              // 27\n  // that we don't lose old ones (since we only get this on the first                           // 28\n  // log in attempt)                                                                            // 29\n  if (response.refreshToken)                                                                    // 30\n    serviceData.refreshToken = response.refreshToken;                                           // 31\n                                                                                                // 32\n  return {                                                                                      // 33\n    serviceData: serviceData,                                                                   // 34\n    options: {profile: {name: identity.name}}                                                   // 35\n  };                                                                                            // 36\n});                                                                                             // 37\n                                                                                                // 38\n// returns an object containing:                                                                // 39\n// - accessToken                                                                                // 40\n// - expiresIn: lifetime of token in seconds                                                    // 41\n// - refreshToken, if this is the first authorization request                                   // 42\nvar getTokens = function (query) {                                                              // 43\n  var config = ServiceConfiguration.configurations.findOne({service: 'google'});                // 44\n  if (!config)                                                                                  // 45\n    throw new ServiceConfiguration.ConfigError();                                               // 46\n                                                                                                // 47\n  var response;                                                                                 // 48\n  try {                                                                                         // 49\n    response = HTTP.post(                                                                       // 50\n      \"https://accounts.google.com/o/oauth2/token\", {params: {                                  // 51\n        code: query.code,                                                                       // 52\n        client_id: config.clientId,                                                             // 53\n        client_secret: OAuth.openSecret(config.secret),                                         // 54\n        redirect_uri: OAuth._redirectUri('google', config),                                     // 55\n        grant_type: 'authorization_code'                                                        // 56\n      }});                                                                                      // 57\n  } catch (err) {                                                                               // 58\n    throw _.extend(new Error(\"Failed to complete OAuth handshake with Google. \" + err.message),\n                   {response: err.response});                                                   // 60\n  }                                                                                             // 61\n                                                                                                // 62\n  if (response.data.error) { // if the http response was a json object with an error attribute  // 63\n    throw new Error(\"Failed to complete OAuth handshake with Google. \" + response.data.error);  // 64\n  } else {                                                                                      // 65\n    return {                                                                                    // 66\n      accessToken: response.data.access_token,                                                  // 67\n      refreshToken: response.data.refresh_token,                                                // 68\n      expiresIn: response.data.expires_in,                                                      // 69\n      idToken: response.data.id_token                                                           // 70\n    };                                                                                          // 71\n  }                                                                                             // 72\n};                                                                                              // 73\n                                                                                                // 74\nvar getIdentity = function (accessToken) {                                                      // 75\n  try {                                                                                         // 76\n    return HTTP.get(                                                                            // 77\n      \"https://www.googleapis.com/oauth2/v1/userinfo\",                                          // 78\n      {params: {access_token: accessToken}}).data;                                              // 79\n  } catch (err) {                                                                               // 80\n    throw _.extend(new Error(\"Failed to fetch identity from Google. \" + err.message),           // 81\n                   {response: err.response});                                                   // 82\n  }                                                                                             // 83\n};                                                                                              // 84\n                                                                                                // 85\nvar getScopes = function (accessToken) {                                                        // 86\n  try {                                                                                         // 87\n    return HTTP.get(                                                                            // 88\n      \"https://www.googleapis.com/oauth2/v1/tokeninfo\",                                         // 89\n      {params: {access_token: accessToken}}).data.scope.split(' ');                             // 90\n  } catch (err) {                                                                               // 91\n    throw _.extend(new Error(\"Failed to fetch tokeninfo from Google. \" + err.message),          // 92\n                   {response: err.response});                                                   // 93\n  }                                                                                             // 94\n};                                                                                              // 95\n                                                                                                // 96\nGoogle.retrieveCredential = function(credentialToken, credentialSecret) {                       // 97\n  return OAuth.retrieveCredential(credentialToken, credentialSecret);                           // 98\n};                                                                                              // 99\n                                                                                                // 100\n//////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\nPackage.google = {\n  Google: Google\n};\n\n})();\n","servePath":"/packages/google.js","sourceMap":{"version":3,"sources":["/packages/google/google_server.js"],"names":[],"mappingssG","file":"/packages/google.js","sourcesContent":["Google = {};\n\n// https://developers.google.com/accounts/docs/OAuth2Login#userinfocall\nGoogle.whitelistedFields = ['id', 'email', 'verified_email', 'name', 'given_name',\n                   'family_name', 'picture', 'locale', 'timezone', 'gender'];\n\n\nOAuth.registerService('google', 2, null, function(query) {\n\n  var response = getTokens(query);\n  var expiresAt = (+new Date) + (1000 * parseInt(response.expiresIn, 10));\n  var accessToken = response.accessToken;\n  var idToken = response.idToken;\n  var scopes = getScopes(accessToken);\n  var identity = getIdentity(accessToken);\n\n  var serviceData = {\n    accessToken: accessToken,\n    idToken: idToken,\n    expiresAt: expiresAt,\n    scope: scopes\n  };\n\n  var fields = _.pick(identity, Google.whitelistedFields);\n  _.extend(serviceData, fields);\n\n  // only set the token in serviceData if it's there. this ensures\n  // that we don't lose old ones (since we only get this on the first\n  // log in attempt)\n  if (response.refreshToken)\n    serviceData.refreshToken = response.refreshToken;\n\n  return {\n    serviceData: serviceData,\n    options: {profile: {name: identity.name}}\n  };\n});\n\n// returns an object containing:\n// - accessToken\n// - expiresIn: lifetime of token in seconds\n// - refreshToken, if this is the first authorization request\nvar getTokens = function (query) {\n  var config = ServiceConfiguration.configurations.findOne({service: 'google'});\n  if (!config)\n    throw new ServiceConfiguration.ConfigError();\n\n  var response;\n  try {\n    response = HTTP.post(\n      \"https://accounts.google.com/o/oauth2/token\", {params: {\n        code: query.code,\n        client_id: config.clientId,\n        client_secret: OAuth.openSecret(config.secret),\n        redirect_uri: OAuth._redirectUri('google', config),\n        grant_type: 'authorization_code'\n      }});\n  } catch (err) {\n    throw _.extend(new Error(\"Failed to complete OAuth handshake with Google. \" + err.message),\n                   {response: err.response});\n  }\n\n  if (response.data.error) { // if the http response was a json object with an error attribute\n    throw new Error(\"Failed to complete OAuth handshake with Google. \" + response.data.error);\n  } else {\n    return {\n      accessToken: response.data.access_token,\n      refreshToken: response.data.refresh_token,\n      expiresIn: response.data.expires_in,\n      idToken: response.data.id_token\n    };\n  }\n};\n\nvar getIdentity = function (accessToken) {\n  try {\n    return HTTP.get(\n      \"https://www.googleapis.com/oauth2/v1/userinfo\",\n      {params: {access_token: accessToken}}).data;\n  } catch (err) {\n    throw _.extend(new Error(\"Failed to fetch identity from Google. \" + err.message),\n                   {response: err.response});\n  }\n};\n\nvar getScopes = function (accessToken) {\n  try {\n    return HTTP.get(\n      \"https://www.googleapis.com/oauth2/v1/tokeninfo\",\n      {params: {access_token: accessToken}}).data.scope.split(' ');\n  } catch (err) {\n    throw _.extend(new Error(\"Failed to fetch tokeninfo from Google. \" + err.message),\n                   {response: err.response});\n  }\n};\n\nGoogle.retrieveCredential = function(credentialToken, credentialSecret) {\n  return OAuth.retrieveCredential(credentialToken, credentialSecret);\n};\n"]}}]