[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/angularutils_pagination/dirPagination.js                                                                   //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * dirPagination - AngularJS module for paginating (almost) anything.                                                  // 2\n *                                                                                                                     // 3\n *                                                                                                                     // 4\n * Credits                                                                                                             // 5\n * =======                                                                                                             // 6\n *                                                                                                                     // 7\n * Daniel Tabuenca: https://groups.google.com/d/msg/angular/an9QpzqIYiM/r8v-3W1X5vcJ                                   // 8\n * for the idea on how to dynamically invoke the ng-repeat directive.                                                  // 9\n *                                                                                                                     // 10\n * I borrowed a couple of lines and a few attribute names from the AngularUI Bootstrap project:                        // 11\n * https://github.com/angular-ui/bootstrap/blob/master/src/pagination/pagination.js                                    // 12\n *                                                                                                                     // 13\n * Copyright 2014 Michael Bromley <michael@michaelbromley.co.uk>                                                       // 14\n */                                                                                                                    // 15\n                                                                                                                       // 16\n(function() {                                                                                                          // 17\n                                                                                                                       // 18\n    /**                                                                                                                // 19\n     * Config                                                                                                          // 20\n     */                                                                                                                // 21\n    var moduleName = 'angularUtils.directives.dirPagination';                                                          // 22\n    var DEFAULT_ID = '__default';                                                                                      // 23\n                                                                                                                       // 24\n    /**                                                                                                                // 25\n     * Module                                                                                                          // 26\n     */                                                                                                                // 27\n    angular.module(moduleName, [])                                                                                     // 28\n        .directive('dirPaginate', ['$compile', '$parse', 'paginationService', dirPaginateDirective])                   // 29\n        .directive('dirPaginateNoCompile', noCompileDirective)                                                         // 30\n        .directive('dirPaginationControls', ['paginationService', 'paginationTemplate', dirPaginationControlsDirective])\n        .filter('itemsPerPage', ['paginationService', itemsPerPageFilter])                                             // 32\n        .service('paginationService', paginationService)                                                               // 33\n        .provider('paginationTemplate', paginationTemplateProvider)                                                    // 34\n        .run(['$templateCache',dirPaginationControlsTemplateInstaller]);                                               // 35\n                                                                                                                       // 36\n    function dirPaginateDirective($compile, $parse, paginationService) {                                               // 37\n                                                                                                                       // 38\n        return  {                                                                                                      // 39\n            terminal: true,                                                                                            // 40\n            multiElement: true,                                                                                        // 41\n            priority: 100,                                                                                             // 42\n            compile: dirPaginationCompileFn                                                                            // 43\n        };                                                                                                             // 44\n                                                                                                                       // 45\n        function dirPaginationCompileFn(tElement, tAttrs){                                                             // 46\n                                                                                                                       // 47\n            var expression = tAttrs.dirPaginate;                                                                       // 48\n            // regex taken directly from https://github.com/angular/angular.js/blob/v1.4.x/src/ng/directive/ngRepeat.js#L339\n            var match = expression.match(/^\\s*([\\s\\S]+?)\\s+in\\s+([\\s\\S]+?)(?:\\s+as\\s+([\\s\\S]+?))?(?:\\s+track\\s+by\\s+([\\s\\S]+?))?\\s*$/);\n                                                                                                                       // 51\n            var filterPattern = /\\|\\s*itemsPerPage\\s*:\\s*(.*\\(\\s*\\w*\\)|([^\\)]*?(?=\\s+as\\s+))|[^\\)]*)/;                 // 52\n            if (match[2].match(filterPattern) === null) {                                                              // 53\n                throw 'pagination directive: the \\'itemsPerPage\\' filter must be set.';                                // 54\n            }                                                                                                          // 55\n            var itemsPerPageFilterRemoved = match[2].replace(filterPattern, '');                                       // 56\n            var collectionGetter = $parse(itemsPerPageFilterRemoved);                                                  // 57\n                                                                                                                       // 58\n            addNoCompileAttributes(tElement);                                                                          // 59\n                                                                                                                       // 60\n            // If any value is specified for paginationId, we register the un-evaluated expression at this stage for the benefit of any\n            // dir-pagination-controls directives that may be looking for this ID.                                     // 62\n            var rawId = tAttrs.paginationId || DEFAULT_ID;                                                             // 63\n            paginationService.registerInstance(rawId);                                                                 // 64\n                                                                                                                       // 65\n            return function dirPaginationLinkFn(scope, element, attrs){                                                // 66\n                                                                                                                       // 67\n                // Now that we have access to the `scope` we can interpolate any expression given in the paginationId attribute and\n                // potentially register a new ID if it evaluates to a different value than the rawId.                  // 69\n                var paginationId = $parse(attrs.paginationId)(scope) || attrs.paginationId || DEFAULT_ID;              // 70\n                paginationService.registerInstance(paginationId);                                                      // 71\n                                                                                                                       // 72\n                var repeatExpression = getRepeatExpression(expression, paginationId);                                  // 73\n                addNgRepeatToElement(element, attrs, repeatExpression);                                                // 74\n                                                                                                                       // 75\n                removeTemporaryAttributes(element);                                                                    // 76\n                var compiled =  $compile(element);                                                                     // 77\n                                                                                                                       // 78\n                var currentPageGetter = makeCurrentPageGetterFn(scope, attrs, paginationId);                           // 79\n                paginationService.setCurrentPageParser(paginationId, currentPageGetter, scope);                        // 80\n                                                                                                                       // 81\n                if (typeof attrs.totalItems !== 'undefined') {                                                         // 82\n                    paginationService.setAsyncModeTrue(paginationId);                                                  // 83\n                    scope.$watch(function() {                                                                          // 84\n                        return $parse(attrs.totalItems)(scope);                                                        // 85\n                    }, function (result) {                                                                             // 86\n                        if (0 <= result) {                                                                             // 87\n                            paginationService.setCollectionLength(paginationId, result);                               // 88\n                        }                                                                                              // 89\n                    });                                                                                                // 90\n                } else {                                                                                               // 91\n                    scope.$watchCollection(function() {                                                                // 92\n                        return collectionGetter(scope);                                                                // 93\n                    }, function(collection) {                                                                          // 94\n                        if (collection) {                                                                              // 95\n                            paginationService.setCollectionLength(paginationId, collection.length);                    // 96\n                        }                                                                                              // 97\n                    });                                                                                                // 98\n                }                                                                                                      // 99\n                                                                                                                       // 100\n                // Delegate to the link function returned by the new compilation of the ng-repeat                      // 101\n                compiled(scope);                                                                                       // 102\n            };                                                                                                         // 103\n        }                                                                                                              // 104\n                                                                                                                       // 105\n        /**                                                                                                            // 106\n         * If a pagination id has been specified, we need to check that it is present as the second argument passed to\n         * the itemsPerPage filter. If it is not there, we add it and return the modified expression.                  // 108\n         *                                                                                                             // 109\n         * @param expression                                                                                           // 110\n         * @param paginationId                                                                                         // 111\n         * @returns {*}                                                                                                // 112\n         */                                                                                                            // 113\n        function getRepeatExpression(expression, paginationId) {                                                       // 114\n            var repeatExpression,                                                                                      // 115\n                idDefinedInFilter = !!expression.match(/(\\|\\s*itemsPerPage\\s*:[^|]*:[^|]*)/);                          // 116\n                                                                                                                       // 117\n            if (paginationId !== DEFAULT_ID && !idDefinedInFilter) {                                                   // 118\n                repeatExpression = expression.replace(/(\\|\\s*itemsPerPage\\s*:[^|]*)/, \"$1 : '\" + paginationId + \"'\");  // 119\n            } else {                                                                                                   // 120\n                repeatExpression = expression;                                                                         // 121\n            }                                                                                                          // 122\n                                                                                                                       // 123\n            return repeatExpression;                                                                                   // 124\n        }                                                                                                              // 125\n                                                                                                                       // 126\n        /**                                                                                                            // 127\n         * Adds the ng-repeat directive to the element. In the case of multi-element (-start, -end) it adds the        // 128\n         * appropriate multi-element ng-repeat to the first and last element in the range.                             // 129\n         * @param element                                                                                              // 130\n         * @param attrs                                                                                                // 131\n         * @param repeatExpression                                                                                     // 132\n         */                                                                                                            // 133\n        function addNgRepeatToElement(element, attrs, repeatExpression) {                                              // 134\n            if (element[0].hasAttribute('dir-paginate-start') || element[0].hasAttribute('data-dir-paginate-start')) {\n                // using multiElement mode (dir-paginate-start, dir-paginate-end)                                      // 136\n                attrs.$set('ngRepeatStart', repeatExpression);                                                         // 137\n                element.eq(element.length - 1).attr('ng-repeat-end', true);                                            // 138\n            } else {                                                                                                   // 139\n                attrs.$set('ngRepeat', repeatExpression);                                                              // 140\n            }                                                                                                          // 141\n        }                                                                                                              // 142\n                                                                                                                       // 143\n        /**                                                                                                            // 144\n         * Adds the dir-paginate-no-compile directive to each element in the tElement range.                           // 145\n         * @param tElement                                                                                             // 146\n         */                                                                                                            // 147\n        function addNoCompileAttributes(tElement) {                                                                    // 148\n            angular.forEach(tElement, function(el) {                                                                   // 149\n                if (el.nodeType === 1) {                                                                               // 150\n                    angular.element(el).attr('dir-paginate-no-compile', true);                                         // 151\n                }                                                                                                      // 152\n            });                                                                                                        // 153\n        }                                                                                                              // 154\n                                                                                                                       // 155\n        /**                                                                                                            // 156\n         * Removes the variations on dir-paginate (data-, -start, -end) and the dir-paginate-no-compile directives.    // 157\n         * @param element                                                                                              // 158\n         */                                                                                                            // 159\n        function removeTemporaryAttributes(element) {                                                                  // 160\n            angular.forEach(element, function(el) {                                                                    // 161\n                if (el.nodeType === 1) {                                                                               // 162\n                    angular.element(el).removeAttr('dir-paginate-no-compile');                                         // 163\n                }                                                                                                      // 164\n            });                                                                                                        // 165\n            element.eq(0).removeAttr('dir-paginate-start').removeAttr('dir-paginate').removeAttr('data-dir-paginate-start').removeAttr('data-dir-paginate');\n            element.eq(element.length - 1).removeAttr('dir-paginate-end').removeAttr('data-dir-paginate-end');         // 167\n        }                                                                                                              // 168\n                                                                                                                       // 169\n        /**                                                                                                            // 170\n         * Creates a getter function for the current-page attribute, using the expression provided or a default value if\n         * no current-page expression was specified.                                                                   // 172\n         *                                                                                                             // 173\n         * @param scope                                                                                                // 174\n         * @param attrs                                                                                                // 175\n         * @param paginationId                                                                                         // 176\n         * @returns {*}                                                                                                // 177\n         */                                                                                                            // 178\n        function makeCurrentPageGetterFn(scope, attrs, paginationId) {                                                 // 179\n            var currentPageGetter;                                                                                     // 180\n            if (attrs.currentPage) {                                                                                   // 181\n                currentPageGetter = $parse(attrs.currentPage);                                                         // 182\n            } else {                                                                                                   // 183\n                // If the current-page attribute was not set, we'll make our own.                                      // 184\n                // Replace any non-alphanumeric characters which might confuse                                         // 185\n                // the $parse service and give unexpected results.                                                     // 186\n                // See https://github.com/michaelbromley/angularUtils/issues/233                                       // 187\n                var defaultCurrentPage = (paginationId + '__currentPage').replace(/\\W/g, '_');                         // 188\n                scope[defaultCurrentPage] = 1;                                                                         // 189\n                currentPageGetter = $parse(defaultCurrentPage);                                                        // 190\n            }                                                                                                          // 191\n            return currentPageGetter;                                                                                  // 192\n        }                                                                                                              // 193\n    }                                                                                                                  // 194\n                                                                                                                       // 195\n    /**                                                                                                                // 196\n     * This is a helper directive that allows correct compilation when in multi-element mode (ie dir-paginate-start, dir-paginate-end).\n     * It is dynamically added to all elements in the dir-paginate compile function, and it prevents further compilation of\n     * any inner directives. It is then removed in the link function, and all inner directives are then manually compiled.\n     */                                                                                                                // 200\n    function noCompileDirective() {                                                                                    // 201\n        return {                                                                                                       // 202\n            priority: 5000,                                                                                            // 203\n            terminal: true                                                                                             // 204\n        };                                                                                                             // 205\n    }                                                                                                                  // 206\n                                                                                                                       // 207\n    function dirPaginationControlsTemplateInstaller($templateCache) {                                                  // 208\n        $templateCache.put('angularUtils.directives.dirPagination.template', '<ul class=\"pagination\" ng-if=\"1 < pages.length || !autoHide\"><li ng-if=\"boundaryLinks\" ng-class=\"{ disabled : pagination.current == 1 }\"><a href=\"\" ng-click=\"setCurrent(1)\">&laquo;</a></li><li ng-if=\"directionLinks\" ng-class=\"{ disabled : pagination.current == 1 }\"><a href=\"\" ng-click=\"setCurrent(pagination.current - 1)\">&lsaquo;</a></li><li ng-repeat=\"pageNumber in pages track by tracker(pageNumber, $index)\" ng-class=\"{ active : pagination.current == pageNumber, disabled : pageNumber == \\'...\\' || ( ! autoHide && pages.length === 1 ) }\"><a href=\"\" ng-click=\"setCurrent(pageNumber)\">{{ pageNumber }}</a></li><li ng-if=\"directionLinks\" ng-class=\"{ disabled : pagination.current == pagination.last }\"><a href=\"\" ng-click=\"setCurrent(pagination.current + 1)\">&rsaquo;</a></li><li ng-if=\"boundaryLinks\"  ng-class=\"{ disabled : pagination.current == pagination.last }\"><a href=\"\" ng-click=\"setCurrent(pagination.last)\">&raquo;</a></li></ul>');\n    }                                                                                                                  // 210\n                                                                                                                       // 211\n    function dirPaginationControlsDirective(paginationService, paginationTemplate) {                                   // 212\n                                                                                                                       // 213\n        var numberRegex = /^\\d+$/;                                                                                     // 214\n                                                                                                                       // 215\n        return {                                                                                                       // 216\n            restrict: 'AE',                                                                                            // 217\n            templateUrl: function(elem, attrs) {                                                                       // 218\n                return attrs.templateUrl || paginationTemplate.getPath();                                              // 219\n            },                                                                                                         // 220\n            scope: {                                                                                                   // 221\n                maxSize: '=?',                                                                                         // 222\n                onPageChange: '&?',                                                                                    // 223\n                paginationId: '=?',                                                                                    // 224\n                autoHide: '=?'                                                                                         // 225\n            },                                                                                                         // 226\n            link: dirPaginationControlsLinkFn                                                                          // 227\n        };                                                                                                             // 228\n                                                                                                                       // 229\n        function dirPaginationControlsLinkFn(scope, element, attrs) {                                                  // 230\n                                                                                                                       // 231\n            // rawId is the un-interpolated value of the pagination-id attribute. This is only important when the corresponding dir-paginate directive has\n            // not yet been linked (e.g. if it is inside an ng-if block), and in that case it prevents this controls directive from assuming that there is\n            // no corresponding dir-paginate directive and wrongly throwing an exception.                              // 234\n            var rawId = attrs.paginationId ||  DEFAULT_ID;                                                             // 235\n            var paginationId = scope.paginationId || attrs.paginationId ||  DEFAULT_ID;                                // 236\n                                                                                                                       // 237\n            if (!paginationService.isRegistered(paginationId) && !paginationService.isRegistered(rawId)) {             // 238\n                var idMessage = (paginationId !== DEFAULT_ID) ? ' (id: ' + paginationId + ') ' : ' ';                  // 239\n                console.warn('Pagination directive: the pagination controls' + idMessage + 'cannot be used without the corresponding pagination directive, which was not found at link time.');\n            }                                                                                                          // 241\n                                                                                                                       // 242\n            if (!scope.maxSize) { scope.maxSize = 9; }                                                                 // 243\n            scope.autoHide = scope.autoHide === undefined ? true : scope.autoHide;                                     // 244\n            scope.directionLinks = angular.isDefined(attrs.directionLinks) ? scope.$parent.$eval(attrs.directionLinks) : true;\n            scope.boundaryLinks = angular.isDefined(attrs.boundaryLinks) ? scope.$parent.$eval(attrs.boundaryLinks) : false;\n                                                                                                                       // 247\n            var paginationRange = Math.max(scope.maxSize, 5);                                                          // 248\n            scope.pages = [];                                                                                          // 249\n            scope.pagination = {                                                                                       // 250\n                last: 1,                                                                                               // 251\n                current: 1                                                                                             // 252\n            };                                                                                                         // 253\n            scope.range = {                                                                                            // 254\n                lower: 1,                                                                                              // 255\n                upper: 1,                                                                                              // 256\n                total: 1                                                                                               // 257\n            };                                                                                                         // 258\n                                                                                                                       // 259\n            scope.$watch(function() {                                                                                  // 260\n                if (paginationService.isRegistered(paginationId)) {                                                    // 261\n                    return (paginationService.getCollectionLength(paginationId) + 1) * paginationService.getItemsPerPage(paginationId);\n                }                                                                                                      // 263\n            }, function(length) {                                                                                      // 264\n                if (0 < length) {                                                                                      // 265\n                    generatePagination();                                                                              // 266\n                }                                                                                                      // 267\n            });                                                                                                        // 268\n                                                                                                                       // 269\n            scope.$watch(function() {                                                                                  // 270\n                if (paginationService.isRegistered(paginationId)) {                                                    // 271\n                    return (paginationService.getItemsPerPage(paginationId));                                          // 272\n                }                                                                                                      // 273\n            }, function(current, previous) {                                                                           // 274\n                if (current != previous && typeof previous !== 'undefined') {                                          // 275\n                    goToPage(scope.pagination.current);                                                                // 276\n                }                                                                                                      // 277\n            });                                                                                                        // 278\n                                                                                                                       // 279\n            scope.$watch(function() {                                                                                  // 280\n                if (paginationService.isRegistered(paginationId)) {                                                    // 281\n                    return paginationService.getCurrentPage(paginationId);                                             // 282\n                }                                                                                                      // 283\n            }, function(currentPage, previousPage) {                                                                   // 284\n                if (currentPage != previousPage) {                                                                     // 285\n                    goToPage(currentPage);                                                                             // 286\n                }                                                                                                      // 287\n            });                                                                                                        // 288\n                                                                                                                       // 289\n            scope.setCurrent = function(num) {                                                                         // 290\n                if (paginationService.isRegistered(paginationId) && isValidPageNumber(num)) {                          // 291\n                    num = parseInt(num, 10);                                                                           // 292\n                    paginationService.setCurrentPage(paginationId, num);                                               // 293\n                }                                                                                                      // 294\n            };                                                                                                         // 295\n                                                                                                                       // 296\n            /**                                                                                                        // 297\n             * Custom \"track by\" function which allows for duplicate \"...\" entries on long lists,                      // 298\n             * yet fixes the problem of wrongly-highlighted links which happens when using                             // 299\n             * \"track by $index\" - see https://github.com/michaelbromley/angularUtils/issues/153                       // 300\n             * @param id                                                                                               // 301\n             * @param index                                                                                            // 302\n             * @returns {string}                                                                                       // 303\n             */                                                                                                        // 304\n            scope.tracker = function(id, index) {                                                                      // 305\n                return id + '_' + index;                                                                               // 306\n            };                                                                                                         // 307\n                                                                                                                       // 308\n            function goToPage(num) {                                                                                   // 309\n                if (paginationService.isRegistered(paginationId) && isValidPageNumber(num)) {                          // 310\n                    scope.pages = generatePagesArray(num, paginationService.getCollectionLength(paginationId), paginationService.getItemsPerPage(paginationId), paginationRange);\n                    scope.pagination.current = num;                                                                    // 312\n                    updateRangeValues();                                                                               // 313\n                                                                                                                       // 314\n                    // if a callback has been set, then call it with the page number as an argument                    // 315\n                    if (scope.onPageChange) {                                                                          // 316\n                        scope.onPageChange({ newPageNumber : num });                                                   // 317\n                    }                                                                                                  // 318\n                }                                                                                                      // 319\n            }                                                                                                          // 320\n                                                                                                                       // 321\n            function generatePagination() {                                                                            // 322\n                if (paginationService.isRegistered(paginationId)) {                                                    // 323\n                    var page = parseInt(paginationService.getCurrentPage(paginationId)) || 1;                          // 324\n                    scope.pages = generatePagesArray(page, paginationService.getCollectionLength(paginationId), paginationService.getItemsPerPage(paginationId), paginationRange);\n                    scope.pagination.current = page;                                                                   // 326\n                    scope.pagination.last = scope.pages[scope.pages.length - 1];                                       // 327\n                    if (scope.pagination.last < scope.pagination.current) {                                            // 328\n                        scope.setCurrent(scope.pagination.last);                                                       // 329\n                    } else {                                                                                           // 330\n                        updateRangeValues();                                                                           // 331\n                    }                                                                                                  // 332\n                }                                                                                                      // 333\n            }                                                                                                          // 334\n                                                                                                                       // 335\n            /**                                                                                                        // 336\n             * This function updates the values (lower, upper, total) of the `scope.range` object, which can be used in the pagination\n             * template to display the current page range, e.g. \"showing 21 - 40 of 144 results\";                      // 338\n             */                                                                                                        // 339\n            function updateRangeValues() {                                                                             // 340\n                if (paginationService.isRegistered(paginationId)) {                                                    // 341\n                    var currentPage = paginationService.getCurrentPage(paginationId),                                  // 342\n                        itemsPerPage = paginationService.getItemsPerPage(paginationId),                                // 343\n                        totalItems = paginationService.getCollectionLength(paginationId);                              // 344\n                                                                                                                       // 345\n                    scope.range.lower = (currentPage - 1) * itemsPerPage + 1;                                          // 346\n                    scope.range.upper = Math.min(currentPage * itemsPerPage, totalItems);                              // 347\n                    scope.range.total = totalItems;                                                                    // 348\n                }                                                                                                      // 349\n            }                                                                                                          // 350\n            function isValidPageNumber(num) {                                                                          // 351\n                return (numberRegex.test(num) && (0 < num && num <= scope.pagination.last));                           // 352\n            }                                                                                                          // 353\n        }                                                                                                              // 354\n                                                                                                                       // 355\n        /**                                                                                                            // 356\n         * Generate an array of page numbers (or the '...' string) which is used in an ng-repeat to generate the       // 357\n         * links used in pagination                                                                                    // 358\n         *                                                                                                             // 359\n         * @param currentPage                                                                                          // 360\n         * @param rowsPerPage                                                                                          // 361\n         * @param paginationRange                                                                                      // 362\n         * @param collectionLength                                                                                     // 363\n         * @returns {Array}                                                                                            // 364\n         */                                                                                                            // 365\n        function generatePagesArray(currentPage, collectionLength, rowsPerPage, paginationRange) {                     // 366\n            var pages = [];                                                                                            // 367\n            var totalPages = Math.ceil(collectionLength / rowsPerPage);                                                // 368\n            var halfWay = Math.ceil(paginationRange / 2);                                                              // 369\n            var position;                                                                                              // 370\n                                                                                                                       // 371\n            if (currentPage <= halfWay) {                                                                              // 372\n                position = 'start';                                                                                    // 373\n            } else if (totalPages - halfWay < currentPage) {                                                           // 374\n                position = 'end';                                                                                      // 375\n            } else {                                                                                                   // 376\n                position = 'middle';                                                                                   // 377\n            }                                                                                                          // 378\n                                                                                                                       // 379\n            var ellipsesNeeded = paginationRange < totalPages;                                                         // 380\n            var i = 1;                                                                                                 // 381\n            while (i <= totalPages && i <= paginationRange) {                                                          // 382\n                var pageNumber = calculatePageNumber(i, currentPage, paginationRange, totalPages);                     // 383\n                                                                                                                       // 384\n                var openingEllipsesNeeded = (i === 2 && (position === 'middle' || position === 'end'));                // 385\n                var closingEllipsesNeeded = (i === paginationRange - 1 && (position === 'middle' || position === 'start'));\n                if (ellipsesNeeded && (openingEllipsesNeeded || closingEllipsesNeeded)) {                              // 387\n                    pages.push('...');                                                                                 // 388\n                } else {                                                                                               // 389\n                    pages.push(pageNumber);                                                                            // 390\n                }                                                                                                      // 391\n                i ++;                                                                                                  // 392\n            }                                                                                                          // 393\n            return pages;                                                                                              // 394\n        }                                                                                                              // 395\n                                                                                                                       // 396\n        /**                                                                                                            // 397\n         * Given the position in the sequence of pagination links [i], figure out what page number corresponds to that position.\n         *                                                                                                             // 399\n         * @param i                                                                                                    // 400\n         * @param currentPage                                                                                          // 401\n         * @param paginationRange                                                                                      // 402\n         * @param totalPages                                                                                           // 403\n         * @returns {*}                                                                                                // 404\n         */                                                                                                            // 405\n        function calculatePageNumber(i, currentPage, paginationRange, totalPages) {                                    // 406\n            var halfWay = Math.ceil(paginationRange/2);                                                                // 407\n            if (i === paginationRange) {                                                                               // 408\n                return totalPages;                                                                                     // 409\n            } else if (i === 1) {                                                                                      // 410\n                return i;                                                                                              // 411\n            } else if (paginationRange < totalPages) {                                                                 // 412\n                if (totalPages - halfWay < currentPage) {                                                              // 413\n                    return totalPages - paginationRange + i;                                                           // 414\n                } else if (halfWay < currentPage) {                                                                    // 415\n                    return currentPage - halfWay + i;                                                                  // 416\n                } else {                                                                                               // 417\n                    return i;                                                                                          // 418\n                }                                                                                                      // 419\n            } else {                                                                                                   // 420\n                return i;                                                                                              // 421\n            }                                                                                                          // 422\n        }                                                                                                              // 423\n    }                                                                                                                  // 424\n                                                                                                                       // 425\n    /**                                                                                                                // 426\n     * This filter slices the collection into pages based on the current page number and number of items per page.     // 427\n     * @param paginationService                                                                                        // 428\n     * @returns {Function}                                                                                             // 429\n     */                                                                                                                // 430\n    function itemsPerPageFilter(paginationService) {                                                                   // 431\n                                                                                                                       // 432\n        return function(collection, itemsPerPage, paginationId) {                                                      // 433\n            if (typeof (paginationId) === 'undefined') {                                                               // 434\n                paginationId = DEFAULT_ID;                                                                             // 435\n            }                                                                                                          // 436\n            if (!paginationService.isRegistered(paginationId)) {                                                       // 437\n                throw 'pagination directive: the itemsPerPage id argument (id: ' + paginationId + ') does not match a registered pagination-id.';\n            }                                                                                                          // 439\n            var end;                                                                                                   // 440\n            var start;                                                                                                 // 441\n            if (angular.isObject(collection)) {                                                                        // 442\n                itemsPerPage = parseInt(itemsPerPage) || 9999999999;                                                   // 443\n                if (paginationService.isAsyncMode(paginationId)) {                                                     // 444\n                    start = 0;                                                                                         // 445\n                } else {                                                                                               // 446\n                    start = (paginationService.getCurrentPage(paginationId) - 1) * itemsPerPage;                       // 447\n                }                                                                                                      // 448\n                end = start + itemsPerPage;                                                                            // 449\n                paginationService.setItemsPerPage(paginationId, itemsPerPage);                                         // 450\n                                                                                                                       // 451\n                if (collection instanceof Array) {                                                                     // 452\n                    // the array just needs to be sliced                                                               // 453\n                    return collection.slice(start, end);                                                               // 454\n                } else {                                                                                               // 455\n                    // in the case of an object, we need to get an array of keys, slice that, then map back to         // 456\n                    // the original object.                                                                            // 457\n                    var slicedObject = {};                                                                             // 458\n                    angular.forEach(keys(collection).slice(start, end), function(key) {                                // 459\n                        slicedObject[key] = collection[key];                                                           // 460\n                    });                                                                                                // 461\n                    return slicedObject;                                                                               // 462\n                }                                                                                                      // 463\n            } else {                                                                                                   // 464\n                return collection;                                                                                     // 465\n            }                                                                                                          // 466\n        };                                                                                                             // 467\n    }                                                                                                                  // 468\n                                                                                                                       // 469\n    /**                                                                                                                // 470\n     * Shim for the Object.keys() method which does not exist in IE < 9                                                // 471\n     * @param obj                                                                                                      // 472\n     * @returns {Array}                                                                                                // 473\n     */                                                                                                                // 474\n    function keys(obj) {                                                                                               // 475\n        if (!Object.keys) {                                                                                            // 476\n            var objKeys = [];                                                                                          // 477\n            for (var i in obj) {                                                                                       // 478\n                if (obj.hasOwnProperty(i)) {                                                                           // 479\n                    objKeys.push(i);                                                                                   // 480\n                }                                                                                                      // 481\n            }                                                                                                          // 482\n            return objKeys;                                                                                            // 483\n        } else {                                                                                                       // 484\n            return Object.keys(obj);                                                                                   // 485\n        }                                                                                                              // 486\n    }                                                                                                                  // 487\n                                                                                                                       // 488\n    /**                                                                                                                // 489\n     * This service allows the various parts of the module to communicate and stay in sync.                            // 490\n     */                                                                                                                // 491\n    function paginationService() {                                                                                     // 492\n                                                                                                                       // 493\n        var instances = {};                                                                                            // 494\n        var lastRegisteredInstance;                                                                                    // 495\n                                                                                                                       // 496\n        this.registerInstance = function(instanceId) {                                                                 // 497\n            if (typeof instances[instanceId] === 'undefined') {                                                        // 498\n                instances[instanceId] = {                                                                              // 499\n                    asyncMode: false                                                                                   // 500\n                };                                                                                                     // 501\n                lastRegisteredInstance = instanceId;                                                                   // 502\n            }                                                                                                          // 503\n        };                                                                                                             // 504\n                                                                                                                       // 505\n        this.isRegistered = function(instanceId) {                                                                     // 506\n            return (typeof instances[instanceId] !== 'undefined');                                                     // 507\n        };                                                                                                             // 508\n                                                                                                                       // 509\n        this.getLastInstanceId = function() {                                                                          // 510\n            return lastRegisteredInstance;                                                                             // 511\n        };                                                                                                             // 512\n                                                                                                                       // 513\n        this.setCurrentPageParser = function(instanceId, val, scope) {                                                 // 514\n            instances[instanceId].currentPageParser = val;                                                             // 515\n            instances[instanceId].context = scope;                                                                     // 516\n        };                                                                                                             // 517\n        this.setCurrentPage = function(instanceId, val) {                                                              // 518\n            instances[instanceId].currentPageParser.assign(instances[instanceId].context, val);                        // 519\n        };                                                                                                             // 520\n        this.getCurrentPage = function(instanceId) {                                                                   // 521\n            var parser = instances[instanceId].currentPageParser;                                                      // 522\n            return parser ? parser(instances[instanceId].context) : 1;                                                 // 523\n        };                                                                                                             // 524\n                                                                                                                       // 525\n        this.setItemsPerPage = function(instanceId, val) {                                                             // 526\n            instances[instanceId].itemsPerPage = val;                                                                  // 527\n        };                                                                                                             // 528\n        this.getItemsPerPage = function(instanceId) {                                                                  // 529\n            return instances[instanceId].itemsPerPage;                                                                 // 530\n        };                                                                                                             // 531\n                                                                                                                       // 532\n        this.setCollectionLength = function(instanceId, val) {                                                         // 533\n            instances[instanceId].collectionLength = val;                                                              // 534\n        };                                                                                                             // 535\n        this.getCollectionLength = function(instanceId) {                                                              // 536\n            return instances[instanceId].collectionLength;                                                             // 537\n        };                                                                                                             // 538\n                                                                                                                       // 539\n        this.setAsyncModeTrue = function(instanceId) {                                                                 // 540\n            instances[instanceId].asyncMode = true;                                                                    // 541\n        };                                                                                                             // 542\n                                                                                                                       // 543\n        this.isAsyncMode = function(instanceId) {                                                                      // 544\n            return instances[instanceId].asyncMode;                                                                    // 545\n        };                                                                                                             // 546\n    }                                                                                                                  // 547\n                                                                                                                       // 548\n    /**                                                                                                                // 549\n     * This provider allows global configuration of the template path used by the dir-pagination-controls directive.   // 550\n     */                                                                                                                // 551\n    function paginationTemplateProvider() {                                                                            // 552\n                                                                                                                       // 553\n        var templatePath = 'angularUtils.directives.dirPagination.template';                                           // 554\n                                                                                                                       // 555\n        this.setPath = function(path) {                                                                                // 556\n            templatePath = path;                                                                                       // 557\n        };                                                                                                             // 558\n                                                                                                                       // 559\n        this.$get = function() {                                                                                       // 560\n            return {                                                                                                   // 561\n                getPath: function() {                                                                                  // 562\n                    return templatePath;                                                                               // 563\n                }                                                                                                      // 564\n            };                                                                                                         // 565\n        };                                                                                                             // 566\n    }                                                                                                                  // 567\n})();                                                                                                                  // 568\n                                                                                                                       // 569\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\nPackage['angularutils:pagination'] = {};\n\n})();\n","servePath":"/packages/angularutils_pagination.js","sourceMap":{"version":3,"sources":["/packages/angularutils_pagination/dirPagination.js"],"names":[],"mappingsfile":"/packages/angularutils_pagination.js","sourcesContent":["/**\n * dirPagination - AngularJS module for paginating (almost) anything.\n *\n *\n * Credits\n * =======\n *\n * Daniel Tabuenca: https://groups.google.com/d/msg/angular/an9QpzqIYiM/r8v-3W1X5vcJ\n * for the idea on how to dynamically invoke the ng-repeat directive.\n *\n * I borrowed a couple of lines and a few attribute names from the AngularUI Bootstrap project:\n * https://github.com/angular-ui/bootstrap/blob/master/src/pagination/pagination.js\n *\n * Copyright 2014 Michael Bromley <michael@michaelbromley.co.uk>\n */\n\n(function() {\n\n    /**\n     * Config\n     */\n    var moduleName = 'angularUtils.directives.dirPagination';\n    var DEFAULT_ID = '__default';\n\n    /**\n     * Module\n     */\n    angular.module(moduleName, [])\n        .directive('dirPaginate', ['$compile', '$parse', 'paginationService', dirPaginateDirective])\n        .directive('dirPaginateNoCompile', noCompileDirective)\n        .directive('dirPaginationControls', ['paginationService', 'paginationTemplate', dirPaginationControlsDirective])\n        .filter('itemsPerPage', ['paginationService', itemsPerPageFilter])\n        .service('paginationService', paginationService)\n        .provider('paginationTemplate', paginationTemplateProvider)\n        .run(['$templateCache',dirPaginationControlsTemplateInstaller]);\n\n    function dirPaginateDirective($compile, $parse, paginationService) {\n\n        return  {\n            terminal: true,\n            multiElement: true,\n            priority: 100,\n            compile: dirPaginationCompileFn\n        };\n\n        function dirPaginationCompileFn(tElement, tAttrs){\n\n            var expression = tAttrs.dirPaginate;\n            // regex taken directly from https://github.com/angular/angular.js/blob/v1.4.x/src/ng/directive/ngRepeat.js#L339\n            var match = expression.match(/^\\s*([\\s\\S]+?)\\s+in\\s+([\\s\\S]+?)(?:\\s+as\\s+([\\s\\S]+?))?(?:\\s+track\\s+by\\s+([\\s\\S]+?))?\\s*$/);\n\n            var filterPattern = /\\|\\s*itemsPerPage\\s*:\\s*(.*\\(\\s*\\w*\\)|([^\\)]*?(?=\\s+as\\s+))|[^\\)]*)/;\n            if (match[2].match(filterPattern) === null) {\n                throw 'pagination directive: the \\'itemsPerPage\\' filter must be set.';\n            }\n            var itemsPerPageFilterRemoved = match[2].replace(filterPattern, '');\n            var collectionGetter = $parse(itemsPerPageFilterRemoved);\n\n            addNoCompileAttributes(tElement);\n\n            // If any value is specified for paginationId, we register the un-evaluated expression at this stage for the benefit of any\n            // dir-pagination-controls directives that may be looking for this ID.\n            var rawId = tAttrs.paginationId || DEFAULT_ID;\n            paginationService.registerInstance(rawId);\n\n            return function dirPaginationLinkFn(scope, element, attrs){\n\n                // Now that we have access to the `scope` we can interpolate any expression given in the paginationId attribute and\n                // potentially register a new ID if it evaluates to a different value than the rawId.\n                var paginationId = $parse(attrs.paginationId)(scope) || attrs.paginationId || DEFAULT_ID;\n                paginationService.registerInstance(paginationId);\n\n                var repeatExpression = getRepeatExpression(expression, paginationId);\n                addNgRepeatToElement(element, attrs, repeatExpression);\n\n                removeTemporaryAttributes(element);\n                var compiled =  $compile(element);\n\n                var currentPageGetter = makeCurrentPageGetterFn(scope, attrs, paginationId);\n                paginationService.setCurrentPageParser(paginationId, currentPageGetter, scope);\n\n                if (typeof attrs.totalItems !== 'undefined') {\n                    paginationService.setAsyncModeTrue(paginationId);\n                    scope.$watch(function() {\n                        return $parse(attrs.totalItems)(scope);\n                    }, function (result) {\n                        if (0 <= result) {\n                            paginationService.setCollectionLength(paginationId, result);\n                        }\n                    });\n                } else {\n                    scope.$watchCollection(function() {\n                        return collectionGetter(scope);\n                    }, function(collection) {\n                        if (collection) {\n                            paginationService.setCollectionLength(paginationId, collection.length);\n                        }\n                    });\n                }\n\n                // Delegate to the link function returned by the new compilation of the ng-repeat\n                compiled(scope);\n            };\n        }\n\n        /**\n         * If a pagination id has been specified, we need to check that it is present as the second argument passed to\n         * the itemsPerPage filter. If it is not there, we add it and return the modified expression.\n         *\n         * @param expression\n         * @param paginationId\n         * @returns {*}\n         */\n        function getRepeatExpression(expression, paginationId) {\n            var repeatExpression,\n                idDefinedInFilter = !!expression.match(/(\\|\\s*itemsPerPage\\s*:[^|]*:[^|]*)/);\n\n            if (paginationId !== DEFAULT_ID && !idDefinedInFilter) {\n                repeatExpression = expression.replace(/(\\|\\s*itemsPerPage\\s*:[^|]*)/, \"$1 : '\" + paginationId + \"'\");\n            } else {\n                repeatExpression = expression;\n            }\n\n            return repeatExpression;\n        }\n\n        /**\n         * Adds the ng-repeat directive to the element. In the case of multi-element (-start, -end) it adds the\n         * appropriate multi-element ng-repeat to the first and last element in the range.\n         * @param element\n         * @param attrs\n         * @param repeatExpression\n         */\n        function addNgRepeatToElement(element, attrs, repeatExpression) {\n            if (element[0].hasAttribute('dir-paginate-start') || element[0].hasAttribute('data-dir-paginate-start')) {\n                // using multiElement mode (dir-paginate-start, dir-paginate-end)\n                attrs.$set('ngRepeatStart', repeatExpression);\n                element.eq(element.length - 1).attr('ng-repeat-end', true);\n            } else {\n                attrs.$set('ngRepeat', repeatExpression);\n            }\n        }\n\n        /**\n         * Adds the dir-paginate-no-compile directive to each element in the tElement range.\n         * @param tElement\n         */\n        function addNoCompileAttributes(tElement) {\n            angular.forEach(tElement, function(el) {\n                if (el.nodeType === 1) {\n                    angular.element(el).attr('dir-paginate-no-compile', true);\n                }\n            });\n        }\n\n        /**\n         * Removes the variations on dir-paginate (data-, -start, -end) and the dir-paginate-no-compile directives.\n         * @param element\n         */\n        function removeTemporaryAttributes(element) {\n            angular.forEach(element, function(el) {\n                if (el.nodeType === 1) {\n                    angular.element(el).removeAttr('dir-paginate-no-compile');\n                }\n            });\n            element.eq(0).removeAttr('dir-paginate-start').removeAttr('dir-paginate').removeAttr('data-dir-paginate-start').removeAttr('data-dir-paginate');\n            element.eq(element.length - 1).removeAttr('dir-paginate-end').removeAttr('data-dir-paginate-end');\n        }\n\n        /**\n         * Creates a getter function for the current-page attribute, using the expression provided or a default value if\n         * no current-page expression was specified.\n         *\n         * @param scope\n         * @param attrs\n         * @param paginationId\n         * @returns {*}\n         */\n        function makeCurrentPageGetterFn(scope, attrs, paginationId) {\n            var currentPageGetter;\n            if (attrs.currentPage) {\n                currentPageGetter = $parse(attrs.currentPage);\n            } else {\n                // If the current-page attribute was not set, we'll make our own.\n                // Replace any non-alphanumeric characters which might confuse\n                // the $parse service and give unexpected results.\n                // See https://github.com/michaelbromley/angularUtils/issues/233\n                var defaultCurrentPage = (paginationId + '__currentPage').replace(/\\W/g, '_');\n                scope[defaultCurrentPage] = 1;\n                currentPageGetter = $parse(defaultCurrentPage);\n            }\n            return currentPageGetter;\n        }\n    }\n\n    /**\n     * This is a helper directive that allows correct compilation when in multi-element mode (ie dir-paginate-start, dir-paginate-end).\n     * It is dynamically added to all elements in the dir-paginate compile function, and it prevents further compilation of\n     * any inner directives. It is then removed in the link function, and all inner directives are then manually compiled.\n     */\n    function noCompileDirective() {\n        return {\n            priority: 5000,\n            terminal: true\n        };\n    }\n\n    function dirPaginationControlsTemplateInstaller($templateCache) {\n        $templateCache.put('angularUtils.directives.dirPagination.template', '<ul class=\"pagination\" ng-if=\"1 < pages.length || !autoHide\"><li ng-if=\"boundaryLinks\" ng-class=\"{ disabled : pagination.current == 1 }\"><a href=\"\" ng-click=\"setCurrent(1)\">&laquo;</a></li><li ng-if=\"directionLinks\" ng-class=\"{ disabled : pagination.current == 1 }\"><a href=\"\" ng-click=\"setCurrent(pagination.current - 1)\">&lsaquo;</a></li><li ng-repeat=\"pageNumber in pages track by tracker(pageNumber, $index)\" ng-class=\"{ active : pagination.current == pageNumber, disabled : pageNumber == \\'...\\' || ( ! autoHide && pages.length === 1 ) }\"><a href=\"\" ng-click=\"setCurrent(pageNumber)\">{{ pageNumber }}</a></li><li ng-if=\"directionLinks\" ng-class=\"{ disabled : pagination.current == pagination.last }\"><a href=\"\" ng-click=\"setCurrent(pagination.current + 1)\">&rsaquo;</a></li><li ng-if=\"boundaryLinks\"  ng-class=\"{ disabled : pagination.current == pagination.last }\"><a href=\"\" ng-click=\"setCurrent(pagination.last)\">&raquo;</a></li></ul>');\n    }\n\n    function dirPaginationControlsDirective(paginationService, paginationTemplate) {\n\n        var numberRegex = /^\\d+$/;\n\n        return {\n            restrict: 'AE',\n            templateUrl: function(elem, attrs) {\n                return attrs.templateUrl || paginationTemplate.getPath();\n            },\n            scope: {\n                maxSize: '=?',\n                onPageChange: '&?',\n                paginationId: '=?',\n                autoHide: '=?'\n            },\n            link: dirPaginationControlsLinkFn\n        };\n\n        function dirPaginationControlsLinkFn(scope, element, attrs) {\n\n            // rawId is the un-interpolated value of the pagination-id attribute. This is only important when the corresponding dir-paginate directive has\n            // not yet been linked (e.g. if it is inside an ng-if block), and in that case it prevents this controls directive from assuming that there is\n            // no corresponding dir-paginate directive and wrongly throwing an exception.\n            var rawId = attrs.paginationId ||  DEFAULT_ID;\n            var paginationId = scope.paginationId || attrs.paginationId ||  DEFAULT_ID;\n\n            if (!paginationService.isRegistered(paginationId) && !paginationService.isRegistered(rawId)) {\n                var idMessage = (paginationId !== DEFAULT_ID) ? ' (id: ' + paginationId + ') ' : ' ';\n                console.warn('Pagination directive: the pagination controls' + idMessage + 'cannot be used without the corresponding pagination directive, which was not found at link time.');\n            }\n\n            if (!scope.maxSize) { scope.maxSize = 9; }\n            scope.autoHide = scope.autoHide === undefined ? true : scope.autoHide;\n            scope.directionLinks = angular.isDefined(attrs.directionLinks) ? scope.$parent.$eval(attrs.directionLinks) : true;\n            scope.boundaryLinks = angular.isDefined(attrs.boundaryLinks) ? scope.$parent.$eval(attrs.boundaryLinks) : false;\n\n            var paginationRange = Math.max(scope.maxSize, 5);\n            scope.pages = [];\n            scope.pagination = {\n                last: 1,\n                current: 1\n            };\n            scope.range = {\n                lower: 1,\n                upper: 1,\n                total: 1\n            };\n\n            scope.$watch(function() {\n                if (paginationService.isRegistered(paginationId)) {\n                    return (paginationService.getCollectionLength(paginationId) + 1) * paginationService.getItemsPerPage(paginationId);\n                }\n            }, function(length) {\n                if (0 < length) {\n                    generatePagination();\n                }\n            });\n\n            scope.$watch(function() {\n                if (paginationService.isRegistered(paginationId)) {\n                    return (paginationService.getItemsPerPage(paginationId));\n                }\n            }, function(current, previous) {\n                if (current != previous && typeof previous !== 'undefined') {\n                    goToPage(scope.pagination.current);\n                }\n            });\n\n            scope.$watch(function() {\n                if (paginationService.isRegistered(paginationId)) {\n                    return paginationService.getCurrentPage(paginationId);\n                }\n            }, function(currentPage, previousPage) {\n                if (currentPage != previousPage) {\n                    goToPage(currentPage);\n                }\n            });\n\n            scope.setCurrent = function(num) {\n                if (paginationService.isRegistered(paginationId) && isValidPageNumber(num)) {\n                    num = parseInt(num, 10);\n                    paginationService.setCurrentPage(paginationId, num);\n                }\n            };\n\n            /**\n             * Custom \"track by\" function which allows for duplicate \"...\" entries on long lists,\n             * yet fixes the problem of wrongly-highlighted links which happens when using\n             * \"track by $index\" - see https://github.com/michaelbromley/angularUtils/issues/153\n             * @param id\n             * @param index\n             * @returns {string}\n             */\n            scope.tracker = function(id, index) {\n                return id + '_' + index;\n            };\n\n            function goToPage(num) {\n                if (paginationService.isRegistered(paginationId) && isValidPageNumber(num)) {\n                    scope.pages = generatePagesArray(num, paginationService.getCollectionLength(paginationId), paginationService.getItemsPerPage(paginationId), paginationRange);\n                    scope.pagination.current = num;\n                    updateRangeValues();\n\n                    // if a callback has been set, then call it with the page number as an argument\n                    if (scope.onPageChange) {\n                        scope.onPageChange({ newPageNumber : num });\n                    }\n                }\n            }\n\n            function generatePagination() {\n                if (paginationService.isRegistered(paginationId)) {\n                    var page = parseInt(paginationService.getCurrentPage(paginationId)) || 1;\n                    scope.pages = generatePagesArray(page, paginationService.getCollectionLength(paginationId), paginationService.getItemsPerPage(paginationId), paginationRange);\n                    scope.pagination.current = page;\n                    scope.pagination.last = scope.pages[scope.pages.length - 1];\n                    if (scope.pagination.last < scope.pagination.current) {\n                        scope.setCurrent(scope.pagination.last);\n                    } else {\n                        updateRangeValues();\n                    }\n                }\n            }\n\n            /**\n             * This function updates the values (lower, upper, total) of the `scope.range` object, which can be used in the pagination\n             * template to display the current page range, e.g. \"showing 21 - 40 of 144 results\";\n             */\n            function updateRangeValues() {\n                if (paginationService.isRegistered(paginationId)) {\n                    var currentPage = paginationService.getCurrentPage(paginationId),\n                        itemsPerPage = paginationService.getItemsPerPage(paginationId),\n                        totalItems = paginationService.getCollectionLength(paginationId);\n\n                    scope.range.lower = (currentPage - 1) * itemsPerPage + 1;\n                    scope.range.upper = Math.min(currentPage * itemsPerPage, totalItems);\n                    scope.range.total = totalItems;\n                }\n            }\n            function isValidPageNumber(num) {\n                return (numberRegex.test(num) && (0 < num && num <= scope.pagination.last));\n            }\n        }\n\n        /**\n         * Generate an array of page numbers (or the '...' string) which is used in an ng-repeat to generate the\n         * links used in pagination\n         *\n         * @param currentPage\n         * @param rowsPerPage\n         * @param paginationRange\n         * @param collectionLength\n         * @returns {Array}\n         */\n        function generatePagesArray(currentPage, collectionLength, rowsPerPage, paginationRange) {\n            var pages = [];\n            var totalPages = Math.ceil(collectionLength / rowsPerPage);\n            var halfWay = Math.ceil(paginationRange / 2);\n            var position;\n\n            if (currentPage <= halfWay) {\n                position = 'start';\n            } else if (totalPages - halfWay < currentPage) {\n                position = 'end';\n            } else {\n                position = 'middle';\n            }\n\n            var ellipsesNeeded = paginationRange < totalPages;\n            var i = 1;\n            while (i <= totalPages && i <= paginationRange) {\n                var pageNumber = calculatePageNumber(i, currentPage, paginationRange, totalPages);\n\n                var openingEllipsesNeeded = (i === 2 && (position === 'middle' || position === 'end'));\n                var closingEllipsesNeeded = (i === paginationRange - 1 && (position === 'middle' || position === 'start'));\n                if (ellipsesNeeded && (openingEllipsesNeeded || closingEllipsesNeeded)) {\n                    pages.push('...');\n                } else {\n                    pages.push(pageNumber);\n                }\n                i ++;\n            }\n            return pages;\n        }\n\n        /**\n         * Given the position in the sequence of pagination links [i], figure out what page number corresponds to that position.\n         *\n         * @param i\n         * @param currentPage\n         * @param paginationRange\n         * @param totalPages\n         * @returns {*}\n         */\n        function calculatePageNumber(i, currentPage, paginationRange, totalPages) {\n            var halfWay = Math.ceil(paginationRange/2);\n            if (i === paginationRange) {\n                return totalPages;\n            } else if (i === 1) {\n                return i;\n            } else if (paginationRange < totalPages) {\n                if (totalPages - halfWay < currentPage) {\n                    return totalPages - paginationRange + i;\n                } else if (halfWay < currentPage) {\n                    return currentPage - halfWay + i;\n                } else {\n                    return i;\n                }\n            } else {\n                return i;\n            }\n        }\n    }\n\n    /**\n     * This filter slices the collection into pages based on the current page number and number of items per page.\n     * @param paginationService\n     * @returns {Function}\n     */\n    function itemsPerPageFilter(paginationService) {\n\n        return function(collection, itemsPerPage, paginationId) {\n            if (typeof (paginationId) === 'undefined') {\n                paginationId = DEFAULT_ID;\n            }\n            if (!paginationService.isRegistered(paginationId)) {\n                throw 'pagination directive: the itemsPerPage id argument (id: ' + paginationId + ') does not match a registered pagination-id.';\n            }\n            var end;\n            var start;\n            if (angular.isObject(collection)) {\n                itemsPerPage = parseInt(itemsPerPage) || 9999999999;\n                if (paginationService.isAsyncMode(paginationId)) {\n                    start = 0;\n                } else {\n                    start = (paginationService.getCurrentPage(paginationId) - 1) * itemsPerPage;\n                }\n                end = start + itemsPerPage;\n                paginationService.setItemsPerPage(paginationId, itemsPerPage);\n\n                if (collection instanceof Array) {\n                    // the array just needs to be sliced\n                    return collection.slice(start, end);\n                } else {\n                    // in the case of an object, we need to get an array of keys, slice that, then map back to\n                    // the original object.\n                    var slicedObject = {};\n                    angular.forEach(keys(collection).slice(start, end), function(key) {\n                        slicedObject[key] = collection[key];\n                    });\n                    return slicedObject;\n                }\n            } else {\n                return collection;\n            }\n        };\n    }\n\n    /**\n     * Shim for the Object.keys() method which does not exist in IE < 9\n     * @param obj\n     * @returns {Array}\n     */\n    function keys(obj) {\n        if (!Object.keys) {\n            var objKeys = [];\n            for (var i in obj) {\n                if (obj.hasOwnProperty(i)) {\n                    objKeys.push(i);\n                }\n            }\n            return objKeys;\n        } else {\n            return Object.keys(obj);\n        }\n    }\n\n    /**\n     * This service allows the various parts of the module to communicate and stay in sync.\n     */\n    function paginationService() {\n\n        var instances = {};\n        var lastRegisteredInstance;\n\n        this.registerInstance = function(instanceId) {\n            if (typeof instances[instanceId] === 'undefined') {\n                instances[instanceId] = {\n                    asyncMode: false\n                };\n                lastRegisteredInstance = instanceId;\n            }\n        };\n\n        this.isRegistered = function(instanceId) {\n            return (typeof instances[instanceId] !== 'undefined');\n        };\n\n        this.getLastInstanceId = function() {\n            return lastRegisteredInstance;\n        };\n\n        this.setCurrentPageParser = function(instanceId, val, scope) {\n            instances[instanceId].currentPageParser = val;\n            instances[instanceId].context = scope;\n        };\n        this.setCurrentPage = function(instanceId, val) {\n            instances[instanceId].currentPageParser.assign(instances[instanceId].context, val);\n        };\n        this.getCurrentPage = function(instanceId) {\n            var parser = instances[instanceId].currentPageParser;\n            return parser ? parser(instances[instanceId].context) : 1;\n        };\n\n        this.setItemsPerPage = function(instanceId, val) {\n            instances[instanceId].itemsPerPage = val;\n        };\n        this.getItemsPerPage = function(instanceId) {\n            return instances[instanceId].itemsPerPage;\n        };\n\n        this.setCollectionLength = function(instanceId, val) {\n            instances[instanceId].collectionLength = val;\n        };\n        this.getCollectionLength = function(instanceId) {\n            return instances[instanceId].collectionLength;\n        };\n\n        this.setAsyncModeTrue = function(instanceId) {\n            instances[instanceId].asyncMode = true;\n        };\n\n        this.isAsyncMode = function(instanceId) {\n            return instances[instanceId].asyncMode;\n        };\n    }\n\n    /**\n     * This provider allows global configuration of the template path used by the dir-pagination-controls directive.\n     */\n    function paginationTemplateProvider() {\n\n        var templatePath = 'angularUtils.directives.dirPagination.template';\n\n        this.setPath = function(path) {\n            templatePath = path;\n        };\n\n        this.$get = function() {\n            return {\n                getPath: function() {\n                    return templatePath;\n                }\n            };\n        };\n    }\n})();\n"]}}]