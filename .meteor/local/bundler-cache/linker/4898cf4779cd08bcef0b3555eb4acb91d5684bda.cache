[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\n\n(function(){\n\n///////////////////////////////////////////////////////////////////////\n//                                                                   //\n// packages/angularui_angular-ui-bootstrap/packages/angularui_angula //\n//                                                                   //\n///////////////////////////////////////////////////////////////////////\n                                                                     //\n(function () {                                                       // 1\n                                                                     // 2\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/angularui:angular-ui-bootstrap/ui-bootstrap-tpls.js                                                       //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n/*                                                                                                                    // 1\n * angular-ui-bootstrap                                                                                               // 2\n * http://angular-ui.github.io/bootstrap/                                                                             // 3\n                                                                                                                      // 4\n * Version: 0.13.0 - 2015-05-02                                                                                       // 5\n * License: MIT                                                                                                       // 6\n */                                                                                                                   // 7\nangular.module(\"ui.bootstrap\", [\"ui.bootstrap.tpls\", \"ui.bootstrap.collapse\",\"ui.bootstrap.accordion\",\"ui.bootstrap.alert\",\"ui.bootstrap.bindHtml\",\"ui.bootstrap.buttons\",\"ui.bootstrap.carousel\",\"ui.bootstrap.dateparser\",\"ui.bootstrap.position\",\"ui.bootstrap.datepicker\",\"ui.bootstrap.dropdown\",\"ui.bootstrap.modal\",\"ui.bootstrap.pagination\",\"ui.bootstrap.tooltip\",\"ui.bootstrap.popover\",\"ui.bootstrap.progressbar\",\"ui.bootstrap.rating\",\"ui.bootstrap.tabs\",\"ui.bootstrap.timepicker\",\"ui.bootstrap.transition\",\"ui.bootstrap.typeahead\"]);\nangular.module(\"ui.bootstrap.tpls\", [\"template/accordion/accordion-group.html\",\"template/accordion/accordion.html\",\"template/alert/alert.html\",\"template/carousel/carousel.html\",\"template/carousel/slide.html\",\"template/datepicker/datepicker.html\",\"template/datepicker/day.html\",\"template/datepicker/month.html\",\"template/datepicker/popup.html\",\"template/datepicker/year.html\",\"template/modal/backdrop.html\",\"template/modal/window.html\",\"template/pagination/pager.html\",\"template/pagination/pagination.html\",\"template/tooltip/tooltip-html-popup.html\",\"template/tooltip/tooltip-html-unsafe-popup.html\",\"template/tooltip/tooltip-popup.html\",\"template/tooltip/tooltip-template-popup.html\",\"template/popover/popover-template.html\",\"template/popover/popover.html\",\"template/progressbar/bar.html\",\"template/progressbar/progress.html\",\"template/progressbar/progressbar.html\",\"template/rating/rating.html\",\"template/tabs/tab.html\",\"template/tabs/tabset.html\",\"template/timepicker/timepicker.html\",\"template/typeahead/typeahead-match.html\",\"template/typeahead/typeahead-popup.html\"]);\nangular.module('ui.bootstrap.collapse', [])                                                                           // 10\n                                                                                                                      // 11\n  .directive('collapse', ['$animate', function ($animate) {                                                           // 12\n                                                                                                                      // 13\n    return {                                                                                                          // 14\n      link: function (scope, element, attrs) {                                                                        // 15\n        function expand() {                                                                                           // 16\n          element.removeClass('collapse').addClass('collapsing');                                                     // 17\n          $animate.addClass(element, 'in', {                                                                          // 18\n            to: { height: element[0].scrollHeight + 'px' }                                                            // 19\n          }).then(expandDone);                                                                                        // 20\n        }                                                                                                             // 21\n                                                                                                                      // 22\n        function expandDone() {                                                                                       // 23\n          element.removeClass('collapsing');                                                                          // 24\n          element.css({height: 'auto'});                                                                              // 25\n        }                                                                                                             // 26\n                                                                                                                      // 27\n        function collapse() {                                                                                         // 28\n          element                                                                                                     // 29\n            // IMPORTANT: The height must be set before adding \"collapsing\" class.                                    // 30\n            // Otherwise, the browser attempts to animate from height 0 (in                                           // 31\n            // collapsing class) to the given height here.                                                            // 32\n            .css({height: element[0].scrollHeight + 'px'})                                                            // 33\n            // initially all panel collapse have the collapse class, this removal                                     // 34\n            // prevents the animation from jumping to collapsed state                                                 // 35\n            .removeClass('collapse')                                                                                  // 36\n            .addClass('collapsing');                                                                                  // 37\n                                                                                                                      // 38\n          $animate.removeClass(element, 'in', {                                                                       // 39\n            to: {height: '0'}                                                                                         // 40\n          }).then(collapseDone);                                                                                      // 41\n        }                                                                                                             // 42\n                                                                                                                      // 43\n        function collapseDone() {                                                                                     // 44\n          element.css({height: '0'}); // Required so that collapse works when animation is disabled                   // 45\n          element.removeClass('collapsing');                                                                          // 46\n          element.addClass('collapse');                                                                               // 47\n        }                                                                                                             // 48\n                                                                                                                      // 49\n        scope.$watch(attrs.collapse, function (shouldCollapse) {                                                      // 50\n          if (shouldCollapse) {                                                                                       // 51\n            collapse();                                                                                               // 52\n          } else {                                                                                                    // 53\n            expand();                                                                                                 // 54\n          }                                                                                                           // 55\n        });                                                                                                           // 56\n      }                                                                                                               // 57\n    };                                                                                                                // 58\n  }]);                                                                                                                // 59\n                                                                                                                      // 60\nangular.module('ui.bootstrap.accordion', ['ui.bootstrap.collapse'])                                                   // 61\n                                                                                                                      // 62\n.constant('accordionConfig', {                                                                                        // 63\n  closeOthers: true                                                                                                   // 64\n})                                                                                                                    // 65\n                                                                                                                      // 66\n.controller('AccordionController', ['$scope', '$attrs', 'accordionConfig', function ($scope, $attrs, accordionConfig) {\n                                                                                                                      // 68\n  // This array keeps track of the accordion groups                                                                   // 69\n  this.groups = [];                                                                                                   // 70\n                                                                                                                      // 71\n  // Ensure that all the groups in this accordion are closed, unless close-others explicitly says not to              // 72\n  this.closeOthers = function(openGroup) {                                                                            // 73\n    var closeOthers = angular.isDefined($attrs.closeOthers) ? $scope.$eval($attrs.closeOthers) : accordionConfig.closeOthers;\n    if ( closeOthers ) {                                                                                              // 75\n      angular.forEach(this.groups, function (group) {                                                                 // 76\n        if ( group !== openGroup ) {                                                                                  // 77\n          group.isOpen = false;                                                                                       // 78\n        }                                                                                                             // 79\n      });                                                                                                             // 80\n    }                                                                                                                 // 81\n  };                                                                                                                  // 82\n                                                                                                                      // 83\n  // This is called from the accordion-group directive to add itself to the accordion                                 // 84\n  this.addGroup = function(groupScope) {                                                                              // 85\n    var that = this;                                                                                                  // 86\n    this.groups.push(groupScope);                                                                                     // 87\n                                                                                                                      // 88\n    groupScope.$on('$destroy', function (event) {                                                                     // 89\n      that.removeGroup(groupScope);                                                                                   // 90\n    });                                                                                                               // 91\n  };                                                                                                                  // 92\n                                                                                                                      // 93\n  // This is called from the accordion-group directive when to remove itself                                          // 94\n  this.removeGroup = function(group) {                                                                                // 95\n    var index = this.groups.indexOf(group);                                                                           // 96\n    if ( index !== -1 ) {                                                                                             // 97\n      this.groups.splice(index, 1);                                                                                   // 98\n    }                                                                                                                 // 99\n  };                                                                                                                  // 100\n                                                                                                                      // 101\n}])                                                                                                                   // 102\n                                                                                                                      // 103\n// The accordion directive simply sets up the directive controller                                                    // 104\n// and adds an accordion CSS class to itself element.                                                                 // 105\n.directive('accordion', function () {                                                                                 // 106\n  return {                                                                                                            // 107\n    restrict:'EA',                                                                                                    // 108\n    controller:'AccordionController',                                                                                 // 109\n    transclude: true,                                                                                                 // 110\n    replace: false,                                                                                                   // 111\n    templateUrl: 'template/accordion/accordion.html'                                                                  // 112\n  };                                                                                                                  // 113\n})                                                                                                                    // 114\n                                                                                                                      // 115\n// The accordion-group directive indicates a block of html that will expand and collapse in an accordion              // 116\n.directive('accordionGroup', function() {                                                                             // 117\n  return {                                                                                                            // 118\n    require:'^accordion',         // We need this directive to be inside an accordion                                 // 119\n    restrict:'EA',                                                                                                    // 120\n    transclude:true,              // It transcludes the contents of the directive into the template                   // 121\n    replace: true,                // The element containing the directive will be replaced with the template          // 122\n    templateUrl:'template/accordion/accordion-group.html',                                                            // 123\n    scope: {                                                                                                          // 124\n      heading: '@',               // Interpolate the heading attribute onto this scope                                // 125\n      isOpen: '=?',                                                                                                   // 126\n      isDisabled: '=?'                                                                                                // 127\n    },                                                                                                                // 128\n    controller: function() {                                                                                          // 129\n      this.setHeading = function(element) {                                                                           // 130\n        this.heading = element;                                                                                       // 131\n      };                                                                                                              // 132\n    },                                                                                                                // 133\n    link: function(scope, element, attrs, accordionCtrl) {                                                            // 134\n      accordionCtrl.addGroup(scope);                                                                                  // 135\n                                                                                                                      // 136\n      scope.$watch('isOpen', function(value) {                                                                        // 137\n        if ( value ) {                                                                                                // 138\n          accordionCtrl.closeOthers(scope);                                                                           // 139\n        }                                                                                                             // 140\n      });                                                                                                             // 141\n                                                                                                                      // 142\n      scope.toggleOpen = function() {                                                                                 // 143\n        if ( !scope.isDisabled ) {                                                                                    // 144\n          scope.isOpen = !scope.isOpen;                                                                               // 145\n        }                                                                                                             // 146\n      };                                                                                                              // 147\n    }                                                                                                                 // 148\n  };                                                                                                                  // 149\n})                                                                                                                    // 150\n                                                                                                                      // 151\n// Use accordion-heading below an accordion-group to provide a heading containing HTML                                // 152\n// <accordion-group>                                                                                                  // 153\n//   <accordion-heading>Heading containing HTML - <img src=\"...\"></accordion-heading>                                 // 154\n// </accordion-group>                                                                                                 // 155\n.directive('accordionHeading', function() {                                                                           // 156\n  return {                                                                                                            // 157\n    restrict: 'EA',                                                                                                   // 158\n    transclude: true,   // Grab the contents to be used as the heading                                                // 159\n    template: '',       // In effect remove this element!                                                             // 160\n    replace: true,                                                                                                    // 161\n    require: '^accordionGroup',                                                                                       // 162\n    link: function(scope, element, attr, accordionGroupCtrl, transclude) {                                            // 163\n      // Pass the heading to the accordion-group controller                                                           // 164\n      // so that it can be transcluded into the right place in the template                                           // 165\n      // [The second parameter to transclude causes the elements to be cloned so that they work in ng-repeat]         // 166\n      accordionGroupCtrl.setHeading(transclude(scope, angular.noop));                                                 // 167\n    }                                                                                                                 // 168\n  };                                                                                                                  // 169\n})                                                                                                                    // 170\n                                                                                                                      // 171\n// Use in the accordion-group template to indicate where you want the heading to be transcluded                       // 172\n// You must provide the property on the accordion-group controller that will hold the transcluded element             // 173\n// <div class=\"accordion-group\">                                                                                      // 174\n//   <div class=\"accordion-heading\" ><a ... accordion-transclude=\"heading\">...</a></div>                              // 175\n//   ...                                                                                                              // 176\n// </div>                                                                                                             // 177\n.directive('accordionTransclude', function() {                                                                        // 178\n  return {                                                                                                            // 179\n    require: '^accordionGroup',                                                                                       // 180\n    link: function(scope, element, attr, controller) {                                                                // 181\n      scope.$watch(function() { return controller[attr.accordionTransclude]; }, function(heading) {                   // 182\n        if ( heading ) {                                                                                              // 183\n          element.html('');                                                                                           // 184\n          element.append(heading);                                                                                    // 185\n        }                                                                                                             // 186\n      });                                                                                                             // 187\n    }                                                                                                                 // 188\n  };                                                                                                                  // 189\n})                                                                                                                    // 190\n                                                                                                                      // 191\n;                                                                                                                     // 192\n                                                                                                                      // 193\nangular.module('ui.bootstrap.alert', [])                                                                              // 194\n                                                                                                                      // 195\n.controller('AlertController', ['$scope', '$attrs', function ($scope, $attrs) {                                       // 196\n  $scope.closeable = 'close' in $attrs;                                                                               // 197\n  this.close = $scope.close;                                                                                          // 198\n}])                                                                                                                   // 199\n                                                                                                                      // 200\n.directive('alert', function () {                                                                                     // 201\n  return {                                                                                                            // 202\n    restrict:'EA',                                                                                                    // 203\n    controller:'AlertController',                                                                                     // 204\n    templateUrl:'template/alert/alert.html',                                                                          // 205\n    transclude:true,                                                                                                  // 206\n    replace:true,                                                                                                     // 207\n    scope: {                                                                                                          // 208\n      type: '@',                                                                                                      // 209\n      close: '&'                                                                                                      // 210\n    }                                                                                                                 // 211\n  };                                                                                                                  // 212\n})                                                                                                                    // 213\n                                                                                                                      // 214\n.directive('dismissOnTimeout', ['$timeout', function($timeout) {                                                      // 215\n  return {                                                                                                            // 216\n    require: 'alert',                                                                                                 // 217\n    link: function(scope, element, attrs, alertCtrl) {                                                                // 218\n      $timeout(function(){                                                                                            // 219\n        alertCtrl.close();                                                                                            // 220\n      }, parseInt(attrs.dismissOnTimeout, 10));                                                                       // 221\n    }                                                                                                                 // 222\n  };                                                                                                                  // 223\n}]);                                                                                                                  // 224\n                                                                                                                      // 225\nangular.module('ui.bootstrap.bindHtml', [])                                                                           // 226\n                                                                                                                      // 227\n  .directive('bindHtmlUnsafe', function () {                                                                          // 228\n    return function (scope, element, attr) {                                                                          // 229\n      element.addClass('ng-binding').data('$binding', attr.bindHtmlUnsafe);                                           // 230\n      scope.$watch(attr.bindHtmlUnsafe, function bindHtmlUnsafeWatchAction(value) {                                   // 231\n        element.html(value || '');                                                                                    // 232\n      });                                                                                                             // 233\n    };                                                                                                                // 234\n  });                                                                                                                 // 235\nangular.module('ui.bootstrap.buttons', [])                                                                            // 236\n                                                                                                                      // 237\n.constant('buttonConfig', {                                                                                           // 238\n  activeClass: 'active',                                                                                              // 239\n  toggleEvent: 'click'                                                                                                // 240\n})                                                                                                                    // 241\n                                                                                                                      // 242\n.controller('ButtonsController', ['buttonConfig', function(buttonConfig) {                                            // 243\n  this.activeClass = buttonConfig.activeClass || 'active';                                                            // 244\n  this.toggleEvent = buttonConfig.toggleEvent || 'click';                                                             // 245\n}])                                                                                                                   // 246\n                                                                                                                      // 247\n.directive('btnRadio', function () {                                                                                  // 248\n  return {                                                                                                            // 249\n    require: ['btnRadio', 'ngModel'],                                                                                 // 250\n    controller: 'ButtonsController',                                                                                  // 251\n    link: function (scope, element, attrs, ctrls) {                                                                   // 252\n      var buttonsCtrl = ctrls[0], ngModelCtrl = ctrls[1];                                                             // 253\n                                                                                                                      // 254\n      //model -> UI                                                                                                   // 255\n      ngModelCtrl.$render = function () {                                                                             // 256\n        element.toggleClass(buttonsCtrl.activeClass, angular.equals(ngModelCtrl.$modelValue, scope.$eval(attrs.btnRadio)));\n      };                                                                                                              // 258\n                                                                                                                      // 259\n      //ui->model                                                                                                     // 260\n      element.bind(buttonsCtrl.toggleEvent, function () {                                                             // 261\n        var isActive = element.hasClass(buttonsCtrl.activeClass);                                                     // 262\n                                                                                                                      // 263\n        if (!isActive || angular.isDefined(attrs.uncheckable)) {                                                      // 264\n          scope.$apply(function () {                                                                                  // 265\n            ngModelCtrl.$setViewValue(isActive ? null : scope.$eval(attrs.btnRadio));                                 // 266\n            ngModelCtrl.$render();                                                                                    // 267\n          });                                                                                                         // 268\n        }                                                                                                             // 269\n      });                                                                                                             // 270\n    }                                                                                                                 // 271\n  };                                                                                                                  // 272\n})                                                                                                                    // 273\n                                                                                                                      // 274\n.directive('btnCheckbox', function () {                                                                               // 275\n  return {                                                                                                            // 276\n    require: ['btnCheckbox', 'ngModel'],                                                                              // 277\n    controller: 'ButtonsController',                                                                                  // 278\n    link: function (scope, element, attrs, ctrls) {                                                                   // 279\n      var buttonsCtrl = ctrls[0], ngModelCtrl = ctrls[1];                                                             // 280\n                                                                                                                      // 281\n      function getTrueValue() {                                                                                       // 282\n        return getCheckboxValue(attrs.btnCheckboxTrue, true);                                                         // 283\n      }                                                                                                               // 284\n                                                                                                                      // 285\n      function getFalseValue() {                                                                                      // 286\n        return getCheckboxValue(attrs.btnCheckboxFalse, false);                                                       // 287\n      }                                                                                                               // 288\n                                                                                                                      // 289\n      function getCheckboxValue(attributeValue, defaultValue) {                                                       // 290\n        var val = scope.$eval(attributeValue);                                                                        // 291\n        return angular.isDefined(val) ? val : defaultValue;                                                           // 292\n      }                                                                                                               // 293\n                                                                                                                      // 294\n      //model -> UI                                                                                                   // 295\n      ngModelCtrl.$render = function () {                                                                             // 296\n        element.toggleClass(buttonsCtrl.activeClass, angular.equals(ngModelCtrl.$modelValue, getTrueValue()));        // 297\n      };                                                                                                              // 298\n                                                                                                                      // 299\n      //ui->model                                                                                                     // 300\n      element.bind(buttonsCtrl.toggleEvent, function () {                                                             // 301\n        scope.$apply(function () {                                                                                    // 302\n          ngModelCtrl.$setViewValue(element.hasClass(buttonsCtrl.activeClass) ? getFalseValue() : getTrueValue());    // 303\n          ngModelCtrl.$render();                                                                                      // 304\n        });                                                                                                           // 305\n      });                                                                                                             // 306\n    }                                                                                                                 // 307\n  };                                                                                                                  // 308\n});                                                                                                                   // 309\n                                                                                                                      // 310\n/**                                                                                                                   // 311\n* @ngdoc overview                                                                                                     // 312\n* @name ui.bootstrap.carousel                                                                                         // 313\n*                                                                                                                     // 314\n* @description                                                                                                        // 315\n* AngularJS version of an image carousel.                                                                             // 316\n*                                                                                                                     // 317\n*/                                                                                                                    // 318\nangular.module('ui.bootstrap.carousel', [])                                                                           // 319\n.controller('CarouselController', ['$scope', '$interval', '$animate', function ($scope, $interval, $animate) {        // 320\n  var self = this,                                                                                                    // 321\n    slides = self.slides = $scope.slides = [],                                                                        // 322\n    currentIndex = -1,                                                                                                // 323\n    currentInterval, isPlaying;                                                                                       // 324\n  self.currentSlide = null;                                                                                           // 325\n                                                                                                                      // 326\n  var destroyed = false;                                                                                              // 327\n  /* direction: \"prev\" or \"next\" */                                                                                   // 328\n  self.select = $scope.select = function(nextSlide, direction) {                                                      // 329\n    var nextIndex = self.indexOfSlide(nextSlide);                                                                     // 330\n    //Decide direction if it's not given                                                                              // 331\n    if (direction === undefined) {                                                                                    // 332\n      direction = nextIndex > self.getCurrentIndex() ? 'next' : 'prev';                                               // 333\n    }                                                                                                                 // 334\n    if (nextSlide && nextSlide !== self.currentSlide) {                                                               // 335\n      goNext();                                                                                                       // 336\n    }                                                                                                                 // 337\n    function goNext() {                                                                                               // 338\n      // Scope has been destroyed, stop here.                                                                         // 339\n      if (destroyed) { return; }                                                                                      // 340\n                                                                                                                      // 341\n      angular.extend(nextSlide, {direction: direction, active: true});                                                // 342\n      angular.extend(self.currentSlide || {}, {direction: direction, active: false});                                 // 343\n      if ($animate.enabled() && !$scope.noTransition && nextSlide.$element) {                                         // 344\n        $scope.$currentTransition = true;                                                                             // 345\n        nextSlide.$element.one('$animate:close', function closeFn() {                                                 // 346\n          $scope.$currentTransition = null;                                                                           // 347\n        });                                                                                                           // 348\n      }                                                                                                               // 349\n                                                                                                                      // 350\n      self.currentSlide = nextSlide;                                                                                  // 351\n      currentIndex = nextIndex;                                                                                       // 352\n      //every time you change slides, reset the timer                                                                 // 353\n      restartTimer();                                                                                                 // 354\n    }                                                                                                                 // 355\n  };                                                                                                                  // 356\n  $scope.$on('$destroy', function () {                                                                                // 357\n    destroyed = true;                                                                                                 // 358\n  });                                                                                                                 // 359\n                                                                                                                      // 360\n  function getSlideByIndex(index) {                                                                                   // 361\n    if (angular.isUndefined(slides[index].index)) {                                                                   // 362\n      return slides[index];                                                                                           // 363\n    }                                                                                                                 // 364\n    var i, len = slides.length;                                                                                       // 365\n    for (i = 0; i < slides.length; ++i) {                                                                             // 366\n      if (slides[i].index == index) {                                                                                 // 367\n        return slides[i];                                                                                             // 368\n      }                                                                                                               // 369\n    }                                                                                                                 // 370\n  }                                                                                                                   // 371\n                                                                                                                      // 372\n  self.getCurrentIndex = function() {                                                                                 // 373\n    if (self.currentSlide && angular.isDefined(self.currentSlide.index)) {                                            // 374\n      return +self.currentSlide.index;                                                                                // 375\n    }                                                                                                                 // 376\n    return currentIndex;                                                                                              // 377\n  };                                                                                                                  // 378\n                                                                                                                      // 379\n  /* Allow outside people to call indexOf on slides array */                                                          // 380\n  self.indexOfSlide = function(slide) {                                                                               // 381\n    return angular.isDefined(slide.index) ? +slide.index : slides.indexOf(slide);                                     // 382\n  };                                                                                                                  // 383\n                                                                                                                      // 384\n  $scope.next = function() {                                                                                          // 385\n    var newIndex = (self.getCurrentIndex() + 1) % slides.length;                                                      // 386\n                                                                                                                      // 387\n    //Prevent this user-triggered transition from occurring if there is already one in progress                       // 388\n    if (!$scope.$currentTransition) {                                                                                 // 389\n      return self.select(getSlideByIndex(newIndex), 'next');                                                          // 390\n    }                                                                                                                 // 391\n  };                                                                                                                  // 392\n                                                                                                                      // 393\n  $scope.prev = function() {                                                                                          // 394\n    var newIndex = self.getCurrentIndex() - 1 < 0 ? slides.length - 1 : self.getCurrentIndex() - 1;                   // 395\n                                                                                                                      // 396\n    //Prevent this user-triggered transition from occurring if there is already one in progress                       // 397\n    if (!$scope.$currentTransition) {                                                                                 // 398\n      return self.select(getSlideByIndex(newIndex), 'prev');                                                          // 399\n    }                                                                                                                 // 400\n  };                                                                                                                  // 401\n                                                                                                                      // 402\n  $scope.isActive = function(slide) {                                                                                 // 403\n     return self.currentSlide === slide;                                                                              // 404\n  };                                                                                                                  // 405\n                                                                                                                      // 406\n  $scope.$watch('interval', restartTimer);                                                                            // 407\n  $scope.$on('$destroy', resetTimer);                                                                                 // 408\n                                                                                                                      // 409\n  function restartTimer() {                                                                                           // 410\n    resetTimer();                                                                                                     // 411\n    var interval = +$scope.interval;                                                                                  // 412\n    if (!isNaN(interval) && interval > 0) {                                                                           // 413\n      currentInterval = $interval(timerFn, interval);                                                                 // 414\n    }                                                                                                                 // 415\n  }                                                                                                                   // 416\n                                                                                                                      // 417\n  function resetTimer() {                                                                                             // 418\n    if (currentInterval) {                                                                                            // 419\n      $interval.cancel(currentInterval);                                                                              // 420\n      currentInterval = null;                                                                                         // 421\n    }                                                                                                                 // 422\n  }                                                                                                                   // 423\n                                                                                                                      // 424\n  function timerFn() {                                                                                                // 425\n    var interval = +$scope.interval;                                                                                  // 426\n    if (isPlaying && !isNaN(interval) && interval > 0) {                                                              // 427\n      $scope.next();                                                                                                  // 428\n    } else {                                                                                                          // 429\n      $scope.pause();                                                                                                 // 430\n    }                                                                                                                 // 431\n  }                                                                                                                   // 432\n                                                                                                                      // 433\n  $scope.play = function() {                                                                                          // 434\n    if (!isPlaying) {                                                                                                 // 435\n      isPlaying = true;                                                                                               // 436\n      restartTimer();                                                                                                 // 437\n    }                                                                                                                 // 438\n  };                                                                                                                  // 439\n  $scope.pause = function() {                                                                                         // 440\n    if (!$scope.noPause) {                                                                                            // 441\n      isPlaying = false;                                                                                              // 442\n      resetTimer();                                                                                                   // 443\n    }                                                                                                                 // 444\n  };                                                                                                                  // 445\n                                                                                                                      // 446\n  self.addSlide = function(slide, element) {                                                                          // 447\n    slide.$element = element;                                                                                         // 448\n    slides.push(slide);                                                                                               // 449\n    //if this is the first slide or the slide is set to active, select it                                             // 450\n    if(slides.length === 1 || slide.active) {                                                                         // 451\n      self.select(slides[slides.length-1]);                                                                           // 452\n      if (slides.length == 1) {                                                                                       // 453\n        $scope.play();                                                                                                // 454\n      }                                                                                                               // 455\n    } else {                                                                                                          // 456\n      slide.active = false;                                                                                           // 457\n    }                                                                                                                 // 458\n  };                                                                                                                  // 459\n                                                                                                                      // 460\n  self.removeSlide = function(slide) {                                                                                // 461\n    if (angular.isDefined(slide.index)) {                                                                             // 462\n      slides.sort(function(a, b) {                                                                                    // 463\n        return +a.index > +b.index;                                                                                   // 464\n      });                                                                                                             // 465\n    }                                                                                                                 // 466\n    //get the index of the slide inside the carousel                                                                  // 467\n    var index = slides.indexOf(slide);                                                                                // 468\n    slides.splice(index, 1);                                                                                          // 469\n    if (slides.length > 0 && slide.active) {                                                                          // 470\n      if (index >= slides.length) {                                                                                   // 471\n        self.select(slides[index-1]);                                                                                 // 472\n      } else {                                                                                                        // 473\n        self.select(slides[index]);                                                                                   // 474\n      }                                                                                                               // 475\n    } else if (currentIndex > index) {                                                                                // 476\n      currentIndex--;                                                                                                 // 477\n    }                                                                                                                 // 478\n  };                                                                                                                  // 479\n                                                                                                                      // 480\n}])                                                                                                                   // 481\n                                                                                                                      // 482\n/**                                                                                                                   // 483\n * @ngdoc directive                                                                                                   // 484\n * @name ui.bootstrap.carousel.directive:carousel                                                                     // 485\n * @restrict EA                                                                                                       // 486\n *                                                                                                                    // 487\n * @description                                                                                                       // 488\n * Carousel is the outer container for a set of image 'slides' to showcase.                                           // 489\n *                                                                                                                    // 490\n * @param {number=} interval The time, in milliseconds, that it will take the carousel to go to the next slide.       // 491\n * @param {boolean=} noTransition Whether to disable transitions on the carousel.                                     // 492\n * @param {boolean=} noPause Whether to disable pausing on the carousel (by default, the carousel interval pauses on hover).\n *                                                                                                                    // 494\n * @example                                                                                                           // 495\n<example module=\"ui.bootstrap\">                                                                                       // 496\n  <file name=\"index.html\">                                                                                            // 497\n    <carousel>                                                                                                        // 498\n      <slide>                                                                                                         // 499\n        <img src=\"http://placekitten.com/150/150\" style=\"margin:auto;\">                                               // 500\n        <div class=\"carousel-caption\">                                                                                // 501\n          <p>Beautiful!</p>                                                                                           // 502\n        </div>                                                                                                        // 503\n      </slide>                                                                                                        // 504\n      <slide>                                                                                                         // 505\n        <img src=\"http://placekitten.com/100/150\" style=\"margin:auto;\">                                               // 506\n        <div class=\"carousel-caption\">                                                                                // 507\n          <p>D'aww!</p>                                                                                               // 508\n        </div>                                                                                                        // 509\n      </slide>                                                                                                        // 510\n    </carousel>                                                                                                       // 511\n  </file>                                                                                                             // 512\n  <file name=\"demo.css\">                                                                                              // 513\n    .carousel-indicators {                                                                                            // 514\n      top: auto;                                                                                                      // 515\n      bottom: 15px;                                                                                                   // 516\n    }                                                                                                                 // 517\n  </file>                                                                                                             // 518\n</example>                                                                                                            // 519\n */                                                                                                                   // 520\n.directive('carousel', [function() {                                                                                  // 521\n  return {                                                                                                            // 522\n    restrict: 'EA',                                                                                                   // 523\n    transclude: true,                                                                                                 // 524\n    replace: true,                                                                                                    // 525\n    controller: 'CarouselController',                                                                                 // 526\n    require: 'carousel',                                                                                              // 527\n    templateUrl: 'template/carousel/carousel.html',                                                                   // 528\n    scope: {                                                                                                          // 529\n      interval: '=',                                                                                                  // 530\n      noTransition: '=',                                                                                              // 531\n      noPause: '='                                                                                                    // 532\n    }                                                                                                                 // 533\n  };                                                                                                                  // 534\n}])                                                                                                                   // 535\n                                                                                                                      // 536\n/**                                                                                                                   // 537\n * @ngdoc directive                                                                                                   // 538\n * @name ui.bootstrap.carousel.directive:slide                                                                        // 539\n * @restrict EA                                                                                                       // 540\n *                                                                                                                    // 541\n * @description                                                                                                       // 542\n * Creates a slide inside a {@link ui.bootstrap.carousel.directive:carousel carousel}.  Must be placed as a child of a carousel element.\n *                                                                                                                    // 544\n * @param {boolean=} active Model binding, whether or not this slide is currently active.                             // 545\n * @param {number=} index The index of the slide. The slides will be sorted by this parameter.                        // 546\n *                                                                                                                    // 547\n * @example                                                                                                           // 548\n<example module=\"ui.bootstrap\">                                                                                       // 549\n  <file name=\"index.html\">                                                                                            // 550\n<div ng-controller=\"CarouselDemoCtrl\">                                                                                // 551\n  <carousel>                                                                                                          // 552\n    <slide ng-repeat=\"slide in slides\" active=\"slide.active\" index=\"$index\">                                          // 553\n      <img ng-src=\"{{slide.image}}\" style=\"margin:auto;\">                                                             // 554\n      <div class=\"carousel-caption\">                                                                                  // 555\n        <h4>Slide {{$index}}</h4>                                                                                     // 556\n        <p>{{slide.text}}</p>                                                                                         // 557\n      </div>                                                                                                          // 558\n    </slide>                                                                                                          // 559\n  </carousel>                                                                                                         // 560\n  Interval, in milliseconds: <input type=\"number\" ng-model=\"myInterval\">                                              // 561\n  <br />Enter a negative number to stop the interval.                                                                 // 562\n</div>                                                                                                                // 563\n  </file>                                                                                                             // 564\n  <file name=\"script.js\">                                                                                             // 565\nfunction CarouselDemoCtrl($scope) {                                                                                   // 566\n  $scope.myInterval = 5000;                                                                                           // 567\n}                                                                                                                     // 568\n  </file>                                                                                                             // 569\n  <file name=\"demo.css\">                                                                                              // 570\n    .carousel-indicators {                                                                                            // 571\n      top: auto;                                                                                                      // 572\n      bottom: 15px;                                                                                                   // 573\n    }                                                                                                                 // 574\n  </file>                                                                                                             // 575\n</example>                                                                                                            // 576\n*/                                                                                                                    // 577\n                                                                                                                      // 578\n.directive('slide', function() {                                                                                      // 579\n  return {                                                                                                            // 580\n    require: '^carousel',                                                                                             // 581\n    restrict: 'EA',                                                                                                   // 582\n    transclude: true,                                                                                                 // 583\n    replace: true,                                                                                                    // 584\n    templateUrl: 'template/carousel/slide.html',                                                                      // 585\n    scope: {                                                                                                          // 586\n      active: '=?',                                                                                                   // 587\n      index: '=?'                                                                                                     // 588\n    },                                                                                                                // 589\n    link: function (scope, element, attrs, carouselCtrl) {                                                            // 590\n      carouselCtrl.addSlide(scope, element);                                                                          // 591\n      //when the scope is destroyed then remove the slide from the current slides array                               // 592\n      scope.$on('$destroy', function() {                                                                              // 593\n        carouselCtrl.removeSlide(scope);                                                                              // 594\n      });                                                                                                             // 595\n                                                                                                                      // 596\n      scope.$watch('active', function(active) {                                                                       // 597\n        if (active) {                                                                                                 // 598\n          carouselCtrl.select(scope);                                                                                 // 599\n        }                                                                                                             // 600\n      });                                                                                                             // 601\n    }                                                                                                                 // 602\n  };                                                                                                                  // 603\n})                                                                                                                    // 604\n                                                                                                                      // 605\n.animation('.item', [                                                                                                 // 606\n         '$animate',                                                                                                  // 607\nfunction ($animate) {                                                                                                 // 608\n  return {                                                                                                            // 609\n    beforeAddClass: function (element, className, done) {                                                             // 610\n      // Due to transclusion, noTransition property is on parent's scope                                              // 611\n      if (className == 'active' && element.parent() &&                                                                // 612\n          !element.parent().scope().noTransition) {                                                                   // 613\n        var stopped = false;                                                                                          // 614\n        var direction = element.isolateScope().direction;                                                             // 615\n        var directionClass = direction == 'next' ? 'left' : 'right';                                                  // 616\n        element.addClass(direction);                                                                                  // 617\n        $animate.addClass(element, directionClass).then(function () {                                                 // 618\n          if (!stopped) {                                                                                             // 619\n            element.removeClass(directionClass + ' ' + direction);                                                    // 620\n          }                                                                                                           // 621\n          done();                                                                                                     // 622\n        });                                                                                                           // 623\n                                                                                                                      // 624\n        return function () {                                                                                          // 625\n          stopped = true;                                                                                             // 626\n        };                                                                                                            // 627\n      }                                                                                                               // 628\n      done();                                                                                                         // 629\n    },                                                                                                                // 630\n    beforeRemoveClass: function (element, className, done) {                                                          // 631\n      // Due to transclusion, noTransition property is on parent's scope                                              // 632\n      if (className == 'active' && element.parent() &&                                                                // 633\n          !element.parent().scope().noTransition) {                                                                   // 634\n        var stopped = false;                                                                                          // 635\n        var direction = element.isolateScope().direction;                                                             // 636\n        var directionClass = direction == 'next' ? 'left' : 'right';                                                  // 637\n        $animate.addClass(element, directionClass).then(function () {                                                 // 638\n          if (!stopped) {                                                                                             // 639\n            element.removeClass(directionClass);                                                                      // 640\n          }                                                                                                           // 641\n          done();                                                                                                     // 642\n        });                                                                                                           // 643\n        return function () {                                                                                          // 644\n          stopped = true;                                                                                             // 645\n        };                                                                                                            // 646\n      }                                                                                                               // 647\n      done();                                                                                                         // 648\n    }                                                                                                                 // 649\n  };                                                                                                                  // 650\n                                                                                                                      // 651\n}])                                                                                                                   // 652\n                                                                                                                      // 653\n                                                                                                                      // 654\n;                                                                                                                     // 655\n                                                                                                                      // 656\nangular.module('ui.bootstrap.dateparser', [])                                                                         // 657\n                                                                                                                      // 658\n.service('dateParser', ['$locale', 'orderByFilter', function($locale, orderByFilter) {                                // 659\n  // Pulled from https://github.com/mbostock/d3/blob/master/src/format/requote.js                                     // 660\n  var SPECIAL_CHARACTERS_REGEXP = /[\\\\\\^\\$\\*\\+\\?\\|\\[\\]\\(\\)\\.\\{\\}]/g;                                                  // 661\n                                                                                                                      // 662\n  this.parsers = {};                                                                                                  // 663\n                                                                                                                      // 664\n  var formatCodeToRegex = {                                                                                           // 665\n    'yyyy': {                                                                                                         // 666\n      regex: '\\\\d{4}',                                                                                                // 667\n      apply: function(value) { this.year = +value; }                                                                  // 668\n    },                                                                                                                // 669\n    'yy': {                                                                                                           // 670\n      regex: '\\\\d{2}',                                                                                                // 671\n      apply: function(value) { this.year = +value + 2000; }                                                           // 672\n    },                                                                                                                // 673\n    'y': {                                                                                                            // 674\n      regex: '\\\\d{1,4}',                                                                                              // 675\n      apply: function(value) { this.year = +value; }                                                                  // 676\n    },                                                                                                                // 677\n    'MMMM': {                                                                                                         // 678\n      regex: $locale.DATETIME_FORMATS.MONTH.join('|'),                                                                // 679\n      apply: function(value) { this.month = $locale.DATETIME_FORMATS.MONTH.indexOf(value); }                          // 680\n    },                                                                                                                // 681\n    'MMM': {                                                                                                          // 682\n      regex: $locale.DATETIME_FORMATS.SHORTMONTH.join('|'),                                                           // 683\n      apply: function(value) { this.month = $locale.DATETIME_FORMATS.SHORTMONTH.indexOf(value); }                     // 684\n    },                                                                                                                // 685\n    'MM': {                                                                                                           // 686\n      regex: '0[1-9]|1[0-2]',                                                                                         // 687\n      apply: function(value) { this.month = value - 1; }                                                              // 688\n    },                                                                                                                // 689\n    'M': {                                                                                                            // 690\n      regex: '[1-9]|1[0-2]',                                                                                          // 691\n      apply: function(value) { this.month = value - 1; }                                                              // 692\n    },                                                                                                                // 693\n    'dd': {                                                                                                           // 694\n      regex: '[0-2][0-9]{1}|3[0-1]{1}',                                                                               // 695\n      apply: function(value) { this.date = +value; }                                                                  // 696\n    },                                                                                                                // 697\n    'd': {                                                                                                            // 698\n      regex: '[1-2]?[0-9]{1}|3[0-1]{1}',                                                                              // 699\n      apply: function(value) { this.date = +value; }                                                                  // 700\n    },                                                                                                                // 701\n    'EEEE': {                                                                                                         // 702\n      regex: $locale.DATETIME_FORMATS.DAY.join('|')                                                                   // 703\n    },                                                                                                                // 704\n    'EEE': {                                                                                                          // 705\n      regex: $locale.DATETIME_FORMATS.SHORTDAY.join('|')                                                              // 706\n    },                                                                                                                // 707\n    'HH': {                                                                                                           // 708\n      regex: '(?:0|1)[0-9]|2[0-3]',                                                                                   // 709\n      apply: function(value) { this.hours = +value; }                                                                 // 710\n    },                                                                                                                // 711\n    'H': {                                                                                                            // 712\n      regex: '1?[0-9]|2[0-3]',                                                                                        // 713\n      apply: function(value) { this.hours = +value; }                                                                 // 714\n    },                                                                                                                // 715\n    'mm': {                                                                                                           // 716\n      regex: '[0-5][0-9]',                                                                                            // 717\n      apply: function(value) { this.minutes = +value; }                                                               // 718\n    },                                                                                                                // 719\n    'm': {                                                                                                            // 720\n      regex: '[0-9]|[1-5][0-9]',                                                                                      // 721\n      apply: function(value) { this.minutes = +value; }                                                               // 722\n    },                                                                                                                // 723\n    'sss': {                                                                                                          // 724\n      regex: '[0-9][0-9][0-9]',                                                                                       // 725\n      apply: function(value) { this.milliseconds = +value; }                                                          // 726\n    },                                                                                                                // 727\n    'ss': {                                                                                                           // 728\n      regex: '[0-5][0-9]',                                                                                            // 729\n      apply: function(value) { this.seconds = +value; }                                                               // 730\n    },                                                                                                                // 731\n    's': {                                                                                                            // 732\n      regex: '[0-9]|[1-5][0-9]',                                                                                      // 733\n      apply: function(value) { this.seconds = +value; }                                                               // 734\n    }                                                                                                                 // 735\n  };                                                                                                                  // 736\n                                                                                                                      // 737\n  function createParser(format) {                                                                                     // 738\n    var map = [], regex = format.split('');                                                                           // 739\n                                                                                                                      // 740\n    angular.forEach(formatCodeToRegex, function(data, code) {                                                         // 741\n      var index = format.indexOf(code);                                                                               // 742\n                                                                                                                      // 743\n      if (index > -1) {                                                                                               // 744\n        format = format.split('');                                                                                    // 745\n                                                                                                                      // 746\n        regex[index] = '(' + data.regex + ')';                                                                        // 747\n        format[index] = '$'; // Custom symbol to define consumed part of format                                       // 748\n        for (var i = index + 1, n = index + code.length; i < n; i++) {                                                // 749\n          regex[i] = '';                                                                                              // 750\n          format[i] = '$';                                                                                            // 751\n        }                                                                                                             // 752\n        format = format.join('');                                                                                     // 753\n                                                                                                                      // 754\n        map.push({ index: index, apply: data.apply });                                                                // 755\n      }                                                                                                               // 756\n    });                                                                                                               // 757\n                                                                                                                      // 758\n    return {                                                                                                          // 759\n      regex: new RegExp('^' + regex.join('') + '$'),                                                                  // 760\n      map: orderByFilter(map, 'index')                                                                                // 761\n    };                                                                                                                // 762\n  }                                                                                                                   // 763\n                                                                                                                      // 764\n  this.parse = function(input, format, baseDate) {                                                                    // 765\n    if ( !angular.isString(input) || !format ) {                                                                      // 766\n      return input;                                                                                                   // 767\n    }                                                                                                                 // 768\n                                                                                                                      // 769\n    format = $locale.DATETIME_FORMATS[format] || format;                                                              // 770\n    format = format.replace(SPECIAL_CHARACTERS_REGEXP, '\\\\$&');                                                       // 771\n                                                                                                                      // 772\n    if ( !this.parsers[format] ) {                                                                                    // 773\n      this.parsers[format] = createParser(format);                                                                    // 774\n    }                                                                                                                 // 775\n                                                                                                                      // 776\n    var parser = this.parsers[format],                                                                                // 777\n        regex = parser.regex,                                                                                         // 778\n        map = parser.map,                                                                                             // 779\n        results = input.match(regex);                                                                                 // 780\n                                                                                                                      // 781\n    if ( results && results.length ) {                                                                                // 782\n      var fields, dt;                                                                                                 // 783\n      if (baseDate) {                                                                                                 // 784\n        fields = {                                                                                                    // 785\n          year: baseDate.getFullYear(),                                                                               // 786\n          month: baseDate.getMonth(),                                                                                 // 787\n          date: baseDate.getDate(),                                                                                   // 788\n          hours: baseDate.getHours(),                                                                                 // 789\n          minutes: baseDate.getMinutes(),                                                                             // 790\n          seconds: baseDate.getSeconds(),                                                                             // 791\n          milliseconds: baseDate.getMilliseconds()                                                                    // 792\n        };                                                                                                            // 793\n      } else {                                                                                                        // 794\n        fields = { year: 1900, month: 0, date: 1, hours: 0, minutes: 0, seconds: 0, milliseconds: 0 };                // 795\n      }                                                                                                               // 796\n                                                                                                                      // 797\n      for( var i = 1, n = results.length; i < n; i++ ) {                                                              // 798\n        var mapper = map[i-1];                                                                                        // 799\n        if ( mapper.apply ) {                                                                                         // 800\n          mapper.apply.call(fields, results[i]);                                                                      // 801\n        }                                                                                                             // 802\n      }                                                                                                               // 803\n                                                                                                                      // 804\n      if ( isValid(fields.year, fields.month, fields.date) ) {                                                        // 805\n        dt = new Date(fields.year, fields.month, fields.date, fields.hours, fields.minutes, fields.seconds,           // 806\n          fields.milliseconds || 0);                                                                                  // 807\n      }                                                                                                               // 808\n                                                                                                                      // 809\n      return dt;                                                                                                      // 810\n    }                                                                                                                 // 811\n  };                                                                                                                  // 812\n                                                                                                                      // 813\n  // Check if date is valid for specific month (and year for February).                                               // 814\n  // Month: 0 = Jan, 1 = Feb, etc                                                                                     // 815\n  function isValid(year, month, date) {                                                                               // 816\n    if (date < 1) {                                                                                                   // 817\n      return false;                                                                                                   // 818\n    }                                                                                                                 // 819\n                                                                                                                      // 820\n    if ( month === 1 && date > 28) {                                                                                  // 821\n        return date === 29 && ((year % 4 === 0 && year % 100 !== 0) || year % 400 === 0);                             // 822\n    }                                                                                                                 // 823\n                                                                                                                      // 824\n    if ( month === 3 || month === 5 || month === 8 || month === 10) {                                                 // 825\n        return date < 31;                                                                                             // 826\n    }                                                                                                                 // 827\n                                                                                                                      // 828\n    return true;                                                                                                      // 829\n  }                                                                                                                   // 830\n}]);                                                                                                                  // 831\n                                                                                                                      // 832\nangular.module('ui.bootstrap.position', [])                                                                           // 833\n                                                                                                                      // 834\n/**                                                                                                                   // 835\n * A set of utility methods that can be use to retrieve position of DOM elements.                                     // 836\n * It is meant to be used where we need to absolute-position DOM elements in                                          // 837\n * relation to other, existing elements (this is the case for tooltips, popovers,                                     // 838\n * typeahead suggestions etc.).                                                                                       // 839\n */                                                                                                                   // 840\n  .factory('$position', ['$document', '$window', function ($document, $window) {                                      // 841\n                                                                                                                      // 842\n    function getStyle(el, cssprop) {                                                                                  // 843\n      if (el.currentStyle) { //IE                                                                                     // 844\n        return el.currentStyle[cssprop];                                                                              // 845\n      } else if ($window.getComputedStyle) {                                                                          // 846\n        return $window.getComputedStyle(el)[cssprop];                                                                 // 847\n      }                                                                                                               // 848\n      // finally try and get inline style                                                                             // 849\n      return el.style[cssprop];                                                                                       // 850\n    }                                                                                                                 // 851\n                                                                                                                      // 852\n    /**                                                                                                               // 853\n     * Checks if a given element is statically positioned                                                             // 854\n     * @param element - raw DOM element                                                                               // 855\n     */                                                                                                               // 856\n    function isStaticPositioned(element) {                                                                            // 857\n      return (getStyle(element, 'position') || 'static' ) === 'static';                                               // 858\n    }                                                                                                                 // 859\n                                                                                                                      // 860\n    /**                                                                                                               // 861\n     * returns the closest, non-statically positioned parentOffset of a given element                                 // 862\n     * @param element                                                                                                 // 863\n     */                                                                                                               // 864\n    var parentOffsetEl = function (element) {                                                                         // 865\n      var docDomEl = $document[0];                                                                                    // 866\n      var offsetParent = element.offsetParent || docDomEl;                                                            // 867\n      while (offsetParent && offsetParent !== docDomEl && isStaticPositioned(offsetParent) ) {                        // 868\n        offsetParent = offsetParent.offsetParent;                                                                     // 869\n      }                                                                                                               // 870\n      return offsetParent || docDomEl;                                                                                // 871\n    };                                                                                                                // 872\n                                                                                                                      // 873\n    return {                                                                                                          // 874\n      /**                                                                                                             // 875\n       * Provides read-only equivalent of jQuery's position function:                                                 // 876\n       * http://api.jquery.com/position/                                                                              // 877\n       */                                                                                                             // 878\n      position: function (element) {                                                                                  // 879\n        var elBCR = this.offset(element);                                                                             // 880\n        var offsetParentBCR = { top: 0, left: 0 };                                                                    // 881\n        var offsetParentEl = parentOffsetEl(element[0]);                                                              // 882\n        if (offsetParentEl != $document[0]) {                                                                         // 883\n          offsetParentBCR = this.offset(angular.element(offsetParentEl));                                             // 884\n          offsetParentBCR.top += offsetParentEl.clientTop - offsetParentEl.scrollTop;                                 // 885\n          offsetParentBCR.left += offsetParentEl.clientLeft - offsetParentEl.scrollLeft;                              // 886\n        }                                                                                                             // 887\n                                                                                                                      // 888\n        var boundingClientRect = element[0].getBoundingClientRect();                                                  // 889\n        return {                                                                                                      // 890\n          width: boundingClientRect.width || element.prop('offsetWidth'),                                             // 891\n          height: boundingClientRect.height || element.prop('offsetHeight'),                                          // 892\n          top: elBCR.top - offsetParentBCR.top,                                                                       // 893\n          left: elBCR.left - offsetParentBCR.left                                                                     // 894\n        };                                                                                                            // 895\n      },                                                                                                              // 896\n                                                                                                                      // 897\n      /**                                                                                                             // 898\n       * Provides read-only equivalent of jQuery's offset function:                                                   // 899\n       * http://api.jquery.com/offset/                                                                                // 900\n       */                                                                                                             // 901\n      offset: function (element) {                                                                                    // 902\n        var boundingClientRect = element[0].getBoundingClientRect();                                                  // 903\n        return {                                                                                                      // 904\n          width: boundingClientRect.width || element.prop('offsetWidth'),                                             // 905\n          height: boundingClientRect.height || element.prop('offsetHeight'),                                          // 906\n          top: boundingClientRect.top + ($window.pageYOffset || $document[0].documentElement.scrollTop),              // 907\n          left: boundingClientRect.left + ($window.pageXOffset || $document[0].documentElement.scrollLeft)            // 908\n        };                                                                                                            // 909\n      },                                                                                                              // 910\n                                                                                                                      // 911\n      /**                                                                                                             // 912\n       * Provides coordinates for the targetEl in relation to hostEl                                                  // 913\n       */                                                                                                             // 914\n      positionElements: function (hostEl, targetEl, positionStr, appendToBody) {                                      // 915\n                                                                                                                      // 916\n        var positionStrParts = positionStr.split('-');                                                                // 917\n        var pos0 = positionStrParts[0], pos1 = positionStrParts[1] || 'center';                                       // 918\n                                                                                                                      // 919\n        var hostElPos,                                                                                                // 920\n          targetElWidth,                                                                                              // 921\n          targetElHeight,                                                                                             // 922\n          targetElPos;                                                                                                // 923\n                                                                                                                      // 924\n        hostElPos = appendToBody ? this.offset(hostEl) : this.position(hostEl);                                       // 925\n                                                                                                                      // 926\n        targetElWidth = targetEl.prop('offsetWidth');                                                                 // 927\n        targetElHeight = targetEl.prop('offsetHeight');                                                               // 928\n                                                                                                                      // 929\n        var shiftWidth = {                                                                                            // 930\n          center: function () {                                                                                       // 931\n            return hostElPos.left + hostElPos.width / 2 - targetElWidth / 2;                                          // 932\n          },                                                                                                          // 933\n          left: function () {                                                                                         // 934\n            return hostElPos.left;                                                                                    // 935\n          },                                                                                                          // 936\n          right: function () {                                                                                        // 937\n            return hostElPos.left + hostElPos.width;                                                                  // 938\n          }                                                                                                           // 939\n        };                                                                                                            // 940\n                                                                                                                      // 941\n        var shiftHeight = {                                                                                           // 942\n          center: function () {                                                                                       // 943\n            return hostElPos.top + hostElPos.height / 2 - targetElHeight / 2;                                         // 944\n          },                                                                                                          // 945\n          top: function () {                                                                                          // 946\n            return hostElPos.top;                                                                                     // 947\n          },                                                                                                          // 948\n          bottom: function () {                                                                                       // 949\n            return hostElPos.top + hostElPos.height;                                                                  // 950\n          }                                                                                                           // 951\n        };                                                                                                            // 952\n                                                                                                                      // 953\n        switch (pos0) {                                                                                               // 954\n          case 'right':                                                                                               // 955\n            targetElPos = {                                                                                           // 956\n              top: shiftHeight[pos1](),                                                                               // 957\n              left: shiftWidth[pos0]()                                                                                // 958\n            };                                                                                                        // 959\n            break;                                                                                                    // 960\n          case 'left':                                                                                                // 961\n            targetElPos = {                                                                                           // 962\n              top: shiftHeight[pos1](),                                                                               // 963\n              left: hostElPos.left - targetElWidth                                                                    // 964\n            };                                                                                                        // 965\n            break;                                                                                                    // 966\n          case 'bottom':                                                                                              // 967\n            targetElPos = {                                                                                           // 968\n              top: shiftHeight[pos0](),                                                                               // 969\n              left: shiftWidth[pos1]()                                                                                // 970\n            };                                                                                                        // 971\n            break;                                                                                                    // 972\n          default:                                                                                                    // 973\n            targetElPos = {                                                                                           // 974\n              top: hostElPos.top - targetElHeight,                                                                    // 975\n              left: shiftWidth[pos1]()                                                                                // 976\n            };                                                                                                        // 977\n            break;                                                                                                    // 978\n        }                                                                                                             // 979\n                                                                                                                      // 980\n        return targetElPos;                                                                                           // 981\n      }                                                                                                               // 982\n    };                                                                                                                // 983\n  }]);                                                                                                                // 984\n                                                                                                                      // 985\nangular.module('ui.bootstrap.datepicker', ['ui.bootstrap.dateparser', 'ui.bootstrap.position'])                       // 986\n                                                                                                                      // 987\n.constant('datepickerConfig', {                                                                                       // 988\n  formatDay: 'dd',                                                                                                    // 989\n  formatMonth: 'MMMM',                                                                                                // 990\n  formatYear: 'yyyy',                                                                                                 // 991\n  formatDayHeader: 'EEE',                                                                                             // 992\n  formatDayTitle: 'MMMM yyyy',                                                                                        // 993\n  formatMonthTitle: 'yyyy',                                                                                           // 994\n  datepickerMode: 'day',                                                                                              // 995\n  minMode: 'day',                                                                                                     // 996\n  maxMode: 'year',                                                                                                    // 997\n  showWeeks: true,                                                                                                    // 998\n  startingDay: 0,                                                                                                     // 999\n  yearRange: 20,                                                                                                      // 1000\n  minDate: null,                                                                                                      // 1001\n  maxDate: null,                                                                                                      // 1002\n  shortcutPropagation: false                                                                                          // 1003\n})                                                                                                                    // 1004\n                                                                                                                      // 1005\n.controller('DatepickerController', ['$scope', '$attrs', '$parse', '$interpolate', '$timeout', '$log', 'dateFilter', 'datepickerConfig', function($scope, $attrs, $parse, $interpolate, $timeout, $log, dateFilter, datepickerConfig) {\n  var self = this,                                                                                                    // 1007\n      ngModelCtrl = { $setViewValue: angular.noop }; // nullModelCtrl;                                                // 1008\n                                                                                                                      // 1009\n  // Modes chain                                                                                                      // 1010\n  this.modes = ['day', 'month', 'year'];                                                                              // 1011\n                                                                                                                      // 1012\n  // Configuration attributes                                                                                         // 1013\n  angular.forEach(['formatDay', 'formatMonth', 'formatYear', 'formatDayHeader', 'formatDayTitle', 'formatMonthTitle', // 1014\n                   'minMode', 'maxMode', 'showWeeks', 'startingDay', 'yearRange', 'shortcutPropagation'], function( key, index ) {\n    self[key] = angular.isDefined($attrs[key]) ? (index < 8 ? $interpolate($attrs[key])($scope.$parent) : $scope.$parent.$eval($attrs[key])) : datepickerConfig[key];\n  });                                                                                                                 // 1017\n                                                                                                                      // 1018\n  // Watchable date attributes                                                                                        // 1019\n  angular.forEach(['minDate', 'maxDate'], function( key ) {                                                           // 1020\n    if ( $attrs[key] ) {                                                                                              // 1021\n      $scope.$parent.$watch($parse($attrs[key]), function(value) {                                                    // 1022\n        self[key] = value ? new Date(value) : null;                                                                   // 1023\n        self.refreshView();                                                                                           // 1024\n      });                                                                                                             // 1025\n    } else {                                                                                                          // 1026\n      self[key] = datepickerConfig[key] ? new Date(datepickerConfig[key]) : null;                                     // 1027\n    }                                                                                                                 // 1028\n  });                                                                                                                 // 1029\n                                                                                                                      // 1030\n  $scope.datepickerMode = $scope.datepickerMode || datepickerConfig.datepickerMode;                                   // 1031\n  $scope.maxMode = self.maxMode;                                                                                      // 1032\n  $scope.uniqueId = 'datepicker-' + $scope.$id + '-' + Math.floor(Math.random() * 10000);                             // 1033\n                                                                                                                      // 1034\n  if(angular.isDefined($attrs.initDate)) {                                                                            // 1035\n    this.activeDate = $scope.$parent.$eval($attrs.initDate) || new Date();                                            // 1036\n    $scope.$parent.$watch($attrs.initDate, function(initDate){                                                        // 1037\n      if(initDate && (ngModelCtrl.$isEmpty(ngModelCtrl.$modelValue) || ngModelCtrl.$invalid)){                        // 1038\n        self.activeDate = initDate;                                                                                   // 1039\n        self.refreshView();                                                                                           // 1040\n      }                                                                                                               // 1041\n    });                                                                                                               // 1042\n  } else {                                                                                                            // 1043\n    this.activeDate =  new Date();                                                                                    // 1044\n  }                                                                                                                   // 1045\n                                                                                                                      // 1046\n  $scope.isActive = function(dateObject) {                                                                            // 1047\n    if (self.compare(dateObject.date, self.activeDate) === 0) {                                                       // 1048\n      $scope.activeDateId = dateObject.uid;                                                                           // 1049\n      return true;                                                                                                    // 1050\n    }                                                                                                                 // 1051\n    return false;                                                                                                     // 1052\n  };                                                                                                                  // 1053\n                                                                                                                      // 1054\n  this.init = function( ngModelCtrl_ ) {                                                                              // 1055\n    ngModelCtrl = ngModelCtrl_;                                                                                       // 1056\n                                                                                                                      // 1057\n    ngModelCtrl.$render = function() {                                                                                // 1058\n      self.render();                                                                                                  // 1059\n    };                                                                                                                // 1060\n  };                                                                                                                  // 1061\n                                                                                                                      // 1062\n  this.render = function() {                                                                                          // 1063\n    if ( ngModelCtrl.$viewValue ) {                                                                                   // 1064\n      var date = new Date( ngModelCtrl.$viewValue ),                                                                  // 1065\n          isValid = !isNaN(date);                                                                                     // 1066\n                                                                                                                      // 1067\n      if ( isValid ) {                                                                                                // 1068\n        this.activeDate = date;                                                                                       // 1069\n      } else {                                                                                                        // 1070\n        $log.error('Datepicker directive: \"ng-model\" value must be a Date object, a number of milliseconds since 01.01.1970 or a string representing an RFC2822 or ISO 8601 date.');\n      }                                                                                                               // 1072\n      ngModelCtrl.$setValidity('date', isValid);                                                                      // 1073\n    }                                                                                                                 // 1074\n    this.refreshView();                                                                                               // 1075\n  };                                                                                                                  // 1076\n                                                                                                                      // 1077\n  this.refreshView = function() {                                                                                     // 1078\n    if ( this.element ) {                                                                                             // 1079\n      this._refreshView();                                                                                            // 1080\n                                                                                                                      // 1081\n      var date = ngModelCtrl.$viewValue ? new Date(ngModelCtrl.$viewValue) : null;                                    // 1082\n      ngModelCtrl.$setValidity('date-disabled', !date || (this.element && !this.isDisabled(date)));                   // 1083\n    }                                                                                                                 // 1084\n  };                                                                                                                  // 1085\n                                                                                                                      // 1086\n  this.createDateObject = function(date, format) {                                                                    // 1087\n    var model = ngModelCtrl.$viewValue ? new Date(ngModelCtrl.$viewValue) : null;                                     // 1088\n    return {                                                                                                          // 1089\n      date: date,                                                                                                     // 1090\n      label: dateFilter(date, format),                                                                                // 1091\n      selected: model && this.compare(date, model) === 0,                                                             // 1092\n      disabled: this.isDisabled(date),                                                                                // 1093\n      current: this.compare(date, new Date()) === 0,                                                                  // 1094\n      customClass: this.customClass(date)                                                                             // 1095\n    };                                                                                                                // 1096\n  };                                                                                                                  // 1097\n                                                                                                                      // 1098\n  this.isDisabled = function( date ) {                                                                                // 1099\n    return ((this.minDate && this.compare(date, this.minDate) < 0) || (this.maxDate && this.compare(date, this.maxDate) > 0) || ($attrs.dateDisabled && $scope.dateDisabled({date: date, mode: $scope.datepickerMode})));\n  };                                                                                                                  // 1101\n                                                                                                                      // 1102\n    this.customClass = function( date ) {                                                                             // 1103\n      return $scope.customClass({date: date, mode: $scope.datepickerMode});                                           // 1104\n    };                                                                                                                // 1105\n                                                                                                                      // 1106\n  // Split array into smaller arrays                                                                                  // 1107\n  this.split = function(arr, size) {                                                                                  // 1108\n    var arrays = [];                                                                                                  // 1109\n    while (arr.length > 0) {                                                                                          // 1110\n      arrays.push(arr.splice(0, size));                                                                               // 1111\n    }                                                                                                                 // 1112\n    return arrays;                                                                                                    // 1113\n  };                                                                                                                  // 1114\n                                                                                                                      // 1115\n  $scope.select = function( date ) {                                                                                  // 1116\n    if ( $scope.datepickerMode === self.minMode ) {                                                                   // 1117\n      var dt = ngModelCtrl.$viewValue ? new Date( ngModelCtrl.$viewValue ) : new Date(0, 0, 0, 0, 0, 0, 0);           // 1118\n      dt.setFullYear( date.getFullYear(), date.getMonth(), date.getDate() );                                          // 1119\n      ngModelCtrl.$setViewValue( dt );                                                                                // 1120\n      ngModelCtrl.$render();                                                                                          // 1121\n    } else {                                                                                                          // 1122\n      self.activeDate = date;                                                                                         // 1123\n      $scope.datepickerMode = self.modes[ self.modes.indexOf( $scope.datepickerMode ) - 1 ];                          // 1124\n    }                                                                                                                 // 1125\n  };                                                                                                                  // 1126\n                                                                                                                      // 1127\n  $scope.move = function( direction ) {                                                                               // 1128\n    var year = self.activeDate.getFullYear() + direction * (self.step.years || 0),                                    // 1129\n        month = self.activeDate.getMonth() + direction * (self.step.months || 0);                                     // 1130\n    self.activeDate.setFullYear(year, month, 1);                                                                      // 1131\n    self.refreshView();                                                                                               // 1132\n  };                                                                                                                  // 1133\n                                                                                                                      // 1134\n  $scope.toggleMode = function( direction ) {                                                                         // 1135\n    direction = direction || 1;                                                                                       // 1136\n                                                                                                                      // 1137\n    if (($scope.datepickerMode === self.maxMode && direction === 1) || ($scope.datepickerMode === self.minMode && direction === -1)) {\n      return;                                                                                                         // 1139\n    }                                                                                                                 // 1140\n                                                                                                                      // 1141\n    $scope.datepickerMode = self.modes[ self.modes.indexOf( $scope.datepickerMode ) + direction ];                    // 1142\n  };                                                                                                                  // 1143\n                                                                                                                      // 1144\n  // Key event mapper                                                                                                 // 1145\n  $scope.keys = { 13:'enter', 32:'space', 33:'pageup', 34:'pagedown', 35:'end', 36:'home', 37:'left', 38:'up', 39:'right', 40:'down' };\n                                                                                                                      // 1147\n  var focusElement = function() {                                                                                     // 1148\n    $timeout(function() {                                                                                             // 1149\n      self.element[0].focus();                                                                                        // 1150\n    }, 0 , false);                                                                                                    // 1151\n  };                                                                                                                  // 1152\n                                                                                                                      // 1153\n  // Listen for focus requests from popup directive                                                                   // 1154\n  $scope.$on('datepicker.focus', focusElement);                                                                       // 1155\n                                                                                                                      // 1156\n  $scope.keydown = function( evt ) {                                                                                  // 1157\n    var key = $scope.keys[evt.which];                                                                                 // 1158\n                                                                                                                      // 1159\n    if ( !key || evt.shiftKey || evt.altKey ) {                                                                       // 1160\n      return;                                                                                                         // 1161\n    }                                                                                                                 // 1162\n                                                                                                                      // 1163\n    evt.preventDefault();                                                                                             // 1164\n    if(!self.shortcutPropagation){                                                                                    // 1165\n        evt.stopPropagation();                                                                                        // 1166\n    }                                                                                                                 // 1167\n                                                                                                                      // 1168\n    if (key === 'enter' || key === 'space') {                                                                         // 1169\n      if ( self.isDisabled(self.activeDate)) {                                                                        // 1170\n        return; // do nothing                                                                                         // 1171\n      }                                                                                                               // 1172\n      $scope.select(self.activeDate);                                                                                 // 1173\n      focusElement();                                                                                                 // 1174\n    } else if (evt.ctrlKey && (key === 'up' || key === 'down')) {                                                     // 1175\n      $scope.toggleMode(key === 'up' ? 1 : -1);                                                                       // 1176\n      focusElement();                                                                                                 // 1177\n    } else {                                                                                                          // 1178\n      self.handleKeyDown(key, evt);                                                                                   // 1179\n      self.refreshView();                                                                                             // 1180\n    }                                                                                                                 // 1181\n  };                                                                                                                  // 1182\n}])                                                                                                                   // 1183\n                                                                                                                      // 1184\n.directive( 'datepicker', function () {                                                                               // 1185\n  return {                                                                                                            // 1186\n    restrict: 'EA',                                                                                                   // 1187\n    replace: true,                                                                                                    // 1188\n    templateUrl: 'template/datepicker/datepicker.html',                                                               // 1189\n    scope: {                                                                                                          // 1190\n      datepickerMode: '=?',                                                                                           // 1191\n      dateDisabled: '&',                                                                                              // 1192\n      customClass: '&',                                                                                               // 1193\n      shortcutPropagation: '&?'                                                                                       // 1194\n    },                                                                                                                // 1195\n    require: ['datepicker', '?^ngModel'],                                                                             // 1196\n    controller: 'DatepickerController',                                                                               // 1197\n    link: function(scope, element, attrs, ctrls) {                                                                    // 1198\n      var datepickerCtrl = ctrls[0], ngModelCtrl = ctrls[1];                                                          // 1199\n                                                                                                                      // 1200\n      if ( ngModelCtrl ) {                                                                                            // 1201\n        datepickerCtrl.init( ngModelCtrl );                                                                           // 1202\n      }                                                                                                               // 1203\n    }                                                                                                                 // 1204\n  };                                                                                                                  // 1205\n})                                                                                                                    // 1206\n                                                                                                                      // 1207\n.directive('daypicker', ['dateFilter', function (dateFilter) {                                                        // 1208\n  return {                                                                                                            // 1209\n    restrict: 'EA',                                                                                                   // 1210\n    replace: true,                                                                                                    // 1211\n    templateUrl: 'template/datepicker/day.html',                                                                      // 1212\n    require: '^datepicker',                                                                                           // 1213\n    link: function(scope, element, attrs, ctrl) {                                                                     // 1214\n      scope.showWeeks = ctrl.showWeeks;                                                                               // 1215\n                                                                                                                      // 1216\n      ctrl.step = { months: 1 };                                                                                      // 1217\n      ctrl.element = element;                                                                                         // 1218\n                                                                                                                      // 1219\n      var DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];                                           // 1220\n      function getDaysInMonth( year, month ) {                                                                        // 1221\n        return ((month === 1) && (year % 4 === 0) && ((year % 100 !== 0) || (year % 400 === 0))) ? 29 : DAYS_IN_MONTH[month];\n      }                                                                                                               // 1223\n                                                                                                                      // 1224\n      function getDates(startDate, n) {                                                                               // 1225\n        var dates = new Array(n), current = new Date(startDate), i = 0;                                               // 1226\n        current.setHours(12); // Prevent repeated dates because of timezone bug                                       // 1227\n        while ( i < n ) {                                                                                             // 1228\n          dates[i++] = new Date(current);                                                                             // 1229\n          current.setDate( current.getDate() + 1 );                                                                   // 1230\n        }                                                                                                             // 1231\n        return dates;                                                                                                 // 1232\n      }                                                                                                               // 1233\n                                                                                                                      // 1234\n      ctrl._refreshView = function() {                                                                                // 1235\n        var year = ctrl.activeDate.getFullYear(),                                                                     // 1236\n          month = ctrl.activeDate.getMonth(),                                                                         // 1237\n          firstDayOfMonth = new Date(year, month, 1),                                                                 // 1238\n          difference = ctrl.startingDay - firstDayOfMonth.getDay(),                                                   // 1239\n          numDisplayedFromPreviousMonth = (difference > 0) ? 7 - difference : - difference,                           // 1240\n          firstDate = new Date(firstDayOfMonth);                                                                      // 1241\n                                                                                                                      // 1242\n        if ( numDisplayedFromPreviousMonth > 0 ) {                                                                    // 1243\n          firstDate.setDate( - numDisplayedFromPreviousMonth + 1 );                                                   // 1244\n        }                                                                                                             // 1245\n                                                                                                                      // 1246\n        // 42 is the number of days on a six-month calendar                                                           // 1247\n        var days = getDates(firstDate, 42);                                                                           // 1248\n        for (var i = 0; i < 42; i ++) {                                                                               // 1249\n          days[i] = angular.extend(ctrl.createDateObject(days[i], ctrl.formatDay), {                                  // 1250\n            secondary: days[i].getMonth() !== month,                                                                  // 1251\n            uid: scope.uniqueId + '-' + i                                                                             // 1252\n          });                                                                                                         // 1253\n        }                                                                                                             // 1254\n                                                                                                                      // 1255\n        scope.labels = new Array(7);                                                                                  // 1256\n        for (var j = 0; j < 7; j++) {                                                                                 // 1257\n          scope.labels[j] = {                                                                                         // 1258\n            abbr: dateFilter(days[j].date, ctrl.formatDayHeader),                                                     // 1259\n            full: dateFilter(days[j].date, 'EEEE')                                                                    // 1260\n          };                                                                                                          // 1261\n        }                                                                                                             // 1262\n                                                                                                                      // 1263\n        scope.title = dateFilter(ctrl.activeDate, ctrl.formatDayTitle);                                               // 1264\n        scope.rows = ctrl.split(days, 7);                                                                             // 1265\n                                                                                                                      // 1266\n        if ( scope.showWeeks ) {                                                                                      // 1267\n          scope.weekNumbers = [];                                                                                     // 1268\n          var thursdayIndex = (4 + 7 - ctrl.startingDay) % 7,                                                         // 1269\n              numWeeks = scope.rows.length;                                                                           // 1270\n          for (var curWeek = 0; curWeek < numWeeks; curWeek++) {                                                      // 1271\n            scope.weekNumbers.push(                                                                                   // 1272\n              getISO8601WeekNumber( scope.rows[curWeek][thursdayIndex].date ));                                       // 1273\n          }                                                                                                           // 1274\n        }                                                                                                             // 1275\n      };                                                                                                              // 1276\n                                                                                                                      // 1277\n      ctrl.compare = function(date1, date2) {                                                                         // 1278\n        return (new Date( date1.getFullYear(), date1.getMonth(), date1.getDate() ) - new Date( date2.getFullYear(), date2.getMonth(), date2.getDate() ) );\n      };                                                                                                              // 1280\n                                                                                                                      // 1281\n      function getISO8601WeekNumber(date) {                                                                           // 1282\n        var checkDate = new Date(date);                                                                               // 1283\n        checkDate.setDate(checkDate.getDate() + 4 - (checkDate.getDay() || 7)); // Thursday                           // 1284\n        var time = checkDate.getTime();                                                                               // 1285\n        checkDate.setMonth(0); // Compare with Jan 1                                                                  // 1286\n        checkDate.setDate(1);                                                                                         // 1287\n        return Math.floor(Math.round((time - checkDate) / 86400000) / 7) + 1;                                         // 1288\n      }                                                                                                               // 1289\n                                                                                                                      // 1290\n      ctrl.handleKeyDown = function( key, evt ) {                                                                     // 1291\n        var date = ctrl.activeDate.getDate();                                                                         // 1292\n                                                                                                                      // 1293\n        if (key === 'left') {                                                                                         // 1294\n          date = date - 1;   // up                                                                                    // 1295\n        } else if (key === 'up') {                                                                                    // 1296\n          date = date - 7;   // down                                                                                  // 1297\n        } else if (key === 'right') {                                                                                 // 1298\n          date = date + 1;   // down                                                                                  // 1299\n        } else if (key === 'down') {                                                                                  // 1300\n          date = date + 7;                                                                                            // 1301\n        } else if (key === 'pageup' || key === 'pagedown') {                                                          // 1302\n          var month = ctrl.activeDate.getMonth() + (key === 'pageup' ? - 1 : 1);                                      // 1303\n          ctrl.activeDate.setMonth(month, 1);                                                                         // 1304\n          date = Math.min(getDaysInMonth(ctrl.activeDate.getFullYear(), ctrl.activeDate.getMonth()), date);           // 1305\n        } else if (key === 'home') {                                                                                  // 1306\n          date = 1;                                                                                                   // 1307\n        } else if (key === 'end') {                                                                                   // 1308\n          date = getDaysInMonth(ctrl.activeDate.getFullYear(), ctrl.activeDate.getMonth());                           // 1309\n        }                                                                                                             // 1310\n        ctrl.activeDate.setDate(date);                                                                                // 1311\n      };                                                                                                              // 1312\n                                                                                                                      // 1313\n      ctrl.refreshView();                                                                                             // 1314\n    }                                                                                                                 // 1315\n  };                                                                                                                  // 1316\n}])                                                                                                                   // 1317\n                                                                                                                      // 1318\n.directive('monthpicker', ['dateFilter', function (dateFilter) {                                                      // 1319\n  return {                                                                                                            // 1320\n    restrict: 'EA',                                                                                                   // 1321\n    replace: true,                                                                                                    // 1322\n    templateUrl: 'template/datepicker/month.html',                                                                    // 1323\n    require: '^datepicker',                                                                                           // 1324\n    link: function(scope, element, attrs, ctrl) {                                                                     // 1325\n      ctrl.step = { years: 1 };                                                                                       // 1326\n      ctrl.element = element;                                                                                         // 1327\n                                                                                                                      // 1328\n      ctrl._refreshView = function() {                                                                                // 1329\n        var months = new Array(12),                                                                                   // 1330\n            year = ctrl.activeDate.getFullYear();                                                                     // 1331\n                                                                                                                      // 1332\n        for ( var i = 0; i < 12; i++ ) {                                                                              // 1333\n          months[i] = angular.extend(ctrl.createDateObject(new Date(year, i, 1), ctrl.formatMonth), {                 // 1334\n            uid: scope.uniqueId + '-' + i                                                                             // 1335\n          });                                                                                                         // 1336\n        }                                                                                                             // 1337\n                                                                                                                      // 1338\n        scope.title = dateFilter(ctrl.activeDate, ctrl.formatMonthTitle);                                             // 1339\n        scope.rows = ctrl.split(months, 3);                                                                           // 1340\n      };                                                                                                              // 1341\n                                                                                                                      // 1342\n      ctrl.compare = function(date1, date2) {                                                                         // 1343\n        return new Date( date1.getFullYear(), date1.getMonth() ) - new Date( date2.getFullYear(), date2.getMonth() ); // 1344\n      };                                                                                                              // 1345\n                                                                                                                      // 1346\n      ctrl.handleKeyDown = function( key, evt ) {                                                                     // 1347\n        var date = ctrl.activeDate.getMonth();                                                                        // 1348\n                                                                                                                      // 1349\n        if (key === 'left') {                                                                                         // 1350\n          date = date - 1;   // up                                                                                    // 1351\n        } else if (key === 'up') {                                                                                    // 1352\n          date = date - 3;   // down                                                                                  // 1353\n        } else if (key === 'right') {                                                                                 // 1354\n          date = date + 1;   // down                                                                                  // 1355\n        } else if (key === 'down') {                                                                                  // 1356\n          date = date + 3;                                                                                            // 1357\n        } else if (key === 'pageup' || key === 'pagedown') {                                                          // 1358\n          var year = ctrl.activeDate.getFullYear() + (key === 'pageup' ? - 1 : 1);                                    // 1359\n          ctrl.activeDate.setFullYear(year);                                                                          // 1360\n        } else if (key === 'home') {                                                                                  // 1361\n          date = 0;                                                                                                   // 1362\n        } else if (key === 'end') {                                                                                   // 1363\n          date = 11;                                                                                                  // 1364\n        }                                                                                                             // 1365\n        ctrl.activeDate.setMonth(date);                                                                               // 1366\n      };                                                                                                              // 1367\n                                                                                                                      // 1368\n      ctrl.refreshView();                                                                                             // 1369\n    }                                                                                                                 // 1370\n  };                                                                                                                  // 1371\n}])                                                                                                                   // 1372\n                                                                                                                      // 1373\n.directive('yearpicker', ['dateFilter', function (dateFilter) {                                                       // 1374\n  return {                                                                                                            // 1375\n    restrict: 'EA',                                                                                                   // 1376\n    replace: true,                                                                                                    // 1377\n    templateUrl: 'template/datepicker/year.html',                                                                     // 1378\n    require: '^datepicker',                                                                                           // 1379\n    link: function(scope, element, attrs, ctrl) {                                                                     // 1380\n      var range = ctrl.yearRange;                                                                                     // 1381\n                                                                                                                      // 1382\n      ctrl.step = { years: range };                                                                                   // 1383\n      ctrl.element = element;                                                                                         // 1384\n                                                                                                                      // 1385\n      function getStartingYear( year ) {                                                                              // 1386\n        return parseInt((year - 1) / range, 10) * range + 1;                                                          // 1387\n      }                                                                                                               // 1388\n                                                                                                                      // 1389\n      ctrl._refreshView = function() {                                                                                // 1390\n        var years = new Array(range);                                                                                 // 1391\n                                                                                                                      // 1392\n        for ( var i = 0, start = getStartingYear(ctrl.activeDate.getFullYear()); i < range; i++ ) {                   // 1393\n          years[i] = angular.extend(ctrl.createDateObject(new Date(start + i, 0, 1), ctrl.formatYear), {              // 1394\n            uid: scope.uniqueId + '-' + i                                                                             // 1395\n          });                                                                                                         // 1396\n        }                                                                                                             // 1397\n                                                                                                                      // 1398\n        scope.title = [years[0].label, years[range - 1].label].join(' - ');                                           // 1399\n        scope.rows = ctrl.split(years, 5);                                                                            // 1400\n      };                                                                                                              // 1401\n                                                                                                                      // 1402\n      ctrl.compare = function(date1, date2) {                                                                         // 1403\n        return date1.getFullYear() - date2.getFullYear();                                                             // 1404\n      };                                                                                                              // 1405\n                                                                                                                      // 1406\n      ctrl.handleKeyDown = function( key, evt ) {                                                                     // 1407\n        var date = ctrl.activeDate.getFullYear();                                                                     // 1408\n                                                                                                                      // 1409\n        if (key === 'left') {                                                                                         // 1410\n          date = date - 1;   // up                                                                                    // 1411\n        } else if (key === 'up') {                                                                                    // 1412\n          date = date - 5;   // down                                                                                  // 1413\n        } else if (key === 'right') {                                                                                 // 1414\n          date = date + 1;   // down                                                                                  // 1415\n        } else if (key === 'down') {                                                                                  // 1416\n          date = date + 5;                                                                                            // 1417\n        } else if (key === 'pageup' || key === 'pagedown') {                                                          // 1418\n          date += (key === 'pageup' ? - 1 : 1) * ctrl.step.years;                                                     // 1419\n        } else if (key === 'home') {                                                                                  // 1420\n          date = getStartingYear( ctrl.activeDate.getFullYear() );                                                    // 1421\n        } else if (key === 'end') {                                                                                   // 1422\n          date = getStartingYear( ctrl.activeDate.getFullYear() ) + range - 1;                                        // 1423\n        }                                                                                                             // 1424\n        ctrl.activeDate.setFullYear(date);                                                                            // 1425\n      };                                                                                                              // 1426\n                                                                                                                      // 1427\n      ctrl.refreshView();                                                                                             // 1428\n    }                                                                                                                 // 1429\n  };                                                                                                                  // 1430\n}])                                                                                                                   // 1431\n                                                                                                                      // 1432\n.constant('datepickerPopupConfig', {                                                                                  // 1433\n  datepickerPopup: 'yyyy-MM-dd',                                                                                      // 1434\n  html5Types: {                                                                                                       // 1435\n    date: 'yyyy-MM-dd',                                                                                               // 1436\n    'datetime-local': 'yyyy-MM-ddTHH:mm:ss.sss',                                                                      // 1437\n    'month': 'yyyy-MM'                                                                                                // 1438\n  },                                                                                                                  // 1439\n  currentText: 'Today',                                                                                               // 1440\n  clearText: 'Clear',                                                                                                 // 1441\n  closeText: 'Done',                                                                                                  // 1442\n  closeOnDateSelection: true,                                                                                         // 1443\n  appendToBody: false,                                                                                                // 1444\n  showButtonBar: true                                                                                                 // 1445\n})                                                                                                                    // 1446\n                                                                                                                      // 1447\n.directive('datepickerPopup', ['$compile', '$parse', '$document', '$position', 'dateFilter', 'dateParser', 'datepickerPopupConfig',\nfunction ($compile, $parse, $document, $position, dateFilter, dateParser, datepickerPopupConfig) {                    // 1449\n  return {                                                                                                            // 1450\n    restrict: 'EA',                                                                                                   // 1451\n    require: 'ngModel',                                                                                               // 1452\n    scope: {                                                                                                          // 1453\n      isOpen: '=?',                                                                                                   // 1454\n      currentText: '@',                                                                                               // 1455\n      clearText: '@',                                                                                                 // 1456\n      closeText: '@',                                                                                                 // 1457\n      dateDisabled: '&',                                                                                              // 1458\n      customClass: '&'                                                                                                // 1459\n    },                                                                                                                // 1460\n    link: function(scope, element, attrs, ngModel) {                                                                  // 1461\n      var dateFormat,                                                                                                 // 1462\n          closeOnDateSelection = angular.isDefined(attrs.closeOnDateSelection) ? scope.$parent.$eval(attrs.closeOnDateSelection) : datepickerPopupConfig.closeOnDateSelection,\n          appendToBody = angular.isDefined(attrs.datepickerAppendToBody) ? scope.$parent.$eval(attrs.datepickerAppendToBody) : datepickerPopupConfig.appendToBody;\n                                                                                                                      // 1465\n      scope.showButtonBar = angular.isDefined(attrs.showButtonBar) ? scope.$parent.$eval(attrs.showButtonBar) : datepickerPopupConfig.showButtonBar;\n                                                                                                                      // 1467\n      scope.getText = function( key ) {                                                                               // 1468\n        return scope[key + 'Text'] || datepickerPopupConfig[key + 'Text'];                                            // 1469\n      };                                                                                                              // 1470\n                                                                                                                      // 1471\n      var isHtml5DateInput = false;                                                                                   // 1472\n      if (datepickerPopupConfig.html5Types[attrs.type]) {                                                             // 1473\n        dateFormat = datepickerPopupConfig.html5Types[attrs.type];                                                    // 1474\n        isHtml5DateInput = true;                                                                                      // 1475\n      } else {                                                                                                        // 1476\n        dateFormat = attrs.datepickerPopup || datepickerPopupConfig.datepickerPopup;                                  // 1477\n        attrs.$observe('datepickerPopup', function(value, oldValue) {                                                 // 1478\n            var newDateFormat = value || datepickerPopupConfig.datepickerPopup;                                       // 1479\n            // Invalidate the $modelValue to ensure that formatters re-run                                            // 1480\n            // FIXME: Refactor when PR is merged: https://github.com/angular/angular.js/pull/10764                    // 1481\n            if (newDateFormat !== dateFormat) {                                                                       // 1482\n              dateFormat = newDateFormat;                                                                             // 1483\n              ngModel.$modelValue = null;                                                                             // 1484\n                                                                                                                      // 1485\n              if (!dateFormat) {                                                                                      // 1486\n                throw new Error('datepickerPopup must have a date format specified.');                                // 1487\n              }                                                                                                       // 1488\n            }                                                                                                         // 1489\n        });                                                                                                           // 1490\n      }                                                                                                               // 1491\n                                                                                                                      // 1492\n      if (!dateFormat) {                                                                                              // 1493\n        throw new Error('datepickerPopup must have a date format specified.');                                        // 1494\n      }                                                                                                               // 1495\n                                                                                                                      // 1496\n      if (isHtml5DateInput && attrs.datepickerPopup) {                                                                // 1497\n        throw new Error('HTML5 date input types do not support custom formats.');                                     // 1498\n      }                                                                                                               // 1499\n                                                                                                                      // 1500\n      // popup element used to display calendar                                                                       // 1501\n      var popupEl = angular.element('<div datepicker-popup-wrap><div datepicker></div></div>');                       // 1502\n      popupEl.attr({                                                                                                  // 1503\n        'ng-model': 'date',                                                                                           // 1504\n        'ng-change': 'dateSelection()'                                                                                // 1505\n      });                                                                                                             // 1506\n                                                                                                                      // 1507\n      function cameltoDash( string ){                                                                                 // 1508\n        return string.replace(/([A-Z])/g, function($1) { return '-' + $1.toLowerCase(); });                           // 1509\n      }                                                                                                               // 1510\n                                                                                                                      // 1511\n      // datepicker element                                                                                           // 1512\n      var datepickerEl = angular.element(popupEl.children()[0]);                                                      // 1513\n      if (isHtml5DateInput) {                                                                                         // 1514\n        if (attrs.type == 'month') {                                                                                  // 1515\n          datepickerEl.attr('datepicker-mode', '\"month\"');                                                            // 1516\n          datepickerEl.attr('min-mode', 'month');                                                                     // 1517\n        }                                                                                                             // 1518\n      }                                                                                                               // 1519\n                                                                                                                      // 1520\n      if ( attrs.datepickerOptions ) {                                                                                // 1521\n        var options = scope.$parent.$eval(attrs.datepickerOptions);                                                   // 1522\n        if(options.initDate) {                                                                                        // 1523\n          scope.initDate = options.initDate;                                                                          // 1524\n          datepickerEl.attr( 'init-date', 'initDate' );                                                               // 1525\n          delete options.initDate;                                                                                    // 1526\n        }                                                                                                             // 1527\n        angular.forEach(options, function( value, option ) {                                                          // 1528\n          datepickerEl.attr( cameltoDash(option), value );                                                            // 1529\n        });                                                                                                           // 1530\n      }                                                                                                               // 1531\n                                                                                                                      // 1532\n      scope.watchData = {};                                                                                           // 1533\n      angular.forEach(['minDate', 'maxDate', 'datepickerMode', 'initDate', 'shortcutPropagation'], function( key ) {  // 1534\n        if ( attrs[key] ) {                                                                                           // 1535\n          var getAttribute = $parse(attrs[key]);                                                                      // 1536\n          scope.$parent.$watch(getAttribute, function(value){                                                         // 1537\n            scope.watchData[key] = value;                                                                             // 1538\n          });                                                                                                         // 1539\n          datepickerEl.attr(cameltoDash(key), 'watchData.' + key);                                                    // 1540\n                                                                                                                      // 1541\n          // Propagate changes from datepicker to outside                                                             // 1542\n          if ( key === 'datepickerMode' ) {                                                                           // 1543\n            var setAttribute = getAttribute.assign;                                                                   // 1544\n            scope.$watch('watchData.' + key, function(value, oldvalue) {                                              // 1545\n              if ( value !== oldvalue ) {                                                                             // 1546\n                setAttribute(scope.$parent, value);                                                                   // 1547\n              }                                                                                                       // 1548\n            });                                                                                                       // 1549\n          }                                                                                                           // 1550\n        }                                                                                                             // 1551\n      });                                                                                                             // 1552\n      if (attrs.dateDisabled) {                                                                                       // 1553\n        datepickerEl.attr('date-disabled', 'dateDisabled({ date: date, mode: mode })');                               // 1554\n      }                                                                                                               // 1555\n                                                                                                                      // 1556\n      if (attrs.showWeeks) {                                                                                          // 1557\n        datepickerEl.attr('show-weeks', attrs.showWeeks);                                                             // 1558\n      }                                                                                                               // 1559\n                                                                                                                      // 1560\n      if (attrs.customClass){                                                                                         // 1561\n        datepickerEl.attr('custom-class', 'customClass({ date: date, mode: mode })');                                 // 1562\n      }                                                                                                               // 1563\n                                                                                                                      // 1564\n      function parseDate(viewValue) {                                                                                 // 1565\n        if (angular.isNumber(viewValue)) {                                                                            // 1566\n          // presumably timestamp to date object                                                                      // 1567\n          viewValue = new Date(viewValue);                                                                            // 1568\n        }                                                                                                             // 1569\n                                                                                                                      // 1570\n        if (!viewValue) {                                                                                             // 1571\n          return null;                                                                                                // 1572\n        } else if (angular.isDate(viewValue) && !isNaN(viewValue)) {                                                  // 1573\n          return viewValue;                                                                                           // 1574\n        } else if (angular.isString(viewValue)) {                                                                     // 1575\n          var date = dateParser.parse(viewValue, dateFormat, scope.date) || new Date(viewValue);                      // 1576\n          if (isNaN(date)) {                                                                                          // 1577\n            return undefined;                                                                                         // 1578\n          } else {                                                                                                    // 1579\n            return date;                                                                                              // 1580\n          }                                                                                                           // 1581\n        } else {                                                                                                      // 1582\n          return undefined;                                                                                           // 1583\n        }                                                                                                             // 1584\n      }                                                                                                               // 1585\n                                                                                                                      // 1586\n      function validator(modelValue, viewValue) {                                                                     // 1587\n        var value = modelValue || viewValue;                                                                          // 1588\n        if (angular.isNumber(value)) {                                                                                // 1589\n          value = new Date(value);                                                                                    // 1590\n        }                                                                                                             // 1591\n        if (!value) {                                                                                                 // 1592\n          return true;                                                                                                // 1593\n        } else if (angular.isDate(value) && !isNaN(value)) {                                                          // 1594\n          return true;                                                                                                // 1595\n        } else if (angular.isString(value)) {                                                                         // 1596\n          var date = dateParser.parse(value, dateFormat) || new Date(value);                                          // 1597\n          return !isNaN(date);                                                                                        // 1598\n        } else {                                                                                                      // 1599\n          return false;                                                                                               // 1600\n        }                                                                                                             // 1601\n      }                                                                                                               // 1602\n                                                                                                                      // 1603\n      if (!isHtml5DateInput) {                                                                                        // 1604\n        // Internal API to maintain the correct ng-invalid-[key] class                                                // 1605\n        ngModel.$$parserName = 'date';                                                                                // 1606\n        ngModel.$validators.date = validator;                                                                         // 1607\n        ngModel.$parsers.unshift(parseDate);                                                                          // 1608\n        ngModel.$formatters.push(function (value) {                                                                   // 1609\n          scope.date = value;                                                                                         // 1610\n          return ngModel.$isEmpty(value) ? value : dateFilter(value, dateFormat);                                     // 1611\n        });                                                                                                           // 1612\n      }                                                                                                               // 1613\n      else {                                                                                                          // 1614\n        ngModel.$formatters.push(function (value) {                                                                   // 1615\n          scope.date = value;                                                                                         // 1616\n          return value;                                                                                               // 1617\n        });                                                                                                           // 1618\n      }                                                                                                               // 1619\n                                                                                                                      // 1620\n      // Inner change                                                                                                 // 1621\n      scope.dateSelection = function(dt) {                                                                            // 1622\n        if (angular.isDefined(dt)) {                                                                                  // 1623\n          scope.date = dt;                                                                                            // 1624\n        }                                                                                                             // 1625\n        var date = scope.date ? dateFilter(scope.date, dateFormat) : '';                                              // 1626\n        element.val(date);                                                                                            // 1627\n        ngModel.$setViewValue(date);                                                                                  // 1628\n                                                                                                                      // 1629\n        if ( closeOnDateSelection ) {                                                                                 // 1630\n          scope.isOpen = false;                                                                                       // 1631\n          element[0].focus();                                                                                         // 1632\n        }                                                                                                             // 1633\n      };                                                                                                              // 1634\n                                                                                                                      // 1635\n      // Detect changes in the view from the text box                                                                 // 1636\n      ngModel.$viewChangeListeners.push(function () {                                                                 // 1637\n        scope.date = dateParser.parse(ngModel.$viewValue, dateFormat, scope.date) || new Date(ngModel.$viewValue);    // 1638\n      });                                                                                                             // 1639\n                                                                                                                      // 1640\n      var documentClickBind = function(event) {                                                                       // 1641\n        if (scope.isOpen && event.target !== element[0]) {                                                            // 1642\n          scope.$apply(function() {                                                                                   // 1643\n            scope.isOpen = false;                                                                                     // 1644\n          });                                                                                                         // 1645\n        }                                                                                                             // 1646\n      };                                                                                                              // 1647\n                                                                                                                      // 1648\n      var keydown = function(evt, noApply) {                                                                          // 1649\n        scope.keydown(evt);                                                                                           // 1650\n      };                                                                                                              // 1651\n      element.bind('keydown', keydown);                                                                               // 1652\n                                                                                                                      // 1653\n      scope.keydown = function(evt) {                                                                                 // 1654\n        if (evt.which === 27) {                                                                                       // 1655\n          evt.preventDefault();                                                                                       // 1656\n          if (scope.isOpen) {                                                                                         // 1657\n            evt.stopPropagation();                                                                                    // 1658\n          }                                                                                                           // 1659\n          scope.close();                                                                                              // 1660\n        } else if (evt.which === 40 && !scope.isOpen) {                                                               // 1661\n          scope.isOpen = true;                                                                                        // 1662\n        }                                                                                                             // 1663\n      };                                                                                                              // 1664\n                                                                                                                      // 1665\n      scope.$watch('isOpen', function(value) {                                                                        // 1666\n        if (value) {                                                                                                  // 1667\n          scope.$broadcast('datepicker.focus');                                                                       // 1668\n          scope.position = appendToBody ? $position.offset(element) : $position.position(element);                    // 1669\n          scope.position.top = scope.position.top + element.prop('offsetHeight');                                     // 1670\n                                                                                                                      // 1671\n          $document.bind('click', documentClickBind);                                                                 // 1672\n        } else {                                                                                                      // 1673\n          $document.unbind('click', documentClickBind);                                                               // 1674\n        }                                                                                                             // 1675\n      });                                                                                                             // 1676\n                                                                                                                      // 1677\n      scope.select = function( date ) {                                                                               // 1678\n        if (date === 'today') {                                                                                       // 1679\n          var today = new Date();                                                                                     // 1680\n          if (angular.isDate(scope.date)) {                                                                           // 1681\n            date = new Date(scope.date);                                                                              // 1682\n            date.setFullYear(today.getFullYear(), today.getMonth(), today.getDate());                                 // 1683\n          } else {                                                                                                    // 1684\n            date = new Date(today.setHours(0, 0, 0, 0));                                                              // 1685\n          }                                                                                                           // 1686\n        }                                                                                                             // 1687\n        scope.dateSelection( date );                                                                                  // 1688\n      };                                                                                                              // 1689\n                                                                                                                      // 1690\n      scope.close = function() {                                                                                      // 1691\n        scope.isOpen = false;                                                                                         // 1692\n        element[0].focus();                                                                                           // 1693\n      };                                                                                                              // 1694\n                                                                                                                      // 1695\n      var $popup = $compile(popupEl)(scope);                                                                          // 1696\n      // Prevent jQuery cache memory leak (template is now redundant after linking)                                   // 1697\n      popupEl.remove();                                                                                               // 1698\n                                                                                                                      // 1699\n      if ( appendToBody ) {                                                                                           // 1700\n        $document.find('body').append($popup);                                                                        // 1701\n      } else {                                                                                                        // 1702\n        element.after($popup);                                                                                        // 1703\n      }                                                                                                               // 1704\n                                                                                                                      // 1705\n      scope.$on('$destroy', function() {                                                                              // 1706\n        $popup.remove();                                                                                              // 1707\n        element.unbind('keydown', keydown);                                                                           // 1708\n        $document.unbind('click', documentClickBind);                                                                 // 1709\n      });                                                                                                             // 1710\n    }                                                                                                                 // 1711\n  };                                                                                                                  // 1712\n}])                                                                                                                   // 1713\n                                                                                                                      // 1714\n.directive('datepickerPopupWrap', function() {                                                                        // 1715\n  return {                                                                                                            // 1716\n    restrict:'EA',                                                                                                    // 1717\n    replace: true,                                                                                                    // 1718\n    transclude: true,                                                                                                 // 1719\n    templateUrl: 'template/datepicker/popup.html',                                                                    // 1720\n    link:function (scope, element, attrs) {                                                                           // 1721\n      element.bind('click', function(event) {                                                                         // 1722\n        event.preventDefault();                                                                                       // 1723\n        event.stopPropagation();                                                                                      // 1724\n      });                                                                                                             // 1725\n    }                                                                                                                 // 1726\n  };                                                                                                                  // 1727\n});                                                                                                                   // 1728\n                                                                                                                      // 1729\nangular.module('ui.bootstrap.dropdown', ['ui.bootstrap.position'])                                                    // 1730\n                                                                                                                      // 1731\n.constant('dropdownConfig', {                                                                                         // 1732\n  openClass: 'open'                                                                                                   // 1733\n})                                                                                                                    // 1734\n                                                                                                                      // 1735\n.service('dropdownService', ['$document', '$rootScope', function($document, $rootScope) {                             // 1736\n  var openScope = null;                                                                                               // 1737\n                                                                                                                      // 1738\n  this.open = function( dropdownScope ) {                                                                             // 1739\n    if ( !openScope ) {                                                                                               // 1740\n      $document.bind('click', closeDropdown);                                                                         // 1741\n      $document.bind('keydown', escapeKeyBind);                                                                       // 1742\n    }                                                                                                                 // 1743\n                                                                                                                      // 1744\n    if ( openScope && openScope !== dropdownScope ) {                                                                 // 1745\n        openScope.isOpen = false;                                                                                     // 1746\n    }                                                                                                                 // 1747\n                                                                                                                      // 1748\n    openScope = dropdownScope;                                                                                        // 1749\n  };                                                                                                                  // 1750\n                                                                                                                      // 1751\n  this.close = function( dropdownScope ) {                                                                            // 1752\n    if ( openScope === dropdownScope ) {                                                                              // 1753\n      openScope = null;                                                                                               // 1754\n      $document.unbind('click', closeDropdown);                                                                       // 1755\n      $document.unbind('keydown', escapeKeyBind);                                                                     // 1756\n    }                                                                                                                 // 1757\n  };                                                                                                                  // 1758\n                                                                                                                      // 1759\n  var closeDropdown = function( evt ) {                                                                               // 1760\n    // This method may still be called during the same mouse event that                                               // 1761\n    // unbound this event handler. So check openScope before proceeding.                                              // 1762\n    if (!openScope) { return; }                                                                                       // 1763\n                                                                                                                      // 1764\n    if( evt && openScope.getAutoClose() === 'disabled' )  { return ; }                                                // 1765\n                                                                                                                      // 1766\n    var toggleElement = openScope.getToggleElement();                                                                 // 1767\n    if ( evt && toggleElement && toggleElement[0].contains(evt.target) ) {                                            // 1768\n        return;                                                                                                       // 1769\n    }                                                                                                                 // 1770\n                                                                                                                      // 1771\n    var $element = openScope.getElement();                                                                            // 1772\n    if( evt && openScope.getAutoClose() === 'outsideClick' && $element && $element[0].contains(evt.target) ) {        // 1773\n      return;                                                                                                         // 1774\n    }                                                                                                                 // 1775\n                                                                                                                      // 1776\n    openScope.isOpen = false;                                                                                         // 1777\n                                                                                                                      // 1778\n    if (!$rootScope.$$phase) {                                                                                        // 1779\n      openScope.$apply();                                                                                             // 1780\n    }                                                                                                                 // 1781\n  };                                                                                                                  // 1782\n                                                                                                                      // 1783\n  var escapeKeyBind = function( evt ) {                                                                               // 1784\n    if ( evt.which === 27 ) {                                                                                         // 1785\n      openScope.focusToggleElement();                                                                                 // 1786\n      closeDropdown();                                                                                                // 1787\n    }                                                                                                                 // 1788\n  };                                                                                                                  // 1789\n}])                                                                                                                   // 1790\n                                                                                                                      // 1791\n.controller('DropdownController', ['$scope', '$attrs', '$parse', 'dropdownConfig', 'dropdownService', '$animate', '$position', '$document', function($scope, $attrs, $parse, dropdownConfig, dropdownService, $animate, $position, $document) {\n  var self = this,                                                                                                    // 1793\n      scope = $scope.$new(), // create a child scope so we are not polluting original one                             // 1794\n      openClass = dropdownConfig.openClass,                                                                           // 1795\n      getIsOpen,                                                                                                      // 1796\n      setIsOpen = angular.noop,                                                                                       // 1797\n      toggleInvoker = $attrs.onToggle ? $parse($attrs.onToggle) : angular.noop,                                       // 1798\n      appendToBody = false;                                                                                           // 1799\n                                                                                                                      // 1800\n  this.init = function( element ) {                                                                                   // 1801\n    self.$element = element;                                                                                          // 1802\n                                                                                                                      // 1803\n    if ( $attrs.isOpen ) {                                                                                            // 1804\n      getIsOpen = $parse($attrs.isOpen);                                                                              // 1805\n      setIsOpen = getIsOpen.assign;                                                                                   // 1806\n                                                                                                                      // 1807\n      $scope.$watch(getIsOpen, function(value) {                                                                      // 1808\n        scope.isOpen = !!value;                                                                                       // 1809\n      });                                                                                                             // 1810\n    }                                                                                                                 // 1811\n                                                                                                                      // 1812\n    appendToBody = angular.isDefined($attrs.dropdownAppendToBody);                                                    // 1813\n                                                                                                                      // 1814\n    if ( appendToBody && self.dropdownMenu ) {                                                                        // 1815\n      $document.find('body').append( self.dropdownMenu );                                                             // 1816\n      element.on('$destroy', function handleDestroyEvent() {                                                          // 1817\n        self.dropdownMenu.remove();                                                                                   // 1818\n      });                                                                                                             // 1819\n    }                                                                                                                 // 1820\n  };                                                                                                                  // 1821\n                                                                                                                      // 1822\n  this.toggle = function( open ) {                                                                                    // 1823\n    return scope.isOpen = arguments.length ? !!open : !scope.isOpen;                                                  // 1824\n  };                                                                                                                  // 1825\n                                                                                                                      // 1826\n  // Allow other directives to watch status                                                                           // 1827\n  this.isOpen = function() {                                                                                          // 1828\n    return scope.isOpen;                                                                                              // 1829\n  };                                                                                                                  // 1830\n                                                                                                                      // 1831\n  scope.getToggleElement = function() {                                                                               // 1832\n    return self.toggleElement;                                                                                        // 1833\n  };                                                                                                                  // 1834\n                                                                                                                      // 1835\n  scope.getAutoClose = function() {                                                                                   // 1836\n    return $attrs.autoClose || 'always'; //or 'outsideClick' or 'disabled'                                            // 1837\n  };                                                                                                                  // 1838\n                                                                                                                      // 1839\n  scope.getElement = function() {                                                                                     // 1840\n    return self.$element;                                                                                             // 1841\n  };                                                                                                                  // 1842\n                                                                                                                      // 1843\n  scope.focusToggleElement = function() {                                                                             // 1844\n    if ( self.toggleElement ) {                                                                                       // 1845\n      self.toggleElement[0].focus();                                                                                  // 1846\n    }                                                                                                                 // 1847\n  };                                                                                                                  // 1848\n                                                                                                                      // 1849\n  scope.$watch('isOpen', function( isOpen, wasOpen ) {                                                                // 1850\n    if ( appendToBody && self.dropdownMenu ) {                                                                        // 1851\n      var pos = $position.positionElements(self.$element, self.dropdownMenu, 'bottom-left', true);                    // 1852\n      self.dropdownMenu.css({                                                                                         // 1853\n        top: pos.top + 'px',                                                                                          // 1854\n        left: pos.left + 'px',                                                                                        // 1855\n        display: isOpen ? 'block' : 'none'                                                                            // 1856\n      });                                                                                                             // 1857\n    }                                                                                                                 // 1858\n                                                                                                                      // 1859\n    $animate[isOpen ? 'addClass' : 'removeClass'](self.$element, openClass);                                          // 1860\n                                                                                                                      // 1861\n    if ( isOpen ) {                                                                                                   // 1862\n      scope.focusToggleElement();                                                                                     // 1863\n      dropdownService.open( scope );                                                                                  // 1864\n    } else {                                                                                                          // 1865\n      dropdownService.close( scope );                                                                                 // 1866\n    }                                                                                                                 // 1867\n                                                                                                                      // 1868\n    setIsOpen($scope, isOpen);                                                                                        // 1869\n    if (angular.isDefined(isOpen) && isOpen !== wasOpen) {                                                            // 1870\n      toggleInvoker($scope, { open: !!isOpen });                                                                      // 1871\n    }                                                                                                                 // 1872\n  });                                                                                                                 // 1873\n                                                                                                                      // 1874\n  $scope.$on('$locationChangeSuccess', function() {                                                                   // 1875\n    scope.isOpen = false;                                                                                             // 1876\n  });                                                                                                                 // 1877\n                                                                                                                      // 1878\n  $scope.$on('$destroy', function() {                                                                                 // 1879\n    scope.$destroy();                                                                                                 // 1880\n  });                                                                                                                 // 1881\n}])                                                                                                                   // 1882\n                                                                                                                      // 1883\n.directive('dropdown', function() {                                                                                   // 1884\n  return {                                                                                                            // 1885\n    controller: 'DropdownController',                                                                                 // 1886\n    link: function(scope, element, attrs, dropdownCtrl) {                                                             // 1887\n      dropdownCtrl.init( element );                                                                                   // 1888\n    }                                                                                                                 // 1889\n  };                                                                                                                  // 1890\n})                                                                                                                    // 1891\n                                                                                                                      // 1892\n.directive('dropdownMenu', function() {                                                                               // 1893\n  return {                                                                                                            // 1894\n    restrict: 'AC',                                                                                                   // 1895\n    require: '?^dropdown',                                                                                            // 1896\n    link: function(scope, element, attrs, dropdownCtrl) {                                                             // 1897\n      if ( !dropdownCtrl ) {                                                                                          // 1898\n        return;                                                                                                       // 1899\n      }                                                                                                               // 1900\n      dropdownCtrl.dropdownMenu = element;                                                                            // 1901\n    }                                                                                                                 // 1902\n  };                                                                                                                  // 1903\n})                                                                                                                    // 1904\n                                                                                                                      // 1905\n.directive('dropdownToggle', function() {                                                                             // 1906\n  return {                                                                                                            // 1907\n    require: '?^dropdown',                                                                                            // 1908\n    link: function(scope, element, attrs, dropdownCtrl) {                                                             // 1909\n      if ( !dropdownCtrl ) {                                                                                          // 1910\n        return;                                                                                                       // 1911\n      }                                                                                                               // 1912\n                                                                                                                      // 1913\n      dropdownCtrl.toggleElement = element;                                                                           // 1914\n                                                                                                                      // 1915\n      var toggleDropdown = function(event) {                                                                          // 1916\n        event.preventDefault();                                                                                       // 1917\n                                                                                                                      // 1918\n        if ( !element.hasClass('disabled') && !attrs.disabled ) {                                                     // 1919\n          scope.$apply(function() {                                                                                   // 1920\n            dropdownCtrl.toggle();                                                                                    // 1921\n          });                                                                                                         // 1922\n        }                                                                                                             // 1923\n      };                                                                                                              // 1924\n                                                                                                                      // 1925\n      element.bind('click', toggleDropdown);                                                                          // 1926\n                                                                                                                      // 1927\n      // WAI-ARIA                                                                                                     // 1928\n      element.attr({ 'aria-haspopup': true, 'aria-expanded': false });                                                // 1929\n      scope.$watch(dropdownCtrl.isOpen, function( isOpen ) {                                                          // 1930\n        element.attr('aria-expanded', !!isOpen);                                                                      // 1931\n      });                                                                                                             // 1932\n                                                                                                                      // 1933\n      scope.$on('$destroy', function() {                                                                              // 1934\n        element.unbind('click', toggleDropdown);                                                                      // 1935\n      });                                                                                                             // 1936\n    }                                                                                                                 // 1937\n  };                                                                                                                  // 1938\n});                                                                                                                   // 1939\n                                                                                                                      // 1940\nangular.module('ui.bootstrap.modal', [])                                                                              // 1941\n                                                                                                                      // 1942\n/**                                                                                                                   // 1943\n * A helper, internal data structure that acts as a map but also allows getting / removing                            // 1944\n * elements in the LIFO order                                                                                         // 1945\n */                                                                                                                   // 1946\n  .factory('$$stackedMap', function () {                                                                              // 1947\n    return {                                                                                                          // 1948\n      createNew: function () {                                                                                        // 1949\n        var stack = [];                                                                                               // 1950\n                                                                                                                      // 1951\n        return {                                                                                                      // 1952\n          add: function (key, value) {                                                                                // 1953\n            stack.push({                                                                                              // 1954\n              key: key,                                                                                               // 1955\n              value: value                                                                                            // 1956\n            });                                                                                                       // 1957\n          },                                                                                                          // 1958\n          get: function (key) {                                                                                       // 1959\n            for (var i = 0; i < stack.length; i++) {                                                                  // 1960\n              if (key == stack[i].key) {                                                                              // 1961\n                return stack[i];                                                                                      // 1962\n              }                                                                                                       // 1963\n            }                                                                                                         // 1964\n          },                                                                                                          // 1965\n          keys: function() {                                                                                          // 1966\n            var keys = [];                                                                                            // 1967\n            for (var i = 0; i < stack.length; i++) {                                                                  // 1968\n              keys.push(stack[i].key);                                                                                // 1969\n            }                                                                                                         // 1970\n            return keys;                                                                                              // 1971\n          },                                                                                                          // 1972\n          top: function () {                                                                                          // 1973\n            return stack[stack.length - 1];                                                                           // 1974\n          },                                                                                                          // 1975\n          remove: function (key) {                                                                                    // 1976\n            var idx = -1;                                                                                             // 1977\n            for (var i = 0; i < stack.length; i++) {                                                                  // 1978\n              if (key == stack[i].key) {                                                                              // 1979\n                idx = i;                                                                                              // 1980\n                break;                                                                                                // 1981\n              }                                                                                                       // 1982\n            }                                                                                                         // 1983\n            return stack.splice(idx, 1)[0];                                                                           // 1984\n          },                                                                                                          // 1985\n          removeTop: function () {                                                                                    // 1986\n            return stack.splice(stack.length - 1, 1)[0];                                                              // 1987\n          },                                                                                                          // 1988\n          length: function () {                                                                                       // 1989\n            return stack.length;                                                                                      // 1990\n          }                                                                                                           // 1991\n        };                                                                                                            // 1992\n      }                                                                                                               // 1993\n    };                                                                                                                // 1994\n  })                                                                                                                  // 1995\n                                                                                                                      // 1996\n/**                                                                                                                   // 1997\n * A helper directive for the $modal service. It creates a backdrop element.                                          // 1998\n */                                                                                                                   // 1999\n  .directive('modalBackdrop', ['$timeout', function ($timeout) {                                                      // 2000\n    return {                                                                                                          // 2001\n      restrict: 'EA',                                                                                                 // 2002\n      replace: true,                                                                                                  // 2003\n      templateUrl: 'template/modal/backdrop.html',                                                                    // 2004\n      compile: function (tElement, tAttrs) {                                                                          // 2005\n        tElement.addClass(tAttrs.backdropClass);                                                                      // 2006\n        return linkFn;                                                                                                // 2007\n      }                                                                                                               // 2008\n    };                                                                                                                // 2009\n                                                                                                                      // 2010\n    function linkFn(scope, element, attrs) {                                                                          // 2011\n      scope.animate = false;                                                                                          // 2012\n                                                                                                                      // 2013\n      //trigger CSS transitions                                                                                       // 2014\n      $timeout(function () {                                                                                          // 2015\n        scope.animate = true;                                                                                         // 2016\n      });                                                                                                             // 2017\n    }                                                                                                                 // 2018\n  }])                                                                                                                 // 2019\n                                                                                                                      // 2020\n  .directive('modalWindow', ['$modalStack', '$q', function ($modalStack, $q) {                                        // 2021\n    return {                                                                                                          // 2022\n      restrict: 'EA',                                                                                                 // 2023\n      scope: {                                                                                                        // 2024\n        index: '@',                                                                                                   // 2025\n        animate: '='                                                                                                  // 2026\n      },                                                                                                              // 2027\n      replace: true,                                                                                                  // 2028\n      transclude: true,                                                                                               // 2029\n      templateUrl: function(tElement, tAttrs) {                                                                       // 2030\n        return tAttrs.templateUrl || 'template/modal/window.html';                                                    // 2031\n      },                                                                                                              // 2032\n      link: function (scope, element, attrs) {                                                                        // 2033\n        element.addClass(attrs.windowClass || '');                                                                    // 2034\n        scope.size = attrs.size;                                                                                      // 2035\n                                                                                                                      // 2036\n        scope.close = function (evt) {                                                                                // 2037\n          var modal = $modalStack.getTop();                                                                           // 2038\n          if (modal && modal.value.backdrop && modal.value.backdrop != 'static' && (evt.target === evt.currentTarget)) {\n            evt.preventDefault();                                                                                     // 2040\n            evt.stopPropagation();                                                                                    // 2041\n            $modalStack.dismiss(modal.key, 'backdrop click');                                                         // 2042\n          }                                                                                                           // 2043\n        };                                                                                                            // 2044\n                                                                                                                      // 2045\n        // This property is only added to the scope for the purpose of detecting when this directive is rendered.     // 2046\n        // We can detect that by using this property in the template associated with this directive and then use      // 2047\n        // {@link Attribute#$observe} on it. For more details please see {@link TableColumnResize}.                   // 2048\n        scope.$isRendered = true;                                                                                     // 2049\n                                                                                                                      // 2050\n        // Deferred object that will be resolved when this modal is render.                                           // 2051\n        var modalRenderDeferObj = $q.defer();                                                                         // 2052\n        // Observe function will be called on next digest cycle after compilation, ensuring that the DOM is ready.    // 2053\n        // In order to use this way of finding whether DOM is ready, we need to observe a scope property used in modal's template.\n        attrs.$observe('modalRender', function (value) {                                                              // 2055\n          if (value == 'true') {                                                                                      // 2056\n            modalRenderDeferObj.resolve();                                                                            // 2057\n          }                                                                                                           // 2058\n        });                                                                                                           // 2059\n                                                                                                                      // 2060\n        modalRenderDeferObj.promise.then(function () {                                                                // 2061\n          // trigger CSS transitions                                                                                  // 2062\n          scope.animate = true;                                                                                       // 2063\n                                                                                                                      // 2064\n          var inputsWithAutofocus = element[0].querySelectorAll('[autofocus]');                                       // 2065\n          /**                                                                                                         // 2066\n           * Auto-focusing of a freshly-opened modal element causes any child elements                                // 2067\n           * with the autofocus attribute to lose focus. This is an issue on touch                                    // 2068\n           * based devices which will show and then hide the onscreen keyboard.                                       // 2069\n           * Attempts to refocus the autofocus element via JavaScript will not reopen                                 // 2070\n           * the onscreen keyboard. Fixed by updated the focusing logic to only autofocus                             // 2071\n           * the modal element if the modal does not contain an autofocus element.                                    // 2072\n           */                                                                                                         // 2073\n          if (inputsWithAutofocus.length) {                                                                           // 2074\n            inputsWithAutofocus[0].focus();                                                                           // 2075\n          } else {                                                                                                    // 2076\n            element[0].focus();                                                                                       // 2077\n          }                                                                                                           // 2078\n                                                                                                                      // 2079\n          // Notify {@link $modalStack} that modal is rendered.                                                       // 2080\n          var modal = $modalStack.getTop();                                                                           // 2081\n          if (modal) {                                                                                                // 2082\n            $modalStack.modalRendered(modal.key);                                                                     // 2083\n          }                                                                                                           // 2084\n        });                                                                                                           // 2085\n      }                                                                                                               // 2086\n    };                                                                                                                // 2087\n  }])                                                                                                                 // 2088\n                                                                                                                      // 2089\n  .directive('modalAnimationClass', [                                                                                 // 2090\n    function () {                                                                                                     // 2091\n      return {                                                                                                        // 2092\n        compile: function (tElement, tAttrs) {                                                                        // 2093\n          if (tAttrs.modalAnimation) {                                                                                // 2094\n            tElement.addClass(tAttrs.modalAnimationClass);                                                            // 2095\n          }                                                                                                           // 2096\n        }                                                                                                             // 2097\n      };                                                                                                              // 2098\n    }])                                                                                                               // 2099\n                                                                                                                      // 2100\n  .directive('modalTransclude', function () {                                                                         // 2101\n    return {                                                                                                          // 2102\n      link: function($scope, $element, $attrs, controller, $transclude) {                                             // 2103\n        $transclude($scope.$parent, function(clone) {                                                                 // 2104\n          $element.empty();                                                                                           // 2105\n          $element.append(clone);                                                                                     // 2106\n        });                                                                                                           // 2107\n      }                                                                                                               // 2108\n    };                                                                                                                // 2109\n  })                                                                                                                  // 2110\n                                                                                                                      // 2111\n  .factory('$modalStack', ['$animate', '$timeout', '$document', '$compile', '$rootScope', '$$stackedMap',             // 2112\n    function ($animate, $timeout, $document, $compile, $rootScope, $$stackedMap) {                                    // 2113\n                                                                                                                      // 2114\n      var OPENED_MODAL_CLASS = 'modal-open';                                                                          // 2115\n                                                                                                                      // 2116\n      var backdropDomEl, backdropScope;                                                                               // 2117\n      var openedWindows = $$stackedMap.createNew();                                                                   // 2118\n      var $modalStack = {};                                                                                           // 2119\n                                                                                                                      // 2120\n      function backdropIndex() {                                                                                      // 2121\n        var topBackdropIndex = -1;                                                                                    // 2122\n        var opened = openedWindows.keys();                                                                            // 2123\n        for (var i = 0; i < opened.length; i++) {                                                                     // 2124\n          if (openedWindows.get(opened[i]).value.backdrop) {                                                          // 2125\n            topBackdropIndex = i;                                                                                     // 2126\n          }                                                                                                           // 2127\n        }                                                                                                             // 2128\n        return topBackdropIndex;                                                                                      // 2129\n      }                                                                                                               // 2130\n                                                                                                                      // 2131\n      $rootScope.$watch(backdropIndex, function(newBackdropIndex){                                                    // 2132\n        if (backdropScope) {                                                                                          // 2133\n          backdropScope.index = newBackdropIndex;                                                                     // 2134\n        }                                                                                                             // 2135\n      });                                                                                                             // 2136\n                                                                                                                      // 2137\n      function removeModalWindow(modalInstance) {                                                                     // 2138\n                                                                                                                      // 2139\n        var body = $document.find('body').eq(0);                                                                      // 2140\n        var modalWindow = openedWindows.get(modalInstance).value;                                                     // 2141\n                                                                                                                      // 2142\n        //clean up the stack                                                                                          // 2143\n        openedWindows.remove(modalInstance);                                                                          // 2144\n                                                                                                                      // 2145\n        //remove window DOM element                                                                                   // 2146\n        removeAfterAnimate(modalWindow.modalDomEl, modalWindow.modalScope, function() {                               // 2147\n          body.toggleClass(OPENED_MODAL_CLASS, openedWindows.length() > 0);                                           // 2148\n          checkRemoveBackdrop();                                                                                      // 2149\n        });                                                                                                           // 2150\n      }                                                                                                               // 2151\n                                                                                                                      // 2152\n      function checkRemoveBackdrop() {                                                                                // 2153\n          //remove backdrop if no longer needed                                                                       // 2154\n          if (backdropDomEl && backdropIndex() == -1) {                                                               // 2155\n            var backdropScopeRef = backdropScope;                                                                     // 2156\n            removeAfterAnimate(backdropDomEl, backdropScope, function () {                                            // 2157\n              backdropScopeRef = null;                                                                                // 2158\n            });                                                                                                       // 2159\n            backdropDomEl = undefined;                                                                                // 2160\n            backdropScope = undefined;                                                                                // 2161\n          }                                                                                                           // 2162\n      }                                                                                                               // 2163\n                                                                                                                      // 2164\n      function removeAfterAnimate(domEl, scope, done) {                                                               // 2165\n        // Closing animation                                                                                          // 2166\n        scope.animate = false;                                                                                        // 2167\n                                                                                                                      // 2168\n        if (domEl.attr('modal-animation') && $animate.enabled()) {                                                    // 2169\n          // transition out                                                                                           // 2170\n          domEl.one('$animate:close', function closeFn() {                                                            // 2171\n            $rootScope.$evalAsync(afterAnimating);                                                                    // 2172\n          });                                                                                                         // 2173\n        } else {                                                                                                      // 2174\n          // Ensure this call is async                                                                                // 2175\n          $timeout(afterAnimating);                                                                                   // 2176\n        }                                                                                                             // 2177\n                                                                                                                      // 2178\n        function afterAnimating() {                                                                                   // 2179\n          if (afterAnimating.done) {                                                                                  // 2180\n            return;                                                                                                   // 2181\n          }                                                                                                           // 2182\n          afterAnimating.done = true;                                                                                 // 2183\n                                                                                                                      // 2184\n          domEl.remove();                                                                                             // 2185\n          scope.$destroy();                                                                                           // 2186\n          if (done) {                                                                                                 // 2187\n            done();                                                                                                   // 2188\n          }                                                                                                           // 2189\n        }                                                                                                             // 2190\n      }                                                                                                               // 2191\n                                                                                                                      // 2192\n      $document.bind('keydown', function (evt) {                                                                      // 2193\n        var modal;                                                                                                    // 2194\n                                                                                                                      // 2195\n        if (evt.which === 27) {                                                                                       // 2196\n          modal = openedWindows.top();                                                                                // 2197\n          if (modal && modal.value.keyboard) {                                                                        // 2198\n            evt.preventDefault();                                                                                     // 2199\n            $rootScope.$apply(function () {                                                                           // 2200\n              $modalStack.dismiss(modal.key, 'escape key press');                                                     // 2201\n            });                                                                                                       // 2202\n          }                                                                                                           // 2203\n        }                                                                                                             // 2204\n      });                                                                                                             // 2205\n                                                                                                                      // 2206\n      $modalStack.open = function (modalInstance, modal) {                                                            // 2207\n                                                                                                                      // 2208\n        var modalOpener = $document[0].activeElement;                                                                 // 2209\n                                                                                                                      // 2210\n        openedWindows.add(modalInstance, {                                                                            // 2211\n          deferred: modal.deferred,                                                                                   // 2212\n          renderDeferred: modal.renderDeferred,                                                                       // 2213\n          modalScope: modal.scope,                                                                                    // 2214\n          backdrop: modal.backdrop,                                                                                   // 2215\n          keyboard: modal.keyboard                                                                                    // 2216\n        });                                                                                                           // 2217\n                                                                                                                      // 2218\n        var body = $document.find('body').eq(0),                                                                      // 2219\n            currBackdropIndex = backdropIndex();                                                                      // 2220\n                                                                                                                      // 2221\n        if (currBackdropIndex >= 0 && !backdropDomEl) {                                                               // 2222\n          backdropScope = $rootScope.$new(true);                                                                      // 2223\n          backdropScope.index = currBackdropIndex;                                                                    // 2224\n          var angularBackgroundDomEl = angular.element('<div modal-backdrop=\"modal-backdrop\"></div>');                // 2225\n          angularBackgroundDomEl.attr('backdrop-class', modal.backdropClass);                                         // 2226\n          if (modal.animation) {                                                                                      // 2227\n            angularBackgroundDomEl.attr('modal-animation', 'true');                                                   // 2228\n          }                                                                                                           // 2229\n          backdropDomEl = $compile(angularBackgroundDomEl)(backdropScope);                                            // 2230\n          body.append(backdropDomEl);                                                                                 // 2231\n        }                                                                                                             // 2232\n                                                                                                                      // 2233\n        var angularDomEl = angular.element('<div modal-window=\"modal-window\"></div>');                                // 2234\n        angularDomEl.attr({                                                                                           // 2235\n          'template-url': modal.windowTemplateUrl,                                                                    // 2236\n          'window-class': modal.windowClass,                                                                          // 2237\n          'size': modal.size,                                                                                         // 2238\n          'index': openedWindows.length() - 1,                                                                        // 2239\n          'animate': 'animate'                                                                                        // 2240\n        }).html(modal.content);                                                                                       // 2241\n        if (modal.animation) {                                                                                        // 2242\n          angularDomEl.attr('modal-animation', 'true');                                                               // 2243\n        }                                                                                                             // 2244\n                                                                                                                      // 2245\n        var modalDomEl = $compile(angularDomEl)(modal.scope);                                                         // 2246\n        openedWindows.top().value.modalDomEl = modalDomEl;                                                            // 2247\n        openedWindows.top().value.modalOpener = modalOpener;                                                          // 2248\n        body.append(modalDomEl);                                                                                      // 2249\n        body.addClass(OPENED_MODAL_CLASS);                                                                            // 2250\n      };                                                                                                              // 2251\n                                                                                                                      // 2252\n      function broadcastClosing(modalWindow, resultOrReason, closing) {                                               // 2253\n          return !modalWindow.value.modalScope.$broadcast('modal.closing', resultOrReason, closing).defaultPrevented; // 2254\n      }                                                                                                               // 2255\n                                                                                                                      // 2256\n      $modalStack.close = function (modalInstance, result) {                                                          // 2257\n        var modalWindow = openedWindows.get(modalInstance);                                                           // 2258\n        if (modalWindow && broadcastClosing(modalWindow, result, true)) {                                             // 2259\n          modalWindow.value.deferred.resolve(result);                                                                 // 2260\n          removeModalWindow(modalInstance);                                                                           // 2261\n          modalWindow.value.modalOpener.focus();                                                                      // 2262\n          return true;                                                                                                // 2263\n        }                                                                                                             // 2264\n        return !modalWindow;                                                                                          // 2265\n      };                                                                                                              // 2266\n                                                                                                                      // 2267\n      $modalStack.dismiss = function (modalInstance, reason) {                                                        // 2268\n        var modalWindow = openedWindows.get(modalInstance);                                                           // 2269\n        if (modalWindow && broadcastClosing(modalWindow, reason, false)) {                                            // 2270\n          modalWindow.value.deferred.reject(reason);                                                                  // 2271\n          removeModalWindow(modalInstance);                                                                           // 2272\n          modalWindow.value.modalOpener.focus();                                                                      // 2273\n          return true;                                                                                                // 2274\n        }                                                                                                             // 2275\n        return !modalWindow;                                                                                          // 2276\n      };                                                                                                              // 2277\n                                                                                                                      // 2278\n      $modalStack.dismissAll = function (reason) {                                                                    // 2279\n        var topModal = this.getTop();                                                                                 // 2280\n        while (topModal && this.dismiss(topModal.key, reason)) {                                                      // 2281\n          topModal = this.getTop();                                                                                   // 2282\n        }                                                                                                             // 2283\n      };                                                                                                              // 2284\n                                                                                                                      // 2285\n      $modalStack.getTop = function () {                                                                              // 2286\n        return openedWindows.top();                                                                                   // 2287\n      };                                                                                                              // 2288\n                                                                                                                      // 2289\n      $modalStack.modalRendered = function (modalInstance) {                                                          // 2290\n        var modalWindow = openedWindows.get(modalInstance);                                                           // 2291\n        if (modalWindow) {                                                                                            // 2292\n          modalWindow.value.renderDeferred.resolve();                                                                 // 2293\n        }                                                                                                             // 2294\n      };                                                                                                              // 2295\n                                                                                                                      // 2296\n      return $modalStack;                                                                                             // 2297\n    }])                                                                                                               // 2298\n                                                                                                                      // 2299\n  .provider('$modal', function () {                                                                                   // 2300\n                                                                                                                      // 2301\n    var $modalProvider = {                                                                                            // 2302\n      options: {                                                                                                      // 2303\n        animation: true,                                                                                              // 2304\n        backdrop: true, //can also be false or 'static'                                                               // 2305\n        keyboard: true                                                                                                // 2306\n      },                                                                                                              // 2307\n      $get: ['$injector', '$rootScope', '$q', '$templateRequest', '$controller', '$modalStack',                       // 2308\n        function ($injector, $rootScope, $q, $templateRequest, $controller, $modalStack) {                            // 2309\n                                                                                                                      // 2310\n          var $modal = {};                                                                                            // 2311\n                                                                                                                      // 2312\n          function getTemplatePromise(options) {                                                                      // 2313\n            return options.template ? $q.when(options.template) :                                                     // 2314\n              $templateRequest(angular.isFunction(options.templateUrl) ? (options.templateUrl)() : options.templateUrl);\n          }                                                                                                           // 2316\n                                                                                                                      // 2317\n          function getResolvePromises(resolves) {                                                                     // 2318\n            var promisesArr = [];                                                                                     // 2319\n            angular.forEach(resolves, function (value) {                                                              // 2320\n              if (angular.isFunction(value) || angular.isArray(value)) {                                              // 2321\n                promisesArr.push($q.when($injector.invoke(value)));                                                   // 2322\n              }                                                                                                       // 2323\n            });                                                                                                       // 2324\n            return promisesArr;                                                                                       // 2325\n          }                                                                                                           // 2326\n                                                                                                                      // 2327\n          $modal.open = function (modalOptions) {                                                                     // 2328\n                                                                                                                      // 2329\n            var modalResultDeferred = $q.defer();                                                                     // 2330\n            var modalOpenedDeferred = $q.defer();                                                                     // 2331\n            var modalRenderDeferred = $q.defer();                                                                     // 2332\n                                                                                                                      // 2333\n            //prepare an instance of a modal to be injected into controllers and returned to a caller                 // 2334\n            var modalInstance = {                                                                                     // 2335\n              result: modalResultDeferred.promise,                                                                    // 2336\n              opened: modalOpenedDeferred.promise,                                                                    // 2337\n              rendered: modalRenderDeferred.promise,                                                                  // 2338\n              close: function (result) {                                                                              // 2339\n                return $modalStack.close(modalInstance, result);                                                      // 2340\n              },                                                                                                      // 2341\n              dismiss: function (reason) {                                                                            // 2342\n                return $modalStack.dismiss(modalInstance, reason);                                                    // 2343\n              }                                                                                                       // 2344\n            };                                                                                                        // 2345\n                                                                                                                      // 2346\n            //merge and clean up options                                                                              // 2347\n            modalOptions = angular.extend({}, $modalProvider.options, modalOptions);                                  // 2348\n            modalOptions.resolve = modalOptions.resolve || {};                                                        // 2349\n                                                                                                                      // 2350\n            //verify options                                                                                          // 2351\n            if (!modalOptions.template && !modalOptions.templateUrl) {                                                // 2352\n              throw new Error('One of template or templateUrl options is required.');                                 // 2353\n            }                                                                                                         // 2354\n                                                                                                                      // 2355\n            var templateAndResolvePromise =                                                                           // 2356\n              $q.all([getTemplatePromise(modalOptions)].concat(getResolvePromises(modalOptions.resolve)));            // 2357\n                                                                                                                      // 2358\n                                                                                                                      // 2359\n            templateAndResolvePromise.then(function resolveSuccess(tplAndVars) {                                      // 2360\n                                                                                                                      // 2361\n              var modalScope = (modalOptions.scope || $rootScope).$new();                                             // 2362\n              modalScope.$close = modalInstance.close;                                                                // 2363\n              modalScope.$dismiss = modalInstance.dismiss;                                                            // 2364\n                                                                                                                      // 2365\n              var ctrlInstance, ctrlLocals = {};                                                                      // 2366\n              var resolveIter = 1;                                                                                    // 2367\n                                                                                                                      // 2368\n              //controllers                                                                                           // 2369\n              if (modalOptions.controller) {                                                                          // 2370\n                ctrlLocals.$scope = modalScope;                                                                       // 2371\n                ctrlLocals.$modalInstance = modalInstance;                                                            // 2372\n                angular.forEach(modalOptions.resolve, function (value, key) {                                         // 2373\n                  ctrlLocals[key] = tplAndVars[resolveIter++];                                                        // 2374\n                });                                                                                                   // 2375\n                                                                                                                      // 2376\n                ctrlInstance = $controller(modalOptions.controller, ctrlLocals);                                      // 2377\n                if (modalOptions.controllerAs) {                                                                      // 2378\n                  modalScope[modalOptions.controllerAs] = ctrlInstance;                                               // 2379\n                }                                                                                                     // 2380\n              }                                                                                                       // 2381\n                                                                                                                      // 2382\n              $modalStack.open(modalInstance, {                                                                       // 2383\n                scope: modalScope,                                                                                    // 2384\n                deferred: modalResultDeferred,                                                                        // 2385\n                renderDeferred: modalRenderDeferred,                                                                  // 2386\n                content: tplAndVars[0],                                                                               // 2387\n                animation: modalOptions.animation,                                                                    // 2388\n                backdrop: modalOptions.backdrop,                                                                      // 2389\n                keyboard: modalOptions.keyboard,                                                                      // 2390\n                backdropClass: modalOptions.backdropClass,                                                            // 2391\n                windowClass: modalOptions.windowClass,                                                                // 2392\n                windowTemplateUrl: modalOptions.windowTemplateUrl,                                                    // 2393\n                size: modalOptions.size                                                                               // 2394\n              });                                                                                                     // 2395\n                                                                                                                      // 2396\n            }, function resolveError(reason) {                                                                        // 2397\n              modalResultDeferred.reject(reason);                                                                     // 2398\n            });                                                                                                       // 2399\n                                                                                                                      // 2400\n            templateAndResolvePromise.then(function () {                                                              // 2401\n              modalOpenedDeferred.resolve(true);                                                                      // 2402\n            }, function (reason) {                                                                                    // 2403\n              modalOpenedDeferred.reject(reason);                                                                     // 2404\n            });                                                                                                       // 2405\n                                                                                                                      // 2406\n            return modalInstance;                                                                                     // 2407\n          };                                                                                                          // 2408\n                                                                                                                      // 2409\n          return $modal;                                                                                              // 2410\n        }]                                                                                                            // 2411\n    };                                                                                                                // 2412\n                                                                                                                      // 2413\n    return $modalProvider;                                                                                            // 2414\n  });                                                                                                                 // 2415\n                                                                                                                      // 2416\nangular.module('ui.bootstrap.pagination', [])                                                                         // 2417\n                                                                                                                      // 2418\n.controller('PaginationController', ['$scope', '$attrs', '$parse', function ($scope, $attrs, $parse) {                // 2419\n  var self = this,                                                                                                    // 2420\n      ngModelCtrl = { $setViewValue: angular.noop }, // nullModelCtrl                                                 // 2421\n      setNumPages = $attrs.numPages ? $parse($attrs.numPages).assign : angular.noop;                                  // 2422\n                                                                                                                      // 2423\n  this.init = function(ngModelCtrl_, config) {                                                                        // 2424\n    ngModelCtrl = ngModelCtrl_;                                                                                       // 2425\n    this.config = config;                                                                                             // 2426\n                                                                                                                      // 2427\n    ngModelCtrl.$render = function() {                                                                                // 2428\n      self.render();                                                                                                  // 2429\n    };                                                                                                                // 2430\n                                                                                                                      // 2431\n    if ($attrs.itemsPerPage) {                                                                                        // 2432\n      $scope.$parent.$watch($parse($attrs.itemsPerPage), function(value) {                                            // 2433\n        self.itemsPerPage = parseInt(value, 10);                                                                      // 2434\n        $scope.totalPages = self.calculateTotalPages();                                                               // 2435\n      });                                                                                                             // 2436\n    } else {                                                                                                          // 2437\n      this.itemsPerPage = config.itemsPerPage;                                                                        // 2438\n    }                                                                                                                 // 2439\n                                                                                                                      // 2440\n    $scope.$watch('totalItems', function() {                                                                          // 2441\n      $scope.totalPages = self.calculateTotalPages();                                                                 // 2442\n    });                                                                                                               // 2443\n                                                                                                                      // 2444\n    $scope.$watch('totalPages', function(value) {                                                                     // 2445\n      setNumPages($scope.$parent, value); // Readonly variable                                                        // 2446\n                                                                                                                      // 2447\n      if ( $scope.page > value ) {                                                                                    // 2448\n        $scope.selectPage(value);                                                                                     // 2449\n      } else {                                                                                                        // 2450\n        ngModelCtrl.$render();                                                                                        // 2451\n      }                                                                                                               // 2452\n    });                                                                                                               // 2453\n  };                                                                                                                  // 2454\n                                                                                                                      // 2455\n  this.calculateTotalPages = function() {                                                                             // 2456\n    var totalPages = this.itemsPerPage < 1 ? 1 : Math.ceil($scope.totalItems / this.itemsPerPage);                    // 2457\n    return Math.max(totalPages || 0, 1);                                                                              // 2458\n  };                                                                                                                  // 2459\n                                                                                                                      // 2460\n  this.render = function() {                                                                                          // 2461\n    $scope.page = parseInt(ngModelCtrl.$viewValue, 10) || 1;                                                          // 2462\n  };                                                                                                                  // 2463\n                                                                                                                      // 2464\n  $scope.selectPage = function(page, evt) {                                                                           // 2465\n    if ( $scope.page !== page && page > 0 && page <= $scope.totalPages) {                                             // 2466\n      if (evt && evt.target) {                                                                                        // 2467\n        evt.target.blur();                                                                                            // 2468\n      }                                                                                                               // 2469\n      ngModelCtrl.$setViewValue(page);                                                                                // 2470\n      ngModelCtrl.$render();                                                                                          // 2471\n    }                                                                                                                 // 2472\n  };                                                                                                                  // 2473\n                                                                                                                      // 2474\n  $scope.getText = function( key ) {                                                                                  // 2475\n    return $scope[key + 'Text'] || self.config[key + 'Text'];                                                         // 2476\n  };                                                                                                                  // 2477\n  $scope.noPrevious = function() {                                                                                    // 2478\n    return $scope.page === 1;                                                                                         // 2479\n  };                                                                                                                  // 2480\n  $scope.noNext = function() {                                                                                        // 2481\n    return $scope.page === $scope.totalPages;                                                                         // 2482\n  };                                                                                                                  // 2483\n}])                                                                                                                   // 2484\n                                                                                                                      // 2485\n.constant('paginationConfig', {                                                                                       // 2486\n  itemsPerPage: 10,                                                                                                   // 2487\n  boundaryLinks: false,                                                                                               // 2488\n  directionLinks: true,                                                                                               // 2489\n  firstText: 'First',                                                                                                 // 2490\n  previousText: 'Previous',                                                                                           // 2491\n  nextText: 'Next',                                                                                                   // 2492\n  lastText: 'Last',                                                                                                   // 2493\n  rotate: true                                                                                                        // 2494\n})                                                                                                                    // 2495\n                                                                                                                      // 2496\n.directive('pagination', ['$parse', 'paginationConfig', function($parse, paginationConfig) {                          // 2497\n  return {                                                                                                            // 2498\n    restrict: 'EA',                                                                                                   // 2499\n    scope: {                                                                                                          // 2500\n      totalItems: '=',                                                                                                // 2501\n      firstText: '@',                                                                                                 // 2502\n      previousText: '@',                                                                                              // 2503\n      nextText: '@',                                                                                                  // 2504\n      lastText: '@'                                                                                                   // 2505\n    },                                                                                                                // 2506\n    require: ['pagination', '?ngModel'],                                                                              // 2507\n    controller: 'PaginationController',                                                                               // 2508\n    templateUrl: 'template/pagination/pagination.html',                                                               // 2509\n    replace: true,                                                                                                    // 2510\n    link: function(scope, element, attrs, ctrls) {                                                                    // 2511\n      var paginationCtrl = ctrls[0], ngModelCtrl = ctrls[1];                                                          // 2512\n                                                                                                                      // 2513\n      if (!ngModelCtrl) {                                                                                             // 2514\n         return; // do nothing if no ng-model                                                                         // 2515\n      }                                                                                                               // 2516\n                                                                                                                      // 2517\n      // Setup configuration parameters                                                                               // 2518\n      var maxSize = angular.isDefined(attrs.maxSize) ? scope.$parent.$eval(attrs.maxSize) : paginationConfig.maxSize, // 2519\n          rotate = angular.isDefined(attrs.rotate) ? scope.$parent.$eval(attrs.rotate) : paginationConfig.rotate;     // 2520\n      scope.boundaryLinks = angular.isDefined(attrs.boundaryLinks) ? scope.$parent.$eval(attrs.boundaryLinks) : paginationConfig.boundaryLinks;\n      scope.directionLinks = angular.isDefined(attrs.directionLinks) ? scope.$parent.$eval(attrs.directionLinks) : paginationConfig.directionLinks;\n                                                                                                                      // 2523\n      paginationCtrl.init(ngModelCtrl, paginationConfig);                                                             // 2524\n                                                                                                                      // 2525\n      if (attrs.maxSize) {                                                                                            // 2526\n        scope.$parent.$watch($parse(attrs.maxSize), function(value) {                                                 // 2527\n          maxSize = parseInt(value, 10);                                                                              // 2528\n          paginationCtrl.render();                                                                                    // 2529\n        });                                                                                                           // 2530\n      }                                                                                                               // 2531\n                                                                                                                      // 2532\n      // Create page object used in template                                                                          // 2533\n      function makePage(number, text, isActive) {                                                                     // 2534\n        return {                                                                                                      // 2535\n          number: number,                                                                                             // 2536\n          text: text,                                                                                                 // 2537\n          active: isActive                                                                                            // 2538\n        };                                                                                                            // 2539\n      }                                                                                                               // 2540\n                                                                                                                      // 2541\n      function getPages(currentPage, totalPages) {                                                                    // 2542\n        var pages = [];                                                                                               // 2543\n                                                                                                                      // 2544\n        // Default page limits                                                                                        // 2545\n        var startPage = 1, endPage = totalPages;                                                                      // 2546\n        var isMaxSized = ( angular.isDefined(maxSize) && maxSize < totalPages );                                      // 2547\n                                                                                                                      // 2548\n        // recompute if maxSize                                                                                       // 2549\n        if ( isMaxSized ) {                                                                                           // 2550\n          if ( rotate ) {                                                                                             // 2551\n            // Current page is displayed in the middle of the visible ones                                            // 2552\n            startPage = Math.max(currentPage - Math.floor(maxSize/2), 1);                                             // 2553\n            endPage   = startPage + maxSize - 1;                                                                      // 2554\n                                                                                                                      // 2555\n            // Adjust if limit is exceeded                                                                            // 2556\n            if (endPage > totalPages) {                                                                               // 2557\n              endPage   = totalPages;                                                                                 // 2558\n              startPage = endPage - maxSize + 1;                                                                      // 2559\n            }                                                                                                         // 2560\n          } else {                                                                                                    // 2561\n            // Visible pages are paginated with maxSize                                                               // 2562\n            startPage = ((Math.ceil(currentPage / maxSize) - 1) * maxSize) + 1;                                       // 2563\n                                                                                                                      // 2564\n            // Adjust last page if limit is exceeded                                                                  // 2565\n            endPage = Math.min(startPage + maxSize - 1, totalPages);                                                  // 2566\n          }                                                                                                           // 2567\n        }                                                                                                             // 2568\n                                                                                                                      // 2569\n        // Add page number links                                                                                      // 2570\n        for (var number = startPage; number <= endPage; number++) {                                                   // 2571\n          var page = makePage(number, number, number === currentPage);                                                // 2572\n          pages.push(page);                                                                                           // 2573\n        }                                                                                                             // 2574\n                                                                                                                      // 2575\n        // Add links to move between page sets                                                                        // 2576\n        if ( isMaxSized && ! rotate ) {                                                                               // 2577\n          if ( startPage > 1 ) {                                                                                      // 2578\n            var previousPageSet = makePage(startPage - 1, '...', false);                                              // 2579\n            pages.unshift(previousPageSet);                                                                           // 2580\n          }                                                                                                           // 2581\n                                                                                                                      // 2582\n          if ( endPage < totalPages ) {                                                                               // 2583\n            var nextPageSet = makePage(endPage + 1, '...', false);                                                    // 2584\n            pages.push(nextPageSet);                                                                                  // 2585\n          }                                                                                                           // 2586\n        }                                                                                                             // 2587\n                                                                                                                      // 2588\n        return pages;                                                                                                 // 2589\n      }                                                                                                               // 2590\n                                                                                                                      // 2591\n      var originalRender = paginationCtrl.render;                                                                     // 2592\n      paginationCtrl.render = function() {                                                                            // 2593\n        originalRender();                                                                                             // 2594\n        if (scope.page > 0 && scope.page <= scope.totalPages) {                                                       // 2595\n          scope.pages = getPages(scope.page, scope.totalPages);                                                       // 2596\n        }                                                                                                             // 2597\n      };                                                                                                              // 2598\n    }                                                                                                                 // 2599\n  };                                                                                                                  // 2600\n}])                                                                                                                   // 2601\n                                                                                                                      // 2602\n.constant('pagerConfig', {                                                                                            // 2603\n  itemsPerPage: 10,                                                                                                   // 2604\n  previousText: '« Previous',                                                                                         // 2605\n  nextText: 'Next »',                                                                                                 // 2606\n  align: true                                                                                                         // 2607\n})                                                                                                                    // 2608\n                                                                                                                      // 2609\n.directive('pager', ['pagerConfig', function(pagerConfig) {                                                           // 2610\n  return {                                                                                                            // 2611\n    restrict: 'EA',                                                                                                   // 2612\n    scope: {                                                                                                          // 2613\n      totalItems: '=',                                                                                                // 2614\n      previousText: '@',                                                                                              // 2615\n      nextText: '@'                                                                                                   // 2616\n    },                                                                                                                // 2617\n    require: ['pager', '?ngModel'],                                                                                   // 2618\n    controller: 'PaginationController',                                                                               // 2619\n    templateUrl: 'template/pagination/pager.html',                                                                    // 2620\n    replace: true,                                                                                                    // 2621\n    link: function(scope, element, attrs, ctrls) {                                                                    // 2622\n      var paginationCtrl = ctrls[0], ngModelCtrl = ctrls[1];                                                          // 2623\n                                                                                                                      // 2624\n      if (!ngModelCtrl) {                                                                                             // 2625\n         return; // do nothing if no ng-model                                                                         // 2626\n      }                                                                                                               // 2627\n                                                                                                                      // 2628\n      scope.align = angular.isDefined(attrs.align) ? scope.$parent.$eval(attrs.align) : pagerConfig.align;            // 2629\n      paginationCtrl.init(ngModelCtrl, pagerConfig);                                                                  // 2630\n    }                                                                                                                 // 2631\n  };                                                                                                                  // 2632\n}]);                                                                                                                  // 2633\n                                                                                                                      // 2634\n/**                                                                                                                   // 2635\n * The following features are still outstanding: animation as a                                                       // 2636\n * function, placement as a function, inside, support for more triggers than                                          // 2637\n * just mouse enter/leave, html tooltips, and selector delegation.                                                    // 2638\n */                                                                                                                   // 2639\nangular.module( 'ui.bootstrap.tooltip', [ 'ui.bootstrap.position', 'ui.bootstrap.bindHtml' ] )                        // 2640\n                                                                                                                      // 2641\n/**                                                                                                                   // 2642\n * The $tooltip service creates tooltip- and popover-like directives as well as                                       // 2643\n * houses global options for them.                                                                                    // 2644\n */                                                                                                                   // 2645\n.provider( '$tooltip', function () {                                                                                  // 2646\n  // The default options tooltip and popover.                                                                         // 2647\n  var defaultOptions = {                                                                                              // 2648\n    placement: 'top',                                                                                                 // 2649\n    animation: true,                                                                                                  // 2650\n    popupDelay: 0,                                                                                                    // 2651\n    useContentExp: false                                                                                              // 2652\n  };                                                                                                                  // 2653\n                                                                                                                      // 2654\n  // Default hide triggers for each show trigger                                                                      // 2655\n  var triggerMap = {                                                                                                  // 2656\n    'mouseenter': 'mouseleave',                                                                                       // 2657\n    'click': 'click',                                                                                                 // 2658\n    'focus': 'blur'                                                                                                   // 2659\n  };                                                                                                                  // 2660\n                                                                                                                      // 2661\n  // The options specified to the provider globally.                                                                  // 2662\n  var globalOptions = {};                                                                                             // 2663\n                                                                                                                      // 2664\n  /**                                                                                                                 // 2665\n   * `options({})` allows global configuration of all tooltips in the                                                 // 2666\n   * application.                                                                                                     // 2667\n   *                                                                                                                  // 2668\n   *   var app = angular.module( 'App', ['ui.bootstrap.tooltip'], function( $tooltipProvider ) {                      // 2669\n   *     // place tooltips left instead of top by default                                                             // 2670\n   *     $tooltipProvider.options( { placement: 'left' } );                                                           // 2671\n   *   });                                                                                                            // 2672\n   */                                                                                                                 // 2673\n\tthis.options = function( value ) {                                                                                   // 2674\n\t\tangular.extend( globalOptions, value );                                                                             // 2675\n\t};                                                                                                                   // 2676\n                                                                                                                      // 2677\n  /**                                                                                                                 // 2678\n   * This allows you to extend the set of trigger mappings available. E.g.:                                           // 2679\n   *                                                                                                                  // 2680\n   *   $tooltipProvider.setTriggers( 'openTrigger': 'closeTrigger' );                                                 // 2681\n   */                                                                                                                 // 2682\n  this.setTriggers = function setTriggers ( triggers ) {                                                              // 2683\n    angular.extend( triggerMap, triggers );                                                                           // 2684\n  };                                                                                                                  // 2685\n                                                                                                                      // 2686\n  /**                                                                                                                 // 2687\n   * This is a helper function for translating camel-case to snake-case.                                              // 2688\n   */                                                                                                                 // 2689\n  function snake_case(name){                                                                                          // 2690\n    var regexp = /[A-Z]/g;                                                                                            // 2691\n    var separator = '-';                                                                                              // 2692\n    return name.replace(regexp, function(letter, pos) {                                                               // 2693\n      return (pos ? separator : '') + letter.toLowerCase();                                                           // 2694\n    });                                                                                                               // 2695\n  }                                                                                                                   // 2696\n                                                                                                                      // 2697\n  /**                                                                                                                 // 2698\n   * Returns the actual instance of the $tooltip service.                                                             // 2699\n   * TODO support multiple triggers                                                                                   // 2700\n   */                                                                                                                 // 2701\n  this.$get = [ '$window', '$compile', '$timeout', '$document', '$position', '$interpolate', function ( $window, $compile, $timeout, $document, $position, $interpolate ) {\n    return function $tooltip ( type, prefix, defaultTriggerShow, options ) {                                          // 2703\n      options = angular.extend( {}, defaultOptions, globalOptions, options );                                         // 2704\n                                                                                                                      // 2705\n      /**                                                                                                             // 2706\n       * Returns an object of show and hide triggers.                                                                 // 2707\n       *                                                                                                              // 2708\n       * If a trigger is supplied,                                                                                    // 2709\n       * it is used to show the tooltip; otherwise, it will use the `trigger`                                         // 2710\n       * option passed to the `$tooltipProvider.options` method; else it will                                         // 2711\n       * default to the trigger supplied to this directive factory.                                                   // 2712\n       *                                                                                                              // 2713\n       * The hide trigger is based on the show trigger. If the `trigger` option                                       // 2714\n       * was passed to the `$tooltipProvider.options` method, it will use the                                         // 2715\n       * mapped trigger from `triggerMap` or the passed trigger if the map is                                         // 2716\n       * undefined; otherwise, it uses the `triggerMap` value of the show                                             // 2717\n       * trigger; else it will just use the show trigger.                                                             // 2718\n       */                                                                                                             // 2719\n      function getTriggers ( trigger ) {                                                                              // 2720\n        var show = trigger || options.trigger || defaultTriggerShow;                                                  // 2721\n        var hide = triggerMap[show] || show;                                                                          // 2722\n        return {                                                                                                      // 2723\n          show: show,                                                                                                 // 2724\n          hide: hide                                                                                                  // 2725\n        };                                                                                                            // 2726\n      }                                                                                                               // 2727\n                                                                                                                      // 2728\n      var directiveName = snake_case( type );                                                                         // 2729\n                                                                                                                      // 2730\n      var startSym = $interpolate.startSymbol();                                                                      // 2731\n      var endSym = $interpolate.endSymbol();                                                                          // 2732\n      var template =                                                                                                  // 2733\n        '<div '+ directiveName +'-popup '+                                                                            // 2734\n          'title=\"'+startSym+'title'+endSym+'\" '+                                                                     // 2735\n          (options.useContentExp ?                                                                                    // 2736\n            'content-exp=\"contentExp()\" ' :                                                                           // 2737\n            'content=\"'+startSym+'content'+endSym+'\" ') +                                                             // 2738\n          'placement=\"'+startSym+'placement'+endSym+'\" '+                                                             // 2739\n          'popup-class=\"'+startSym+'popupClass'+endSym+'\" '+                                                          // 2740\n          'animation=\"animation\" '+                                                                                   // 2741\n          'is-open=\"isOpen\"'+                                                                                         // 2742\n          'origin-scope=\"origScope\" '+                                                                                // 2743\n          '>'+                                                                                                        // 2744\n        '</div>';                                                                                                     // 2745\n                                                                                                                      // 2746\n      return {                                                                                                        // 2747\n        restrict: 'EA',                                                                                               // 2748\n        compile: function (tElem, tAttrs) {                                                                           // 2749\n          var tooltipLinker = $compile( template );                                                                   // 2750\n                                                                                                                      // 2751\n          return function link ( scope, element, attrs, tooltipCtrl ) {                                               // 2752\n            var tooltip;                                                                                              // 2753\n            var tooltipLinkedScope;                                                                                   // 2754\n            var transitionTimeout;                                                                                    // 2755\n            var popupTimeout;                                                                                         // 2756\n            var appendToBody = angular.isDefined( options.appendToBody ) ? options.appendToBody : false;              // 2757\n            var triggers = getTriggers( undefined );                                                                  // 2758\n            var hasEnableExp = angular.isDefined(attrs[prefix+'Enable']);                                             // 2759\n            var ttScope = scope.$new(true);                                                                           // 2760\n                                                                                                                      // 2761\n            var positionTooltip = function () {                                                                       // 2762\n              if (!tooltip) { return; }                                                                               // 2763\n                                                                                                                      // 2764\n              var ttPosition = $position.positionElements(element, tooltip, ttScope.placement, appendToBody);         // 2765\n              ttPosition.top += 'px';                                                                                 // 2766\n              ttPosition.left += 'px';                                                                                // 2767\n                                                                                                                      // 2768\n              // Now set the calculated positioning.                                                                  // 2769\n              tooltip.css( ttPosition );                                                                              // 2770\n            };                                                                                                        // 2771\n                                                                                                                      // 2772\n            // Set up the correct scope to allow transclusion later                                                   // 2773\n            ttScope.origScope = scope;                                                                                // 2774\n                                                                                                                      // 2775\n            // By default, the tooltip is not open.                                                                   // 2776\n            // TODO add ability to start tooltip opened                                                               // 2777\n            ttScope.isOpen = false;                                                                                   // 2778\n                                                                                                                      // 2779\n            function toggleTooltipBind () {                                                                           // 2780\n              if ( ! ttScope.isOpen ) {                                                                               // 2781\n                showTooltipBind();                                                                                    // 2782\n              } else {                                                                                                // 2783\n                hideTooltipBind();                                                                                    // 2784\n              }                                                                                                       // 2785\n            }                                                                                                         // 2786\n                                                                                                                      // 2787\n            // Show the tooltip with delay if specified, otherwise show it immediately                                // 2788\n            function showTooltipBind() {                                                                              // 2789\n              if(hasEnableExp && !scope.$eval(attrs[prefix+'Enable'])) {                                              // 2790\n                return;                                                                                               // 2791\n              }                                                                                                       // 2792\n                                                                                                                      // 2793\n              prepareTooltip();                                                                                       // 2794\n                                                                                                                      // 2795\n              if ( ttScope.popupDelay ) {                                                                             // 2796\n                // Do nothing if the tooltip was already scheduled to pop-up.                                         // 2797\n                // This happens if show is triggered multiple times before any hide is triggered.                     // 2798\n                if (!popupTimeout) {                                                                                  // 2799\n                  popupTimeout = $timeout( show, ttScope.popupDelay, false );                                         // 2800\n                  popupTimeout.then(function(reposition){reposition();});                                             // 2801\n                }                                                                                                     // 2802\n              } else {                                                                                                // 2803\n                show()();                                                                                             // 2804\n              }                                                                                                       // 2805\n            }                                                                                                         // 2806\n                                                                                                                      // 2807\n            function hideTooltipBind () {                                                                             // 2808\n              scope.$apply(function () {                                                                              // 2809\n                hide();                                                                                               // 2810\n              });                                                                                                     // 2811\n            }                                                                                                         // 2812\n                                                                                                                      // 2813\n            // Show the tooltip popup element.                                                                        // 2814\n            function show() {                                                                                         // 2815\n                                                                                                                      // 2816\n              popupTimeout = null;                                                                                    // 2817\n                                                                                                                      // 2818\n              // If there is a pending remove transition, we must cancel it, lest the                                 // 2819\n              // tooltip be mysteriously removed.                                                                     // 2820\n              if ( transitionTimeout ) {                                                                              // 2821\n                $timeout.cancel( transitionTimeout );                                                                 // 2822\n                transitionTimeout = null;                                                                             // 2823\n              }                                                                                                       // 2824\n                                                                                                                      // 2825\n              // Don't show empty tooltips.                                                                           // 2826\n              if ( !(options.useContentExp ? ttScope.contentExp() : ttScope.content) ) {                              // 2827\n                return angular.noop;                                                                                  // 2828\n              }                                                                                                       // 2829\n                                                                                                                      // 2830\n              createTooltip();                                                                                        // 2831\n                                                                                                                      // 2832\n              // Set the initial positioning.                                                                         // 2833\n              tooltip.css({ top: 0, left: 0, display: 'block' });                                                     // 2834\n              ttScope.$digest();                                                                                      // 2835\n                                                                                                                      // 2836\n              positionTooltip();                                                                                      // 2837\n                                                                                                                      // 2838\n              // And show the tooltip.                                                                                // 2839\n              ttScope.isOpen = true;                                                                                  // 2840\n              ttScope.$apply(); // digest required as $apply is not called                                            // 2841\n                                                                                                                      // 2842\n              // Return positioning function as promise callback for correct                                          // 2843\n              // positioning after draw.                                                                              // 2844\n              return positionTooltip;                                                                                 // 2845\n            }                                                                                                         // 2846\n                                                                                                                      // 2847\n            // Hide the tooltip popup element.                                                                        // 2848\n            function hide() {                                                                                         // 2849\n              // First things first: we don't show it anymore.                                                        // 2850\n              ttScope.isOpen = false;                                                                                 // 2851\n                                                                                                                      // 2852\n              //if tooltip is going to be shown after delay, we must cancel this                                      // 2853\n              $timeout.cancel( popupTimeout );                                                                        // 2854\n              popupTimeout = null;                                                                                    // 2855\n                                                                                                                      // 2856\n              // And now we remove it from the DOM. However, if we have animation, we                                 // 2857\n              // need to wait for it to expire beforehand.                                                            // 2858\n              // FIXME: this is a placeholder for a port of the transitions library.                                  // 2859\n              if ( ttScope.animation ) {                                                                              // 2860\n                if (!transitionTimeout) {                                                                             // 2861\n                  transitionTimeout = $timeout(removeTooltip, 500);                                                   // 2862\n                }                                                                                                     // 2863\n              } else {                                                                                                // 2864\n                removeTooltip();                                                                                      // 2865\n              }                                                                                                       // 2866\n            }                                                                                                         // 2867\n                                                                                                                      // 2868\n            function createTooltip() {                                                                                // 2869\n              // There can only be one tooltip element per directive shown at once.                                   // 2870\n              if (tooltip) {                                                                                          // 2871\n                removeTooltip();                                                                                      // 2872\n              }                                                                                                       // 2873\n              tooltipLinkedScope = ttScope.$new();                                                                    // 2874\n              tooltip = tooltipLinker(tooltipLinkedScope, function (tooltip) {                                        // 2875\n                if ( appendToBody ) {                                                                                 // 2876\n                  $document.find( 'body' ).append( tooltip );                                                         // 2877\n                } else {                                                                                              // 2878\n                  element.after( tooltip );                                                                           // 2879\n                }                                                                                                     // 2880\n              });                                                                                                     // 2881\n                                                                                                                      // 2882\n              tooltipLinkedScope.$watch(function () {                                                                 // 2883\n                $timeout(positionTooltip, 0, false);                                                                  // 2884\n              });                                                                                                     // 2885\n                                                                                                                      // 2886\n              if (options.useContentExp) {                                                                            // 2887\n                tooltipLinkedScope.$watch('contentExp()', function (val) {                                            // 2888\n                  if (!val && ttScope.isOpen ) {                                                                      // 2889\n                    hide();                                                                                           // 2890\n                  }                                                                                                   // 2891\n                });                                                                                                   // 2892\n              }                                                                                                       // 2893\n            }                                                                                                         // 2894\n                                                                                                                      // 2895\n            function removeTooltip() {                                                                                // 2896\n              transitionTimeout = null;                                                                               // 2897\n              if (tooltip) {                                                                                          // 2898\n                tooltip.remove();                                                                                     // 2899\n                tooltip = null;                                                                                       // 2900\n              }                                                                                                       // 2901\n              if (tooltipLinkedScope) {                                                                               // 2902\n                tooltipLinkedScope.$destroy();                                                                        // 2903\n                tooltipLinkedScope = null;                                                                            // 2904\n              }                                                                                                       // 2905\n            }                                                                                                         // 2906\n                                                                                                                      // 2907\n            function prepareTooltip() {                                                                               // 2908\n              prepPopupClass();                                                                                       // 2909\n              prepPlacement();                                                                                        // 2910\n              prepPopupDelay();                                                                                       // 2911\n            }                                                                                                         // 2912\n                                                                                                                      // 2913\n            ttScope.contentExp = function () {                                                                        // 2914\n              return scope.$eval(attrs[type]);                                                                        // 2915\n            };                                                                                                        // 2916\n                                                                                                                      // 2917\n            /**                                                                                                       // 2918\n             * Observe the relevant attributes.                                                                       // 2919\n             */                                                                                                       // 2920\n            if (!options.useContentExp) {                                                                             // 2921\n              attrs.$observe( type, function ( val ) {                                                                // 2922\n                ttScope.content = val;                                                                                // 2923\n                                                                                                                      // 2924\n                if (!val && ttScope.isOpen ) {                                                                        // 2925\n                  hide();                                                                                             // 2926\n                }                                                                                                     // 2927\n              });                                                                                                     // 2928\n            }                                                                                                         // 2929\n                                                                                                                      // 2930\n            attrs.$observe( 'disabled', function ( val ) {                                                            // 2931\n              if (val && ttScope.isOpen ) {                                                                           // 2932\n                hide();                                                                                               // 2933\n              }                                                                                                       // 2934\n            });                                                                                                       // 2935\n                                                                                                                      // 2936\n            attrs.$observe( prefix+'Title', function ( val ) {                                                        // 2937\n              ttScope.title = val;                                                                                    // 2938\n            });                                                                                                       // 2939\n                                                                                                                      // 2940\n            function prepPopupClass() {                                                                               // 2941\n              ttScope.popupClass = attrs[prefix + 'Class'];                                                           // 2942\n            }                                                                                                         // 2943\n                                                                                                                      // 2944\n            function prepPlacement() {                                                                                // 2945\n              var val = attrs[ prefix + 'Placement' ];                                                                // 2946\n              ttScope.placement = angular.isDefined( val ) ? val : options.placement;                                 // 2947\n            }                                                                                                         // 2948\n                                                                                                                      // 2949\n            function prepPopupDelay() {                                                                               // 2950\n              var val = attrs[ prefix + 'PopupDelay' ];                                                               // 2951\n              var delay = parseInt( val, 10 );                                                                        // 2952\n              ttScope.popupDelay = ! isNaN(delay) ? delay : options.popupDelay;                                       // 2953\n            }                                                                                                         // 2954\n                                                                                                                      // 2955\n            var unregisterTriggers = function () {                                                                    // 2956\n              element.unbind(triggers.show, showTooltipBind);                                                         // 2957\n              element.unbind(triggers.hide, hideTooltipBind);                                                         // 2958\n            };                                                                                                        // 2959\n                                                                                                                      // 2960\n            function prepTriggers() {                                                                                 // 2961\n              var val = attrs[ prefix + 'Trigger' ];                                                                  // 2962\n              unregisterTriggers();                                                                                   // 2963\n                                                                                                                      // 2964\n              triggers = getTriggers( val );                                                                          // 2965\n                                                                                                                      // 2966\n              if ( triggers.show === triggers.hide ) {                                                                // 2967\n                element.bind( triggers.show, toggleTooltipBind );                                                     // 2968\n              } else {                                                                                                // 2969\n                element.bind( triggers.show, showTooltipBind );                                                       // 2970\n                element.bind( triggers.hide, hideTooltipBind );                                                       // 2971\n              }                                                                                                       // 2972\n            }                                                                                                         // 2973\n            prepTriggers();                                                                                           // 2974\n                                                                                                                      // 2975\n            var animation = scope.$eval(attrs[prefix + 'Animation']);                                                 // 2976\n            ttScope.animation = angular.isDefined(animation) ? !!animation : options.animation;                       // 2977\n                                                                                                                      // 2978\n            var appendToBodyVal = scope.$eval(attrs[prefix + 'AppendToBody']);                                        // 2979\n            appendToBody = angular.isDefined(appendToBodyVal) ? appendToBodyVal : appendToBody;                       // 2980\n                                                                                                                      // 2981\n            // if a tooltip is attached to <body> we need to remove it on                                             // 2982\n            // location change as its parent scope will probably not be destroyed                                     // 2983\n            // by the change.                                                                                         // 2984\n            if ( appendToBody ) {                                                                                     // 2985\n              scope.$on('$locationChangeSuccess', function closeTooltipOnLocationChangeSuccess () {                   // 2986\n              if ( ttScope.isOpen ) {                                                                                 // 2987\n                hide();                                                                                               // 2988\n              }                                                                                                       // 2989\n            });                                                                                                       // 2990\n            }                                                                                                         // 2991\n                                                                                                                      // 2992\n            // Make sure tooltip is destroyed and removed.                                                            // 2993\n            scope.$on('$destroy', function onDestroyTooltip() {                                                       // 2994\n              $timeout.cancel( transitionTimeout );                                                                   // 2995\n              $timeout.cancel( popupTimeout );                                                                        // 2996\n              unregisterTriggers();                                                                                   // 2997\n              removeTooltip();                                                                                        // 2998\n              ttScope = null;                                                                                         // 2999\n            });                                                                                                       // 3000\n          };                                                                                                          // 3001\n        }                                                                                                             // 3002\n      };                                                                                                              // 3003\n    };                                                                                                                // 3004\n  }];                                                                                                                 // 3005\n})                                                                                                                    // 3006\n                                                                                                                      // 3007\n// This is mostly ngInclude code but with a custom scope                                                              // 3008\n.directive( 'tooltipTemplateTransclude', [                                                                            // 3009\n         '$animate', '$sce', '$compile', '$templateRequest',                                                          // 3010\nfunction ($animate ,  $sce ,  $compile ,  $templateRequest) {                                                         // 3011\n  return {                                                                                                            // 3012\n    link: function ( scope, elem, attrs ) {                                                                           // 3013\n      var origScope = scope.$eval(attrs.tooltipTemplateTranscludeScope);                                              // 3014\n                                                                                                                      // 3015\n      var changeCounter = 0,                                                                                          // 3016\n        currentScope,                                                                                                 // 3017\n        previousElement,                                                                                              // 3018\n        currentElement;                                                                                               // 3019\n                                                                                                                      // 3020\n      var cleanupLastIncludeContent = function() {                                                                    // 3021\n        if (previousElement) {                                                                                        // 3022\n          previousElement.remove();                                                                                   // 3023\n          previousElement = null;                                                                                     // 3024\n        }                                                                                                             // 3025\n        if (currentScope) {                                                                                           // 3026\n          currentScope.$destroy();                                                                                    // 3027\n          currentScope = null;                                                                                        // 3028\n        }                                                                                                             // 3029\n        if (currentElement) {                                                                                         // 3030\n          $animate.leave(currentElement).then(function() {                                                            // 3031\n            previousElement = null;                                                                                   // 3032\n          });                                                                                                         // 3033\n          previousElement = currentElement;                                                                           // 3034\n          currentElement = null;                                                                                      // 3035\n        }                                                                                                             // 3036\n      };                                                                                                              // 3037\n                                                                                                                      // 3038\n      scope.$watch($sce.parseAsResourceUrl(attrs.tooltipTemplateTransclude), function (src) {                         // 3039\n        var thisChangeId = ++changeCounter;                                                                           // 3040\n                                                                                                                      // 3041\n        if (src) {                                                                                                    // 3042\n          //set the 2nd param to true to ignore the template request error so that the inner                          // 3043\n          //contents and scope can be cleaned up.                                                                     // 3044\n          $templateRequest(src, true).then(function(response) {                                                       // 3045\n            if (thisChangeId !== changeCounter) { return; }                                                           // 3046\n            var newScope = origScope.$new();                                                                          // 3047\n            var template = response;                                                                                  // 3048\n                                                                                                                      // 3049\n            var clone = $compile(template)(newScope, function(clone) {                                                // 3050\n              cleanupLastIncludeContent();                                                                            // 3051\n              $animate.enter(clone, elem);                                                                            // 3052\n            });                                                                                                       // 3053\n                                                                                                                      // 3054\n            currentScope = newScope;                                                                                  // 3055\n            currentElement = clone;                                                                                   // 3056\n                                                                                                                      // 3057\n            currentScope.$emit('$includeContentLoaded', src);                                                         // 3058\n          }, function() {                                                                                             // 3059\n            if (thisChangeId === changeCounter) {                                                                     // 3060\n              cleanupLastIncludeContent();                                                                            // 3061\n              scope.$emit('$includeContentError', src);                                                               // 3062\n            }                                                                                                         // 3063\n          });                                                                                                         // 3064\n          scope.$emit('$includeContentRequested', src);                                                               // 3065\n        } else {                                                                                                      // 3066\n          cleanupLastIncludeContent();                                                                                // 3067\n        }                                                                                                             // 3068\n      });                                                                                                             // 3069\n                                                                                                                      // 3070\n      scope.$on('$destroy', cleanupLastIncludeContent);                                                               // 3071\n    }                                                                                                                 // 3072\n  };                                                                                                                  // 3073\n}])                                                                                                                   // 3074\n                                                                                                                      // 3075\n/**                                                                                                                   // 3076\n * Note that it's intentional that these classes are *not* applied through $animate.                                  // 3077\n * They must not be animated as they're expected to be present on the tooltip on                                      // 3078\n * initialization.                                                                                                    // 3079\n */                                                                                                                   // 3080\n.directive('tooltipClasses', function () {                                                                            // 3081\n  return {                                                                                                            // 3082\n    restrict: 'A',                                                                                                    // 3083\n    link: function (scope, element, attrs) {                                                                          // 3084\n      if (scope.placement) {                                                                                          // 3085\n        element.addClass(scope.placement);                                                                            // 3086\n      }                                                                                                               // 3087\n      if (scope.popupClass) {                                                                                         // 3088\n        element.addClass(scope.popupClass);                                                                           // 3089\n      }                                                                                                               // 3090\n      if (scope.animation()) {                                                                                        // 3091\n        element.addClass(attrs.tooltipAnimationClass);                                                                // 3092\n      }                                                                                                               // 3093\n    }                                                                                                                 // 3094\n  };                                                                                                                  // 3095\n})                                                                                                                    // 3096\n                                                                                                                      // 3097\n.directive( 'tooltipPopup', function () {                                                                             // 3098\n  return {                                                                                                            // 3099\n    restrict: 'EA',                                                                                                   // 3100\n    replace: true,                                                                                                    // 3101\n    scope: { content: '@', placement: '@', popupClass: '@', animation: '&', isOpen: '&' },                            // 3102\n    templateUrl: 'template/tooltip/tooltip-popup.html'                                                                // 3103\n  };                                                                                                                  // 3104\n})                                                                                                                    // 3105\n                                                                                                                      // 3106\n.directive( 'tooltip', [ '$tooltip', function ( $tooltip ) {                                                          // 3107\n  return $tooltip( 'tooltip', 'tooltip', 'mouseenter' );                                                              // 3108\n}])                                                                                                                   // 3109\n                                                                                                                      // 3110\n.directive( 'tooltipTemplatePopup', function () {                                                                     // 3111\n  return {                                                                                                            // 3112\n    restrict: 'EA',                                                                                                   // 3113\n    replace: true,                                                                                                    // 3114\n    scope: { contentExp: '&', placement: '@', popupClass: '@', animation: '&', isOpen: '&',                           // 3115\n      originScope: '&' },                                                                                             // 3116\n    templateUrl: 'template/tooltip/tooltip-template-popup.html'                                                       // 3117\n  };                                                                                                                  // 3118\n})                                                                                                                    // 3119\n                                                                                                                      // 3120\n.directive( 'tooltipTemplate', [ '$tooltip', function ( $tooltip ) {                                                  // 3121\n  return $tooltip('tooltipTemplate', 'tooltip', 'mouseenter', {                                                       // 3122\n    useContentExp: true                                                                                               // 3123\n  });                                                                                                                 // 3124\n}])                                                                                                                   // 3125\n                                                                                                                      // 3126\n.directive( 'tooltipHtmlPopup', function () {                                                                         // 3127\n  return {                                                                                                            // 3128\n    restrict: 'EA',                                                                                                   // 3129\n    replace: true,                                                                                                    // 3130\n    scope: { contentExp: '&', placement: '@', popupClass: '@', animation: '&', isOpen: '&' },                         // 3131\n    templateUrl: 'template/tooltip/tooltip-html-popup.html'                                                           // 3132\n  };                                                                                                                  // 3133\n})                                                                                                                    // 3134\n                                                                                                                      // 3135\n.directive( 'tooltipHtml', [ '$tooltip', function ( $tooltip ) {                                                      // 3136\n  return $tooltip('tooltipHtml', 'tooltip', 'mouseenter', {                                                           // 3137\n    useContentExp: true                                                                                               // 3138\n  });                                                                                                                 // 3139\n}])                                                                                                                   // 3140\n                                                                                                                      // 3141\n/*                                                                                                                    // 3142\nDeprecated                                                                                                            // 3143\n*/                                                                                                                    // 3144\n.directive( 'tooltipHtmlUnsafePopup', function () {                                                                   // 3145\n  return {                                                                                                            // 3146\n    restrict: 'EA',                                                                                                   // 3147\n    replace: true,                                                                                                    // 3148\n    scope: { content: '@', placement: '@', popupClass: '@', animation: '&', isOpen: '&' },                            // 3149\n    templateUrl: 'template/tooltip/tooltip-html-unsafe-popup.html'                                                    // 3150\n  };                                                                                                                  // 3151\n})                                                                                                                    // 3152\n                                                                                                                      // 3153\n.value('tooltipHtmlUnsafeSuppressDeprecated', false)                                                                  // 3154\n.directive( 'tooltipHtmlUnsafe', [                                                                                    // 3155\n          '$tooltip', 'tooltipHtmlUnsafeSuppressDeprecated', '$log',                                                  // 3156\nfunction ( $tooltip ,  tooltipHtmlUnsafeSuppressDeprecated ,  $log) {                                                 // 3157\n  if (!tooltipHtmlUnsafeSuppressDeprecated) {                                                                         // 3158\n    $log.warn('tooltip-html-unsafe is now deprecated. Use tooltip-html or tooltip-template instead.');                // 3159\n  }                                                                                                                   // 3160\n  return $tooltip( 'tooltipHtmlUnsafe', 'tooltip', 'mouseenter' );                                                    // 3161\n}]);                                                                                                                  // 3162\n                                                                                                                      // 3163\n/**                                                                                                                   // 3164\n * The following features are still outstanding: popup delay, animation as a                                          // 3165\n * function, placement as a function, inside, support for more triggers than                                          // 3166\n * just mouse enter/leave, html popovers, and selector delegatation.                                                  // 3167\n */                                                                                                                   // 3168\nangular.module( 'ui.bootstrap.popover', [ 'ui.bootstrap.tooltip' ] )                                                  // 3169\n                                                                                                                      // 3170\n.directive( 'popoverTemplatePopup', function () {                                                                     // 3171\n  return {                                                                                                            // 3172\n    restrict: 'EA',                                                                                                   // 3173\n    replace: true,                                                                                                    // 3174\n    scope: { title: '@', contentExp: '&', placement: '@', popupClass: '@', animation: '&', isOpen: '&',               // 3175\n      originScope: '&' },                                                                                             // 3176\n    templateUrl: 'template/popover/popover-template.html'                                                             // 3177\n  };                                                                                                                  // 3178\n})                                                                                                                    // 3179\n                                                                                                                      // 3180\n.directive( 'popoverTemplate', [ '$tooltip', function ( $tooltip ) {                                                  // 3181\n  return $tooltip( 'popoverTemplate', 'popover', 'click', {                                                           // 3182\n    useContentExp: true                                                                                               // 3183\n  } );                                                                                                                // 3184\n}])                                                                                                                   // 3185\n                                                                                                                      // 3186\n.directive( 'popoverPopup', function () {                                                                             // 3187\n  return {                                                                                                            // 3188\n    restrict: 'EA',                                                                                                   // 3189\n    replace: true,                                                                                                    // 3190\n    scope: { title: '@', content: '@', placement: '@', popupClass: '@', animation: '&', isOpen: '&' },                // 3191\n    templateUrl: 'template/popover/popover.html'                                                                      // 3192\n  };                                                                                                                  // 3193\n})                                                                                                                    // 3194\n                                                                                                                      // 3195\n.directive( 'popover', [ '$tooltip', function ( $tooltip ) {                                                          // 3196\n  return $tooltip( 'popover', 'popover', 'click' );                                                                   // 3197\n}]);                                                                                                                  // 3198\n                                                                                                                      // 3199\nangular.module('ui.bootstrap.progressbar', [])                                                                        // 3200\n                                                                                                                      // 3201\n.constant('progressConfig', {                                                                                         // 3202\n  animate: true,                                                                                                      // 3203\n  max: 100                                                                                                            // 3204\n})                                                                                                                    // 3205\n                                                                                                                      // 3206\n.controller('ProgressController', ['$scope', '$attrs', 'progressConfig', function($scope, $attrs, progressConfig) {   // 3207\n    var self = this,                                                                                                  // 3208\n        animate = angular.isDefined($attrs.animate) ? $scope.$parent.$eval($attrs.animate) : progressConfig.animate;  // 3209\n                                                                                                                      // 3210\n    this.bars = [];                                                                                                   // 3211\n    $scope.max = angular.isDefined($scope.max) ? $scope.max : progressConfig.max;                                     // 3212\n                                                                                                                      // 3213\n    this.addBar = function(bar, element) {                                                                            // 3214\n        if ( !animate ) {                                                                                             // 3215\n            element.css({'transition': 'none'});                                                                      // 3216\n        }                                                                                                             // 3217\n                                                                                                                      // 3218\n        this.bars.push(bar);                                                                                          // 3219\n                                                                                                                      // 3220\n        bar.$watch('value', function( value ) {                                                                       // 3221\n            bar.percent = +(100 * value / $scope.max).toFixed(2);                                                     // 3222\n        });                                                                                                           // 3223\n                                                                                                                      // 3224\n        bar.$on('$destroy', function() {                                                                              // 3225\n            element = null;                                                                                           // 3226\n            self.removeBar(bar);                                                                                      // 3227\n        });                                                                                                           // 3228\n    };                                                                                                                // 3229\n                                                                                                                      // 3230\n    this.removeBar = function(bar) {                                                                                  // 3231\n        this.bars.splice(this.bars.indexOf(bar), 1);                                                                  // 3232\n    };                                                                                                                // 3233\n}])                                                                                                                   // 3234\n                                                                                                                      // 3235\n.directive('progress', function() {                                                                                   // 3236\n    return {                                                                                                          // 3237\n        restrict: 'EA',                                                                                               // 3238\n        replace: true,                                                                                                // 3239\n        transclude: true,                                                                                             // 3240\n        controller: 'ProgressController',                                                                             // 3241\n        require: 'progress',                                                                                          // 3242\n        scope: {},                                                                                                    // 3243\n        templateUrl: 'template/progressbar/progress.html'                                                             // 3244\n    };                                                                                                                // 3245\n})                                                                                                                    // 3246\n                                                                                                                      // 3247\n.directive('bar', function() {                                                                                        // 3248\n    return {                                                                                                          // 3249\n        restrict: 'EA',                                                                                               // 3250\n        replace: true,                                                                                                // 3251\n        transclude: true,                                                                                             // 3252\n        require: '^progress',                                                                                         // 3253\n        scope: {                                                                                                      // 3254\n            value: '=',                                                                                               // 3255\n            max: '=?',                                                                                                // 3256\n            type: '@'                                                                                                 // 3257\n        },                                                                                                            // 3258\n        templateUrl: 'template/progressbar/bar.html',                                                                 // 3259\n        link: function(scope, element, attrs, progressCtrl) {                                                         // 3260\n            progressCtrl.addBar(scope, element);                                                                      // 3261\n        }                                                                                                             // 3262\n    };                                                                                                                // 3263\n})                                                                                                                    // 3264\n                                                                                                                      // 3265\n.directive('progressbar', function() {                                                                                // 3266\n    return {                                                                                                          // 3267\n        restrict: 'EA',                                                                                               // 3268\n        replace: true,                                                                                                // 3269\n        transclude: true,                                                                                             // 3270\n        controller: 'ProgressController',                                                                             // 3271\n        scope: {                                                                                                      // 3272\n            value: '=',                                                                                               // 3273\n            max: '=?',                                                                                                // 3274\n            type: '@'                                                                                                 // 3275\n        },                                                                                                            // 3276\n        templateUrl: 'template/progressbar/progressbar.html',                                                         // 3277\n        link: function(scope, element, attrs, progressCtrl) {                                                         // 3278\n            progressCtrl.addBar(scope, angular.element(element.children()[0]));                                       // 3279\n        }                                                                                                             // 3280\n    };                                                                                                                // 3281\n});                                                                                                                   // 3282\n                                                                                                                      // 3283\nangular.module('ui.bootstrap.rating', [])                                                                             // 3284\n                                                                                                                      // 3285\n.constant('ratingConfig', {                                                                                           // 3286\n  max: 5,                                                                                                             // 3287\n  stateOn: null,                                                                                                      // 3288\n  stateOff: null                                                                                                      // 3289\n})                                                                                                                    // 3290\n                                                                                                                      // 3291\n.controller('RatingController', ['$scope', '$attrs', 'ratingConfig', function($scope, $attrs, ratingConfig) {         // 3292\n  var ngModelCtrl  = { $setViewValue: angular.noop };                                                                 // 3293\n                                                                                                                      // 3294\n  this.init = function(ngModelCtrl_) {                                                                                // 3295\n    ngModelCtrl = ngModelCtrl_;                                                                                       // 3296\n    ngModelCtrl.$render = this.render;                                                                                // 3297\n                                                                                                                      // 3298\n    ngModelCtrl.$formatters.push(function(value) {                                                                    // 3299\n      if (angular.isNumber(value) && value << 0 !== value) {                                                          // 3300\n        value = Math.round(value);                                                                                    // 3301\n      }                                                                                                               // 3302\n      return value;                                                                                                   // 3303\n    });                                                                                                               // 3304\n                                                                                                                      // 3305\n    this.stateOn = angular.isDefined($attrs.stateOn) ? $scope.$parent.$eval($attrs.stateOn) : ratingConfig.stateOn;   // 3306\n    this.stateOff = angular.isDefined($attrs.stateOff) ? $scope.$parent.$eval($attrs.stateOff) : ratingConfig.stateOff;\n                                                                                                                      // 3308\n    var ratingStates = angular.isDefined($attrs.ratingStates) ? $scope.$parent.$eval($attrs.ratingStates) :           // 3309\n                        new Array( angular.isDefined($attrs.max) ? $scope.$parent.$eval($attrs.max) : ratingConfig.max );\n    $scope.range = this.buildTemplateObjects(ratingStates);                                                           // 3311\n  };                                                                                                                  // 3312\n                                                                                                                      // 3313\n  this.buildTemplateObjects = function(states) {                                                                      // 3314\n    for (var i = 0, n = states.length; i < n; i++) {                                                                  // 3315\n      states[i] = angular.extend({ index: i }, { stateOn: this.stateOn, stateOff: this.stateOff }, states[i]);        // 3316\n    }                                                                                                                 // 3317\n    return states;                                                                                                    // 3318\n  };                                                                                                                  // 3319\n                                                                                                                      // 3320\n  $scope.rate = function(value) {                                                                                     // 3321\n    if ( !$scope.readonly && value >= 0 && value <= $scope.range.length ) {                                           // 3322\n      ngModelCtrl.$setViewValue(value);                                                                               // 3323\n      ngModelCtrl.$render();                                                                                          // 3324\n    }                                                                                                                 // 3325\n  };                                                                                                                  // 3326\n                                                                                                                      // 3327\n  $scope.enter = function(value) {                                                                                    // 3328\n    if ( !$scope.readonly ) {                                                                                         // 3329\n      $scope.value = value;                                                                                           // 3330\n    }                                                                                                                 // 3331\n    $scope.onHover({value: value});                                                                                   // 3332\n  };                                                                                                                  // 3333\n                                                                                                                      // 3334\n  $scope.reset = function() {                                                                                         // 3335\n    $scope.value = ngModelCtrl.$viewValue;                                                                            // 3336\n    $scope.onLeave();                                                                                                 // 3337\n  };                                                                                                                  // 3338\n                                                                                                                      // 3339\n  $scope.onKeydown = function(evt) {                                                                                  // 3340\n    if (/(37|38|39|40)/.test(evt.which)) {                                                                            // 3341\n      evt.preventDefault();                                                                                           // 3342\n      evt.stopPropagation();                                                                                          // 3343\n      $scope.rate( $scope.value + (evt.which === 38 || evt.which === 39 ? 1 : -1) );                                  // 3344\n    }                                                                                                                 // 3345\n  };                                                                                                                  // 3346\n                                                                                                                      // 3347\n  this.render = function() {                                                                                          // 3348\n    $scope.value = ngModelCtrl.$viewValue;                                                                            // 3349\n  };                                                                                                                  // 3350\n}])                                                                                                                   // 3351\n                                                                                                                      // 3352\n.directive('rating', function() {                                                                                     // 3353\n  return {                                                                                                            // 3354\n    restrict: 'EA',                                                                                                   // 3355\n    require: ['rating', 'ngModel'],                                                                                   // 3356\n    scope: {                                                                                                          // 3357\n      readonly: '=?',                                                                                                 // 3358\n      onHover: '&',                                                                                                   // 3359\n      onLeave: '&'                                                                                                    // 3360\n    },                                                                                                                // 3361\n    controller: 'RatingController',                                                                                   // 3362\n    templateUrl: 'template/rating/rating.html',                                                                       // 3363\n    replace: true,                                                                                                    // 3364\n    link: function(scope, element, attrs, ctrls) {                                                                    // 3365\n      var ratingCtrl = ctrls[0], ngModelCtrl = ctrls[1];                                                              // 3366\n      ratingCtrl.init( ngModelCtrl );                                                                                 // 3367\n    }                                                                                                                 // 3368\n  };                                                                                                                  // 3369\n});                                                                                                                   // 3370\n                                                                                                                      // 3371\n/**                                                                                                                   // 3372\n * @ngdoc overview                                                                                                    // 3373\n * @name ui.bootstrap.tabs                                                                                            // 3374\n *                                                                                                                    // 3375\n * @description                                                                                                       // 3376\n * AngularJS version of the tabs directive.                                                                           // 3377\n */                                                                                                                   // 3378\n                                                                                                                      // 3379\nangular.module('ui.bootstrap.tabs', [])                                                                               // 3380\n                                                                                                                      // 3381\n.controller('TabsetController', ['$scope', function TabsetCtrl($scope) {                                              // 3382\n  var ctrl = this,                                                                                                    // 3383\n      tabs = ctrl.tabs = $scope.tabs = [];                                                                            // 3384\n                                                                                                                      // 3385\n  ctrl.select = function(selectedTab) {                                                                               // 3386\n    angular.forEach(tabs, function(tab) {                                                                             // 3387\n      if (tab.active && tab !== selectedTab) {                                                                        // 3388\n        tab.active = false;                                                                                           // 3389\n        tab.onDeselect();                                                                                             // 3390\n      }                                                                                                               // 3391\n    });                                                                                                               // 3392\n    selectedTab.active = true;                                                                                        // 3393\n    selectedTab.onSelect();                                                                                           // 3394\n  };                                                                                                                  // 3395\n                                                                                                                      // 3396\n  ctrl.addTab = function addTab(tab) {                                                                                // 3397\n    tabs.push(tab);                                                                                                   // 3398\n    // we can't run the select function on the first tab                                                              // 3399\n    // since that would select it twice                                                                               // 3400\n    if (tabs.length === 1 && tab.active !== false) {                                                                  // 3401\n      tab.active = true;                                                                                              // 3402\n    } else if (tab.active) {                                                                                          // 3403\n      ctrl.select(tab);                                                                                               // 3404\n    }                                                                                                                 // 3405\n    else {                                                                                                            // 3406\n      tab.active = false;                                                                                             // 3407\n    }                                                                                                                 // 3408\n  };                                                                                                                  // 3409\n                                                                                                                      // 3410\n  ctrl.removeTab = function removeTab(tab) {                                                                          // 3411\n    var index = tabs.indexOf(tab);                                                                                    // 3412\n    //Select a new tab if the tab to be removed is selected and not destroyed                                         // 3413\n    if (tab.active && tabs.length > 1 && !destroyed) {                                                                // 3414\n      //If this is the last tab, select the previous tab. else, the next tab.                                         // 3415\n      var newActiveIndex = index == tabs.length - 1 ? index - 1 : index + 1;                                          // 3416\n      ctrl.select(tabs[newActiveIndex]);                                                                              // 3417\n    }                                                                                                                 // 3418\n    tabs.splice(index, 1);                                                                                            // 3419\n  };                                                                                                                  // 3420\n                                                                                                                      // 3421\n  var destroyed;                                                                                                      // 3422\n  $scope.$on('$destroy', function() {                                                                                 // 3423\n    destroyed = true;                                                                                                 // 3424\n  });                                                                                                                 // 3425\n}])                                                                                                                   // 3426\n                                                                                                                      // 3427\n/**                                                                                                                   // 3428\n * @ngdoc directive                                                                                                   // 3429\n * @name ui.bootstrap.tabs.directive:tabset                                                                           // 3430\n * @restrict EA                                                                                                       // 3431\n *                                                                                                                    // 3432\n * @description                                                                                                       // 3433\n * Tabset is the outer container for the tabs directive                                                               // 3434\n *                                                                                                                    // 3435\n * @param {boolean=} vertical Whether or not to use vertical styling for the tabs.                                    // 3436\n * @param {boolean=} justified Whether or not to use justified styling for the tabs.                                  // 3437\n *                                                                                                                    // 3438\n * @example                                                                                                           // 3439\n<example module=\"ui.bootstrap\">                                                                                       // 3440\n  <file name=\"index.html\">                                                                                            // 3441\n    <tabset>                                                                                                          // 3442\n      <tab heading=\"Tab 1\"><b>First</b> Content!</tab>                                                                // 3443\n      <tab heading=\"Tab 2\"><i>Second</i> Content!</tab>                                                               // 3444\n    </tabset>                                                                                                         // 3445\n    <hr />                                                                                                            // 3446\n    <tabset vertical=\"true\">                                                                                          // 3447\n      <tab heading=\"Vertical Tab 1\"><b>First</b> Vertical Content!</tab>                                              // 3448\n      <tab heading=\"Vertical Tab 2\"><i>Second</i> Vertical Content!</tab>                                             // 3449\n    </tabset>                                                                                                         // 3450\n    <tabset justified=\"true\">                                                                                         // 3451\n      <tab heading=\"Justified Tab 1\"><b>First</b> Justified Content!</tab>                                            // 3452\n      <tab heading=\"Justified Tab 2\"><i>Second</i> Justified Content!</tab>                                           // 3453\n    </tabset>                                                                                                         // 3454\n  </file>                                                                                                             // 3455\n</example>                                                                                                            // 3456\n */                                                                                                                   // 3457\n.directive('tabset', function() {                                                                                     // 3458\n  return {                                                                                                            // 3459\n    restrict: 'EA',                                                                                                   // 3460\n    transclude: true,                                                                                                 // 3461\n    replace: true,                                                                                                    // 3462\n    scope: {                                                                                                          // 3463\n      type: '@'                                                                                                       // 3464\n    },                                                                                                                // 3465\n    controller: 'TabsetController',                                                                                   // 3466\n    templateUrl: 'template/tabs/tabset.html',                                                                         // 3467\n    link: function(scope, element, attrs) {                                                                           // 3468\n      scope.vertical = angular.isDefined(attrs.vertical) ? scope.$parent.$eval(attrs.vertical) : false;               // 3469\n      scope.justified = angular.isDefined(attrs.justified) ? scope.$parent.$eval(attrs.justified) : false;            // 3470\n    }                                                                                                                 // 3471\n  };                                                                                                                  // 3472\n})                                                                                                                    // 3473\n                                                                                                                      // 3474\n/**                                                                                                                   // 3475\n * @ngdoc directive                                                                                                   // 3476\n * @name ui.bootstrap.tabs.directive:tab                                                                              // 3477\n * @restrict EA                                                                                                       // 3478\n *                                                                                                                    // 3479\n * @param {string=} heading The visible heading, or title, of the tab. Set HTML headings with {@link ui.bootstrap.tabs.directive:tabHeading tabHeading}.\n * @param {string=} select An expression to evaluate when the tab is selected.                                        // 3481\n * @param {boolean=} active A binding, telling whether or not this tab is selected.                                   // 3482\n * @param {boolean=} disabled A binding, telling whether or not this tab is disabled.                                 // 3483\n *                                                                                                                    // 3484\n * @description                                                                                                       // 3485\n * Creates a tab with a heading and content. Must be placed within a {@link ui.bootstrap.tabs.directive:tabset tabset}.\n *                                                                                                                    // 3487\n * @example                                                                                                           // 3488\n<example module=\"ui.bootstrap\">                                                                                       // 3489\n  <file name=\"index.html\">                                                                                            // 3490\n    <div ng-controller=\"TabsDemoCtrl\">                                                                                // 3491\n      <button class=\"btn btn-small\" ng-click=\"items[0].active = true\">                                                // 3492\n        Select item 1, using active binding                                                                           // 3493\n      </button>                                                                                                       // 3494\n      <button class=\"btn btn-small\" ng-click=\"items[1].disabled = !items[1].disabled\">                                // 3495\n        Enable/disable item 2, using disabled binding                                                                 // 3496\n      </button>                                                                                                       // 3497\n      <br />                                                                                                          // 3498\n      <tabset>                                                                                                        // 3499\n        <tab heading=\"Tab 1\">First Tab</tab>                                                                          // 3500\n        <tab select=\"alertMe()\">                                                                                      // 3501\n          <tab-heading><i class=\"icon-bell\"></i> Alert me!</tab-heading>                                              // 3502\n          Second Tab, with alert callback and html heading!                                                           // 3503\n        </tab>                                                                                                        // 3504\n        <tab ng-repeat=\"item in items\"                                                                                // 3505\n          heading=\"{{item.title}}\"                                                                                    // 3506\n          disabled=\"item.disabled\"                                                                                    // 3507\n          active=\"item.active\">                                                                                       // 3508\n          {{item.content}}                                                                                            // 3509\n        </tab>                                                                                                        // 3510\n      </tabset>                                                                                                       // 3511\n    </div>                                                                                                            // 3512\n  </file>                                                                                                             // 3513\n  <file name=\"script.js\">                                                                                             // 3514\n    function TabsDemoCtrl($scope) {                                                                                   // 3515\n      $scope.items = [                                                                                                // 3516\n        { title:\"Dynamic Title 1\", content:\"Dynamic Item 0\" },                                                        // 3517\n        { title:\"Dynamic Title 2\", content:\"Dynamic Item 1\", disabled: true }                                         // 3518\n      ];                                                                                                              // 3519\n                                                                                                                      // 3520\n      $scope.alertMe = function() {                                                                                   // 3521\n        setTimeout(function() {                                                                                       // 3522\n          alert(\"You've selected the alert tab!\");                                                                    // 3523\n        });                                                                                                           // 3524\n      };                                                                                                              // 3525\n    };                                                                                                                // 3526\n  </file>                                                                                                             // 3527\n</example>                                                                                                            // 3528\n */                                                                                                                   // 3529\n                                                                                                                      // 3530\n/**                                                                                                                   // 3531\n * @ngdoc directive                                                                                                   // 3532\n * @name ui.bootstrap.tabs.directive:tabHeading                                                                       // 3533\n * @restrict EA                                                                                                       // 3534\n *                                                                                                                    // 3535\n * @description                                                                                                       // 3536\n * Creates an HTML heading for a {@link ui.bootstrap.tabs.directive:tab tab}. Must be placed as a child of a tab element.\n *                                                                                                                    // 3538\n * @example                                                                                                           // 3539\n<example module=\"ui.bootstrap\">                                                                                       // 3540\n  <file name=\"index.html\">                                                                                            // 3541\n    <tabset>                                                                                                          // 3542\n      <tab>                                                                                                           // 3543\n        <tab-heading><b>HTML</b> in my titles?!</tab-heading>                                                         // 3544\n        And some content, too!                                                                                        // 3545\n      </tab>                                                                                                          // 3546\n      <tab>                                                                                                           // 3547\n        <tab-heading><i class=\"icon-heart\"></i> Icon heading?!?</tab-heading>                                         // 3548\n        That's right.                                                                                                 // 3549\n      </tab>                                                                                                          // 3550\n    </tabset>                                                                                                         // 3551\n  </file>                                                                                                             // 3552\n</example>                                                                                                            // 3553\n */                                                                                                                   // 3554\n.directive('tab', ['$parse', '$log', function($parse, $log) {                                                         // 3555\n  return {                                                                                                            // 3556\n    require: '^tabset',                                                                                               // 3557\n    restrict: 'EA',                                                                                                   // 3558\n    replace: true,                                                                                                    // 3559\n    templateUrl: 'template/tabs/tab.html',                                                                            // 3560\n    transclude: true,                                                                                                 // 3561\n    scope: {                                                                                                          // 3562\n      active: '=?',                                                                                                   // 3563\n      heading: '@',                                                                                                   // 3564\n      onSelect: '&select', //This callback is called in contentHeadingTransclude                                      // 3565\n                          //once it inserts the tab's content into the dom                                            // 3566\n      onDeselect: '&deselect'                                                                                         // 3567\n    },                                                                                                                // 3568\n    controller: function() {                                                                                          // 3569\n      //Empty controller so other directives can require being 'under' a tab                                          // 3570\n    },                                                                                                                // 3571\n    compile: function(elm, attrs, transclude) {                                                                       // 3572\n      return function postLink(scope, elm, attrs, tabsetCtrl) {                                                       // 3573\n        scope.$watch('active', function(active) {                                                                     // 3574\n          if (active) {                                                                                               // 3575\n            tabsetCtrl.select(scope);                                                                                 // 3576\n          }                                                                                                           // 3577\n        });                                                                                                           // 3578\n                                                                                                                      // 3579\n        scope.disabled = false;                                                                                       // 3580\n        if ( attrs.disable ) {                                                                                        // 3581\n          scope.$parent.$watch($parse(attrs.disable), function(value) {                                               // 3582\n            scope.disabled = !! value;                                                                                // 3583\n          });                                                                                                         // 3584\n        }                                                                                                             // 3585\n                                                                                                                      // 3586\n        // Deprecation support of \"disabled\" parameter                                                                // 3587\n        // fix(tab): IE9 disabled attr renders grey text on enabled tab #2677                                         // 3588\n        // This code is duplicated from the lines above to make it easy to remove once                                // 3589\n        // the feature has been completely deprecated                                                                 // 3590\n        if ( attrs.disabled ) {                                                                                       // 3591\n          $log.warn('Use of \"disabled\" attribute has been deprecated, please use \"disable\"');                         // 3592\n          scope.$parent.$watch($parse(attrs.disabled), function(value) {                                              // 3593\n            scope.disabled = !! value;                                                                                // 3594\n          });                                                                                                         // 3595\n        }                                                                                                             // 3596\n                                                                                                                      // 3597\n        scope.select = function() {                                                                                   // 3598\n          if ( !scope.disabled ) {                                                                                    // 3599\n            scope.active = true;                                                                                      // 3600\n          }                                                                                                           // 3601\n        };                                                                                                            // 3602\n                                                                                                                      // 3603\n        tabsetCtrl.addTab(scope);                                                                                     // 3604\n        scope.$on('$destroy', function() {                                                                            // 3605\n          tabsetCtrl.removeTab(scope);                                                                                // 3606\n        });                                                                                                           // 3607\n                                                                                                                      // 3608\n        //We need to transclude later, once the content container is ready.                                           // 3609\n        //when this link happens, we're inside a tab heading.                                                         // 3610\n        scope.$transcludeFn = transclude;                                                                             // 3611\n      };                                                                                                              // 3612\n    }                                                                                                                 // 3613\n  };                                                                                                                  // 3614\n}])                                                                                                                   // 3615\n                                                                                                                      // 3616\n.directive('tabHeadingTransclude', [function() {                                                                      // 3617\n  return {                                                                                                            // 3618\n    restrict: 'A',                                                                                                    // 3619\n    require: '^tab',                                                                                                  // 3620\n    link: function(scope, elm, attrs, tabCtrl) {                                                                      // 3621\n      scope.$watch('headingElement', function updateHeadingElement(heading) {                                         // 3622\n        if (heading) {                                                                                                // 3623\n          elm.html('');                                                                                               // 3624\n          elm.append(heading);                                                                                        // 3625\n        }                                                                                                             // 3626\n      });                                                                                                             // 3627\n    }                                                                                                                 // 3628\n  };                                                                                                                  // 3629\n}])                                                                                                                   // 3630\n                                                                                                                      // 3631\n.directive('tabContentTransclude', function() {                                                                       // 3632\n  return {                                                                                                            // 3633\n    restrict: 'A',                                                                                                    // 3634\n    require: '^tabset',                                                                                               // 3635\n    link: function(scope, elm, attrs) {                                                                               // 3636\n      var tab = scope.$eval(attrs.tabContentTransclude);                                                              // 3637\n                                                                                                                      // 3638\n      //Now our tab is ready to be transcluded: both the tab heading area                                             // 3639\n      //and the tab content area are loaded.  Transclude 'em both.                                                    // 3640\n      tab.$transcludeFn(tab.$parent, function(contents) {                                                             // 3641\n        angular.forEach(contents, function(node) {                                                                    // 3642\n          if (isTabHeading(node)) {                                                                                   // 3643\n            //Let tabHeadingTransclude know.                                                                          // 3644\n            tab.headingElement = node;                                                                                // 3645\n          } else {                                                                                                    // 3646\n            elm.append(node);                                                                                         // 3647\n          }                                                                                                           // 3648\n        });                                                                                                           // 3649\n      });                                                                                                             // 3650\n    }                                                                                                                 // 3651\n  };                                                                                                                  // 3652\n  function isTabHeading(node) {                                                                                       // 3653\n    return node.tagName &&  (                                                                                         // 3654\n      node.hasAttribute('tab-heading') ||                                                                             // 3655\n      node.hasAttribute('data-tab-heading') ||                                                                        // 3656\n      node.tagName.toLowerCase() === 'tab-heading' ||                                                                 // 3657\n      node.tagName.toLowerCase() === 'data-tab-heading'                                                               // 3658\n    );                                                                                                                // 3659\n  }                                                                                                                   // 3660\n})                                                                                                                    // 3661\n                                                                                                                      // 3662\n;                                                                                                                     // 3663\n                                                                                                                      // 3664\nangular.module('ui.bootstrap.timepicker', [])                                                                         // 3665\n                                                                                                                      // 3666\n.constant('timepickerConfig', {                                                                                       // 3667\n  hourStep: 1,                                                                                                        // 3668\n  minuteStep: 1,                                                                                                      // 3669\n  showMeridian: true,                                                                                                 // 3670\n  meridians: null,                                                                                                    // 3671\n  readonlyInput: false,                                                                                               // 3672\n  mousewheel: true,                                                                                                   // 3673\n  arrowkeys: true                                                                                                     // 3674\n})                                                                                                                    // 3675\n                                                                                                                      // 3676\n.controller('TimepickerController', ['$scope', '$attrs', '$parse', '$log', '$locale', 'timepickerConfig', function($scope, $attrs, $parse, $log, $locale, timepickerConfig) {\n  var selected = new Date(),                                                                                          // 3678\n      ngModelCtrl = { $setViewValue: angular.noop }, // nullModelCtrl                                                 // 3679\n      meridians = angular.isDefined($attrs.meridians) ? $scope.$parent.$eval($attrs.meridians) : timepickerConfig.meridians || $locale.DATETIME_FORMATS.AMPMS;\n                                                                                                                      // 3681\n  this.init = function( ngModelCtrl_, inputs ) {                                                                      // 3682\n    ngModelCtrl = ngModelCtrl_;                                                                                       // 3683\n    ngModelCtrl.$render = this.render;                                                                                // 3684\n                                                                                                                      // 3685\n    ngModelCtrl.$formatters.unshift(function (modelValue) {                                                           // 3686\n      return modelValue ? new Date( modelValue ) : null;                                                              // 3687\n    });                                                                                                               // 3688\n                                                                                                                      // 3689\n    var hoursInputEl = inputs.eq(0),                                                                                  // 3690\n        minutesInputEl = inputs.eq(1);                                                                                // 3691\n                                                                                                                      // 3692\n    var mousewheel = angular.isDefined($attrs.mousewheel) ? $scope.$parent.$eval($attrs.mousewheel) : timepickerConfig.mousewheel;\n    if ( mousewheel ) {                                                                                               // 3694\n      this.setupMousewheelEvents( hoursInputEl, minutesInputEl );                                                     // 3695\n    }                                                                                                                 // 3696\n                                                                                                                      // 3697\n    var arrowkeys = angular.isDefined($attrs.arrowkeys) ? $scope.$parent.$eval($attrs.arrowkeys) : timepickerConfig.arrowkeys;\n    if (arrowkeys) {                                                                                                  // 3699\n      this.setupArrowkeyEvents( hoursInputEl, minutesInputEl );                                                       // 3700\n    }                                                                                                                 // 3701\n                                                                                                                      // 3702\n    $scope.readonlyInput = angular.isDefined($attrs.readonlyInput) ? $scope.$parent.$eval($attrs.readonlyInput) : timepickerConfig.readonlyInput;\n    this.setupInputEvents( hoursInputEl, minutesInputEl );                                                            // 3704\n  };                                                                                                                  // 3705\n                                                                                                                      // 3706\n  var hourStep = timepickerConfig.hourStep;                                                                           // 3707\n  if ($attrs.hourStep) {                                                                                              // 3708\n    $scope.$parent.$watch($parse($attrs.hourStep), function(value) {                                                  // 3709\n      hourStep = parseInt(value, 10);                                                                                 // 3710\n    });                                                                                                               // 3711\n  }                                                                                                                   // 3712\n                                                                                                                      // 3713\n  var minuteStep = timepickerConfig.minuteStep;                                                                       // 3714\n  if ($attrs.minuteStep) {                                                                                            // 3715\n    $scope.$parent.$watch($parse($attrs.minuteStep), function(value) {                                                // 3716\n      minuteStep = parseInt(value, 10);                                                                               // 3717\n    });                                                                                                               // 3718\n  }                                                                                                                   // 3719\n                                                                                                                      // 3720\n  // 12H / 24H mode                                                                                                   // 3721\n  $scope.showMeridian = timepickerConfig.showMeridian;                                                                // 3722\n  if ($attrs.showMeridian) {                                                                                          // 3723\n    $scope.$parent.$watch($parse($attrs.showMeridian), function(value) {                                              // 3724\n      $scope.showMeridian = !!value;                                                                                  // 3725\n                                                                                                                      // 3726\n      if ( ngModelCtrl.$error.time ) {                                                                                // 3727\n        // Evaluate from template                                                                                     // 3728\n        var hours = getHoursFromTemplate(), minutes = getMinutesFromTemplate();                                       // 3729\n        if (angular.isDefined( hours ) && angular.isDefined( minutes )) {                                             // 3730\n          selected.setHours( hours );                                                                                 // 3731\n          refresh();                                                                                                  // 3732\n        }                                                                                                             // 3733\n      } else {                                                                                                        // 3734\n        updateTemplate();                                                                                             // 3735\n      }                                                                                                               // 3736\n    });                                                                                                               // 3737\n  }                                                                                                                   // 3738\n                                                                                                                      // 3739\n  // Get $scope.hours in 24H mode if valid                                                                            // 3740\n  function getHoursFromTemplate ( ) {                                                                                 // 3741\n    var hours = parseInt( $scope.hours, 10 );                                                                         // 3742\n    var valid = ( $scope.showMeridian ) ? (hours > 0 && hours < 13) : (hours >= 0 && hours < 24);                     // 3743\n    if ( !valid ) {                                                                                                   // 3744\n      return undefined;                                                                                               // 3745\n    }                                                                                                                 // 3746\n                                                                                                                      // 3747\n    if ( $scope.showMeridian ) {                                                                                      // 3748\n      if ( hours === 12 ) {                                                                                           // 3749\n        hours = 0;                                                                                                    // 3750\n      }                                                                                                               // 3751\n      if ( $scope.meridian === meridians[1] ) {                                                                       // 3752\n        hours = hours + 12;                                                                                           // 3753\n      }                                                                                                               // 3754\n    }                                                                                                                 // 3755\n    return hours;                                                                                                     // 3756\n  }                                                                                                                   // 3757\n                                                                                                                      // 3758\n  function getMinutesFromTemplate() {                                                                                 // 3759\n    var minutes = parseInt($scope.minutes, 10);                                                                       // 3760\n    return ( minutes >= 0 && minutes < 60 ) ? minutes : undefined;                                                    // 3761\n  }                                                                                                                   // 3762\n                                                                                                                      // 3763\n  function pad( value ) {                                                                                             // 3764\n    return ( angular.isDefined(value) && value.toString().length < 2 ) ? '0' + value : value.toString();              // 3765\n  }                                                                                                                   // 3766\n                                                                                                                      // 3767\n  // Respond on mousewheel spin                                                                                       // 3768\n  this.setupMousewheelEvents = function( hoursInputEl, minutesInputEl ) {                                             // 3769\n    var isScrollingUp = function(e) {                                                                                 // 3770\n      if (e.originalEvent) {                                                                                          // 3771\n        e = e.originalEvent;                                                                                          // 3772\n      }                                                                                                               // 3773\n      //pick correct delta variable depending on event                                                                // 3774\n      var delta = (e.wheelDelta) ? e.wheelDelta : -e.deltaY;                                                          // 3775\n      return (e.detail || delta > 0);                                                                                 // 3776\n    };                                                                                                                // 3777\n                                                                                                                      // 3778\n    hoursInputEl.bind('mousewheel wheel', function(e) {                                                               // 3779\n      $scope.$apply( (isScrollingUp(e)) ? $scope.incrementHours() : $scope.decrementHours() );                        // 3780\n      e.preventDefault();                                                                                             // 3781\n    });                                                                                                               // 3782\n                                                                                                                      // 3783\n    minutesInputEl.bind('mousewheel wheel', function(e) {                                                             // 3784\n      $scope.$apply( (isScrollingUp(e)) ? $scope.incrementMinutes() : $scope.decrementMinutes() );                    // 3785\n      e.preventDefault();                                                                                             // 3786\n    });                                                                                                               // 3787\n                                                                                                                      // 3788\n  };                                                                                                                  // 3789\n                                                                                                                      // 3790\n  // Respond on up/down arrowkeys                                                                                     // 3791\n  this.setupArrowkeyEvents = function( hoursInputEl, minutesInputEl ) {                                               // 3792\n    hoursInputEl.bind('keydown', function(e) {                                                                        // 3793\n      if ( e.which === 38 ) { // up                                                                                   // 3794\n        e.preventDefault();                                                                                           // 3795\n        $scope.incrementHours();                                                                                      // 3796\n        $scope.$apply();                                                                                              // 3797\n      }                                                                                                               // 3798\n      else if ( e.which === 40 ) { // down                                                                            // 3799\n        e.preventDefault();                                                                                           // 3800\n        $scope.decrementHours();                                                                                      // 3801\n        $scope.$apply();                                                                                              // 3802\n      }                                                                                                               // 3803\n    });                                                                                                               // 3804\n                                                                                                                      // 3805\n    minutesInputEl.bind('keydown', function(e) {                                                                      // 3806\n      if ( e.which === 38 ) { // up                                                                                   // 3807\n        e.preventDefault();                                                                                           // 3808\n        $scope.incrementMinutes();                                                                                    // 3809\n        $scope.$apply();                                                                                              // 3810\n      }                                                                                                               // 3811\n      else if ( e.which === 40 ) { // down                                                                            // 3812\n        e.preventDefault();                                                                                           // 3813\n        $scope.decrementMinutes();                                                                                    // 3814\n        $scope.$apply();                                                                                              // 3815\n      }                                                                                                               // 3816\n    });                                                                                                               // 3817\n  };                                                                                                                  // 3818\n                                                                                                                      // 3819\n  this.setupInputEvents = function( hoursInputEl, minutesInputEl ) {                                                  // 3820\n    if ( $scope.readonlyInput ) {                                                                                     // 3821\n      $scope.updateHours = angular.noop;                                                                              // 3822\n      $scope.updateMinutes = angular.noop;                                                                            // 3823\n      return;                                                                                                         // 3824\n    }                                                                                                                 // 3825\n                                                                                                                      // 3826\n    var invalidate = function(invalidHours, invalidMinutes) {                                                         // 3827\n      ngModelCtrl.$setViewValue( null );                                                                              // 3828\n      ngModelCtrl.$setValidity('time', false);                                                                        // 3829\n      if (angular.isDefined(invalidHours)) {                                                                          // 3830\n        $scope.invalidHours = invalidHours;                                                                           // 3831\n      }                                                                                                               // 3832\n      if (angular.isDefined(invalidMinutes)) {                                                                        // 3833\n        $scope.invalidMinutes = invalidMinutes;                                                                       // 3834\n      }                                                                                                               // 3835\n    };                                                                                                                // 3836\n                                                                                                                      // 3837\n    $scope.updateHours = function() {                                                                                 // 3838\n      var hours = getHoursFromTemplate();                                                                             // 3839\n                                                                                                                      // 3840\n      if ( angular.isDefined(hours) ) {                                                                               // 3841\n        selected.setHours( hours );                                                                                   // 3842\n        refresh( 'h' );                                                                                               // 3843\n      } else {                                                                                                        // 3844\n        invalidate(true);                                                                                             // 3845\n      }                                                                                                               // 3846\n    };                                                                                                                // 3847\n                                                                                                                      // 3848\n    hoursInputEl.bind('blur', function(e) {                                                                           // 3849\n      if ( !$scope.invalidHours && $scope.hours < 10) {                                                               // 3850\n        $scope.$apply( function() {                                                                                   // 3851\n          $scope.hours = pad( $scope.hours );                                                                         // 3852\n        });                                                                                                           // 3853\n      }                                                                                                               // 3854\n    });                                                                                                               // 3855\n                                                                                                                      // 3856\n    $scope.updateMinutes = function() {                                                                               // 3857\n      var minutes = getMinutesFromTemplate();                                                                         // 3858\n                                                                                                                      // 3859\n      if ( angular.isDefined(minutes) ) {                                                                             // 3860\n        selected.setMinutes( minutes );                                                                               // 3861\n        refresh( 'm' );                                                                                               // 3862\n      } else {                                                                                                        // 3863\n        invalidate(undefined, true);                                                                                  // 3864\n      }                                                                                                               // 3865\n    };                                                                                                                // 3866\n                                                                                                                      // 3867\n    minutesInputEl.bind('blur', function(e) {                                                                         // 3868\n      if ( !$scope.invalidMinutes && $scope.minutes < 10 ) {                                                          // 3869\n        $scope.$apply( function() {                                                                                   // 3870\n          $scope.minutes = pad( $scope.minutes );                                                                     // 3871\n        });                                                                                                           // 3872\n      }                                                                                                               // 3873\n    });                                                                                                               // 3874\n                                                                                                                      // 3875\n  };                                                                                                                  // 3876\n                                                                                                                      // 3877\n  this.render = function() {                                                                                          // 3878\n    var date = ngModelCtrl.$viewValue;                                                                                // 3879\n                                                                                                                      // 3880\n    if ( isNaN(date) ) {                                                                                              // 3881\n      ngModelCtrl.$setValidity('time', false);                                                                        // 3882\n      $log.error('Timepicker directive: \"ng-model\" value must be a Date object, a number of milliseconds since 01.01.1970 or a string representing an RFC2822 or ISO 8601 date.');\n    } else {                                                                                                          // 3884\n      if ( date ) {                                                                                                   // 3885\n        selected = date;                                                                                              // 3886\n      }                                                                                                               // 3887\n      makeValid();                                                                                                    // 3888\n      updateTemplate();                                                                                               // 3889\n    }                                                                                                                 // 3890\n  };                                                                                                                  // 3891\n                                                                                                                      // 3892\n  // Call internally when we know that model is valid.                                                                // 3893\n  function refresh( keyboardChange ) {                                                                                // 3894\n    makeValid();                                                                                                      // 3895\n    ngModelCtrl.$setViewValue( new Date(selected) );                                                                  // 3896\n    updateTemplate( keyboardChange );                                                                                 // 3897\n  }                                                                                                                   // 3898\n                                                                                                                      // 3899\n  function makeValid() {                                                                                              // 3900\n    ngModelCtrl.$setValidity('time', true);                                                                           // 3901\n    $scope.invalidHours = false;                                                                                      // 3902\n    $scope.invalidMinutes = false;                                                                                    // 3903\n  }                                                                                                                   // 3904\n                                                                                                                      // 3905\n  function updateTemplate( keyboardChange ) {                                                                         // 3906\n    var hours = selected.getHours(), minutes = selected.getMinutes();                                                 // 3907\n                                                                                                                      // 3908\n    if ( $scope.showMeridian ) {                                                                                      // 3909\n      hours = ( hours === 0 || hours === 12 ) ? 12 : hours % 12; // Convert 24 to 12 hour system                      // 3910\n    }                                                                                                                 // 3911\n                                                                                                                      // 3912\n    $scope.hours = keyboardChange === 'h' ? hours : pad(hours);                                                       // 3913\n    if (keyboardChange !== 'm') {                                                                                     // 3914\n      $scope.minutes = pad(minutes);                                                                                  // 3915\n    }                                                                                                                 // 3916\n    $scope.meridian = selected.getHours() < 12 ? meridians[0] : meridians[1];                                         // 3917\n  }                                                                                                                   // 3918\n                                                                                                                      // 3919\n  function addMinutes( minutes ) {                                                                                    // 3920\n    var dt = new Date( selected.getTime() + minutes * 60000 );                                                        // 3921\n    selected.setHours( dt.getHours(), dt.getMinutes() );                                                              // 3922\n    refresh();                                                                                                        // 3923\n  }                                                                                                                   // 3924\n                                                                                                                      // 3925\n  $scope.incrementHours = function() {                                                                                // 3926\n    addMinutes( hourStep * 60 );                                                                                      // 3927\n  };                                                                                                                  // 3928\n  $scope.decrementHours = function() {                                                                                // 3929\n    addMinutes( - hourStep * 60 );                                                                                    // 3930\n  };                                                                                                                  // 3931\n  $scope.incrementMinutes = function() {                                                                              // 3932\n    addMinutes( minuteStep );                                                                                         // 3933\n  };                                                                                                                  // 3934\n  $scope.decrementMinutes = function() {                                                                              // 3935\n    addMinutes( - minuteStep );                                                                                       // 3936\n  };                                                                                                                  // 3937\n  $scope.toggleMeridian = function() {                                                                                // 3938\n    addMinutes( 12 * 60 * (( selected.getHours() < 12 ) ? 1 : -1) );                                                  // 3939\n  };                                                                                                                  // 3940\n}])                                                                                                                   // 3941\n                                                                                                                      // 3942\n.directive('timepicker', function () {                                                                                // 3943\n  return {                                                                                                            // 3944\n    restrict: 'EA',                                                                                                   // 3945\n    require: ['timepicker', '?^ngModel'],                                                                             // 3946\n    controller:'TimepickerController',                                                                                // 3947\n    replace: true,                                                                                                    // 3948\n    scope: {},                                                                                                        // 3949\n    templateUrl: 'template/timepicker/timepicker.html',                                                               // 3950\n    link: function(scope, element, attrs, ctrls) {                                                                    // 3951\n      var timepickerCtrl = ctrls[0], ngModelCtrl = ctrls[1];                                                          // 3952\n                                                                                                                      // 3953\n      if ( ngModelCtrl ) {                                                                                            // 3954\n        timepickerCtrl.init( ngModelCtrl, element.find('input') );                                                    // 3955\n      }                                                                                                               // 3956\n    }                                                                                                                 // 3957\n  };                                                                                                                  // 3958\n});                                                                                                                   // 3959\n                                                                                                                      // 3960\nangular.module('ui.bootstrap.transition', [])                                                                         // 3961\n                                                                                                                      // 3962\n.value('$transitionSuppressDeprecated', false)                                                                        // 3963\n/**                                                                                                                   // 3964\n * $transition service provides a consistent interface to trigger CSS 3 transitions and to be informed when they complete.\n * @param  {DOMElement} element  The DOMElement that will be animated.                                                // 3966\n * @param  {string|object|function} trigger  The thing that will cause the transition to start:                       // 3967\n *   - As a string, it represents the css class to be added to the element.                                           // 3968\n *   - As an object, it represents a hash of style attributes to be applied to the element.                           // 3969\n *   - As a function, it represents a function to be called that will cause the transition to occur.                  // 3970\n * @return {Promise}  A promise that is resolved when the transition finishes.                                        // 3971\n */                                                                                                                   // 3972\n.factory('$transition', [                                                                                             // 3973\n        '$q', '$timeout', '$rootScope', '$log', '$transitionSuppressDeprecated',                                      // 3974\nfunction($q ,  $timeout ,  $rootScope ,  $log ,  $transitionSuppressDeprecated) {                                     // 3975\n                                                                                                                      // 3976\n  if (!$transitionSuppressDeprecated) {                                                                               // 3977\n    $log.warn('$transition is now deprecated. Use $animate from ngAnimate instead.');                                 // 3978\n  }                                                                                                                   // 3979\n                                                                                                                      // 3980\n  var $transition = function(element, trigger, options) {                                                             // 3981\n    options = options || {};                                                                                          // 3982\n    var deferred = $q.defer();                                                                                        // 3983\n    var endEventName = $transition[options.animation ? 'animationEndEventName' : 'transitionEndEventName'];           // 3984\n                                                                                                                      // 3985\n    var transitionEndHandler = function(event) {                                                                      // 3986\n      $rootScope.$apply(function() {                                                                                  // 3987\n        element.unbind(endEventName, transitionEndHandler);                                                           // 3988\n        deferred.resolve(element);                                                                                    // 3989\n      });                                                                                                             // 3990\n    };                                                                                                                // 3991\n                                                                                                                      // 3992\n    if (endEventName) {                                                                                               // 3993\n      element.bind(endEventName, transitionEndHandler);                                                               // 3994\n    }                                                                                                                 // 3995\n                                                                                                                      // 3996\n    // Wrap in a timeout to allow the browser time to update the DOM before the transition is to occur                // 3997\n    $timeout(function() {                                                                                             // 3998\n      if ( angular.isString(trigger) ) {                                                                              // 3999\n        element.addClass(trigger);                                                                                    // 4000\n      } else if ( angular.isFunction(trigger) ) {                                                                     // 4001\n        trigger(element);                                                                                             // 4002\n      } else if ( angular.isObject(trigger) ) {                                                                       // 4003\n        element.css(trigger);                                                                                         // 4004\n      }                                                                                                               // 4005\n      //If browser does not support transitions, instantly resolve                                                    // 4006\n      if ( !endEventName ) {                                                                                          // 4007\n        deferred.resolve(element);                                                                                    // 4008\n      }                                                                                                               // 4009\n    });                                                                                                               // 4010\n                                                                                                                      // 4011\n    // Add our custom cancel function to the promise that is returned                                                 // 4012\n    // We can call this if we are about to run a new transition, which we know will prevent this transition from ending,\n    // i.e. it will therefore never raise a transitionEnd event for that transition                                   // 4014\n    deferred.promise.cancel = function() {                                                                            // 4015\n      if ( endEventName ) {                                                                                           // 4016\n        element.unbind(endEventName, transitionEndHandler);                                                           // 4017\n      }                                                                                                               // 4018\n      deferred.reject('Transition cancelled');                                                                        // 4019\n    };                                                                                                                // 4020\n                                                                                                                      // 4021\n    return deferred.promise;                                                                                          // 4022\n  };                                                                                                                  // 4023\n                                                                                                                      // 4024\n  // Work out the name of the transitionEnd event                                                                     // 4025\n  var transElement = document.createElement('trans');                                                                 // 4026\n  var transitionEndEventNames = {                                                                                     // 4027\n    'WebkitTransition': 'webkitTransitionEnd',                                                                        // 4028\n    'MozTransition': 'transitionend',                                                                                 // 4029\n    'OTransition': 'oTransitionEnd',                                                                                  // 4030\n    'transition': 'transitionend'                                                                                     // 4031\n  };                                                                                                                  // 4032\n  var animationEndEventNames = {                                                                                      // 4033\n    'WebkitTransition': 'webkitAnimationEnd',                                                                         // 4034\n    'MozTransition': 'animationend',                                                                                  // 4035\n    'OTransition': 'oAnimationEnd',                                                                                   // 4036\n    'transition': 'animationend'                                                                                      // 4037\n  };                                                                                                                  // 4038\n  function findEndEventName(endEventNames) {                                                                          // 4039\n    for (var name in endEventNames){                                                                                  // 4040\n      if (transElement.style[name] !== undefined) {                                                                   // 4041\n        return endEventNames[name];                                                                                   // 4042\n      }                                                                                                               // 4043\n    }                                                                                                                 // 4044\n  }                                                                                                                   // 4045\n  $transition.transitionEndEventName = findEndEventName(transitionEndEventNames);                                     // 4046\n  $transition.animationEndEventName = findEndEventName(animationEndEventNames);                                       // 4047\n  return $transition;                                                                                                 // 4048\n}]);                                                                                                                  // 4049\n                                                                                                                      // 4050\nangular.module('ui.bootstrap.typeahead', ['ui.bootstrap.position', 'ui.bootstrap.bindHtml'])                          // 4051\n                                                                                                                      // 4052\n/**                                                                                                                   // 4053\n * A helper service that can parse typeahead's syntax (string provided by users)                                      // 4054\n * Extracted to a separate service for ease of unit testing                                                           // 4055\n */                                                                                                                   // 4056\n  .factory('typeaheadParser', ['$parse', function ($parse) {                                                          // 4057\n                                                                                                                      // 4058\n  //                      00000111000000000000022200000000000000003333333333333330000000000044000                     // 4059\n  var TYPEAHEAD_REGEXP = /^\\s*([\\s\\S]+?)(?:\\s+as\\s+([\\s\\S]+?))?\\s+for\\s+(?:([\\$\\w][\\$\\w\\d]*))\\s+in\\s+([\\s\\S]+?)$/;    // 4060\n                                                                                                                      // 4061\n  return {                                                                                                            // 4062\n    parse:function (input) {                                                                                          // 4063\n                                                                                                                      // 4064\n      var match = input.match(TYPEAHEAD_REGEXP);                                                                      // 4065\n      if (!match) {                                                                                                   // 4066\n        throw new Error(                                                                                              // 4067\n          'Expected typeahead specification in form of \"_modelValue_ (as _label_)? for _item_ in _collection_\"' +     // 4068\n            ' but got \"' + input + '\".');                                                                             // 4069\n      }                                                                                                               // 4070\n                                                                                                                      // 4071\n      return {                                                                                                        // 4072\n        itemName:match[3],                                                                                            // 4073\n        source:$parse(match[4]),                                                                                      // 4074\n        viewMapper:$parse(match[2] || match[1]),                                                                      // 4075\n        modelMapper:$parse(match[1])                                                                                  // 4076\n      };                                                                                                              // 4077\n    }                                                                                                                 // 4078\n  };                                                                                                                  // 4079\n}])                                                                                                                   // 4080\n                                                                                                                      // 4081\n  .directive('typeahead', ['$compile', '$parse', '$q', '$timeout', '$document', '$position', 'typeaheadParser',       // 4082\n    function ($compile, $parse, $q, $timeout, $document, $position, typeaheadParser) {                                // 4083\n                                                                                                                      // 4084\n  var HOT_KEYS = [9, 13, 27, 38, 40];                                                                                 // 4085\n                                                                                                                      // 4086\n  return {                                                                                                            // 4087\n    require:'ngModel',                                                                                                // 4088\n    link:function (originalScope, element, attrs, modelCtrl) {                                                        // 4089\n                                                                                                                      // 4090\n      //SUPPORTED ATTRIBUTES (OPTIONS)                                                                                // 4091\n                                                                                                                      // 4092\n      //minimal no of characters that needs to be entered before typeahead kicks-in                                   // 4093\n      var minSearch = originalScope.$eval(attrs.typeaheadMinLength) || 1;                                             // 4094\n                                                                                                                      // 4095\n      //minimal wait time after last character typed before typeahead kicks-in                                        // 4096\n      var waitTime = originalScope.$eval(attrs.typeaheadWaitMs) || 0;                                                 // 4097\n                                                                                                                      // 4098\n      //should it restrict model values to the ones selected from the popup only?                                     // 4099\n      var isEditable = originalScope.$eval(attrs.typeaheadEditable) !== false;                                        // 4100\n                                                                                                                      // 4101\n      //binding to a variable that indicates if matches are being retrieved asynchronously                            // 4102\n      var isLoadingSetter = $parse(attrs.typeaheadLoading).assign || angular.noop;                                    // 4103\n                                                                                                                      // 4104\n      //a callback executed when a match is selected                                                                  // 4105\n      var onSelectCallback = $parse(attrs.typeaheadOnSelect);                                                         // 4106\n                                                                                                                      // 4107\n      var inputFormatter = attrs.typeaheadInputFormatter ? $parse(attrs.typeaheadInputFormatter) : undefined;         // 4108\n                                                                                                                      // 4109\n      var appendToBody =  attrs.typeaheadAppendToBody ? originalScope.$eval(attrs.typeaheadAppendToBody) : false;     // 4110\n                                                                                                                      // 4111\n      var focusFirst = originalScope.$eval(attrs.typeaheadFocusFirst) !== false;                                      // 4112\n                                                                                                                      // 4113\n      //INTERNAL VARIABLES                                                                                            // 4114\n                                                                                                                      // 4115\n      //model setter executed upon match selection                                                                    // 4116\n      var $setModelValue = $parse(attrs.ngModel).assign;                                                              // 4117\n                                                                                                                      // 4118\n      //expressions used by typeahead                                                                                 // 4119\n      var parserResult = typeaheadParser.parse(attrs.typeahead);                                                      // 4120\n                                                                                                                      // 4121\n      var hasFocus;                                                                                                   // 4122\n                                                                                                                      // 4123\n      //create a child scope for the typeahead directive so we are not polluting original scope                       // 4124\n      //with typeahead-specific data (matches, query etc.)                                                            // 4125\n      var scope = originalScope.$new();                                                                               // 4126\n      originalScope.$on('$destroy', function(){                                                                       // 4127\n        scope.$destroy();                                                                                             // 4128\n      });                                                                                                             // 4129\n                                                                                                                      // 4130\n      // WAI-ARIA                                                                                                     // 4131\n      var popupId = 'typeahead-' + scope.$id + '-' + Math.floor(Math.random() * 10000);                               // 4132\n      element.attr({                                                                                                  // 4133\n        'aria-autocomplete': 'list',                                                                                  // 4134\n        'aria-expanded': false,                                                                                       // 4135\n        'aria-owns': popupId                                                                                          // 4136\n      });                                                                                                             // 4137\n                                                                                                                      // 4138\n      //pop-up element used to display matches                                                                        // 4139\n      var popUpEl = angular.element('<div typeahead-popup></div>');                                                   // 4140\n      popUpEl.attr({                                                                                                  // 4141\n        id: popupId,                                                                                                  // 4142\n        matches: 'matches',                                                                                           // 4143\n        active: 'activeIdx',                                                                                          // 4144\n        select: 'select(activeIdx)',                                                                                  // 4145\n        query: 'query',                                                                                               // 4146\n        position: 'position'                                                                                          // 4147\n      });                                                                                                             // 4148\n      //custom item template                                                                                          // 4149\n      if (angular.isDefined(attrs.typeaheadTemplateUrl)) {                                                            // 4150\n        popUpEl.attr('template-url', attrs.typeaheadTemplateUrl);                                                     // 4151\n      }                                                                                                               // 4152\n                                                                                                                      // 4153\n      var resetMatches = function() {                                                                                 // 4154\n        scope.matches = [];                                                                                           // 4155\n        scope.activeIdx = -1;                                                                                         // 4156\n        element.attr('aria-expanded', false);                                                                         // 4157\n      };                                                                                                              // 4158\n                                                                                                                      // 4159\n      var getMatchId = function(index) {                                                                              // 4160\n        return popupId + '-option-' + index;                                                                          // 4161\n      };                                                                                                              // 4162\n                                                                                                                      // 4163\n      // Indicate that the specified match is the active (pre-selected) item in the list owned by this typeahead.     // 4164\n      // This attribute is added or removed automatically when the `activeIdx` changes.                               // 4165\n      scope.$watch('activeIdx', function(index) {                                                                     // 4166\n        if (index < 0) {                                                                                              // 4167\n          element.removeAttr('aria-activedescendant');                                                                // 4168\n        } else {                                                                                                      // 4169\n          element.attr('aria-activedescendant', getMatchId(index));                                                   // 4170\n        }                                                                                                             // 4171\n      });                                                                                                             // 4172\n                                                                                                                      // 4173\n      var getMatchesAsync = function(inputValue) {                                                                    // 4174\n                                                                                                                      // 4175\n        var locals = {$viewValue: inputValue};                                                                        // 4176\n        isLoadingSetter(originalScope, true);                                                                         // 4177\n        $q.when(parserResult.source(originalScope, locals)).then(function(matches) {                                  // 4178\n                                                                                                                      // 4179\n          //it might happen that several async queries were in progress if a user were typing fast                    // 4180\n          //but we are interested only in responses that correspond to the current view value                         // 4181\n          var onCurrentRequest = (inputValue === modelCtrl.$viewValue);                                               // 4182\n          if (onCurrentRequest && hasFocus) {                                                                         // 4183\n            if (matches && matches.length > 0) {                                                                      // 4184\n                                                                                                                      // 4185\n              scope.activeIdx = focusFirst ? 0 : -1;                                                                  // 4186\n              scope.matches.length = 0;                                                                               // 4187\n                                                                                                                      // 4188\n              //transform labels                                                                                      // 4189\n              for(var i=0; i<matches.length; i++) {                                                                   // 4190\n                locals[parserResult.itemName] = matches[i];                                                           // 4191\n                scope.matches.push({                                                                                  // 4192\n                  id: getMatchId(i),                                                                                  // 4193\n                  label: parserResult.viewMapper(scope, locals),                                                      // 4194\n                  model: matches[i]                                                                                   // 4195\n                });                                                                                                   // 4196\n              }                                                                                                       // 4197\n                                                                                                                      // 4198\n              scope.query = inputValue;                                                                               // 4199\n              //position pop-up with matches - we need to re-calculate its position each time we are opening a window // 4200\n              //with matches as a pop-up might be absolute-positioned and position of an input might have changed on a page\n              //due to other elements being rendered                                                                  // 4202\n              scope.position = appendToBody ? $position.offset(element) : $position.position(element);                // 4203\n              scope.position.top = scope.position.top + element.prop('offsetHeight');                                 // 4204\n                                                                                                                      // 4205\n              element.attr('aria-expanded', true);                                                                    // 4206\n            } else {                                                                                                  // 4207\n              resetMatches();                                                                                         // 4208\n            }                                                                                                         // 4209\n          }                                                                                                           // 4210\n          if (onCurrentRequest) {                                                                                     // 4211\n            isLoadingSetter(originalScope, false);                                                                    // 4212\n          }                                                                                                           // 4213\n        }, function(){                                                                                                // 4214\n          resetMatches();                                                                                             // 4215\n          isLoadingSetter(originalScope, false);                                                                      // 4216\n        });                                                                                                           // 4217\n      };                                                                                                              // 4218\n                                                                                                                      // 4219\n      resetMatches();                                                                                                 // 4220\n                                                                                                                      // 4221\n      //we need to propagate user's query so we can higlight matches                                                  // 4222\n      scope.query = undefined;                                                                                        // 4223\n                                                                                                                      // 4224\n      //Declare the timeout promise var outside the function scope so that stacked calls can be cancelled later       // 4225\n      var timeoutPromise;                                                                                             // 4226\n                                                                                                                      // 4227\n      var scheduleSearchWithTimeout = function(inputValue) {                                                          // 4228\n        timeoutPromise = $timeout(function () {                                                                       // 4229\n          getMatchesAsync(inputValue);                                                                                // 4230\n        }, waitTime);                                                                                                 // 4231\n      };                                                                                                              // 4232\n                                                                                                                      // 4233\n      var cancelPreviousTimeout = function() {                                                                        // 4234\n        if (timeoutPromise) {                                                                                         // 4235\n          $timeout.cancel(timeoutPromise);                                                                            // 4236\n        }                                                                                                             // 4237\n      };                                                                                                              // 4238\n                                                                                                                      // 4239\n      //plug into $parsers pipeline to open a typeahead on view changes initiated from DOM                            // 4240\n      //$parsers kick-in on all the changes coming from the view as well as manually triggered by $setViewValue       // 4241\n      modelCtrl.$parsers.unshift(function (inputValue) {                                                              // 4242\n                                                                                                                      // 4243\n        hasFocus = true;                                                                                              // 4244\n                                                                                                                      // 4245\n        if (inputValue && inputValue.length >= minSearch) {                                                           // 4246\n          if (waitTime > 0) {                                                                                         // 4247\n            cancelPreviousTimeout();                                                                                  // 4248\n            scheduleSearchWithTimeout(inputValue);                                                                    // 4249\n          } else {                                                                                                    // 4250\n            getMatchesAsync(inputValue);                                                                              // 4251\n          }                                                                                                           // 4252\n        } else {                                                                                                      // 4253\n          isLoadingSetter(originalScope, false);                                                                      // 4254\n          cancelPreviousTimeout();                                                                                    // 4255\n          resetMatches();                                                                                             // 4256\n        }                                                                                                             // 4257\n                                                                                                                      // 4258\n        if (isEditable) {                                                                                             // 4259\n          return inputValue;                                                                                          // 4260\n        } else {                                                                                                      // 4261\n          if (!inputValue) {                                                                                          // 4262\n            // Reset in case user had typed something previously.                                                     // 4263\n            modelCtrl.$setValidity('editable', true);                                                                 // 4264\n            return inputValue;                                                                                        // 4265\n          } else {                                                                                                    // 4266\n            modelCtrl.$setValidity('editable', false);                                                                // 4267\n            return undefined;                                                                                         // 4268\n          }                                                                                                           // 4269\n        }                                                                                                             // 4270\n      });                                                                                                             // 4271\n                                                                                                                      // 4272\n      modelCtrl.$formatters.push(function (modelValue) {                                                              // 4273\n                                                                                                                      // 4274\n        var candidateViewValue, emptyViewValue;                                                                       // 4275\n        var locals = {};                                                                                              // 4276\n                                                                                                                      // 4277\n        // The validity may be set to false via $parsers (see above) if                                               // 4278\n        // the model is restricted to selected values. If the model                                                   // 4279\n        // is set manually it is considered to be valid.                                                              // 4280\n        if (!isEditable) {                                                                                            // 4281\n          modelCtrl.$setValidity('editable', true);                                                                   // 4282\n        }                                                                                                             // 4283\n                                                                                                                      // 4284\n        if (inputFormatter) {                                                                                         // 4285\n                                                                                                                      // 4286\n          locals.$model = modelValue;                                                                                 // 4287\n          return inputFormatter(originalScope, locals);                                                               // 4288\n                                                                                                                      // 4289\n        } else {                                                                                                      // 4290\n                                                                                                                      // 4291\n          //it might happen that we don't have enough info to properly render input value                             // 4292\n          //we need to check for this situation and simply return model value if we can't apply custom formatting     // 4293\n          locals[parserResult.itemName] = modelValue;                                                                 // 4294\n          candidateViewValue = parserResult.viewMapper(originalScope, locals);                                        // 4295\n          locals[parserResult.itemName] = undefined;                                                                  // 4296\n          emptyViewValue = parserResult.viewMapper(originalScope, locals);                                            // 4297\n                                                                                                                      // 4298\n          return candidateViewValue!== emptyViewValue ? candidateViewValue : modelValue;                              // 4299\n        }                                                                                                             // 4300\n      });                                                                                                             // 4301\n                                                                                                                      // 4302\n      scope.select = function (activeIdx) {                                                                           // 4303\n        //called from within the $digest() cycle                                                                      // 4304\n        var locals = {};                                                                                              // 4305\n        var model, item;                                                                                              // 4306\n                                                                                                                      // 4307\n        locals[parserResult.itemName] = item = scope.matches[activeIdx].model;                                        // 4308\n        model = parserResult.modelMapper(originalScope, locals);                                                      // 4309\n        $setModelValue(originalScope, model);                                                                         // 4310\n        modelCtrl.$setValidity('editable', true);                                                                     // 4311\n        modelCtrl.$setValidity('parse', true);                                                                        // 4312\n                                                                                                                      // 4313\n        onSelectCallback(originalScope, {                                                                             // 4314\n          $item: item,                                                                                                // 4315\n          $model: model,                                                                                              // 4316\n          $label: parserResult.viewMapper(originalScope, locals)                                                      // 4317\n        });                                                                                                           // 4318\n                                                                                                                      // 4319\n        resetMatches();                                                                                               // 4320\n                                                                                                                      // 4321\n        //return focus to the input element if a match was selected via a mouse click event                           // 4322\n        // use timeout to avoid $rootScope:inprog error                                                               // 4323\n        $timeout(function() { element[0].focus(); }, 0, false);                                                       // 4324\n      };                                                                                                              // 4325\n                                                                                                                      // 4326\n      //bind keyboard events: arrows up(38) / down(40), enter(13) and tab(9), esc(27)                                 // 4327\n      element.bind('keydown', function (evt) {                                                                        // 4328\n                                                                                                                      // 4329\n        //typeahead is open and an \"interesting\" key was pressed                                                      // 4330\n        if (scope.matches.length === 0 || HOT_KEYS.indexOf(evt.which) === -1) {                                       // 4331\n          return;                                                                                                     // 4332\n        }                                                                                                             // 4333\n                                                                                                                      // 4334\n        // if there's nothing selected (i.e. focusFirst) and enter is hit, don't do anything                          // 4335\n        if (scope.activeIdx == -1 && (evt.which === 13 || evt.which === 9)) {                                         // 4336\n          return;                                                                                                     // 4337\n        }                                                                                                             // 4338\n                                                                                                                      // 4339\n        evt.preventDefault();                                                                                         // 4340\n                                                                                                                      // 4341\n        if (evt.which === 40) {                                                                                       // 4342\n          scope.activeIdx = (scope.activeIdx + 1) % scope.matches.length;                                             // 4343\n          scope.$digest();                                                                                            // 4344\n                                                                                                                      // 4345\n        } else if (evt.which === 38) {                                                                                // 4346\n          scope.activeIdx = (scope.activeIdx > 0 ? scope.activeIdx : scope.matches.length) - 1;                       // 4347\n          scope.$digest();                                                                                            // 4348\n                                                                                                                      // 4349\n        } else if (evt.which === 13 || evt.which === 9) {                                                             // 4350\n          scope.$apply(function () {                                                                                  // 4351\n            scope.select(scope.activeIdx);                                                                            // 4352\n          });                                                                                                         // 4353\n                                                                                                                      // 4354\n        } else if (evt.which === 27) {                                                                                // 4355\n          evt.stopPropagation();                                                                                      // 4356\n                                                                                                                      // 4357\n          resetMatches();                                                                                             // 4358\n          scope.$digest();                                                                                            // 4359\n        }                                                                                                             // 4360\n      });                                                                                                             // 4361\n                                                                                                                      // 4362\n      element.bind('blur', function (evt) {                                                                           // 4363\n        hasFocus = false;                                                                                             // 4364\n      });                                                                                                             // 4365\n                                                                                                                      // 4366\n      // Keep reference to click handler to unbind it.                                                                // 4367\n      var dismissClickHandler = function (evt) {                                                                      // 4368\n        if (element[0] !== evt.target) {                                                                              // 4369\n          resetMatches();                                                                                             // 4370\n          scope.$digest();                                                                                            // 4371\n        }                                                                                                             // 4372\n      };                                                                                                              // 4373\n                                                                                                                      // 4374\n      $document.bind('click', dismissClickHandler);                                                                   // 4375\n                                                                                                                      // 4376\n      originalScope.$on('$destroy', function(){                                                                       // 4377\n        $document.unbind('click', dismissClickHandler);                                                               // 4378\n        if (appendToBody) {                                                                                           // 4379\n          $popup.remove();                                                                                            // 4380\n        }                                                                                                             // 4381\n        // Prevent jQuery cache memory leak                                                                           // 4382\n        popUpEl.remove();                                                                                             // 4383\n      });                                                                                                             // 4384\n                                                                                                                      // 4385\n      var $popup = $compile(popUpEl)(scope);                                                                          // 4386\n                                                                                                                      // 4387\n      if (appendToBody) {                                                                                             // 4388\n        $document.find('body').append($popup);                                                                        // 4389\n      } else {                                                                                                        // 4390\n        element.after($popup);                                                                                        // 4391\n      }                                                                                                               // 4392\n    }                                                                                                                 // 4393\n  };                                                                                                                  // 4394\n                                                                                                                      // 4395\n}])                                                                                                                   // 4396\n                                                                                                                      // 4397\n  .directive('typeaheadPopup', function () {                                                                          // 4398\n    return {                                                                                                          // 4399\n      restrict:'EA',                                                                                                  // 4400\n      scope:{                                                                                                         // 4401\n        matches:'=',                                                                                                  // 4402\n        query:'=',                                                                                                    // 4403\n        active:'=',                                                                                                   // 4404\n        position:'=',                                                                                                 // 4405\n        select:'&'                                                                                                    // 4406\n      },                                                                                                              // 4407\n      replace:true,                                                                                                   // 4408\n      templateUrl:'template/typeahead/typeahead-popup.html',                                                          // 4409\n      link:function (scope, element, attrs) {                                                                         // 4410\n                                                                                                                      // 4411\n        scope.templateUrl = attrs.templateUrl;                                                                        // 4412\n                                                                                                                      // 4413\n        scope.isOpen = function () {                                                                                  // 4414\n          return scope.matches.length > 0;                                                                            // 4415\n        };                                                                                                            // 4416\n                                                                                                                      // 4417\n        scope.isActive = function (matchIdx) {                                                                        // 4418\n          return scope.active == matchIdx;                                                                            // 4419\n        };                                                                                                            // 4420\n                                                                                                                      // 4421\n        scope.selectActive = function (matchIdx) {                                                                    // 4422\n          scope.active = matchIdx;                                                                                    // 4423\n        };                                                                                                            // 4424\n                                                                                                                      // 4425\n        scope.selectMatch = function (activeIdx) {                                                                    // 4426\n          scope.select({activeIdx:activeIdx});                                                                        // 4427\n        };                                                                                                            // 4428\n      }                                                                                                               // 4429\n    };                                                                                                                // 4430\n  })                                                                                                                  // 4431\n                                                                                                                      // 4432\n  .directive('typeaheadMatch', ['$templateRequest', '$compile', '$parse', function ($templateRequest, $compile, $parse) {\n    return {                                                                                                          // 4434\n      restrict:'EA',                                                                                                  // 4435\n      scope:{                                                                                                         // 4436\n        index:'=',                                                                                                    // 4437\n        match:'=',                                                                                                    // 4438\n        query:'='                                                                                                     // 4439\n      },                                                                                                              // 4440\n      link:function (scope, element, attrs) {                                                                         // 4441\n        var tplUrl = $parse(attrs.templateUrl)(scope.$parent) || 'template/typeahead/typeahead-match.html';           // 4442\n        $templateRequest(tplUrl).then(function(tplContent) {                                                          // 4443\n          $compile(tplContent.trim())(scope, function(clonedElement){                                                 // 4444\n            element.replaceWith(clonedElement);                                                                       // 4445\n          });                                                                                                         // 4446\n        });                                                                                                           // 4447\n      }                                                                                                               // 4448\n    };                                                                                                                // 4449\n  }])                                                                                                                 // 4450\n                                                                                                                      // 4451\n  .filter('typeaheadHighlight', function() {                                                                          // 4452\n                                                                                                                      // 4453\n    function escapeRegexp(queryToEscape) {                                                                            // 4454\n      return queryToEscape.replace(/([.?*+^$[\\]\\\\(){}|-])/g, '\\\\$1');                                                 // 4455\n    }                                                                                                                 // 4456\n                                                                                                                      // 4457\n    return function(matchItem, query) {                                                                               // 4458\n      return query ? ('' + matchItem).replace(new RegExp(escapeRegexp(query), 'gi'), '<strong>$&</strong>') : matchItem;\n    };                                                                                                                // 4460\n  });                                                                                                                 // 4461\n                                                                                                                      // 4462\nangular.module(\"template/accordion/accordion-group.html\", []).run([\"$templateCache\", function($templateCache) {       // 4463\n  $templateCache.put(\"template/accordion/accordion-group.html\",                                                       // 4464\n    \"<div class=\\\"panel panel-default\\\">\\n\" +                                                                         // 4465\n    \"  <div class=\\\"panel-heading\\\">\\n\" +                                                                             // 4466\n    \"    <h4 class=\\\"panel-title\\\">\\n\" +                                                                              // 4467\n    \"      <a href=\\\"javascript:void(0)\\\" tabindex=\\\"0\\\" class=\\\"accordion-toggle\\\" ng-click=\\\"toggleOpen()\\\" accordion-transclude=\\\"heading\\\"><span ng-class=\\\"{'text-muted': isDisabled}\\\">{{heading}}</span></a>\\n\" +\n    \"    </h4>\\n\" +                                                                                                   // 4469\n    \"  </div>\\n\" +                                                                                                    // 4470\n    \"  <div class=\\\"panel-collapse collapse\\\" collapse=\\\"!isOpen\\\">\\n\" +                                              // 4471\n    \"\t  <div class=\\\"panel-body\\\" ng-transclude></div>\\n\" +                                                           // 4472\n    \"  </div>\\n\" +                                                                                                    // 4473\n    \"</div>\\n\" +                                                                                                      // 4474\n    \"\");                                                                                                              // 4475\n}]);                                                                                                                  // 4476\n                                                                                                                      // 4477\nangular.module(\"template/accordion/accordion.html\", []).run([\"$templateCache\", function($templateCache) {             // 4478\n  $templateCache.put(\"template/accordion/accordion.html\",                                                             // 4479\n    \"<div class=\\\"panel-group\\\" ng-transclude></div>\");                                                               // 4480\n}]);                                                                                                                  // 4481\n                                                                                                                      // 4482\nangular.module(\"template/alert/alert.html\", []).run([\"$templateCache\", function($templateCache) {                     // 4483\n  $templateCache.put(\"template/alert/alert.html\",                                                                     // 4484\n    \"<div class=\\\"alert\\\" ng-class=\\\"['alert-' + (type || 'warning'), closeable ? 'alert-dismissable' : null]\\\" role=\\\"alert\\\">\\n\" +\n    \"    <button ng-show=\\\"closeable\\\" type=\\\"button\\\" class=\\\"close\\\" ng-click=\\\"close()\\\">\\n\" +                     // 4486\n    \"        <span aria-hidden=\\\"true\\\">&times;</span>\\n\" +                                                           // 4487\n    \"        <span class=\\\"sr-only\\\">Close</span>\\n\" +                                                                // 4488\n    \"    </button>\\n\" +                                                                                               // 4489\n    \"    <div ng-transclude></div>\\n\" +                                                                               // 4490\n    \"</div>\\n\" +                                                                                                      // 4491\n    \"\");                                                                                                              // 4492\n}]);                                                                                                                  // 4493\n                                                                                                                      // 4494\nangular.module(\"template/carousel/carousel.html\", []).run([\"$templateCache\", function($templateCache) {               // 4495\n  $templateCache.put(\"template/carousel/carousel.html\",                                                               // 4496\n    \"<div ng-mouseenter=\\\"pause()\\\" ng-mouseleave=\\\"play()\\\" class=\\\"carousel\\\" ng-swipe-right=\\\"prev()\\\" ng-swipe-left=\\\"next()\\\">\\n\" +\n    \"    <ol class=\\\"carousel-indicators\\\" ng-show=\\\"slides.length > 1\\\">\\n\" +                                        // 4498\n    \"        <li ng-repeat=\\\"slide in slides | orderBy:'index' track by $index\\\" ng-class=\\\"{active: isActive(slide)}\\\" ng-click=\\\"select(slide)\\\"></li>\\n\" +\n    \"    </ol>\\n\" +                                                                                                   // 4500\n    \"    <div class=\\\"carousel-inner\\\" ng-transclude></div>\\n\" +                                                      // 4501\n    \"    <a class=\\\"left carousel-control\\\" ng-click=\\\"prev()\\\" ng-show=\\\"slides.length > 1\\\"><span class=\\\"glyphicon glyphicon-chevron-left\\\"></span></a>\\n\" +\n    \"    <a class=\\\"right carousel-control\\\" ng-click=\\\"next()\\\" ng-show=\\\"slides.length > 1\\\"><span class=\\\"glyphicon glyphicon-chevron-right\\\"></span></a>\\n\" +\n    \"</div>\\n\" +                                                                                                      // 4504\n    \"\");                                                                                                              // 4505\n}]);                                                                                                                  // 4506\n                                                                                                                      // 4507\nangular.module(\"template/carousel/slide.html\", []).run([\"$templateCache\", function($templateCache) {                  // 4508\n  $templateCache.put(\"template/carousel/slide.html\",                                                                  // 4509\n    \"<div ng-class=\\\"{\\n\" +                                                                                           // 4510\n    \"    'active': active\\n\" +                                                                                        // 4511\n    \"  }\\\" class=\\\"item text-center\\\" ng-transclude></div>\\n\" +                                                       // 4512\n    \"\");                                                                                                              // 4513\n}]);                                                                                                                  // 4514\n                                                                                                                      // 4515\nangular.module(\"template/datepicker/datepicker.html\", []).run([\"$templateCache\", function($templateCache) {           // 4516\n  $templateCache.put(\"template/datepicker/datepicker.html\",                                                           // 4517\n    \"<div ng-switch=\\\"datepickerMode\\\" role=\\\"application\\\" ng-keydown=\\\"keydown($event)\\\">\\n\" +                      // 4518\n    \"  <daypicker ng-switch-when=\\\"day\\\" tabindex=\\\"0\\\"></daypicker>\\n\" +                                             // 4519\n    \"  <monthpicker ng-switch-when=\\\"month\\\" tabindex=\\\"0\\\"></monthpicker>\\n\" +                                       // 4520\n    \"  <yearpicker ng-switch-when=\\\"year\\\" tabindex=\\\"0\\\"></yearpicker>\\n\" +                                          // 4521\n    \"</div>\");                                                                                                        // 4522\n}]);                                                                                                                  // 4523\n                                                                                                                      // 4524\nangular.module(\"template/datepicker/day.html\", []).run([\"$templateCache\", function($templateCache) {                  // 4525\n  $templateCache.put(\"template/datepicker/day.html\",                                                                  // 4526\n    \"<table role=\\\"grid\\\" aria-labelledby=\\\"{{uniqueId}}-title\\\" aria-activedescendant=\\\"{{activeDateId}}\\\">\\n\" +     // 4527\n    \"  <thead>\\n\" +                                                                                                   // 4528\n    \"    <tr>\\n\" +                                                                                                    // 4529\n    \"      <th><button type=\\\"button\\\" class=\\\"btn btn-default btn-sm pull-left\\\" ng-click=\\\"move(-1)\\\" tabindex=\\\"-1\\\"><i class=\\\"glyphicon glyphicon-chevron-left\\\"></i></button></th>\\n\" +\n    \"      <th colspan=\\\"{{5 + showWeeks}}\\\"><button id=\\\"{{uniqueId}}-title\\\" role=\\\"heading\\\" aria-live=\\\"assertive\\\" aria-atomic=\\\"true\\\" type=\\\"button\\\" class=\\\"btn btn-default btn-sm\\\" ng-click=\\\"toggleMode()\\\" ng-disabled=\\\"datepickerMode === maxMode\\\" tabindex=\\\"-1\\\" style=\\\"width:100%;\\\"><strong>{{title}}</strong></button></th>\\n\" +\n    \"      <th><button type=\\\"button\\\" class=\\\"btn btn-default btn-sm pull-right\\\" ng-click=\\\"move(1)\\\" tabindex=\\\"-1\\\"><i class=\\\"glyphicon glyphicon-chevron-right\\\"></i></button></th>\\n\" +\n    \"    </tr>\\n\" +                                                                                                   // 4533\n    \"    <tr>\\n\" +                                                                                                    // 4534\n    \"      <th ng-show=\\\"showWeeks\\\" class=\\\"text-center\\\"></th>\\n\" +                                                 // 4535\n    \"      <th ng-repeat=\\\"label in labels track by $index\\\" class=\\\"text-center\\\"><small aria-label=\\\"{{label.full}}\\\">{{label.abbr}}</small></th>\\n\" +\n    \"    </tr>\\n\" +                                                                                                   // 4537\n    \"  </thead>\\n\" +                                                                                                  // 4538\n    \"  <tbody>\\n\" +                                                                                                   // 4539\n    \"    <tr ng-repeat=\\\"row in rows track by $index\\\">\\n\" +                                                          // 4540\n    \"      <td ng-show=\\\"showWeeks\\\" class=\\\"text-center h6\\\"><em>{{ weekNumbers[$index] }}</em></td>\\n\" +            // 4541\n    \"      <td ng-repeat=\\\"dt in row track by dt.date\\\" class=\\\"text-center\\\" role=\\\"gridcell\\\" id=\\\"{{dt.uid}}\\\" aria-disabled=\\\"{{!!dt.disabled}}\\\" ng-class=\\\"dt.customClass\\\">\\n\" +\n    \"        <button type=\\\"button\\\" style=\\\"width:100%;\\\" class=\\\"btn btn-default btn-sm\\\" ng-class=\\\"{'btn-info': dt.selected, active: isActive(dt)}\\\" ng-click=\\\"select(dt.date)\\\" ng-disabled=\\\"dt.disabled\\\" tabindex=\\\"-1\\\"><span ng-class=\\\"{'text-muted': dt.secondary, 'text-info': dt.current}\\\">{{dt.label}}</span></button>\\n\" +\n    \"      </td>\\n\" +                                                                                                 // 4544\n    \"    </tr>\\n\" +                                                                                                   // 4545\n    \"  </tbody>\\n\" +                                                                                                  // 4546\n    \"</table>\\n\" +                                                                                                    // 4547\n    \"\");                                                                                                              // 4548\n}]);                                                                                                                  // 4549\n                                                                                                                      // 4550\nangular.module(\"template/datepicker/month.html\", []).run([\"$templateCache\", function($templateCache) {                // 4551\n  $templateCache.put(\"template/datepicker/month.html\",                                                                // 4552\n    \"<table role=\\\"grid\\\" aria-labelledby=\\\"{{uniqueId}}-title\\\" aria-activedescendant=\\\"{{activeDateId}}\\\">\\n\" +     // 4553\n    \"  <thead>\\n\" +                                                                                                   // 4554\n    \"    <tr>\\n\" +                                                                                                    // 4555\n    \"      <th><button type=\\\"button\\\" class=\\\"btn btn-default btn-sm pull-left\\\" ng-click=\\\"move(-1)\\\" tabindex=\\\"-1\\\"><i class=\\\"glyphicon glyphicon-chevron-left\\\"></i></button></th>\\n\" +\n    \"      <th><button id=\\\"{{uniqueId}}-title\\\" role=\\\"heading\\\" aria-live=\\\"assertive\\\" aria-atomic=\\\"true\\\" type=\\\"button\\\" class=\\\"btn btn-default btn-sm\\\" ng-click=\\\"toggleMode()\\\" ng-disabled=\\\"datepickerMode === maxMode\\\" tabindex=\\\"-1\\\" style=\\\"width:100%;\\\"><strong>{{title}}</strong></button></th>\\n\" +\n    \"      <th><button type=\\\"button\\\" class=\\\"btn btn-default btn-sm pull-right\\\" ng-click=\\\"move(1)\\\" tabindex=\\\"-1\\\"><i class=\\\"glyphicon glyphicon-chevron-right\\\"></i></button></th>\\n\" +\n    \"    </tr>\\n\" +                                                                                                   // 4559\n    \"  </thead>\\n\" +                                                                                                  // 4560\n    \"  <tbody>\\n\" +                                                                                                   // 4561\n    \"    <tr ng-repeat=\\\"row in rows track by $index\\\">\\n\" +                                                          // 4562\n    \"      <td ng-repeat=\\\"dt in row track by dt.date\\\" class=\\\"text-center\\\" role=\\\"gridcell\\\" id=\\\"{{dt.uid}}\\\" aria-disabled=\\\"{{!!dt.disabled}}\\\">\\n\" +\n    \"        <button type=\\\"button\\\" style=\\\"width:100%;\\\" class=\\\"btn btn-default\\\" ng-class=\\\"{'btn-info': dt.selected, active: isActive(dt)}\\\" ng-click=\\\"select(dt.date)\\\" ng-disabled=\\\"dt.disabled\\\" tabindex=\\\"-1\\\"><span ng-class=\\\"{'text-info': dt.current}\\\">{{dt.label}}</span></button>\\n\" +\n    \"      </td>\\n\" +                                                                                                 // 4565\n    \"    </tr>\\n\" +                                                                                                   // 4566\n    \"  </tbody>\\n\" +                                                                                                  // 4567\n    \"</table>\\n\" +                                                                                                    // 4568\n    \"\");                                                                                                              // 4569\n}]);                                                                                                                  // 4570\n                                                                                                                      // 4571\nangular.module(\"template/datepicker/popup.html\", []).run([\"$templateCache\", function($templateCache) {                // 4572\n  $templateCache.put(\"template/datepicker/popup.html\",                                                                // 4573\n    \"<ul class=\\\"dropdown-menu\\\" ng-style=\\\"{display: (isOpen && 'block') || 'none', top: position.top+'px', left: position.left+'px'}\\\" ng-keydown=\\\"keydown($event)\\\">\\n\" +\n    \"\t<li ng-transclude></li>\\n\" +                                                                                    // 4575\n    \"\t<li ng-if=\\\"showButtonBar\\\" style=\\\"padding:10px 9px 2px\\\">\\n\" +                                                // 4576\n    \"\t\t<span class=\\\"btn-group pull-left\\\">\\n\" +                                                                      // 4577\n    \"\t\t\t<button type=\\\"button\\\" class=\\\"btn btn-sm btn-info\\\" ng-click=\\\"select('today')\\\">{{ getText('current') }}</button>\\n\" +\n    \"\t\t\t<button type=\\\"button\\\" class=\\\"btn btn-sm btn-danger\\\" ng-click=\\\"select(null)\\\">{{ getText('clear') }}</button>\\n\" +\n    \"\t\t</span>\\n\" +                                                                                                   // 4580\n    \"\t\t<button type=\\\"button\\\" class=\\\"btn btn-sm btn-success pull-right\\\" ng-click=\\\"close()\\\">{{ getText('close') }}</button>\\n\" +\n    \"\t</li>\\n\" +                                                                                                      // 4582\n    \"</ul>\\n\" +                                                                                                       // 4583\n    \"\");                                                                                                              // 4584\n}]);                                                                                                                  // 4585\n                                                                                                                      // 4586\nangular.module(\"template/datepicker/year.html\", []).run([\"$templateCache\", function($templateCache) {                 // 4587\n  $templateCache.put(\"template/datepicker/year.html\",                                                                 // 4588\n    \"<table role=\\\"grid\\\" aria-labelledby=\\\"{{uniqueId}}-title\\\" aria-activedescendant=\\\"{{activeDateId}}\\\">\\n\" +     // 4589\n    \"  <thead>\\n\" +                                                                                                   // 4590\n    \"    <tr>\\n\" +                                                                                                    // 4591\n    \"      <th><button type=\\\"button\\\" class=\\\"btn btn-default btn-sm pull-left\\\" ng-click=\\\"move(-1)\\\" tabindex=\\\"-1\\\"><i class=\\\"glyphicon glyphicon-chevron-left\\\"></i></button></th>\\n\" +\n    \"      <th colspan=\\\"3\\\"><button id=\\\"{{uniqueId}}-title\\\" role=\\\"heading\\\" aria-live=\\\"assertive\\\" aria-atomic=\\\"true\\\" type=\\\"button\\\" class=\\\"btn btn-default btn-sm\\\" ng-click=\\\"toggleMode()\\\" ng-disabled=\\\"datepickerMode === maxMode\\\" tabindex=\\\"-1\\\" style=\\\"width:100%;\\\"><strong>{{title}}</strong></button></th>\\n\" +\n    \"      <th><button type=\\\"button\\\" class=\\\"btn btn-default btn-sm pull-right\\\" ng-click=\\\"move(1)\\\" tabindex=\\\"-1\\\"><i class=\\\"glyphicon glyphicon-chevron-right\\\"></i></button></th>\\n\" +\n    \"    </tr>\\n\" +                                                                                                   // 4595\n    \"  </thead>\\n\" +                                                                                                  // 4596\n    \"  <tbody>\\n\" +                                                                                                   // 4597\n    \"    <tr ng-repeat=\\\"row in rows track by $index\\\">\\n\" +                                                          // 4598\n    \"      <td ng-repeat=\\\"dt in row track by dt.date\\\" class=\\\"text-center\\\" role=\\\"gridcell\\\" id=\\\"{{dt.uid}}\\\" aria-disabled=\\\"{{!!dt.disabled}}\\\">\\n\" +\n    \"        <button type=\\\"button\\\" style=\\\"width:100%;\\\" class=\\\"btn btn-default\\\" ng-class=\\\"{'btn-info': dt.selected, active: isActive(dt)}\\\" ng-click=\\\"select(dt.date)\\\" ng-disabled=\\\"dt.disabled\\\" tabindex=\\\"-1\\\"><span ng-class=\\\"{'text-info': dt.current}\\\">{{dt.label}}</span></button>\\n\" +\n    \"      </td>\\n\" +                                                                                                 // 4601\n    \"    </tr>\\n\" +                                                                                                   // 4602\n    \"  </tbody>\\n\" +                                                                                                  // 4603\n    \"</table>\\n\" +                                                                                                    // 4604\n    \"\");                                                                                                              // 4605\n}]);                                                                                                                  // 4606\n                                                                                                                      // 4607\nangular.module(\"template/modal/backdrop.html\", []).run([\"$templateCache\", function($templateCache) {                  // 4608\n  $templateCache.put(\"template/modal/backdrop.html\",                                                                  // 4609\n    \"<div class=\\\"modal-backdrop\\\"\\n\" +                                                                               // 4610\n    \"     modal-animation-class=\\\"fade\\\"\\n\" +                                                                         // 4611\n    \"     ng-class=\\\"{in: animate}\\\"\\n\" +                                                                             // 4612\n    \"     ng-style=\\\"{'z-index': 1040 + (index && 1 || 0) + index*10}\\\"\\n\" +                                          // 4613\n    \"></div>\\n\" +                                                                                                     // 4614\n    \"\");                                                                                                              // 4615\n}]);                                                                                                                  // 4616\n                                                                                                                      // 4617\nangular.module(\"template/modal/window.html\", []).run([\"$templateCache\", function($templateCache) {                    // 4618\n  $templateCache.put(\"template/modal/window.html\",                                                                    // 4619\n    \"<div modal-render=\\\"{{$isRendered}}\\\" tabindex=\\\"-1\\\" role=\\\"dialog\\\" class=\\\"modal\\\"\\n\" +                       // 4620\n    \"    modal-animation-class=\\\"fade\\\"\\n\" +                                                                          // 4621\n    \"\tng-class=\\\"{in: animate}\\\" ng-style=\\\"{'z-index': 1050 + index*10, display: 'block'}\\\" ng-click=\\\"close($event)\\\">\\n\" +\n    \"    <div class=\\\"modal-dialog\\\" ng-class=\\\"size ? 'modal-' + size : ''\\\"><div class=\\\"modal-content\\\" modal-transclude></div></div>\\n\" +\n    \"</div>\\n\" +                                                                                                      // 4624\n    \"\");                                                                                                              // 4625\n}]);                                                                                                                  // 4626\n                                                                                                                      // 4627\nangular.module(\"template/pagination/pager.html\", []).run([\"$templateCache\", function($templateCache) {                // 4628\n  $templateCache.put(\"template/pagination/pager.html\",                                                                // 4629\n    \"<ul class=\\\"pager\\\">\\n\" +                                                                                        // 4630\n    \"  <li ng-class=\\\"{disabled: noPrevious(), previous: align}\\\"><a href ng-click=\\\"selectPage(page - 1, $event)\\\">{{getText('previous')}}</a></li>\\n\" +\n    \"  <li ng-class=\\\"{disabled: noNext(), next: align}\\\"><a href ng-click=\\\"selectPage(page + 1, $event)\\\">{{getText('next')}}</a></li>\\n\" +\n    \"</ul>\");                                                                                                         // 4633\n}]);                                                                                                                  // 4634\n                                                                                                                      // 4635\nangular.module(\"template/pagination/pagination.html\", []).run([\"$templateCache\", function($templateCache) {           // 4636\n  $templateCache.put(\"template/pagination/pagination.html\",                                                           // 4637\n    \"<ul class=\\\"pagination\\\">\\n\" +                                                                                   // 4638\n    \"  <li ng-if=\\\"boundaryLinks\\\" ng-class=\\\"{disabled: noPrevious()}\\\"><a href ng-click=\\\"selectPage(1, $event)\\\">{{getText('first')}}</a></li>\\n\" +\n    \"  <li ng-if=\\\"directionLinks\\\" ng-class=\\\"{disabled: noPrevious()}\\\"><a href ng-click=\\\"selectPage(page - 1, $event)\\\">{{getText('previous')}}</a></li>\\n\" +\n    \"  <li ng-repeat=\\\"page in pages track by $index\\\" ng-class=\\\"{active: page.active}\\\"><a href ng-click=\\\"selectPage(page.number, $event)\\\">{{page.text}}</a></li>\\n\" +\n    \"  <li ng-if=\\\"directionLinks\\\" ng-class=\\\"{disabled: noNext()}\\\"><a href ng-click=\\\"selectPage(page + 1, $event)\\\">{{getText('next')}}</a></li>\\n\" +\n    \"  <li ng-if=\\\"boundaryLinks\\\" ng-class=\\\"{disabled: noNext()}\\\"><a href ng-click=\\\"selectPage(totalPages, $event)\\\">{{getText('last')}}</a></li>\\n\" +\n    \"</ul>\");                                                                                                         // 4644\n}]);                                                                                                                  // 4645\n                                                                                                                      // 4646\nangular.module(\"template/tooltip/tooltip-html-popup.html\", []).run([\"$templateCache\", function($templateCache) {      // 4647\n  $templateCache.put(\"template/tooltip/tooltip-html-popup.html\",                                                      // 4648\n    \"<div class=\\\"tooltip\\\"\\n\" +                                                                                      // 4649\n    \"  tooltip-animation-class=\\\"fade\\\"\\n\" +                                                                          // 4650\n    \"  tooltip-classes\\n\" +                                                                                           // 4651\n    \"  ng-class=\\\"{ in: isOpen() }\\\">\\n\" +                                                                            // 4652\n    \"  <div class=\\\"tooltip-arrow\\\"></div>\\n\" +                                                                       // 4653\n    \"  <div class=\\\"tooltip-inner\\\" ng-bind-html=\\\"contentExp()\\\"></div>\\n\" +                                         // 4654\n    \"</div>\\n\" +                                                                                                      // 4655\n    \"\");                                                                                                              // 4656\n}]);                                                                                                                  // 4657\n                                                                                                                      // 4658\nangular.module(\"template/tooltip/tooltip-html-unsafe-popup.html\", []).run([\"$templateCache\", function($templateCache) {\n  $templateCache.put(\"template/tooltip/tooltip-html-unsafe-popup.html\",                                               // 4660\n    \"<div class=\\\"tooltip\\\"\\n\" +                                                                                      // 4661\n    \"  tooltip-animation-class=\\\"fade\\\"\\n\" +                                                                          // 4662\n    \"  tooltip-classes\\n\" +                                                                                           // 4663\n    \"  ng-class=\\\"{ in: isOpen() }\\\">\\n\" +                                                                            // 4664\n    \"  <div class=\\\"tooltip-arrow\\\"></div>\\n\" +                                                                       // 4665\n    \"  <div class=\\\"tooltip-inner\\\" bind-html-unsafe=\\\"content\\\"></div>\\n\" +                                          // 4666\n    \"</div>\\n\" +                                                                                                      // 4667\n    \"\");                                                                                                              // 4668\n}]);                                                                                                                  // 4669\n                                                                                                                      // 4670\nangular.module(\"template/tooltip/tooltip-popup.html\", []).run([\"$templateCache\", function($templateCache) {           // 4671\n  $templateCache.put(\"template/tooltip/tooltip-popup.html\",                                                           // 4672\n    \"<div class=\\\"tooltip\\\"\\n\" +                                                                                      // 4673\n    \"  tooltip-animation-class=\\\"fade\\\"\\n\" +                                                                          // 4674\n    \"  tooltip-classes\\n\" +                                                                                           // 4675\n    \"  ng-class=\\\"{ in: isOpen() }\\\">\\n\" +                                                                            // 4676\n    \"  <div class=\\\"tooltip-arrow\\\"></div>\\n\" +                                                                       // 4677\n    \"  <div class=\\\"tooltip-inner\\\" ng-bind=\\\"content\\\"></div>\\n\" +                                                   // 4678\n    \"</div>\\n\" +                                                                                                      // 4679\n    \"\");                                                                                                              // 4680\n}]);                                                                                                                  // 4681\n                                                                                                                      // 4682\nangular.module(\"template/tooltip/tooltip-template-popup.html\", []).run([\"$templateCache\", function($templateCache) {  // 4683\n  $templateCache.put(\"template/tooltip/tooltip-template-popup.html\",                                                  // 4684\n    \"<div class=\\\"tooltip\\\"\\n\" +                                                                                      // 4685\n    \"  tooltip-animation-class=\\\"fade\\\"\\n\" +                                                                          // 4686\n    \"  tooltip-classes\\n\" +                                                                                           // 4687\n    \"  ng-class=\\\"{ in: isOpen() }\\\">\\n\" +                                                                            // 4688\n    \"  <div class=\\\"tooltip-arrow\\\"></div>\\n\" +                                                                       // 4689\n    \"  <div class=\\\"tooltip-inner\\\"\\n\" +                                                                              // 4690\n    \"    tooltip-template-transclude=\\\"contentExp()\\\"\\n\" +                                                            // 4691\n    \"    tooltip-template-transclude-scope=\\\"originScope()\\\"></div>\\n\" +                                              // 4692\n    \"</div>\\n\" +                                                                                                      // 4693\n    \"\");                                                                                                              // 4694\n}]);                                                                                                                  // 4695\n                                                                                                                      // 4696\nangular.module(\"template/popover/popover-template.html\", []).run([\"$templateCache\", function($templateCache) {        // 4697\n  $templateCache.put(\"template/popover/popover-template.html\",                                                        // 4698\n    \"<div class=\\\"popover\\\"\\n\" +                                                                                      // 4699\n    \"  tooltip-animation-class=\\\"fade\\\"\\n\" +                                                                          // 4700\n    \"  tooltip-classes\\n\" +                                                                                           // 4701\n    \"  ng-class=\\\"{ in: isOpen() }\\\">\\n\" +                                                                            // 4702\n    \"  <div class=\\\"arrow\\\"></div>\\n\" +                                                                               // 4703\n    \"\\n\" +                                                                                                            // 4704\n    \"  <div class=\\\"popover-inner\\\">\\n\" +                                                                             // 4705\n    \"      <h3 class=\\\"popover-title\\\" ng-bind=\\\"title\\\" ng-if=\\\"title\\\"></h3>\\n\" +                                   // 4706\n    \"      <div class=\\\"popover-content\\\"\\n\" +                                                                        // 4707\n    \"        tooltip-template-transclude=\\\"contentExp()\\\"\\n\" +                                                        // 4708\n    \"        tooltip-template-transclude-scope=\\\"originScope()\\\"></div>\\n\" +                                          // 4709\n    \"  </div>\\n\" +                                                                                                    // 4710\n    \"</div>\\n\" +                                                                                                      // 4711\n    \"\");                                                                                                              // 4712\n}]);                                                                                                                  // 4713\n                                                                                                                      // 4714\nangular.module(\"template/popover/popover-window.html\", []).run([\"$templateCache\", function($templateCache) {          // 4715\n  $templateCache.put(\"template/popover/popover-window.html\",                                                          // 4716\n    \"<div class=\\\"popover {{placement}}\\\" ng-class=\\\"{ in: isOpen, fade: animation }\\\">\\n\" +                          // 4717\n    \"  <div class=\\\"arrow\\\"></div>\\n\" +                                                                               // 4718\n    \"\\n\" +                                                                                                            // 4719\n    \"  <div class=\\\"popover-inner\\\">\\n\" +                                                                             // 4720\n    \"      <h3 class=\\\"popover-title\\\" ng-bind=\\\"title\\\" ng-show=\\\"title\\\"></h3>\\n\" +                                 // 4721\n    \"      <div class=\\\"popover-content\\\" tooltip-template-transclude></div>\\n\" +                                     // 4722\n    \"  </div>\\n\" +                                                                                                    // 4723\n    \"</div>\\n\" +                                                                                                      // 4724\n    \"\");                                                                                                              // 4725\n}]);                                                                                                                  // 4726\n                                                                                                                      // 4727\nangular.module(\"template/popover/popover.html\", []).run([\"$templateCache\", function($templateCache) {                 // 4728\n  $templateCache.put(\"template/popover/popover.html\",                                                                 // 4729\n    \"<div class=\\\"popover\\\"\\n\" +                                                                                      // 4730\n    \"  tooltip-animation-class=\\\"fade\\\"\\n\" +                                                                          // 4731\n    \"  tooltip-classes\\n\" +                                                                                           // 4732\n    \"  ng-class=\\\"{ in: isOpen() }\\\">\\n\" +                                                                            // 4733\n    \"  <div class=\\\"arrow\\\"></div>\\n\" +                                                                               // 4734\n    \"\\n\" +                                                                                                            // 4735\n    \"  <div class=\\\"popover-inner\\\">\\n\" +                                                                             // 4736\n    \"      <h3 class=\\\"popover-title\\\" ng-bind=\\\"title\\\" ng-if=\\\"title\\\"></h3>\\n\" +                                   // 4737\n    \"      <div class=\\\"popover-content\\\" ng-bind=\\\"content\\\"></div>\\n\" +                                             // 4738\n    \"  </div>\\n\" +                                                                                                    // 4739\n    \"</div>\\n\" +                                                                                                      // 4740\n    \"\");                                                                                                              // 4741\n}]);                                                                                                                  // 4742\n                                                                                                                      // 4743\nangular.module(\"template/progressbar/bar.html\", []).run([\"$templateCache\", function($templateCache) {                 // 4744\n  $templateCache.put(\"template/progressbar/bar.html\",                                                                 // 4745\n    \"<div class=\\\"progress-bar\\\" ng-class=\\\"type && 'progress-bar-' + type\\\" role=\\\"progressbar\\\" aria-valuenow=\\\"{{value}}\\\" aria-valuemin=\\\"0\\\" aria-valuemax=\\\"{{max}}\\\" ng-style=\\\"{width: (percent < 100 ? percent : 100) + '%'}\\\" aria-valuetext=\\\"{{percent | number:0}}%\\\" ng-transclude></div>\\n\" +\n    \"\");                                                                                                              // 4747\n}]);                                                                                                                  // 4748\n                                                                                                                      // 4749\nangular.module(\"template/progressbar/progress.html\", []).run([\"$templateCache\", function($templateCache) {            // 4750\n  $templateCache.put(\"template/progressbar/progress.html\",                                                            // 4751\n    \"<div class=\\\"progress\\\" ng-transclude></div>\");                                                                  // 4752\n}]);                                                                                                                  // 4753\n                                                                                                                      // 4754\nangular.module(\"template/progressbar/progressbar.html\", []).run([\"$templateCache\", function($templateCache) {         // 4755\n  $templateCache.put(\"template/progressbar/progressbar.html\",                                                         // 4756\n    \"<div class=\\\"progress\\\">\\n\" +                                                                                    // 4757\n    \"  <div class=\\\"progress-bar\\\" ng-class=\\\"type && 'progress-bar-' + type\\\" role=\\\"progressbar\\\" aria-valuenow=\\\"{{value}}\\\" aria-valuemin=\\\"0\\\" aria-valuemax=\\\"{{max}}\\\" ng-style=\\\"{width: (percent < 100 ? percent : 100) + '%'}\\\" aria-valuetext=\\\"{{percent | number:0}}%\\\" ng-transclude></div>\\n\" +\n    \"</div>\\n\" +                                                                                                      // 4759\n    \"\");                                                                                                              // 4760\n}]);                                                                                                                  // 4761\n                                                                                                                      // 4762\nangular.module(\"template/rating/rating.html\", []).run([\"$templateCache\", function($templateCache) {                   // 4763\n  $templateCache.put(\"template/rating/rating.html\",                                                                   // 4764\n    \"<span ng-mouseleave=\\\"reset()\\\" ng-keydown=\\\"onKeydown($event)\\\" tabindex=\\\"0\\\" role=\\\"slider\\\" aria-valuemin=\\\"0\\\" aria-valuemax=\\\"{{range.length}}\\\" aria-valuenow=\\\"{{value}}\\\">\\n\" +\n    \"    <i ng-repeat=\\\"r in range track by $index\\\" ng-mouseenter=\\\"enter($index + 1)\\\" ng-click=\\\"rate($index + 1)\\\" class=\\\"glyphicon\\\" ng-class=\\\"$index < value && (r.stateOn || 'glyphicon-star') || (r.stateOff || 'glyphicon-star-empty')\\\">\\n\" +\n    \"        <span class=\\\"sr-only\\\">({{ $index < value ? '*' : ' ' }})</span>\\n\" +                                   // 4767\n    \"    </i>\\n\" +                                                                                                    // 4768\n    \"</span>\");                                                                                                       // 4769\n}]);                                                                                                                  // 4770\n                                                                                                                      // 4771\nangular.module(\"template/tabs/tab.html\", []).run([\"$templateCache\", function($templateCache) {                        // 4772\n  $templateCache.put(\"template/tabs/tab.html\",                                                                        // 4773\n    \"<li ng-class=\\\"{active: active, disabled: disabled}\\\">\\n\" +                                                      // 4774\n    \"  <a href ng-click=\\\"select()\\\" tab-heading-transclude>{{heading}}</a>\\n\" +                                      // 4775\n    \"</li>\\n\" +                                                                                                       // 4776\n    \"\");                                                                                                              // 4777\n}]);                                                                                                                  // 4778\n                                                                                                                      // 4779\nangular.module(\"template/tabs/tabset.html\", []).run([\"$templateCache\", function($templateCache) {                     // 4780\n  $templateCache.put(\"template/tabs/tabset.html\",                                                                     // 4781\n    \"<div>\\n\" +                                                                                                       // 4782\n    \"  <ul class=\\\"nav nav-{{type || 'tabs'}}\\\" ng-class=\\\"{'nav-stacked': vertical, 'nav-justified': justified}\\\" ng-transclude></ul>\\n\" +\n    \"  <div class=\\\"tab-content\\\">\\n\" +                                                                               // 4784\n    \"    <div class=\\\"tab-pane\\\" \\n\" +                                                                                // 4785\n    \"         ng-repeat=\\\"tab in tabs\\\" \\n\" +                                                                         // 4786\n    \"         ng-class=\\\"{active: tab.active}\\\"\\n\" +                                                                  // 4787\n    \"         tab-content-transclude=\\\"tab\\\">\\n\" +                                                                    // 4788\n    \"    </div>\\n\" +                                                                                                  // 4789\n    \"  </div>\\n\" +                                                                                                    // 4790\n    \"</div>\\n\" +                                                                                                      // 4791\n    \"\");                                                                                                              // 4792\n}]);                                                                                                                  // 4793\n                                                                                                                      // 4794\nangular.module(\"template/timepicker/timepicker.html\", []).run([\"$templateCache\", function($templateCache) {           // 4795\n  $templateCache.put(\"template/timepicker/timepicker.html\",                                                           // 4796\n    \"<table>\\n\" +                                                                                                     // 4797\n    \"\t<tbody>\\n\" +                                                                                                    // 4798\n    \"\t\t<tr class=\\\"text-center\\\">\\n\" +                                                                                // 4799\n    \"\t\t\t<td><a ng-click=\\\"incrementHours()\\\" class=\\\"btn btn-link\\\"><span class=\\\"glyphicon glyphicon-chevron-up\\\"></span></a></td>\\n\" +\n    \"\t\t\t<td>&nbsp;</td>\\n\" +                                                                                          // 4801\n    \"\t\t\t<td><a ng-click=\\\"incrementMinutes()\\\" class=\\\"btn btn-link\\\"><span class=\\\"glyphicon glyphicon-chevron-up\\\"></span></a></td>\\n\" +\n    \"\t\t\t<td ng-show=\\\"showMeridian\\\"></td>\\n\" +                                                                       // 4803\n    \"\t\t</tr>\\n\" +                                                                                                     // 4804\n    \"\t\t<tr>\\n\" +                                                                                                      // 4805\n    \"\t\t\t<td class=\\\"form-group\\\" ng-class=\\\"{'has-error': invalidHours}\\\">\\n\" +                                       // 4806\n    \"\t\t\t\t<input style=\\\"width:50px;\\\" type=\\\"text\\\" ng-model=\\\"hours\\\" ng-change=\\\"updateHours()\\\" class=\\\"form-control text-center\\\" ng-readonly=\\\"readonlyInput\\\" maxlength=\\\"2\\\">\\n\" +\n    \"\t\t\t</td>\\n\" +                                                                                                    // 4808\n    \"\t\t\t<td>:</td>\\n\" +                                                                                               // 4809\n    \"\t\t\t<td class=\\\"form-group\\\" ng-class=\\\"{'has-error': invalidMinutes}\\\">\\n\" +                                     // 4810\n    \"\t\t\t\t<input style=\\\"width:50px;\\\" type=\\\"text\\\" ng-model=\\\"minutes\\\" ng-change=\\\"updateMinutes()\\\" class=\\\"form-control text-center\\\" ng-readonly=\\\"readonlyInput\\\" maxlength=\\\"2\\\">\\n\" +\n    \"\t\t\t</td>\\n\" +                                                                                                    // 4812\n    \"\t\t\t<td ng-show=\\\"showMeridian\\\"><button type=\\\"button\\\" class=\\\"btn btn-default text-center\\\" ng-click=\\\"toggleMeridian()\\\">{{meridian}}</button></td>\\n\" +\n    \"\t\t</tr>\\n\" +                                                                                                     // 4814\n    \"\t\t<tr class=\\\"text-center\\\">\\n\" +                                                                                // 4815\n    \"\t\t\t<td><a ng-click=\\\"decrementHours()\\\" class=\\\"btn btn-link\\\"><span class=\\\"glyphicon glyphicon-chevron-down\\\"></span></a></td>\\n\" +\n    \"\t\t\t<td>&nbsp;</td>\\n\" +                                                                                          // 4817\n    \"\t\t\t<td><a ng-click=\\\"decrementMinutes()\\\" class=\\\"btn btn-link\\\"><span class=\\\"glyphicon glyphicon-chevron-down\\\"></span></a></td>\\n\" +\n    \"\t\t\t<td ng-show=\\\"showMeridian\\\"></td>\\n\" +                                                                       // 4819\n    \"\t\t</tr>\\n\" +                                                                                                     // 4820\n    \"\t</tbody>\\n\" +                                                                                                   // 4821\n    \"</table>\\n\" +                                                                                                    // 4822\n    \"\");                                                                                                              // 4823\n}]);                                                                                                                  // 4824\n                                                                                                                      // 4825\nangular.module(\"template/typeahead/typeahead-match.html\", []).run([\"$templateCache\", function($templateCache) {       // 4826\n  $templateCache.put(\"template/typeahead/typeahead-match.html\",                                                       // 4827\n    \"<a tabindex=\\\"-1\\\" bind-html-unsafe=\\\"match.label | typeaheadHighlight:query\\\"></a>\");                           // 4828\n}]);                                                                                                                  // 4829\n                                                                                                                      // 4830\nangular.module(\"template/typeahead/typeahead-popup.html\", []).run([\"$templateCache\", function($templateCache) {       // 4831\n  $templateCache.put(\"template/typeahead/typeahead-popup.html\",                                                       // 4832\n    \"<ul class=\\\"dropdown-menu\\\" ng-show=\\\"isOpen()\\\" ng-style=\\\"{top: position.top+'px', left: position.left+'px'}\\\" style=\\\"display: block;\\\" role=\\\"listbox\\\" aria-hidden=\\\"{{!isOpen()}}\\\">\\n\" +\n    \"    <li ng-repeat=\\\"match in matches track by $index\\\" ng-class=\\\"{active: isActive($index) }\\\" ng-mouseenter=\\\"selectActive($index)\\\" ng-click=\\\"selectMatch($index)\\\" role=\\\"option\\\" id=\\\"{{match.id}}\\\">\\n\" +\n    \"        <div typeahead-match index=\\\"$index\\\" match=\\\"match\\\" query=\\\"query\\\" template-url=\\\"templateUrl\\\"></div>\\n\" +\n    \"    </li>\\n\" +                                                                                                   // 4836\n    \"</ul>\\n\" +                                                                                                       // 4837\n    \"\");                                                                                                              // 4838\n}]);                                                                                                                  // 4839\n!angular.$$csp() && angular.element(document).find('head').prepend('<style type=\"text/css\">.ng-animate.item:not(.left):not(.right){-webkit-transition:0s ease-in-out left;transition:0s ease-in-out left}</style>');\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 4850\n}).call(this);                                                       // 4851\n                                                                     // 4852\n///////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\nPackage['angularui:angular-ui-bootstrap'] = {};\n\n})();\n","servePath":"/packages/angularui_angular-ui-bootstrap.js","sourceMap":{"version":3,"sources":["/packages/angularui_angular-ui-bootstrap/packages/angularui_angular-ui-bootstrap.js"],"names":[],"mappingsfile":"/packages/angularui_angular-ui-bootstrap.js","sourcesContent":["(function () {\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/angularui:angular-ui-bootstrap/ui-bootstrap-tpls.js                                                       //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n/*                                                                                                                    // 1\n * angular-ui-bootstrap                                                                                               // 2\n * http://angular-ui.github.io/bootstrap/                                                                             // 3\n                                                                                                                      // 4\n * Version: 0.13.0 - 2015-05-02                                                                                       // 5\n * License: MIT                                                                                                       // 6\n */                                                                                                                   // 7\nangular.module(\"ui.bootstrap\", [\"ui.bootstrap.tpls\", \"ui.bootstrap.collapse\",\"ui.bootstrap.accordion\",\"ui.bootstrap.alert\",\"ui.bootstrap.bindHtml\",\"ui.bootstrap.buttons\",\"ui.bootstrap.carousel\",\"ui.bootstrap.dateparser\",\"ui.bootstrap.position\",\"ui.bootstrap.datepicker\",\"ui.bootstrap.dropdown\",\"ui.bootstrap.modal\",\"ui.bootstrap.pagination\",\"ui.bootstrap.tooltip\",\"ui.bootstrap.popover\",\"ui.bootstrap.progressbar\",\"ui.bootstrap.rating\",\"ui.bootstrap.tabs\",\"ui.bootstrap.timepicker\",\"ui.bootstrap.transition\",\"ui.bootstrap.typeahead\"]);\nangular.module(\"ui.bootstrap.tpls\", [\"template/accordion/accordion-group.html\",\"template/accordion/accordion.html\",\"template/alert/alert.html\",\"template/carousel/carousel.html\",\"template/carousel/slide.html\",\"template/datepicker/datepicker.html\",\"template/datepicker/day.html\",\"template/datepicker/month.html\",\"template/datepicker/popup.html\",\"template/datepicker/year.html\",\"template/modal/backdrop.html\",\"template/modal/window.html\",\"template/pagination/pager.html\",\"template/pagination/pagination.html\",\"template/tooltip/tooltip-html-popup.html\",\"template/tooltip/tooltip-html-unsafe-popup.html\",\"template/tooltip/tooltip-popup.html\",\"template/tooltip/tooltip-template-popup.html\",\"template/popover/popover-template.html\",\"template/popover/popover.html\",\"template/progressbar/bar.html\",\"template/progressbar/progress.html\",\"template/progressbar/progressbar.html\",\"template/rating/rating.html\",\"template/tabs/tab.html\",\"template/tabs/tabset.html\",\"template/timepicker/timepicker.html\",\"template/typeahead/typeahead-match.html\",\"template/typeahead/typeahead-popup.html\"]);\nangular.module('ui.bootstrap.collapse', [])                                                                           // 10\n                                                                                                                      // 11\n  .directive('collapse', ['$animate', function ($animate) {                                                           // 12\n                                                                                                                      // 13\n    return {                                                                                                          // 14\n      link: function (scope, element, attrs) {                                                                        // 15\n        function expand() {                                                                                           // 16\n          element.removeClass('collapse').addClass('collapsing');                                                     // 17\n          $animate.addClass(element, 'in', {                                                                          // 18\n            to: { height: element[0].scrollHeight + 'px' }                                                            // 19\n          }).then(expandDone);                                                                                        // 20\n        }                                                                                                             // 21\n                                                                                                                      // 22\n        function expandDone() {                                                                                       // 23\n          element.removeClass('collapsing');                                                                          // 24\n          element.css({height: 'auto'});                                                                              // 25\n        }                                                                                                             // 26\n                                                                                                                      // 27\n        function collapse() {                                                                                         // 28\n          element                                                                                                     // 29\n            // IMPORTANT: The height must be set before adding \"collapsing\" class.                                    // 30\n            // Otherwise, the browser attempts to animate from height 0 (in                                           // 31\n            // collapsing class) to the given height here.                                                            // 32\n            .css({height: element[0].scrollHeight + 'px'})                                                            // 33\n            // initially all panel collapse have the collapse class, this removal                                     // 34\n            // prevents the animation from jumping to collapsed state                                                 // 35\n            .removeClass('collapse')                                                                                  // 36\n            .addClass('collapsing');                                                                                  // 37\n                                                                                                                      // 38\n          $animate.removeClass(element, 'in', {                                                                       // 39\n            to: {height: '0'}                                                                                         // 40\n          }).then(collapseDone);                                                                                      // 41\n        }                                                                                                             // 42\n                                                                                                                      // 43\n        function collapseDone() {                                                                                     // 44\n          element.css({height: '0'}); // Required so that collapse works when animation is disabled                   // 45\n          element.removeClass('collapsing');                                                                          // 46\n          element.addClass('collapse');                                                                               // 47\n        }                                                                                                             // 48\n                                                                                                                      // 49\n        scope.$watch(attrs.collapse, function (shouldCollapse) {                                                      // 50\n          if (shouldCollapse) {                                                                                       // 51\n            collapse();                                                                                               // 52\n          } else {                                                                                                    // 53\n            expand();                                                                                                 // 54\n          }                                                                                                           // 55\n        });                                                                                                           // 56\n      }                                                                                                               // 57\n    };                                                                                                                // 58\n  }]);                                                                                                                // 59\n                                                                                                                      // 60\nangular.module('ui.bootstrap.accordion', ['ui.bootstrap.collapse'])                                                   // 61\n                                                                                                                      // 62\n.constant('accordionConfig', {                                                                                        // 63\n  closeOthers: true                                                                                                   // 64\n})                                                                                                                    // 65\n                                                                                                                      // 66\n.controller('AccordionController', ['$scope', '$attrs', 'accordionConfig', function ($scope, $attrs, accordionConfig) {\n                                                                                                                      // 68\n  // This array keeps track of the accordion groups                                                                   // 69\n  this.groups = [];                                                                                                   // 70\n                                                                                                                      // 71\n  // Ensure that all the groups in this accordion are closed, unless close-others explicitly says not to              // 72\n  this.closeOthers = function(openGroup) {                                                                            // 73\n    var closeOthers = angular.isDefined($attrs.closeOthers) ? $scope.$eval($attrs.closeOthers) : accordionConfig.closeOthers;\n    if ( closeOthers ) {                                                                                              // 75\n      angular.forEach(this.groups, function (group) {                                                                 // 76\n        if ( group !== openGroup ) {                                                                                  // 77\n          group.isOpen = false;                                                                                       // 78\n        }                                                                                                             // 79\n      });                                                                                                             // 80\n    }                                                                                                                 // 81\n  };                                                                                                                  // 82\n                                                                                                                      // 83\n  // This is called from the accordion-group directive to add itself to the accordion                                 // 84\n  this.addGroup = function(groupScope) {                                                                              // 85\n    var that = this;                                                                                                  // 86\n    this.groups.push(groupScope);                                                                                     // 87\n                                                                                                                      // 88\n    groupScope.$on('$destroy', function (event) {                                                                     // 89\n      that.removeGroup(groupScope);                                                                                   // 90\n    });                                                                                                               // 91\n  };                                                                                                                  // 92\n                                                                                                                      // 93\n  // This is called from the accordion-group directive when to remove itself                                          // 94\n  this.removeGroup = function(group) {                                                                                // 95\n    var index = this.groups.indexOf(group);                                                                           // 96\n    if ( index !== -1 ) {                                                                                             // 97\n      this.groups.splice(index, 1);                                                                                   // 98\n    }                                                                                                                 // 99\n  };                                                                                                                  // 100\n                                                                                                                      // 101\n}])                                                                                                                   // 102\n                                                                                                                      // 103\n// The accordion directive simply sets up the directive controller                                                    // 104\n// and adds an accordion CSS class to itself element.                                                                 // 105\n.directive('accordion', function () {                                                                                 // 106\n  return {                                                                                                            // 107\n    restrict:'EA',                                                                                                    // 108\n    controller:'AccordionController',                                                                                 // 109\n    transclude: true,                                                                                                 // 110\n    replace: false,                                                                                                   // 111\n    templateUrl: 'template/accordion/accordion.html'                                                                  // 112\n  };                                                                                                                  // 113\n})                                                                                                                    // 114\n                                                                                                                      // 115\n// The accordion-group directive indicates a block of html that will expand and collapse in an accordion              // 116\n.directive('accordionGroup', function() {                                                                             // 117\n  return {                                                                                                            // 118\n    require:'^accordion',         // We need this directive to be inside an accordion                                 // 119\n    restrict:'EA',                                                                                                    // 120\n    transclude:true,              // It transcludes the contents of the directive into the template                   // 121\n    replace: true,                // The element containing the directive will be replaced with the template          // 122\n    templateUrl:'template/accordion/accordion-group.html',                                                            // 123\n    scope: {                                                                                                          // 124\n      heading: '@',               // Interpolate the heading attribute onto this scope                                // 125\n      isOpen: '=?',                                                                                                   // 126\n      isDisabled: '=?'                                                                                                // 127\n    },                                                                                                                // 128\n    controller: function() {                                                                                          // 129\n      this.setHeading = function(element) {                                                                           // 130\n        this.heading = element;                                                                                       // 131\n      };                                                                                                              // 132\n    },                                                                                                                // 133\n    link: function(scope, element, attrs, accordionCtrl) {                                                            // 134\n      accordionCtrl.addGroup(scope);                                                                                  // 135\n                                                                                                                      // 136\n      scope.$watch('isOpen', function(value) {                                                                        // 137\n        if ( value ) {                                                                                                // 138\n          accordionCtrl.closeOthers(scope);                                                                           // 139\n        }                                                                                                             // 140\n      });                                                                                                             // 141\n                                                                                                                      // 142\n      scope.toggleOpen = function() {                                                                                 // 143\n        if ( !scope.isDisabled ) {                                                                                    // 144\n          scope.isOpen = !scope.isOpen;                                                                               // 145\n        }                                                                                                             // 146\n      };                                                                                                              // 147\n    }                                                                                                                 // 148\n  };                                                                                                                  // 149\n})                                                                                                                    // 150\n                                                                                                                      // 151\n// Use accordion-heading below an accordion-group to provide a heading containing HTML                                // 152\n// <accordion-group>                                                                                                  // 153\n//   <accordion-heading>Heading containing HTML - <img src=\"...\"></accordion-heading>                                 // 154\n// </accordion-group>                                                                                                 // 155\n.directive('accordionHeading', function() {                                                                           // 156\n  return {                                                                                                            // 157\n    restrict: 'EA',                                                                                                   // 158\n    transclude: true,   // Grab the contents to be used as the heading                                                // 159\n    template: '',       // In effect remove this element!                                                             // 160\n    replace: true,                                                                                                    // 161\n    require: '^accordionGroup',                                                                                       // 162\n    link: function(scope, element, attr, accordionGroupCtrl, transclude) {                                            // 163\n      // Pass the heading to the accordion-group controller                                                           // 164\n      // so that it can be transcluded into the right place in the template                                           // 165\n      // [The second parameter to transclude causes the elements to be cloned so that they work in ng-repeat]         // 166\n      accordionGroupCtrl.setHeading(transclude(scope, angular.noop));                                                 // 167\n    }                                                                                                                 // 168\n  };                                                                                                                  // 169\n})                                                                                                                    // 170\n                                                                                                                      // 171\n// Use in the accordion-group template to indicate where you want the heading to be transcluded                       // 172\n// You must provide the property on the accordion-group controller that will hold the transcluded element             // 173\n// <div class=\"accordion-group\">                                                                                      // 174\n//   <div class=\"accordion-heading\" ><a ... accordion-transclude=\"heading\">...</a></div>                              // 175\n//   ...                                                                                                              // 176\n// </div>                                                                                                             // 177\n.directive('accordionTransclude', function() {                                                                        // 178\n  return {                                                                                                            // 179\n    require: '^accordionGroup',                                                                                       // 180\n    link: function(scope, element, attr, controller) {                                                                // 181\n      scope.$watch(function() { return controller[attr.accordionTransclude]; }, function(heading) {                   // 182\n        if ( heading ) {                                                                                              // 183\n          element.html('');                                                                                           // 184\n          element.append(heading);                                                                                    // 185\n        }                                                                                                             // 186\n      });                                                                                                             // 187\n    }                                                                                                                 // 188\n  };                                                                                                                  // 189\n})                                                                                                                    // 190\n                                                                                                                      // 191\n;                                                                                                                     // 192\n                                                                                                                      // 193\nangular.module('ui.bootstrap.alert', [])                                                                              // 194\n                                                                                                                      // 195\n.controller('AlertController', ['$scope', '$attrs', function ($scope, $attrs) {                                       // 196\n  $scope.closeable = 'close' in $attrs;                                                                               // 197\n  this.close = $scope.close;                                                                                          // 198\n}])                                                                                                                   // 199\n                                                                                                                      // 200\n.directive('alert', function () {                                                                                     // 201\n  return {                                                                                                            // 202\n    restrict:'EA',                                                                                                    // 203\n    controller:'AlertController',                                                                                     // 204\n    templateUrl:'template/alert/alert.html',                                                                          // 205\n    transclude:true,                                                                                                  // 206\n    replace:true,                                                                                                     // 207\n    scope: {                                                                                                          // 208\n      type: '@',                                                                                                      // 209\n      close: '&'                                                                                                      // 210\n    }                                                                                                                 // 211\n  };                                                                                                                  // 212\n})                                                                                                                    // 213\n                                                                                                                      // 214\n.directive('dismissOnTimeout', ['$timeout', function($timeout) {                                                      // 215\n  return {                                                                                                            // 216\n    require: 'alert',                                                                                                 // 217\n    link: function(scope, element, attrs, alertCtrl) {                                                                // 218\n      $timeout(function(){                                                                                            // 219\n        alertCtrl.close();                                                                                            // 220\n      }, parseInt(attrs.dismissOnTimeout, 10));                                                                       // 221\n    }                                                                                                                 // 222\n  };                                                                                                                  // 223\n}]);                                                                                                                  // 224\n                                                                                                                      // 225\nangular.module('ui.bootstrap.bindHtml', [])                                                                           // 226\n                                                                                                                      // 227\n  .directive('bindHtmlUnsafe', function () {                                                                          // 228\n    return function (scope, element, attr) {                                                                          // 229\n      element.addClass('ng-binding').data('$binding', attr.bindHtmlUnsafe);                                           // 230\n      scope.$watch(attr.bindHtmlUnsafe, function bindHtmlUnsafeWatchAction(value) {                                   // 231\n        element.html(value || '');                                                                                    // 232\n      });                                                                                                             // 233\n    };                                                                                                                // 234\n  });                                                                                                                 // 235\nangular.module('ui.bootstrap.buttons', [])                                                                            // 236\n                                                                                                                      // 237\n.constant('buttonConfig', {                                                                                           // 238\n  activeClass: 'active',                                                                                              // 239\n  toggleEvent: 'click'                                                                                                // 240\n})                                                                                                                    // 241\n                                                                                                                      // 242\n.controller('ButtonsController', ['buttonConfig', function(buttonConfig) {                                            // 243\n  this.activeClass = buttonConfig.activeClass || 'active';                                                            // 244\n  this.toggleEvent = buttonConfig.toggleEvent || 'click';                                                             // 245\n}])                                                                                                                   // 246\n                                                                                                                      // 247\n.directive('btnRadio', function () {                                                                                  // 248\n  return {                                                                                                            // 249\n    require: ['btnRadio', 'ngModel'],                                                                                 // 250\n    controller: 'ButtonsController',                                                                                  // 251\n    link: function (scope, element, attrs, ctrls) {                                                                   // 252\n      var buttonsCtrl = ctrls[0], ngModelCtrl = ctrls[1];                                                             // 253\n                                                                                                                      // 254\n      //model -> UI                                                                                                   // 255\n      ngModelCtrl.$render = function () {                                                                             // 256\n        element.toggleClass(buttonsCtrl.activeClass, angular.equals(ngModelCtrl.$modelValue, scope.$eval(attrs.btnRadio)));\n      };                                                                                                              // 258\n                                                                                                                      // 259\n      //ui->model                                                                                                     // 260\n      element.bind(buttonsCtrl.toggleEvent, function () {                                                             // 261\n        var isActive = element.hasClass(buttonsCtrl.activeClass);                                                     // 262\n                                                                                                                      // 263\n        if (!isActive || angular.isDefined(attrs.uncheckable)) {                                                      // 264\n          scope.$apply(function () {                                                                                  // 265\n            ngModelCtrl.$setViewValue(isActive ? null : scope.$eval(attrs.btnRadio));                                 // 266\n            ngModelCtrl.$render();                                                                                    // 267\n          });                                                                                                         // 268\n        }                                                                                                             // 269\n      });                                                                                                             // 270\n    }                                                                                                                 // 271\n  };                                                                                                                  // 272\n})                                                                                                                    // 273\n                                                                                                                      // 274\n.directive('btnCheckbox', function () {                                                                               // 275\n  return {                                                                                                            // 276\n    require: ['btnCheckbox', 'ngModel'],                                                                              // 277\n    controller: 'ButtonsController',                                                                                  // 278\n    link: function (scope, element, attrs, ctrls) {                                                                   // 279\n      var buttonsCtrl = ctrls[0], ngModelCtrl = ctrls[1];                                                             // 280\n                                                                                                                      // 281\n      function getTrueValue() {                                                                                       // 282\n        return getCheckboxValue(attrs.btnCheckboxTrue, true);                                                         // 283\n      }                                                                                                               // 284\n                                                                                                                      // 285\n      function getFalseValue() {                                                                                      // 286\n        return getCheckboxValue(attrs.btnCheckboxFalse, false);                                                       // 287\n      }                                                                                                               // 288\n                                                                                                                      // 289\n      function getCheckboxValue(attributeValue, defaultValue) {                                                       // 290\n        var val = scope.$eval(attributeValue);                                                                        // 291\n        return angular.isDefined(val) ? val : defaultValue;                                                           // 292\n      }                                                                                                               // 293\n                                                                                                                      // 294\n      //model -> UI                                                                                                   // 295\n      ngModelCtrl.$render = function () {                                                                             // 296\n        element.toggleClass(buttonsCtrl.activeClass, angular.equals(ngModelCtrl.$modelValue, getTrueValue()));        // 297\n      };                                                                                                              // 298\n                                                                                                                      // 299\n      //ui->model                                                                                                     // 300\n      element.bind(buttonsCtrl.toggleEvent, function () {                                                             // 301\n        scope.$apply(function () {                                                                                    // 302\n          ngModelCtrl.$setViewValue(element.hasClass(buttonsCtrl.activeClass) ? getFalseValue() : getTrueValue());    // 303\n          ngModelCtrl.$render();                                                                                      // 304\n        });                                                                                                           // 305\n      });                                                                                                             // 306\n    }                                                                                                                 // 307\n  };                                                                                                                  // 308\n});                                                                                                                   // 309\n                                                                                                                      // 310\n/**                                                                                                                   // 311\n* @ngdoc overview                                                                                                     // 312\n* @name ui.bootstrap.carousel                                                                                         // 313\n*                                                                                                                     // 314\n* @description                                                                                                        // 315\n* AngularJS version of an image carousel.                                                                             // 316\n*                                                                                                                     // 317\n*/                                                                                                                    // 318\nangular.module('ui.bootstrap.carousel', [])                                                                           // 319\n.controller('CarouselController', ['$scope', '$interval', '$animate', function ($scope, $interval, $animate) {        // 320\n  var self = this,                                                                                                    // 321\n    slides = self.slides = $scope.slides = [],                                                                        // 322\n    currentIndex = -1,                                                                                                // 323\n    currentInterval, isPlaying;                                                                                       // 324\n  self.currentSlide = null;                                                                                           // 325\n                                                                                                                      // 326\n  var destroyed = false;                                                                                              // 327\n  /* direction: \"prev\" or \"next\" */                                                                                   // 328\n  self.select = $scope.select = function(nextSlide, direction) {                                                      // 329\n    var nextIndex = self.indexOfSlide(nextSlide);                                                                     // 330\n    //Decide direction if it's not given                                                                              // 331\n    if (direction === undefined) {                                                                                    // 332\n      direction = nextIndex > self.getCurrentIndex() ? 'next' : 'prev';                                               // 333\n    }                                                                                                                 // 334\n    if (nextSlide && nextSlide !== self.currentSlide) {                                                               // 335\n      goNext();                                                                                                       // 336\n    }                                                                                                                 // 337\n    function goNext() {                                                                                               // 338\n      // Scope has been destroyed, stop here.                                                                         // 339\n      if (destroyed) { return; }                                                                                      // 340\n                                                                                                                      // 341\n      angular.extend(nextSlide, {direction: direction, active: true});                                                // 342\n      angular.extend(self.currentSlide || {}, {direction: direction, active: false});                                 // 343\n      if ($animate.enabled() && !$scope.noTransition && nextSlide.$element) {                                         // 344\n        $scope.$currentTransition = true;                                                                             // 345\n        nextSlide.$element.one('$animate:close', function closeFn() {                                                 // 346\n          $scope.$currentTransition = null;                                                                           // 347\n        });                                                                                                           // 348\n      }                                                                                                               // 349\n                                                                                                                      // 350\n      self.currentSlide = nextSlide;                                                                                  // 351\n      currentIndex = nextIndex;                                                                                       // 352\n      //every time you change slides, reset the timer                                                                 // 353\n      restartTimer();                                                                                                 // 354\n    }                                                                                                                 // 355\n  };                                                                                                                  // 356\n  $scope.$on('$destroy', function () {                                                                                // 357\n    destroyed = true;                                                                                                 // 358\n  });                                                                                                                 // 359\n                                                                                                                      // 360\n  function getSlideByIndex(index) {                                                                                   // 361\n    if (angular.isUndefined(slides[index].index)) {                                                                   // 362\n      return slides[index];                                                                                           // 363\n    }                                                                                                                 // 364\n    var i, len = slides.length;                                                                                       // 365\n    for (i = 0; i < slides.length; ++i) {                                                                             // 366\n      if (slides[i].index == index) {                                                                                 // 367\n        return slides[i];                                                                                             // 368\n      }                                                                                                               // 369\n    }                                                                                                                 // 370\n  }                                                                                                                   // 371\n                                                                                                                      // 372\n  self.getCurrentIndex = function() {                                                                                 // 373\n    if (self.currentSlide && angular.isDefined(self.currentSlide.index)) {                                            // 374\n      return +self.currentSlide.index;                                                                                // 375\n    }                                                                                                                 // 376\n    return currentIndex;                                                                                              // 377\n  };                                                                                                                  // 378\n                                                                                                                      // 379\n  /* Allow outside people to call indexOf on slides array */                                                          // 380\n  self.indexOfSlide = function(slide) {                                                                               // 381\n    return angular.isDefined(slide.index) ? +slide.index : slides.indexOf(slide);                                     // 382\n  };                                                                                                                  // 383\n                                                                                                                      // 384\n  $scope.next = function() {                                                                                          // 385\n    var newIndex = (self.getCurrentIndex() + 1) % slides.length;                                                      // 386\n                                                                                                                      // 387\n    //Prevent this user-triggered transition from occurring if there is already one in progress                       // 388\n    if (!$scope.$currentTransition) {                                                                                 // 389\n      return self.select(getSlideByIndex(newIndex), 'next');                                                          // 390\n    }                                                                                                                 // 391\n  };                                                                                                                  // 392\n                                                                                                                      // 393\n  $scope.prev = function() {                                                                                          // 394\n    var newIndex = self.getCurrentIndex() - 1 < 0 ? slides.length - 1 : self.getCurrentIndex() - 1;                   // 395\n                                                                                                                      // 396\n    //Prevent this user-triggered transition from occurring if there is already one in progress                       // 397\n    if (!$scope.$currentTransition) {                                                                                 // 398\n      return self.select(getSlideByIndex(newIndex), 'prev');                                                          // 399\n    }                                                                                                                 // 400\n  };                                                                                                                  // 401\n                                                                                                                      // 402\n  $scope.isActive = function(slide) {                                                                                 // 403\n     return self.currentSlide === slide;                                                                              // 404\n  };                                                                                                                  // 405\n                                                                                                                      // 406\n  $scope.$watch('interval', restartTimer);                                                                            // 407\n  $scope.$on('$destroy', resetTimer);                                                                                 // 408\n                                                                                                                      // 409\n  function restartTimer() {                                                                                           // 410\n    resetTimer();                                                                                                     // 411\n    var interval = +$scope.interval;                                                                                  // 412\n    if (!isNaN(interval) && interval > 0) {                                                                           // 413\n      currentInterval = $interval(timerFn, interval);                                                                 // 414\n    }                                                                                                                 // 415\n  }                                                                                                                   // 416\n                                                                                                                      // 417\n  function resetTimer() {                                                                                             // 418\n    if (currentInterval) {                                                                                            // 419\n      $interval.cancel(currentInterval);                                                                              // 420\n      currentInterval = null;                                                                                         // 421\n    }                                                                                                                 // 422\n  }                                                                                                                   // 423\n                                                                                                                      // 424\n  function timerFn() {                                                                                                // 425\n    var interval = +$scope.interval;                                                                                  // 426\n    if (isPlaying && !isNaN(interval) && interval > 0) {                                                              // 427\n      $scope.next();                                                                                                  // 428\n    } else {                                                                                                          // 429\n      $scope.pause();                                                                                                 // 430\n    }                                                                                                                 // 431\n  }                                                                                                                   // 432\n                                                                                                                      // 433\n  $scope.play = function() {                                                                                          // 434\n    if (!isPlaying) {                                                                                                 // 435\n      isPlaying = true;                                                                                               // 436\n      restartTimer();                                                                                                 // 437\n    }                                                                                                                 // 438\n  };                                                                                                                  // 439\n  $scope.pause = function() {                                                                                         // 440\n    if (!$scope.noPause) {                                                                                            // 441\n      isPlaying = false;                                                                                              // 442\n      resetTimer();                                                                                                   // 443\n    }                                                                                                                 // 444\n  };                                                                                                                  // 445\n                                                                                                                      // 446\n  self.addSlide = function(slide, element) {                                                                          // 447\n    slide.$element = element;                                                                                         // 448\n    slides.push(slide);                                                                                               // 449\n    //if this is the first slide or the slide is set to active, select it                                             // 450\n    if(slides.length === 1 || slide.active) {                                                                         // 451\n      self.select(slides[slides.length-1]);                                                                           // 452\n      if (slides.length == 1) {                                                                                       // 453\n        $scope.play();                                                                                                // 454\n      }                                                                                                               // 455\n    } else {                                                                                                          // 456\n      slide.active = false;                                                                                           // 457\n    }                                                                                                                 // 458\n  };                                                                                                                  // 459\n                                                                                                                      // 460\n  self.removeSlide = function(slide) {                                                                                // 461\n    if (angular.isDefined(slide.index)) {                                                                             // 462\n      slides.sort(function(a, b) {                                                                                    // 463\n        return +a.index > +b.index;                                                                                   // 464\n      });                                                                                                             // 465\n    }                                                                                                                 // 466\n    //get the index of the slide inside the carousel                                                                  // 467\n    var index = slides.indexOf(slide);                                                                                // 468\n    slides.splice(index, 1);                                                                                          // 469\n    if (slides.length > 0 && slide.active) {                                                                          // 470\n      if (index >= slides.length) {                                                                                   // 471\n        self.select(slides[index-1]);                                                                                 // 472\n      } else {                                                                                                        // 473\n        self.select(slides[index]);                                                                                   // 474\n      }                                                                                                               // 475\n    } else if (currentIndex > index) {                                                                                // 476\n      currentIndex--;                                                                                                 // 477\n    }                                                                                                                 // 478\n  };                                                                                                                  // 479\n                                                                                                                      // 480\n}])                                                                                                                   // 481\n                                                                                                                      // 482\n/**                                                                                                                   // 483\n * @ngdoc directive                                                                                                   // 484\n * @name ui.bootstrap.carousel.directive:carousel                                                                     // 485\n * @restrict EA                                                                                                       // 486\n *                                                                                                                    // 487\n * @description                                                                                                       // 488\n * Carousel is the outer container for a set of image 'slides' to showcase.                                           // 489\n *                                                                                                                    // 490\n * @param {number=} interval The time, in milliseconds, that it will take the carousel to go to the next slide.       // 491\n * @param {boolean=} noTransition Whether to disable transitions on the carousel.                                     // 492\n * @param {boolean=} noPause Whether to disable pausing on the carousel (by default, the carousel interval pauses on hover).\n *                                                                                                                    // 494\n * @example                                                                                                           // 495\n<example module=\"ui.bootstrap\">                                                                                       // 496\n  <file name=\"index.html\">                                                                                            // 497\n    <carousel>                                                                                                        // 498\n      <slide>                                                                                                         // 499\n        <img src=\"http://placekitten.com/150/150\" style=\"margin:auto;\">                                               // 500\n        <div class=\"carousel-caption\">                                                                                // 501\n          <p>Beautiful!</p>                                                                                           // 502\n        </div>                                                                                                        // 503\n      </slide>                                                                                                        // 504\n      <slide>                                                                                                         // 505\n        <img src=\"http://placekitten.com/100/150\" style=\"margin:auto;\">                                               // 506\n        <div class=\"carousel-caption\">                                                                                // 507\n          <p>D'aww!</p>                                                                                               // 508\n        </div>                                                                                                        // 509\n      </slide>                                                                                                        // 510\n    </carousel>                                                                                                       // 511\n  </file>                                                                                                             // 512\n  <file name=\"demo.css\">                                                                                              // 513\n    .carousel-indicators {                                                                                            // 514\n      top: auto;                                                                                                      // 515\n      bottom: 15px;                                                                                                   // 516\n    }                                                                                                                 // 517\n  </file>                                                                                                             // 518\n</example>                                                                                                            // 519\n */                                                                                                                   // 520\n.directive('carousel', [function() {                                                                                  // 521\n  return {                                                                                                            // 522\n    restrict: 'EA',                                                                                                   // 523\n    transclude: true,                                                                                                 // 524\n    replace: true,                                                                                                    // 525\n    controller: 'CarouselController',                                                                                 // 526\n    require: 'carousel',                                                                                              // 527\n    templateUrl: 'template/carousel/carousel.html',                                                                   // 528\n    scope: {                                                                                                          // 529\n      interval: '=',                                                                                                  // 530\n      noTransition: '=',                                                                                              // 531\n      noPause: '='                                                                                                    // 532\n    }                                                                                                                 // 533\n  };                                                                                                                  // 534\n}])                                                                                                                   // 535\n                                                                                                                      // 536\n/**                                                                                                                   // 537\n * @ngdoc directive                                                                                                   // 538\n * @name ui.bootstrap.carousel.directive:slide                                                                        // 539\n * @restrict EA                                                                                                       // 540\n *                                                                                                                    // 541\n * @description                                                                                                       // 542\n * Creates a slide inside a {@link ui.bootstrap.carousel.directive:carousel carousel}.  Must be placed as a child of a carousel element.\n *                                                                                                                    // 544\n * @param {boolean=} active Model binding, whether or not this slide is currently active.                             // 545\n * @param {number=} index The index of the slide. The slides will be sorted by this parameter.                        // 546\n *                                                                                                                    // 547\n * @example                                                                                                           // 548\n<example module=\"ui.bootstrap\">                                                                                       // 549\n  <file name=\"index.html\">                                                                                            // 550\n<div ng-controller=\"CarouselDemoCtrl\">                                                                                // 551\n  <carousel>                                                                                                          // 552\n    <slide ng-repeat=\"slide in slides\" active=\"slide.active\" index=\"$index\">                                          // 553\n      <img ng-src=\"{{slide.image}}\" style=\"margin:auto;\">                                                             // 554\n      <div class=\"carousel-caption\">                                                                                  // 555\n        <h4>Slide {{$index}}</h4>                                                                                     // 556\n        <p>{{slide.text}}</p>                                                                                         // 557\n      </div>                                                                                                          // 558\n    </slide>                                                                                                          // 559\n  </carousel>                                                                                                         // 560\n  Interval, in milliseconds: <input type=\"number\" ng-model=\"myInterval\">                                              // 561\n  <br />Enter a negative number to stop the interval.                                                                 // 562\n</div>                                                                                                                // 563\n  </file>                                                                                                             // 564\n  <file name=\"script.js\">                                                                                             // 565\nfunction CarouselDemoCtrl($scope) {                                                                                   // 566\n  $scope.myInterval = 5000;                                                                                           // 567\n}                                                                                                                     // 568\n  </file>                                                                                                             // 569\n  <file name=\"demo.css\">                                                                                              // 570\n    .carousel-indicators {                                                                                            // 571\n      top: auto;                                                                                                      // 572\n      bottom: 15px;                                                                                                   // 573\n    }                                                                                                                 // 574\n  </file>                                                                                                             // 575\n</example>                                                                                                            // 576\n*/                                                                                                                    // 577\n                                                                                                                      // 578\n.directive('slide', function() {                                                                                      // 579\n  return {                                                                                                            // 580\n    require: '^carousel',                                                                                             // 581\n    restrict: 'EA',                                                                                                   // 582\n    transclude: true,                                                                                                 // 583\n    replace: true,                                                                                                    // 584\n    templateUrl: 'template/carousel/slide.html',                                                                      // 585\n    scope: {                                                                                                          // 586\n      active: '=?',                                                                                                   // 587\n      index: '=?'                                                                                                     // 588\n    },                                                                                                                // 589\n    link: function (scope, element, attrs, carouselCtrl) {                                                            // 590\n      carouselCtrl.addSlide(scope, element);                                                                          // 591\n      //when the scope is destroyed then remove the slide from the current slides array                               // 592\n      scope.$on('$destroy', function() {                                                                              // 593\n        carouselCtrl.removeSlide(scope);                                                                              // 594\n      });                                                                                                             // 595\n                                                                                                                      // 596\n      scope.$watch('active', function(active) {                                                                       // 597\n        if (active) {                                                                                                 // 598\n          carouselCtrl.select(scope);                                                                                 // 599\n        }                                                                                                             // 600\n      });                                                                                                             // 601\n    }                                                                                                                 // 602\n  };                                                                                                                  // 603\n})                                                                                                                    // 604\n                                                                                                                      // 605\n.animation('.item', [                                                                                                 // 606\n         '$animate',                                                                                                  // 607\nfunction ($animate) {                                                                                                 // 608\n  return {                                                                                                            // 609\n    beforeAddClass: function (element, className, done) {                                                             // 610\n      // Due to transclusion, noTransition property is on parent's scope                                              // 611\n      if (className == 'active' && element.parent() &&                                                                // 612\n          !element.parent().scope().noTransition) {                                                                   // 613\n        var stopped = false;                                                                                          // 614\n        var direction = element.isolateScope().direction;                                                             // 615\n        var directionClass = direction == 'next' ? 'left' : 'right';                                                  // 616\n        element.addClass(direction);                                                                                  // 617\n        $animate.addClass(element, directionClass).then(function () {                                                 // 618\n          if (!stopped) {                                                                                             // 619\n            element.removeClass(directionClass + ' ' + direction);                                                    // 620\n          }                                                                                                           // 621\n          done();                                                                                                     // 622\n        });                                                                                                           // 623\n                                                                                                                      // 624\n        return function () {                                                                                          // 625\n          stopped = true;                                                                                             // 626\n        };                                                                                                            // 627\n      }                                                                                                               // 628\n      done();                                                                                                         // 629\n    },                                                                                                                // 630\n    beforeRemoveClass: function (element, className, done) {                                                          // 631\n      // Due to transclusion, noTransition property is on parent's scope                                              // 632\n      if (className == 'active' && element.parent() &&                                                                // 633\n          !element.parent().scope().noTransition) {                                                                   // 634\n        var stopped = false;                                                                                          // 635\n        var direction = element.isolateScope().direction;                                                             // 636\n        var directionClass = direction == 'next' ? 'left' : 'right';                                                  // 637\n        $animate.addClass(element, directionClass).then(function () {                                                 // 638\n          if (!stopped) {                                                                                             // 639\n            element.removeClass(directionClass);                                                                      // 640\n          }                                                                                                           // 641\n          done();                                                                                                     // 642\n        });                                                                                                           // 643\n        return function () {                                                                                          // 644\n          stopped = true;                                                                                             // 645\n        };                                                                                                            // 646\n      }                                                                                                               // 647\n      done();                                                                                                         // 648\n    }                                                                                                                 // 649\n  };                                                                                                                  // 650\n                                                                                                                      // 651\n}])                                                                                                                   // 652\n                                                                                                                      // 653\n                                                                                                                      // 654\n;                                                                                                                     // 655\n                                                                                                                      // 656\nangular.module('ui.bootstrap.dateparser', [])                                                                         // 657\n                                                                                                                      // 658\n.service('dateParser', ['$locale', 'orderByFilter', function($locale, orderByFilter) {                                // 659\n  // Pulled from https://github.com/mbostock/d3/blob/master/src/format/requote.js                                     // 660\n  var SPECIAL_CHARACTERS_REGEXP = /[\\\\\\^\\$\\*\\+\\?\\|\\[\\]\\(\\)\\.\\{\\}]/g;                                                  // 661\n                                                                                                                      // 662\n  this.parsers = {};                                                                                                  // 663\n                                                                                                                      // 664\n  var formatCodeToRegex = {                                                                                           // 665\n    'yyyy': {                                                                                                         // 666\n      regex: '\\\\d{4}',                                                                                                // 667\n      apply: function(value) { this.year = +value; }                                                                  // 668\n    },                                                                                                                // 669\n    'yy': {                                                                                                           // 670\n      regex: '\\\\d{2}',                                                                                                // 671\n      apply: function(value) { this.year = +value + 2000; }                                                           // 672\n    },                                                                                                                // 673\n    'y': {                                                                                                            // 674\n      regex: '\\\\d{1,4}',                                                                                              // 675\n      apply: function(value) { this.year = +value; }                                                                  // 676\n    },                                                                                                                // 677\n    'MMMM': {                                                                                                         // 678\n      regex: $locale.DATETIME_FORMATS.MONTH.join('|'),                                                                // 679\n      apply: function(value) { this.month = $locale.DATETIME_FORMATS.MONTH.indexOf(value); }                          // 680\n    },                                                                                                                // 681\n    'MMM': {                                                                                                          // 682\n      regex: $locale.DATETIME_FORMATS.SHORTMONTH.join('|'),                                                           // 683\n      apply: function(value) { this.month = $locale.DATETIME_FORMATS.SHORTMONTH.indexOf(value); }                     // 684\n    },                                                                                                                // 685\n    'MM': {                                                                                                           // 686\n      regex: '0[1-9]|1[0-2]',                                                                                         // 687\n      apply: function(value) { this.month = value - 1; }                                                              // 688\n    },                                                                                                                // 689\n    'M': {                                                                                                            // 690\n      regex: '[1-9]|1[0-2]',                                                                                          // 691\n      apply: function(value) { this.month = value - 1; }                                                              // 692\n    },                                                                                                                // 693\n    'dd': {                                                                                                           // 694\n      regex: '[0-2][0-9]{1}|3[0-1]{1}',                                                                               // 695\n      apply: function(value) { this.date = +value; }                                                                  // 696\n    },                                                                                                                // 697\n    'd': {                                                                                                            // 698\n      regex: '[1-2]?[0-9]{1}|3[0-1]{1}',                                                                              // 699\n      apply: function(value) { this.date = +value; }                                                                  // 700\n    },                                                                                                                // 701\n    'EEEE': {                                                                                                         // 702\n      regex: $locale.DATETIME_FORMATS.DAY.join('|')                                                                   // 703\n    },                                                                                                                // 704\n    'EEE': {                                                                                                          // 705\n      regex: $locale.DATETIME_FORMATS.SHORTDAY.join('|')                                                              // 706\n    },                                                                                                                // 707\n    'HH': {                                                                                                           // 708\n      regex: '(?:0|1)[0-9]|2[0-3]',                                                                                   // 709\n      apply: function(value) { this.hours = +value; }                                                                 // 710\n    },                                                                                                                // 711\n    'H': {                                                                                                            // 712\n      regex: '1?[0-9]|2[0-3]',                                                                                        // 713\n      apply: function(value) { this.hours = +value; }                                                                 // 714\n    },                                                                                                                // 715\n    'mm': {                                                                                                           // 716\n      regex: '[0-5][0-9]',                                                                                            // 717\n      apply: function(value) { this.minutes = +value; }                                                               // 718\n    },                                                                                                                // 719\n    'm': {                                                                                                            // 720\n      regex: '[0-9]|[1-5][0-9]',                                                                                      // 721\n      apply: function(value) { this.minutes = +value; }                                                               // 722\n    },                                                                                                                // 723\n    'sss': {                                                                                                          // 724\n      regex: '[0-9][0-9][0-9]',                                                                                       // 725\n      apply: function(value) { this.milliseconds = +value; }                                                          // 726\n    },                                                                                                                // 727\n    'ss': {                                                                                                           // 728\n      regex: '[0-5][0-9]',                                                                                            // 729\n      apply: function(value) { this.seconds = +value; }                                                               // 730\n    },                                                                                                                // 731\n    's': {                                                                                                            // 732\n      regex: '[0-9]|[1-5][0-9]',                                                                                      // 733\n      apply: function(value) { this.seconds = +value; }                                                               // 734\n    }                                                                                                                 // 735\n  };                                                                                                                  // 736\n                                                                                                                      // 737\n  function createParser(format) {                                                                                     // 738\n    var map = [], regex = format.split('');                                                                           // 739\n                                                                                                                      // 740\n    angular.forEach(formatCodeToRegex, function(data, code) {                                                         // 741\n      var index = format.indexOf(code);                                                                               // 742\n                                                                                                                      // 743\n      if (index > -1) {                                                                                               // 744\n        format = format.split('');                                                                                    // 745\n                                                                                                                      // 746\n        regex[index] = '(' + data.regex + ')';                                                                        // 747\n        format[index] = '$'; // Custom symbol to define consumed part of format                                       // 748\n        for (var i = index + 1, n = index + code.length; i < n; i++) {                                                // 749\n          regex[i] = '';                                                                                              // 750\n          format[i] = '$';                                                                                            // 751\n        }                                                                                                             // 752\n        format = format.join('');                                                                                     // 753\n                                                                                                                      // 754\n        map.push({ index: index, apply: data.apply });                                                                // 755\n      }                                                                                                               // 756\n    });                                                                                                               // 757\n                                                                                                                      // 758\n    return {                                                                                                          // 759\n      regex: new RegExp('^' + regex.join('') + '$'),                                                                  // 760\n      map: orderByFilter(map, 'index')                                                                                // 761\n    };                                                                                                                // 762\n  }                                                                                                                   // 763\n                                                                                                                      // 764\n  this.parse = function(input, format, baseDate) {                                                                    // 765\n    if ( !angular.isString(input) || !format ) {                                                                      // 766\n      return input;                                                                                                   // 767\n    }                                                                                                                 // 768\n                                                                                                                      // 769\n    format = $locale.DATETIME_FORMATS[format] || format;                                                              // 770\n    format = format.replace(SPECIAL_CHARACTERS_REGEXP, '\\\\$&');                                                       // 771\n                                                                                                                      // 772\n    if ( !this.parsers[format] ) {                                                                                    // 773\n      this.parsers[format] = createParser(format);                                                                    // 774\n    }                                                                                                                 // 775\n                                                                                                                      // 776\n    var parser = this.parsers[format],                                                                                // 777\n        regex = parser.regex,                                                                                         // 778\n        map = parser.map,                                                                                             // 779\n        results = input.match(regex);                                                                                 // 780\n                                                                                                                      // 781\n    if ( results && results.length ) {                                                                                // 782\n      var fields, dt;                                                                                                 // 783\n      if (baseDate) {                                                                                                 // 784\n        fields = {                                                                                                    // 785\n          year: baseDate.getFullYear(),                                                                               // 786\n          month: baseDate.getMonth(),                                                                                 // 787\n          date: baseDate.getDate(),                                                                                   // 788\n          hours: baseDate.getHours(),                                                                                 // 789\n          minutes: baseDate.getMinutes(),                                                                             // 790\n          seconds: baseDate.getSeconds(),                                                                             // 791\n          milliseconds: baseDate.getMilliseconds()                                                                    // 792\n        };                                                                                                            // 793\n      } else {                                                                                                        // 794\n        fields = { year: 1900, month: 0, date: 1, hours: 0, minutes: 0, seconds: 0, milliseconds: 0 };                // 795\n      }                                                                                                               // 796\n                                                                                                                      // 797\n      for( var i = 1, n = results.length; i < n; i++ ) {                                                              // 798\n        var mapper = map[i-1];                                                                                        // 799\n        if ( mapper.apply ) {                                                                                         // 800\n          mapper.apply.call(fields, results[i]);                                                                      // 801\n        }                                                                                                             // 802\n      }                                                                                                               // 803\n                                                                                                                      // 804\n      if ( isValid(fields.year, fields.month, fields.date) ) {                                                        // 805\n        dt = new Date(fields.year, fields.month, fields.date, fields.hours, fields.minutes, fields.seconds,           // 806\n          fields.milliseconds || 0);                                                                                  // 807\n      }                                                                                                               // 808\n                                                                                                                      // 809\n      return dt;                                                                                                      // 810\n    }                                                                                                                 // 811\n  };                                                                                                                  // 812\n                                                                                                                      // 813\n  // Check if date is valid for specific month (and year for February).                                               // 814\n  // Month: 0 = Jan, 1 = Feb, etc                                                                                     // 815\n  function isValid(year, month, date) {                                                                               // 816\n    if (date < 1) {                                                                                                   // 817\n      return false;                                                                                                   // 818\n    }                                                                                                                 // 819\n                                                                                                                      // 820\n    if ( month === 1 && date > 28) {                                                                                  // 821\n        return date === 29 && ((year % 4 === 0 && year % 100 !== 0) || year % 400 === 0);                             // 822\n    }                                                                                                                 // 823\n                                                                                                                      // 824\n    if ( month === 3 || month === 5 || month === 8 || month === 10) {                                                 // 825\n        return date < 31;                                                                                             // 826\n    }                                                                                                                 // 827\n                                                                                                                      // 828\n    return true;                                                                                                      // 829\n  }                                                                                                                   // 830\n}]);                                                                                                                  // 831\n                                                                                                                      // 832\nangular.module('ui.bootstrap.position', [])                                                                           // 833\n                                                                                                                      // 834\n/**                                                                                                                   // 835\n * A set of utility methods that can be use to retrieve position of DOM elements.                                     // 836\n * It is meant to be used where we need to absolute-position DOM elements in                                          // 837\n * relation to other, existing elements (this is the case for tooltips, popovers,                                     // 838\n * typeahead suggestions etc.).                                                                                       // 839\n */                                                                                                                   // 840\n  .factory('$position', ['$document', '$window', function ($document, $window) {                                      // 841\n                                                                                                                      // 842\n    function getStyle(el, cssprop) {                                                                                  // 843\n      if (el.currentStyle) { //IE                                                                                     // 844\n        return el.currentStyle[cssprop];                                                                              // 845\n      } else if ($window.getComputedStyle) {                                                                          // 846\n        return $window.getComputedStyle(el)[cssprop];                                                                 // 847\n      }                                                                                                               // 848\n      // finally try and get inline style                                                                             // 849\n      return el.style[cssprop];                                                                                       // 850\n    }                                                                                                                 // 851\n                                                                                                                      // 852\n    /**                                                                                                               // 853\n     * Checks if a given element is statically positioned                                                             // 854\n     * @param element - raw DOM element                                                                               // 855\n     */                                                                                                               // 856\n    function isStaticPositioned(element) {                                                                            // 857\n      return (getStyle(element, 'position') || 'static' ) === 'static';                                               // 858\n    }                                                                                                                 // 859\n                                                                                                                      // 860\n    /**                                                                                                               // 861\n     * returns the closest, non-statically positioned parentOffset of a given element                                 // 862\n     * @param element                                                                                                 // 863\n     */                                                                                                               // 864\n    var parentOffsetEl = function (element) {                                                                         // 865\n      var docDomEl = $document[0];                                                                                    // 866\n      var offsetParent = element.offsetParent || docDomEl;                                                            // 867\n      while (offsetParent && offsetParent !== docDomEl && isStaticPositioned(offsetParent) ) {                        // 868\n        offsetParent = offsetParent.offsetParent;                                                                     // 869\n      }                                                                                                               // 870\n      return offsetParent || docDomEl;                                                                                // 871\n    };                                                                                                                // 872\n                                                                                                                      // 873\n    return {                                                                                                          // 874\n      /**                                                                                                             // 875\n       * Provides read-only equivalent of jQuery's position function:                                                 // 876\n       * http://api.jquery.com/position/                                                                              // 877\n       */                                                                                                             // 878\n      position: function (element) {                                                                                  // 879\n        var elBCR = this.offset(element);                                                                             // 880\n        var offsetParentBCR = { top: 0, left: 0 };                                                                    // 881\n        var offsetParentEl = parentOffsetEl(element[0]);                                                              // 882\n        if (offsetParentEl != $document[0]) {                                                                         // 883\n          offsetParentBCR = this.offset(angular.element(offsetParentEl));                                             // 884\n          offsetParentBCR.top += offsetParentEl.clientTop - offsetParentEl.scrollTop;                                 // 885\n          offsetParentBCR.left += offsetParentEl.clientLeft - offsetParentEl.scrollLeft;                              // 886\n        }                                                                                                             // 887\n                                                                                                                      // 888\n        var boundingClientRect = element[0].getBoundingClientRect();                                                  // 889\n        return {                                                                                                      // 890\n          width: boundingClientRect.width || element.prop('offsetWidth'),                                             // 891\n          height: boundingClientRect.height || element.prop('offsetHeight'),                                          // 892\n          top: elBCR.top - offsetParentBCR.top,                                                                       // 893\n          left: elBCR.left - offsetParentBCR.left                                                                     // 894\n        };                                                                                                            // 895\n      },                                                                                                              // 896\n                                                                                                                      // 897\n      /**                                                                                                             // 898\n       * Provides read-only equivalent of jQuery's offset function:                                                   // 899\n       * http://api.jquery.com/offset/                                                                                // 900\n       */                                                                                                             // 901\n      offset: function (element) {                                                                                    // 902\n        var boundingClientRect = element[0].getBoundingClientRect();                                                  // 903\n        return {                                                                                                      // 904\n          width: boundingClientRect.width || element.prop('offsetWidth'),                                             // 905\n          height: boundingClientRect.height || element.prop('offsetHeight'),                                          // 906\n          top: boundingClientRect.top + ($window.pageYOffset || $document[0].documentElement.scrollTop),              // 907\n          left: boundingClientRect.left + ($window.pageXOffset || $document[0].documentElement.scrollLeft)            // 908\n        };                                                                                                            // 909\n      },                                                                                                              // 910\n                                                                                                                      // 911\n      /**                                                                                                             // 912\n       * Provides coordinates for the targetEl in relation to hostEl                                                  // 913\n       */                                                                                                             // 914\n      positionElements: function (hostEl, targetEl, positionStr, appendToBody) {                                      // 915\n                                                                                                                      // 916\n        var positionStrParts = positionStr.split('-');                                                                // 917\n        var pos0 = positionStrParts[0], pos1 = positionStrParts[1] || 'center';                                       // 918\n                                                                                                                      // 919\n        var hostElPos,                                                                                                // 920\n          targetElWidth,                                                                                              // 921\n          targetElHeight,                                                                                             // 922\n          targetElPos;                                                                                                // 923\n                                                                                                                      // 924\n        hostElPos = appendToBody ? this.offset(hostEl) : this.position(hostEl);                                       // 925\n                                                                                                                      // 926\n        targetElWidth = targetEl.prop('offsetWidth');                                                                 // 927\n        targetElHeight = targetEl.prop('offsetHeight');                                                               // 928\n                                                                                                                      // 929\n        var shiftWidth = {                                                                                            // 930\n          center: function () {                                                                                       // 931\n            return hostElPos.left + hostElPos.width / 2 - targetElWidth / 2;                                          // 932\n          },                                                                                                          // 933\n          left: function () {                                                                                         // 934\n            return hostElPos.left;                                                                                    // 935\n          },                                                                                                          // 936\n          right: function () {                                                                                        // 937\n            return hostElPos.left + hostElPos.width;                                                                  // 938\n          }                                                                                                           // 939\n        };                                                                                                            // 940\n                                                                                                                      // 941\n        var shiftHeight = {                                                                                           // 942\n          center: function () {                                                                                       // 943\n            return hostElPos.top + hostElPos.height / 2 - targetElHeight / 2;                                         // 944\n          },                                                                                                          // 945\n          top: function () {                                                                                          // 946\n            return hostElPos.top;                                                                                     // 947\n          },                                                                                                          // 948\n          bottom: function () {                                                                                       // 949\n            return hostElPos.top + hostElPos.height;                                                                  // 950\n          }                                                                                                           // 951\n        };                                                                                                            // 952\n                                                                                                                      // 953\n        switch (pos0) {                                                                                               // 954\n          case 'right':                                                                                               // 955\n            targetElPos = {                                                                                           // 956\n              top: shiftHeight[pos1](),                                                                               // 957\n              left: shiftWidth[pos0]()                                                                                // 958\n            };                                                                                                        // 959\n            break;                                                                                                    // 960\n          case 'left':                                                                                                // 961\n            targetElPos = {                                                                                           // 962\n              top: shiftHeight[pos1](),                                                                               // 963\n              left: hostElPos.left - targetElWidth                                                                    // 964\n            };                                                                                                        // 965\n            break;                                                                                                    // 966\n          case 'bottom':                                                                                              // 967\n            targetElPos = {                                                                                           // 968\n              top: shiftHeight[pos0](),                                                                               // 969\n              left: shiftWidth[pos1]()                                                                                // 970\n            };                                                                                                        // 971\n            break;                                                                                                    // 972\n          default:                                                                                                    // 973\n            targetElPos = {                                                                                           // 974\n              top: hostElPos.top - targetElHeight,                                                                    // 975\n              left: shiftWidth[pos1]()                                                                                // 976\n            };                                                                                                        // 977\n            break;                                                                                                    // 978\n        }                                                                                                             // 979\n                                                                                                                      // 980\n        return targetElPos;                                                                                           // 981\n      }                                                                                                               // 982\n    };                                                                                                                // 983\n  }]);                                                                                                                // 984\n                                                                                                                      // 985\nangular.module('ui.bootstrap.datepicker', ['ui.bootstrap.dateparser', 'ui.bootstrap.position'])                       // 986\n                                                                                                                      // 987\n.constant('datepickerConfig', {                                                                                       // 988\n  formatDay: 'dd',                                                                                                    // 989\n  formatMonth: 'MMMM',                                                                                                // 990\n  formatYear: 'yyyy',                                                                                                 // 991\n  formatDayHeader: 'EEE',                                                                                             // 992\n  formatDayTitle: 'MMMM yyyy',                                                                                        // 993\n  formatMonthTitle: 'yyyy',                                                                                           // 994\n  datepickerMode: 'day',                                                                                              // 995\n  minMode: 'day',                                                                                                     // 996\n  maxMode: 'year',                                                                                                    // 997\n  showWeeks: true,                                                                                                    // 998\n  startingDay: 0,                                                                                                     // 999\n  yearRange: 20,                                                                                                      // 1000\n  minDate: null,                                                                                                      // 1001\n  maxDate: null,                                                                                                      // 1002\n  shortcutPropagation: false                                                                                          // 1003\n})                                                                                                                    // 1004\n                                                                                                                      // 1005\n.controller('DatepickerController', ['$scope', '$attrs', '$parse', '$interpolate', '$timeout', '$log', 'dateFilter', 'datepickerConfig', function($scope, $attrs, $parse, $interpolate, $timeout, $log, dateFilter, datepickerConfig) {\n  var self = this,                                                                                                    // 1007\n      ngModelCtrl = { $setViewValue: angular.noop }; // nullModelCtrl;                                                // 1008\n                                                                                                                      // 1009\n  // Modes chain                                                                                                      // 1010\n  this.modes = ['day', 'month', 'year'];                                                                              // 1011\n                                                                                                                      // 1012\n  // Configuration attributes                                                                                         // 1013\n  angular.forEach(['formatDay', 'formatMonth', 'formatYear', 'formatDayHeader', 'formatDayTitle', 'formatMonthTitle', // 1014\n                   'minMode', 'maxMode', 'showWeeks', 'startingDay', 'yearRange', 'shortcutPropagation'], function( key, index ) {\n    self[key] = angular.isDefined($attrs[key]) ? (index < 8 ? $interpolate($attrs[key])($scope.$parent) : $scope.$parent.$eval($attrs[key])) : datepickerConfig[key];\n  });                                                                                                                 // 1017\n                                                                                                                      // 1018\n  // Watchable date attributes                                                                                        // 1019\n  angular.forEach(['minDate', 'maxDate'], function( key ) {                                                           // 1020\n    if ( $attrs[key] ) {                                                                                              // 1021\n      $scope.$parent.$watch($parse($attrs[key]), function(value) {                                                    // 1022\n        self[key] = value ? new Date(value) : null;                                                                   // 1023\n        self.refreshView();                                                                                           // 1024\n      });                                                                                                             // 1025\n    } else {                                                                                                          // 1026\n      self[key] = datepickerConfig[key] ? new Date(datepickerConfig[key]) : null;                                     // 1027\n    }                                                                                                                 // 1028\n  });                                                                                                                 // 1029\n                                                                                                                      // 1030\n  $scope.datepickerMode = $scope.datepickerMode || datepickerConfig.datepickerMode;                                   // 1031\n  $scope.maxMode = self.maxMode;                                                                                      // 1032\n  $scope.uniqueId = 'datepicker-' + $scope.$id + '-' + Math.floor(Math.random() * 10000);                             // 1033\n                                                                                                                      // 1034\n  if(angular.isDefined($attrs.initDate)) {                                                                            // 1035\n    this.activeDate = $scope.$parent.$eval($attrs.initDate) || new Date();                                            // 1036\n    $scope.$parent.$watch($attrs.initDate, function(initDate){                                                        // 1037\n      if(initDate && (ngModelCtrl.$isEmpty(ngModelCtrl.$modelValue) || ngModelCtrl.$invalid)){                        // 1038\n        self.activeDate = initDate;                                                                                   // 1039\n        self.refreshView();                                                                                           // 1040\n      }                                                                                                               // 1041\n    });                                                                                                               // 1042\n  } else {                                                                                                            // 1043\n    this.activeDate =  new Date();                                                                                    // 1044\n  }                                                                                                                   // 1045\n                                                                                                                      // 1046\n  $scope.isActive = function(dateObject) {                                                                            // 1047\n    if (self.compare(dateObject.date, self.activeDate) === 0) {                                                       // 1048\n      $scope.activeDateId = dateObject.uid;                                                                           // 1049\n      return true;                                                                                                    // 1050\n    }                                                                                                                 // 1051\n    return false;                                                                                                     // 1052\n  };                                                                                                                  // 1053\n                                                                                                                      // 1054\n  this.init = function( ngModelCtrl_ ) {                                                                              // 1055\n    ngModelCtrl = ngModelCtrl_;                                                                                       // 1056\n                                                                                                                      // 1057\n    ngModelCtrl.$render = function() {                                                                                // 1058\n      self.render();                                                                                                  // 1059\n    };                                                                                                                // 1060\n  };                                                                                                                  // 1061\n                                                                                                                      // 1062\n  this.render = function() {                                                                                          // 1063\n    if ( ngModelCtrl.$viewValue ) {                                                                                   // 1064\n      var date = new Date( ngModelCtrl.$viewValue ),                                                                  // 1065\n          isValid = !isNaN(date);                                                                                     // 1066\n                                                                                                                      // 1067\n      if ( isValid ) {                                                                                                // 1068\n        this.activeDate = date;                                                                                       // 1069\n      } else {                                                                                                        // 1070\n        $log.error('Datepicker directive: \"ng-model\" value must be a Date object, a number of milliseconds since 01.01.1970 or a string representing an RFC2822 or ISO 8601 date.');\n      }                                                                                                               // 1072\n      ngModelCtrl.$setValidity('date', isValid);                                                                      // 1073\n    }                                                                                                                 // 1074\n    this.refreshView();                                                                                               // 1075\n  };                                                                                                                  // 1076\n                                                                                                                      // 1077\n  this.refreshView = function() {                                                                                     // 1078\n    if ( this.element ) {                                                                                             // 1079\n      this._refreshView();                                                                                            // 1080\n                                                                                                                      // 1081\n      var date = ngModelCtrl.$viewValue ? new Date(ngModelCtrl.$viewValue) : null;                                    // 1082\n      ngModelCtrl.$setValidity('date-disabled', !date || (this.element && !this.isDisabled(date)));                   // 1083\n    }                                                                                                                 // 1084\n  };                                                                                                                  // 1085\n                                                                                                                      // 1086\n  this.createDateObject = function(date, format) {                                                                    // 1087\n    var model = ngModelCtrl.$viewValue ? new Date(ngModelCtrl.$viewValue) : null;                                     // 1088\n    return {                                                                                                          // 1089\n      date: date,                                                                                                     // 1090\n      label: dateFilter(date, format),                                                                                // 1091\n      selected: model && this.compare(date, model) === 0,                                                             // 1092\n      disabled: this.isDisabled(date),                                                                                // 1093\n      current: this.compare(date, new Date()) === 0,                                                                  // 1094\n      customClass: this.customClass(date)                                                                             // 1095\n    };                                                                                                                // 1096\n  };                                                                                                                  // 1097\n                                                                                                                      // 1098\n  this.isDisabled = function( date ) {                                                                                // 1099\n    return ((this.minDate && this.compare(date, this.minDate) < 0) || (this.maxDate && this.compare(date, this.maxDate) > 0) || ($attrs.dateDisabled && $scope.dateDisabled({date: date, mode: $scope.datepickerMode})));\n  };                                                                                                                  // 1101\n                                                                                                                      // 1102\n    this.customClass = function( date ) {                                                                             // 1103\n      return $scope.customClass({date: date, mode: $scope.datepickerMode});                                           // 1104\n    };                                                                                                                // 1105\n                                                                                                                      // 1106\n  // Split array into smaller arrays                                                                                  // 1107\n  this.split = function(arr, size) {                                                                                  // 1108\n    var arrays = [];                                                                                                  // 1109\n    while (arr.length > 0) {                                                                                          // 1110\n      arrays.push(arr.splice(0, size));                                                                               // 1111\n    }                                                                                                                 // 1112\n    return arrays;                                                                                                    // 1113\n  };                                                                                                                  // 1114\n                                                                                                                      // 1115\n  $scope.select = function( date ) {                                                                                  // 1116\n    if ( $scope.datepickerMode === self.minMode ) {                                                                   // 1117\n      var dt = ngModelCtrl.$viewValue ? new Date( ngModelCtrl.$viewValue ) : new Date(0, 0, 0, 0, 0, 0, 0);           // 1118\n      dt.setFullYear( date.getFullYear(), date.getMonth(), date.getDate() );                                          // 1119\n      ngModelCtrl.$setViewValue( dt );                                                                                // 1120\n      ngModelCtrl.$render();                                                                                          // 1121\n    } else {                                                                                                          // 1122\n      self.activeDate = date;                                                                                         // 1123\n      $scope.datepickerMode = self.modes[ self.modes.indexOf( $scope.datepickerMode ) - 1 ];                          // 1124\n    }                                                                                                                 // 1125\n  };                                                                                                                  // 1126\n                                                                                                                      // 1127\n  $scope.move = function( direction ) {                                                                               // 1128\n    var year = self.activeDate.getFullYear() + direction * (self.step.years || 0),                                    // 1129\n        month = self.activeDate.getMonth() + direction * (self.step.months || 0);                                     // 1130\n    self.activeDate.setFullYear(year, month, 1);                                                                      // 1131\n    self.refreshView();                                                                                               // 1132\n  };                                                                                                                  // 1133\n                                                                                                                      // 1134\n  $scope.toggleMode = function( direction ) {                                                                         // 1135\n    direction = direction || 1;                                                                                       // 1136\n                                                                                                                      // 1137\n    if (($scope.datepickerMode === self.maxMode && direction === 1) || ($scope.datepickerMode === self.minMode && direction === -1)) {\n      return;                                                                                                         // 1139\n    }                                                                                                                 // 1140\n                                                                                                                      // 1141\n    $scope.datepickerMode = self.modes[ self.modes.indexOf( $scope.datepickerMode ) + direction ];                    // 1142\n  };                                                                                                                  // 1143\n                                                                                                                      // 1144\n  // Key event mapper                                                                                                 // 1145\n  $scope.keys = { 13:'enter', 32:'space', 33:'pageup', 34:'pagedown', 35:'end', 36:'home', 37:'left', 38:'up', 39:'right', 40:'down' };\n                                                                                                                      // 1147\n  var focusElement = function() {                                                                                     // 1148\n    $timeout(function() {                                                                                             // 1149\n      self.element[0].focus();                                                                                        // 1150\n    }, 0 , false);                                                                                                    // 1151\n  };                                                                                                                  // 1152\n                                                                                                                      // 1153\n  // Listen for focus requests from popup directive                                                                   // 1154\n  $scope.$on('datepicker.focus', focusElement);                                                                       // 1155\n                                                                                                                      // 1156\n  $scope.keydown = function( evt ) {                                                                                  // 1157\n    var key = $scope.keys[evt.which];                                                                                 // 1158\n                                                                                                                      // 1159\n    if ( !key || evt.shiftKey || evt.altKey ) {                                                                       // 1160\n      return;                                                                                                         // 1161\n    }                                                                                                                 // 1162\n                                                                                                                      // 1163\n    evt.preventDefault();                                                                                             // 1164\n    if(!self.shortcutPropagation){                                                                                    // 1165\n        evt.stopPropagation();                                                                                        // 1166\n    }                                                                                                                 // 1167\n                                                                                                                      // 1168\n    if (key === 'enter' || key === 'space') {                                                                         // 1169\n      if ( self.isDisabled(self.activeDate)) {                                                                        // 1170\n        return; // do nothing                                                                                         // 1171\n      }                                                                                                               // 1172\n      $scope.select(self.activeDate);                                                                                 // 1173\n      focusElement();                                                                                                 // 1174\n    } else if (evt.ctrlKey && (key === 'up' || key === 'down')) {                                                     // 1175\n      $scope.toggleMode(key === 'up' ? 1 : -1);                                                                       // 1176\n      focusElement();                                                                                                 // 1177\n    } else {                                                                                                          // 1178\n      self.handleKeyDown(key, evt);                                                                                   // 1179\n      self.refreshView();                                                                                             // 1180\n    }                                                                                                                 // 1181\n  };                                                                                                                  // 1182\n}])                                                                                                                   // 1183\n                                                                                                                      // 1184\n.directive( 'datepicker', function () {                                                                               // 1185\n  return {                                                                                                            // 1186\n    restrict: 'EA',                                                                                                   // 1187\n    replace: true,                                                                                                    // 1188\n    templateUrl: 'template/datepicker/datepicker.html',                                                               // 1189\n    scope: {                                                                                                          // 1190\n      datepickerMode: '=?',                                                                                           // 1191\n      dateDisabled: '&',                                                                                              // 1192\n      customClass: '&',                                                                                               // 1193\n      shortcutPropagation: '&?'                                                                                       // 1194\n    },                                                                                                                // 1195\n    require: ['datepicker', '?^ngModel'],                                                                             // 1196\n    controller: 'DatepickerController',                                                                               // 1197\n    link: function(scope, element, attrs, ctrls) {                                                                    // 1198\n      var datepickerCtrl = ctrls[0], ngModelCtrl = ctrls[1];                                                          // 1199\n                                                                                                                      // 1200\n      if ( ngModelCtrl ) {                                                                                            // 1201\n        datepickerCtrl.init( ngModelCtrl );                                                                           // 1202\n      }                                                                                                               // 1203\n    }                                                                                                                 // 1204\n  };                                                                                                                  // 1205\n})                                                                                                                    // 1206\n                                                                                                                      // 1207\n.directive('daypicker', ['dateFilter', function (dateFilter) {                                                        // 1208\n  return {                                                                                                            // 1209\n    restrict: 'EA',                                                                                                   // 1210\n    replace: true,                                                                                                    // 1211\n    templateUrl: 'template/datepicker/day.html',                                                                      // 1212\n    require: '^datepicker',                                                                                           // 1213\n    link: function(scope, element, attrs, ctrl) {                                                                     // 1214\n      scope.showWeeks = ctrl.showWeeks;                                                                               // 1215\n                                                                                                                      // 1216\n      ctrl.step = { months: 1 };                                                                                      // 1217\n      ctrl.element = element;                                                                                         // 1218\n                                                                                                                      // 1219\n      var DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];                                           // 1220\n      function getDaysInMonth( year, month ) {                                                                        // 1221\n        return ((month === 1) && (year % 4 === 0) && ((year % 100 !== 0) || (year % 400 === 0))) ? 29 : DAYS_IN_MONTH[month];\n      }                                                                                                               // 1223\n                                                                                                                      // 1224\n      function getDates(startDate, n) {                                                                               // 1225\n        var dates = new Array(n), current = new Date(startDate), i = 0;                                               // 1226\n        current.setHours(12); // Prevent repeated dates because of timezone bug                                       // 1227\n        while ( i < n ) {                                                                                             // 1228\n          dates[i++] = new Date(current);                                                                             // 1229\n          current.setDate( current.getDate() + 1 );                                                                   // 1230\n        }                                                                                                             // 1231\n        return dates;                                                                                                 // 1232\n      }                                                                                                               // 1233\n                                                                                                                      // 1234\n      ctrl._refreshView = function() {                                                                                // 1235\n        var year = ctrl.activeDate.getFullYear(),                                                                     // 1236\n          month = ctrl.activeDate.getMonth(),                                                                         // 1237\n          firstDayOfMonth = new Date(year, month, 1),                                                                 // 1238\n          difference = ctrl.startingDay - firstDayOfMonth.getDay(),                                                   // 1239\n          numDisplayedFromPreviousMonth = (difference > 0) ? 7 - difference : - difference,                           // 1240\n          firstDate = new Date(firstDayOfMonth);                                                                      // 1241\n                                                                                                                      // 1242\n        if ( numDisplayedFromPreviousMonth > 0 ) {                                                                    // 1243\n          firstDate.setDate( - numDisplayedFromPreviousMonth + 1 );                                                   // 1244\n        }                                                                                                             // 1245\n                                                                                                                      // 1246\n        // 42 is the number of days on a six-month calendar                                                           // 1247\n        var days = getDates(firstDate, 42);                                                                           // 1248\n        for (var i = 0; i < 42; i ++) {                                                                               // 1249\n          days[i] = angular.extend(ctrl.createDateObject(days[i], ctrl.formatDay), {                                  // 1250\n            secondary: days[i].getMonth() !== month,                                                                  // 1251\n            uid: scope.uniqueId + '-' + i                                                                             // 1252\n          });                                                                                                         // 1253\n        }                                                                                                             // 1254\n                                                                                                                      // 1255\n        scope.labels = new Array(7);                                                                                  // 1256\n        for (var j = 0; j < 7; j++) {                                                                                 // 1257\n          scope.labels[j] = {                                                                                         // 1258\n            abbr: dateFilter(days[j].date, ctrl.formatDayHeader),                                                     // 1259\n            full: dateFilter(days[j].date, 'EEEE')                                                                    // 1260\n          };                                                                                                          // 1261\n        }                                                                                                             // 1262\n                                                                                                                      // 1263\n        scope.title = dateFilter(ctrl.activeDate, ctrl.formatDayTitle);                                               // 1264\n        scope.rows = ctrl.split(days, 7);                                                                             // 1265\n                                                                                                                      // 1266\n        if ( scope.showWeeks ) {                                                                                      // 1267\n          scope.weekNumbers = [];                                                                                     // 1268\n          var thursdayIndex = (4 + 7 - ctrl.startingDay) % 7,                                                         // 1269\n              numWeeks = scope.rows.length;                                                                           // 1270\n          for (var curWeek = 0; curWeek < numWeeks; curWeek++) {                                                      // 1271\n            scope.weekNumbers.push(                                                                                   // 1272\n              getISO8601WeekNumber( scope.rows[curWeek][thursdayIndex].date ));                                       // 1273\n          }                                                                                                           // 1274\n        }                                                                                                             // 1275\n      };                                                                                                              // 1276\n                                                                                                                      // 1277\n      ctrl.compare = function(date1, date2) {                                                                         // 1278\n        return (new Date( date1.getFullYear(), date1.getMonth(), date1.getDate() ) - new Date( date2.getFullYear(), date2.getMonth(), date2.getDate() ) );\n      };                                                                                                              // 1280\n                                                                                                                      // 1281\n      function getISO8601WeekNumber(date) {                                                                           // 1282\n        var checkDate = new Date(date);                                                                               // 1283\n        checkDate.setDate(checkDate.getDate() + 4 - (checkDate.getDay() || 7)); // Thursday                           // 1284\n        var time = checkDate.getTime();                                                                               // 1285\n        checkDate.setMonth(0); // Compare with Jan 1                                                                  // 1286\n        checkDate.setDate(1);                                                                                         // 1287\n        return Math.floor(Math.round((time - checkDate) / 86400000) / 7) + 1;                                         // 1288\n      }                                                                                                               // 1289\n                                                                                                                      // 1290\n      ctrl.handleKeyDown = function( key, evt ) {                                                                     // 1291\n        var date = ctrl.activeDate.getDate();                                                                         // 1292\n                                                                                                                      // 1293\n        if (key === 'left') {                                                                                         // 1294\n          date = date - 1;   // up                                                                                    // 1295\n        } else if (key === 'up') {                                                                                    // 1296\n          date = date - 7;   // down                                                                                  // 1297\n        } else if (key === 'right') {                                                                                 // 1298\n          date = date + 1;   // down                                                                                  // 1299\n        } else if (key === 'down') {                                                                                  // 1300\n          date = date + 7;                                                                                            // 1301\n        } else if (key === 'pageup' || key === 'pagedown') {                                                          // 1302\n          var month = ctrl.activeDate.getMonth() + (key === 'pageup' ? - 1 : 1);                                      // 1303\n          ctrl.activeDate.setMonth(month, 1);                                                                         // 1304\n          date = Math.min(getDaysInMonth(ctrl.activeDate.getFullYear(), ctrl.activeDate.getMonth()), date);           // 1305\n        } else if (key === 'home') {                                                                                  // 1306\n          date = 1;                                                                                                   // 1307\n        } else if (key === 'end') {                                                                                   // 1308\n          date = getDaysInMonth(ctrl.activeDate.getFullYear(), ctrl.activeDate.getMonth());                           // 1309\n        }                                                                                                             // 1310\n        ctrl.activeDate.setDate(date);                                                                                // 1311\n      };                                                                                                              // 1312\n                                                                                                                      // 1313\n      ctrl.refreshView();                                                                                             // 1314\n    }                                                                                                                 // 1315\n  };                                                                                                                  // 1316\n}])                                                                                                                   // 1317\n                                                                                                                      // 1318\n.directive('monthpicker', ['dateFilter', function (dateFilter) {                                                      // 1319\n  return {                                                                                                            // 1320\n    restrict: 'EA',                                                                                                   // 1321\n    replace: true,                                                                                                    // 1322\n    templateUrl: 'template/datepicker/month.html',                                                                    // 1323\n    require: '^datepicker',                                                                                           // 1324\n    link: function(scope, element, attrs, ctrl) {                                                                     // 1325\n      ctrl.step = { years: 1 };                                                                                       // 1326\n      ctrl.element = element;                                                                                         // 1327\n                                                                                                                      // 1328\n      ctrl._refreshView = function() {                                                                                // 1329\n        var months = new Array(12),                                                                                   // 1330\n            year = ctrl.activeDate.getFullYear();                                                                     // 1331\n                                                                                                                      // 1332\n        for ( var i = 0; i < 12; i++ ) {                                                                              // 1333\n          months[i] = angular.extend(ctrl.createDateObject(new Date(year, i, 1), ctrl.formatMonth), {                 // 1334\n            uid: scope.uniqueId + '-' + i                                                                             // 1335\n          });                                                                                                         // 1336\n        }                                                                                                             // 1337\n                                                                                                                      // 1338\n        scope.title = dateFilter(ctrl.activeDate, ctrl.formatMonthTitle);                                             // 1339\n        scope.rows = ctrl.split(months, 3);                                                                           // 1340\n      };                                                                                                              // 1341\n                                                                                                                      // 1342\n      ctrl.compare = function(date1, date2) {                                                                         // 1343\n        return new Date( date1.getFullYear(), date1.getMonth() ) - new Date( date2.getFullYear(), date2.getMonth() ); // 1344\n      };                                                                                                              // 1345\n                                                                                                                      // 1346\n      ctrl.handleKeyDown = function( key, evt ) {                                                                     // 1347\n        var date = ctrl.activeDate.getMonth();                                                                        // 1348\n                                                                                                                      // 1349\n        if (key === 'left') {                                                                                         // 1350\n          date = date - 1;   // up                                                                                    // 1351\n        } else if (key === 'up') {                                                                                    // 1352\n          date = date - 3;   // down                                                                                  // 1353\n        } else if (key === 'right') {                                                                                 // 1354\n          date = date + 1;   // down                                                                                  // 1355\n        } else if (key === 'down') {                                                                                  // 1356\n          date = date + 3;                                                                                            // 1357\n        } else if (key === 'pageup' || key === 'pagedown') {                                                          // 1358\n          var year = ctrl.activeDate.getFullYear() + (key === 'pageup' ? - 1 : 1);                                    // 1359\n          ctrl.activeDate.setFullYear(year);                                                                          // 1360\n        } else if (key === 'home') {                                                                                  // 1361\n          date = 0;                                                                                                   // 1362\n        } else if (key === 'end') {                                                                                   // 1363\n          date = 11;                                                                                                  // 1364\n        }                                                                                                             // 1365\n        ctrl.activeDate.setMonth(date);                                                                               // 1366\n      };                                                                                                              // 1367\n                                                                                                                      // 1368\n      ctrl.refreshView();                                                                                             // 1369\n    }                                                                                                                 // 1370\n  };                                                                                                                  // 1371\n}])                                                                                                                   // 1372\n                                                                                                                      // 1373\n.directive('yearpicker', ['dateFilter', function (dateFilter) {                                                       // 1374\n  return {                                                                                                            // 1375\n    restrict: 'EA',                                                                                                   // 1376\n    replace: true,                                                                                                    // 1377\n    templateUrl: 'template/datepicker/year.html',                                                                     // 1378\n    require: '^datepicker',                                                                                           // 1379\n    link: function(scope, element, attrs, ctrl) {                                                                     // 1380\n      var range = ctrl.yearRange;                                                                                     // 1381\n                                                                                                                      // 1382\n      ctrl.step = { years: range };                                                                                   // 1383\n      ctrl.element = element;                                                                                         // 1384\n                                                                                                                      // 1385\n      function getStartingYear( year ) {                                                                              // 1386\n        return parseInt((year - 1) / range, 10) * range + 1;                                                          // 1387\n      }                                                                                                               // 1388\n                                                                                                                      // 1389\n      ctrl._refreshView = function() {                                                                                // 1390\n        var years = new Array(range);                                                                                 // 1391\n                                                                                                                      // 1392\n        for ( var i = 0, start = getStartingYear(ctrl.activeDate.getFullYear()); i < range; i++ ) {                   // 1393\n          years[i] = angular.extend(ctrl.createDateObject(new Date(start + i, 0, 1), ctrl.formatYear), {              // 1394\n            uid: scope.uniqueId + '-' + i                                                                             // 1395\n          });                                                                                                         // 1396\n        }                                                                                                             // 1397\n                                                                                                                      // 1398\n        scope.title = [years[0].label, years[range - 1].label].join(' - ');                                           // 1399\n        scope.rows = ctrl.split(years, 5);                                                                            // 1400\n      };                                                                                                              // 1401\n                                                                                                                      // 1402\n      ctrl.compare = function(date1, date2) {                                                                         // 1403\n        return date1.getFullYear() - date2.getFullYear();                                                             // 1404\n      };                                                                                                              // 1405\n                                                                                                                      // 1406\n      ctrl.handleKeyDown = function( key, evt ) {                                                                     // 1407\n        var date = ctrl.activeDate.getFullYear();                                                                     // 1408\n                                                                                                                      // 1409\n        if (key === 'left') {                                                                                         // 1410\n          date = date - 1;   // up                                                                                    // 1411\n        } else if (key === 'up') {                                                                                    // 1412\n          date = date - 5;   // down                                                                                  // 1413\n        } else if (key === 'right') {                                                                                 // 1414\n          date = date + 1;   // down                                                                                  // 1415\n        } else if (key === 'down') {                                                                                  // 1416\n          date = date + 5;                                                                                            // 1417\n        } else if (key === 'pageup' || key === 'pagedown') {                                                          // 1418\n          date += (key === 'pageup' ? - 1 : 1) * ctrl.step.years;                                                     // 1419\n        } else if (key === 'home') {                                                                                  // 1420\n          date = getStartingYear( ctrl.activeDate.getFullYear() );                                                    // 1421\n        } else if (key === 'end') {                                                                                   // 1422\n          date = getStartingYear( ctrl.activeDate.getFullYear() ) + range - 1;                                        // 1423\n        }                                                                                                             // 1424\n        ctrl.activeDate.setFullYear(date);                                                                            // 1425\n      };                                                                                                              // 1426\n                                                                                                                      // 1427\n      ctrl.refreshView();                                                                                             // 1428\n    }                                                                                                                 // 1429\n  };                                                                                                                  // 1430\n}])                                                                                                                   // 1431\n                                                                                                                      // 1432\n.constant('datepickerPopupConfig', {                                                                                  // 1433\n  datepickerPopup: 'yyyy-MM-dd',                                                                                      // 1434\n  html5Types: {                                                                                                       // 1435\n    date: 'yyyy-MM-dd',                                                                                               // 1436\n    'datetime-local': 'yyyy-MM-ddTHH:mm:ss.sss',                                                                      // 1437\n    'month': 'yyyy-MM'                                                                                                // 1438\n  },                                                                                                                  // 1439\n  currentText: 'Today',                                                                                               // 1440\n  clearText: 'Clear',                                                                                                 // 1441\n  closeText: 'Done',                                                                                                  // 1442\n  closeOnDateSelection: true,                                                                                         // 1443\n  appendToBody: false,                                                                                                // 1444\n  showButtonBar: true                                                                                                 // 1445\n})                                                                                                                    // 1446\n                                                                                                                      // 1447\n.directive('datepickerPopup', ['$compile', '$parse', '$document', '$position', 'dateFilter', 'dateParser', 'datepickerPopupConfig',\nfunction ($compile, $parse, $document, $position, dateFilter, dateParser, datepickerPopupConfig) {                    // 1449\n  return {                                                                                                            // 1450\n    restrict: 'EA',                                                                                                   // 1451\n    require: 'ngModel',                                                                                               // 1452\n    scope: {                                                                                                          // 1453\n      isOpen: '=?',                                                                                                   // 1454\n      currentText: '@',                                                                                               // 1455\n      clearText: '@',                                                                                                 // 1456\n      closeText: '@',                                                                                                 // 1457\n      dateDisabled: '&',                                                                                              // 1458\n      customClass: '&'                                                                                                // 1459\n    },                                                                                                                // 1460\n    link: function(scope, element, attrs, ngModel) {                                                                  // 1461\n      var dateFormat,                                                                                                 // 1462\n          closeOnDateSelection = angular.isDefined(attrs.closeOnDateSelection) ? scope.$parent.$eval(attrs.closeOnDateSelection) : datepickerPopupConfig.closeOnDateSelection,\n          appendToBody = angular.isDefined(attrs.datepickerAppendToBody) ? scope.$parent.$eval(attrs.datepickerAppendToBody) : datepickerPopupConfig.appendToBody;\n                                                                                                                      // 1465\n      scope.showButtonBar = angular.isDefined(attrs.showButtonBar) ? scope.$parent.$eval(attrs.showButtonBar) : datepickerPopupConfig.showButtonBar;\n                                                                                                                      // 1467\n      scope.getText = function( key ) {                                                                               // 1468\n        return scope[key + 'Text'] || datepickerPopupConfig[key + 'Text'];                                            // 1469\n      };                                                                                                              // 1470\n                                                                                                                      // 1471\n      var isHtml5DateInput = false;                                                                                   // 1472\n      if (datepickerPopupConfig.html5Types[attrs.type]) {                                                             // 1473\n        dateFormat = datepickerPopupConfig.html5Types[attrs.type];                                                    // 1474\n        isHtml5DateInput = true;                                                                                      // 1475\n      } else {                                                                                                        // 1476\n        dateFormat = attrs.datepickerPopup || datepickerPopupConfig.datepickerPopup;                                  // 1477\n        attrs.$observe('datepickerPopup', function(value, oldValue) {                                                 // 1478\n            var newDateFormat = value || datepickerPopupConfig.datepickerPopup;                                       // 1479\n            // Invalidate the $modelValue to ensure that formatters re-run                                            // 1480\n            // FIXME: Refactor when PR is merged: https://github.com/angular/angular.js/pull/10764                    // 1481\n            if (newDateFormat !== dateFormat) {                                                                       // 1482\n              dateFormat = newDateFormat;                                                                             // 1483\n              ngModel.$modelValue = null;                                                                             // 1484\n                                                                                                                      // 1485\n              if (!dateFormat) {                                                                                      // 1486\n                throw new Error('datepickerPopup must have a date format specified.');                                // 1487\n              }                                                                                                       // 1488\n            }                                                                                                         // 1489\n        });                                                                                                           // 1490\n      }                                                                                                               // 1491\n                                                                                                                      // 1492\n      if (!dateFormat) {                                                                                              // 1493\n        throw new Error('datepickerPopup must have a date format specified.');                                        // 1494\n      }                                                                                                               // 1495\n                                                                                                                      // 1496\n      if (isHtml5DateInput && attrs.datepickerPopup) {                                                                // 1497\n        throw new Error('HTML5 date input types do not support custom formats.');                                     // 1498\n      }                                                                                                               // 1499\n                                                                                                                      // 1500\n      // popup element used to display calendar                                                                       // 1501\n      var popupEl = angular.element('<div datepicker-popup-wrap><div datepicker></div></div>');                       // 1502\n      popupEl.attr({                                                                                                  // 1503\n        'ng-model': 'date',                                                                                           // 1504\n        'ng-change': 'dateSelection()'                                                                                // 1505\n      });                                                                                                             // 1506\n                                                                                                                      // 1507\n      function cameltoDash( string ){                                                                                 // 1508\n        return string.replace(/([A-Z])/g, function($1) { return '-' + $1.toLowerCase(); });                           // 1509\n      }                                                                                                               // 1510\n                                                                                                                      // 1511\n      // datepicker element                                                                                           // 1512\n      var datepickerEl = angular.element(popupEl.children()[0]);                                                      // 1513\n      if (isHtml5DateInput) {                                                                                         // 1514\n        if (attrs.type == 'month') {                                                                                  // 1515\n          datepickerEl.attr('datepicker-mode', '\"month\"');                                                            // 1516\n          datepickerEl.attr('min-mode', 'month');                                                                     // 1517\n        }                                                                                                             // 1518\n      }                                                                                                               // 1519\n                                                                                                                      // 1520\n      if ( attrs.datepickerOptions ) {                                                                                // 1521\n        var options = scope.$parent.$eval(attrs.datepickerOptions);                                                   // 1522\n        if(options.initDate) {                                                                                        // 1523\n          scope.initDate = options.initDate;                                                                          // 1524\n          datepickerEl.attr( 'init-date', 'initDate' );                                                               // 1525\n          delete options.initDate;                                                                                    // 1526\n        }                                                                                                             // 1527\n        angular.forEach(options, function( value, option ) {                                                          // 1528\n          datepickerEl.attr( cameltoDash(option), value );                                                            // 1529\n        });                                                                                                           // 1530\n      }                                                                                                               // 1531\n                                                                                                                      // 1532\n      scope.watchData = {};                                                                                           // 1533\n      angular.forEach(['minDate', 'maxDate', 'datepickerMode', 'initDate', 'shortcutPropagation'], function( key ) {  // 1534\n        if ( attrs[key] ) {                                                                                           // 1535\n          var getAttribute = $parse(attrs[key]);                                                                      // 1536\n          scope.$parent.$watch(getAttribute, function(value){                                                         // 1537\n            scope.watchData[key] = value;                                                                             // 1538\n          });                                                                                                         // 1539\n          datepickerEl.attr(cameltoDash(key), 'watchData.' + key);                                                    // 1540\n                                                                                                                      // 1541\n          // Propagate changes from datepicker to outside                                                             // 1542\n          if ( key === 'datepickerMode' ) {                                                                           // 1543\n            var setAttribute = getAttribute.assign;                                                                   // 1544\n            scope.$watch('watchData.' + key, function(value, oldvalue) {                                              // 1545\n              if ( value !== oldvalue ) {                                                                             // 1546\n                setAttribute(scope.$parent, value);                                                                   // 1547\n              }                                                                                                       // 1548\n            });                                                                                                       // 1549\n          }                                                                                                           // 1550\n        }                                                                                                             // 1551\n      });                                                                                                             // 1552\n      if (attrs.dateDisabled) {                                                                                       // 1553\n        datepickerEl.attr('date-disabled', 'dateDisabled({ date: date, mode: mode })');                               // 1554\n      }                                                                                                               // 1555\n                                                                                                                      // 1556\n      if (attrs.showWeeks) {                                                                                          // 1557\n        datepickerEl.attr('show-weeks', attrs.showWeeks);                                                             // 1558\n      }                                                                                                               // 1559\n                                                                                                                      // 1560\n      if (attrs.customClass){                                                                                         // 1561\n        datepickerEl.attr('custom-class', 'customClass({ date: date, mode: mode })');                                 // 1562\n      }                                                                                                               // 1563\n                                                                                                                      // 1564\n      function parseDate(viewValue) {                                                                                 // 1565\n        if (angular.isNumber(viewValue)) {                                                                            // 1566\n          // presumably timestamp to date object                                                                      // 1567\n          viewValue = new Date(viewValue);                                                                            // 1568\n        }                                                                                                             // 1569\n                                                                                                                      // 1570\n        if (!viewValue) {                                                                                             // 1571\n          return null;                                                                                                // 1572\n        } else if (angular.isDate(viewValue) && !isNaN(viewValue)) {                                                  // 1573\n          return viewValue;                                                                                           // 1574\n        } else if (angular.isString(viewValue)) {                                                                     // 1575\n          var date = dateParser.parse(viewValue, dateFormat, scope.date) || new Date(viewValue);                      // 1576\n          if (isNaN(date)) {                                                                                          // 1577\n            return undefined;                                                                                         // 1578\n          } else {                                                                                                    // 1579\n            return date;                                                                                              // 1580\n          }                                                                                                           // 1581\n        } else {                                                                                                      // 1582\n          return undefined;                                                                                           // 1583\n        }                                                                                                             // 1584\n      }                                                                                                               // 1585\n                                                                                                                      // 1586\n      function validator(modelValue, viewValue) {                                                                     // 1587\n        var value = modelValue || viewValue;                                                                          // 1588\n        if (angular.isNumber(value)) {                                                                                // 1589\n          value = new Date(value);                                                                                    // 1590\n        }                                                                                                             // 1591\n        if (!value) {                                                                                                 // 1592\n          return true;                                                                                                // 1593\n        } else if (angular.isDate(value) && !isNaN(value)) {                                                          // 1594\n          return true;                                                                                                // 1595\n        } else if (angular.isString(value)) {                                                                         // 1596\n          var date = dateParser.parse(value, dateFormat) || new Date(value);                                          // 1597\n          return !isNaN(date);                                                                                        // 1598\n        } else {                                                                                                      // 1599\n          return false;                                                                                               // 1600\n        }                                                                                                             // 1601\n      }                                                                                                               // 1602\n                                                                                                                      // 1603\n      if (!isHtml5DateInput) {                                                                                        // 1604\n        // Internal API to maintain the correct ng-invalid-[key] class                                                // 1605\n        ngModel.$$parserName = 'date';                                                                                // 1606\n        ngModel.$validators.date = validator;                                                                         // 1607\n        ngModel.$parsers.unshift(parseDate);                                                                          // 1608\n        ngModel.$formatters.push(function (value) {                                                                   // 1609\n          scope.date = value;                                                                                         // 1610\n          return ngModel.$isEmpty(value) ? value : dateFilter(value, dateFormat);                                     // 1611\n        });                                                                                                           // 1612\n      }                                                                                                               // 1613\n      else {                                                                                                          // 1614\n        ngModel.$formatters.push(function (value) {                                                                   // 1615\n          scope.date = value;                                                                                         // 1616\n          return value;                                                                                               // 1617\n        });                                                                                                           // 1618\n      }                                                                                                               // 1619\n                                                                                                                      // 1620\n      // Inner change                                                                                                 // 1621\n      scope.dateSelection = function(dt) {                                                                            // 1622\n        if (angular.isDefined(dt)) {                                                                                  // 1623\n          scope.date = dt;                                                                                            // 1624\n        }                                                                                                             // 1625\n        var date = scope.date ? dateFilter(scope.date, dateFormat) : '';                                              // 1626\n        element.val(date);                                                                                            // 1627\n        ngModel.$setViewValue(date);                                                                                  // 1628\n                                                                                                                      // 1629\n        if ( closeOnDateSelection ) {                                                                                 // 1630\n          scope.isOpen = false;                                                                                       // 1631\n          element[0].focus();                                                                                         // 1632\n        }                                                                                                             // 1633\n      };                                                                                                              // 1634\n                                                                                                                      // 1635\n      // Detect changes in the view from the text box                                                                 // 1636\n      ngModel.$viewChangeListeners.push(function () {                                                                 // 1637\n        scope.date = dateParser.parse(ngModel.$viewValue, dateFormat, scope.date) || new Date(ngModel.$viewValue);    // 1638\n      });                                                                                                             // 1639\n                                                                                                                      // 1640\n      var documentClickBind = function(event) {                                                                       // 1641\n        if (scope.isOpen && event.target !== element[0]) {                                                            // 1642\n          scope.$apply(function() {                                                                                   // 1643\n            scope.isOpen = false;                                                                                     // 1644\n          });                                                                                                         // 1645\n        }                                                                                                             // 1646\n      };                                                                                                              // 1647\n                                                                                                                      // 1648\n      var keydown = function(evt, noApply) {                                                                          // 1649\n        scope.keydown(evt);                                                                                           // 1650\n      };                                                                                                              // 1651\n      element.bind('keydown', keydown);                                                                               // 1652\n                                                                                                                      // 1653\n      scope.keydown = function(evt) {                                                                                 // 1654\n        if (evt.which === 27) {                                                                                       // 1655\n          evt.preventDefault();                                                                                       // 1656\n          if (scope.isOpen) {                                                                                         // 1657\n            evt.stopPropagation();                                                                                    // 1658\n          }                                                                                                           // 1659\n          scope.close();                                                                                              // 1660\n        } else if (evt.which === 40 && !scope.isOpen) {                                                               // 1661\n          scope.isOpen = true;                                                                                        // 1662\n        }                                                                                                             // 1663\n      };                                                                                                              // 1664\n                                                                                                                      // 1665\n      scope.$watch('isOpen', function(value) {                                                                        // 1666\n        if (value) {                                                                                                  // 1667\n          scope.$broadcast('datepicker.focus');                                                                       // 1668\n          scope.position = appendToBody ? $position.offset(element) : $position.position(element);                    // 1669\n          scope.position.top = scope.position.top + element.prop('offsetHeight');                                     // 1670\n                                                                                                                      // 1671\n          $document.bind('click', documentClickBind);                                                                 // 1672\n        } else {                                                                                                      // 1673\n          $document.unbind('click', documentClickBind);                                                               // 1674\n        }                                                                                                             // 1675\n      });                                                                                                             // 1676\n                                                                                                                      // 1677\n      scope.select = function( date ) {                                                                               // 1678\n        if (date === 'today') {                                                                                       // 1679\n          var today = new Date();                                                                                     // 1680\n          if (angular.isDate(scope.date)) {                                                                           // 1681\n            date = new Date(scope.date);                                                                              // 1682\n            date.setFullYear(today.getFullYear(), today.getMonth(), today.getDate());                                 // 1683\n          } else {                                                                                                    // 1684\n            date = new Date(today.setHours(0, 0, 0, 0));                                                              // 1685\n          }                                                                                                           // 1686\n        }                                                                                                             // 1687\n        scope.dateSelection( date );                                                                                  // 1688\n      };                                                                                                              // 1689\n                                                                                                                      // 1690\n      scope.close = function() {                                                                                      // 1691\n        scope.isOpen = false;                                                                                         // 1692\n        element[0].focus();                                                                                           // 1693\n      };                                                                                                              // 1694\n                                                                                                                      // 1695\n      var $popup = $compile(popupEl)(scope);                                                                          // 1696\n      // Prevent jQuery cache memory leak (template is now redundant after linking)                                   // 1697\n      popupEl.remove();                                                                                               // 1698\n                                                                                                                      // 1699\n      if ( appendToBody ) {                                                                                           // 1700\n        $document.find('body').append($popup);                                                                        // 1701\n      } else {                                                                                                        // 1702\n        element.after($popup);                                                                                        // 1703\n      }                                                                                                               // 1704\n                                                                                                                      // 1705\n      scope.$on('$destroy', function() {                                                                              // 1706\n        $popup.remove();                                                                                              // 1707\n        element.unbind('keydown', keydown);                                                                           // 1708\n        $document.unbind('click', documentClickBind);                                                                 // 1709\n      });                                                                                                             // 1710\n    }                                                                                                                 // 1711\n  };                                                                                                                  // 1712\n}])                                                                                                                   // 1713\n                                                                                                                      // 1714\n.directive('datepickerPopupWrap', function() {                                                                        // 1715\n  return {                                                                                                            // 1716\n    restrict:'EA',                                                                                                    // 1717\n    replace: true,                                                                                                    // 1718\n    transclude: true,                                                                                                 // 1719\n    templateUrl: 'template/datepicker/popup.html',                                                                    // 1720\n    link:function (scope, element, attrs) {                                                                           // 1721\n      element.bind('click', function(event) {                                                                         // 1722\n        event.preventDefault();                                                                                       // 1723\n        event.stopPropagation();                                                                                      // 1724\n      });                                                                                                             // 1725\n    }                                                                                                                 // 1726\n  };                                                                                                                  // 1727\n});                                                                                                                   // 1728\n                                                                                                                      // 1729\nangular.module('ui.bootstrap.dropdown', ['ui.bootstrap.position'])                                                    // 1730\n                                                                                                                      // 1731\n.constant('dropdownConfig', {                                                                                         // 1732\n  openClass: 'open'                                                                                                   // 1733\n})                                                                                                                    // 1734\n                                                                                                                      // 1735\n.service('dropdownService', ['$document', '$rootScope', function($document, $rootScope) {                             // 1736\n  var openScope = null;                                                                                               // 1737\n                                                                                                                      // 1738\n  this.open = function( dropdownScope ) {                                                                             // 1739\n    if ( !openScope ) {                                                                                               // 1740\n      $document.bind('click', closeDropdown);                                                                         // 1741\n      $document.bind('keydown', escapeKeyBind);                                                                       // 1742\n    }                                                                                                                 // 1743\n                                                                                                                      // 1744\n    if ( openScope && openScope !== dropdownScope ) {                                                                 // 1745\n        openScope.isOpen = false;                                                                                     // 1746\n    }                                                                                                                 // 1747\n                                                                                                                      // 1748\n    openScope = dropdownScope;                                                                                        // 1749\n  };                                                                                                                  // 1750\n                                                                                                                      // 1751\n  this.close = function( dropdownScope ) {                                                                            // 1752\n    if ( openScope === dropdownScope ) {                                                                              // 1753\n      openScope = null;                                                                                               // 1754\n      $document.unbind('click', closeDropdown);                                                                       // 1755\n      $document.unbind('keydown', escapeKeyBind);                                                                     // 1756\n    }                                                                                                                 // 1757\n  };                                                                                                                  // 1758\n                                                                                                                      // 1759\n  var closeDropdown = function( evt ) {                                                                               // 1760\n    // This method may still be called during the same mouse event that                                               // 1761\n    // unbound this event handler. So check openScope before proceeding.                                              // 1762\n    if (!openScope) { return; }                                                                                       // 1763\n                                                                                                                      // 1764\n    if( evt && openScope.getAutoClose() === 'disabled' )  { return ; }                                                // 1765\n                                                                                                                      // 1766\n    var toggleElement = openScope.getToggleElement();                                                                 // 1767\n    if ( evt && toggleElement && toggleElement[0].contains(evt.target) ) {                                            // 1768\n        return;                                                                                                       // 1769\n    }                                                                                                                 // 1770\n                                                                                                                      // 1771\n    var $element = openScope.getElement();                                                                            // 1772\n    if( evt && openScope.getAutoClose() === 'outsideClick' && $element && $element[0].contains(evt.target) ) {        // 1773\n      return;                                                                                                         // 1774\n    }                                                                                                                 // 1775\n                                                                                                                      // 1776\n    openScope.isOpen = false;                                                                                         // 1777\n                                                                                                                      // 1778\n    if (!$rootScope.$$phase) {                                                                                        // 1779\n      openScope.$apply();                                                                                             // 1780\n    }                                                                                                                 // 1781\n  };                                                                                                                  // 1782\n                                                                                                                      // 1783\n  var escapeKeyBind = function( evt ) {                                                                               // 1784\n    if ( evt.which === 27 ) {                                                                                         // 1785\n      openScope.focusToggleElement();                                                                                 // 1786\n      closeDropdown();                                                                                                // 1787\n    }                                                                                                                 // 1788\n  };                                                                                                                  // 1789\n}])                                                                                                                   // 1790\n                                                                                                                      // 1791\n.controller('DropdownController', ['$scope', '$attrs', '$parse', 'dropdownConfig', 'dropdownService', '$animate', '$position', '$document', function($scope, $attrs, $parse, dropdownConfig, dropdownService, $animate, $position, $document) {\n  var self = this,                                                                                                    // 1793\n      scope = $scope.$new(), // create a child scope so we are not polluting original one                             // 1794\n      openClass = dropdownConfig.openClass,                                                                           // 1795\n      getIsOpen,                                                                                                      // 1796\n      setIsOpen = angular.noop,                                                                                       // 1797\n      toggleInvoker = $attrs.onToggle ? $parse($attrs.onToggle) : angular.noop,                                       // 1798\n      appendToBody = false;                                                                                           // 1799\n                                                                                                                      // 1800\n  this.init = function( element ) {                                                                                   // 1801\n    self.$element = element;                                                                                          // 1802\n                                                                                                                      // 1803\n    if ( $attrs.isOpen ) {                                                                                            // 1804\n      getIsOpen = $parse($attrs.isOpen);                                                                              // 1805\n      setIsOpen = getIsOpen.assign;                                                                                   // 1806\n                                                                                                                      // 1807\n      $scope.$watch(getIsOpen, function(value) {                                                                      // 1808\n        scope.isOpen = !!value;                                                                                       // 1809\n      });                                                                                                             // 1810\n    }                                                                                                                 // 1811\n                                                                                                                      // 1812\n    appendToBody = angular.isDefined($attrs.dropdownAppendToBody);                                                    // 1813\n                                                                                                                      // 1814\n    if ( appendToBody && self.dropdownMenu ) {                                                                        // 1815\n      $document.find('body').append( self.dropdownMenu );                                                             // 1816\n      element.on('$destroy', function handleDestroyEvent() {                                                          // 1817\n        self.dropdownMenu.remove();                                                                                   // 1818\n      });                                                                                                             // 1819\n    }                                                                                                                 // 1820\n  };                                                                                                                  // 1821\n                                                                                                                      // 1822\n  this.toggle = function( open ) {                                                                                    // 1823\n    return scope.isOpen = arguments.length ? !!open : !scope.isOpen;                                                  // 1824\n  };                                                                                                                  // 1825\n                                                                                                                      // 1826\n  // Allow other directives to watch status                                                                           // 1827\n  this.isOpen = function() {                                                                                          // 1828\n    return scope.isOpen;                                                                                              // 1829\n  };                                                                                                                  // 1830\n                                                                                                                      // 1831\n  scope.getToggleElement = function() {                                                                               // 1832\n    return self.toggleElement;                                                                                        // 1833\n  };                                                                                                                  // 1834\n                                                                                                                      // 1835\n  scope.getAutoClose = function() {                                                                                   // 1836\n    return $attrs.autoClose || 'always'; //or 'outsideClick' or 'disabled'                                            // 1837\n  };                                                                                                                  // 1838\n                                                                                                                      // 1839\n  scope.getElement = function() {                                                                                     // 1840\n    return self.$element;                                                                                             // 1841\n  };                                                                                                                  // 1842\n                                                                                                                      // 1843\n  scope.focusToggleElement = function() {                                                                             // 1844\n    if ( self.toggleElement ) {                                                                                       // 1845\n      self.toggleElement[0].focus();                                                                                  // 1846\n    }                                                                                                                 // 1847\n  };                                                                                                                  // 1848\n                                                                                                                      // 1849\n  scope.$watch('isOpen', function( isOpen, wasOpen ) {                                                                // 1850\n    if ( appendToBody && self.dropdownMenu ) {                                                                        // 1851\n      var pos = $position.positionElements(self.$element, self.dropdownMenu, 'bottom-left', true);                    // 1852\n      self.dropdownMenu.css({                                                                                         // 1853\n        top: pos.top + 'px',                                                                                          // 1854\n        left: pos.left + 'px',                                                                                        // 1855\n        display: isOpen ? 'block' : 'none'                                                                            // 1856\n      });                                                                                                             // 1857\n    }                                                                                                                 // 1858\n                                                                                                                      // 1859\n    $animate[isOpen ? 'addClass' : 'removeClass'](self.$element, openClass);                                          // 1860\n                                                                                                                      // 1861\n    if ( isOpen ) {                                                                                                   // 1862\n      scope.focusToggleElement();                                                                                     // 1863\n      dropdownService.open( scope );                                                                                  // 1864\n    } else {                                                                                                          // 1865\n      dropdownService.close( scope );                                                                                 // 1866\n    }                                                                                                                 // 1867\n                                                                                                                      // 1868\n    setIsOpen($scope, isOpen);                                                                                        // 1869\n    if (angular.isDefined(isOpen) && isOpen !== wasOpen) {                                                            // 1870\n      toggleInvoker($scope, { open: !!isOpen });                                                                      // 1871\n    }                                                                                                                 // 1872\n  });                                                                                                                 // 1873\n                                                                                                                      // 1874\n  $scope.$on('$locationChangeSuccess', function() {                                                                   // 1875\n    scope.isOpen = false;                                                                                             // 1876\n  });                                                                                                                 // 1877\n                                                                                                                      // 1878\n  $scope.$on('$destroy', function() {                                                                                 // 1879\n    scope.$destroy();                                                                                                 // 1880\n  });                                                                                                                 // 1881\n}])                                                                                                                   // 1882\n                                                                                                                      // 1883\n.directive('dropdown', function() {                                                                                   // 1884\n  return {                                                                                                            // 1885\n    controller: 'DropdownController',                                                                                 // 1886\n    link: function(scope, element, attrs, dropdownCtrl) {                                                             // 1887\n      dropdownCtrl.init( element );                                                                                   // 1888\n    }                                                                                                                 // 1889\n  };                                                                                                                  // 1890\n})                                                                                                                    // 1891\n                                                                                                                      // 1892\n.directive('dropdownMenu', function() {                                                                               // 1893\n  return {                                                                                                            // 1894\n    restrict: 'AC',                                                                                                   // 1895\n    require: '?^dropdown',                                                                                            // 1896\n    link: function(scope, element, attrs, dropdownCtrl) {                                                             // 1897\n      if ( !dropdownCtrl ) {                                                                                          // 1898\n        return;                                                                                                       // 1899\n      }                                                                                                               // 1900\n      dropdownCtrl.dropdownMenu = element;                                                                            // 1901\n    }                                                                                                                 // 1902\n  };                                                                                                                  // 1903\n})                                                                                                                    // 1904\n                                                                                                                      // 1905\n.directive('dropdownToggle', function() {                                                                             // 1906\n  return {                                                                                                            // 1907\n    require: '?^dropdown',                                                                                            // 1908\n    link: function(scope, element, attrs, dropdownCtrl) {                                                             // 1909\n      if ( !dropdownCtrl ) {                                                                                          // 1910\n        return;                                                                                                       // 1911\n      }                                                                                                               // 1912\n                                                                                                                      // 1913\n      dropdownCtrl.toggleElement = element;                                                                           // 1914\n                                                                                                                      // 1915\n      var toggleDropdown = function(event) {                                                                          // 1916\n        event.preventDefault();                                                                                       // 1917\n                                                                                                                      // 1918\n        if ( !element.hasClass('disabled') && !attrs.disabled ) {                                                     // 1919\n          scope.$apply(function() {                                                                                   // 1920\n            dropdownCtrl.toggle();                                                                                    // 1921\n          });                                                                                                         // 1922\n        }                                                                                                             // 1923\n      };                                                                                                              // 1924\n                                                                                                                      // 1925\n      element.bind('click', toggleDropdown);                                                                          // 1926\n                                                                                                                      // 1927\n      // WAI-ARIA                                                                                                     // 1928\n      element.attr({ 'aria-haspopup': true, 'aria-expanded': false });                                                // 1929\n      scope.$watch(dropdownCtrl.isOpen, function( isOpen ) {                                                          // 1930\n        element.attr('aria-expanded', !!isOpen);                                                                      // 1931\n      });                                                                                                             // 1932\n                                                                                                                      // 1933\n      scope.$on('$destroy', function() {                                                                              // 1934\n        element.unbind('click', toggleDropdown);                                                                      // 1935\n      });                                                                                                             // 1936\n    }                                                                                                                 // 1937\n  };                                                                                                                  // 1938\n});                                                                                                                   // 1939\n                                                                                                                      // 1940\nangular.module('ui.bootstrap.modal', [])                                                                              // 1941\n                                                                                                                      // 1942\n/**                                                                                                                   // 1943\n * A helper, internal data structure that acts as a map but also allows getting / removing                            // 1944\n * elements in the LIFO order                                                                                         // 1945\n */                                                                                                                   // 1946\n  .factory('$$stackedMap', function () {                                                                              // 1947\n    return {                                                                                                          // 1948\n      createNew: function () {                                                                                        // 1949\n        var stack = [];                                                                                               // 1950\n                                                                                                                      // 1951\n        return {                                                                                                      // 1952\n          add: function (key, value) {                                                                                // 1953\n            stack.push({                                                                                              // 1954\n              key: key,                                                                                               // 1955\n              value: value                                                                                            // 1956\n            });                                                                                                       // 1957\n          },                                                                                                          // 1958\n          get: function (key) {                                                                                       // 1959\n            for (var i = 0; i < stack.length; i++) {                                                                  // 1960\n              if (key == stack[i].key) {                                                                              // 1961\n                return stack[i];                                                                                      // 1962\n              }                                                                                                       // 1963\n            }                                                                                                         // 1964\n          },                                                                                                          // 1965\n          keys: function() {                                                                                          // 1966\n            var keys = [];                                                                                            // 1967\n            for (var i = 0; i < stack.length; i++) {                                                                  // 1968\n              keys.push(stack[i].key);                                                                                // 1969\n            }                                                                                                         // 1970\n            return keys;                                                                                              // 1971\n          },                                                                                                          // 1972\n          top: function () {                                                                                          // 1973\n            return stack[stack.length - 1];                                                                           // 1974\n          },                                                                                                          // 1975\n          remove: function (key) {                                                                                    // 1976\n            var idx = -1;                                                                                             // 1977\n            for (var i = 0; i < stack.length; i++) {                                                                  // 1978\n              if (key == stack[i].key) {                                                                              // 1979\n                idx = i;                                                                                              // 1980\n                break;                                                                                                // 1981\n              }                                                                                                       // 1982\n            }                                                                                                         // 1983\n            return stack.splice(idx, 1)[0];                                                                           // 1984\n          },                                                                                                          // 1985\n          removeTop: function () {                                                                                    // 1986\n            return stack.splice(stack.length - 1, 1)[0];                                                              // 1987\n          },                                                                                                          // 1988\n          length: function () {                                                                                       // 1989\n            return stack.length;                                                                                      // 1990\n          }                                                                                                           // 1991\n        };                                                                                                            // 1992\n      }                                                                                                               // 1993\n    };                                                                                                                // 1994\n  })                                                                                                                  // 1995\n                                                                                                                      // 1996\n/**                                                                                                                   // 1997\n * A helper directive for the $modal service. It creates a backdrop element.                                          // 1998\n */                                                                                                                   // 1999\n  .directive('modalBackdrop', ['$timeout', function ($timeout) {                                                      // 2000\n    return {                                                                                                          // 2001\n      restrict: 'EA',                                                                                                 // 2002\n      replace: true,                                                                                                  // 2003\n      templateUrl: 'template/modal/backdrop.html',                                                                    // 2004\n      compile: function (tElement, tAttrs) {                                                                          // 2005\n        tElement.addClass(tAttrs.backdropClass);                                                                      // 2006\n        return linkFn;                                                                                                // 2007\n      }                                                                                                               // 2008\n    };                                                                                                                // 2009\n                                                                                                                      // 2010\n    function linkFn(scope, element, attrs) {                                                                          // 2011\n      scope.animate = false;                                                                                          // 2012\n                                                                                                                      // 2013\n      //trigger CSS transitions                                                                                       // 2014\n      $timeout(function () {                                                                                          // 2015\n        scope.animate = true;                                                                                         // 2016\n      });                                                                                                             // 2017\n    }                                                                                                                 // 2018\n  }])                                                                                                                 // 2019\n                                                                                                                      // 2020\n  .directive('modalWindow', ['$modalStack', '$q', function ($modalStack, $q) {                                        // 2021\n    return {                                                                                                          // 2022\n      restrict: 'EA',                                                                                                 // 2023\n      scope: {                                                                                                        // 2024\n        index: '@',                                                                                                   // 2025\n        animate: '='                                                                                                  // 2026\n      },                                                                                                              // 2027\n      replace: true,                                                                                                  // 2028\n      transclude: true,                                                                                               // 2029\n      templateUrl: function(tElement, tAttrs) {                                                                       // 2030\n        return tAttrs.templateUrl || 'template/modal/window.html';                                                    // 2031\n      },                                                                                                              // 2032\n      link: function (scope, element, attrs) {                                                                        // 2033\n        element.addClass(attrs.windowClass || '');                                                                    // 2034\n        scope.size = attrs.size;                                                                                      // 2035\n                                                                                                                      // 2036\n        scope.close = function (evt) {                                                                                // 2037\n          var modal = $modalStack.getTop();                                                                           // 2038\n          if (modal && modal.value.backdrop && modal.value.backdrop != 'static' && (evt.target === evt.currentTarget)) {\n            evt.preventDefault();                                                                                     // 2040\n            evt.stopPropagation();                                                                                    // 2041\n            $modalStack.dismiss(modal.key, 'backdrop click');                                                         // 2042\n          }                                                                                                           // 2043\n        };                                                                                                            // 2044\n                                                                                                                      // 2045\n        // This property is only added to the scope for the purpose of detecting when this directive is rendered.     // 2046\n        // We can detect that by using this property in the template associated with this directive and then use      // 2047\n        // {@link Attribute#$observe} on it. For more details please see {@link TableColumnResize}.                   // 2048\n        scope.$isRendered = true;                                                                                     // 2049\n                                                                                                                      // 2050\n        // Deferred object that will be resolved when this modal is render.                                           // 2051\n        var modalRenderDeferObj = $q.defer();                                                                         // 2052\n        // Observe function will be called on next digest cycle after compilation, ensuring that the DOM is ready.    // 2053\n        // In order to use this way of finding whether DOM is ready, we need to observe a scope property used in modal's template.\n        attrs.$observe('modalRender', function (value) {                                                              // 2055\n          if (value == 'true') {                                                                                      // 2056\n            modalRenderDeferObj.resolve();                                                                            // 2057\n          }                                                                                                           // 2058\n        });                                                                                                           // 2059\n                                                                                                                      // 2060\n        modalRenderDeferObj.promise.then(function () {                                                                // 2061\n          // trigger CSS transitions                                                                                  // 2062\n          scope.animate = true;                                                                                       // 2063\n                                                                                                                      // 2064\n          var inputsWithAutofocus = element[0].querySelectorAll('[autofocus]');                                       // 2065\n          /**                                                                                                         // 2066\n           * Auto-focusing of a freshly-opened modal element causes any child elements                                // 2067\n           * with the autofocus attribute to lose focus. This is an issue on touch                                    // 2068\n           * based devices which will show and then hide the onscreen keyboard.                                       // 2069\n           * Attempts to refocus the autofocus element via JavaScript will not reopen                                 // 2070\n           * the onscreen keyboard. Fixed by updated the focusing logic to only autofocus                             // 2071\n           * the modal element if the modal does not contain an autofocus element.                                    // 2072\n           */                                                                                                         // 2073\n          if (inputsWithAutofocus.length) {                                                                           // 2074\n            inputsWithAutofocus[0].focus();                                                                           // 2075\n          } else {                                                                                                    // 2076\n            element[0].focus();                                                                                       // 2077\n          }                                                                                                           // 2078\n                                                                                                                      // 2079\n          // Notify {@link $modalStack} that modal is rendered.                                                       // 2080\n          var modal = $modalStack.getTop();                                                                           // 2081\n          if (modal) {                                                                                                // 2082\n            $modalStack.modalRendered(modal.key);                                                                     // 2083\n          }                                                                                                           // 2084\n        });                                                                                                           // 2085\n      }                                                                                                               // 2086\n    };                                                                                                                // 2087\n  }])                                                                                                                 // 2088\n                                                                                                                      // 2089\n  .directive('modalAnimationClass', [                                                                                 // 2090\n    function () {                                                                                                     // 2091\n      return {                                                                                                        // 2092\n        compile: function (tElement, tAttrs) {                                                                        // 2093\n          if (tAttrs.modalAnimation) {                                                                                // 2094\n            tElement.addClass(tAttrs.modalAnimationClass);                                                            // 2095\n          }                                                                                                           // 2096\n        }                                                                                                             // 2097\n      };                                                                                                              // 2098\n    }])                                                                                                               // 2099\n                                                                                                                      // 2100\n  .directive('modalTransclude', function () {                                                                         // 2101\n    return {                                                                                                          // 2102\n      link: function($scope, $element, $attrs, controller, $transclude) {                                             // 2103\n        $transclude($scope.$parent, function(clone) {                                                                 // 2104\n          $element.empty();                                                                                           // 2105\n          $element.append(clone);                                                                                     // 2106\n        });                                                                                                           // 2107\n      }                                                                                                               // 2108\n    };                                                                                                                // 2109\n  })                                                                                                                  // 2110\n                                                                                                                      // 2111\n  .factory('$modalStack', ['$animate', '$timeout', '$document', '$compile', '$rootScope', '$$stackedMap',             // 2112\n    function ($animate, $timeout, $document, $compile, $rootScope, $$stackedMap) {                                    // 2113\n                                                                                                                      // 2114\n      var OPENED_MODAL_CLASS = 'modal-open';                                                                          // 2115\n                                                                                                                      // 2116\n      var backdropDomEl, backdropScope;                                                                               // 2117\n      var openedWindows = $$stackedMap.createNew();                                                                   // 2118\n      var $modalStack = {};                                                                                           // 2119\n                                                                                                                      // 2120\n      function backdropIndex() {                                                                                      // 2121\n        var topBackdropIndex = -1;                                                                                    // 2122\n        var opened = openedWindows.keys();                                                                            // 2123\n        for (var i = 0; i < opened.length; i++) {                                                                     // 2124\n          if (openedWindows.get(opened[i]).value.backdrop) {                                                          // 2125\n            topBackdropIndex = i;                                                                                     // 2126\n          }                                                                                                           // 2127\n        }                                                                                                             // 2128\n        return topBackdropIndex;                                                                                      // 2129\n      }                                                                                                               // 2130\n                                                                                                                      // 2131\n      $rootScope.$watch(backdropIndex, function(newBackdropIndex){                                                    // 2132\n        if (backdropScope) {                                                                                          // 2133\n          backdropScope.index = newBackdropIndex;                                                                     // 2134\n        }                                                                                                             // 2135\n      });                                                                                                             // 2136\n                                                                                                                      // 2137\n      function removeModalWindow(modalInstance) {                                                                     // 2138\n                                                                                                                      // 2139\n        var body = $document.find('body').eq(0);                                                                      // 2140\n        var modalWindow = openedWindows.get(modalInstance).value;                                                     // 2141\n                                                                                                                      // 2142\n        //clean up the stack                                                                                          // 2143\n        openedWindows.remove(modalInstance);                                                                          // 2144\n                                                                                                                      // 2145\n        //remove window DOM element                                                                                   // 2146\n        removeAfterAnimate(modalWindow.modalDomEl, modalWindow.modalScope, function() {                               // 2147\n          body.toggleClass(OPENED_MODAL_CLASS, openedWindows.length() > 0);                                           // 2148\n          checkRemoveBackdrop();                                                                                      // 2149\n        });                                                                                                           // 2150\n      }                                                                                                               // 2151\n                                                                                                                      // 2152\n      function checkRemoveBackdrop() {                                                                                // 2153\n          //remove backdrop if no longer needed                                                                       // 2154\n          if (backdropDomEl && backdropIndex() == -1) {                                                               // 2155\n            var backdropScopeRef = backdropScope;                                                                     // 2156\n            removeAfterAnimate(backdropDomEl, backdropScope, function () {                                            // 2157\n              backdropScopeRef = null;                                                                                // 2158\n            });                                                                                                       // 2159\n            backdropDomEl = undefined;                                                                                // 2160\n            backdropScope = undefined;                                                                                // 2161\n          }                                                                                                           // 2162\n      }                                                                                                               // 2163\n                                                                                                                      // 2164\n      function removeAfterAnimate(domEl, scope, done) {                                                               // 2165\n        // Closing animation                                                                                          // 2166\n        scope.animate = false;                                                                                        // 2167\n                                                                                                                      // 2168\n        if (domEl.attr('modal-animation') && $animate.enabled()) {                                                    // 2169\n          // transition out                                                                                           // 2170\n          domEl.one('$animate:close', function closeFn() {                                                            // 2171\n            $rootScope.$evalAsync(afterAnimating);                                                                    // 2172\n          });                                                                                                         // 2173\n        } else {                                                                                                      // 2174\n          // Ensure this call is async                                                                                // 2175\n          $timeout(afterAnimating);                                                                                   // 2176\n        }                                                                                                             // 2177\n                                                                                                                      // 2178\n        function afterAnimating() {                                                                                   // 2179\n          if (afterAnimating.done) {                                                                                  // 2180\n            return;                                                                                                   // 2181\n          }                                                                                                           // 2182\n          afterAnimating.done = true;                                                                                 // 2183\n                                                                                                                      // 2184\n          domEl.remove();                                                                                             // 2185\n          scope.$destroy();                                                                                           // 2186\n          if (done) {                                                                                                 // 2187\n            done();                                                                                                   // 2188\n          }                                                                                                           // 2189\n        }                                                                                                             // 2190\n      }                                                                                                               // 2191\n                                                                                                                      // 2192\n      $document.bind('keydown', function (evt) {                                                                      // 2193\n        var modal;                                                                                                    // 2194\n                                                                                                                      // 2195\n        if (evt.which === 27) {                                                                                       // 2196\n          modal = openedWindows.top();                                                                                // 2197\n          if (modal && modal.value.keyboard) {                                                                        // 2198\n            evt.preventDefault();                                                                                     // 2199\n            $rootScope.$apply(function () {                                                                           // 2200\n              $modalStack.dismiss(modal.key, 'escape key press');                                                     // 2201\n            });                                                                                                       // 2202\n          }                                                                                                           // 2203\n        }                                                                                                             // 2204\n      });                                                                                                             // 2205\n                                                                                                                      // 2206\n      $modalStack.open = function (modalInstance, modal) {                                                            // 2207\n                                                                                                                      // 2208\n        var modalOpener = $document[0].activeElement;                                                                 // 2209\n                                                                                                                      // 2210\n        openedWindows.add(modalInstance, {                                                                            // 2211\n          deferred: modal.deferred,                                                                                   // 2212\n          renderDeferred: modal.renderDeferred,                                                                       // 2213\n          modalScope: modal.scope,                                                                                    // 2214\n          backdrop: modal.backdrop,                                                                                   // 2215\n          keyboard: modal.keyboard                                                                                    // 2216\n        });                                                                                                           // 2217\n                                                                                                                      // 2218\n        var body = $document.find('body').eq(0),                                                                      // 2219\n            currBackdropIndex = backdropIndex();                                                                      // 2220\n                                                                                                                      // 2221\n        if (currBackdropIndex >= 0 && !backdropDomEl) {                                                               // 2222\n          backdropScope = $rootScope.$new(true);                                                                      // 2223\n          backdropScope.index = currBackdropIndex;                                                                    // 2224\n          var angularBackgroundDomEl = angular.element('<div modal-backdrop=\"modal-backdrop\"></div>');                // 2225\n          angularBackgroundDomEl.attr('backdrop-class', modal.backdropClass);                                         // 2226\n          if (modal.animation) {                                                                                      // 2227\n            angularBackgroundDomEl.attr('modal-animation', 'true');                                                   // 2228\n          }                                                                                                           // 2229\n          backdropDomEl = $compile(angularBackgroundDomEl)(backdropScope);                                            // 2230\n          body.append(backdropDomEl);                                                                                 // 2231\n        }                                                                                                             // 2232\n                                                                                                                      // 2233\n        var angularDomEl = angular.element('<div modal-window=\"modal-window\"></div>');                                // 2234\n        angularDomEl.attr({                                                                                           // 2235\n          'template-url': modal.windowTemplateUrl,                                                                    // 2236\n          'window-class': modal.windowClass,                                                                          // 2237\n          'size': modal.size,                                                                                         // 2238\n          'index': openedWindows.length() - 1,                                                                        // 2239\n          'animate': 'animate'                                                                                        // 2240\n        }).html(modal.content);                                                                                       // 2241\n        if (modal.animation) {                                                                                        // 2242\n          angularDomEl.attr('modal-animation', 'true');                                                               // 2243\n        }                                                                                                             // 2244\n                                                                                                                      // 2245\n        var modalDomEl = $compile(angularDomEl)(modal.scope);                                                         // 2246\n        openedWindows.top().value.modalDomEl = modalDomEl;                                                            // 2247\n        openedWindows.top().value.modalOpener = modalOpener;                                                          // 2248\n        body.append(modalDomEl);                                                                                      // 2249\n        body.addClass(OPENED_MODAL_CLASS);                                                                            // 2250\n      };                                                                                                              // 2251\n                                                                                                                      // 2252\n      function broadcastClosing(modalWindow, resultOrReason, closing) {                                               // 2253\n          return !modalWindow.value.modalScope.$broadcast('modal.closing', resultOrReason, closing).defaultPrevented; // 2254\n      }                                                                                                               // 2255\n                                                                                                                      // 2256\n      $modalStack.close = function (modalInstance, result) {                                                          // 2257\n        var modalWindow = openedWindows.get(modalInstance);                                                           // 2258\n        if (modalWindow && broadcastClosing(modalWindow, result, true)) {                                             // 2259\n          modalWindow.value.deferred.resolve(result);                                                                 // 2260\n          removeModalWindow(modalInstance);                                                                           // 2261\n          modalWindow.value.modalOpener.focus();                                                                      // 2262\n          return true;                                                                                                // 2263\n        }                                                                                                             // 2264\n        return !modalWindow;                                                                                          // 2265\n      };                                                                                                              // 2266\n                                                                                                                      // 2267\n      $modalStack.dismiss = function (modalInstance, reason) {                                                        // 2268\n        var modalWindow = openedWindows.get(modalInstance);                                                           // 2269\n        if (modalWindow && broadcastClosing(modalWindow, reason, false)) {                                            // 2270\n          modalWindow.value.deferred.reject(reason);                                                                  // 2271\n          removeModalWindow(modalInstance);                                                                           // 2272\n          modalWindow.value.modalOpener.focus();                                                                      // 2273\n          return true;                                                                                                // 2274\n        }                                                                                                             // 2275\n        return !modalWindow;                                                                                          // 2276\n      };                                                                                                              // 2277\n                                                                                                                      // 2278\n      $modalStack.dismissAll = function (reason) {                                                                    // 2279\n        var topModal = this.getTop();                                                                                 // 2280\n        while (topModal && this.dismiss(topModal.key, reason)) {                                                      // 2281\n          topModal = this.getTop();                                                                                   // 2282\n        }                                                                                                             // 2283\n      };                                                                                                              // 2284\n                                                                                                                      // 2285\n      $modalStack.getTop = function () {                                                                              // 2286\n        return openedWindows.top();                                                                                   // 2287\n      };                                                                                                              // 2288\n                                                                                                                      // 2289\n      $modalStack.modalRendered = function (modalInstance) {                                                          // 2290\n        var modalWindow = openedWindows.get(modalInstance);                                                           // 2291\n        if (modalWindow) {                                                                                            // 2292\n          modalWindow.value.renderDeferred.resolve();                                                                 // 2293\n        }                                                                                                             // 2294\n      };                                                                                                              // 2295\n                                                                                                                      // 2296\n      return $modalStack;                                                                                             // 2297\n    }])                                                                                                               // 2298\n                                                                                                                      // 2299\n  .provider('$modal', function () {                                                                                   // 2300\n                                                                                                                      // 2301\n    var $modalProvider = {                                                                                            // 2302\n      options: {                                                                                                      // 2303\n        animation: true,                                                                                              // 2304\n        backdrop: true, //can also be false or 'static'                                                               // 2305\n        keyboard: true                                                                                                // 2306\n      },                                                                                                              // 2307\n      $get: ['$injector', '$rootScope', '$q', '$templateRequest', '$controller', '$modalStack',                       // 2308\n        function ($injector, $rootScope, $q, $templateRequest, $controller, $modalStack) {                            // 2309\n                                                                                                                      // 2310\n          var $modal = {};                                                                                            // 2311\n                                                                                                                      // 2312\n          function getTemplatePromise(options) {                                                                      // 2313\n            return options.template ? $q.when(options.template) :                                                     // 2314\n              $templateRequest(angular.isFunction(options.templateUrl) ? (options.templateUrl)() : options.templateUrl);\n          }                                                                                                           // 2316\n                                                                                                                      // 2317\n          function getResolvePromises(resolves) {                                                                     // 2318\n            var promisesArr = [];                                                                                     // 2319\n            angular.forEach(resolves, function (value) {                                                              // 2320\n              if (angular.isFunction(value) || angular.isArray(value)) {                                              // 2321\n                promisesArr.push($q.when($injector.invoke(value)));                                                   // 2322\n              }                                                                                                       // 2323\n            });                                                                                                       // 2324\n            return promisesArr;                                                                                       // 2325\n          }                                                                                                           // 2326\n                                                                                                                      // 2327\n          $modal.open = function (modalOptions) {                                                                     // 2328\n                                                                                                                      // 2329\n            var modalResultDeferred = $q.defer();                                                                     // 2330\n            var modalOpenedDeferred = $q.defer();                                                                     // 2331\n            var modalRenderDeferred = $q.defer();                                                                     // 2332\n                                                                                                                      // 2333\n            //prepare an instance of a modal to be injected into controllers and returned to a caller                 // 2334\n            var modalInstance = {                                                                                     // 2335\n              result: modalResultDeferred.promise,                                                                    // 2336\n              opened: modalOpenedDeferred.promise,                                                                    // 2337\n              rendered: modalRenderDeferred.promise,                                                                  // 2338\n              close: function (result) {                                                                              // 2339\n                return $modalStack.close(modalInstance, result);                                                      // 2340\n              },                                                                                                      // 2341\n              dismiss: function (reason) {                                                                            // 2342\n                return $modalStack.dismiss(modalInstance, reason);                                                    // 2343\n              }                                                                                                       // 2344\n            };                                                                                                        // 2345\n                                                                                                                      // 2346\n            //merge and clean up options                                                                              // 2347\n            modalOptions = angular.extend({}, $modalProvider.options, modalOptions);                                  // 2348\n            modalOptions.resolve = modalOptions.resolve || {};                                                        // 2349\n                                                                                                                      // 2350\n            //verify options                                                                                          // 2351\n            if (!modalOptions.template && !modalOptions.templateUrl) {                                                // 2352\n              throw new Error('One of template or templateUrl options is required.');                                 // 2353\n            }                                                                                                         // 2354\n                                                                                                                      // 2355\n            var templateAndResolvePromise =                                                                           // 2356\n              $q.all([getTemplatePromise(modalOptions)].concat(getResolvePromises(modalOptions.resolve)));            // 2357\n                                                                                                                      // 2358\n                                                                                                                      // 2359\n            templateAndResolvePromise.then(function resolveSuccess(tplAndVars) {                                      // 2360\n                                                                                                                      // 2361\n              var modalScope = (modalOptions.scope || $rootScope).$new();                                             // 2362\n              modalScope.$close = modalInstance.close;                                                                // 2363\n              modalScope.$dismiss = modalInstance.dismiss;                                                            // 2364\n                                                                                                                      // 2365\n              var ctrlInstance, ctrlLocals = {};                                                                      // 2366\n              var resolveIter = 1;                                                                                    // 2367\n                                                                                                                      // 2368\n              //controllers                                                                                           // 2369\n              if (modalOptions.controller) {                                                                          // 2370\n                ctrlLocals.$scope = modalScope;                                                                       // 2371\n                ctrlLocals.$modalInstance = modalInstance;                                                            // 2372\n                angular.forEach(modalOptions.resolve, function (value, key) {                                         // 2373\n                  ctrlLocals[key] = tplAndVars[resolveIter++];                                                        // 2374\n                });                                                                                                   // 2375\n                                                                                                                      // 2376\n                ctrlInstance = $controller(modalOptions.controller, ctrlLocals);                                      // 2377\n                if (modalOptions.controllerAs) {                                                                      // 2378\n                  modalScope[modalOptions.controllerAs] = ctrlInstance;                                               // 2379\n                }                                                                                                     // 2380\n              }                                                                                                       // 2381\n                                                                                                                      // 2382\n              $modalStack.open(modalInstance, {                                                                       // 2383\n                scope: modalScope,                                                                                    // 2384\n                deferred: modalResultDeferred,                                                                        // 2385\n                renderDeferred: modalRenderDeferred,                                                                  // 2386\n                content: tplAndVars[0],                                                                               // 2387\n                animation: modalOptions.animation,                                                                    // 2388\n                backdrop: modalOptions.backdrop,                                                                      // 2389\n                keyboard: modalOptions.keyboard,                                                                      // 2390\n                backdropClass: modalOptions.backdropClass,                                                            // 2391\n                windowClass: modalOptions.windowClass,                                                                // 2392\n                windowTemplateUrl: modalOptions.windowTemplateUrl,                                                    // 2393\n                size: modalOptions.size                                                                               // 2394\n              });                                                                                                     // 2395\n                                                                                                                      // 2396\n            }, function resolveError(reason) {                                                                        // 2397\n              modalResultDeferred.reject(reason);                                                                     // 2398\n            });                                                                                                       // 2399\n                                                                                                                      // 2400\n            templateAndResolvePromise.then(function () {                                                              // 2401\n              modalOpenedDeferred.resolve(true);                                                                      // 2402\n            }, function (reason) {                                                                                    // 2403\n              modalOpenedDeferred.reject(reason);                                                                     // 2404\n            });                                                                                                       // 2405\n                                                                                                                      // 2406\n            return modalInstance;                                                                                     // 2407\n          };                                                                                                          // 2408\n                                                                                                                      // 2409\n          return $modal;                                                                                              // 2410\n        }]                                                                                                            // 2411\n    };                                                                                                                // 2412\n                                                                                                                      // 2413\n    return $modalProvider;                                                                                            // 2414\n  });                                                                                                                 // 2415\n                                                                                                                      // 2416\nangular.module('ui.bootstrap.pagination', [])                                                                         // 2417\n                                                                                                                      // 2418\n.controller('PaginationController', ['$scope', '$attrs', '$parse', function ($scope, $attrs, $parse) {                // 2419\n  var self = this,                                                                                                    // 2420\n      ngModelCtrl = { $setViewValue: angular.noop }, // nullModelCtrl                                                 // 2421\n      setNumPages = $attrs.numPages ? $parse($attrs.numPages).assign : angular.noop;                                  // 2422\n                                                                                                                      // 2423\n  this.init = function(ngModelCtrl_, config) {                                                                        // 2424\n    ngModelCtrl = ngModelCtrl_;                                                                                       // 2425\n    this.config = config;                                                                                             // 2426\n                                                                                                                      // 2427\n    ngModelCtrl.$render = function() {                                                                                // 2428\n      self.render();                                                                                                  // 2429\n    };                                                                                                                // 2430\n                                                                                                                      // 2431\n    if ($attrs.itemsPerPage) {                                                                                        // 2432\n      $scope.$parent.$watch($parse($attrs.itemsPerPage), function(value) {                                            // 2433\n        self.itemsPerPage = parseInt(value, 10);                                                                      // 2434\n        $scope.totalPages = self.calculateTotalPages();                                                               // 2435\n      });                                                                                                             // 2436\n    } else {                                                                                                          // 2437\n      this.itemsPerPage = config.itemsPerPage;                                                                        // 2438\n    }                                                                                                                 // 2439\n                                                                                                                      // 2440\n    $scope.$watch('totalItems', function() {                                                                          // 2441\n      $scope.totalPages = self.calculateTotalPages();                                                                 // 2442\n    });                                                                                                               // 2443\n                                                                                                                      // 2444\n    $scope.$watch('totalPages', function(value) {                                                                     // 2445\n      setNumPages($scope.$parent, value); // Readonly variable                                                        // 2446\n                                                                                                                      // 2447\n      if ( $scope.page > value ) {                                                                                    // 2448\n        $scope.selectPage(value);                                                                                     // 2449\n      } else {                                                                                                        // 2450\n        ngModelCtrl.$render();                                                                                        // 2451\n      }                                                                                                               // 2452\n    });                                                                                                               // 2453\n  };                                                                                                                  // 2454\n                                                                                                                      // 2455\n  this.calculateTotalPages = function() {                                                                             // 2456\n    var totalPages = this.itemsPerPage < 1 ? 1 : Math.ceil($scope.totalItems / this.itemsPerPage);                    // 2457\n    return Math.max(totalPages || 0, 1);                                                                              // 2458\n  };                                                                                                                  // 2459\n                                                                                                                      // 2460\n  this.render = function() {                                                                                          // 2461\n    $scope.page = parseInt(ngModelCtrl.$viewValue, 10) || 1;                                                          // 2462\n  };                                                                                                                  // 2463\n                                                                                                                      // 2464\n  $scope.selectPage = function(page, evt) {                                                                           // 2465\n    if ( $scope.page !== page && page > 0 && page <= $scope.totalPages) {                                             // 2466\n      if (evt && evt.target) {                                                                                        // 2467\n        evt.target.blur();                                                                                            // 2468\n      }                                                                                                               // 2469\n      ngModelCtrl.$setViewValue(page);                                                                                // 2470\n      ngModelCtrl.$render();                                                                                          // 2471\n    }                                                                                                                 // 2472\n  };                                                                                                                  // 2473\n                                                                                                                      // 2474\n  $scope.getText = function( key ) {                                                                                  // 2475\n    return $scope[key + 'Text'] || self.config[key + 'Text'];                                                         // 2476\n  };                                                                                                                  // 2477\n  $scope.noPrevious = function() {                                                                                    // 2478\n    return $scope.page === 1;                                                                                         // 2479\n  };                                                                                                                  // 2480\n  $scope.noNext = function() {                                                                                        // 2481\n    return $scope.page === $scope.totalPages;                                                                         // 2482\n  };                                                                                                                  // 2483\n}])                                                                                                                   // 2484\n                                                                                                                      // 2485\n.constant('paginationConfig', {                                                                                       // 2486\n  itemsPerPage: 10,                                                                                                   // 2487\n  boundaryLinks: false,                                                                                               // 2488\n  directionLinks: true,                                                                                               // 2489\n  firstText: 'First',                                                                                                 // 2490\n  previousText: 'Previous',                                                                                           // 2491\n  nextText: 'Next',                                                                                                   // 2492\n  lastText: 'Last',                                                                                                   // 2493\n  rotate: true                                                                                                        // 2494\n})                                                                                                                    // 2495\n                                                                                                                      // 2496\n.directive('pagination', ['$parse', 'paginationConfig', function($parse, paginationConfig) {                          // 2497\n  return {                                                                                                            // 2498\n    restrict: 'EA',                                                                                                   // 2499\n    scope: {                                                                                                          // 2500\n      totalItems: '=',                                                                                                // 2501\n      firstText: '@',                                                                                                 // 2502\n      previousText: '@',                                                                                              // 2503\n      nextText: '@',                                                                                                  // 2504\n      lastText: '@'                                                                                                   // 2505\n    },                                                                                                                // 2506\n    require: ['pagination', '?ngModel'],                                                                              // 2507\n    controller: 'PaginationController',                                                                               // 2508\n    templateUrl: 'template/pagination/pagination.html',                                                               // 2509\n    replace: true,                                                                                                    // 2510\n    link: function(scope, element, attrs, ctrls) {                                                                    // 2511\n      var paginationCtrl = ctrls[0], ngModelCtrl = ctrls[1];                                                          // 2512\n                                                                                                                      // 2513\n      if (!ngModelCtrl) {                                                                                             // 2514\n         return; // do nothing if no ng-model                                                                         // 2515\n      }                                                                                                               // 2516\n                                                                                                                      // 2517\n      // Setup configuration parameters                                                                               // 2518\n      var maxSize = angular.isDefined(attrs.maxSize) ? scope.$parent.$eval(attrs.maxSize) : paginationConfig.maxSize, // 2519\n          rotate = angular.isDefined(attrs.rotate) ? scope.$parent.$eval(attrs.rotate) : paginationConfig.rotate;     // 2520\n      scope.boundaryLinks = angular.isDefined(attrs.boundaryLinks) ? scope.$parent.$eval(attrs.boundaryLinks) : paginationConfig.boundaryLinks;\n      scope.directionLinks = angular.isDefined(attrs.directionLinks) ? scope.$parent.$eval(attrs.directionLinks) : paginationConfig.directionLinks;\n                                                                                                                      // 2523\n      paginationCtrl.init(ngModelCtrl, paginationConfig);                                                             // 2524\n                                                                                                                      // 2525\n      if (attrs.maxSize) {                                                                                            // 2526\n        scope.$parent.$watch($parse(attrs.maxSize), function(value) {                                                 // 2527\n          maxSize = parseInt(value, 10);                                                                              // 2528\n          paginationCtrl.render();                                                                                    // 2529\n        });                                                                                                           // 2530\n      }                                                                                                               // 2531\n                                                                                                                      // 2532\n      // Create page object used in template                                                                          // 2533\n      function makePage(number, text, isActive) {                                                                     // 2534\n        return {                                                                                                      // 2535\n          number: number,                                                                                             // 2536\n          text: text,                                                                                                 // 2537\n          active: isActive                                                                                            // 2538\n        };                                                                                                            // 2539\n      }                                                                                                               // 2540\n                                                                                                                      // 2541\n      function getPages(currentPage, totalPages) {                                                                    // 2542\n        var pages = [];                                                                                               // 2543\n                                                                                                                      // 2544\n        // Default page limits                                                                                        // 2545\n        var startPage = 1, endPage = totalPages;                                                                      // 2546\n        var isMaxSized = ( angular.isDefined(maxSize) && maxSize < totalPages );                                      // 2547\n                                                                                                                      // 2548\n        // recompute if maxSize                                                                                       // 2549\n        if ( isMaxSized ) {                                                                                           // 2550\n          if ( rotate ) {                                                                                             // 2551\n            // Current page is displayed in the middle of the visible ones                                            // 2552\n            startPage = Math.max(currentPage - Math.floor(maxSize/2), 1);                                             // 2553\n            endPage   = startPage + maxSize - 1;                                                                      // 2554\n                                                                                                                      // 2555\n            // Adjust if limit is exceeded                                                                            // 2556\n            if (endPage > totalPages) {                                                                               // 2557\n              endPage   = totalPages;                                                                                 // 2558\n              startPage = endPage - maxSize + 1;                                                                      // 2559\n            }                                                                                                         // 2560\n          } else {                                                                                                    // 2561\n            // Visible pages are paginated with maxSize                                                               // 2562\n            startPage = ((Math.ceil(currentPage / maxSize) - 1) * maxSize) + 1;                                       // 2563\n                                                                                                                      // 2564\n            // Adjust last page if limit is exceeded                                                                  // 2565\n            endPage = Math.min(startPage + maxSize - 1, totalPages);                                                  // 2566\n          }                                                                                                           // 2567\n        }                                                                                                             // 2568\n                                                                                                                      // 2569\n        // Add page number links                                                                                      // 2570\n        for (var number = startPage; number <= endPage; number++) {                                                   // 2571\n          var page = makePage(number, number, number === currentPage);                                                // 2572\n          pages.push(page);                                                                                           // 2573\n        }                                                                                                             // 2574\n                                                                                                                      // 2575\n        // Add links to move between page sets                                                                        // 2576\n        if ( isMaxSized && ! rotate ) {                                                                               // 2577\n          if ( startPage > 1 ) {                                                                                      // 2578\n            var previousPageSet = makePage(startPage - 1, '...', false);                                              // 2579\n            pages.unshift(previousPageSet);                                                                           // 2580\n          }                                                                                                           // 2581\n                                                                                                                      // 2582\n          if ( endPage < totalPages ) {                                                                               // 2583\n            var nextPageSet = makePage(endPage + 1, '...', false);                                                    // 2584\n            pages.push(nextPageSet);                                                                                  // 2585\n          }                                                                                                           // 2586\n        }                                                                                                             // 2587\n                                                                                                                      // 2588\n        return pages;                                                                                                 // 2589\n      }                                                                                                               // 2590\n                                                                                                                      // 2591\n      var originalRender = paginationCtrl.render;                                                                     // 2592\n      paginationCtrl.render = function() {                                                                            // 2593\n        originalRender();                                                                                             // 2594\n        if (scope.page > 0 && scope.page <= scope.totalPages) {                                                       // 2595\n          scope.pages = getPages(scope.page, scope.totalPages);                                                       // 2596\n        }                                                                                                             // 2597\n      };                                                                                                              // 2598\n    }                                                                                                                 // 2599\n  };                                                                                                                  // 2600\n}])                                                                                                                   // 2601\n                                                                                                                      // 2602\n.constant('pagerConfig', {                                                                                            // 2603\n  itemsPerPage: 10,                                                                                                   // 2604\n  previousText: '« Previous',                                                                                         // 2605\n  nextText: 'Next »',                                                                                                 // 2606\n  align: true                                                                                                         // 2607\n})                                                                                                                    // 2608\n                                                                                                                      // 2609\n.directive('pager', ['pagerConfig', function(pagerConfig) {                                                           // 2610\n  return {                                                                                                            // 2611\n    restrict: 'EA',                                                                                                   // 2612\n    scope: {                                                                                                          // 2613\n      totalItems: '=',                                                                                                // 2614\n      previousText: '@',                                                                                              // 2615\n      nextText: '@'                                                                                                   // 2616\n    },                                                                                                                // 2617\n    require: ['pager', '?ngModel'],                                                                                   // 2618\n    controller: 'PaginationController',                                                                               // 2619\n    templateUrl: 'template/pagination/pager.html',                                                                    // 2620\n    replace: true,                                                                                                    // 2621\n    link: function(scope, element, attrs, ctrls) {                                                                    // 2622\n      var paginationCtrl = ctrls[0], ngModelCtrl = ctrls[1];                                                          // 2623\n                                                                                                                      // 2624\n      if (!ngModelCtrl) {                                                                                             // 2625\n         return; // do nothing if no ng-model                                                                         // 2626\n      }                                                                                                               // 2627\n                                                                                                                      // 2628\n      scope.align = angular.isDefined(attrs.align) ? scope.$parent.$eval(attrs.align) : pagerConfig.align;            // 2629\n      paginationCtrl.init(ngModelCtrl, pagerConfig);                                                                  // 2630\n    }                                                                                                                 // 2631\n  };                                                                                                                  // 2632\n}]);                                                                                                                  // 2633\n                                                                                                                      // 2634\n/**                                                                                                                   // 2635\n * The following features are still outstanding: animation as a                                                       // 2636\n * function, placement as a function, inside, support for more triggers than                                          // 2637\n * just mouse enter/leave, html tooltips, and selector delegation.                                                    // 2638\n */                                                                                                                   // 2639\nangular.module( 'ui.bootstrap.tooltip', [ 'ui.bootstrap.position', 'ui.bootstrap.bindHtml' ] )                        // 2640\n                                                                                                                      // 2641\n/**                                                                                                                   // 2642\n * The $tooltip service creates tooltip- and popover-like directives as well as                                       // 2643\n * houses global options for them.                                                                                    // 2644\n */                                                                                                                   // 2645\n.provider( '$tooltip', function () {                                                                                  // 2646\n  // The default options tooltip and popover.                                                                         // 2647\n  var defaultOptions = {                                                                                              // 2648\n    placement: 'top',                                                                                                 // 2649\n    animation: true,                                                                                                  // 2650\n    popupDelay: 0,                                                                                                    // 2651\n    useContentExp: false                                                                                              // 2652\n  };                                                                                                                  // 2653\n                                                                                                                      // 2654\n  // Default hide triggers for each show trigger                                                                      // 2655\n  var triggerMap = {                                                                                                  // 2656\n    'mouseenter': 'mouseleave',                                                                                       // 2657\n    'click': 'click',                                                                                                 // 2658\n    'focus': 'blur'                                                                                                   // 2659\n  };                                                                                                                  // 2660\n                                                                                                                      // 2661\n  // The options specified to the provider globally.                                                                  // 2662\n  var globalOptions = {};                                                                                             // 2663\n                                                                                                                      // 2664\n  /**                                                                                                                 // 2665\n   * `options({})` allows global configuration of all tooltips in the                                                 // 2666\n   * application.                                                                                                     // 2667\n   *                                                                                                                  // 2668\n   *   var app = angular.module( 'App', ['ui.bootstrap.tooltip'], function( $tooltipProvider ) {                      // 2669\n   *     // place tooltips left instead of top by default                                                             // 2670\n   *     $tooltipProvider.options( { placement: 'left' } );                                                           // 2671\n   *   });                                                                                                            // 2672\n   */                                                                                                                 // 2673\n\tthis.options = function( value ) {                                                                                   // 2674\n\t\tangular.extend( globalOptions, value );                                                                             // 2675\n\t};                                                                                                                   // 2676\n                                                                                                                      // 2677\n  /**                                                                                                                 // 2678\n   * This allows you to extend the set of trigger mappings available. E.g.:                                           // 2679\n   *                                                                                                                  // 2680\n   *   $tooltipProvider.setTriggers( 'openTrigger': 'closeTrigger' );                                                 // 2681\n   */                                                                                                                 // 2682\n  this.setTriggers = function setTriggers ( triggers ) {                                                              // 2683\n    angular.extend( triggerMap, triggers );                                                                           // 2684\n  };                                                                                                                  // 2685\n                                                                                                                      // 2686\n  /**                                                                                                                 // 2687\n   * This is a helper function for translating camel-case to snake-case.                                              // 2688\n   */                                                                                                                 // 2689\n  function snake_case(name){                                                                                          // 2690\n    var regexp = /[A-Z]/g;                                                                                            // 2691\n    var separator = '-';                                                                                              // 2692\n    return name.replace(regexp, function(letter, pos) {                                                               // 2693\n      return (pos ? separator : '') + letter.toLowerCase();                                                           // 2694\n    });                                                                                                               // 2695\n  }                                                                                                                   // 2696\n                                                                                                                      // 2697\n  /**                                                                                                                 // 2698\n   * Returns the actual instance of the $tooltip service.                                                             // 2699\n   * TODO support multiple triggers                                                                                   // 2700\n   */                                                                                                                 // 2701\n  this.$get = [ '$window', '$compile', '$timeout', '$document', '$position', '$interpolate', function ( $window, $compile, $timeout, $document, $position, $interpolate ) {\n    return function $tooltip ( type, prefix, defaultTriggerShow, options ) {                                          // 2703\n      options = angular.extend( {}, defaultOptions, globalOptions, options );                                         // 2704\n                                                                                                                      // 2705\n      /**                                                                                                             // 2706\n       * Returns an object of show and hide triggers.                                                                 // 2707\n       *                                                                                                              // 2708\n       * If a trigger is supplied,                                                                                    // 2709\n       * it is used to show the tooltip; otherwise, it will use the `trigger`                                         // 2710\n       * option passed to the `$tooltipProvider.options` method; else it will                                         // 2711\n       * default to the trigger supplied to this directive factory.                                                   // 2712\n       *                                                                                                              // 2713\n       * The hide trigger is based on the show trigger. If the `trigger` option                                       // 2714\n       * was passed to the `$tooltipProvider.options` method, it will use the                                         // 2715\n       * mapped trigger from `triggerMap` or the passed trigger if the map is                                         // 2716\n       * undefined; otherwise, it uses the `triggerMap` value of the show                                             // 2717\n       * trigger; else it will just use the show trigger.                                                             // 2718\n       */                                                                                                             // 2719\n      function getTriggers ( trigger ) {                                                                              // 2720\n        var show = trigger || options.trigger || defaultTriggerShow;                                                  // 2721\n        var hide = triggerMap[show] || show;                                                                          // 2722\n        return {                                                                                                      // 2723\n          show: show,                                                                                                 // 2724\n          hide: hide                                                                                                  // 2725\n        };                                                                                                            // 2726\n      }                                                                                                               // 2727\n                                                                                                                      // 2728\n      var directiveName = snake_case( type );                                                                         // 2729\n                                                                                                                      // 2730\n      var startSym = $interpolate.startSymbol();                                                                      // 2731\n      var endSym = $interpolate.endSymbol();                                                                          // 2732\n      var template =                                                                                                  // 2733\n        '<div '+ directiveName +'-popup '+                                                                            // 2734\n          'title=\"'+startSym+'title'+endSym+'\" '+                                                                     // 2735\n          (options.useContentExp ?                                                                                    // 2736\n            'content-exp=\"contentExp()\" ' :                                                                           // 2737\n            'content=\"'+startSym+'content'+endSym+'\" ') +                                                             // 2738\n          'placement=\"'+startSym+'placement'+endSym+'\" '+                                                             // 2739\n          'popup-class=\"'+startSym+'popupClass'+endSym+'\" '+                                                          // 2740\n          'animation=\"animation\" '+                                                                                   // 2741\n          'is-open=\"isOpen\"'+                                                                                         // 2742\n          'origin-scope=\"origScope\" '+                                                                                // 2743\n          '>'+                                                                                                        // 2744\n        '</div>';                                                                                                     // 2745\n                                                                                                                      // 2746\n      return {                                                                                                        // 2747\n        restrict: 'EA',                                                                                               // 2748\n        compile: function (tElem, tAttrs) {                                                                           // 2749\n          var tooltipLinker = $compile( template );                                                                   // 2750\n                                                                                                                      // 2751\n          return function link ( scope, element, attrs, tooltipCtrl ) {                                               // 2752\n            var tooltip;                                                                                              // 2753\n            var tooltipLinkedScope;                                                                                   // 2754\n            var transitionTimeout;                                                                                    // 2755\n            var popupTimeout;                                                                                         // 2756\n            var appendToBody = angular.isDefined( options.appendToBody ) ? options.appendToBody : false;              // 2757\n            var triggers = getTriggers( undefined );                                                                  // 2758\n            var hasEnableExp = angular.isDefined(attrs[prefix+'Enable']);                                             // 2759\n            var ttScope = scope.$new(true);                                                                           // 2760\n                                                                                                                      // 2761\n            var positionTooltip = function () {                                                                       // 2762\n              if (!tooltip) { return; }                                                                               // 2763\n                                                                                                                      // 2764\n              var ttPosition = $position.positionElements(element, tooltip, ttScope.placement, appendToBody);         // 2765\n              ttPosition.top += 'px';                                                                                 // 2766\n              ttPosition.left += 'px';                                                                                // 2767\n                                                                                                                      // 2768\n              // Now set the calculated positioning.                                                                  // 2769\n              tooltip.css( ttPosition );                                                                              // 2770\n            };                                                                                                        // 2771\n                                                                                                                      // 2772\n            // Set up the correct scope to allow transclusion later                                                   // 2773\n            ttScope.origScope = scope;                                                                                // 2774\n                                                                                                                      // 2775\n            // By default, the tooltip is not open.                                                                   // 2776\n            // TODO add ability to start tooltip opened                                                               // 2777\n            ttScope.isOpen = false;                                                                                   // 2778\n                                                                                                                      // 2779\n            function toggleTooltipBind () {                                                                           // 2780\n              if ( ! ttScope.isOpen ) {                                                                               // 2781\n                showTooltipBind();                                                                                    // 2782\n              } else {                                                                                                // 2783\n                hideTooltipBind();                                                                                    // 2784\n              }                                                                                                       // 2785\n            }                                                                                                         // 2786\n                                                                                                                      // 2787\n            // Show the tooltip with delay if specified, otherwise show it immediately                                // 2788\n            function showTooltipBind() {                                                                              // 2789\n              if(hasEnableExp && !scope.$eval(attrs[prefix+'Enable'])) {                                              // 2790\n                return;                                                                                               // 2791\n              }                                                                                                       // 2792\n                                                                                                                      // 2793\n              prepareTooltip();                                                                                       // 2794\n                                                                                                                      // 2795\n              if ( ttScope.popupDelay ) {                                                                             // 2796\n                // Do nothing if the tooltip was already scheduled to pop-up.                                         // 2797\n                // This happens if show is triggered multiple times before any hide is triggered.                     // 2798\n                if (!popupTimeout) {                                                                                  // 2799\n                  popupTimeout = $timeout( show, ttScope.popupDelay, false );                                         // 2800\n                  popupTimeout.then(function(reposition){reposition();});                                             // 2801\n                }                                                                                                     // 2802\n              } else {                                                                                                // 2803\n                show()();                                                                                             // 2804\n              }                                                                                                       // 2805\n            }                                                                                                         // 2806\n                                                                                                                      // 2807\n            function hideTooltipBind () {                                                                             // 2808\n              scope.$apply(function () {                                                                              // 2809\n                hide();                                                                                               // 2810\n              });                                                                                                     // 2811\n            }                                                                                                         // 2812\n                                                                                                                      // 2813\n            // Show the tooltip popup element.                                                                        // 2814\n            function show() {                                                                                         // 2815\n                                                                                                                      // 2816\n              popupTimeout = null;                                                                                    // 2817\n                                                                                                                      // 2818\n              // If there is a pending remove transition, we must cancel it, lest the                                 // 2819\n              // tooltip be mysteriously removed.                                                                     // 2820\n              if ( transitionTimeout ) {                                                                              // 2821\n                $timeout.cancel( transitionTimeout );                                                                 // 2822\n                transitionTimeout = null;                                                                             // 2823\n              }                                                                                                       // 2824\n                                                                                                                      // 2825\n              // Don't show empty tooltips.                                                                           // 2826\n              if ( !(options.useContentExp ? ttScope.contentExp() : ttScope.content) ) {                              // 2827\n                return angular.noop;                                                                                  // 2828\n              }                                                                                                       // 2829\n                                                                                                                      // 2830\n              createTooltip();                                                                                        // 2831\n                                                                                                                      // 2832\n              // Set the initial positioning.                                                                         // 2833\n              tooltip.css({ top: 0, left: 0, display: 'block' });                                                     // 2834\n              ttScope.$digest();                                                                                      // 2835\n                                                                                                                      // 2836\n              positionTooltip();                                                                                      // 2837\n                                                                                                                      // 2838\n              // And show the tooltip.                                                                                // 2839\n              ttScope.isOpen = true;                                                                                  // 2840\n              ttScope.$apply(); // digest required as $apply is not called                                            // 2841\n                                                                                                                      // 2842\n              // Return positioning function as promise callback for correct                                          // 2843\n              // positioning after draw.                                                                              // 2844\n              return positionTooltip;                                                                                 // 2845\n            }                                                                                                         // 2846\n                                                                                                                      // 2847\n            // Hide the tooltip popup element.                                                                        // 2848\n            function hide() {                                                                                         // 2849\n              // First things first: we don't show it anymore.                                                        // 2850\n              ttScope.isOpen = false;                                                                                 // 2851\n                                                                                                                      // 2852\n              //if tooltip is going to be shown after delay, we must cancel this                                      // 2853\n              $timeout.cancel( popupTimeout );                                                                        // 2854\n              popupTimeout = null;                                                                                    // 2855\n                                                                                                                      // 2856\n              // And now we remove it from the DOM. However, if we have animation, we                                 // 2857\n              // need to wait for it to expire beforehand.                                                            // 2858\n              // FIXME: this is a placeholder for a port of the transitions library.                                  // 2859\n              if ( ttScope.animation ) {                                                                              // 2860\n                if (!transitionTimeout) {                                                                             // 2861\n                  transitionTimeout = $timeout(removeTooltip, 500);                                                   // 2862\n                }                                                                                                     // 2863\n              } else {                                                                                                // 2864\n                removeTooltip();                                                                                      // 2865\n              }                                                                                                       // 2866\n            }                                                                                                         // 2867\n                                                                                                                      // 2868\n            function createTooltip() {                                                                                // 2869\n              // There can only be one tooltip element per directive shown at once.                                   // 2870\n              if (tooltip) {                                                                                          // 2871\n                removeTooltip();                                                                                      // 2872\n              }                                                                                                       // 2873\n              tooltipLinkedScope = ttScope.$new();                                                                    // 2874\n              tooltip = tooltipLinker(tooltipLinkedScope, function (tooltip) {                                        // 2875\n                if ( appendToBody ) {                                                                                 // 2876\n                  $document.find( 'body' ).append( tooltip );                                                         // 2877\n                } else {                                                                                              // 2878\n                  element.after( tooltip );                                                                           // 2879\n                }                                                                                                     // 2880\n              });                                                                                                     // 2881\n                                                                                                                      // 2882\n              tooltipLinkedScope.$watch(function () {                                                                 // 2883\n                $timeout(positionTooltip, 0, false);                                                                  // 2884\n              });                                                                                                     // 2885\n                                                                                                                      // 2886\n              if (options.useContentExp) {                                                                            // 2887\n                tooltipLinkedScope.$watch('contentExp()', function (val) {                                            // 2888\n                  if (!val && ttScope.isOpen ) {                                                                      // 2889\n                    hide();                                                                                           // 2890\n                  }                                                                                                   // 2891\n                });                                                                                                   // 2892\n              }                                                                                                       // 2893\n            }                                                                                                         // 2894\n                                                                                                                      // 2895\n            function removeTooltip() {                                                                                // 2896\n              transitionTimeout = null;                                                                               // 2897\n              if (tooltip) {                                                                                          // 2898\n                tooltip.remove();                                                                                     // 2899\n                tooltip = null;                                                                                       // 2900\n              }                                                                                                       // 2901\n              if (tooltipLinkedScope) {                                                                               // 2902\n                tooltipLinkedScope.$destroy();                                                                        // 2903\n                tooltipLinkedScope = null;                                                                            // 2904\n              }                                                                                                       // 2905\n            }                                                                                                         // 2906\n                                                                                                                      // 2907\n            function prepareTooltip() {                                                                               // 2908\n              prepPopupClass();                                                                                       // 2909\n              prepPlacement();                                                                                        // 2910\n              prepPopupDelay();                                                                                       // 2911\n            }                                                                                                         // 2912\n                                                                                                                      // 2913\n            ttScope.contentExp = function () {                                                                        // 2914\n              return scope.$eval(attrs[type]);                                                                        // 2915\n            };                                                                                                        // 2916\n                                                                                                                      // 2917\n            /**                                                                                                       // 2918\n             * Observe the relevant attributes.                                                                       // 2919\n             */                                                                                                       // 2920\n            if (!options.useContentExp) {                                                                             // 2921\n              attrs.$observe( type, function ( val ) {                                                                // 2922\n                ttScope.content = val;                                                                                // 2923\n                                                                                                                      // 2924\n                if (!val && ttScope.isOpen ) {                                                                        // 2925\n                  hide();                                                                                             // 2926\n                }                                                                                                     // 2927\n              });                                                                                                     // 2928\n            }                                                                                                         // 2929\n                                                                                                                      // 2930\n            attrs.$observe( 'disabled', function ( val ) {                                                            // 2931\n              if (val && ttScope.isOpen ) {                                                                           // 2932\n                hide();                                                                                               // 2933\n              }                                                                                                       // 2934\n            });                                                                                                       // 2935\n                                                                                                                      // 2936\n            attrs.$observe( prefix+'Title', function ( val ) {                                                        // 2937\n              ttScope.title = val;                                                                                    // 2938\n            });                                                                                                       // 2939\n                                                                                                                      // 2940\n            function prepPopupClass() {                                                                               // 2941\n              ttScope.popupClass = attrs[prefix + 'Class'];                                                           // 2942\n            }                                                                                                         // 2943\n                                                                                                                      // 2944\n            function prepPlacement() {                                                                                // 2945\n              var val = attrs[ prefix + 'Placement' ];                                                                // 2946\n              ttScope.placement = angular.isDefined( val ) ? val : options.placement;                                 // 2947\n            }                                                                                                         // 2948\n                                                                                                                      // 2949\n            function prepPopupDelay() {                                                                               // 2950\n              var val = attrs[ prefix + 'PopupDelay' ];                                                               // 2951\n              var delay = parseInt( val, 10 );                                                                        // 2952\n              ttScope.popupDelay = ! isNaN(delay) ? delay : options.popupDelay;                                       // 2953\n            }                                                                                                         // 2954\n                                                                                                                      // 2955\n            var unregisterTriggers = function () {                                                                    // 2956\n              element.unbind(triggers.show, showTooltipBind);                                                         // 2957\n              element.unbind(triggers.hide, hideTooltipBind);                                                         // 2958\n            };                                                                                                        // 2959\n                                                                                                                      // 2960\n            function prepTriggers() {                                                                                 // 2961\n              var val = attrs[ prefix + 'Trigger' ];                                                                  // 2962\n              unregisterTriggers();                                                                                   // 2963\n                                                                                                                      // 2964\n              triggers = getTriggers( val );                                                                          // 2965\n                                                                                                                      // 2966\n              if ( triggers.show === triggers.hide ) {                                                                // 2967\n                element.bind( triggers.show, toggleTooltipBind );                                                     // 2968\n              } else {                                                                                                // 2969\n                element.bind( triggers.show, showTooltipBind );                                                       // 2970\n                element.bind( triggers.hide, hideTooltipBind );                                                       // 2971\n              }                                                                                                       // 2972\n            }                                                                                                         // 2973\n            prepTriggers();                                                                                           // 2974\n                                                                                                                      // 2975\n            var animation = scope.$eval(attrs[prefix + 'Animation']);                                                 // 2976\n            ttScope.animation = angular.isDefined(animation) ? !!animation : options.animation;                       // 2977\n                                                                                                                      // 2978\n            var appendToBodyVal = scope.$eval(attrs[prefix + 'AppendToBody']);                                        // 2979\n            appendToBody = angular.isDefined(appendToBodyVal) ? appendToBodyVal : appendToBody;                       // 2980\n                                                                                                                      // 2981\n            // if a tooltip is attached to <body> we need to remove it on                                             // 2982\n            // location change as its parent scope will probably not be destroyed                                     // 2983\n            // by the change.                                                                                         // 2984\n            if ( appendToBody ) {                                                                                     // 2985\n              scope.$on('$locationChangeSuccess', function closeTooltipOnLocationChangeSuccess () {                   // 2986\n              if ( ttScope.isOpen ) {                                                                                 // 2987\n                hide();                                                                                               // 2988\n              }                                                                                                       // 2989\n            });                                                                                                       // 2990\n            }                                                                                                         // 2991\n                                                                                                                      // 2992\n            // Make sure tooltip is destroyed and removed.                                                            // 2993\n            scope.$on('$destroy', function onDestroyTooltip() {                                                       // 2994\n              $timeout.cancel( transitionTimeout );                                                                   // 2995\n              $timeout.cancel( popupTimeout );                                                                        // 2996\n              unregisterTriggers();                                                                                   // 2997\n              removeTooltip();                                                                                        // 2998\n              ttScope = null;                                                                                         // 2999\n            });                                                                                                       // 3000\n          };                                                                                                          // 3001\n        }                                                                                                             // 3002\n      };                                                                                                              // 3003\n    };                                                                                                                // 3004\n  }];                                                                                                                 // 3005\n})                                                                                                                    // 3006\n                                                                                                                      // 3007\n// This is mostly ngInclude code but with a custom scope                                                              // 3008\n.directive( 'tooltipTemplateTransclude', [                                                                            // 3009\n         '$animate', '$sce', '$compile', '$templateRequest',                                                          // 3010\nfunction ($animate ,  $sce ,  $compile ,  $templateRequest) {                                                         // 3011\n  return {                                                                                                            // 3012\n    link: function ( scope, elem, attrs ) {                                                                           // 3013\n      var origScope = scope.$eval(attrs.tooltipTemplateTranscludeScope);                                              // 3014\n                                                                                                                      // 3015\n      var changeCounter = 0,                                                                                          // 3016\n        currentScope,                                                                                                 // 3017\n        previousElement,                                                                                              // 3018\n        currentElement;                                                                                               // 3019\n                                                                                                                      // 3020\n      var cleanupLastIncludeContent = function() {                                                                    // 3021\n        if (previousElement) {                                                                                        // 3022\n          previousElement.remove();                                                                                   // 3023\n          previousElement = null;                                                                                     // 3024\n        }                                                                                                             // 3025\n        if (currentScope) {                                                                                           // 3026\n          currentScope.$destroy();                                                                                    // 3027\n          currentScope = null;                                                                                        // 3028\n        }                                                                                                             // 3029\n        if (currentElement) {                                                                                         // 3030\n          $animate.leave(currentElement).then(function() {                                                            // 3031\n            previousElement = null;                                                                                   // 3032\n          });                                                                                                         // 3033\n          previousElement = currentElement;                                                                           // 3034\n          currentElement = null;                                                                                      // 3035\n        }                                                                                                             // 3036\n      };                                                                                                              // 3037\n                                                                                                                      // 3038\n      scope.$watch($sce.parseAsResourceUrl(attrs.tooltipTemplateTransclude), function (src) {                         // 3039\n        var thisChangeId = ++changeCounter;                                                                           // 3040\n                                                                                                                      // 3041\n        if (src) {                                                                                                    // 3042\n          //set the 2nd param to true to ignore the template request error so that the inner                          // 3043\n          //contents and scope can be cleaned up.                                                                     // 3044\n          $templateRequest(src, true).then(function(response) {                                                       // 3045\n            if (thisChangeId !== changeCounter) { return; }                                                           // 3046\n            var newScope = origScope.$new();                                                                          // 3047\n            var template = response;                                                                                  // 3048\n                                                                                                                      // 3049\n            var clone = $compile(template)(newScope, function(clone) {                                                // 3050\n              cleanupLastIncludeContent();                                                                            // 3051\n              $animate.enter(clone, elem);                                                                            // 3052\n            });                                                                                                       // 3053\n                                                                                                                      // 3054\n            currentScope = newScope;                                                                                  // 3055\n            currentElement = clone;                                                                                   // 3056\n                                                                                                                      // 3057\n            currentScope.$emit('$includeContentLoaded', src);                                                         // 3058\n          }, function() {                                                                                             // 3059\n            if (thisChangeId === changeCounter) {                                                                     // 3060\n              cleanupLastIncludeContent();                                                                            // 3061\n              scope.$emit('$includeContentError', src);                                                               // 3062\n            }                                                                                                         // 3063\n          });                                                                                                         // 3064\n          scope.$emit('$includeContentRequested', src);                                                               // 3065\n        } else {                                                                                                      // 3066\n          cleanupLastIncludeContent();                                                                                // 3067\n        }                                                                                                             // 3068\n      });                                                                                                             // 3069\n                                                                                                                      // 3070\n      scope.$on('$destroy', cleanupLastIncludeContent);                                                               // 3071\n    }                                                                                                                 // 3072\n  };                                                                                                                  // 3073\n}])                                                                                                                   // 3074\n                                                                                                                      // 3075\n/**                                                                                                                   // 3076\n * Note that it's intentional that these classes are *not* applied through $animate.                                  // 3077\n * They must not be animated as they're expected to be present on the tooltip on                                      // 3078\n * initialization.                                                                                                    // 3079\n */                                                                                                                   // 3080\n.directive('tooltipClasses', function () {                                                                            // 3081\n  return {                                                                                                            // 3082\n    restrict: 'A',                                                                                                    // 3083\n    link: function (scope, element, attrs) {                                                                          // 3084\n      if (scope.placement) {                                                                                          // 3085\n        element.addClass(scope.placement);                                                                            // 3086\n      }                                                                                                               // 3087\n      if (scope.popupClass) {                                                                                         // 3088\n        element.addClass(scope.popupClass);                                                                           // 3089\n      }                                                                                                               // 3090\n      if (scope.animation()) {                                                                                        // 3091\n        element.addClass(attrs.tooltipAnimationClass);                                                                // 3092\n      }                                                                                                               // 3093\n    }                                                                                                                 // 3094\n  };                                                                                                                  // 3095\n})                                                                                                                    // 3096\n                                                                                                                      // 3097\n.directive( 'tooltipPopup', function () {                                                                             // 3098\n  return {                                                                                                            // 3099\n    restrict: 'EA',                                                                                                   // 3100\n    replace: true,                                                                                                    // 3101\n    scope: { content: '@', placement: '@', popupClass: '@', animation: '&', isOpen: '&' },                            // 3102\n    templateUrl: 'template/tooltip/tooltip-popup.html'                                                                // 3103\n  };                                                                                                                  // 3104\n})                                                                                                                    // 3105\n                                                                                                                      // 3106\n.directive( 'tooltip', [ '$tooltip', function ( $tooltip ) {                                                          // 3107\n  return $tooltip( 'tooltip', 'tooltip', 'mouseenter' );                                                              // 3108\n}])                                                                                                                   // 3109\n                                                                                                                      // 3110\n.directive( 'tooltipTemplatePopup', function () {                                                                     // 3111\n  return {                                                                                                            // 3112\n    restrict: 'EA',                                                                                                   // 3113\n    replace: true,                                                                                                    // 3114\n    scope: { contentExp: '&', placement: '@', popupClass: '@', animation: '&', isOpen: '&',                           // 3115\n      originScope: '&' },                                                                                             // 3116\n    templateUrl: 'template/tooltip/tooltip-template-popup.html'                                                       // 3117\n  };                                                                                                                  // 3118\n})                                                                                                                    // 3119\n                                                                                                                      // 3120\n.directive( 'tooltipTemplate', [ '$tooltip', function ( $tooltip ) {                                                  // 3121\n  return $tooltip('tooltipTemplate', 'tooltip', 'mouseenter', {                                                       // 3122\n    useContentExp: true                                                                                               // 3123\n  });                                                                                                                 // 3124\n}])                                                                                                                   // 3125\n                                                                                                                      // 3126\n.directive( 'tooltipHtmlPopup', function () {                                                                         // 3127\n  return {                                                                                                            // 3128\n    restrict: 'EA',                                                                                                   // 3129\n    replace: true,                                                                                                    // 3130\n    scope: { contentExp: '&', placement: '@', popupClass: '@', animation: '&', isOpen: '&' },                         // 3131\n    templateUrl: 'template/tooltip/tooltip-html-popup.html'                                                           // 3132\n  };                                                                                                                  // 3133\n})                                                                                                                    // 3134\n                                                                                                                      // 3135\n.directive( 'tooltipHtml', [ '$tooltip', function ( $tooltip ) {                                                      // 3136\n  return $tooltip('tooltipHtml', 'tooltip', 'mouseenter', {                                                           // 3137\n    useContentExp: true                                                                                               // 3138\n  });                                                                                                                 // 3139\n}])                                                                                                                   // 3140\n                                                                                                                      // 3141\n/*                                                                                                                    // 3142\nDeprecated                                                                                                            // 3143\n*/                                                                                                                    // 3144\n.directive( 'tooltipHtmlUnsafePopup', function () {                                                                   // 3145\n  return {                                                                                                            // 3146\n    restrict: 'EA',                                                                                                   // 3147\n    replace: true,                                                                                                    // 3148\n    scope: { content: '@', placement: '@', popupClass: '@', animation: '&', isOpen: '&' },                            // 3149\n    templateUrl: 'template/tooltip/tooltip-html-unsafe-popup.html'                                                    // 3150\n  };                                                                                                                  // 3151\n})                                                                                                                    // 3152\n                                                                                                                      // 3153\n.value('tooltipHtmlUnsafeSuppressDeprecated', false)                                                                  // 3154\n.directive( 'tooltipHtmlUnsafe', [                                                                                    // 3155\n          '$tooltip', 'tooltipHtmlUnsafeSuppressDeprecated', '$log',                                                  // 3156\nfunction ( $tooltip ,  tooltipHtmlUnsafeSuppressDeprecated ,  $log) {                                                 // 3157\n  if (!tooltipHtmlUnsafeSuppressDeprecated) {                                                                         // 3158\n    $log.warn('tooltip-html-unsafe is now deprecated. Use tooltip-html or tooltip-template instead.');                // 3159\n  }                                                                                                                   // 3160\n  return $tooltip( 'tooltipHtmlUnsafe', 'tooltip', 'mouseenter' );                                                    // 3161\n}]);                                                                                                                  // 3162\n                                                                                                                      // 3163\n/**                                                                                                                   // 3164\n * The following features are still outstanding: popup delay, animation as a                                          // 3165\n * function, placement as a function, inside, support for more triggers than                                          // 3166\n * just mouse enter/leave, html popovers, and selector delegatation.                                                  // 3167\n */                                                                                                                   // 3168\nangular.module( 'ui.bootstrap.popover', [ 'ui.bootstrap.tooltip' ] )                                                  // 3169\n                                                                                                                      // 3170\n.directive( 'popoverTemplatePopup', function () {                                                                     // 3171\n  return {                                                                                                            // 3172\n    restrict: 'EA',                                                                                                   // 3173\n    replace: true,                                                                                                    // 3174\n    scope: { title: '@', contentExp: '&', placement: '@', popupClass: '@', animation: '&', isOpen: '&',               // 3175\n      originScope: '&' },                                                                                             // 3176\n    templateUrl: 'template/popover/popover-template.html'                                                             // 3177\n  };                                                                                                                  // 3178\n})                                                                                                                    // 3179\n                                                                                                                      // 3180\n.directive( 'popoverTemplate', [ '$tooltip', function ( $tooltip ) {                                                  // 3181\n  return $tooltip( 'popoverTemplate', 'popover', 'click', {                                                           // 3182\n    useContentExp: true                                                                                               // 3183\n  } );                                                                                                                // 3184\n}])                                                                                                                   // 3185\n                                                                                                                      // 3186\n.directive( 'popoverPopup', function () {                                                                             // 3187\n  return {                                                                                                            // 3188\n    restrict: 'EA',                                                                                                   // 3189\n    replace: true,                                                                                                    // 3190\n    scope: { title: '@', content: '@', placement: '@', popupClass: '@', animation: '&', isOpen: '&' },                // 3191\n    templateUrl: 'template/popover/popover.html'                                                                      // 3192\n  };                                                                                                                  // 3193\n})                                                                                                                    // 3194\n                                                                                                                      // 3195\n.directive( 'popover', [ '$tooltip', function ( $tooltip ) {                                                          // 3196\n  return $tooltip( 'popover', 'popover', 'click' );                                                                   // 3197\n}]);                                                                                                                  // 3198\n                                                                                                                      // 3199\nangular.module('ui.bootstrap.progressbar', [])                                                                        // 3200\n                                                                                                                      // 3201\n.constant('progressConfig', {                                                                                         // 3202\n  animate: true,                                                                                                      // 3203\n  max: 100                                                                                                            // 3204\n})                                                                                                                    // 3205\n                                                                                                                      // 3206\n.controller('ProgressController', ['$scope', '$attrs', 'progressConfig', function($scope, $attrs, progressConfig) {   // 3207\n    var self = this,                                                                                                  // 3208\n        animate = angular.isDefined($attrs.animate) ? $scope.$parent.$eval($attrs.animate) : progressConfig.animate;  // 3209\n                                                                                                                      // 3210\n    this.bars = [];                                                                                                   // 3211\n    $scope.max = angular.isDefined($scope.max) ? $scope.max : progressConfig.max;                                     // 3212\n                                                                                                                      // 3213\n    this.addBar = function(bar, element) {                                                                            // 3214\n        if ( !animate ) {                                                                                             // 3215\n            element.css({'transition': 'none'});                                                                      // 3216\n        }                                                                                                             // 3217\n                                                                                                                      // 3218\n        this.bars.push(bar);                                                                                          // 3219\n                                                                                                                      // 3220\n        bar.$watch('value', function( value ) {                                                                       // 3221\n            bar.percent = +(100 * value / $scope.max).toFixed(2);                                                     // 3222\n        });                                                                                                           // 3223\n                                                                                                                      // 3224\n        bar.$on('$destroy', function() {                                                                              // 3225\n            element = null;                                                                                           // 3226\n            self.removeBar(bar);                                                                                      // 3227\n        });                                                                                                           // 3228\n    };                                                                                                                // 3229\n                                                                                                                      // 3230\n    this.removeBar = function(bar) {                                                                                  // 3231\n        this.bars.splice(this.bars.indexOf(bar), 1);                                                                  // 3232\n    };                                                                                                                // 3233\n}])                                                                                                                   // 3234\n                                                                                                                      // 3235\n.directive('progress', function() {                                                                                   // 3236\n    return {                                                                                                          // 3237\n        restrict: 'EA',                                                                                               // 3238\n        replace: true,                                                                                                // 3239\n        transclude: true,                                                                                             // 3240\n        controller: 'ProgressController',                                                                             // 3241\n        require: 'progress',                                                                                          // 3242\n        scope: {},                                                                                                    // 3243\n        templateUrl: 'template/progressbar/progress.html'                                                             // 3244\n    };                                                                                                                // 3245\n})                                                                                                                    // 3246\n                                                                                                                      // 3247\n.directive('bar', function() {                                                                                        // 3248\n    return {                                                                                                          // 3249\n        restrict: 'EA',                                                                                               // 3250\n        replace: true,                                                                                                // 3251\n        transclude: true,                                                                                             // 3252\n        require: '^progress',                                                                                         // 3253\n        scope: {                                                                                                      // 3254\n            value: '=',                                                                                               // 3255\n            max: '=?',                                                                                                // 3256\n            type: '@'                                                                                                 // 3257\n        },                                                                                                            // 3258\n        templateUrl: 'template/progressbar/bar.html',                                                                 // 3259\n        link: function(scope, element, attrs, progressCtrl) {                                                         // 3260\n            progressCtrl.addBar(scope, element);                                                                      // 3261\n        }                                                                                                             // 3262\n    };                                                                                                                // 3263\n})                                                                                                                    // 3264\n                                                                                                                      // 3265\n.directive('progressbar', function() {                                                                                // 3266\n    return {                                                                                                          // 3267\n        restrict: 'EA',                                                                                               // 3268\n        replace: true,                                                                                                // 3269\n        transclude: true,                                                                                             // 3270\n        controller: 'ProgressController',                                                                             // 3271\n        scope: {                                                                                                      // 3272\n            value: '=',                                                                                               // 3273\n            max: '=?',                                                                                                // 3274\n            type: '@'                                                                                                 // 3275\n        },                                                                                                            // 3276\n        templateUrl: 'template/progressbar/progressbar.html',                                                         // 3277\n        link: function(scope, element, attrs, progressCtrl) {                                                         // 3278\n            progressCtrl.addBar(scope, angular.element(element.children()[0]));                                       // 3279\n        }                                                                                                             // 3280\n    };                                                                                                                // 3281\n});                                                                                                                   // 3282\n                                                                                                                      // 3283\nangular.module('ui.bootstrap.rating', [])                                                                             // 3284\n                                                                                                                      // 3285\n.constant('ratingConfig', {                                                                                           // 3286\n  max: 5,                                                                                                             // 3287\n  stateOn: null,                                                                                                      // 3288\n  stateOff: null                                                                                                      // 3289\n})                                                                                                                    // 3290\n                                                                                                                      // 3291\n.controller('RatingController', ['$scope', '$attrs', 'ratingConfig', function($scope, $attrs, ratingConfig) {         // 3292\n  var ngModelCtrl  = { $setViewValue: angular.noop };                                                                 // 3293\n                                                                                                                      // 3294\n  this.init = function(ngModelCtrl_) {                                                                                // 3295\n    ngModelCtrl = ngModelCtrl_;                                                                                       // 3296\n    ngModelCtrl.$render = this.render;                                                                                // 3297\n                                                                                                                      // 3298\n    ngModelCtrl.$formatters.push(function(value) {                                                                    // 3299\n      if (angular.isNumber(value) && value << 0 !== value) {                                                          // 3300\n        value = Math.round(value);                                                                                    // 3301\n      }                                                                                                               // 3302\n      return value;                                                                                                   // 3303\n    });                                                                                                               // 3304\n                                                                                                                      // 3305\n    this.stateOn = angular.isDefined($attrs.stateOn) ? $scope.$parent.$eval($attrs.stateOn) : ratingConfig.stateOn;   // 3306\n    this.stateOff = angular.isDefined($attrs.stateOff) ? $scope.$parent.$eval($attrs.stateOff) : ratingConfig.stateOff;\n                                                                                                                      // 3308\n    var ratingStates = angular.isDefined($attrs.ratingStates) ? $scope.$parent.$eval($attrs.ratingStates) :           // 3309\n                        new Array( angular.isDefined($attrs.max) ? $scope.$parent.$eval($attrs.max) : ratingConfig.max );\n    $scope.range = this.buildTemplateObjects(ratingStates);                                                           // 3311\n  };                                                                                                                  // 3312\n                                                                                                                      // 3313\n  this.buildTemplateObjects = function(states) {                                                                      // 3314\n    for (var i = 0, n = states.length; i < n; i++) {                                                                  // 3315\n      states[i] = angular.extend({ index: i }, { stateOn: this.stateOn, stateOff: this.stateOff }, states[i]);        // 3316\n    }                                                                                                                 // 3317\n    return states;                                                                                                    // 3318\n  };                                                                                                                  // 3319\n                                                                                                                      // 3320\n  $scope.rate = function(value) {                                                                                     // 3321\n    if ( !$scope.readonly && value >= 0 && value <= $scope.range.length ) {                                           // 3322\n      ngModelCtrl.$setViewValue(value);                                                                               // 3323\n      ngModelCtrl.$render();                                                                                          // 3324\n    }                                                                                                                 // 3325\n  };                                                                                                                  // 3326\n                                                                                                                      // 3327\n  $scope.enter = function(value) {                                                                                    // 3328\n    if ( !$scope.readonly ) {                                                                                         // 3329\n      $scope.value = value;                                                                                           // 3330\n    }                                                                                                                 // 3331\n    $scope.onHover({value: value});                                                                                   // 3332\n  };                                                                                                                  // 3333\n                                                                                                                      // 3334\n  $scope.reset = function() {                                                                                         // 3335\n    $scope.value = ngModelCtrl.$viewValue;                                                                            // 3336\n    $scope.onLeave();                                                                                                 // 3337\n  };                                                                                                                  // 3338\n                                                                                                                      // 3339\n  $scope.onKeydown = function(evt) {                                                                                  // 3340\n    if (/(37|38|39|40)/.test(evt.which)) {                                                                            // 3341\n      evt.preventDefault();                                                                                           // 3342\n      evt.stopPropagation();                                                                                          // 3343\n      $scope.rate( $scope.value + (evt.which === 38 || evt.which === 39 ? 1 : -1) );                                  // 3344\n    }                                                                                                                 // 3345\n  };                                                                                                                  // 3346\n                                                                                                                      // 3347\n  this.render = function() {                                                                                          // 3348\n    $scope.value = ngModelCtrl.$viewValue;                                                                            // 3349\n  };                                                                                                                  // 3350\n}])                                                                                                                   // 3351\n                                                                                                                      // 3352\n.directive('rating', function() {                                                                                     // 3353\n  return {                                                                                                            // 3354\n    restrict: 'EA',                                                                                                   // 3355\n    require: ['rating', 'ngModel'],                                                                                   // 3356\n    scope: {                                                                                                          // 3357\n      readonly: '=?',                                                                                                 // 3358\n      onHover: '&',                                                                                                   // 3359\n      onLeave: '&'                                                                                                    // 3360\n    },                                                                                                                // 3361\n    controller: 'RatingController',                                                                                   // 3362\n    templateUrl: 'template/rating/rating.html',                                                                       // 3363\n    replace: true,                                                                                                    // 3364\n    link: function(scope, element, attrs, ctrls) {                                                                    // 3365\n      var ratingCtrl = ctrls[0], ngModelCtrl = ctrls[1];                                                              // 3366\n      ratingCtrl.init( ngModelCtrl );                                                                                 // 3367\n    }                                                                                                                 // 3368\n  };                                                                                                                  // 3369\n});                                                                                                                   // 3370\n                                                                                                                      // 3371\n/**                                                                                                                   // 3372\n * @ngdoc overview                                                                                                    // 3373\n * @name ui.bootstrap.tabs                                                                                            // 3374\n *                                                                                                                    // 3375\n * @description                                                                                                       // 3376\n * AngularJS version of the tabs directive.                                                                           // 3377\n */                                                                                                                   // 3378\n                                                                                                                      // 3379\nangular.module('ui.bootstrap.tabs', [])                                                                               // 3380\n                                                                                                                      // 3381\n.controller('TabsetController', ['$scope', function TabsetCtrl($scope) {                                              // 3382\n  var ctrl = this,                                                                                                    // 3383\n      tabs = ctrl.tabs = $scope.tabs = [];                                                                            // 3384\n                                                                                                                      // 3385\n  ctrl.select = function(selectedTab) {                                                                               // 3386\n    angular.forEach(tabs, function(tab) {                                                                             // 3387\n      if (tab.active && tab !== selectedTab) {                                                                        // 3388\n        tab.active = false;                                                                                           // 3389\n        tab.onDeselect();                                                                                             // 3390\n      }                                                                                                               // 3391\n    });                                                                                                               // 3392\n    selectedTab.active = true;                                                                                        // 3393\n    selectedTab.onSelect();                                                                                           // 3394\n  };                                                                                                                  // 3395\n                                                                                                                      // 3396\n  ctrl.addTab = function addTab(tab) {                                                                                // 3397\n    tabs.push(tab);                                                                                                   // 3398\n    // we can't run the select function on the first tab                                                              // 3399\n    // since that would select it twice                                                                               // 3400\n    if (tabs.length === 1 && tab.active !== false) {                                                                  // 3401\n      tab.active = true;                                                                                              // 3402\n    } else if (tab.active) {                                                                                          // 3403\n      ctrl.select(tab);                                                                                               // 3404\n    }                                                                                                                 // 3405\n    else {                                                                                                            // 3406\n      tab.active = false;                                                                                             // 3407\n    }                                                                                                                 // 3408\n  };                                                                                                                  // 3409\n                                                                                                                      // 3410\n  ctrl.removeTab = function removeTab(tab) {                                                                          // 3411\n    var index = tabs.indexOf(tab);                                                                                    // 3412\n    //Select a new tab if the tab to be removed is selected and not destroyed                                         // 3413\n    if (tab.active && tabs.length > 1 && !destroyed) {                                                                // 3414\n      //If this is the last tab, select the previous tab. else, the next tab.                                         // 3415\n      var newActiveIndex = index == tabs.length - 1 ? index - 1 : index + 1;                                          // 3416\n      ctrl.select(tabs[newActiveIndex]);                                                                              // 3417\n    }                                                                                                                 // 3418\n    tabs.splice(index, 1);                                                                                            // 3419\n  };                                                                                                                  // 3420\n                                                                                                                      // 3421\n  var destroyed;                                                                                                      // 3422\n  $scope.$on('$destroy', function() {                                                                                 // 3423\n    destroyed = true;                                                                                                 // 3424\n  });                                                                                                                 // 3425\n}])                                                                                                                   // 3426\n                                                                                                                      // 3427\n/**                                                                                                                   // 3428\n * @ngdoc directive                                                                                                   // 3429\n * @name ui.bootstrap.tabs.directive:tabset                                                                           // 3430\n * @restrict EA                                                                                                       // 3431\n *                                                                                                                    // 3432\n * @description                                                                                                       // 3433\n * Tabset is the outer container for the tabs directive                                                               // 3434\n *                                                                                                                    // 3435\n * @param {boolean=} vertical Whether or not to use vertical styling for the tabs.                                    // 3436\n * @param {boolean=} justified Whether or not to use justified styling for the tabs.                                  // 3437\n *                                                                                                                    // 3438\n * @example                                                                                                           // 3439\n<example module=\"ui.bootstrap\">                                                                                       // 3440\n  <file name=\"index.html\">                                                                                            // 3441\n    <tabset>                                                                                                          // 3442\n      <tab heading=\"Tab 1\"><b>First</b> Content!</tab>                                                                // 3443\n      <tab heading=\"Tab 2\"><i>Second</i> Content!</tab>                                                               // 3444\n    </tabset>                                                                                                         // 3445\n    <hr />                                                                                                            // 3446\n    <tabset vertical=\"true\">                                                                                          // 3447\n      <tab heading=\"Vertical Tab 1\"><b>First</b> Vertical Content!</tab>                                              // 3448\n      <tab heading=\"Vertical Tab 2\"><i>Second</i> Vertical Content!</tab>                                             // 3449\n    </tabset>                                                                                                         // 3450\n    <tabset justified=\"true\">                                                                                         // 3451\n      <tab heading=\"Justified Tab 1\"><b>First</b> Justified Content!</tab>                                            // 3452\n      <tab heading=\"Justified Tab 2\"><i>Second</i> Justified Content!</tab>                                           // 3453\n    </tabset>                                                                                                         // 3454\n  </file>                                                                                                             // 3455\n</example>                                                                                                            // 3456\n */                                                                                                                   // 3457\n.directive('tabset', function() {                                                                                     // 3458\n  return {                                                                                                            // 3459\n    restrict: 'EA',                                                                                                   // 3460\n    transclude: true,                                                                                                 // 3461\n    replace: true,                                                                                                    // 3462\n    scope: {                                                                                                          // 3463\n      type: '@'                                                                                                       // 3464\n    },                                                                                                                // 3465\n    controller: 'TabsetController',                                                                                   // 3466\n    templateUrl: 'template/tabs/tabset.html',                                                                         // 3467\n    link: function(scope, element, attrs) {                                                                           // 3468\n      scope.vertical = angular.isDefined(attrs.vertical) ? scope.$parent.$eval(attrs.vertical) : false;               // 3469\n      scope.justified = angular.isDefined(attrs.justified) ? scope.$parent.$eval(attrs.justified) : false;            // 3470\n    }                                                                                                                 // 3471\n  };                                                                                                                  // 3472\n})                                                                                                                    // 3473\n                                                                                                                      // 3474\n/**                                                                                                                   // 3475\n * @ngdoc directive                                                                                                   // 3476\n * @name ui.bootstrap.tabs.directive:tab                                                                              // 3477\n * @restrict EA                                                                                                       // 3478\n *                                                                                                                    // 3479\n * @param {string=} heading The visible heading, or title, of the tab. Set HTML headings with {@link ui.bootstrap.tabs.directive:tabHeading tabHeading}.\n * @param {string=} select An expression to evaluate when the tab is selected.                                        // 3481\n * @param {boolean=} active A binding, telling whether or not this tab is selected.                                   // 3482\n * @param {boolean=} disabled A binding, telling whether or not this tab is disabled.                                 // 3483\n *                                                                                                                    // 3484\n * @description                                                                                                       // 3485\n * Creates a tab with a heading and content. Must be placed within a {@link ui.bootstrap.tabs.directive:tabset tabset}.\n *                                                                                                                    // 3487\n * @example                                                                                                           // 3488\n<example module=\"ui.bootstrap\">                                                                                       // 3489\n  <file name=\"index.html\">                                                                                            // 3490\n    <div ng-controller=\"TabsDemoCtrl\">                                                                                // 3491\n      <button class=\"btn btn-small\" ng-click=\"items[0].active = true\">                                                // 3492\n        Select item 1, using active binding                                                                           // 3493\n      </button>                                                                                                       // 3494\n      <button class=\"btn btn-small\" ng-click=\"items[1].disabled = !items[1].disabled\">                                // 3495\n        Enable/disable item 2, using disabled binding                                                                 // 3496\n      </button>                                                                                                       // 3497\n      <br />                                                                                                          // 3498\n      <tabset>                                                                                                        // 3499\n        <tab heading=\"Tab 1\">First Tab</tab>                                                                          // 3500\n        <tab select=\"alertMe()\">                                                                                      // 3501\n          <tab-heading><i class=\"icon-bell\"></i> Alert me!</tab-heading>                                              // 3502\n          Second Tab, with alert callback and html heading!                                                           // 3503\n        </tab>                                                                                                        // 3504\n        <tab ng-repeat=\"item in items\"                                                                                // 3505\n          heading=\"{{item.title}}\"                                                                                    // 3506\n          disabled=\"item.disabled\"                                                                                    // 3507\n          active=\"item.active\">                                                                                       // 3508\n          {{item.content}}                                                                                            // 3509\n        </tab>                                                                                                        // 3510\n      </tabset>                                                                                                       // 3511\n    </div>                                                                                                            // 3512\n  </file>                                                                                                             // 3513\n  <file name=\"script.js\">                                                                                             // 3514\n    function TabsDemoCtrl($scope) {                                                                                   // 3515\n      $scope.items = [                                                                                                // 3516\n        { title:\"Dynamic Title 1\", content:\"Dynamic Item 0\" },                                                        // 3517\n        { title:\"Dynamic Title 2\", content:\"Dynamic Item 1\", disabled: true }                                         // 3518\n      ];                                                                                                              // 3519\n                                                                                                                      // 3520\n      $scope.alertMe = function() {                                                                                   // 3521\n        setTimeout(function() {                                                                                       // 3522\n          alert(\"You've selected the alert tab!\");                                                                    // 3523\n        });                                                                                                           // 3524\n      };                                                                                                              // 3525\n    };                                                                                                                // 3526\n  </file>                                                                                                             // 3527\n</example>                                                                                                            // 3528\n */                                                                                                                   // 3529\n                                                                                                                      // 3530\n/**                                                                                                                   // 3531\n * @ngdoc directive                                                                                                   // 3532\n * @name ui.bootstrap.tabs.directive:tabHeading                                                                       // 3533\n * @restrict EA                                                                                                       // 3534\n *                                                                                                                    // 3535\n * @description                                                                                                       // 3536\n * Creates an HTML heading for a {@link ui.bootstrap.tabs.directive:tab tab}. Must be placed as a child of a tab element.\n *                                                                                                                    // 3538\n * @example                                                                                                           // 3539\n<example module=\"ui.bootstrap\">                                                                                       // 3540\n  <file name=\"index.html\">                                                                                            // 3541\n    <tabset>                                                                                                          // 3542\n      <tab>                                                                                                           // 3543\n        <tab-heading><b>HTML</b> in my titles?!</tab-heading>                                                         // 3544\n        And some content, too!                                                                                        // 3545\n      </tab>                                                                                                          // 3546\n      <tab>                                                                                                           // 3547\n        <tab-heading><i class=\"icon-heart\"></i> Icon heading?!?</tab-heading>                                         // 3548\n        That's right.                                                                                                 // 3549\n      </tab>                                                                                                          // 3550\n    </tabset>                                                                                                         // 3551\n  </file>                                                                                                             // 3552\n</example>                                                                                                            // 3553\n */                                                                                                                   // 3554\n.directive('tab', ['$parse', '$log', function($parse, $log) {                                                         // 3555\n  return {                                                                                                            // 3556\n    require: '^tabset',                                                                                               // 3557\n    restrict: 'EA',                                                                                                   // 3558\n    replace: true,                                                                                                    // 3559\n    templateUrl: 'template/tabs/tab.html',                                                                            // 3560\n    transclude: true,                                                                                                 // 3561\n    scope: {                                                                                                          // 3562\n      active: '=?',                                                                                                   // 3563\n      heading: '@',                                                                                                   // 3564\n      onSelect: '&select', //This callback is called in contentHeadingTransclude                                      // 3565\n                          //once it inserts the tab's content into the dom                                            // 3566\n      onDeselect: '&deselect'                                                                                         // 3567\n    },                                                                                                                // 3568\n    controller: function() {                                                                                          // 3569\n      //Empty controller so other directives can require being 'under' a tab                                          // 3570\n    },                                                                                                                // 3571\n    compile: function(elm, attrs, transclude) {                                                                       // 3572\n      return function postLink(scope, elm, attrs, tabsetCtrl) {                                                       // 3573\n        scope.$watch('active', function(active) {                                                                     // 3574\n          if (active) {                                                                                               // 3575\n            tabsetCtrl.select(scope);                                                                                 // 3576\n          }                                                                                                           // 3577\n        });                                                                                                           // 3578\n                                                                                                                      // 3579\n        scope.disabled = false;                                                                                       // 3580\n        if ( attrs.disable ) {                                                                                        // 3581\n          scope.$parent.$watch($parse(attrs.disable), function(value) {                                               // 3582\n            scope.disabled = !! value;                                                                                // 3583\n          });                                                                                                         // 3584\n        }                                                                                                             // 3585\n                                                                                                                      // 3586\n        // Deprecation support of \"disabled\" parameter                                                                // 3587\n        // fix(tab): IE9 disabled attr renders grey text on enabled tab #2677                                         // 3588\n        // This code is duplicated from the lines above to make it easy to remove once                                // 3589\n        // the feature has been completely deprecated                                                                 // 3590\n        if ( attrs.disabled ) {                                                                                       // 3591\n          $log.warn('Use of \"disabled\" attribute has been deprecated, please use \"disable\"');                         // 3592\n          scope.$parent.$watch($parse(attrs.disabled), function(value) {                                              // 3593\n            scope.disabled = !! value;                                                                                // 3594\n          });                                                                                                         // 3595\n        }                                                                                                             // 3596\n                                                                                                                      // 3597\n        scope.select = function() {                                                                                   // 3598\n          if ( !scope.disabled ) {                                                                                    // 3599\n            scope.active = true;                                                                                      // 3600\n          }                                                                                                           // 3601\n        };                                                                                                            // 3602\n                                                                                                                      // 3603\n        tabsetCtrl.addTab(scope);                                                                                     // 3604\n        scope.$on('$destroy', function() {                                                                            // 3605\n          tabsetCtrl.removeTab(scope);                                                                                // 3606\n        });                                                                                                           // 3607\n                                                                                                                      // 3608\n        //We need to transclude later, once the content container is ready.                                           // 3609\n        //when this link happens, we're inside a tab heading.                                                         // 3610\n        scope.$transcludeFn = transclude;                                                                             // 3611\n      };                                                                                                              // 3612\n    }                                                                                                                 // 3613\n  };                                                                                                                  // 3614\n}])                                                                                                                   // 3615\n                                                                                                                      // 3616\n.directive('tabHeadingTransclude', [function() {                                                                      // 3617\n  return {                                                                                                            // 3618\n    restrict: 'A',                                                                                                    // 3619\n    require: '^tab',                                                                                                  // 3620\n    link: function(scope, elm, attrs, tabCtrl) {                                                                      // 3621\n      scope.$watch('headingElement', function updateHeadingElement(heading) {                                         // 3622\n        if (heading) {                                                                                                // 3623\n          elm.html('');                                                                                               // 3624\n          elm.append(heading);                                                                                        // 3625\n        }                                                                                                             // 3626\n      });                                                                                                             // 3627\n    }                                                                                                                 // 3628\n  };                                                                                                                  // 3629\n}])                                                                                                                   // 3630\n                                                                                                                      // 3631\n.directive('tabContentTransclude', function() {                                                                       // 3632\n  return {                                                                                                            // 3633\n    restrict: 'A',                                                                                                    // 3634\n    require: '^tabset',                                                                                               // 3635\n    link: function(scope, elm, attrs) {                                                                               // 3636\n      var tab = scope.$eval(attrs.tabContentTransclude);                                                              // 3637\n                                                                                                                      // 3638\n      //Now our tab is ready to be transcluded: both the tab heading area                                             // 3639\n      //and the tab content area are loaded.  Transclude 'em both.                                                    // 3640\n      tab.$transcludeFn(tab.$parent, function(contents) {                                                             // 3641\n        angular.forEach(contents, function(node) {                                                                    // 3642\n          if (isTabHeading(node)) {                                                                                   // 3643\n            //Let tabHeadingTransclude know.                                                                          // 3644\n            tab.headingElement = node;                                                                                // 3645\n          } else {                                                                                                    // 3646\n            elm.append(node);                                                                                         // 3647\n          }                                                                                                           // 3648\n        });                                                                                                           // 3649\n      });                                                                                                             // 3650\n    }                                                                                                                 // 3651\n  };                                                                                                                  // 3652\n  function isTabHeading(node) {                                                                                       // 3653\n    return node.tagName &&  (                                                                                         // 3654\n      node.hasAttribute('tab-heading') ||                                                                             // 3655\n      node.hasAttribute('data-tab-heading') ||                                                                        // 3656\n      node.tagName.toLowerCase() === 'tab-heading' ||                                                                 // 3657\n      node.tagName.toLowerCase() === 'data-tab-heading'                                                               // 3658\n    );                                                                                                                // 3659\n  }                                                                                                                   // 3660\n})                                                                                                                    // 3661\n                                                                                                                      // 3662\n;                                                                                                                     // 3663\n                                                                                                                      // 3664\nangular.module('ui.bootstrap.timepicker', [])                                                                         // 3665\n                                                                                                                      // 3666\n.constant('timepickerConfig', {                                                                                       // 3667\n  hourStep: 1,                                                                                                        // 3668\n  minuteStep: 1,                                                                                                      // 3669\n  showMeridian: true,                                                                                                 // 3670\n  meridians: null,                                                                                                    // 3671\n  readonlyInput: false,                                                                                               // 3672\n  mousewheel: true,                                                                                                   // 3673\n  arrowkeys: true                                                                                                     // 3674\n})                                                                                                                    // 3675\n                                                                                                                      // 3676\n.controller('TimepickerController', ['$scope', '$attrs', '$parse', '$log', '$locale', 'timepickerConfig', function($scope, $attrs, $parse, $log, $locale, timepickerConfig) {\n  var selected = new Date(),                                                                                          // 3678\n      ngModelCtrl = { $setViewValue: angular.noop }, // nullModelCtrl                                                 // 3679\n      meridians = angular.isDefined($attrs.meridians) ? $scope.$parent.$eval($attrs.meridians) : timepickerConfig.meridians || $locale.DATETIME_FORMATS.AMPMS;\n                                                                                                                      // 3681\n  this.init = function( ngModelCtrl_, inputs ) {                                                                      // 3682\n    ngModelCtrl = ngModelCtrl_;                                                                                       // 3683\n    ngModelCtrl.$render = this.render;                                                                                // 3684\n                                                                                                                      // 3685\n    ngModelCtrl.$formatters.unshift(function (modelValue) {                                                           // 3686\n      return modelValue ? new Date( modelValue ) : null;                                                              // 3687\n    });                                                                                                               // 3688\n                                                                                                                      // 3689\n    var hoursInputEl = inputs.eq(0),                                                                                  // 3690\n        minutesInputEl = inputs.eq(1);                                                                                // 3691\n                                                                                                                      // 3692\n    var mousewheel = angular.isDefined($attrs.mousewheel) ? $scope.$parent.$eval($attrs.mousewheel) : timepickerConfig.mousewheel;\n    if ( mousewheel ) {                                                                                               // 3694\n      this.setupMousewheelEvents( hoursInputEl, minutesInputEl );                                                     // 3695\n    }                                                                                                                 // 3696\n                                                                                                                      // 3697\n    var arrowkeys = angular.isDefined($attrs.arrowkeys) ? $scope.$parent.$eval($attrs.arrowkeys) : timepickerConfig.arrowkeys;\n    if (arrowkeys) {                                                                                                  // 3699\n      this.setupArrowkeyEvents( hoursInputEl, minutesInputEl );                                                       // 3700\n    }                                                                                                                 // 3701\n                                                                                                                      // 3702\n    $scope.readonlyInput = angular.isDefined($attrs.readonlyInput) ? $scope.$parent.$eval($attrs.readonlyInput) : timepickerConfig.readonlyInput;\n    this.setupInputEvents( hoursInputEl, minutesInputEl );                                                            // 3704\n  };                                                                                                                  // 3705\n                                                                                                                      // 3706\n  var hourStep = timepickerConfig.hourStep;                                                                           // 3707\n  if ($attrs.hourStep) {                                                                                              // 3708\n    $scope.$parent.$watch($parse($attrs.hourStep), function(value) {                                                  // 3709\n      hourStep = parseInt(value, 10);                                                                                 // 3710\n    });                                                                                                               // 3711\n  }                                                                                                                   // 3712\n                                                                                                                      // 3713\n  var minuteStep = timepickerConfig.minuteStep;                                                                       // 3714\n  if ($attrs.minuteStep) {                                                                                            // 3715\n    $scope.$parent.$watch($parse($attrs.minuteStep), function(value) {                                                // 3716\n      minuteStep = parseInt(value, 10);                                                                               // 3717\n    });                                                                                                               // 3718\n  }                                                                                                                   // 3719\n                                                                                                                      // 3720\n  // 12H / 24H mode                                                                                                   // 3721\n  $scope.showMeridian = timepickerConfig.showMeridian;                                                                // 3722\n  if ($attrs.showMeridian) {                                                                                          // 3723\n    $scope.$parent.$watch($parse($attrs.showMeridian), function(value) {                                              // 3724\n      $scope.showMeridian = !!value;                                                                                  // 3725\n                                                                                                                      // 3726\n      if ( ngModelCtrl.$error.time ) {                                                                                // 3727\n        // Evaluate from template                                                                                     // 3728\n        var hours = getHoursFromTemplate(), minutes = getMinutesFromTemplate();                                       // 3729\n        if (angular.isDefined( hours ) && angular.isDefined( minutes )) {                                             // 3730\n          selected.setHours( hours );                                                                                 // 3731\n          refresh();                                                                                                  // 3732\n        }                                                                                                             // 3733\n      } else {                                                                                                        // 3734\n        updateTemplate();                                                                                             // 3735\n      }                                                                                                               // 3736\n    });                                                                                                               // 3737\n  }                                                                                                                   // 3738\n                                                                                                                      // 3739\n  // Get $scope.hours in 24H mode if valid                                                                            // 3740\n  function getHoursFromTemplate ( ) {                                                                                 // 3741\n    var hours = parseInt( $scope.hours, 10 );                                                                         // 3742\n    var valid = ( $scope.showMeridian ) ? (hours > 0 && hours < 13) : (hours >= 0 && hours < 24);                     // 3743\n    if ( !valid ) {                                                                                                   // 3744\n      return undefined;                                                                                               // 3745\n    }                                                                                                                 // 3746\n                                                                                                                      // 3747\n    if ( $scope.showMeridian ) {                                                                                      // 3748\n      if ( hours === 12 ) {                                                                                           // 3749\n        hours = 0;                                                                                                    // 3750\n      }                                                                                                               // 3751\n      if ( $scope.meridian === meridians[1] ) {                                                                       // 3752\n        hours = hours + 12;                                                                                           // 3753\n      }                                                                                                               // 3754\n    }                                                                                                                 // 3755\n    return hours;                                                                                                     // 3756\n  }                                                                                                                   // 3757\n                                                                                                                      // 3758\n  function getMinutesFromTemplate() {                                                                                 // 3759\n    var minutes = parseInt($scope.minutes, 10);                                                                       // 3760\n    return ( minutes >= 0 && minutes < 60 ) ? minutes : undefined;                                                    // 3761\n  }                                                                                                                   // 3762\n                                                                                                                      // 3763\n  function pad( value ) {                                                                                             // 3764\n    return ( angular.isDefined(value) && value.toString().length < 2 ) ? '0' + value : value.toString();              // 3765\n  }                                                                                                                   // 3766\n                                                                                                                      // 3767\n  // Respond on mousewheel spin                                                                                       // 3768\n  this.setupMousewheelEvents = function( hoursInputEl, minutesInputEl ) {                                             // 3769\n    var isScrollingUp = function(e) {                                                                                 // 3770\n      if (e.originalEvent) {                                                                                          // 3771\n        e = e.originalEvent;                                                                                          // 3772\n      }                                                                                                               // 3773\n      //pick correct delta variable depending on event                                                                // 3774\n      var delta = (e.wheelDelta) ? e.wheelDelta : -e.deltaY;                                                          // 3775\n      return (e.detail || delta > 0);                                                                                 // 3776\n    };                                                                                                                // 3777\n                                                                                                                      // 3778\n    hoursInputEl.bind('mousewheel wheel', function(e) {                                                               // 3779\n      $scope.$apply( (isScrollingUp(e)) ? $scope.incrementHours() : $scope.decrementHours() );                        // 3780\n      e.preventDefault();                                                                                             // 3781\n    });                                                                                                               // 3782\n                                                                                                                      // 3783\n    minutesInputEl.bind('mousewheel wheel', function(e) {                                                             // 3784\n      $scope.$apply( (isScrollingUp(e)) ? $scope.incrementMinutes() : $scope.decrementMinutes() );                    // 3785\n      e.preventDefault();                                                                                             // 3786\n    });                                                                                                               // 3787\n                                                                                                                      // 3788\n  };                                                                                                                  // 3789\n                                                                                                                      // 3790\n  // Respond on up/down arrowkeys                                                                                     // 3791\n  this.setupArrowkeyEvents = function( hoursInputEl, minutesInputEl ) {                                               // 3792\n    hoursInputEl.bind('keydown', function(e) {                                                                        // 3793\n      if ( e.which === 38 ) { // up                                                                                   // 3794\n        e.preventDefault();                                                                                           // 3795\n        $scope.incrementHours();                                                                                      // 3796\n        $scope.$apply();                                                                                              // 3797\n      }                                                                                                               // 3798\n      else if ( e.which === 40 ) { // down                                                                            // 3799\n        e.preventDefault();                                                                                           // 3800\n        $scope.decrementHours();                                                                                      // 3801\n        $scope.$apply();                                                                                              // 3802\n      }                                                                                                               // 3803\n    });                                                                                                               // 3804\n                                                                                                                      // 3805\n    minutesInputEl.bind('keydown', function(e) {                                                                      // 3806\n      if ( e.which === 38 ) { // up                                                                                   // 3807\n        e.preventDefault();                                                                                           // 3808\n        $scope.incrementMinutes();                                                                                    // 3809\n        $scope.$apply();                                                                                              // 3810\n      }                                                                                                               // 3811\n      else if ( e.which === 40 ) { // down                                                                            // 3812\n        e.preventDefault();                                                                                           // 3813\n        $scope.decrementMinutes();                                                                                    // 3814\n        $scope.$apply();                                                                                              // 3815\n      }                                                                                                               // 3816\n    });                                                                                                               // 3817\n  };                                                                                                                  // 3818\n                                                                                                                      // 3819\n  this.setupInputEvents = function( hoursInputEl, minutesInputEl ) {                                                  // 3820\n    if ( $scope.readonlyInput ) {                                                                                     // 3821\n      $scope.updateHours = angular.noop;                                                                              // 3822\n      $scope.updateMinutes = angular.noop;                                                                            // 3823\n      return;                                                                                                         // 3824\n    }                                                                                                                 // 3825\n                                                                                                                      // 3826\n    var invalidate = function(invalidHours, invalidMinutes) {                                                         // 3827\n      ngModelCtrl.$setViewValue( null );                                                                              // 3828\n      ngModelCtrl.$setValidity('time', false);                                                                        // 3829\n      if (angular.isDefined(invalidHours)) {                                                                          // 3830\n        $scope.invalidHours = invalidHours;                                                                           // 3831\n      }                                                                                                               // 3832\n      if (angular.isDefined(invalidMinutes)) {                                                                        // 3833\n        $scope.invalidMinutes = invalidMinutes;                                                                       // 3834\n      }                                                                                                               // 3835\n    };                                                                                                                // 3836\n                                                                                                                      // 3837\n    $scope.updateHours = function() {                                                                                 // 3838\n      var hours = getHoursFromTemplate();                                                                             // 3839\n                                                                                                                      // 3840\n      if ( angular.isDefined(hours) ) {                                                                               // 3841\n        selected.setHours( hours );                                                                                   // 3842\n        refresh( 'h' );                                                                                               // 3843\n      } else {                                                                                                        // 3844\n        invalidate(true);                                                                                             // 3845\n      }                                                                                                               // 3846\n    };                                                                                                                // 3847\n                                                                                                                      // 3848\n    hoursInputEl.bind('blur', function(e) {                                                                           // 3849\n      if ( !$scope.invalidHours && $scope.hours < 10) {                                                               // 3850\n        $scope.$apply( function() {                                                                                   // 3851\n          $scope.hours = pad( $scope.hours );                                                                         // 3852\n        });                                                                                                           // 3853\n      }                                                                                                               // 3854\n    });                                                                                                               // 3855\n                                                                                                                      // 3856\n    $scope.updateMinutes = function() {                                                                               // 3857\n      var minutes = getMinutesFromTemplate();                                                                         // 3858\n                                                                                                                      // 3859\n      if ( angular.isDefined(minutes) ) {                                                                             // 3860\n        selected.setMinutes( minutes );                                                                               // 3861\n        refresh( 'm' );                                                                                               // 3862\n      } else {                                                                                                        // 3863\n        invalidate(undefined, true);                                                                                  // 3864\n      }                                                                                                               // 3865\n    };                                                                                                                // 3866\n                                                                                                                      // 3867\n    minutesInputEl.bind('blur', function(e) {                                                                         // 3868\n      if ( !$scope.invalidMinutes && $scope.minutes < 10 ) {                                                          // 3869\n        $scope.$apply( function() {                                                                                   // 3870\n          $scope.minutes = pad( $scope.minutes );                                                                     // 3871\n        });                                                                                                           // 3872\n      }                                                                                                               // 3873\n    });                                                                                                               // 3874\n                                                                                                                      // 3875\n  };                                                                                                                  // 3876\n                                                                                                                      // 3877\n  this.render = function() {                                                                                          // 3878\n    var date = ngModelCtrl.$viewValue;                                                                                // 3879\n                                                                                                                      // 3880\n    if ( isNaN(date) ) {                                                                                              // 3881\n      ngModelCtrl.$setValidity('time', false);                                                                        // 3882\n      $log.error('Timepicker directive: \"ng-model\" value must be a Date object, a number of milliseconds since 01.01.1970 or a string representing an RFC2822 or ISO 8601 date.');\n    } else {                                                                                                          // 3884\n      if ( date ) {                                                                                                   // 3885\n        selected = date;                                                                                              // 3886\n      }                                                                                                               // 3887\n      makeValid();                                                                                                    // 3888\n      updateTemplate();                                                                                               // 3889\n    }                                                                                                                 // 3890\n  };                                                                                                                  // 3891\n                                                                                                                      // 3892\n  // Call internally when we know that model is valid.                                                                // 3893\n  function refresh( keyboardChange ) {                                                                                // 3894\n    makeValid();                                                                                                      // 3895\n    ngModelCtrl.$setViewValue( new Date(selected) );                                                                  // 3896\n    updateTemplate( keyboardChange );                                                                                 // 3897\n  }                                                                                                                   // 3898\n                                                                                                                      // 3899\n  function makeValid() {                                                                                              // 3900\n    ngModelCtrl.$setValidity('time', true);                                                                           // 3901\n    $scope.invalidHours = false;                                                                                      // 3902\n    $scope.invalidMinutes = false;                                                                                    // 3903\n  }                                                                                                                   // 3904\n                                                                                                                      // 3905\n  function updateTemplate( keyboardChange ) {                                                                         // 3906\n    var hours = selected.getHours(), minutes = selected.getMinutes();                                                 // 3907\n                                                                                                                      // 3908\n    if ( $scope.showMeridian ) {                                                                                      // 3909\n      hours = ( hours === 0 || hours === 12 ) ? 12 : hours % 12; // Convert 24 to 12 hour system                      // 3910\n    }                                                                                                                 // 3911\n                                                                                                                      // 3912\n    $scope.hours = keyboardChange === 'h' ? hours : pad(hours);                                                       // 3913\n    if (keyboardChange !== 'm') {                                                                                     // 3914\n      $scope.minutes = pad(minutes);                                                                                  // 3915\n    }                                                                                                                 // 3916\n    $scope.meridian = selected.getHours() < 12 ? meridians[0] : meridians[1];                                         // 3917\n  }                                                                                                                   // 3918\n                                                                                                                      // 3919\n  function addMinutes( minutes ) {                                                                                    // 3920\n    var dt = new Date( selected.getTime() + minutes * 60000 );                                                        // 3921\n    selected.setHours( dt.getHours(), dt.getMinutes() );                                                              // 3922\n    refresh();                                                                                                        // 3923\n  }                                                                                                                   // 3924\n                                                                                                                      // 3925\n  $scope.incrementHours = function() {                                                                                // 3926\n    addMinutes( hourStep * 60 );                                                                                      // 3927\n  };                                                                                                                  // 3928\n  $scope.decrementHours = function() {                                                                                // 3929\n    addMinutes( - hourStep * 60 );                                                                                    // 3930\n  };                                                                                                                  // 3931\n  $scope.incrementMinutes = function() {                                                                              // 3932\n    addMinutes( minuteStep );                                                                                         // 3933\n  };                                                                                                                  // 3934\n  $scope.decrementMinutes = function() {                                                                              // 3935\n    addMinutes( - minuteStep );                                                                                       // 3936\n  };                                                                                                                  // 3937\n  $scope.toggleMeridian = function() {                                                                                // 3938\n    addMinutes( 12 * 60 * (( selected.getHours() < 12 ) ? 1 : -1) );                                                  // 3939\n  };                                                                                                                  // 3940\n}])                                                                                                                   // 3941\n                                                                                                                      // 3942\n.directive('timepicker', function () {                                                                                // 3943\n  return {                                                                                                            // 3944\n    restrict: 'EA',                                                                                                   // 3945\n    require: ['timepicker', '?^ngModel'],                                                                             // 3946\n    controller:'TimepickerController',                                                                                // 3947\n    replace: true,                                                                                                    // 3948\n    scope: {},                                                                                                        // 3949\n    templateUrl: 'template/timepicker/timepicker.html',                                                               // 3950\n    link: function(scope, element, attrs, ctrls) {                                                                    // 3951\n      var timepickerCtrl = ctrls[0], ngModelCtrl = ctrls[1];                                                          // 3952\n                                                                                                                      // 3953\n      if ( ngModelCtrl ) {                                                                                            // 3954\n        timepickerCtrl.init( ngModelCtrl, element.find('input') );                                                    // 3955\n      }                                                                                                               // 3956\n    }                                                                                                                 // 3957\n  };                                                                                                                  // 3958\n});                                                                                                                   // 3959\n                                                                                                                      // 3960\nangular.module('ui.bootstrap.transition', [])                                                                         // 3961\n                                                                                                                      // 3962\n.value('$transitionSuppressDeprecated', false)                                                                        // 3963\n/**                                                                                                                   // 3964\n * $transition service provides a consistent interface to trigger CSS 3 transitions and to be informed when they complete.\n * @param  {DOMElement} element  The DOMElement that will be animated.                                                // 3966\n * @param  {string|object|function} trigger  The thing that will cause the transition to start:                       // 3967\n *   - As a string, it represents the css class to be added to the element.                                           // 3968\n *   - As an object, it represents a hash of style attributes to be applied to the element.                           // 3969\n *   - As a function, it represents a function to be called that will cause the transition to occur.                  // 3970\n * @return {Promise}  A promise that is resolved when the transition finishes.                                        // 3971\n */                                                                                                                   // 3972\n.factory('$transition', [                                                                                             // 3973\n        '$q', '$timeout', '$rootScope', '$log', '$transitionSuppressDeprecated',                                      // 3974\nfunction($q ,  $timeout ,  $rootScope ,  $log ,  $transitionSuppressDeprecated) {                                     // 3975\n                                                                                                                      // 3976\n  if (!$transitionSuppressDeprecated) {                                                                               // 3977\n    $log.warn('$transition is now deprecated. Use $animate from ngAnimate instead.');                                 // 3978\n  }                                                                                                                   // 3979\n                                                                                                                      // 3980\n  var $transition = function(element, trigger, options) {                                                             // 3981\n    options = options || {};                                                                                          // 3982\n    var deferred = $q.defer();                                                                                        // 3983\n    var endEventName = $transition[options.animation ? 'animationEndEventName' : 'transitionEndEventName'];           // 3984\n                                                                                                                      // 3985\n    var transitionEndHandler = function(event) {                                                                      // 3986\n      $rootScope.$apply(function() {                                                                                  // 3987\n        element.unbind(endEventName, transitionEndHandler);                                                           // 3988\n        deferred.resolve(element);                                                                                    // 3989\n      });                                                                                                             // 3990\n    };                                                                                                                // 3991\n                                                                                                                      // 3992\n    if (endEventName) {                                                                                               // 3993\n      element.bind(endEventName, transitionEndHandler);                                                               // 3994\n    }                                                                                                                 // 3995\n                                                                                                                      // 3996\n    // Wrap in a timeout to allow the browser time to update the DOM before the transition is to occur                // 3997\n    $timeout(function() {                                                                                             // 3998\n      if ( angular.isString(trigger) ) {                                                                              // 3999\n        element.addClass(trigger);                                                                                    // 4000\n      } else if ( angular.isFunction(trigger) ) {                                                                     // 4001\n        trigger(element);                                                                                             // 4002\n      } else if ( angular.isObject(trigger) ) {                                                                       // 4003\n        element.css(trigger);                                                                                         // 4004\n      }                                                                                                               // 4005\n      //If browser does not support transitions, instantly resolve                                                    // 4006\n      if ( !endEventName ) {                                                                                          // 4007\n        deferred.resolve(element);                                                                                    // 4008\n      }                                                                                                               // 4009\n    });                                                                                                               // 4010\n                                                                                                                      // 4011\n    // Add our custom cancel function to the promise that is returned                                                 // 4012\n    // We can call this if we are about to run a new transition, which we know will prevent this transition from ending,\n    // i.e. it will therefore never raise a transitionEnd event for that transition                                   // 4014\n    deferred.promise.cancel = function() {                                                                            // 4015\n      if ( endEventName ) {                                                                                           // 4016\n        element.unbind(endEventName, transitionEndHandler);                                                           // 4017\n      }                                                                                                               // 4018\n      deferred.reject('Transition cancelled');                                                                        // 4019\n    };                                                                                                                // 4020\n                                                                                                                      // 4021\n    return deferred.promise;                                                                                          // 4022\n  };                                                                                                                  // 4023\n                                                                                                                      // 4024\n  // Work out the name of the transitionEnd event                                                                     // 4025\n  var transElement = document.createElement('trans');                                                                 // 4026\n  var transitionEndEventNames = {                                                                                     // 4027\n    'WebkitTransition': 'webkitTransitionEnd',                                                                        // 4028\n    'MozTransition': 'transitionend',                                                                                 // 4029\n    'OTransition': 'oTransitionEnd',                                                                                  // 4030\n    'transition': 'transitionend'                                                                                     // 4031\n  };                                                                                                                  // 4032\n  var animationEndEventNames = {                                                                                      // 4033\n    'WebkitTransition': 'webkitAnimationEnd',                                                                         // 4034\n    'MozTransition': 'animationend',                                                                                  // 4035\n    'OTransition': 'oAnimationEnd',                                                                                   // 4036\n    'transition': 'animationend'                                                                                      // 4037\n  };                                                                                                                  // 4038\n  function findEndEventName(endEventNames) {                                                                          // 4039\n    for (var name in endEventNames){                                                                                  // 4040\n      if (transElement.style[name] !== undefined) {                                                                   // 4041\n        return endEventNames[name];                                                                                   // 4042\n      }                                                                                                               // 4043\n    }                                                                                                                 // 4044\n  }                                                                                                                   // 4045\n  $transition.transitionEndEventName = findEndEventName(transitionEndEventNames);                                     // 4046\n  $transition.animationEndEventName = findEndEventName(animationEndEventNames);                                       // 4047\n  return $transition;                                                                                                 // 4048\n}]);                                                                                                                  // 4049\n                                                                                                                      // 4050\nangular.module('ui.bootstrap.typeahead', ['ui.bootstrap.position', 'ui.bootstrap.bindHtml'])                          // 4051\n                                                                                                                      // 4052\n/**                                                                                                                   // 4053\n * A helper service that can parse typeahead's syntax (string provided by users)                                      // 4054\n * Extracted to a separate service for ease of unit testing                                                           // 4055\n */                                                                                                                   // 4056\n  .factory('typeaheadParser', ['$parse', function ($parse) {                                                          // 4057\n                                                                                                                      // 4058\n  //                      00000111000000000000022200000000000000003333333333333330000000000044000                     // 4059\n  var TYPEAHEAD_REGEXP = /^\\s*([\\s\\S]+?)(?:\\s+as\\s+([\\s\\S]+?))?\\s+for\\s+(?:([\\$\\w][\\$\\w\\d]*))\\s+in\\s+([\\s\\S]+?)$/;    // 4060\n                                                                                                                      // 4061\n  return {                                                                                                            // 4062\n    parse:function (input) {                                                                                          // 4063\n                                                                                                                      // 4064\n      var match = input.match(TYPEAHEAD_REGEXP);                                                                      // 4065\n      if (!match) {                                                                                                   // 4066\n        throw new Error(                                                                                              // 4067\n          'Expected typeahead specification in form of \"_modelValue_ (as _label_)? for _item_ in _collection_\"' +     // 4068\n            ' but got \"' + input + '\".');                                                                             // 4069\n      }                                                                                                               // 4070\n                                                                                                                      // 4071\n      return {                                                                                                        // 4072\n        itemName:match[3],                                                                                            // 4073\n        source:$parse(match[4]),                                                                                      // 4074\n        viewMapper:$parse(match[2] || match[1]),                                                                      // 4075\n        modelMapper:$parse(match[1])                                                                                  // 4076\n      };                                                                                                              // 4077\n    }                                                                                                                 // 4078\n  };                                                                                                                  // 4079\n}])                                                                                                                   // 4080\n                                                                                                                      // 4081\n  .directive('typeahead', ['$compile', '$parse', '$q', '$timeout', '$document', '$position', 'typeaheadParser',       // 4082\n    function ($compile, $parse, $q, $timeout, $document, $position, typeaheadParser) {                                // 4083\n                                                                                                                      // 4084\n  var HOT_KEYS = [9, 13, 27, 38, 40];                                                                                 // 4085\n                                                                                                                      // 4086\n  return {                                                                                                            // 4087\n    require:'ngModel',                                                                                                // 4088\n    link:function (originalScope, element, attrs, modelCtrl) {                                                        // 4089\n                                                                                                                      // 4090\n      //SUPPORTED ATTRIBUTES (OPTIONS)                                                                                // 4091\n                                                                                                                      // 4092\n      //minimal no of characters that needs to be entered before typeahead kicks-in                                   // 4093\n      var minSearch = originalScope.$eval(attrs.typeaheadMinLength) || 1;                                             // 4094\n                                                                                                                      // 4095\n      //minimal wait time after last character typed before typeahead kicks-in                                        // 4096\n      var waitTime = originalScope.$eval(attrs.typeaheadWaitMs) || 0;                                                 // 4097\n                                                                                                                      // 4098\n      //should it restrict model values to the ones selected from the popup only?                                     // 4099\n      var isEditable = originalScope.$eval(attrs.typeaheadEditable) !== false;                                        // 4100\n                                                                                                                      // 4101\n      //binding to a variable that indicates if matches are being retrieved asynchronously                            // 4102\n      var isLoadingSetter = $parse(attrs.typeaheadLoading).assign || angular.noop;                                    // 4103\n                                                                                                                      // 4104\n      //a callback executed when a match is selected                                                                  // 4105\n      var onSelectCallback = $parse(attrs.typeaheadOnSelect);                                                         // 4106\n                                                                                                                      // 4107\n      var inputFormatter = attrs.typeaheadInputFormatter ? $parse(attrs.typeaheadInputFormatter) : undefined;         // 4108\n                                                                                                                      // 4109\n      var appendToBody =  attrs.typeaheadAppendToBody ? originalScope.$eval(attrs.typeaheadAppendToBody) : false;     // 4110\n                                                                                                                      // 4111\n      var focusFirst = originalScope.$eval(attrs.typeaheadFocusFirst) !== false;                                      // 4112\n                                                                                                                      // 4113\n      //INTERNAL VARIABLES                                                                                            // 4114\n                                                                                                                      // 4115\n      //model setter executed upon match selection                                                                    // 4116\n      var $setModelValue = $parse(attrs.ngModel).assign;                                                              // 4117\n                                                                                                                      // 4118\n      //expressions used by typeahead                                                                                 // 4119\n      var parserResult = typeaheadParser.parse(attrs.typeahead);                                                      // 4120\n                                                                                                                      // 4121\n      var hasFocus;                                                                                                   // 4122\n                                                                                                                      // 4123\n      //create a child scope for the typeahead directive so we are not polluting original scope                       // 4124\n      //with typeahead-specific data (matches, query etc.)                                                            // 4125\n      var scope = originalScope.$new();                                                                               // 4126\n      originalScope.$on('$destroy', function(){                                                                       // 4127\n        scope.$destroy();                                                                                             // 4128\n      });                                                                                                             // 4129\n                                                                                                                      // 4130\n      // WAI-ARIA                                                                                                     // 4131\n      var popupId = 'typeahead-' + scope.$id + '-' + Math.floor(Math.random() * 10000);                               // 4132\n      element.attr({                                                                                                  // 4133\n        'aria-autocomplete': 'list',                                                                                  // 4134\n        'aria-expanded': false,                                                                                       // 4135\n        'aria-owns': popupId                                                                                          // 4136\n      });                                                                                                             // 4137\n                                                                                                                      // 4138\n      //pop-up element used to display matches                                                                        // 4139\n      var popUpEl = angular.element('<div typeahead-popup></div>');                                                   // 4140\n      popUpEl.attr({                                                                                                  // 4141\n        id: popupId,                                                                                                  // 4142\n        matches: 'matches',                                                                                           // 4143\n        active: 'activeIdx',                                                                                          // 4144\n        select: 'select(activeIdx)',                                                                                  // 4145\n        query: 'query',                                                                                               // 4146\n        position: 'position'                                                                                          // 4147\n      });                                                                                                             // 4148\n      //custom item template                                                                                          // 4149\n      if (angular.isDefined(attrs.typeaheadTemplateUrl)) {                                                            // 4150\n        popUpEl.attr('template-url', attrs.typeaheadTemplateUrl);                                                     // 4151\n      }                                                                                                               // 4152\n                                                                                                                      // 4153\n      var resetMatches = function() {                                                                                 // 4154\n        scope.matches = [];                                                                                           // 4155\n        scope.activeIdx = -1;                                                                                         // 4156\n        element.attr('aria-expanded', false);                                                                         // 4157\n      };                                                                                                              // 4158\n                                                                                                                      // 4159\n      var getMatchId = function(index) {                                                                              // 4160\n        return popupId + '-option-' + index;                                                                          // 4161\n      };                                                                                                              // 4162\n                                                                                                                      // 4163\n      // Indicate that the specified match is the active (pre-selected) item in the list owned by this typeahead.     // 4164\n      // This attribute is added or removed automatically when the `activeIdx` changes.                               // 4165\n      scope.$watch('activeIdx', function(index) {                                                                     // 4166\n        if (index < 0) {                                                                                              // 4167\n          element.removeAttr('aria-activedescendant');                                                                // 4168\n        } else {                                                                                                      // 4169\n          element.attr('aria-activedescendant', getMatchId(index));                                                   // 4170\n        }                                                                                                             // 4171\n      });                                                                                                             // 4172\n                                                                                                                      // 4173\n      var getMatchesAsync = function(inputValue) {                                                                    // 4174\n                                                                                                                      // 4175\n        var locals = {$viewValue: inputValue};                                                                        // 4176\n        isLoadingSetter(originalScope, true);                                                                         // 4177\n        $q.when(parserResult.source(originalScope, locals)).then(function(matches) {                                  // 4178\n                                                                                                                      // 4179\n          //it might happen that several async queries were in progress if a user were typing fast                    // 4180\n          //but we are interested only in responses that correspond to the current view value                         // 4181\n          var onCurrentRequest = (inputValue === modelCtrl.$viewValue);                                               // 4182\n          if (onCurrentRequest && hasFocus) {                                                                         // 4183\n            if (matches && matches.length > 0) {                                                                      // 4184\n                                                                                                                      // 4185\n              scope.activeIdx = focusFirst ? 0 : -1;                                                                  // 4186\n              scope.matches.length = 0;                                                                               // 4187\n                                                                                                                      // 4188\n              //transform labels                                                                                      // 4189\n              for(var i=0; i<matches.length; i++) {                                                                   // 4190\n                locals[parserResult.itemName] = matches[i];                                                           // 4191\n                scope.matches.push({                                                                                  // 4192\n                  id: getMatchId(i),                                                                                  // 4193\n                  label: parserResult.viewMapper(scope, locals),                                                      // 4194\n                  model: matches[i]                                                                                   // 4195\n                });                                                                                                   // 4196\n              }                                                                                                       // 4197\n                                                                                                                      // 4198\n              scope.query = inputValue;                                                                               // 4199\n              //position pop-up with matches - we need to re-calculate its position each time we are opening a window // 4200\n              //with matches as a pop-up might be absolute-positioned and position of an input might have changed on a page\n              //due to other elements being rendered                                                                  // 4202\n              scope.position = appendToBody ? $position.offset(element) : $position.position(element);                // 4203\n              scope.position.top = scope.position.top + element.prop('offsetHeight');                                 // 4204\n                                                                                                                      // 4205\n              element.attr('aria-expanded', true);                                                                    // 4206\n            } else {                                                                                                  // 4207\n              resetMatches();                                                                                         // 4208\n            }                                                                                                         // 4209\n          }                                                                                                           // 4210\n          if (onCurrentRequest) {                                                                                     // 4211\n            isLoadingSetter(originalScope, false);                                                                    // 4212\n          }                                                                                                           // 4213\n        }, function(){                                                                                                // 4214\n          resetMatches();                                                                                             // 4215\n          isLoadingSetter(originalScope, false);                                                                      // 4216\n        });                                                                                                           // 4217\n      };                                                                                                              // 4218\n                                                                                                                      // 4219\n      resetMatches();                                                                                                 // 4220\n                                                                                                                      // 4221\n      //we need to propagate user's query so we can higlight matches                                                  // 4222\n      scope.query = undefined;                                                                                        // 4223\n                                                                                                                      // 4224\n      //Declare the timeout promise var outside the function scope so that stacked calls can be cancelled later       // 4225\n      var timeoutPromise;                                                                                             // 4226\n                                                                                                                      // 4227\n      var scheduleSearchWithTimeout = function(inputValue) {                                                          // 4228\n        timeoutPromise = $timeout(function () {                                                                       // 4229\n          getMatchesAsync(inputValue);                                                                                // 4230\n        }, waitTime);                                                                                                 // 4231\n      };                                                                                                              // 4232\n                                                                                                                      // 4233\n      var cancelPreviousTimeout = function() {                                                                        // 4234\n        if (timeoutPromise) {                                                                                         // 4235\n          $timeout.cancel(timeoutPromise);                                                                            // 4236\n        }                                                                                                             // 4237\n      };                                                                                                              // 4238\n                                                                                                                      // 4239\n      //plug into $parsers pipeline to open a typeahead on view changes initiated from DOM                            // 4240\n      //$parsers kick-in on all the changes coming from the view as well as manually triggered by $setViewValue       // 4241\n      modelCtrl.$parsers.unshift(function (inputValue) {                                                              // 4242\n                                                                                                                      // 4243\n        hasFocus = true;                                                                                              // 4244\n                                                                                                                      // 4245\n        if (inputValue && inputValue.length >= minSearch) {                                                           // 4246\n          if (waitTime > 0) {                                                                                         // 4247\n            cancelPreviousTimeout();                                                                                  // 4248\n            scheduleSearchWithTimeout(inputValue);                                                                    // 4249\n          } else {                                                                                                    // 4250\n            getMatchesAsync(inputValue);                                                                              // 4251\n          }                                                                                                           // 4252\n        } else {                                                                                                      // 4253\n          isLoadingSetter(originalScope, false);                                                                      // 4254\n          cancelPreviousTimeout();                                                                                    // 4255\n          resetMatches();                                                                                             // 4256\n        }                                                                                                             // 4257\n                                                                                                                      // 4258\n        if (isEditable) {                                                                                             // 4259\n          return inputValue;                                                                                          // 4260\n        } else {                                                                                                      // 4261\n          if (!inputValue) {                                                                                          // 4262\n            // Reset in case user had typed something previously.                                                     // 4263\n            modelCtrl.$setValidity('editable', true);                                                                 // 4264\n            return inputValue;                                                                                        // 4265\n          } else {                                                                                                    // 4266\n            modelCtrl.$setValidity('editable', false);                                                                // 4267\n            return undefined;                                                                                         // 4268\n          }                                                                                                           // 4269\n        }                                                                                                             // 4270\n      });                                                                                                             // 4271\n                                                                                                                      // 4272\n      modelCtrl.$formatters.push(function (modelValue) {                                                              // 4273\n                                                                                                                      // 4274\n        var candidateViewValue, emptyViewValue;                                                                       // 4275\n        var locals = {};                                                                                              // 4276\n                                                                                                                      // 4277\n        // The validity may be set to false via $parsers (see above) if                                               // 4278\n        // the model is restricted to selected values. If the model                                                   // 4279\n        // is set manually it is considered to be valid.                                                              // 4280\n        if (!isEditable) {                                                                                            // 4281\n          modelCtrl.$setValidity('editable', true);                                                                   // 4282\n        }                                                                                                             // 4283\n                                                                                                                      // 4284\n        if (inputFormatter) {                                                                                         // 4285\n                                                                                                                      // 4286\n          locals.$model = modelValue;                                                                                 // 4287\n          return inputFormatter(originalScope, locals);                                                               // 4288\n                                                                                                                      // 4289\n        } else {                                                                                                      // 4290\n                                                                                                                      // 4291\n          //it might happen that we don't have enough info to properly render input value                             // 4292\n          //we need to check for this situation and simply return model value if we can't apply custom formatting     // 4293\n          locals[parserResult.itemName] = modelValue;                                                                 // 4294\n          candidateViewValue = parserResult.viewMapper(originalScope, locals);                                        // 4295\n          locals[parserResult.itemName] = undefined;                                                                  // 4296\n          emptyViewValue = parserResult.viewMapper(originalScope, locals);                                            // 4297\n                                                                                                                      // 4298\n          return candidateViewValue!== emptyViewValue ? candidateViewValue : modelValue;                              // 4299\n        }                                                                                                             // 4300\n      });                                                                                                             // 4301\n                                                                                                                      // 4302\n      scope.select = function (activeIdx) {                                                                           // 4303\n        //called from within the $digest() cycle                                                                      // 4304\n        var locals = {};                                                                                              // 4305\n        var model, item;                                                                                              // 4306\n                                                                                                                      // 4307\n        locals[parserResult.itemName] = item = scope.matches[activeIdx].model;                                        // 4308\n        model = parserResult.modelMapper(originalScope, locals);                                                      // 4309\n        $setModelValue(originalScope, model);                                                                         // 4310\n        modelCtrl.$setValidity('editable', true);                                                                     // 4311\n        modelCtrl.$setValidity('parse', true);                                                                        // 4312\n                                                                                                                      // 4313\n        onSelectCallback(originalScope, {                                                                             // 4314\n          $item: item,                                                                                                // 4315\n          $model: model,                                                                                              // 4316\n          $label: parserResult.viewMapper(originalScope, locals)                                                      // 4317\n        });                                                                                                           // 4318\n                                                                                                                      // 4319\n        resetMatches();                                                                                               // 4320\n                                                                                                                      // 4321\n        //return focus to the input element if a match was selected via a mouse click event                           // 4322\n        // use timeout to avoid $rootScope:inprog error                                                               // 4323\n        $timeout(function() { element[0].focus(); }, 0, false);                                                       // 4324\n      };                                                                                                              // 4325\n                                                                                                                      // 4326\n      //bind keyboard events: arrows up(38) / down(40), enter(13) and tab(9), esc(27)                                 // 4327\n      element.bind('keydown', function (evt) {                                                                        // 4328\n                                                                                                                      // 4329\n        //typeahead is open and an \"interesting\" key was pressed                                                      // 4330\n        if (scope.matches.length === 0 || HOT_KEYS.indexOf(evt.which) === -1) {                                       // 4331\n          return;                                                                                                     // 4332\n        }                                                                                                             // 4333\n                                                                                                                      // 4334\n        // if there's nothing selected (i.e. focusFirst) and enter is hit, don't do anything                          // 4335\n        if (scope.activeIdx == -1 && (evt.which === 13 || evt.which === 9)) {                                         // 4336\n          return;                                                                                                     // 4337\n        }                                                                                                             // 4338\n                                                                                                                      // 4339\n        evt.preventDefault();                                                                                         // 4340\n                                                                                                                      // 4341\n        if (evt.which === 40) {                                                                                       // 4342\n          scope.activeIdx = (scope.activeIdx + 1) % scope.matches.length;                                             // 4343\n          scope.$digest();                                                                                            // 4344\n                                                                                                                      // 4345\n        } else if (evt.which === 38) {                                                                                // 4346\n          scope.activeIdx = (scope.activeIdx > 0 ? scope.activeIdx : scope.matches.length) - 1;                       // 4347\n          scope.$digest();                                                                                            // 4348\n                                                                                                                      // 4349\n        } else if (evt.which === 13 || evt.which === 9) {                                                             // 4350\n          scope.$apply(function () {                                                                                  // 4351\n            scope.select(scope.activeIdx);                                                                            // 4352\n          });                                                                                                         // 4353\n                                                                                                                      // 4354\n        } else if (evt.which === 27) {                                                                                // 4355\n          evt.stopPropagation();                                                                                      // 4356\n                                                                                                                      // 4357\n          resetMatches();                                                                                             // 4358\n          scope.$digest();                                                                                            // 4359\n        }                                                                                                             // 4360\n      });                                                                                                             // 4361\n                                                                                                                      // 4362\n      element.bind('blur', function (evt) {                                                                           // 4363\n        hasFocus = false;                                                                                             // 4364\n      });                                                                                                             // 4365\n                                                                                                                      // 4366\n      // Keep reference to click handler to unbind it.                                                                // 4367\n      var dismissClickHandler = function (evt) {                                                                      // 4368\n        if (element[0] !== evt.target) {                                                                              // 4369\n          resetMatches();                                                                                             // 4370\n          scope.$digest();                                                                                            // 4371\n        }                                                                                                             // 4372\n      };                                                                                                              // 4373\n                                                                                                                      // 4374\n      $document.bind('click', dismissClickHandler);                                                                   // 4375\n                                                                                                                      // 4376\n      originalScope.$on('$destroy', function(){                                                                       // 4377\n        $document.unbind('click', dismissClickHandler);                                                               // 4378\n        if (appendToBody) {                                                                                           // 4379\n          $popup.remove();                                                                                            // 4380\n        }                                                                                                             // 4381\n        // Prevent jQuery cache memory leak                                                                           // 4382\n        popUpEl.remove();                                                                                             // 4383\n      });                                                                                                             // 4384\n                                                                                                                      // 4385\n      var $popup = $compile(popUpEl)(scope);                                                                          // 4386\n                                                                                                                      // 4387\n      if (appendToBody) {                                                                                             // 4388\n        $document.find('body').append($popup);                                                                        // 4389\n      } else {                                                                                                        // 4390\n        element.after($popup);                                                                                        // 4391\n      }                                                                                                               // 4392\n    }                                                                                                                 // 4393\n  };                                                                                                                  // 4394\n                                                                                                                      // 4395\n}])                                                                                                                   // 4396\n                                                                                                                      // 4397\n  .directive('typeaheadPopup', function () {                                                                          // 4398\n    return {                                                                                                          // 4399\n      restrict:'EA',                                                                                                  // 4400\n      scope:{                                                                                                         // 4401\n        matches:'=',                                                                                                  // 4402\n        query:'=',                                                                                                    // 4403\n        active:'=',                                                                                                   // 4404\n        position:'=',                                                                                                 // 4405\n        select:'&'                                                                                                    // 4406\n      },                                                                                                              // 4407\n      replace:true,                                                                                                   // 4408\n      templateUrl:'template/typeahead/typeahead-popup.html',                                                          // 4409\n      link:function (scope, element, attrs) {                                                                         // 4410\n                                                                                                                      // 4411\n        scope.templateUrl = attrs.templateUrl;                                                                        // 4412\n                                                                                                                      // 4413\n        scope.isOpen = function () {                                                                                  // 4414\n          return scope.matches.length > 0;                                                                            // 4415\n        };                                                                                                            // 4416\n                                                                                                                      // 4417\n        scope.isActive = function (matchIdx) {                                                                        // 4418\n          return scope.active == matchIdx;                                                                            // 4419\n        };                                                                                                            // 4420\n                                                                                                                      // 4421\n        scope.selectActive = function (matchIdx) {                                                                    // 4422\n          scope.active = matchIdx;                                                                                    // 4423\n        };                                                                                                            // 4424\n                                                                                                                      // 4425\n        scope.selectMatch = function (activeIdx) {                                                                    // 4426\n          scope.select({activeIdx:activeIdx});                                                                        // 4427\n        };                                                                                                            // 4428\n      }                                                                                                               // 4429\n    };                                                                                                                // 4430\n  })                                                                                                                  // 4431\n                                                                                                                      // 4432\n  .directive('typeaheadMatch', ['$templateRequest', '$compile', '$parse', function ($templateRequest, $compile, $parse) {\n    return {                                                                                                          // 4434\n      restrict:'EA',                                                                                                  // 4435\n      scope:{                                                                                                         // 4436\n        index:'=',                                                                                                    // 4437\n        match:'=',                                                                                                    // 4438\n        query:'='                                                                                                     // 4439\n      },                                                                                                              // 4440\n      link:function (scope, element, attrs) {                                                                         // 4441\n        var tplUrl = $parse(attrs.templateUrl)(scope.$parent) || 'template/typeahead/typeahead-match.html';           // 4442\n        $templateRequest(tplUrl).then(function(tplContent) {                                                          // 4443\n          $compile(tplContent.trim())(scope, function(clonedElement){                                                 // 4444\n            element.replaceWith(clonedElement);                                                                       // 4445\n          });                                                                                                         // 4446\n        });                                                                                                           // 4447\n      }                                                                                                               // 4448\n    };                                                                                                                // 4449\n  }])                                                                                                                 // 4450\n                                                                                                                      // 4451\n  .filter('typeaheadHighlight', function() {                                                                          // 4452\n                                                                                                                      // 4453\n    function escapeRegexp(queryToEscape) {                                                                            // 4454\n      return queryToEscape.replace(/([.?*+^$[\\]\\\\(){}|-])/g, '\\\\$1');                                                 // 4455\n    }                                                                                                                 // 4456\n                                                                                                                      // 4457\n    return function(matchItem, query) {                                                                               // 4458\n      return query ? ('' + matchItem).replace(new RegExp(escapeRegexp(query), 'gi'), '<strong>$&</strong>') : matchItem;\n    };                                                                                                                // 4460\n  });                                                                                                                 // 4461\n                                                                                                                      // 4462\nangular.module(\"template/accordion/accordion-group.html\", []).run([\"$templateCache\", function($templateCache) {       // 4463\n  $templateCache.put(\"template/accordion/accordion-group.html\",                                                       // 4464\n    \"<div class=\\\"panel panel-default\\\">\\n\" +                                                                         // 4465\n    \"  <div class=\\\"panel-heading\\\">\\n\" +                                                                             // 4466\n    \"    <h4 class=\\\"panel-title\\\">\\n\" +                                                                              // 4467\n    \"      <a href=\\\"javascript:void(0)\\\" tabindex=\\\"0\\\" class=\\\"accordion-toggle\\\" ng-click=\\\"toggleOpen()\\\" accordion-transclude=\\\"heading\\\"><span ng-class=\\\"{'text-muted': isDisabled}\\\">{{heading}}</span></a>\\n\" +\n    \"    </h4>\\n\" +                                                                                                   // 4469\n    \"  </div>\\n\" +                                                                                                    // 4470\n    \"  <div class=\\\"panel-collapse collapse\\\" collapse=\\\"!isOpen\\\">\\n\" +                                              // 4471\n    \"\t  <div class=\\\"panel-body\\\" ng-transclude></div>\\n\" +                                                           // 4472\n    \"  </div>\\n\" +                                                                                                    // 4473\n    \"</div>\\n\" +                                                                                                      // 4474\n    \"\");                                                                                                              // 4475\n}]);                                                                                                                  // 4476\n                                                                                                                      // 4477\nangular.module(\"template/accordion/accordion.html\", []).run([\"$templateCache\", function($templateCache) {             // 4478\n  $templateCache.put(\"template/accordion/accordion.html\",                                                             // 4479\n    \"<div class=\\\"panel-group\\\" ng-transclude></div>\");                                                               // 4480\n}]);                                                                                                                  // 4481\n                                                                                                                      // 4482\nangular.module(\"template/alert/alert.html\", []).run([\"$templateCache\", function($templateCache) {                     // 4483\n  $templateCache.put(\"template/alert/alert.html\",                                                                     // 4484\n    \"<div class=\\\"alert\\\" ng-class=\\\"['alert-' + (type || 'warning'), closeable ? 'alert-dismissable' : null]\\\" role=\\\"alert\\\">\\n\" +\n    \"    <button ng-show=\\\"closeable\\\" type=\\\"button\\\" class=\\\"close\\\" ng-click=\\\"close()\\\">\\n\" +                     // 4486\n    \"        <span aria-hidden=\\\"true\\\">&times;</span>\\n\" +                                                           // 4487\n    \"        <span class=\\\"sr-only\\\">Close</span>\\n\" +                                                                // 4488\n    \"    </button>\\n\" +                                                                                               // 4489\n    \"    <div ng-transclude></div>\\n\" +                                                                               // 4490\n    \"</div>\\n\" +                                                                                                      // 4491\n    \"\");                                                                                                              // 4492\n}]);                                                                                                                  // 4493\n                                                                                                                      // 4494\nangular.module(\"template/carousel/carousel.html\", []).run([\"$templateCache\", function($templateCache) {               // 4495\n  $templateCache.put(\"template/carousel/carousel.html\",                                                               // 4496\n    \"<div ng-mouseenter=\\\"pause()\\\" ng-mouseleave=\\\"play()\\\" class=\\\"carousel\\\" ng-swipe-right=\\\"prev()\\\" ng-swipe-left=\\\"next()\\\">\\n\" +\n    \"    <ol class=\\\"carousel-indicators\\\" ng-show=\\\"slides.length > 1\\\">\\n\" +                                        // 4498\n    \"        <li ng-repeat=\\\"slide in slides | orderBy:'index' track by $index\\\" ng-class=\\\"{active: isActive(slide)}\\\" ng-click=\\\"select(slide)\\\"></li>\\n\" +\n    \"    </ol>\\n\" +                                                                                                   // 4500\n    \"    <div class=\\\"carousel-inner\\\" ng-transclude></div>\\n\" +                                                      // 4501\n    \"    <a class=\\\"left carousel-control\\\" ng-click=\\\"prev()\\\" ng-show=\\\"slides.length > 1\\\"><span class=\\\"glyphicon glyphicon-chevron-left\\\"></span></a>\\n\" +\n    \"    <a class=\\\"right carousel-control\\\" ng-click=\\\"next()\\\" ng-show=\\\"slides.length > 1\\\"><span class=\\\"glyphicon glyphicon-chevron-right\\\"></span></a>\\n\" +\n    \"</div>\\n\" +                                                                                                      // 4504\n    \"\");                                                                                                              // 4505\n}]);                                                                                                                  // 4506\n                                                                                                                      // 4507\nangular.module(\"template/carousel/slide.html\", []).run([\"$templateCache\", function($templateCache) {                  // 4508\n  $templateCache.put(\"template/carousel/slide.html\",                                                                  // 4509\n    \"<div ng-class=\\\"{\\n\" +                                                                                           // 4510\n    \"    'active': active\\n\" +                                                                                        // 4511\n    \"  }\\\" class=\\\"item text-center\\\" ng-transclude></div>\\n\" +                                                       // 4512\n    \"\");                                                                                                              // 4513\n}]);                                                                                                                  // 4514\n                                                                                                                      // 4515\nangular.module(\"template/datepicker/datepicker.html\", []).run([\"$templateCache\", function($templateCache) {           // 4516\n  $templateCache.put(\"template/datepicker/datepicker.html\",                                                           // 4517\n    \"<div ng-switch=\\\"datepickerMode\\\" role=\\\"application\\\" ng-keydown=\\\"keydown($event)\\\">\\n\" +                      // 4518\n    \"  <daypicker ng-switch-when=\\\"day\\\" tabindex=\\\"0\\\"></daypicker>\\n\" +                                             // 4519\n    \"  <monthpicker ng-switch-when=\\\"month\\\" tabindex=\\\"0\\\"></monthpicker>\\n\" +                                       // 4520\n    \"  <yearpicker ng-switch-when=\\\"year\\\" tabindex=\\\"0\\\"></yearpicker>\\n\" +                                          // 4521\n    \"</div>\");                                                                                                        // 4522\n}]);                                                                                                                  // 4523\n                                                                                                                      // 4524\nangular.module(\"template/datepicker/day.html\", []).run([\"$templateCache\", function($templateCache) {                  // 4525\n  $templateCache.put(\"template/datepicker/day.html\",                                                                  // 4526\n    \"<table role=\\\"grid\\\" aria-labelledby=\\\"{{uniqueId}}-title\\\" aria-activedescendant=\\\"{{activeDateId}}\\\">\\n\" +     // 4527\n    \"  <thead>\\n\" +                                                                                                   // 4528\n    \"    <tr>\\n\" +                                                                                                    // 4529\n    \"      <th><button type=\\\"button\\\" class=\\\"btn btn-default btn-sm pull-left\\\" ng-click=\\\"move(-1)\\\" tabindex=\\\"-1\\\"><i class=\\\"glyphicon glyphicon-chevron-left\\\"></i></button></th>\\n\" +\n    \"      <th colspan=\\\"{{5 + showWeeks}}\\\"><button id=\\\"{{uniqueId}}-title\\\" role=\\\"heading\\\" aria-live=\\\"assertive\\\" aria-atomic=\\\"true\\\" type=\\\"button\\\" class=\\\"btn btn-default btn-sm\\\" ng-click=\\\"toggleMode()\\\" ng-disabled=\\\"datepickerMode === maxMode\\\" tabindex=\\\"-1\\\" style=\\\"width:100%;\\\"><strong>{{title}}</strong></button></th>\\n\" +\n    \"      <th><button type=\\\"button\\\" class=\\\"btn btn-default btn-sm pull-right\\\" ng-click=\\\"move(1)\\\" tabindex=\\\"-1\\\"><i class=\\\"glyphicon glyphicon-chevron-right\\\"></i></button></th>\\n\" +\n    \"    </tr>\\n\" +                                                                                                   // 4533\n    \"    <tr>\\n\" +                                                                                                    // 4534\n    \"      <th ng-show=\\\"showWeeks\\\" class=\\\"text-center\\\"></th>\\n\" +                                                 // 4535\n    \"      <th ng-repeat=\\\"label in labels track by $index\\\" class=\\\"text-center\\\"><small aria-label=\\\"{{label.full}}\\\">{{label.abbr}}</small></th>\\n\" +\n    \"    </tr>\\n\" +                                                                                                   // 4537\n    \"  </thead>\\n\" +                                                                                                  // 4538\n    \"  <tbody>\\n\" +                                                                                                   // 4539\n    \"    <tr ng-repeat=\\\"row in rows track by $index\\\">\\n\" +                                                          // 4540\n    \"      <td ng-show=\\\"showWeeks\\\" class=\\\"text-center h6\\\"><em>{{ weekNumbers[$index] }}</em></td>\\n\" +            // 4541\n    \"      <td ng-repeat=\\\"dt in row track by dt.date\\\" class=\\\"text-center\\\" role=\\\"gridcell\\\" id=\\\"{{dt.uid}}\\\" aria-disabled=\\\"{{!!dt.disabled}}\\\" ng-class=\\\"dt.customClass\\\">\\n\" +\n    \"        <button type=\\\"button\\\" style=\\\"width:100%;\\\" class=\\\"btn btn-default btn-sm\\\" ng-class=\\\"{'btn-info': dt.selected, active: isActive(dt)}\\\" ng-click=\\\"select(dt.date)\\\" ng-disabled=\\\"dt.disabled\\\" tabindex=\\\"-1\\\"><span ng-class=\\\"{'text-muted': dt.secondary, 'text-info': dt.current}\\\">{{dt.label}}</span></button>\\n\" +\n    \"      </td>\\n\" +                                                                                                 // 4544\n    \"    </tr>\\n\" +                                                                                                   // 4545\n    \"  </tbody>\\n\" +                                                                                                  // 4546\n    \"</table>\\n\" +                                                                                                    // 4547\n    \"\");                                                                                                              // 4548\n}]);                                                                                                                  // 4549\n                                                                                                                      // 4550\nangular.module(\"template/datepicker/month.html\", []).run([\"$templateCache\", function($templateCache) {                // 4551\n  $templateCache.put(\"template/datepicker/month.html\",                                                                // 4552\n    \"<table role=\\\"grid\\\" aria-labelledby=\\\"{{uniqueId}}-title\\\" aria-activedescendant=\\\"{{activeDateId}}\\\">\\n\" +     // 4553\n    \"  <thead>\\n\" +                                                                                                   // 4554\n    \"    <tr>\\n\" +                                                                                                    // 4555\n    \"      <th><button type=\\\"button\\\" class=\\\"btn btn-default btn-sm pull-left\\\" ng-click=\\\"move(-1)\\\" tabindex=\\\"-1\\\"><i class=\\\"glyphicon glyphicon-chevron-left\\\"></i></button></th>\\n\" +\n    \"      <th><button id=\\\"{{uniqueId}}-title\\\" role=\\\"heading\\\" aria-live=\\\"assertive\\\" aria-atomic=\\\"true\\\" type=\\\"button\\\" class=\\\"btn btn-default btn-sm\\\" ng-click=\\\"toggleMode()\\\" ng-disabled=\\\"datepickerMode === maxMode\\\" tabindex=\\\"-1\\\" style=\\\"width:100%;\\\"><strong>{{title}}</strong></button></th>\\n\" +\n    \"      <th><button type=\\\"button\\\" class=\\\"btn btn-default btn-sm pull-right\\\" ng-click=\\\"move(1)\\\" tabindex=\\\"-1\\\"><i class=\\\"glyphicon glyphicon-chevron-right\\\"></i></button></th>\\n\" +\n    \"    </tr>\\n\" +                                                                                                   // 4559\n    \"  </thead>\\n\" +                                                                                                  // 4560\n    \"  <tbody>\\n\" +                                                                                                   // 4561\n    \"    <tr ng-repeat=\\\"row in rows track by $index\\\">\\n\" +                                                          // 4562\n    \"      <td ng-repeat=\\\"dt in row track by dt.date\\\" class=\\\"text-center\\\" role=\\\"gridcell\\\" id=\\\"{{dt.uid}}\\\" aria-disabled=\\\"{{!!dt.disabled}}\\\">\\n\" +\n    \"        <button type=\\\"button\\\" style=\\\"width:100%;\\\" class=\\\"btn btn-default\\\" ng-class=\\\"{'btn-info': dt.selected, active: isActive(dt)}\\\" ng-click=\\\"select(dt.date)\\\" ng-disabled=\\\"dt.disabled\\\" tabindex=\\\"-1\\\"><span ng-class=\\\"{'text-info': dt.current}\\\">{{dt.label}}</span></button>\\n\" +\n    \"      </td>\\n\" +                                                                                                 // 4565\n    \"    </tr>\\n\" +                                                                                                   // 4566\n    \"  </tbody>\\n\" +                                                                                                  // 4567\n    \"</table>\\n\" +                                                                                                    // 4568\n    \"\");                                                                                                              // 4569\n}]);                                                                                                                  // 4570\n                                                                                                                      // 4571\nangular.module(\"template/datepicker/popup.html\", []).run([\"$templateCache\", function($templateCache) {                // 4572\n  $templateCache.put(\"template/datepicker/popup.html\",                                                                // 4573\n    \"<ul class=\\\"dropdown-menu\\\" ng-style=\\\"{display: (isOpen && 'block') || 'none', top: position.top+'px', left: position.left+'px'}\\\" ng-keydown=\\\"keydown($event)\\\">\\n\" +\n    \"\t<li ng-transclude></li>\\n\" +                                                                                    // 4575\n    \"\t<li ng-if=\\\"showButtonBar\\\" style=\\\"padding:10px 9px 2px\\\">\\n\" +                                                // 4576\n    \"\t\t<span class=\\\"btn-group pull-left\\\">\\n\" +                                                                      // 4577\n    \"\t\t\t<button type=\\\"button\\\" class=\\\"btn btn-sm btn-info\\\" ng-click=\\\"select('today')\\\">{{ getText('current') }}</button>\\n\" +\n    \"\t\t\t<button type=\\\"button\\\" class=\\\"btn btn-sm btn-danger\\\" ng-click=\\\"select(null)\\\">{{ getText('clear') }}</button>\\n\" +\n    \"\t\t</span>\\n\" +                                                                                                   // 4580\n    \"\t\t<button type=\\\"button\\\" class=\\\"btn btn-sm btn-success pull-right\\\" ng-click=\\\"close()\\\">{{ getText('close') }}</button>\\n\" +\n    \"\t</li>\\n\" +                                                                                                      // 4582\n    \"</ul>\\n\" +                                                                                                       // 4583\n    \"\");                                                                                                              // 4584\n}]);                                                                                                                  // 4585\n                                                                                                                      // 4586\nangular.module(\"template/datepicker/year.html\", []).run([\"$templateCache\", function($templateCache) {                 // 4587\n  $templateCache.put(\"template/datepicker/year.html\",                                                                 // 4588\n    \"<table role=\\\"grid\\\" aria-labelledby=\\\"{{uniqueId}}-title\\\" aria-activedescendant=\\\"{{activeDateId}}\\\">\\n\" +     // 4589\n    \"  <thead>\\n\" +                                                                                                   // 4590\n    \"    <tr>\\n\" +                                                                                                    // 4591\n    \"      <th><button type=\\\"button\\\" class=\\\"btn btn-default btn-sm pull-left\\\" ng-click=\\\"move(-1)\\\" tabindex=\\\"-1\\\"><i class=\\\"glyphicon glyphicon-chevron-left\\\"></i></button></th>\\n\" +\n    \"      <th colspan=\\\"3\\\"><button id=\\\"{{uniqueId}}-title\\\" role=\\\"heading\\\" aria-live=\\\"assertive\\\" aria-atomic=\\\"true\\\" type=\\\"button\\\" class=\\\"btn btn-default btn-sm\\\" ng-click=\\\"toggleMode()\\\" ng-disabled=\\\"datepickerMode === maxMode\\\" tabindex=\\\"-1\\\" style=\\\"width:100%;\\\"><strong>{{title}}</strong></button></th>\\n\" +\n    \"      <th><button type=\\\"button\\\" class=\\\"btn btn-default btn-sm pull-right\\\" ng-click=\\\"move(1)\\\" tabindex=\\\"-1\\\"><i class=\\\"glyphicon glyphicon-chevron-right\\\"></i></button></th>\\n\" +\n    \"    </tr>\\n\" +                                                                                                   // 4595\n    \"  </thead>\\n\" +                                                                                                  // 4596\n    \"  <tbody>\\n\" +                                                                                                   // 4597\n    \"    <tr ng-repeat=\\\"row in rows track by $index\\\">\\n\" +                                                          // 4598\n    \"      <td ng-repeat=\\\"dt in row track by dt.date\\\" class=\\\"text-center\\\" role=\\\"gridcell\\\" id=\\\"{{dt.uid}}\\\" aria-disabled=\\\"{{!!dt.disabled}}\\\">\\n\" +\n    \"        <button type=\\\"button\\\" style=\\\"width:100%;\\\" class=\\\"btn btn-default\\\" ng-class=\\\"{'btn-info': dt.selected, active: isActive(dt)}\\\" ng-click=\\\"select(dt.date)\\\" ng-disabled=\\\"dt.disabled\\\" tabindex=\\\"-1\\\"><span ng-class=\\\"{'text-info': dt.current}\\\">{{dt.label}}</span></button>\\n\" +\n    \"      </td>\\n\" +                                                                                                 // 4601\n    \"    </tr>\\n\" +                                                                                                   // 4602\n    \"  </tbody>\\n\" +                                                                                                  // 4603\n    \"</table>\\n\" +                                                                                                    // 4604\n    \"\");                                                                                                              // 4605\n}]);                                                                                                                  // 4606\n                                                                                                                      // 4607\nangular.module(\"template/modal/backdrop.html\", []).run([\"$templateCache\", function($templateCache) {                  // 4608\n  $templateCache.put(\"template/modal/backdrop.html\",                                                                  // 4609\n    \"<div class=\\\"modal-backdrop\\\"\\n\" +                                                                               // 4610\n    \"     modal-animation-class=\\\"fade\\\"\\n\" +                                                                         // 4611\n    \"     ng-class=\\\"{in: animate}\\\"\\n\" +                                                                             // 4612\n    \"     ng-style=\\\"{'z-index': 1040 + (index && 1 || 0) + index*10}\\\"\\n\" +                                          // 4613\n    \"></div>\\n\" +                                                                                                     // 4614\n    \"\");                                                                                                              // 4615\n}]);                                                                                                                  // 4616\n                                                                                                                      // 4617\nangular.module(\"template/modal/window.html\", []).run([\"$templateCache\", function($templateCache) {                    // 4618\n  $templateCache.put(\"template/modal/window.html\",                                                                    // 4619\n    \"<div modal-render=\\\"{{$isRendered}}\\\" tabindex=\\\"-1\\\" role=\\\"dialog\\\" class=\\\"modal\\\"\\n\" +                       // 4620\n    \"    modal-animation-class=\\\"fade\\\"\\n\" +                                                                          // 4621\n    \"\tng-class=\\\"{in: animate}\\\" ng-style=\\\"{'z-index': 1050 + index*10, display: 'block'}\\\" ng-click=\\\"close($event)\\\">\\n\" +\n    \"    <div class=\\\"modal-dialog\\\" ng-class=\\\"size ? 'modal-' + size : ''\\\"><div class=\\\"modal-content\\\" modal-transclude></div></div>\\n\" +\n    \"</div>\\n\" +                                                                                                      // 4624\n    \"\");                                                                                                              // 4625\n}]);                                                                                                                  // 4626\n                                                                                                                      // 4627\nangular.module(\"template/pagination/pager.html\", []).run([\"$templateCache\", function($templateCache) {                // 4628\n  $templateCache.put(\"template/pagination/pager.html\",                                                                // 4629\n    \"<ul class=\\\"pager\\\">\\n\" +                                                                                        // 4630\n    \"  <li ng-class=\\\"{disabled: noPrevious(), previous: align}\\\"><a href ng-click=\\\"selectPage(page - 1, $event)\\\">{{getText('previous')}}</a></li>\\n\" +\n    \"  <li ng-class=\\\"{disabled: noNext(), next: align}\\\"><a href ng-click=\\\"selectPage(page + 1, $event)\\\">{{getText('next')}}</a></li>\\n\" +\n    \"</ul>\");                                                                                                         // 4633\n}]);                                                                                                                  // 4634\n                                                                                                                      // 4635\nangular.module(\"template/pagination/pagination.html\", []).run([\"$templateCache\", function($templateCache) {           // 4636\n  $templateCache.put(\"template/pagination/pagination.html\",                                                           // 4637\n    \"<ul class=\\\"pagination\\\">\\n\" +                                                                                   // 4638\n    \"  <li ng-if=\\\"boundaryLinks\\\" ng-class=\\\"{disabled: noPrevious()}\\\"><a href ng-click=\\\"selectPage(1, $event)\\\">{{getText('first')}}</a></li>\\n\" +\n    \"  <li ng-if=\\\"directionLinks\\\" ng-class=\\\"{disabled: noPrevious()}\\\"><a href ng-click=\\\"selectPage(page - 1, $event)\\\">{{getText('previous')}}</a></li>\\n\" +\n    \"  <li ng-repeat=\\\"page in pages track by $index\\\" ng-class=\\\"{active: page.active}\\\"><a href ng-click=\\\"selectPage(page.number, $event)\\\">{{page.text}}</a></li>\\n\" +\n    \"  <li ng-if=\\\"directionLinks\\\" ng-class=\\\"{disabled: noNext()}\\\"><a href ng-click=\\\"selectPage(page + 1, $event)\\\">{{getText('next')}}</a></li>\\n\" +\n    \"  <li ng-if=\\\"boundaryLinks\\\" ng-class=\\\"{disabled: noNext()}\\\"><a href ng-click=\\\"selectPage(totalPages, $event)\\\">{{getText('last')}}</a></li>\\n\" +\n    \"</ul>\");                                                                                                         // 4644\n}]);                                                                                                                  // 4645\n                                                                                                                      // 4646\nangular.module(\"template/tooltip/tooltip-html-popup.html\", []).run([\"$templateCache\", function($templateCache) {      // 4647\n  $templateCache.put(\"template/tooltip/tooltip-html-popup.html\",                                                      // 4648\n    \"<div class=\\\"tooltip\\\"\\n\" +                                                                                      // 4649\n    \"  tooltip-animation-class=\\\"fade\\\"\\n\" +                                                                          // 4650\n    \"  tooltip-classes\\n\" +                                                                                           // 4651\n    \"  ng-class=\\\"{ in: isOpen() }\\\">\\n\" +                                                                            // 4652\n    \"  <div class=\\\"tooltip-arrow\\\"></div>\\n\" +                                                                       // 4653\n    \"  <div class=\\\"tooltip-inner\\\" ng-bind-html=\\\"contentExp()\\\"></div>\\n\" +                                         // 4654\n    \"</div>\\n\" +                                                                                                      // 4655\n    \"\");                                                                                                              // 4656\n}]);                                                                                                                  // 4657\n                                                                                                                      // 4658\nangular.module(\"template/tooltip/tooltip-html-unsafe-popup.html\", []).run([\"$templateCache\", function($templateCache) {\n  $templateCache.put(\"template/tooltip/tooltip-html-unsafe-popup.html\",                                               // 4660\n    \"<div class=\\\"tooltip\\\"\\n\" +                                                                                      // 4661\n    \"  tooltip-animation-class=\\\"fade\\\"\\n\" +                                                                          // 4662\n    \"  tooltip-classes\\n\" +                                                                                           // 4663\n    \"  ng-class=\\\"{ in: isOpen() }\\\">\\n\" +                                                                            // 4664\n    \"  <div class=\\\"tooltip-arrow\\\"></div>\\n\" +                                                                       // 4665\n    \"  <div class=\\\"tooltip-inner\\\" bind-html-unsafe=\\\"content\\\"></div>\\n\" +                                          // 4666\n    \"</div>\\n\" +                                                                                                      // 4667\n    \"\");                                                                                                              // 4668\n}]);                                                                                                                  // 4669\n                                                                                                                      // 4670\nangular.module(\"template/tooltip/tooltip-popup.html\", []).run([\"$templateCache\", function($templateCache) {           // 4671\n  $templateCache.put(\"template/tooltip/tooltip-popup.html\",                                                           // 4672\n    \"<div class=\\\"tooltip\\\"\\n\" +                                                                                      // 4673\n    \"  tooltip-animation-class=\\\"fade\\\"\\n\" +                                                                          // 4674\n    \"  tooltip-classes\\n\" +                                                                                           // 4675\n    \"  ng-class=\\\"{ in: isOpen() }\\\">\\n\" +                                                                            // 4676\n    \"  <div class=\\\"tooltip-arrow\\\"></div>\\n\" +                                                                       // 4677\n    \"  <div class=\\\"tooltip-inner\\\" ng-bind=\\\"content\\\"></div>\\n\" +                                                   // 4678\n    \"</div>\\n\" +                                                                                                      // 4679\n    \"\");                                                                                                              // 4680\n}]);                                                                                                                  // 4681\n                                                                                                                      // 4682\nangular.module(\"template/tooltip/tooltip-template-popup.html\", []).run([\"$templateCache\", function($templateCache) {  // 4683\n  $templateCache.put(\"template/tooltip/tooltip-template-popup.html\",                                                  // 4684\n    \"<div class=\\\"tooltip\\\"\\n\" +                                                                                      // 4685\n    \"  tooltip-animation-class=\\\"fade\\\"\\n\" +                                                                          // 4686\n    \"  tooltip-classes\\n\" +                                                                                           // 4687\n    \"  ng-class=\\\"{ in: isOpen() }\\\">\\n\" +                                                                            // 4688\n    \"  <div class=\\\"tooltip-arrow\\\"></div>\\n\" +                                                                       // 4689\n    \"  <div class=\\\"tooltip-inner\\\"\\n\" +                                                                              // 4690\n    \"    tooltip-template-transclude=\\\"contentExp()\\\"\\n\" +                                                            // 4691\n    \"    tooltip-template-transclude-scope=\\\"originScope()\\\"></div>\\n\" +                                              // 4692\n    \"</div>\\n\" +                                                                                                      // 4693\n    \"\");                                                                                                              // 4694\n}]);                                                                                                                  // 4695\n                                                                                                                      // 4696\nangular.module(\"template/popover/popover-template.html\", []).run([\"$templateCache\", function($templateCache) {        // 4697\n  $templateCache.put(\"template/popover/popover-template.html\",                                                        // 4698\n    \"<div class=\\\"popover\\\"\\n\" +                                                                                      // 4699\n    \"  tooltip-animation-class=\\\"fade\\\"\\n\" +                                                                          // 4700\n    \"  tooltip-classes\\n\" +                                                                                           // 4701\n    \"  ng-class=\\\"{ in: isOpen() }\\\">\\n\" +                                                                            // 4702\n    \"  <div class=\\\"arrow\\\"></div>\\n\" +                                                                               // 4703\n    \"\\n\" +                                                                                                            // 4704\n    \"  <div class=\\\"popover-inner\\\">\\n\" +                                                                             // 4705\n    \"      <h3 class=\\\"popover-title\\\" ng-bind=\\\"title\\\" ng-if=\\\"title\\\"></h3>\\n\" +                                   // 4706\n    \"      <div class=\\\"popover-content\\\"\\n\" +                                                                        // 4707\n    \"        tooltip-template-transclude=\\\"contentExp()\\\"\\n\" +                                                        // 4708\n    \"        tooltip-template-transclude-scope=\\\"originScope()\\\"></div>\\n\" +                                          // 4709\n    \"  </div>\\n\" +                                                                                                    // 4710\n    \"</div>\\n\" +                                                                                                      // 4711\n    \"\");                                                                                                              // 4712\n}]);                                                                                                                  // 4713\n                                                                                                                      // 4714\nangular.module(\"template/popover/popover-window.html\", []).run([\"$templateCache\", function($templateCache) {          // 4715\n  $templateCache.put(\"template/popover/popover-window.html\",                                                          // 4716\n    \"<div class=\\\"popover {{placement}}\\\" ng-class=\\\"{ in: isOpen, fade: animation }\\\">\\n\" +                          // 4717\n    \"  <div class=\\\"arrow\\\"></div>\\n\" +                                                                               // 4718\n    \"\\n\" +                                                                                                            // 4719\n    \"  <div class=\\\"popover-inner\\\">\\n\" +                                                                             // 4720\n    \"      <h3 class=\\\"popover-title\\\" ng-bind=\\\"title\\\" ng-show=\\\"title\\\"></h3>\\n\" +                                 // 4721\n    \"      <div class=\\\"popover-content\\\" tooltip-template-transclude></div>\\n\" +                                     // 4722\n    \"  </div>\\n\" +                                                                                                    // 4723\n    \"</div>\\n\" +                                                                                                      // 4724\n    \"\");                                                                                                              // 4725\n}]);                                                                                                                  // 4726\n                                                                                                                      // 4727\nangular.module(\"template/popover/popover.html\", []).run([\"$templateCache\", function($templateCache) {                 // 4728\n  $templateCache.put(\"template/popover/popover.html\",                                                                 // 4729\n    \"<div class=\\\"popover\\\"\\n\" +                                                                                      // 4730\n    \"  tooltip-animation-class=\\\"fade\\\"\\n\" +                                                                          // 4731\n    \"  tooltip-classes\\n\" +                                                                                           // 4732\n    \"  ng-class=\\\"{ in: isOpen() }\\\">\\n\" +                                                                            // 4733\n    \"  <div class=\\\"arrow\\\"></div>\\n\" +                                                                               // 4734\n    \"\\n\" +                                                                                                            // 4735\n    \"  <div class=\\\"popover-inner\\\">\\n\" +                                                                             // 4736\n    \"      <h3 class=\\\"popover-title\\\" ng-bind=\\\"title\\\" ng-if=\\\"title\\\"></h3>\\n\" +                                   // 4737\n    \"      <div class=\\\"popover-content\\\" ng-bind=\\\"content\\\"></div>\\n\" +                                             // 4738\n    \"  </div>\\n\" +                                                                                                    // 4739\n    \"</div>\\n\" +                                                                                                      // 4740\n    \"\");                                                                                                              // 4741\n}]);                                                                                                                  // 4742\n                                                                                                                      // 4743\nangular.module(\"template/progressbar/bar.html\", []).run([\"$templateCache\", function($templateCache) {                 // 4744\n  $templateCache.put(\"template/progressbar/bar.html\",                                                                 // 4745\n    \"<div class=\\\"progress-bar\\\" ng-class=\\\"type && 'progress-bar-' + type\\\" role=\\\"progressbar\\\" aria-valuenow=\\\"{{value}}\\\" aria-valuemin=\\\"0\\\" aria-valuemax=\\\"{{max}}\\\" ng-style=\\\"{width: (percent < 100 ? percent : 100) + '%'}\\\" aria-valuetext=\\\"{{percent | number:0}}%\\\" ng-transclude></div>\\n\" +\n    \"\");                                                                                                              // 4747\n}]);                                                                                                                  // 4748\n                                                                                                                      // 4749\nangular.module(\"template/progressbar/progress.html\", []).run([\"$templateCache\", function($templateCache) {            // 4750\n  $templateCache.put(\"template/progressbar/progress.html\",                                                            // 4751\n    \"<div class=\\\"progress\\\" ng-transclude></div>\");                                                                  // 4752\n}]);                                                                                                                  // 4753\n                                                                                                                      // 4754\nangular.module(\"template/progressbar/progressbar.html\", []).run([\"$templateCache\", function($templateCache) {         // 4755\n  $templateCache.put(\"template/progressbar/progressbar.html\",                                                         // 4756\n    \"<div class=\\\"progress\\\">\\n\" +                                                                                    // 4757\n    \"  <div class=\\\"progress-bar\\\" ng-class=\\\"type && 'progress-bar-' + type\\\" role=\\\"progressbar\\\" aria-valuenow=\\\"{{value}}\\\" aria-valuemin=\\\"0\\\" aria-valuemax=\\\"{{max}}\\\" ng-style=\\\"{width: (percent < 100 ? percent : 100) + '%'}\\\" aria-valuetext=\\\"{{percent | number:0}}%\\\" ng-transclude></div>\\n\" +\n    \"</div>\\n\" +                                                                                                      // 4759\n    \"\");                                                                                                              // 4760\n}]);                                                                                                                  // 4761\n                                                                                                                      // 4762\nangular.module(\"template/rating/rating.html\", []).run([\"$templateCache\", function($templateCache) {                   // 4763\n  $templateCache.put(\"template/rating/rating.html\",                                                                   // 4764\n    \"<span ng-mouseleave=\\\"reset()\\\" ng-keydown=\\\"onKeydown($event)\\\" tabindex=\\\"0\\\" role=\\\"slider\\\" aria-valuemin=\\\"0\\\" aria-valuemax=\\\"{{range.length}}\\\" aria-valuenow=\\\"{{value}}\\\">\\n\" +\n    \"    <i ng-repeat=\\\"r in range track by $index\\\" ng-mouseenter=\\\"enter($index + 1)\\\" ng-click=\\\"rate($index + 1)\\\" class=\\\"glyphicon\\\" ng-class=\\\"$index < value && (r.stateOn || 'glyphicon-star') || (r.stateOff || 'glyphicon-star-empty')\\\">\\n\" +\n    \"        <span class=\\\"sr-only\\\">({{ $index < value ? '*' : ' ' }})</span>\\n\" +                                   // 4767\n    \"    </i>\\n\" +                                                                                                    // 4768\n    \"</span>\");                                                                                                       // 4769\n}]);                                                                                                                  // 4770\n                                                                                                                      // 4771\nangular.module(\"template/tabs/tab.html\", []).run([\"$templateCache\", function($templateCache) {                        // 4772\n  $templateCache.put(\"template/tabs/tab.html\",                                                                        // 4773\n    \"<li ng-class=\\\"{active: active, disabled: disabled}\\\">\\n\" +                                                      // 4774\n    \"  <a href ng-click=\\\"select()\\\" tab-heading-transclude>{{heading}}</a>\\n\" +                                      // 4775\n    \"</li>\\n\" +                                                                                                       // 4776\n    \"\");                                                                                                              // 4777\n}]);                                                                                                                  // 4778\n                                                                                                                      // 4779\nangular.module(\"template/tabs/tabset.html\", []).run([\"$templateCache\", function($templateCache) {                     // 4780\n  $templateCache.put(\"template/tabs/tabset.html\",                                                                     // 4781\n    \"<div>\\n\" +                                                                                                       // 4782\n    \"  <ul class=\\\"nav nav-{{type || 'tabs'}}\\\" ng-class=\\\"{'nav-stacked': vertical, 'nav-justified': justified}\\\" ng-transclude></ul>\\n\" +\n    \"  <div class=\\\"tab-content\\\">\\n\" +                                                                               // 4784\n    \"    <div class=\\\"tab-pane\\\" \\n\" +                                                                                // 4785\n    \"         ng-repeat=\\\"tab in tabs\\\" \\n\" +                                                                         // 4786\n    \"         ng-class=\\\"{active: tab.active}\\\"\\n\" +                                                                  // 4787\n    \"         tab-content-transclude=\\\"tab\\\">\\n\" +                                                                    // 4788\n    \"    </div>\\n\" +                                                                                                  // 4789\n    \"  </div>\\n\" +                                                                                                    // 4790\n    \"</div>\\n\" +                                                                                                      // 4791\n    \"\");                                                                                                              // 4792\n}]);                                                                                                                  // 4793\n                                                                                                                      // 4794\nangular.module(\"template/timepicker/timepicker.html\", []).run([\"$templateCache\", function($templateCache) {           // 4795\n  $templateCache.put(\"template/timepicker/timepicker.html\",                                                           // 4796\n    \"<table>\\n\" +                                                                                                     // 4797\n    \"\t<tbody>\\n\" +                                                                                                    // 4798\n    \"\t\t<tr class=\\\"text-center\\\">\\n\" +                                                                                // 4799\n    \"\t\t\t<td><a ng-click=\\\"incrementHours()\\\" class=\\\"btn btn-link\\\"><span class=\\\"glyphicon glyphicon-chevron-up\\\"></span></a></td>\\n\" +\n    \"\t\t\t<td>&nbsp;</td>\\n\" +                                                                                          // 4801\n    \"\t\t\t<td><a ng-click=\\\"incrementMinutes()\\\" class=\\\"btn btn-link\\\"><span class=\\\"glyphicon glyphicon-chevron-up\\\"></span></a></td>\\n\" +\n    \"\t\t\t<td ng-show=\\\"showMeridian\\\"></td>\\n\" +                                                                       // 4803\n    \"\t\t</tr>\\n\" +                                                                                                     // 4804\n    \"\t\t<tr>\\n\" +                                                                                                      // 4805\n    \"\t\t\t<td class=\\\"form-group\\\" ng-class=\\\"{'has-error': invalidHours}\\\">\\n\" +                                       // 4806\n    \"\t\t\t\t<input style=\\\"width:50px;\\\" type=\\\"text\\\" ng-model=\\\"hours\\\" ng-change=\\\"updateHours()\\\" class=\\\"form-control text-center\\\" ng-readonly=\\\"readonlyInput\\\" maxlength=\\\"2\\\">\\n\" +\n    \"\t\t\t</td>\\n\" +                                                                                                    // 4808\n    \"\t\t\t<td>:</td>\\n\" +                                                                                               // 4809\n    \"\t\t\t<td class=\\\"form-group\\\" ng-class=\\\"{'has-error': invalidMinutes}\\\">\\n\" +                                     // 4810\n    \"\t\t\t\t<input style=\\\"width:50px;\\\" type=\\\"text\\\" ng-model=\\\"minutes\\\" ng-change=\\\"updateMinutes()\\\" class=\\\"form-control text-center\\\" ng-readonly=\\\"readonlyInput\\\" maxlength=\\\"2\\\">\\n\" +\n    \"\t\t\t</td>\\n\" +                                                                                                    // 4812\n    \"\t\t\t<td ng-show=\\\"showMeridian\\\"><button type=\\\"button\\\" class=\\\"btn btn-default text-center\\\" ng-click=\\\"toggleMeridian()\\\">{{meridian}}</button></td>\\n\" +\n    \"\t\t</tr>\\n\" +                                                                                                     // 4814\n    \"\t\t<tr class=\\\"text-center\\\">\\n\" +                                                                                // 4815\n    \"\t\t\t<td><a ng-click=\\\"decrementHours()\\\" class=\\\"btn btn-link\\\"><span class=\\\"glyphicon glyphicon-chevron-down\\\"></span></a></td>\\n\" +\n    \"\t\t\t<td>&nbsp;</td>\\n\" +                                                                                          // 4817\n    \"\t\t\t<td><a ng-click=\\\"decrementMinutes()\\\" class=\\\"btn btn-link\\\"><span class=\\\"glyphicon glyphicon-chevron-down\\\"></span></a></td>\\n\" +\n    \"\t\t\t<td ng-show=\\\"showMeridian\\\"></td>\\n\" +                                                                       // 4819\n    \"\t\t</tr>\\n\" +                                                                                                     // 4820\n    \"\t</tbody>\\n\" +                                                                                                   // 4821\n    \"</table>\\n\" +                                                                                                    // 4822\n    \"\");                                                                                                              // 4823\n}]);                                                                                                                  // 4824\n                                                                                                                      // 4825\nangular.module(\"template/typeahead/typeahead-match.html\", []).run([\"$templateCache\", function($templateCache) {       // 4826\n  $templateCache.put(\"template/typeahead/typeahead-match.html\",                                                       // 4827\n    \"<a tabindex=\\\"-1\\\" bind-html-unsafe=\\\"match.label | typeaheadHighlight:query\\\"></a>\");                           // 4828\n}]);                                                                                                                  // 4829\n                                                                                                                      // 4830\nangular.module(\"template/typeahead/typeahead-popup.html\", []).run([\"$templateCache\", function($templateCache) {       // 4831\n  $templateCache.put(\"template/typeahead/typeahead-popup.html\",                                                       // 4832\n    \"<ul class=\\\"dropdown-menu\\\" ng-show=\\\"isOpen()\\\" ng-style=\\\"{top: position.top+'px', left: position.left+'px'}\\\" style=\\\"display: block;\\\" role=\\\"listbox\\\" aria-hidden=\\\"{{!isOpen()}}\\\">\\n\" +\n    \"    <li ng-repeat=\\\"match in matches track by $index\\\" ng-class=\\\"{active: isActive($index) }\\\" ng-mouseenter=\\\"selectActive($index)\\\" ng-click=\\\"selectMatch($index)\\\" role=\\\"option\\\" id=\\\"{{match.id}}\\\">\\n\" +\n    \"        <div typeahead-match index=\\\"$index\\\" match=\\\"match\\\" query=\\\"query\\\" template-url=\\\"templateUrl\\\"></div>\\n\" +\n    \"    </li>\\n\" +                                                                                                   // 4836\n    \"</ul>\\n\" +                                                                                                       // 4837\n    \"\");                                                                                                              // 4838\n}]);                                                                                                                  // 4839\n!angular.$$csp() && angular.element(document).find('head').prepend('<style type=\"text/css\">.ng-animate.item:not(.left):not(.right){-webkit-transition:0s ease-in-out left;transition:0s ease-in-out left}</style>');\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n"]}}]