[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar _ = Package.underscore._;\n\n/* Package-scope variables */\nvar Email, EmailTest, EmailInternals;\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                        //\n// packages/email/email.js                                                                                //\n//                                                                                                        //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                          //\nvar Future = Npm.require('fibers/future');                                                                // 1\nvar urlModule = Npm.require('url');                                                                       // 2\n                                                                                                          // 3\nEmail = {};                                                                                               // 4\nEmailTest = {};                                                                                           // 5\n                                                                                                          // 6\nEmailInternals = {                                                                                        // 7\n  NpmModules: {                                                                                           // 8\n    mailcomposer: {                                                                                       // 9\n      version: Npm.require('mailcomposer/package.json').version,                                          // 10\n      module: Npm.require('mailcomposer')                                                                 // 11\n    }                                                                                                     // 12\n  }                                                                                                       // 13\n};                                                                                                        // 14\n                                                                                                          // 15\nvar MailComposer = EmailInternals.NpmModules.mailcomposer.module.MailComposer;                            // 16\n                                                                                                          // 17\nvar makePool = function (mailUrlString) {                                                                 // 18\n  var mailUrl = urlModule.parse(mailUrlString);                                                           // 19\n  if (mailUrl.protocol !== 'smtp:')                                                                       // 20\n    throw new Error(\"Email protocol in $MAIL_URL (\" +                                                     // 21\n                    mailUrlString + \") must be 'smtp'\");                                                  // 22\n                                                                                                          // 23\n  var port = +(mailUrl.port);                                                                             // 24\n  var auth = false;                                                                                       // 25\n  if (mailUrl.auth) {                                                                                     // 26\n    var parts = mailUrl.auth.split(':', 2);                                                               // 27\n    auth = {user: parts[0] && decodeURIComponent(parts[0]),                                               // 28\n            pass: parts[1] && decodeURIComponent(parts[1])};                                              // 29\n  }                                                                                                       // 30\n                                                                                                          // 31\n  var simplesmtp = Npm.require('simplesmtp');                                                             // 32\n  var pool = simplesmtp.createClientPool(                                                                 // 33\n    port,  // Defaults to 25                                                                              // 34\n    mailUrl.hostname,  // Defaults to \"localhost\"                                                         // 35\n    { secureConnection: (port === 465),                                                                   // 36\n      // XXX allow maxConnections to be configured?                                                       // 37\n      auth: auth });                                                                                      // 38\n                                                                                                          // 39\n  pool._future_wrapped_sendMail = _.bind(Future.wrap(pool.sendMail), pool);                               // 40\n  return pool;                                                                                            // 41\n};                                                                                                        // 42\n                                                                                                          // 43\nvar getPool = _.once(function () {                                                                        // 44\n  // We delay this check until the first call to Email.send, in case someone                              // 45\n  // set process.env.MAIL_URL in startup code.                                                            // 46\n  var url = process.env.MAIL_URL;                                                                         // 47\n  if (! url)                                                                                              // 48\n    return null;                                                                                          // 49\n  return makePool(url);                                                                                   // 50\n});                                                                                                       // 51\n                                                                                                          // 52\nvar next_devmode_mail_id = 0;                                                                             // 53\nvar output_stream = process.stdout;                                                                       // 54\n                                                                                                          // 55\n// Testing hooks                                                                                          // 56\nEmailTest.overrideOutputStream = function (stream) {                                                      // 57\n  next_devmode_mail_id = 0;                                                                               // 58\n  output_stream = stream;                                                                                 // 59\n};                                                                                                        // 60\n                                                                                                          // 61\nEmailTest.restoreOutputStream = function () {                                                             // 62\n  output_stream = process.stdout;                                                                         // 63\n};                                                                                                        // 64\n                                                                                                          // 65\nvar devModeSend = function (mc) {                                                                         // 66\n  var devmode_mail_id = next_devmode_mail_id++;                                                           // 67\n                                                                                                          // 68\n  var stream = output_stream;                                                                             // 69\n                                                                                                          // 70\n  // This approach does not prevent other writers to stdout from interleaving.                            // 71\n  stream.write(\"====== BEGIN MAIL #\" + devmode_mail_id + \" ======\\n\");                                    // 72\n  stream.write(\"(Mail not sent; to enable sending, set the MAIL_URL \" +                                   // 73\n               \"environment variable.)\\n\");                                                               // 74\n  mc.streamMessage();                                                                                     // 75\n  mc.pipe(stream, {end: false});                                                                          // 76\n  var future = new Future;                                                                                // 77\n  mc.on('end', function () {                                                                              // 78\n    stream.write(\"====== END MAIL #\" + devmode_mail_id + \" ======\\n\");                                    // 79\n    future['return']();                                                                                   // 80\n  });                                                                                                     // 81\n  future.wait();                                                                                          // 82\n};                                                                                                        // 83\n                                                                                                          // 84\nvar smtpSend = function (pool, mc) {                                                                      // 85\n  pool._future_wrapped_sendMail(mc).wait();                                                               // 86\n};                                                                                                        // 87\n                                                                                                          // 88\n/**                                                                                                       // 89\n * Mock out email sending (eg, during a test.) This is private for now.                                   // 90\n *                                                                                                        // 91\n * f receives the arguments to Email.send and should return true to go                                    // 92\n * ahead and send the email (or at least, try subsequent hooks), or                                       // 93\n * false to skip sending.                                                                                 // 94\n */                                                                                                       // 95\nvar sendHooks = [];                                                                                       // 96\nEmailTest.hookSend = function (f) {                                                                       // 97\n  sendHooks.push(f);                                                                                      // 98\n};                                                                                                        // 99\n                                                                                                          // 100\n// Old comment below                                                                                      // 101\n/**                                                                                                       // 102\n * Send an email.                                                                                         // 103\n *                                                                                                        // 104\n * Connects to the mail server configured via the MAIL_URL environment                                    // 105\n * variable. If unset, prints formatted message to stdout. The \"from\" option                              // 106\n * is required, and at least one of \"to\", \"cc\", and \"bcc\" must be provided;                               // 107\n * all other options are optional.                                                                        // 108\n *                                                                                                        // 109\n * @param options                                                                                         // 110\n * @param options.from {String} RFC5322 \"From:\" address                                                   // 111\n * @param options.to {String|String[]} RFC5322 \"To:\" address[es]                                          // 112\n * @param options.cc {String|String[]} RFC5322 \"Cc:\" address[es]                                          // 113\n * @param options.bcc {String|String[]} RFC5322 \"Bcc:\" address[es]                                        // 114\n * @param options.replyTo {String|String[]} RFC5322 \"Reply-To:\" address[es]                               // 115\n * @param options.subject {String} RFC5322 \"Subject:\" line                                                // 116\n * @param options.text {String} RFC5322 mail body (plain text)                                            // 117\n * @param options.html {String} RFC5322 mail body (HTML)                                                  // 118\n * @param options.headers {Object} custom RFC5322 headers (dictionary)                                    // 119\n */                                                                                                       // 120\n                                                                                                          // 121\n// New API doc comment below                                                                              // 122\n/**                                                                                                       // 123\n * @summary Send an email. Throws an `Error` on failure to contact mail server                            // 124\n * or if mail server returns an error. All fields should match                                            // 125\n * [RFC5322](http://tools.ietf.org/html/rfc5322) specification.                                           // 126\n *                                                                                                        // 127\n * If the `MAIL_URL` environment variable is set, actually sends the email.                               // 128\n * Otherwise, prints the contents of the email to standard out.                                           // 129\n *                                                                                                        // 130\n * Note that this package is based on mailcomposer version `0.1.15`, so make                              // 131\n * sure to refer to the documentation for that version if using the                                       // 132\n * `attachments` or `mailComposer` options.                                                               // 133\n * [Click here to read the mailcomposer 0.1.15 docs](https://github.com/andris9/mailcomposer/blob/7c0422b2de2dc61a60ba27cfa3353472f662aeb5/README.md).\n *                                                                                                        // 135\n * @locus Server                                                                                          // 136\n * @param {Object} options                                                                                // 137\n * @param {String} options.from \"From:\" address (required)                                                // 138\n * @param {String|String[]} options.to,cc,bcc,replyTo                                                     // 139\n *   \"To:\", \"Cc:\", \"Bcc:\", and \"Reply-To:\" addresses                                                      // 140\n * @param {String} [options.subject]  \"Subject:\" line                                                     // 141\n * @param {String} [options.text|html] Mail body (in plain text and/or HTML)                              // 142\n * @param {Object} [options.headers] Dictionary of custom headers                                         // 143\n * @param {Object[]} [options.attachments] Array of attachment objects, as                                // 144\n * described in the [mailcomposer documentation](https://github.com/andris9/mailcomposer/blob/7c0422b2de2dc61a60ba27cfa3353472f662aeb5/README.md#add-attachments).\n * @param {MailComposer} [options.mailComposer] A [MailComposer](https://github.com/andris9/mailcomposer)\n * object representing the message to be sent. Overrides all other options. You                           // 147\n * can access the `mailcomposer` npm module at                                                            // 148\n * `EmailInternals.NpmModules.mailcomposer.module`.                                                       // 149\n */                                                                                                       // 150\nEmail.send = function (options) {                                                                         // 151\n  for (var i = 0; i < sendHooks.length; i++)                                                              // 152\n    if (! sendHooks[i](options))                                                                          // 153\n      return;                                                                                             // 154\n                                                                                                          // 155\n  var mc;                                                                                                 // 156\n  if (options.mailComposer) {                                                                             // 157\n    mc = options.mailComposer;                                                                            // 158\n  } else {                                                                                                // 159\n    mc = new MailComposer();                                                                              // 160\n                                                                                                          // 161\n    // setup message data                                                                                 // 162\n    mc.setMessageOption({                                                                                 // 163\n      from: options.from,                                                                                 // 164\n      to: options.to,                                                                                     // 165\n      cc: options.cc,                                                                                     // 166\n      bcc: options.bcc,                                                                                   // 167\n      replyTo: options.replyTo,                                                                           // 168\n      subject: options.subject,                                                                           // 169\n      text: options.text,                                                                                 // 170\n      html: options.html                                                                                  // 171\n    });                                                                                                   // 172\n                                                                                                          // 173\n    _.each(options.headers, function (value, name) {                                                      // 174\n      mc.addHeader(name, value);                                                                          // 175\n    });                                                                                                   // 176\n                                                                                                          // 177\n    _.each(options.attachments, function(attachment){                                                     // 178\n      mc.addAttachment(attachment);                                                                       // 179\n    });                                                                                                   // 180\n  }                                                                                                       // 181\n                                                                                                          // 182\n  var pool = getPool();                                                                                   // 183\n  if (pool) {                                                                                             // 184\n    smtpSend(pool, mc);                                                                                   // 185\n  } else {                                                                                                // 186\n    devModeSend(mc);                                                                                      // 187\n  }                                                                                                       // 188\n};                                                                                                        // 189\n                                                                                                          // 190\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\nPackage.email = {\n  Email: Email,\n  EmailInternals: EmailInternals,\n  EmailTest: EmailTest\n};\n\n})();\n","servePath":"/packages/email.js","sourceMap":{"version":3,"sources":["/packages/email/email.js"],"names":[],"mappingsgH","file":"/packages/email.js","sourcesContent":["var Future = Npm.require('fibers/future');\nvar urlModule = Npm.require('url');\n\nEmail = {};\nEmailTest = {};\n\nEmailInternals = {\n  NpmModules: {\n    mailcomposer: {\n      version: Npm.require('mailcomposer/package.json').version,\n      module: Npm.require('mailcomposer')\n    }\n  }\n};\n\nvar MailComposer = EmailInternals.NpmModules.mailcomposer.module.MailComposer;\n\nvar makePool = function (mailUrlString) {\n  var mailUrl = urlModule.parse(mailUrlString);\n  if (mailUrl.protocol !== 'smtp:')\n    throw new Error(\"Email protocol in $MAIL_URL (\" +\n                    mailUrlString + \") must be 'smtp'\");\n\n  var port = +(mailUrl.port);\n  var auth = false;\n  if (mailUrl.auth) {\n    var parts = mailUrl.auth.split(':', 2);\n    auth = {user: parts[0] && decodeURIComponent(parts[0]),\n            pass: parts[1] && decodeURIComponent(parts[1])};\n  }\n\n  var simplesmtp = Npm.require('simplesmtp');\n  var pool = simplesmtp.createClientPool(\n    port,  // Defaults to 25\n    mailUrl.hostname,  // Defaults to \"localhost\"\n    { secureConnection: (port === 465),\n      // XXX allow maxConnections to be configured?\n      auth: auth });\n\n  pool._future_wrapped_sendMail = _.bind(Future.wrap(pool.sendMail), pool);\n  return pool;\n};\n\nvar getPool = _.once(function () {\n  // We delay this check until the first call to Email.send, in case someone\n  // set process.env.MAIL_URL in startup code.\n  var url = process.env.MAIL_URL;\n  if (! url)\n    return null;\n  return makePool(url);\n});\n\nvar next_devmode_mail_id = 0;\nvar output_stream = process.stdout;\n\n// Testing hooks\nEmailTest.overrideOutputStream = function (stream) {\n  next_devmode_mail_id = 0;\n  output_stream = stream;\n};\n\nEmailTest.restoreOutputStream = function () {\n  output_stream = process.stdout;\n};\n\nvar devModeSend = function (mc) {\n  var devmode_mail_id = next_devmode_mail_id++;\n\n  var stream = output_stream;\n\n  // This approach does not prevent other writers to stdout from interleaving.\n  stream.write(\"====== BEGIN MAIL #\" + devmode_mail_id + \" ======\\n\");\n  stream.write(\"(Mail not sent; to enable sending, set the MAIL_URL \" +\n               \"environment variable.)\\n\");\n  mc.streamMessage();\n  mc.pipe(stream, {end: false});\n  var future = new Future;\n  mc.on('end', function () {\n    stream.write(\"====== END MAIL #\" + devmode_mail_id + \" ======\\n\");\n    future['return']();\n  });\n  future.wait();\n};\n\nvar smtpSend = function (pool, mc) {\n  pool._future_wrapped_sendMail(mc).wait();\n};\n\n/**\n * Mock out email sending (eg, during a test.) This is private for now.\n *\n * f receives the arguments to Email.send and should return true to go\n * ahead and send the email (or at least, try subsequent hooks), or\n * false to skip sending.\n */\nvar sendHooks = [];\nEmailTest.hookSend = function (f) {\n  sendHooks.push(f);\n};\n\n// Old comment below\n/**\n * Send an email.\n *\n * Connects to the mail server configured via the MAIL_URL environment\n * variable. If unset, prints formatted message to stdout. The \"from\" option\n * is required, and at least one of \"to\", \"cc\", and \"bcc\" must be provided;\n * all other options are optional.\n *\n * @param options\n * @param options.from {String} RFC5322 \"From:\" address\n * @param options.to {String|String[]} RFC5322 \"To:\" address[es]\n * @param options.cc {String|String[]} RFC5322 \"Cc:\" address[es]\n * @param options.bcc {String|String[]} RFC5322 \"Bcc:\" address[es]\n * @param options.replyTo {String|String[]} RFC5322 \"Reply-To:\" address[es]\n * @param options.subject {String} RFC5322 \"Subject:\" line\n * @param options.text {String} RFC5322 mail body (plain text)\n * @param options.html {String} RFC5322 mail body (HTML)\n * @param options.headers {Object} custom RFC5322 headers (dictionary)\n */\n\n// New API doc comment below\n/**\n * @summary Send an email. Throws an `Error` on failure to contact mail server\n * or if mail server returns an error. All fields should match\n * [RFC5322](http://tools.ietf.org/html/rfc5322) specification.\n *\n * If the `MAIL_URL` environment variable is set, actually sends the email.\n * Otherwise, prints the contents of the email to standard out.\n *\n * Note that this package is based on mailcomposer version `0.1.15`, so make\n * sure to refer to the documentation for that version if using the\n * `attachments` or `mailComposer` options.\n * [Click here to read the mailcomposer 0.1.15 docs](https://github.com/andris9/mailcomposer/blob/7c0422b2de2dc61a60ba27cfa3353472f662aeb5/README.md).\n *\n * @locus Server\n * @param {Object} options\n * @param {String} options.from \"From:\" address (required)\n * @param {String|String[]} options.to,cc,bcc,replyTo\n *   \"To:\", \"Cc:\", \"Bcc:\", and \"Reply-To:\" addresses\n * @param {String} [options.subject]  \"Subject:\" line\n * @param {String} [options.text|html] Mail body (in plain text and/or HTML)\n * @param {Object} [options.headers] Dictionary of custom headers\n * @param {Object[]} [options.attachments] Array of attachment objects, as\n * described in the [mailcomposer documentation](https://github.com/andris9/mailcomposer/blob/7c0422b2de2dc61a60ba27cfa3353472f662aeb5/README.md#add-attachments).\n * @param {MailComposer} [options.mailComposer] A [MailComposer](https://github.com/andris9/mailcomposer)\n * object representing the message to be sent. Overrides all other options. You\n * can access the `mailcomposer` npm module at\n * `EmailInternals.NpmModules.mailcomposer.module`.\n */\nEmail.send = function (options) {\n  for (var i = 0; i < sendHooks.length; i++)\n    if (! sendHooks[i](options))\n      return;\n\n  var mc;\n  if (options.mailComposer) {\n    mc = options.mailComposer;\n  } else {\n    mc = new MailComposer();\n\n    // setup message data\n    mc.setMessageOption({\n      from: options.from,\n      to: options.to,\n      cc: options.cc,\n      bcc: options.bcc,\n      replyTo: options.replyTo,\n      subject: options.subject,\n      text: options.text,\n      html: options.html\n    });\n\n    _.each(options.headers, function (value, name) {\n      mc.addHeader(name, value);\n    });\n\n    _.each(options.attachments, function(attachment){\n      mc.addAttachment(attachment);\n    });\n  }\n\n  var pool = getPool();\n  if (pool) {\n    smtpSend(pool, mc);\n  } else {\n    devModeSend(mc);\n  }\n};\n"]}}]