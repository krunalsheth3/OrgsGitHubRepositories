[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                //\n// packages/pacozaa_angular-material-data-table/dist/md-data-table.js                                             //\n//                                                                                                                //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                  //\n(function (window, angular, undefined) {                                                                          // 1\n'use strict';                                                                                                     // 2\n                                                                                                                  // 3\nangular.module('md.table.templates', ['md-table-pagination.html', 'md-table-progress.html', 'arrow-up.svg', 'navigate-before.svg', 'navigate-first.svg', 'navigate-last.svg', 'navigate-next.svg']);\n                                                                                                                  // 5\nangular.module('md-table-pagination.html', []).run(['$templateCache', function($templateCache) {                  // 6\n  $templateCache.put('md-table-pagination.html',                                                                  // 7\n    '<span class=\"label\" ng-if=\"$pagination.showPageSelect()\">{{$pagination.$label[\\'page\\']}}</span>\\n' +        // 8\n    '\\n' +                                                                                                        // 9\n    '<md-select class=\"md-table-select\" ng-if=\"$pagination.showPageSelect()\" ng-model=\"$pagination.page\" md-container-class=\"md-pagination-select\" ng-change=\"$pagination.onPaginationChange()\" aria-label=\"Page\">\\n' +\n    '  <md-option ng-repeat=\"num in $pagination.range($pagination.pages()) track by $index\" ng-value=\"$index + 1\">{{$index + 1}}</md-option>\\n' +\n    '</md-select>\\n' +                                                                                            // 12\n    '\\n' +                                                                                                        // 13\n    '<span class=\"label\">{{$pagination.$label[\\'rowsPerPage\\']}}</span>\\n' +                                      // 14\n    '\\n' +                                                                                                        // 15\n    '<md-select class=\"md-table-select\" ng-model=\"$pagination.limit\" md-container-class=\"md-pagination-select\" aria-label=\"Rows\" placeholder=\"{{$pagination.options ? $pagination.options[0] : 5}}\">\\n' +\n    '  <md-option ng-repeat=\"rows in $pagination.options ? $pagination.options : [5, 10, 15]\" ng-value=\"rows\">{{rows}}</md-option>\\n' +\n    '</md-select>\\n' +                                                                                            // 18\n    '\\n' +                                                                                                        // 19\n    '<span class=\"label\">{{$pagination.min() + 1}} - {{$pagination.max()}} {{$pagination.$label[\\'of\\']}} {{$pagination.total}}</span>\\n' +\n    '\\n' +                                                                                                        // 21\n    '<md-button class=\"md-icon-button\" type=\"button\" ng-if=\"$pagination.showBoundaryLinks()\" ng-click=\"$pagination.first()\" ng-disabled=\"!$pagination.hasPrevious()\" aria-label=\"First\">\\n' +\n    '  <md-icon md-svg-icon=\"navigate-first.svg\"></md-icon>\\n' +                                                  // 23\n    '</md-button>\\n' +                                                                                            // 24\n    '<md-button class=\"md-icon-button\" type=\"button\" ng-click=\"$pagination.previous()\" ng-disabled=\"!$pagination.hasPrevious()\" aria-label=\"Previous\">\\n' +\n    '  <md-icon md-svg-icon=\"navigate-before.svg\"></md-icon>\\n' +                                                 // 26\n    '</md-button>\\n' +                                                                                            // 27\n    '<md-button class=\"md-icon-button\" type=\"button\" ng-click=\"$pagination.next()\" ng-disabled=\"$pagination.disableNext()\" aria-label=\"Next\">\\n' +\n    '  <md-icon md-svg-icon=\"navigate-next.svg\"></md-icon>\\n' +                                                   // 29\n    '</md-button>\\n' +                                                                                            // 30\n    '<md-button class=\"md-icon-button\" type=\"button\" ng-if=\"$pagination.showBoundaryLinks()\" ng-click=\"$pagination.last()\" ng-disabled=\"$pagination.disableNext()\" aria-label=\"Last\">\\n' +\n    '  <md-icon md-svg-icon=\"navigate-last.svg\"></md-icon>\\n' +                                                   // 32\n    '</md-button>');                                                                                              // 33\n}]);                                                                                                              // 34\n                                                                                                                  // 35\nangular.module('md-table-progress.html', []).run(['$templateCache', function($templateCache) {                    // 36\n  $templateCache.put('md-table-progress.html',                                                                    // 37\n    '<tr>\\n' +                                                                                                    // 38\n    '  <th colspan=\"{{columnCount()}}\">\\n' +                                                                      // 39\n    '    <md-progress-linear ng-show=\"deferred()\" md-mode=\"indeterminate\"></md-progress-linear>\\n' +              // 40\n    '  </th>\\n' +                                                                                                 // 41\n    '</tr>');                                                                                                     // 42\n}]);                                                                                                              // 43\n                                                                                                                  // 44\nangular.module('arrow-up.svg', []).run(['$templateCache', function($templateCache) {                              // 45\n  $templateCache.put('arrow-up.svg',                                                                              // 46\n    '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path d=\"M4 12l1.41 1.41L11 7.83V20h2V7.83l5.58 5.59L20 12l-8-8-8 8z\"/></svg>');\n}]);                                                                                                              // 48\n                                                                                                                  // 49\nangular.module('navigate-before.svg', []).run(['$templateCache', function($templateCache) {                       // 50\n  $templateCache.put('navigate-before.svg',                                                                       // 51\n    '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path d=\"M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z\"/></svg>');\n}]);                                                                                                              // 53\n                                                                                                                  // 54\nangular.module('navigate-first.svg', []).run(['$templateCache', function($templateCache) {                        // 55\n  $templateCache.put('navigate-first.svg',                                                                        // 56\n    '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path d=\"M7 6 v12 h2 v-12 h-2z M17.41 7.41L16 6l-6 6 6 6 1.41-1.41L12.83 12z\"/></svg>');\n}]);                                                                                                              // 58\n                                                                                                                  // 59\nangular.module('navigate-last.svg', []).run(['$templateCache', function($templateCache) {                         // 60\n  $templateCache.put('navigate-last.svg',                                                                         // 61\n    '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path d=\"M15 6 v12 h2 v-12 h-2z M8 6L6.59 7.41 11.17 12l-4.58 4.59L8 18l6-6z\"/></svg>');\n}]);                                                                                                              // 63\n                                                                                                                  // 64\nangular.module('navigate-next.svg', []).run(['$templateCache', function($templateCache) {                         // 65\n  $templateCache.put('navigate-next.svg',                                                                         // 66\n    '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path d=\"M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z\"/></svg>');\n}]);                                                                                                              // 68\n                                                                                                                  // 69\n                                                                                                                  // 70\nangular.module('md.data.table', ['md.table.templates']);                                                          // 71\n                                                                                                                  // 72\nangular.module('md.data.table').directive('mdBody', mdBody);                                                      // 73\n                                                                                                                  // 74\nfunction mdBody() {                                                                                               // 75\n                                                                                                                  // 76\n  function compile(tElement) {                                                                                    // 77\n    tElement.addClass('md-body');                                                                                 // 78\n  }                                                                                                               // 79\n                                                                                                                  // 80\n  return {                                                                                                        // 81\n    compile: compile,                                                                                             // 82\n    restrict: 'A'                                                                                                 // 83\n  };                                                                                                              // 84\n}                                                                                                                 // 85\n                                                                                                                  // 86\nangular.module('md.data.table').directive('mdCell', mdCell);                                                      // 87\n                                                                                                                  // 88\nfunction mdCell() {                                                                                               // 89\n                                                                                                                  // 90\n  function compile(tElement) {                                                                                    // 91\n    var select = tElement.find('md-select');                                                                      // 92\n                                                                                                                  // 93\n    if(select.length) {                                                                                           // 94\n      select.addClass('md-table-select').attr('md-container-class', 'md-table-select');                           // 95\n    }                                                                                                             // 96\n                                                                                                                  // 97\n    tElement.addClass('md-cell');                                                                                 // 98\n                                                                                                                  // 99\n    return postLink;                                                                                              // 100\n  }                                                                                                               // 101\n                                                                                                                  // 102\n  // empty controller to be bind properties to in postLink function                                               // 103\n  function Controller() {                                                                                         // 104\n                                                                                                                  // 105\n  }                                                                                                               // 106\n                                                                                                                  // 107\n  function postLink(scope, element, attrs, ctrls) {                                                               // 108\n    var select = element.find('md-select');                                                                       // 109\n    var cellCtrl = ctrls.shift();                                                                                 // 110\n    var tableCtrl = ctrls.shift();                                                                                // 111\n                                                                                                                  // 112\n    if(attrs.ngClick) {                                                                                           // 113\n      element.addClass('md-clickable');                                                                           // 114\n    }                                                                                                             // 115\n                                                                                                                  // 116\n    if(select.length) {                                                                                           // 117\n      select.on('click', function (event) {                                                                       // 118\n        event.stopPropagation();                                                                                  // 119\n      });                                                                                                         // 120\n                                                                                                                  // 121\n      element.addClass('md-clickable').on('click', function (event) {                                             // 122\n        event.stopPropagation();                                                                                  // 123\n        select[0].click();                                                                                        // 124\n      });                                                                                                         // 125\n    }                                                                                                             // 126\n                                                                                                                  // 127\n    cellCtrl.getTable = tableCtrl.getElement;                                                                     // 128\n                                                                                                                  // 129\n    function getColumn() {                                                                                        // 130\n      return tableCtrl.$$columns[getIndex()];                                                                     // 131\n    }                                                                                                             // 132\n                                                                                                                  // 133\n    function getIndex() {                                                                                         // 134\n      return Array.prototype.indexOf.call(element.parent().children(), element[0]);                               // 135\n    }                                                                                                             // 136\n                                                                                                                  // 137\n    scope.$watch(getColumn, function (column) {                                                                   // 138\n      if(!column) {                                                                                               // 139\n        return;                                                                                                   // 140\n      }                                                                                                           // 141\n                                                                                                                  // 142\n      if(column.numeric) {                                                                                        // 143\n        element.addClass('md-numeric');                                                                           // 144\n      } else {                                                                                                    // 145\n        element.removeClass('md-numeric');                                                                        // 146\n      }                                                                                                           // 147\n    });                                                                                                           // 148\n  }                                                                                                               // 149\n                                                                                                                  // 150\n  return {                                                                                                        // 151\n    controller: Controller,                                                                                       // 152\n    compile: compile,                                                                                             // 153\n    require: ['mdCell', '^^mdTable'],                                                                             // 154\n    restrict: 'A'                                                                                                 // 155\n  };                                                                                                              // 156\n}                                                                                                                 // 157\n                                                                                                                  // 158\nangular.module('md.data.table').directive('mdColumn', mdColumn);                                                  // 159\n                                                                                                                  // 160\nfunction mdColumn($compile) {                                                                                     // 161\n                                                                                                                  // 162\n  function compile(tElement) {                                                                                    // 163\n    tElement.addClass('md-column');                                                                               // 164\n    return postLink;                                                                                              // 165\n  }                                                                                                               // 166\n                                                                                                                  // 167\n  function postLink(scope, element, attrs, ctrls) {                                                               // 168\n    var headCtrl = ctrls.shift();                                                                                 // 169\n    var tableCtrl = ctrls.shift();                                                                                // 170\n                                                                                                                  // 171\n    function attachSortIcon() {                                                                                   // 172\n      var sortIcon = angular.element('<md-icon md-svg-icon=\"arrow-up.svg\">');                                     // 173\n                                                                                                                  // 174\n      $compile(sortIcon.addClass('md-sort-icon').attr('ng-class', 'getDirection()'))(scope);                      // 175\n                                                                                                                  // 176\n      if(element.hasClass('md-numeric')) {                                                                        // 177\n        element.prepend(sortIcon);                                                                                // 178\n      } else {                                                                                                    // 179\n        element.append(sortIcon);                                                                                 // 180\n      }                                                                                                           // 181\n    }                                                                                                             // 182\n                                                                                                                  // 183\n    function detachSortIcon() {                                                                                   // 184\n      Array.prototype.some.call(element.find('md-icon'), function (icon) {                                        // 185\n        return icon.classList.contains('md-sort-icon') && element[0].removeChild(icon);                           // 186\n      });                                                                                                         // 187\n    }                                                                                                             // 188\n                                                                                                                  // 189\n    function disableSorting() {                                                                                   // 190\n      detachSortIcon();                                                                                           // 191\n      element.removeClass('md-sort').off('click', setOrder);                                                      // 192\n    }                                                                                                             // 193\n                                                                                                                  // 194\n    function enableSorting() {                                                                                    // 195\n      attachSortIcon();                                                                                           // 196\n      element.addClass('md-sort').on('click', setOrder);                                                          // 197\n    }                                                                                                             // 198\n                                                                                                                  // 199\n    function getIndex() {                                                                                         // 200\n      return Array.prototype.indexOf.call(element.parent().children(), element[0]);                               // 201\n    }                                                                                                             // 202\n                                                                                                                  // 203\n    function isActive() {                                                                                         // 204\n      if(!scope.orderBy) {                                                                                        // 205\n        return false;                                                                                             // 206\n      }                                                                                                           // 207\n                                                                                                                  // 208\n      return headCtrl.order === scope.orderBy || headCtrl.order === '-' + scope.orderBy;                          // 209\n    }                                                                                                             // 210\n                                                                                                                  // 211\n    function isNumeric() {                                                                                        // 212\n      if(attrs.hasOwnProperty('mdNumeric') && attrs.mdNumeric === '') {                                           // 213\n        return true;                                                                                              // 214\n      }                                                                                                           // 215\n                                                                                                                  // 216\n      return scope.numeric;                                                                                       // 217\n    }                                                                                                             // 218\n                                                                                                                  // 219\n    function setOrder() {                                                                                         // 220\n      scope.$applyAsync(function () {                                                                             // 221\n        if(!isActive()) {                                                                                         // 222\n          headCtrl.order = scope.getDirection() === 'md-asc' ? scope.orderBy : '-' + scope.orderBy;               // 223\n        } else {                                                                                                  // 224\n          headCtrl.order = scope.getDirection() === 'md-asc' ? '-' + scope.orderBy : scope.orderBy;               // 225\n        }                                                                                                         // 226\n                                                                                                                  // 227\n        if(angular.isFunction(headCtrl.onReorder)) {                                                              // 228\n          headCtrl.onReorder(headCtrl.order);                                                                     // 229\n        }                                                                                                         // 230\n      });                                                                                                         // 231\n    }                                                                                                             // 232\n                                                                                                                  // 233\n    function updateColumn(index, column) {                                                                        // 234\n      tableCtrl.$$columns[index] = column;                                                                        // 235\n                                                                                                                  // 236\n      if(column.numeric) {                                                                                        // 237\n        element.addClass('md-numeric');                                                                           // 238\n      } else {                                                                                                    // 239\n        element.removeClass('md-numeric');                                                                        // 240\n      }                                                                                                           // 241\n    }                                                                                                             // 242\n                                                                                                                  // 243\n    scope.getDirection = function () {                                                                            // 244\n      if(!isActive()) {                                                                                           // 245\n        return attrs.hasOwnProperty('mdDesc') ? 'md-desc' : 'md-asc';                                             // 246\n      }                                                                                                           // 247\n                                                                                                                  // 248\n      return headCtrl.order === '-' + scope.orderBy ? 'md-desc' : 'md-asc';                                       // 249\n    };                                                                                                            // 250\n                                                                                                                  // 251\n    scope.$watch(isActive, function (active) {                                                                    // 252\n      if(active) {                                                                                                // 253\n        element.addClass('md-active');                                                                            // 254\n      } else {                                                                                                    // 255\n        element.removeClass('md-active');                                                                         // 256\n      }                                                                                                           // 257\n    });                                                                                                           // 258\n                                                                                                                  // 259\n    scope.$watch(getIndex, function (index) {                                                                     // 260\n      updateColumn(index, {'numeric': isNumeric()});                                                              // 261\n    });                                                                                                           // 262\n                                                                                                                  // 263\n    scope.$watch(isNumeric, function (numeric) {                                                                  // 264\n      updateColumn(getIndex(), {'numeric': numeric});                                                             // 265\n    });                                                                                                           // 266\n                                                                                                                  // 267\n    scope.$watch('orderBy', function (orderBy) {                                                                  // 268\n      if(orderBy) {                                                                                               // 269\n        enableSorting();                                                                                          // 270\n      } else {                                                                                                    // 271\n        disableSorting();                                                                                         // 272\n      }                                                                                                           // 273\n    });                                                                                                           // 274\n  }                                                                                                               // 275\n                                                                                                                  // 276\n  return {                                                                                                        // 277\n    compile: compile,                                                                                             // 278\n    require: ['^^mdHead', '^^mdTable'],                                                                           // 279\n    restrict: 'A',                                                                                                // 280\n    scope: {                                                                                                      // 281\n      numeric: '=?mdNumeric',                                                                                     // 282\n      orderBy: '@?mdOrderBy'                                                                                      // 283\n    }                                                                                                             // 284\n  };                                                                                                              // 285\n}                                                                                                                 // 286\n                                                                                                                  // 287\nmdColumn.$inject = ['$compile'];                                                                                  // 288\n                                                                                                                  // 289\nangular.module('md.data.table')                                                                                   // 290\n  .decorator('$controller', controllerDecorator)                                                                  // 291\n  .factory('$mdEditDialog', mdEditDialog);                                                                        // 292\n                                                                                                                  // 293\n/*                                                                                                                // 294\n * A decorator for ng.$controller to optionally bind properties to the                                            // 295\n * controller before invoking the constructor. Stolen from the ngMock.                                            // 296\n *                                                                                                                // 297\n * https://docs.angularjs.org/api/ngMock/service/$controller                                                      // 298\n */                                                                                                               // 299\nfunction controllerDecorator($delegate) {                                                                         // 300\n  return function(expression, locals, later, ident) {                                                             // 301\n    if (later && typeof later === 'object') {                                                                     // 302\n      var create = $delegate(expression, locals, true, ident);                                                    // 303\n      angular.extend(create.instance, later);                                                                     // 304\n      return create();                                                                                            // 305\n    }                                                                                                             // 306\n    return $delegate(expression, locals, later, ident);                                                           // 307\n  };                                                                                                              // 308\n}                                                                                                                 // 309\n                                                                                                                  // 310\ncontrollerDecorator.$inject = ['$delegate'];                                                                      // 311\n                                                                                                                  // 312\nfunction mdEditDialog($compile, $controller, $document, $mdUtil, $q, $rootScope, $templateCache, $templateRequest, $window) {\n  /* jshint validthis: true */                                                                                    // 314\n                                                                                                                  // 315\n  var ESCAPE = 27;                                                                                                // 316\n                                                                                                                  // 317\n  var busy = false;                                                                                               // 318\n  var body = angular.element($document.prop('body'));                                                             // 319\n                                                                                                                  // 320\n  /*                                                                                                              // 321\n   * bindToController                                                                                             // 322\n   * controller                                                                                                   // 323\n   * controllerAs                                                                                                 // 324\n   * locals                                                                                                       // 325\n   * resolve                                                                                                      // 326\n   * scope                                                                                                        // 327\n   * targetEvent                                                                                                  // 328\n   * template                                                                                                     // 329\n   * templateUrl                                                                                                  // 330\n   */                                                                                                             // 331\n  var defaultOptions = {                                                                                          // 332\n    clickOutsideToClose: true,                                                                                    // 333\n    disableScroll: true,                                                                                          // 334\n    escToClose: true,                                                                                             // 335\n    focusOnOpen: true                                                                                             // 336\n  };                                                                                                              // 337\n                                                                                                                  // 338\n  function build(template, options) {                                                                             // 339\n    var scope = $rootScope.$new();                                                                                // 340\n    var element = $compile(template)(scope);                                                                      // 341\n    var backdrop = $mdUtil.createBackdrop(scope, 'md-edit-dialog-backdrop');                                      // 342\n    var controller;                                                                                               // 343\n                                                                                                                  // 344\n    if(options.controller) {                                                                                      // 345\n      controller = getController(options, scope, {$element: element, $scope: scope});                             // 346\n    } else {                                                                                                      // 347\n      angular.extend(scope, options.scope);                                                                       // 348\n    }                                                                                                             // 349\n                                                                                                                  // 350\n    if(options.disableScroll) {                                                                                   // 351\n      disableScroll(element);                                                                                     // 352\n    }                                                                                                             // 353\n                                                                                                                  // 354\n    body.prepend(backdrop).append(element.addClass('md-whiteframe-1dp'));                                         // 355\n                                                                                                                  // 356\n    positionDialog(element, options.targetEvent.currentTarget);                                                   // 357\n                                                                                                                  // 358\n    if(options.focusOnOpen) {                                                                                     // 359\n      var autofocus = $mdUtil.findFocusTarget(element);                                                           // 360\n                                                                                                                  // 361\n      if(autofocus) {                                                                                             // 362\n        autofocus.focus();                                                                                        // 363\n      }                                                                                                           // 364\n    }                                                                                                             // 365\n                                                                                                                  // 366\n    if(options.clickOutsideToClose) {                                                                             // 367\n      backdrop.on('click', function () {                                                                          // 368\n        element.remove();                                                                                         // 369\n      });                                                                                                         // 370\n    }                                                                                                             // 371\n                                                                                                                  // 372\n    if(options.escToClose) {                                                                                      // 373\n      escToClose(element);                                                                                        // 374\n    }                                                                                                             // 375\n                                                                                                                  // 376\n    element.on('$destroy', function () {                                                                          // 377\n      busy = false;                                                                                               // 378\n      backdrop.remove();                                                                                          // 379\n    });                                                                                                           // 380\n                                                                                                                  // 381\n    return controller;                                                                                            // 382\n  }                                                                                                               // 383\n                                                                                                                  // 384\n  function disableScroll(element) {                                                                               // 385\n    var restoreScroll = $mdUtil.disableScrollAround(element, body);                                               // 386\n                                                                                                                  // 387\n    element.on('$destroy', function () {                                                                          // 388\n      restoreScroll();                                                                                            // 389\n    });                                                                                                           // 390\n  }                                                                                                               // 391\n                                                                                                                  // 392\n  function getController(options, scope, inject) {                                                                // 393\n    if(!options.controller) {                                                                                     // 394\n      return;                                                                                                     // 395\n    }                                                                                                             // 396\n                                                                                                                  // 397\n    if(options.resolve) {                                                                                         // 398\n      angular.extend(inject, options.resolve);                                                                    // 399\n    }                                                                                                             // 400\n                                                                                                                  // 401\n    if(options.locals) {                                                                                          // 402\n      angular.extend(inject, options.locals);                                                                     // 403\n    }                                                                                                             // 404\n                                                                                                                  // 405\n    if(options.controllerAs) {                                                                                    // 406\n      scope[options.controllerAs] = {};                                                                           // 407\n                                                                                                                  // 408\n      if(options.bindToController) {                                                                              // 409\n        angular.extend(scope[options.controllerAs], options.scope);                                               // 410\n      } else {                                                                                                    // 411\n        angular.extend(scope, options.scope);                                                                     // 412\n      }                                                                                                           // 413\n    } else {                                                                                                      // 414\n      angular.extend(scope, options.scope);                                                                       // 415\n    }                                                                                                             // 416\n                                                                                                                  // 417\n    if(options.bindToController) {                                                                                // 418\n      return $controller(options.controller, inject, scope[options.controllerAs]);                                // 419\n    } else {                                                                                                      // 420\n      return $controller(options.controller, inject);                                                             // 421\n    }                                                                                                             // 422\n  }                                                                                                               // 423\n                                                                                                                  // 424\n  function getTemplate(options) {                                                                                 // 425\n    return $q(function (resolve, reject) {                                                                        // 426\n      var template = options.template;                                                                            // 427\n                                                                                                                  // 428\n      function illegalType(type) {                                                                                // 429\n        reject('Unexpected template value. Expected a string; received a ' + type + '.');                         // 430\n      }                                                                                                           // 431\n                                                                                                                  // 432\n      if(template) {                                                                                              // 433\n        return angular.isString(template) ? resolve(template) : illegalType(typeof template);                     // 434\n      }                                                                                                           // 435\n                                                                                                                  // 436\n      if(options.templateUrl) {                                                                                   // 437\n        template = $templateCache.get(options.templateUrl);                                                       // 438\n                                                                                                                  // 439\n        if(template) {                                                                                            // 440\n          return resolve(template);                                                                               // 441\n        }                                                                                                         // 442\n                                                                                                                  // 443\n        var success = function (template) {                                                                       // 444\n          return resolve(template);                                                                               // 445\n        };                                                                                                        // 446\n                                                                                                                  // 447\n        var error = function () {                                                                                 // 448\n          return reject('Error retrieving template from URL.');                                                   // 449\n        };                                                                                                        // 450\n                                                                                                                  // 451\n        return $templateRequest(options.templateUrl).then(success, error);                                        // 452\n      }                                                                                                           // 453\n                                                                                                                  // 454\n      reject('Template not provided.');                                                                           // 455\n    });                                                                                                           // 456\n  }                                                                                                               // 457\n                                                                                                                  // 458\n  function logError(error) {                                                                                      // 459\n    busy = false;                                                                                                 // 460\n    console.error(error);                                                                                         // 461\n  }                                                                                                               // 462\n                                                                                                                  // 463\n  function escToClose(element) {                                                                                  // 464\n    var keyup = function (event) {                                                                                // 465\n      if(event.keyCode === ESCAPE) {                                                                              // 466\n        element.remove();                                                                                         // 467\n      }                                                                                                           // 468\n    };                                                                                                            // 469\n                                                                                                                  // 470\n    body.on('keyup', keyup);                                                                                      // 471\n                                                                                                                  // 472\n    element.on('$destroy', function () {                                                                          // 473\n      body.off('keyup', keyup);                                                                                   // 474\n    });                                                                                                           // 475\n  }                                                                                                               // 476\n                                                                                                                  // 477\n  function positionDialog(element, target) {                                                                      // 478\n    var table = angular.element(target).controller('mdCell').getTable();                                          // 479\n                                                                                                                  // 480\n    var getHeight = function () {                                                                                 // 481\n      return element.prop('clientHeight');                                                                        // 482\n    };                                                                                                            // 483\n                                                                                                                  // 484\n    var getSize = function () {                                                                                   // 485\n      return {                                                                                                    // 486\n        width: getWidth(),                                                                                        // 487\n        height: getHeight()                                                                                       // 488\n      };                                                                                                          // 489\n    };                                                                                                            // 490\n                                                                                                                  // 491\n    var getTableBounds = function () {                                                                            // 492\n      var parent = table.parent();                                                                                // 493\n                                                                                                                  // 494\n      if(parent.prop('tagName') === 'MD-TABLE-CONTAINER') {                                                       // 495\n        return parent[0].getBoundingClientRect();                                                                 // 496\n      } else {                                                                                                    // 497\n        return table[0].getBoundingClientRect();                                                                  // 498\n      }                                                                                                           // 499\n    };                                                                                                            // 500\n                                                                                                                  // 501\n    var getWidth = function () {                                                                                  // 502\n      return element.prop('clientWidth');                                                                         // 503\n    };                                                                                                            // 504\n                                                                                                                  // 505\n    var reposition = function () {                                                                                // 506\n      var size = getSize();                                                                                       // 507\n      var cellBounds = target.getBoundingClientRect();                                                            // 508\n      var tableBounds = getTableBounds();                                                                         // 509\n                                                                                                                  // 510\n      if(size.width > tableBounds.right - cellBounds.left) {                                                      // 511\n        element.css('left', tableBounds.right - size.width + 'px');                                               // 512\n      } else {                                                                                                    // 513\n        element.css('left', cellBounds.left + 'px');                                                              // 514\n      }                                                                                                           // 515\n                                                                                                                  // 516\n      if(size.height > tableBounds.bottom - cellBounds.top) {                                                     // 517\n        element.css('top', tableBounds.bottom - size.height + 'px');                                              // 518\n      } else {                                                                                                    // 519\n        element.css('top', cellBounds.top + 1 + 'px');                                                            // 520\n      }                                                                                                           // 521\n                                                                                                                  // 522\n      element.css('minWidth', cellBounds.width + 'px');                                                           // 523\n    };                                                                                                            // 524\n                                                                                                                  // 525\n    var watchWidth = $rootScope.$watch(getWidth, reposition);                                                     // 526\n    var watchHeight = $rootScope.$watch(getHeight, reposition);                                                   // 527\n                                                                                                                  // 528\n    $window.addEventListener('resize', reposition);                                                               // 529\n                                                                                                                  // 530\n    element.on('$destroy', function () {                                                                          // 531\n      watchWidth();                                                                                               // 532\n      watchHeight();                                                                                              // 533\n                                                                                                                  // 534\n      $window.removeEventListener('resize', reposition);                                                          // 535\n    });                                                                                                           // 536\n  }                                                                                                               // 537\n                                                                                                                  // 538\n  function preset(size, options) {                                                                                // 539\n                                                                                                                  // 540\n    function getAttrs() {                                                                                         // 541\n      var attrs = 'type=\"' + (options.type || 'text') + '\"';                                                      // 542\n                                                                                                                  // 543\n      for(var attr in options.validators) {                                                                       // 544\n        attrs += ' ' + attr + '=\"' + options.validators[attr] + '\"';                                              // 545\n      }                                                                                                           // 546\n                                                                                                                  // 547\n      return attrs;                                                                                               // 548\n    }                                                                                                             // 549\n                                                                                                                  // 550\n    return {                                                                                                      // 551\n      controller: ['$element', '$q', 'save', '$scope', function ($element, $q, save, $scope) {                    // 552\n        function update() {                                                                                       // 553\n          if($scope.editDialog.$invalid) {                                                                        // 554\n            return $q.reject();                                                                                   // 555\n          }                                                                                                       // 556\n                                                                                                                  // 557\n          if(angular.isFunction(save)) {                                                                          // 558\n            return $q.when(save($scope.editDialog.input));                                                        // 559\n          }                                                                                                       // 560\n                                                                                                                  // 561\n          return $q.resolve();                                                                                    // 562\n        }                                                                                                         // 563\n                                                                                                                  // 564\n        this.dismiss = function () {                                                                              // 565\n          $element.remove();                                                                                      // 566\n        };                                                                                                        // 567\n                                                                                                                  // 568\n        this.getInput = function () {                                                                             // 569\n          return $scope.editDialog.input;                                                                         // 570\n        };                                                                                                        // 571\n                                                                                                                  // 572\n        $scope.dismiss = this.dismiss;                                                                            // 573\n                                                                                                                  // 574\n        $scope.submit = function () {                                                                             // 575\n          update().then(function () {                                                                             // 576\n            $scope.dismiss();                                                                                     // 577\n          });                                                                                                     // 578\n        };                                                                                                        // 579\n      }],                                                                                                         // 580\n      locals: {                                                                                                   // 581\n        save: options.save                                                                                        // 582\n      },                                                                                                          // 583\n      scope: {                                                                                                    // 584\n        cancel: options.cancel || 'Cancel',                                                                       // 585\n        messages: options.messages,                                                                               // 586\n        model: options.modelValue,                                                                                // 587\n        ok: options.ok || 'Save',                                                                                 // 588\n        placeholder: options.placeholder,                                                                         // 589\n        title: options.title,                                                                                     // 590\n        size: size                                                                                                // 591\n      },                                                                                                          // 592\n      template:                                                                                                   // 593\n        '<md-edit-dialog>' +                                                                                      // 594\n          '<div layout=\"column\" class=\"md-content\">' +                                                            // 595\n            '<div ng-if=\"size === \\'large\\'\" class=\"md-title\">{{title || \\'Edit\\'}}</div>' +                      // 596\n            '<form name=\"editDialog\" layout=\"column\" ng-submit=\"submit(model)\">' +                                // 597\n              '<md-input-container md-no-float>' +                                                                // 598\n                '<input name=\"input\" ng-model=\"model\" md-autofocus placeholder=\"{{placeholder}} \"' + getAttrs() + '>' +\n                '<div ng-messages=\"editDialog.input.$error\">' +                                                   // 600\n                  '<div ng-repeat=\"(key, message) in messages\" ng-message=\"{{key}}\">{{message}}</div>' +          // 601\n                '</div>' +                                                                                        // 602\n              '</md-input-container>' +                                                                           // 603\n            '</form>' +                                                                                           // 604\n          '</div>' +                                                                                              // 605\n          '<div ng-if=\"size === \\'large\\'\" layout=\"row\" layout-align=\"end\" class=\"md-actions\">' +                 // 606\n            '<md-button class=\"md-primary\" ng-click=\"dismiss()\">{{cancel}}</md-button>' +                         // 607\n            '<md-button class=\"md-primary\" ng-click=\"submit()\">{{ok}}</md-button>' +                              // 608\n          '</div>' +                                                                                              // 609\n        '</md-edit-dialog>'                                                                                       // 610\n    };                                                                                                            // 611\n  }                                                                                                               // 612\n                                                                                                                  // 613\n  this.show = function (options) {                                                                                // 614\n    if(busy) {                                                                                                    // 615\n      return $q.reject();                                                                                         // 616\n    }                                                                                                             // 617\n                                                                                                                  // 618\n    busy = true;                                                                                                  // 619\n    options = angular.extend({}, defaultOptions, options);                                                        // 620\n                                                                                                                  // 621\n    if(!options.targetEvent) {                                                                                    // 622\n      return logError('options.targetEvent is required to align the dialog with the table cell.');                // 623\n    }                                                                                                             // 624\n                                                                                                                  // 625\n    if(!options.targetEvent.currentTarget.classList.contains('md-cell')) {                                        // 626\n      return logError('The event target must be a table cell.');                                                  // 627\n    }                                                                                                             // 628\n                                                                                                                  // 629\n    if(options.bindToController && !options.controllerAs) {                                                       // 630\n      return logError('You must define options.controllerAs when options.bindToController is true.');             // 631\n    }                                                                                                             // 632\n                                                                                                                  // 633\n    var promise = getTemplate(options);                                                                           // 634\n    var promises = [promise];                                                                                     // 635\n                                                                                                                  // 636\n    for(var prop in options.resolve) {                                                                            // 637\n      promise = options.resolve[prop];                                                                            // 638\n      promises.push($q.when(angular.isFunction(promise) ? promise() : promise));                                  // 639\n    }                                                                                                             // 640\n                                                                                                                  // 641\n    promise = $q.all(promises);                                                                                   // 642\n                                                                                                                  // 643\n    promise['catch'](logError);                                                                                   // 644\n                                                                                                                  // 645\n    return promise.then(function (results) {                                                                      // 646\n      var template = results.shift();                                                                             // 647\n                                                                                                                  // 648\n      for(var prop in options.resolve) {                                                                          // 649\n        options.resolve[prop] = results.shift();                                                                  // 650\n      }                                                                                                           // 651\n                                                                                                                  // 652\n      return build(template, options);                                                                            // 653\n    });                                                                                                           // 654\n  };                                                                                                              // 655\n                                                                                                                  // 656\n  this.small = function (options) {                                                                               // 657\n    return this.show(angular.extend({}, options, preset('small', options)));                                      // 658\n  }.bind(this);                                                                                                   // 659\n                                                                                                                  // 660\n  this.large = function (options) {                                                                               // 661\n    return this.show(angular.extend({}, options, preset('large', options)));                                      // 662\n  }.bind(this);                                                                                                   // 663\n                                                                                                                  // 664\n  return this;                                                                                                    // 665\n}                                                                                                                 // 666\n                                                                                                                  // 667\nmdEditDialog.$inject = ['$compile', '$controller', '$document', '$mdUtil', '$q', '$rootScope', '$templateCache', '$templateRequest', '$window'];\n                                                                                                                  // 669\n                                                                                                                  // 670\nangular.module('md.data.table').directive('mdFoot', mdFoot);                                                      // 671\n                                                                                                                  // 672\nfunction mdFoot() {                                                                                               // 673\n                                                                                                                  // 674\n  function compile(tElement) {                                                                                    // 675\n    tElement.addClass('md-foot');                                                                                 // 676\n  }                                                                                                               // 677\n                                                                                                                  // 678\n  return {                                                                                                        // 679\n    compile: compile,                                                                                             // 680\n    restrict: 'A'                                                                                                 // 681\n  };                                                                                                              // 682\n}                                                                                                                 // 683\n                                                                                                                  // 684\nangular.module('md.data.table').directive('mdHead', mdHead);                                                      // 685\n                                                                                                                  // 686\nfunction mdHead($compile) {                                                                                       // 687\n                                                                                                                  // 688\n  function compile(tElement) {                                                                                    // 689\n    tElement.addClass('md-head');                                                                                 // 690\n    return postLink;                                                                                              // 691\n  }                                                                                                               // 692\n                                                                                                                  // 693\n  // empty controller to be bind scope properties to                                                              // 694\n  function Controller() {                                                                                         // 695\n                                                                                                                  // 696\n  }                                                                                                               // 697\n                                                                                                                  // 698\n  function postLink(scope, element, attrs, tableCtrl) {                                                           // 699\n                                                                                                                  // 700\n    function attachCheckbox() {                                                                                   // 701\n      var children = element.children();                                                                          // 702\n                                                                                                                  // 703\n      // append an empty cell to preceding rows                                                                   // 704\n      for(var i = 0; i < children.length - 1; i++) {                                                              // 705\n        children.eq(i).prepend('<th class=\"md-column\">');                                                         // 706\n      }                                                                                                           // 707\n                                                                                                                  // 708\n      children.eq(children.length - 1).prepend(createCheckBox());                                                 // 709\n    }                                                                                                             // 710\n                                                                                                                  // 711\n    function createCheckBox() {                                                                                   // 712\n      var checkbox = angular.element('<md-checkbox>');                                                            // 713\n                                                                                                                  // 714\n      checkbox.attr('aria-label', 'Select All');                                                                  // 715\n      checkbox.attr('ng-click', 'toggleAll()');                                                                   // 716\n      checkbox.attr('ng-checked', 'allSelected()');                                                               // 717\n                                                                                                                  // 718\n      return angular.element('<th class=\"md-column md-checkbox-column\">').append($compile(checkbox)(scope));      // 719\n    }                                                                                                             // 720\n                                                                                                                  // 721\n    function enableRowSelection() {                                                                               // 722\n      return tableCtrl.$$rowSelect;                                                                               // 723\n    }                                                                                                             // 724\n                                                                                                                  // 725\n    function mdSelectCtrl(row) {                                                                                  // 726\n      return angular.element(row).controller('mdSelect');                                                         // 727\n    }                                                                                                             // 728\n                                                                                                                  // 729\n    function removeCheckbox() {                                                                                   // 730\n      var children = element.children();                                                                          // 731\n      var child = children.eq(children.length - 1);                                                               // 732\n                                                                                                                  // 733\n      Array.prototype.some.call(child.prop('cells'), function (cell) {                                            // 734\n        return cell.classList.contains('md-checkbox-column') && child[0].removeChild(cell);                       // 735\n      });                                                                                                         // 736\n    }                                                                                                             // 737\n                                                                                                                  // 738\n    scope.allSelected = function () {                                                                             // 739\n      var rows = tableCtrl.getBodyRows();                                                                         // 740\n                                                                                                                  // 741\n      return rows.length && rows.map(mdSelectCtrl).every(function (ctrl) {                                        // 742\n        return ctrl && ctrl.isSelected();                                                                         // 743\n      });                                                                                                         // 744\n    };                                                                                                            // 745\n                                                                                                                  // 746\n    scope.selectAll = function () {                                                                               // 747\n      tableCtrl.getBodyRows().map(mdSelectCtrl).forEach(function (ctrl) {                                         // 748\n        if(ctrl && !ctrl.isSelected()) {                                                                          // 749\n          ctrl.select();                                                                                          // 750\n        }                                                                                                         // 751\n      });                                                                                                         // 752\n    };                                                                                                            // 753\n                                                                                                                  // 754\n    scope.toggleAll = function () {                                                                               // 755\n      return scope.allSelected() ? scope.unSelectAll() : scope.selectAll();                                       // 756\n    };                                                                                                            // 757\n                                                                                                                  // 758\n    scope.unSelectAll = function () {                                                                             // 759\n      tableCtrl.getBodyRows().map(mdSelectCtrl).forEach(function (ctrl) {                                         // 760\n        if(ctrl && ctrl.isSelected()) {                                                                           // 761\n          ctrl.deselect();                                                                                        // 762\n        }                                                                                                         // 763\n      });                                                                                                         // 764\n    };                                                                                                            // 765\n                                                                                                                  // 766\n    scope.$watch(enableRowSelection, function (enable) {                                                          // 767\n      if(enable) {                                                                                                // 768\n        attachCheckbox();                                                                                         // 769\n      } else {                                                                                                    // 770\n        removeCheckbox();                                                                                         // 771\n      }                                                                                                           // 772\n    });                                                                                                           // 773\n  }                                                                                                               // 774\n                                                                                                                  // 775\n  return {                                                                                                        // 776\n    bindToController: true,                                                                                       // 777\n    compile: compile,                                                                                             // 778\n    controller: Controller,                                                                                       // 779\n    controllerAs: '$mdHead',                                                                                      // 780\n    require: '^^mdTable',                                                                                         // 781\n    restrict: 'A',                                                                                                // 782\n    scope: {                                                                                                      // 783\n      order: '=?mdOrder',                                                                                         // 784\n      onReorder: '=?mdOnReorder'                                                                                  // 785\n    }                                                                                                             // 786\n  };                                                                                                              // 787\n}                                                                                                                 // 788\n                                                                                                                  // 789\nmdHead.$inject = ['$compile'];                                                                                    // 790\n                                                                                                                  // 791\nangular.module('md.data.table').directive('mdRow', mdRow);                                                        // 792\n                                                                                                                  // 793\nfunction mdRow() {                                                                                                // 794\n                                                                                                                  // 795\n  function compile(tElement) {                                                                                    // 796\n    tElement.addClass('md-row');                                                                                  // 797\n    return postLink;                                                                                              // 798\n  }                                                                                                               // 799\n                                                                                                                  // 800\n  function postLink(scope, element, attrs, tableCtrl) {                                                           // 801\n    function enableRowSelection() {                                                                               // 802\n      return tableCtrl.$$rowSelect;                                                                               // 803\n    }                                                                                                             // 804\n                                                                                                                  // 805\n    function isBodyRow() {                                                                                        // 806\n      return tableCtrl.getBodyRows().indexOf(element[0]) !== -1;                                                  // 807\n    }                                                                                                             // 808\n                                                                                                                  // 809\n    function isChild(node) {                                                                                      // 810\n      return node.parent()[0] === element[0];                                                                     // 811\n    }                                                                                                             // 812\n                                                                                                                  // 813\n    if(isBodyRow()) {                                                                                             // 814\n      var cell = angular.element('<td class=\"md-cell\">');                                                         // 815\n                                                                                                                  // 816\n      scope.$watch(enableRowSelection, function (enable) {                                                        // 817\n        if(enable && !attrs.mdSelect) {                                                                           // 818\n          if(!isChild(cell)) {                                                                                    // 819\n            element.prepend(cell);                                                                                // 820\n          }                                                                                                       // 821\n          return;                                                                                                 // 822\n        }                                                                                                         // 823\n                                                                                                                  // 824\n        if(isChild(cell)) {                                                                                       // 825\n          cell.remove();                                                                                          // 826\n        }                                                                                                         // 827\n      });                                                                                                         // 828\n    }                                                                                                             // 829\n  }                                                                                                               // 830\n                                                                                                                  // 831\n  return {                                                                                                        // 832\n    compile: compile,                                                                                             // 833\n    require: '^^mdTable',                                                                                         // 834\n    restrict: 'A'                                                                                                 // 835\n  };                                                                                                              // 836\n}                                                                                                                 // 837\n                                                                                                                  // 838\nangular.module('md.data.table').directive('mdSelect', mdSelect);                                                  // 839\n                                                                                                                  // 840\nfunction mdSelect($compile) {                                                                                     // 841\n                                                                                                                  // 842\n  // empty controller to bind scope properties to                                                                 // 843\n  function Controller() {                                                                                         // 844\n                                                                                                                  // 845\n  }                                                                                                               // 846\n                                                                                                                  // 847\n  function postLink(scope, element, attrs, ctrls) {                                                               // 848\n    var self = ctrls.shift();                                                                                     // 849\n    var tableCtrl = ctrls.shift();                                                                                // 850\n                                                                                                                  // 851\n    if(tableCtrl.$$rowSelect && self.id && tableCtrl.$$hash.has(self.id)) {                                       // 852\n      var index = tableCtrl.selected.indexOf(tableCtrl.$$hash.get(self.id));                                      // 853\n                                                                                                                  // 854\n      // if the item is no longer selected remove it                                                              // 855\n      if(index === -1) {                                                                                          // 856\n        tableCtrl.$$hash.purge(self.id);                                                                          // 857\n      }                                                                                                           // 858\n                                                                                                                  // 859\n      // if the item is not a reference to the current model update the reference                                 // 860\n      else if(!tableCtrl.$$hash.equals(self.id, self.model)) {                                                    // 861\n        tableCtrl.$$hash.update(self.id, self.model);                                                             // 862\n        tableCtrl.selected.splice(index, 1, self.model);                                                          // 863\n      }                                                                                                           // 864\n    }                                                                                                             // 865\n                                                                                                                  // 866\n    self.isSelected = function () {                                                                               // 867\n      if(!tableCtrl.$$rowSelect) {                                                                                // 868\n        return false;                                                                                             // 869\n      }                                                                                                           // 870\n                                                                                                                  // 871\n      if(self.id) {                                                                                               // 872\n        return tableCtrl.$$hash.has(self.id);                                                                     // 873\n      }                                                                                                           // 874\n                                                                                                                  // 875\n      return tableCtrl.selected.indexOf(self.model) !== -1;                                                       // 876\n    };                                                                                                            // 877\n                                                                                                                  // 878\n    self.select = function () {                                                                                   // 879\n      if(self.disabled) {                                                                                         // 880\n        return;                                                                                                   // 881\n      }                                                                                                           // 882\n                                                                                                                  // 883\n      tableCtrl.selected.push(self.model);                                                                        // 884\n                                                                                                                  // 885\n      if(angular.isFunction(self.onSelect)) {                                                                     // 886\n        self.onSelect(self.model);                                                                                // 887\n      }                                                                                                           // 888\n    };                                                                                                            // 889\n                                                                                                                  // 890\n    self.deselect = function () {                                                                                 // 891\n      if(self.disabled) {                                                                                         // 892\n        return;                                                                                                   // 893\n      }                                                                                                           // 894\n                                                                                                                  // 895\n      tableCtrl.selected.splice(tableCtrl.selected.indexOf(self.model), 1);                                       // 896\n                                                                                                                  // 897\n      if(angular.isFunction(self.onDeselect)) {                                                                   // 898\n        self.onDeselect(self.model);                                                                              // 899\n      }                                                                                                           // 900\n    };                                                                                                            // 901\n                                                                                                                  // 902\n    self.toggle = function (event) {                                                                              // 903\n      if(event && event.stopPropagation) {                                                                        // 904\n        event.stopPropagation();                                                                                  // 905\n      }                                                                                                           // 906\n                                                                                                                  // 907\n      return self.isSelected() ? self.deselect() : self.select();                                                 // 908\n    };                                                                                                            // 909\n                                                                                                                  // 910\n    function autoSelect() {                                                                                       // 911\n      if(attrs.hasOwnProperty('mdAutoSelect') && attrs.mdAutoSelect === '') {                                     // 912\n        return true;                                                                                              // 913\n      }                                                                                                           // 914\n                                                                                                                  // 915\n      return self.autoSelect;                                                                                     // 916\n    }                                                                                                             // 917\n                                                                                                                  // 918\n    function createCheckbox() {                                                                                   // 919\n      var checkbox = angular.element('<md-checkbox>');                                                            // 920\n                                                                                                                  // 921\n      checkbox.attr('aria-label', 'Select Row');                                                                  // 922\n      checkbox.attr('ng-click', '$mdSelect.toggle($event)');                                                      // 923\n      checkbox.attr('ng-checked', '$mdSelect.isSelected()');                                                      // 924\n      checkbox.attr('ng-disabled', '$mdSelect.disabled');                                                         // 925\n                                                                                                                  // 926\n      return angular.element('<td class=\"md-cell md-checkbox-cell\">').append($compile(checkbox)(scope));          // 927\n    }                                                                                                             // 928\n                                                                                                                  // 929\n    function disableSelection() {                                                                                 // 930\n      Array.prototype.some.call(element.children(), function (child) {                                            // 931\n        return child.classList.contains('md-checkbox-cell') && element[0].removeChild(child);                     // 932\n      });                                                                                                         // 933\n                                                                                                                  // 934\n      if(autoSelect()) {                                                                                          // 935\n        element.off('click', toggle);                                                                             // 936\n      }                                                                                                           // 937\n    }                                                                                                             // 938\n                                                                                                                  // 939\n    function enableSelection() {                                                                                  // 940\n      element.prepend(createCheckbox());                                                                          // 941\n                                                                                                                  // 942\n      if(autoSelect()) {                                                                                          // 943\n        element.on('click', toggle);                                                                              // 944\n      }                                                                                                           // 945\n    }                                                                                                             // 946\n                                                                                                                  // 947\n    function enableRowSelection() {                                                                               // 948\n      return tableCtrl.$$rowSelect;                                                                               // 949\n    }                                                                                                             // 950\n                                                                                                                  // 951\n    function onSelectChange(selected) {                                                                           // 952\n      if(!self.id) {                                                                                              // 953\n        return;                                                                                                   // 954\n      }                                                                                                           // 955\n                                                                                                                  // 956\n      if(tableCtrl.$$hash.has(self.id)) {                                                                         // 957\n        // check if the item has been deselected                                                                  // 958\n        if(selected.indexOf(tableCtrl.$$hash.get(self.id)) === -1) {                                              // 959\n          tableCtrl.$$hash.purge(self.id);                                                                        // 960\n        }                                                                                                         // 961\n                                                                                                                  // 962\n        return;                                                                                                   // 963\n      }                                                                                                           // 964\n                                                                                                                  // 965\n      // check if the item has been selected                                                                      // 966\n      if(selected.indexOf(self.model) !== -1) {                                                                   // 967\n        tableCtrl.$$hash.update(self.id, self.model);                                                             // 968\n      }                                                                                                           // 969\n    }                                                                                                             // 970\n                                                                                                                  // 971\n    function toggle(event) {                                                                                      // 972\n      scope.$applyAsync(function () {                                                                             // 973\n        self.toggle(event);                                                                                       // 974\n      });                                                                                                         // 975\n    }                                                                                                             // 976\n                                                                                                                  // 977\n    scope.$watch(enableRowSelection, function (enable) {                                                          // 978\n      if(enable) {                                                                                                // 979\n        enableSelection();                                                                                        // 980\n      } else {                                                                                                    // 981\n        disableSelection();                                                                                       // 982\n      }                                                                                                           // 983\n    });                                                                                                           // 984\n                                                                                                                  // 985\n    scope.$watch(autoSelect, function (newValue, oldValue) {                                                      // 986\n      if(newValue === oldValue) {                                                                                 // 987\n        return;                                                                                                   // 988\n      }                                                                                                           // 989\n                                                                                                                  // 990\n      if(tableCtrl.$$rowSelect && newValue) {                                                                     // 991\n        element.on('click', toggle);                                                                              // 992\n      } else {                                                                                                    // 993\n        element.off('click', toggle);                                                                             // 994\n      }                                                                                                           // 995\n    });                                                                                                           // 996\n                                                                                                                  // 997\n    scope.$watch(self.isSelected, function (isSelected) {                                                         // 998\n      return isSelected ? element.addClass('md-selected') : element.removeClass('md-selected');                   // 999\n    });                                                                                                           // 1000\n                                                                                                                  // 1001\n    tableCtrl.registerModelChangeListener(onSelectChange);                                                        // 1002\n                                                                                                                  // 1003\n    element.on('$destroy', function () {                                                                          // 1004\n      tableCtrl.removeModelChangeListener(onSelectChange);                                                        // 1005\n    });                                                                                                           // 1006\n  }                                                                                                               // 1007\n                                                                                                                  // 1008\n  return {                                                                                                        // 1009\n    bindToController: true,                                                                                       // 1010\n    controller: Controller,                                                                                       // 1011\n    controllerAs: '$mdSelect',                                                                                    // 1012\n    link: postLink,                                                                                               // 1013\n    require: ['mdSelect', '^^mdTable'],                                                                           // 1014\n    restrict: 'A',                                                                                                // 1015\n    scope: {                                                                                                      // 1016\n      id: '@mdSelectId',                                                                                          // 1017\n      model: '=mdSelect',                                                                                         // 1018\n      disabled: '=ngDisabled',                                                                                    // 1019\n      onSelect: '=?mdOnSelect',                                                                                   // 1020\n      onDeselect: '=?mdOnDeselect',                                                                               // 1021\n      autoSelect: '=mdAutoSelect'                                                                                 // 1022\n    }                                                                                                             // 1023\n  };                                                                                                              // 1024\n}                                                                                                                 // 1025\n                                                                                                                  // 1026\nmdSelect.$inject = ['$compile'];                                                                                  // 1027\n                                                                                                                  // 1028\nangular.module('md.data.table').directive('mdTable', mdTable);                                                    // 1029\n                                                                                                                  // 1030\nfunction Hash() {                                                                                                 // 1031\n  var keys = {};                                                                                                  // 1032\n                                                                                                                  // 1033\n  this.equals = function (key, item) {                                                                            // 1034\n    return keys[key] === item;                                                                                    // 1035\n  };                                                                                                              // 1036\n                                                                                                                  // 1037\n  this.get = function (key) {                                                                                     // 1038\n    return keys[key];                                                                                             // 1039\n  };                                                                                                              // 1040\n                                                                                                                  // 1041\n  this.has = function (key) {                                                                                     // 1042\n    return keys.hasOwnProperty(key);                                                                              // 1043\n  };                                                                                                              // 1044\n                                                                                                                  // 1045\n  this.purge = function (key) {                                                                                   // 1046\n    delete keys[key];                                                                                             // 1047\n  };                                                                                                              // 1048\n                                                                                                                  // 1049\n  this.update = function (key, item) {                                                                            // 1050\n    keys[key] = item;                                                                                             // 1051\n  };                                                                                                              // 1052\n}                                                                                                                 // 1053\n                                                                                                                  // 1054\nfunction mdTable() {                                                                                              // 1055\n                                                                                                                  // 1056\n  function compile(tElement, tAttrs) {                                                                            // 1057\n    tElement.addClass('md-table');                                                                                // 1058\n                                                                                                                  // 1059\n    if(tAttrs.hasOwnProperty('mdProgress')) {                                                                     // 1060\n      var body = tElement.find('tbody')[0];                                                                       // 1061\n      var progress = angular.element('<thead class=\"md-table-progress\">');                                        // 1062\n                                                                                                                  // 1063\n      if(body) {                                                                                                  // 1064\n        tElement[0].insertBefore(progress[0], body);                                                              // 1065\n      }                                                                                                           // 1066\n    }                                                                                                             // 1067\n  }                                                                                                               // 1068\n                                                                                                                  // 1069\n  function Controller($attrs, $element, $q, $scope) {                                                             // 1070\n    var self = this;                                                                                              // 1071\n    var queue = [];                                                                                               // 1072\n    var watchListener;                                                                                            // 1073\n    var modelChangeListeners = [];                                                                                // 1074\n                                                                                                                  // 1075\n    self.$$hash = new Hash();                                                                                     // 1076\n    self.$$columns = {};                                                                                          // 1077\n                                                                                                                  // 1078\n    function enableRowSelection() {                                                                               // 1079\n      self.$$rowSelect = true;                                                                                    // 1080\n                                                                                                                  // 1081\n      watchListener = $scope.$watchCollection('$mdTable.selected', function (selected) {                          // 1082\n        modelChangeListeners.forEach(function (listener) {                                                        // 1083\n          listener(selected);                                                                                     // 1084\n        });                                                                                                       // 1085\n      });                                                                                                         // 1086\n                                                                                                                  // 1087\n      $element.addClass('md-row-select');                                                                         // 1088\n    }                                                                                                             // 1089\n                                                                                                                  // 1090\n    function disableRowSelection() {                                                                              // 1091\n      self.$$rowSelect = false;                                                                                   // 1092\n                                                                                                                  // 1093\n      if(angular.isFunction(watchListener)) {                                                                     // 1094\n        watchListener();                                                                                          // 1095\n      }                                                                                                           // 1096\n                                                                                                                  // 1097\n      $element.removeClass('md-row-select');                                                                      // 1098\n    }                                                                                                             // 1099\n                                                                                                                  // 1100\n    function resolvePromises() {                                                                                  // 1101\n      if(!queue.length) {                                                                                         // 1102\n        return $scope.$applyAsync();                                                                              // 1103\n      }                                                                                                           // 1104\n                                                                                                                  // 1105\n      queue[0].then(function () {                                                                                 // 1106\n        queue.shift();                                                                                            // 1107\n        resolvePromises();                                                                                        // 1108\n      });                                                                                                         // 1109\n    }                                                                                                             // 1110\n                                                                                                                  // 1111\n    function rowSelect() {                                                                                        // 1112\n      if($attrs.hasOwnProperty('mdRowSelect') && $attrs.mdRowSelect === '') {                                     // 1113\n        return true;                                                                                              // 1114\n      }                                                                                                           // 1115\n                                                                                                                  // 1116\n      return self.rowSelect;                                                                                      // 1117\n    }                                                                                                             // 1118\n                                                                                                                  // 1119\n    function validateModel() {                                                                                    // 1120\n      if(!self.selected) {                                                                                        // 1121\n        return console.error('Row selection: ngModel is not defined.');                                           // 1122\n      }                                                                                                           // 1123\n                                                                                                                  // 1124\n      if(!angular.isArray(self.selected)) {                                                                       // 1125\n        return console.error('Row selection: Expected an array. Recived ' + typeof self.selected + '.');          // 1126\n      }                                                                                                           // 1127\n                                                                                                                  // 1128\n      return true;                                                                                                // 1129\n    }                                                                                                             // 1130\n                                                                                                                  // 1131\n    self.columnCount = function () {                                                                              // 1132\n      return self.getRows($element[0]).reduce(function (count, row) {                                             // 1133\n        return row.cells.length > count ? row.cells.length : count;                                               // 1134\n      }, 0);                                                                                                      // 1135\n    };                                                                                                            // 1136\n                                                                                                                  // 1137\n    self.getRows = function (element) {                                                                           // 1138\n      return Array.prototype.filter.call(element.rows, function (row) {                                           // 1139\n        return !row.classList.contains('ng-leave');                                                               // 1140\n      });                                                                                                         // 1141\n    };                                                                                                            // 1142\n                                                                                                                  // 1143\n    self.getBodyRows = function () {                                                                              // 1144\n      return Array.prototype.reduce.call($element.prop('tBodies'), function (result, tbody) {                     // 1145\n        return result.concat(self.getRows(tbody));                                                                // 1146\n      }, []);                                                                                                     // 1147\n    };                                                                                                            // 1148\n                                                                                                                  // 1149\n    self.getElement = function () {                                                                               // 1150\n      return $element;                                                                                            // 1151\n    };                                                                                                            // 1152\n                                                                                                                  // 1153\n    self.getHeaderRows = function () {                                                                            // 1154\n      return self.getRows($element.prop('tHead'));                                                                // 1155\n    };                                                                                                            // 1156\n                                                                                                                  // 1157\n    self.waitingOnPromise = function () {                                                                         // 1158\n      return !!queue.length;                                                                                      // 1159\n    };                                                                                                            // 1160\n                                                                                                                  // 1161\n    self.queuePromise = function (promise) {                                                                      // 1162\n      if(!promise) {                                                                                              // 1163\n        return;                                                                                                   // 1164\n      }                                                                                                           // 1165\n                                                                                                                  // 1166\n      if(queue.push(angular.isArray(promise) ? $q.all(promise) : $q.when(promise)) === 1) {                       // 1167\n        resolvePromises();                                                                                        // 1168\n      }                                                                                                           // 1169\n    };                                                                                                            // 1170\n                                                                                                                  // 1171\n    self.registerModelChangeListener = function (listener) {                                                      // 1172\n      modelChangeListeners.push(listener);                                                                        // 1173\n    };                                                                                                            // 1174\n                                                                                                                  // 1175\n    self.removeModelChangeListener = function (listener) {                                                        // 1176\n      var index = modelChangeListeners.indexOf(listener);                                                         // 1177\n                                                                                                                  // 1178\n      if(index !== -1) {                                                                                          // 1179\n        modelChangeListeners.splice(index, 1);                                                                    // 1180\n      }                                                                                                           // 1181\n    };                                                                                                            // 1182\n                                                                                                                  // 1183\n    if($attrs.hasOwnProperty('mdProgress')) {                                                                     // 1184\n      $scope.$watch('$mdTable.progress', self.queuePromise);                                                      // 1185\n    }                                                                                                             // 1186\n                                                                                                                  // 1187\n    $scope.$watch(rowSelect, function (enable) {                                                                  // 1188\n      if(enable && !!validateModel()) {                                                                           // 1189\n        enableRowSelection();                                                                                     // 1190\n      } else {                                                                                                    // 1191\n        disableRowSelection();                                                                                    // 1192\n      }                                                                                                           // 1193\n    });                                                                                                           // 1194\n  }                                                                                                               // 1195\n                                                                                                                  // 1196\n  Controller.$inject = ['$attrs', '$element', '$q', '$scope'];                                                    // 1197\n                                                                                                                  // 1198\n  return {                                                                                                        // 1199\n    bindToController: true,                                                                                       // 1200\n    compile: compile,                                                                                             // 1201\n    controller: Controller,                                                                                       // 1202\n    controllerAs: '$mdTable',                                                                                     // 1203\n    restrict: 'A',                                                                                                // 1204\n    scope: {                                                                                                      // 1205\n      progress: '=?mdProgress',                                                                                   // 1206\n      selected: '=ngModel',                                                                                       // 1207\n      rowSelect: '=mdRowSelect'                                                                                   // 1208\n    }                                                                                                             // 1209\n  };                                                                                                              // 1210\n}                                                                                                                 // 1211\n                                                                                                                  // 1212\nangular.module('md.data.table').directive('mdTablePagination', mdTablePagination);                                // 1213\n                                                                                                                  // 1214\nfunction mdTablePagination() {                                                                                    // 1215\n                                                                                                                  // 1216\n  function compile(tElement) {                                                                                    // 1217\n    tElement.addClass('md-table-pagination');                                                                     // 1218\n  }                                                                                                               // 1219\n                                                                                                                  // 1220\n  function Controller($attrs, $scope) {                                                                           // 1221\n    var self = this;                                                                                              // 1222\n                                                                                                                  // 1223\n    self.$label = angular.extend({                                                                                // 1224\n      page: 'Page:',                                                                                              // 1225\n      rowsPerPage: 'Rows per page:',                                                                              // 1226\n      of: 'of'                                                                                                    // 1227\n    }, $scope.$eval(self.label) || {});                                                                           // 1228\n                                                                                                                  // 1229\n    function isPositive(number) {                                                                                 // 1230\n      return number > 0;                                                                                          // 1231\n    }                                                                                                             // 1232\n                                                                                                                  // 1233\n    function isZero(number) {                                                                                     // 1234\n      return number === 0 || number === '0';                                                                      // 1235\n    }                                                                                                             // 1236\n                                                                                                                  // 1237\n    self.disableNext = function () {                                                                              // 1238\n      return isZero(self.limit) || !self.hasNext();                                                               // 1239\n    };                                                                                                            // 1240\n                                                                                                                  // 1241\n    self.first = function () {                                                                                    // 1242\n      self.page = 1;                                                                                              // 1243\n      self.onPaginationChange();                                                                                  // 1244\n    };                                                                                                            // 1245\n                                                                                                                  // 1246\n    self.hasNext = function () {                                                                                  // 1247\n      return self.page * self.limit < self.total;                                                                 // 1248\n    };                                                                                                            // 1249\n                                                                                                                  // 1250\n    self.hasPrevious = function () {                                                                              // 1251\n      return self.page > 1;                                                                                       // 1252\n    };                                                                                                            // 1253\n                                                                                                                  // 1254\n    self.last = function () {                                                                                     // 1255\n      self.page = self.pages();                                                                                   // 1256\n      self.onPaginationChange();                                                                                  // 1257\n    };                                                                                                            // 1258\n                                                                                                                  // 1259\n    self.max = function () {                                                                                      // 1260\n      return self.hasNext() ? self.page * self.limit : self.total;                                                // 1261\n    };                                                                                                            // 1262\n                                                                                                                  // 1263\n    self.min = function () {                                                                                      // 1264\n      return self.page * self.limit - self.limit;                                                                 // 1265\n    };                                                                                                            // 1266\n                                                                                                                  // 1267\n    self.next = function () {                                                                                     // 1268\n      self.page++;                                                                                                // 1269\n      self.onPaginationChange();                                                                                  // 1270\n    };                                                                                                            // 1271\n                                                                                                                  // 1272\n    self.onPaginationChange = function () {                                                                       // 1273\n      if(angular.isFunction(self.onPaginate)) {                                                                   // 1274\n        self.onPaginate(self.page, self.limit);                                                                   // 1275\n      }                                                                                                           // 1276\n    };                                                                                                            // 1277\n                                                                                                                  // 1278\n    self.pages = function () {                                                                                    // 1279\n      return Math.ceil(self.total / (isZero(self.limit) ? 1 : self.limit));                                       // 1280\n    };                                                                                                            // 1281\n                                                                                                                  // 1282\n    self.previous = function () {                                                                                 // 1283\n      self.page--;                                                                                                // 1284\n      self.onPaginationChange();                                                                                  // 1285\n    };                                                                                                            // 1286\n                                                                                                                  // 1287\n    self.range = function (total) {                                                                               // 1288\n      return new Array(isFinite(total) && isPositive(total) ? total : 1);                                         // 1289\n    };                                                                                                            // 1290\n                                                                                                                  // 1291\n    self.showBoundaryLinks = function () {                                                                        // 1292\n      if($attrs.hasOwnProperty('mdBoundaryLinks') && $attrs.mdBoundaryLinks === '') {                             // 1293\n        return true;                                                                                              // 1294\n      }                                                                                                           // 1295\n                                                                                                                  // 1296\n      return self.boundaryLinks;                                                                                  // 1297\n    };                                                                                                            // 1298\n                                                                                                                  // 1299\n    self.showPageSelect = function () {                                                                           // 1300\n      if($attrs.hasOwnProperty('mdPageSelect') && $attrs.mdPageSelect === '') {                                   // 1301\n        return true;                                                                                              // 1302\n      }                                                                                                           // 1303\n                                                                                                                  // 1304\n      return self.pageSelect;                                                                                     // 1305\n    };                                                                                                            // 1306\n                                                                                                                  // 1307\n    $scope.$watch('$pagination.limit', function (newValue, oldValue) {                                            // 1308\n      if(newValue === oldValue) {                                                                                 // 1309\n        return;                                                                                                   // 1310\n      }                                                                                                           // 1311\n                                                                                                                  // 1312\n      // find closest page from previous min                                                                      // 1313\n      self.page = Math.floor(((self.page * oldValue - oldValue) + newValue) / (isZero(newValue) ? 1 : newValue));\n      self.onPaginationChange();                                                                                  // 1315\n    });                                                                                                           // 1316\n  }                                                                                                               // 1317\n                                                                                                                  // 1318\n  Controller.$inject = ['$attrs', '$scope'];                                                                      // 1319\n                                                                                                                  // 1320\n  return {                                                                                                        // 1321\n    bindToController: {                                                                                           // 1322\n      boundaryLinks: '=?mdBoundaryLinks',                                                                         // 1323\n      label: '@?mdLabel',                                                                                         // 1324\n      limit: '=mdLimit',                                                                                          // 1325\n      page: '=mdPage',                                                                                            // 1326\n      pageSelect: '=?mdPageSelect',                                                                               // 1327\n      onPaginate: '=?mdOnPaginate',                                                                               // 1328\n      options: '=mdOptions',                                                                                      // 1329\n      total: '@mdTotal'                                                                                           // 1330\n    },                                                                                                            // 1331\n    compile: compile,                                                                                             // 1332\n    controller: Controller,                                                                                       // 1333\n    controllerAs: '$pagination',                                                                                  // 1334\n    restrict: 'E',                                                                                                // 1335\n    scope: {},                                                                                                    // 1336\n    templateUrl: 'md-table-pagination.html'                                                                       // 1337\n  };                                                                                                              // 1338\n}                                                                                                                 // 1339\n                                                                                                                  // 1340\nangular.module('md.data.table').directive('mdTableProgress', mdTableProgress);                                    // 1341\n                                                                                                                  // 1342\nfunction mdTableProgress() {                                                                                      // 1343\n                                                                                                                  // 1344\n  function postLink(scope, element, attrs, tableCtrl) {                                                           // 1345\n    scope.columnCount = tableCtrl.columnCount;                                                                    // 1346\n    scope.deferred = tableCtrl.waitingOnPromise;                                                                  // 1347\n  }                                                                                                               // 1348\n                                                                                                                  // 1349\n  return {                                                                                                        // 1350\n    link: postLink,                                                                                               // 1351\n    require: '^^mdTable',                                                                                         // 1352\n    restrict: 'C',                                                                                                // 1353\n    scope: {},                                                                                                    // 1354\n    templateUrl: 'md-table-progress.html'                                                                         // 1355\n  };                                                                                                              // 1356\n}                                                                                                                 // 1357\n                                                                                                                  // 1358\n})(window, angular);                                                                                              // 1359\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\nPackage['pacozaa:angular-material-data-table'] = {};\n\n})();\n","servePath":"/packages/pacozaa_angular-material-data-table.js","sourceMap":{"version":3,"sources":["/packages/pacozaa_angular-material-data-table/dist/md-data-table.js"],"names":[],"mappingsyH","file":"/packages/pacozaa_angular-material-data-table.js","sourcesContent":["(function (window, angular, undefined) {\n'use strict';\n\nangular.module('md.table.templates', ['md-table-pagination.html', 'md-table-progress.html', 'arrow-up.svg', 'navigate-before.svg', 'navigate-first.svg', 'navigate-last.svg', 'navigate-next.svg']);\n\nangular.module('md-table-pagination.html', []).run(['$templateCache', function($templateCache) {\n  $templateCache.put('md-table-pagination.html',\n    '<span class=\"label\" ng-if=\"$pagination.showPageSelect()\">{{$pagination.$label[\\'page\\']}}</span>\\n' +\n    '\\n' +\n    '<md-select class=\"md-table-select\" ng-if=\"$pagination.showPageSelect()\" ng-model=\"$pagination.page\" md-container-class=\"md-pagination-select\" ng-change=\"$pagination.onPaginationChange()\" aria-label=\"Page\">\\n' +\n    '  <md-option ng-repeat=\"num in $pagination.range($pagination.pages()) track by $index\" ng-value=\"$index + 1\">{{$index + 1}}</md-option>\\n' +\n    '</md-select>\\n' +\n    '\\n' +\n    '<span class=\"label\">{{$pagination.$label[\\'rowsPerPage\\']}}</span>\\n' +\n    '\\n' +\n    '<md-select class=\"md-table-select\" ng-model=\"$pagination.limit\" md-container-class=\"md-pagination-select\" aria-label=\"Rows\" placeholder=\"{{$pagination.options ? $pagination.options[0] : 5}}\">\\n' +\n    '  <md-option ng-repeat=\"rows in $pagination.options ? $pagination.options : [5, 10, 15]\" ng-value=\"rows\">{{rows}}</md-option>\\n' +\n    '</md-select>\\n' +\n    '\\n' +\n    '<span class=\"label\">{{$pagination.min() + 1}} - {{$pagination.max()}} {{$pagination.$label[\\'of\\']}} {{$pagination.total}}</span>\\n' +\n    '\\n' +\n    '<md-button class=\"md-icon-button\" type=\"button\" ng-if=\"$pagination.showBoundaryLinks()\" ng-click=\"$pagination.first()\" ng-disabled=\"!$pagination.hasPrevious()\" aria-label=\"First\">\\n' +\n    '  <md-icon md-svg-icon=\"navigate-first.svg\"></md-icon>\\n' +\n    '</md-button>\\n' +\n    '<md-button class=\"md-icon-button\" type=\"button\" ng-click=\"$pagination.previous()\" ng-disabled=\"!$pagination.hasPrevious()\" aria-label=\"Previous\">\\n' +\n    '  <md-icon md-svg-icon=\"navigate-before.svg\"></md-icon>\\n' +\n    '</md-button>\\n' +\n    '<md-button class=\"md-icon-button\" type=\"button\" ng-click=\"$pagination.next()\" ng-disabled=\"$pagination.disableNext()\" aria-label=\"Next\">\\n' +\n    '  <md-icon md-svg-icon=\"navigate-next.svg\"></md-icon>\\n' +\n    '</md-button>\\n' +\n    '<md-button class=\"md-icon-button\" type=\"button\" ng-if=\"$pagination.showBoundaryLinks()\" ng-click=\"$pagination.last()\" ng-disabled=\"$pagination.disableNext()\" aria-label=\"Last\">\\n' +\n    '  <md-icon md-svg-icon=\"navigate-last.svg\"></md-icon>\\n' +\n    '</md-button>');\n}]);\n\nangular.module('md-table-progress.html', []).run(['$templateCache', function($templateCache) {\n  $templateCache.put('md-table-progress.html',\n    '<tr>\\n' +\n    '  <th colspan=\"{{columnCount()}}\">\\n' +\n    '    <md-progress-linear ng-show=\"deferred()\" md-mode=\"indeterminate\"></md-progress-linear>\\n' +\n    '  </th>\\n' +\n    '</tr>');\n}]);\n\nangular.module('arrow-up.svg', []).run(['$templateCache', function($templateCache) {\n  $templateCache.put('arrow-up.svg',\n    '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path d=\"M4 12l1.41 1.41L11 7.83V20h2V7.83l5.58 5.59L20 12l-8-8-8 8z\"/></svg>');\n}]);\n\nangular.module('navigate-before.svg', []).run(['$templateCache', function($templateCache) {\n  $templateCache.put('navigate-before.svg',\n    '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path d=\"M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z\"/></svg>');\n}]);\n\nangular.module('navigate-first.svg', []).run(['$templateCache', function($templateCache) {\n  $templateCache.put('navigate-first.svg',\n    '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path d=\"M7 6 v12 h2 v-12 h-2z M17.41 7.41L16 6l-6 6 6 6 1.41-1.41L12.83 12z\"/></svg>');\n}]);\n\nangular.module('navigate-last.svg', []).run(['$templateCache', function($templateCache) {\n  $templateCache.put('navigate-last.svg',\n    '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path d=\"M15 6 v12 h2 v-12 h-2z M8 6L6.59 7.41 11.17 12l-4.58 4.59L8 18l6-6z\"/></svg>');\n}]);\n\nangular.module('navigate-next.svg', []).run(['$templateCache', function($templateCache) {\n  $templateCache.put('navigate-next.svg',\n    '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path d=\"M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z\"/></svg>');\n}]);\n\n\nangular.module('md.data.table', ['md.table.templates']);\n\nangular.module('md.data.table').directive('mdBody', mdBody);\n\nfunction mdBody() {\n\n  function compile(tElement) {\n    tElement.addClass('md-body');\n  }\n\n  return {\n    compile: compile,\n    restrict: 'A'\n  };\n}\n\nangular.module('md.data.table').directive('mdCell', mdCell);\n\nfunction mdCell() {\n  \n  function compile(tElement) {\n    var select = tElement.find('md-select');\n    \n    if(select.length) {\n      select.addClass('md-table-select').attr('md-container-class', 'md-table-select');\n    }\n    \n    tElement.addClass('md-cell');\n    \n    return postLink;\n  }\n  \n  // empty controller to be bind properties to in postLink function\n  function Controller() {\n    \n  }\n  \n  function postLink(scope, element, attrs, ctrls) {\n    var select = element.find('md-select');\n    var cellCtrl = ctrls.shift();\n    var tableCtrl = ctrls.shift();\n    \n    if(attrs.ngClick) {\n      element.addClass('md-clickable');\n    }\n    \n    if(select.length) {\n      select.on('click', function (event) {\n        event.stopPropagation();\n      });\n      \n      element.addClass('md-clickable').on('click', function (event) {\n        event.stopPropagation();\n        select[0].click();\n      });\n    }\n    \n    cellCtrl.getTable = tableCtrl.getElement;\n    \n    function getColumn() {\n      return tableCtrl.$$columns[getIndex()];\n    }\n    \n    function getIndex() {\n      return Array.prototype.indexOf.call(element.parent().children(), element[0]);\n    }\n    \n    scope.$watch(getColumn, function (column) {\n      if(!column) {\n        return;\n      }\n      \n      if(column.numeric) {\n        element.addClass('md-numeric');\n      } else {\n        element.removeClass('md-numeric');\n      }\n    });\n  }\n  \n  return {\n    controller: Controller,\n    compile: compile,\n    require: ['mdCell', '^^mdTable'],\n    restrict: 'A'\n  };\n}\n\nangular.module('md.data.table').directive('mdColumn', mdColumn);\n\nfunction mdColumn($compile) {\n  \n  function compile(tElement) {\n    tElement.addClass('md-column');\n    return postLink;\n  }\n\n  function postLink(scope, element, attrs, ctrls) {\n    var headCtrl = ctrls.shift();\n    var tableCtrl = ctrls.shift();\n    \n    function attachSortIcon() {\n      var sortIcon = angular.element('<md-icon md-svg-icon=\"arrow-up.svg\">');\n      \n      $compile(sortIcon.addClass('md-sort-icon').attr('ng-class', 'getDirection()'))(scope);\n      \n      if(element.hasClass('md-numeric')) {\n        element.prepend(sortIcon);\n      } else {\n        element.append(sortIcon);\n      }\n    }\n    \n    function detachSortIcon() {\n      Array.prototype.some.call(element.find('md-icon'), function (icon) {\n        return icon.classList.contains('md-sort-icon') && element[0].removeChild(icon);\n      });\n    }\n    \n    function disableSorting() {\n      detachSortIcon();\n      element.removeClass('md-sort').off('click', setOrder);\n    }\n    \n    function enableSorting() {\n      attachSortIcon();\n      element.addClass('md-sort').on('click', setOrder);\n    }\n    \n    function getIndex() {\n      return Array.prototype.indexOf.call(element.parent().children(), element[0]);\n    }\n    \n    function isActive() {\n      if(!scope.orderBy) {\n        return false;\n      }\n      \n      return headCtrl.order === scope.orderBy || headCtrl.order === '-' + scope.orderBy;\n    }\n    \n    function isNumeric() {\n      if(attrs.hasOwnProperty('mdNumeric') && attrs.mdNumeric === '') {\n        return true;\n      }\n      \n      return scope.numeric;\n    }\n    \n    function setOrder() {\n      scope.$applyAsync(function () {\n        if(!isActive()) {\n          headCtrl.order = scope.getDirection() === 'md-asc' ? scope.orderBy : '-' + scope.orderBy;\n        } else {\n          headCtrl.order = scope.getDirection() === 'md-asc' ? '-' + scope.orderBy : scope.orderBy;\n        }\n        \n        if(angular.isFunction(headCtrl.onReorder)) {\n          headCtrl.onReorder(headCtrl.order);\n        }\n      });\n    }\n    \n    function updateColumn(index, column) {\n      tableCtrl.$$columns[index] = column;\n      \n      if(column.numeric) {\n        element.addClass('md-numeric');\n      } else {\n        element.removeClass('md-numeric');\n      }\n    }\n    \n    scope.getDirection = function () {\n      if(!isActive()) {\n        return attrs.hasOwnProperty('mdDesc') ? 'md-desc' : 'md-asc';\n      }\n      \n      return headCtrl.order === '-' + scope.orderBy ? 'md-desc' : 'md-asc';\n    };\n    \n    scope.$watch(isActive, function (active) {\n      if(active) {\n        element.addClass('md-active');\n      } else {\n        element.removeClass('md-active');\n      }\n    });\n    \n    scope.$watch(getIndex, function (index) {\n      updateColumn(index, {'numeric': isNumeric()});\n    });\n    \n    scope.$watch(isNumeric, function (numeric) {\n      updateColumn(getIndex(), {'numeric': numeric});\n    });\n    \n    scope.$watch('orderBy', function (orderBy) {\n      if(orderBy) {\n        enableSorting();\n      } else {\n        disableSorting();\n      }\n    });\n  }\n\n  return {\n    compile: compile,\n    require: ['^^mdHead', '^^mdTable'],\n    restrict: 'A',\n    scope: {\n      numeric: '=?mdNumeric',\n      orderBy: '@?mdOrderBy'\n    }\n  };\n}\n\nmdColumn.$inject = ['$compile'];\n\nangular.module('md.data.table')\n  .decorator('$controller', controllerDecorator)\n  .factory('$mdEditDialog', mdEditDialog);\n\n/*\n * A decorator for ng.$controller to optionally bind properties to the\n * controller before invoking the constructor. Stolen from the ngMock.\n *\n * https://docs.angularjs.org/api/ngMock/service/$controller\n */\nfunction controllerDecorator($delegate) {\n  return function(expression, locals, later, ident) {\n    if (later && typeof later === 'object') {\n      var create = $delegate(expression, locals, true, ident);\n      angular.extend(create.instance, later);\n      return create();\n    }\n    return $delegate(expression, locals, later, ident);\n  };\n}\n\ncontrollerDecorator.$inject = ['$delegate'];\n  \nfunction mdEditDialog($compile, $controller, $document, $mdUtil, $q, $rootScope, $templateCache, $templateRequest, $window) {\n  /* jshint validthis: true */\n  \n  var ESCAPE = 27;\n  \n  var busy = false;\n  var body = angular.element($document.prop('body'));\n  \n  /*\n   * bindToController\n   * controller\n   * controllerAs\n   * locals\n   * resolve\n   * scope\n   * targetEvent\n   * template\n   * templateUrl\n   */\n  var defaultOptions = {\n    clickOutsideToClose: true,\n    disableScroll: true,\n    escToClose: true,\n    focusOnOpen: true\n  };\n  \n  function build(template, options) {\n    var scope = $rootScope.$new();\n    var element = $compile(template)(scope);\n    var backdrop = $mdUtil.createBackdrop(scope, 'md-edit-dialog-backdrop');\n    var controller;\n    \n    if(options.controller) {\n      controller = getController(options, scope, {$element: element, $scope: scope});\n    } else {\n      angular.extend(scope, options.scope);\n    }\n    \n    if(options.disableScroll) {\n      disableScroll(element);\n    }\n    \n    body.prepend(backdrop).append(element.addClass('md-whiteframe-1dp'));\n    \n    positionDialog(element, options.targetEvent.currentTarget);\n    \n    if(options.focusOnOpen) {\n      var autofocus = $mdUtil.findFocusTarget(element);\n      \n      if(autofocus) {\n        autofocus.focus();\n      }\n    }\n    \n    if(options.clickOutsideToClose) {\n      backdrop.on('click', function () {\n        element.remove();\n      });\n    }\n    \n    if(options.escToClose) {\n      escToClose(element);\n    }\n    \n    element.on('$destroy', function () {\n      busy = false;\n      backdrop.remove();\n    });\n    \n    return controller;\n  }\n  \n  function disableScroll(element) {\n    var restoreScroll = $mdUtil.disableScrollAround(element, body);\n    \n    element.on('$destroy', function () {\n      restoreScroll();\n    });\n  }\n  \n  function getController(options, scope, inject) {\n    if(!options.controller) {\n      return;\n    }\n    \n    if(options.resolve) {\n      angular.extend(inject, options.resolve);\n    }\n    \n    if(options.locals) {\n      angular.extend(inject, options.locals);\n    }\n    \n    if(options.controllerAs) {\n      scope[options.controllerAs] = {};\n      \n      if(options.bindToController) {\n        angular.extend(scope[options.controllerAs], options.scope);\n      } else {\n        angular.extend(scope, options.scope);\n      }\n    } else {\n      angular.extend(scope, options.scope);\n    }\n    \n    if(options.bindToController) {\n      return $controller(options.controller, inject, scope[options.controllerAs]);\n    } else {\n      return $controller(options.controller, inject);\n    }\n  }\n  \n  function getTemplate(options) {\n    return $q(function (resolve, reject) {\n      var template = options.template;\n      \n      function illegalType(type) {\n        reject('Unexpected template value. Expected a string; received a ' + type + '.');\n      }\n      \n      if(template) {\n        return angular.isString(template) ? resolve(template) : illegalType(typeof template);\n      }\n      \n      if(options.templateUrl) {\n        template = $templateCache.get(options.templateUrl);\n        \n        if(template) {\n          return resolve(template);\n        }\n        \n        var success = function (template) {\n          return resolve(template);\n        };\n        \n        var error = function () {\n          return reject('Error retrieving template from URL.');\n        };\n        \n        return $templateRequest(options.templateUrl).then(success, error);\n      }\n      \n      reject('Template not provided.');\n    });\n  }\n  \n  function logError(error) {\n    busy = false;\n    console.error(error);\n  }\n  \n  function escToClose(element) {\n    var keyup = function (event) {\n      if(event.keyCode === ESCAPE) {\n        element.remove();\n      }\n    };\n    \n    body.on('keyup', keyup);\n    \n    element.on('$destroy', function () {\n      body.off('keyup', keyup);\n    });\n  }\n  \n  function positionDialog(element, target) {\n    var table = angular.element(target).controller('mdCell').getTable();\n    \n    var getHeight = function () {\n      return element.prop('clientHeight');\n    };\n    \n    var getSize = function () {\n      return {\n        width: getWidth(),\n        height: getHeight()\n      };\n    };\n    \n    var getTableBounds = function () {\n      var parent = table.parent();\n      \n      if(parent.prop('tagName') === 'MD-TABLE-CONTAINER') {\n        return parent[0].getBoundingClientRect();\n      } else {\n        return table[0].getBoundingClientRect();\n      }\n    };\n    \n    var getWidth = function () {\n      return element.prop('clientWidth');\n    };\n    \n    var reposition = function () {\n      var size = getSize();\n      var cellBounds = target.getBoundingClientRect();\n      var tableBounds = getTableBounds();\n      \n      if(size.width > tableBounds.right - cellBounds.left) {\n        element.css('left', tableBounds.right - size.width + 'px');\n      } else {\n        element.css('left', cellBounds.left + 'px');\n      }\n      \n      if(size.height > tableBounds.bottom - cellBounds.top) {\n        element.css('top', tableBounds.bottom - size.height + 'px');\n      } else {\n        element.css('top', cellBounds.top + 1 + 'px');\n      }\n      \n      element.css('minWidth', cellBounds.width + 'px');\n    };\n    \n    var watchWidth = $rootScope.$watch(getWidth, reposition);\n    var watchHeight = $rootScope.$watch(getHeight, reposition);\n    \n    $window.addEventListener('resize', reposition);\n    \n    element.on('$destroy', function () {\n      watchWidth();\n      watchHeight();\n      \n      $window.removeEventListener('resize', reposition);\n    });\n  }\n  \n  function preset(size, options) {\n    \n    function getAttrs() {\n      var attrs = 'type=\"' + (options.type || 'text') + '\"';\n      \n      for(var attr in options.validators) {\n        attrs += ' ' + attr + '=\"' + options.validators[attr] + '\"';\n      }\n      \n      return attrs;\n    }\n    \n    return {\n      controller: ['$element', '$q', 'save', '$scope', function ($element, $q, save, $scope) {\n        function update() {\n          if($scope.editDialog.$invalid) {\n            return $q.reject();\n          }\n          \n          if(angular.isFunction(save)) {\n            return $q.when(save($scope.editDialog.input));\n          }\n          \n          return $q.resolve();\n        }\n        \n        this.dismiss = function () {\n          $element.remove();\n        };\n        \n        this.getInput = function () {\n          return $scope.editDialog.input;\n        };\n        \n        $scope.dismiss = this.dismiss;\n        \n        $scope.submit = function () {\n          update().then(function () {\n            $scope.dismiss();\n          });\n        };\n      }],\n      locals: {\n        save: options.save\n      },\n      scope: {\n        cancel: options.cancel || 'Cancel',\n        messages: options.messages,\n        model: options.modelValue,\n        ok: options.ok || 'Save',\n        placeholder: options.placeholder,\n        title: options.title,\n        size: size\n      },\n      template:\n        '<md-edit-dialog>' +\n          '<div layout=\"column\" class=\"md-content\">' +\n            '<div ng-if=\"size === \\'large\\'\" class=\"md-title\">{{title || \\'Edit\\'}}</div>' +\n            '<form name=\"editDialog\" layout=\"column\" ng-submit=\"submit(model)\">' +\n              '<md-input-container md-no-float>' +\n                '<input name=\"input\" ng-model=\"model\" md-autofocus placeholder=\"{{placeholder}} \"' + getAttrs() + '>' +\n                '<div ng-messages=\"editDialog.input.$error\">' +\n                  '<div ng-repeat=\"(key, message) in messages\" ng-message=\"{{key}}\">{{message}}</div>' +\n                '</div>' +\n              '</md-input-container>' +\n            '</form>' +\n          '</div>' +\n          '<div ng-if=\"size === \\'large\\'\" layout=\"row\" layout-align=\"end\" class=\"md-actions\">' +\n            '<md-button class=\"md-primary\" ng-click=\"dismiss()\">{{cancel}}</md-button>' +\n            '<md-button class=\"md-primary\" ng-click=\"submit()\">{{ok}}</md-button>' +\n          '</div>' +\n        '</md-edit-dialog>'\n    };\n  }\n  \n  this.show = function (options) {\n    if(busy) {\n      return $q.reject();\n    }\n    \n    busy = true;\n    options = angular.extend({}, defaultOptions, options);\n    \n    if(!options.targetEvent) {\n      return logError('options.targetEvent is required to align the dialog with the table cell.');\n    }\n    \n    if(!options.targetEvent.currentTarget.classList.contains('md-cell')) {\n      return logError('The event target must be a table cell.');\n    }\n    \n    if(options.bindToController && !options.controllerAs) {\n      return logError('You must define options.controllerAs when options.bindToController is true.');\n    }\n    \n    var promise = getTemplate(options);\n    var promises = [promise];\n    \n    for(var prop in options.resolve) {\n      promise = options.resolve[prop];\n      promises.push($q.when(angular.isFunction(promise) ? promise() : promise));\n    }\n    \n    promise = $q.all(promises);\n    \n    promise['catch'](logError);\n    \n    return promise.then(function (results) {\n      var template = results.shift();\n      \n      for(var prop in options.resolve) {\n        options.resolve[prop] = results.shift();\n      }\n      \n      return build(template, options);\n    });\n  };\n  \n  this.small = function (options) {\n    return this.show(angular.extend({}, options, preset('small', options)));\n  }.bind(this);\n  \n  this.large = function (options) {\n    return this.show(angular.extend({}, options, preset('large', options)));\n  }.bind(this);\n  \n  return this;\n}\n\nmdEditDialog.$inject = ['$compile', '$controller', '$document', '$mdUtil', '$q', '$rootScope', '$templateCache', '$templateRequest', '$window'];\n\n\nangular.module('md.data.table').directive('mdFoot', mdFoot);\n\nfunction mdFoot() {\n\n  function compile(tElement) {\n    tElement.addClass('md-foot');\n  }\n\n  return {\n    compile: compile,\n    restrict: 'A'\n  };\n}\n\nangular.module('md.data.table').directive('mdHead', mdHead);\n\nfunction mdHead($compile) {\n\n  function compile(tElement) {\n    tElement.addClass('md-head');\n    return postLink;\n  }\n  \n  // empty controller to be bind scope properties to\n  function Controller() {\n    \n  }\n  \n  function postLink(scope, element, attrs, tableCtrl) {\n    \n    function attachCheckbox() {\n      var children = element.children();\n      \n      // append an empty cell to preceding rows\n      for(var i = 0; i < children.length - 1; i++) {\n        children.eq(i).prepend('<th class=\"md-column\">');\n      }\n      \n      children.eq(children.length - 1).prepend(createCheckBox());\n    }\n    \n    function createCheckBox() {\n      var checkbox = angular.element('<md-checkbox>');\n      \n      checkbox.attr('aria-label', 'Select All');\n      checkbox.attr('ng-click', 'toggleAll()');\n      checkbox.attr('ng-checked', 'allSelected()');\n      \n      return angular.element('<th class=\"md-column md-checkbox-column\">').append($compile(checkbox)(scope));\n    }\n    \n    function enableRowSelection() {\n      return tableCtrl.$$rowSelect;\n    }\n    \n    function mdSelectCtrl(row) {\n      return angular.element(row).controller('mdSelect');\n    }\n    \n    function removeCheckbox() {\n      var children = element.children();\n      var child = children.eq(children.length - 1);\n      \n      Array.prototype.some.call(child.prop('cells'), function (cell) {\n        return cell.classList.contains('md-checkbox-column') && child[0].removeChild(cell);\n      });\n    }\n    \n    scope.allSelected = function () {\n      var rows = tableCtrl.getBodyRows();\n      \n      return rows.length && rows.map(mdSelectCtrl).every(function (ctrl) {\n        return ctrl && ctrl.isSelected();\n      });\n    };\n    \n    scope.selectAll = function () {\n      tableCtrl.getBodyRows().map(mdSelectCtrl).forEach(function (ctrl) {\n        if(ctrl && !ctrl.isSelected()) {\n          ctrl.select();\n        }\n      });\n    };\n    \n    scope.toggleAll = function () {\n      return scope.allSelected() ? scope.unSelectAll() : scope.selectAll();\n    };\n    \n    scope.unSelectAll = function () {\n      tableCtrl.getBodyRows().map(mdSelectCtrl).forEach(function (ctrl) {\n        if(ctrl && ctrl.isSelected()) {\n          ctrl.deselect();\n        }\n      });\n    };\n    \n    scope.$watch(enableRowSelection, function (enable) {\n      if(enable) {\n        attachCheckbox();\n      } else {\n        removeCheckbox();\n      }\n    });\n  }\n  \n  return {\n    bindToController: true,\n    compile: compile,\n    controller: Controller,\n    controllerAs: '$mdHead',\n    require: '^^mdTable',\n    restrict: 'A',\n    scope: {\n      order: '=?mdOrder',\n      onReorder: '=?mdOnReorder'\n    }\n  };\n}\n\nmdHead.$inject = ['$compile'];\n\nangular.module('md.data.table').directive('mdRow', mdRow);\n\nfunction mdRow() {\n\n  function compile(tElement) {\n    tElement.addClass('md-row');\n    return postLink;\n  }\n  \n  function postLink(scope, element, attrs, tableCtrl) {\n    function enableRowSelection() {\n      return tableCtrl.$$rowSelect;\n    }\n    \n    function isBodyRow() {\n      return tableCtrl.getBodyRows().indexOf(element[0]) !== -1;\n    }\n    \n    function isChild(node) {\n      return node.parent()[0] === element[0];\n    }\n    \n    if(isBodyRow()) {\n      var cell = angular.element('<td class=\"md-cell\">');\n      \n      scope.$watch(enableRowSelection, function (enable) {\n        if(enable && !attrs.mdSelect) {\n          if(!isChild(cell)) {\n            element.prepend(cell);\n          }\n          return;\n        }\n        \n        if(isChild(cell)) {\n          cell.remove();\n        }\n      });\n    }\n  }\n\n  return {\n    compile: compile,\n    require: '^^mdTable',\n    restrict: 'A'\n  };\n}\n\nangular.module('md.data.table').directive('mdSelect', mdSelect);\n\nfunction mdSelect($compile) {\n  \n  // empty controller to bind scope properties to\n  function Controller() {\n    \n  }\n  \n  function postLink(scope, element, attrs, ctrls) {\n    var self = ctrls.shift();\n    var tableCtrl = ctrls.shift();\n    \n    if(tableCtrl.$$rowSelect && self.id && tableCtrl.$$hash.has(self.id)) {\n      var index = tableCtrl.selected.indexOf(tableCtrl.$$hash.get(self.id));\n      \n      // if the item is no longer selected remove it\n      if(index === -1) {\n        tableCtrl.$$hash.purge(self.id);\n      }\n      \n      // if the item is not a reference to the current model update the reference\n      else if(!tableCtrl.$$hash.equals(self.id, self.model)) {\n        tableCtrl.$$hash.update(self.id, self.model);\n        tableCtrl.selected.splice(index, 1, self.model);\n      }\n    }\n    \n    self.isSelected = function () {\n      if(!tableCtrl.$$rowSelect) {\n        return false;\n      }\n      \n      if(self.id) {\n        return tableCtrl.$$hash.has(self.id);\n      }\n      \n      return tableCtrl.selected.indexOf(self.model) !== -1;\n    };\n    \n    self.select = function () {\n      if(self.disabled) {\n        return;\n      }\n      \n      tableCtrl.selected.push(self.model);\n      \n      if(angular.isFunction(self.onSelect)) {\n        self.onSelect(self.model);\n      }\n    };\n    \n    self.deselect = function () {\n      if(self.disabled) {\n        return;\n      }\n      \n      tableCtrl.selected.splice(tableCtrl.selected.indexOf(self.model), 1);\n      \n      if(angular.isFunction(self.onDeselect)) {\n        self.onDeselect(self.model);\n      }\n    };\n    \n    self.toggle = function (event) {\n      if(event && event.stopPropagation) {\n        event.stopPropagation();\n      }\n      \n      return self.isSelected() ? self.deselect() : self.select();\n    };\n    \n    function autoSelect() {\n      if(attrs.hasOwnProperty('mdAutoSelect') && attrs.mdAutoSelect === '') {\n        return true;\n      }\n      \n      return self.autoSelect;\n    }\n    \n    function createCheckbox() {\n      var checkbox = angular.element('<md-checkbox>');\n      \n      checkbox.attr('aria-label', 'Select Row');\n      checkbox.attr('ng-click', '$mdSelect.toggle($event)');\n      checkbox.attr('ng-checked', '$mdSelect.isSelected()');\n      checkbox.attr('ng-disabled', '$mdSelect.disabled');\n      \n      return angular.element('<td class=\"md-cell md-checkbox-cell\">').append($compile(checkbox)(scope));\n    }\n    \n    function disableSelection() {\n      Array.prototype.some.call(element.children(), function (child) {\n        return child.classList.contains('md-checkbox-cell') && element[0].removeChild(child);\n      });\n      \n      if(autoSelect()) {\n        element.off('click', toggle);\n      }\n    }\n    \n    function enableSelection() {\n      element.prepend(createCheckbox());\n      \n      if(autoSelect()) {\n        element.on('click', toggle);\n      }\n    }\n    \n    function enableRowSelection() {\n      return tableCtrl.$$rowSelect;\n    }\n    \n    function onSelectChange(selected) {\n      if(!self.id) {\n        return;\n      }\n      \n      if(tableCtrl.$$hash.has(self.id)) {\n        // check if the item has been deselected\n        if(selected.indexOf(tableCtrl.$$hash.get(self.id)) === -1) {\n          tableCtrl.$$hash.purge(self.id);\n        }\n        \n        return;\n      }\n      \n      // check if the item has been selected\n      if(selected.indexOf(self.model) !== -1) {\n        tableCtrl.$$hash.update(self.id, self.model);\n      }\n    }\n    \n    function toggle(event) {\n      scope.$applyAsync(function () {\n        self.toggle(event);\n      });\n    }\n    \n    scope.$watch(enableRowSelection, function (enable) {\n      if(enable) {\n        enableSelection();\n      } else {\n        disableSelection();\n      }\n    });\n    \n    scope.$watch(autoSelect, function (newValue, oldValue) {\n      if(newValue === oldValue) {\n        return;\n      }\n      \n      if(tableCtrl.$$rowSelect && newValue) {\n        element.on('click', toggle);\n      } else {\n        element.off('click', toggle);\n      }\n    });\n    \n    scope.$watch(self.isSelected, function (isSelected) {\n      return isSelected ? element.addClass('md-selected') : element.removeClass('md-selected');\n    });\n    \n    tableCtrl.registerModelChangeListener(onSelectChange);\n    \n    element.on('$destroy', function () {\n      tableCtrl.removeModelChangeListener(onSelectChange);\n    });\n  }\n  \n  return {\n    bindToController: true,\n    controller: Controller,\n    controllerAs: '$mdSelect',\n    link: postLink,\n    require: ['mdSelect', '^^mdTable'],\n    restrict: 'A',\n    scope: {\n      id: '@mdSelectId',\n      model: '=mdSelect',\n      disabled: '=ngDisabled',\n      onSelect: '=?mdOnSelect',\n      onDeselect: '=?mdOnDeselect',\n      autoSelect: '=mdAutoSelect'\n    }\n  };\n}\n\nmdSelect.$inject = ['$compile'];\n\nangular.module('md.data.table').directive('mdTable', mdTable);\n\nfunction Hash() {\n  var keys = {};\n    \n  this.equals = function (key, item) {\n    return keys[key] === item;\n  };\n\n  this.get = function (key) {\n    return keys[key];\n  };\n  \n  this.has = function (key) {\n    return keys.hasOwnProperty(key);\n  };\n\n  this.purge = function (key) {\n    delete keys[key];\n  };\n  \n  this.update = function (key, item) {\n    keys[key] = item;\n  };\n}\n\nfunction mdTable() {\n  \n  function compile(tElement, tAttrs) {\n    tElement.addClass('md-table');\n    \n    if(tAttrs.hasOwnProperty('mdProgress')) {\n      var body = tElement.find('tbody')[0];\n      var progress = angular.element('<thead class=\"md-table-progress\">');\n      \n      if(body) {\n        tElement[0].insertBefore(progress[0], body);\n      }\n    }\n  }\n  \n  function Controller($attrs, $element, $q, $scope) {\n    var self = this;\n    var queue = [];\n    var watchListener;\n    var modelChangeListeners = [];\n    \n    self.$$hash = new Hash();\n    self.$$columns = {};\n    \n    function enableRowSelection() {\n      self.$$rowSelect = true;\n      \n      watchListener = $scope.$watchCollection('$mdTable.selected', function (selected) {\n        modelChangeListeners.forEach(function (listener) {\n          listener(selected);\n        });\n      });\n      \n      $element.addClass('md-row-select');\n    }\n    \n    function disableRowSelection() {\n      self.$$rowSelect = false;\n      \n      if(angular.isFunction(watchListener)) {\n        watchListener();\n      }\n      \n      $element.removeClass('md-row-select');\n    }\n    \n    function resolvePromises() {\n      if(!queue.length) {\n        return $scope.$applyAsync();\n      }\n      \n      queue[0].then(function () {\n        queue.shift();\n        resolvePromises();\n      });\n    }\n    \n    function rowSelect() {\n      if($attrs.hasOwnProperty('mdRowSelect') && $attrs.mdRowSelect === '') {\n        return true;\n      }\n      \n      return self.rowSelect;\n    }\n    \n    function validateModel() {\n      if(!self.selected) {\n        return console.error('Row selection: ngModel is not defined.');\n      }\n      \n      if(!angular.isArray(self.selected)) {\n        return console.error('Row selection: Expected an array. Recived ' + typeof self.selected + '.');\n      }\n      \n      return true;\n    }\n    \n    self.columnCount = function () {\n      return self.getRows($element[0]).reduce(function (count, row) {\n        return row.cells.length > count ? row.cells.length : count;\n      }, 0);\n    };\n    \n    self.getRows = function (element) {\n      return Array.prototype.filter.call(element.rows, function (row) {\n        return !row.classList.contains('ng-leave');\n      });\n    };\n    \n    self.getBodyRows = function () {\n      return Array.prototype.reduce.call($element.prop('tBodies'), function (result, tbody) {\n        return result.concat(self.getRows(tbody));\n      }, []);\n    };\n    \n    self.getElement = function () {\n      return $element;\n    };\n    \n    self.getHeaderRows = function () {\n      return self.getRows($element.prop('tHead'));\n    };\n    \n    self.waitingOnPromise = function () {\n      return !!queue.length;\n    };\n    \n    self.queuePromise = function (promise) {\n      if(!promise) {\n        return;\n      }\n      \n      if(queue.push(angular.isArray(promise) ? $q.all(promise) : $q.when(promise)) === 1) {\n        resolvePromises();\n      }\n    };\n    \n    self.registerModelChangeListener = function (listener) {\n      modelChangeListeners.push(listener);\n    };\n    \n    self.removeModelChangeListener = function (listener) {\n      var index = modelChangeListeners.indexOf(listener);\n      \n      if(index !== -1) {\n        modelChangeListeners.splice(index, 1);\n      }\n    };\n    \n    if($attrs.hasOwnProperty('mdProgress')) {\n      $scope.$watch('$mdTable.progress', self.queuePromise);\n    }\n    \n    $scope.$watch(rowSelect, function (enable) {\n      if(enable && !!validateModel()) {\n        enableRowSelection();\n      } else {\n        disableRowSelection();\n      }\n    });\n  }\n  \n  Controller.$inject = ['$attrs', '$element', '$q', '$scope'];\n  \n  return {\n    bindToController: true,\n    compile: compile,\n    controller: Controller,\n    controllerAs: '$mdTable',\n    restrict: 'A',\n    scope: {\n      progress: '=?mdProgress',\n      selected: '=ngModel',\n      rowSelect: '=mdRowSelect'\n    }\n  };\n}\n\nangular.module('md.data.table').directive('mdTablePagination', mdTablePagination);\n\nfunction mdTablePagination() {\n  \n  function compile(tElement) {\n    tElement.addClass('md-table-pagination');\n  }\n  \n  function Controller($attrs, $scope) {\n    var self = this;\n    \n    self.$label = angular.extend({\n      page: 'Page:',\n      rowsPerPage: 'Rows per page:',\n      of: 'of'\n    }, $scope.$eval(self.label) || {});\n    \n    function isPositive(number) {\n      return number > 0;\n    }\n    \n    function isZero(number) {\n      return number === 0 || number === '0';\n    }\n    \n    self.disableNext = function () {\n      return isZero(self.limit) || !self.hasNext();\n    };\n    \n    self.first = function () {\n      self.page = 1;\n      self.onPaginationChange();\n    };\n    \n    self.hasNext = function () {\n      return self.page * self.limit < self.total;\n    };\n    \n    self.hasPrevious = function () {\n      return self.page > 1;\n    };\n    \n    self.last = function () {\n      self.page = self.pages();\n      self.onPaginationChange();\n    };\n    \n    self.max = function () {\n      return self.hasNext() ? self.page * self.limit : self.total;\n    };\n    \n    self.min = function () {\n      return self.page * self.limit - self.limit;\n    };\n    \n    self.next = function () {\n      self.page++;\n      self.onPaginationChange();\n    };\n    \n    self.onPaginationChange = function () {\n      if(angular.isFunction(self.onPaginate)) {\n        self.onPaginate(self.page, self.limit);\n      }\n    };\n    \n    self.pages = function () {\n      return Math.ceil(self.total / (isZero(self.limit) ? 1 : self.limit));\n    };\n    \n    self.previous = function () {\n      self.page--;\n      self.onPaginationChange();\n    };\n    \n    self.range = function (total) {\n      return new Array(isFinite(total) && isPositive(total) ? total : 1);\n    };\n    \n    self.showBoundaryLinks = function () {\n      if($attrs.hasOwnProperty('mdBoundaryLinks') && $attrs.mdBoundaryLinks === '') {\n        return true;\n      }\n      \n      return self.boundaryLinks;\n    };\n    \n    self.showPageSelect = function () {\n      if($attrs.hasOwnProperty('mdPageSelect') && $attrs.mdPageSelect === '') {\n        return true;\n      }\n      \n      return self.pageSelect;\n    };\n    \n    $scope.$watch('$pagination.limit', function (newValue, oldValue) {\n      if(newValue === oldValue) {\n        return;\n      }\n      \n      // find closest page from previous min\n      self.page = Math.floor(((self.page * oldValue - oldValue) + newValue) / (isZero(newValue) ? 1 : newValue));\n      self.onPaginationChange();\n    });\n  }\n  \n  Controller.$inject = ['$attrs', '$scope'];\n  \n  return {\n    bindToController: {\n      boundaryLinks: '=?mdBoundaryLinks',\n      label: '@?mdLabel',\n      limit: '=mdLimit',\n      page: '=mdPage',\n      pageSelect: '=?mdPageSelect',\n      onPaginate: '=?mdOnPaginate',\n      options: '=mdOptions',\n      total: '@mdTotal'\n    },\n    compile: compile,\n    controller: Controller,\n    controllerAs: '$pagination',\n    restrict: 'E',\n    scope: {},\n    templateUrl: 'md-table-pagination.html'\n  };\n}\n\nangular.module('md.data.table').directive('mdTableProgress', mdTableProgress);\n\nfunction mdTableProgress() {\n\n  function postLink(scope, element, attrs, tableCtrl) {\n    scope.columnCount = tableCtrl.columnCount;\n    scope.deferred = tableCtrl.waitingOnPromise;\n  }\n\n  return {\n    link: postLink,\n    require: '^^mdTable',\n    restrict: 'C',\n    scope: {},\n    templateUrl: 'md-table-progress.html'\n  };\n}\n\n})(window, angular);"]}}]